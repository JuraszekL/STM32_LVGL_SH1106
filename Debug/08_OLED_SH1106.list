
08_OLED_SH1106.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000286e0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000733c  080288d8  080288d8  000388d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802fc14  0802fc14  00040030  2**0
                  CONTENTS
  4 .ARM          00000008  0802fc14  0802fc14  0003fc14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802fc1c  0802fc1c  00040030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802fc1c  0802fc1c  0003fc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802fc20  0802fc20  0003fc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0802fc24  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cabc  20000030  0802fc54  00040030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000caec  0802fc54  0004caec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00076bfb  00000000  00000000  0004005e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000d8e0  00000000  00000000  000b6c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003b10  00000000  00000000  000c4540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000039f0  00000000  00000000  000c8050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039a0d  00000000  00000000  000cba40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00063a1d  00000000  00000000  0010544d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ff16  00000000  00000000  00168e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00278d80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f564  00000000  00000000  00278dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000030 	.word	0x20000030
 8000214:	00000000 	.word	0x00000000
 8000218:	080288c0 	.word	0x080288c0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000034 	.word	0x20000034
 8000234:	080288c0 	.word	0x080288c0

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800026c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000270:	f000 b974 	b.w	800055c <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9d08      	ldr	r5, [sp, #32]
 8000292:	4604      	mov	r4, r0
 8000294:	468e      	mov	lr, r1
 8000296:	2b00      	cmp	r3, #0
 8000298:	d14d      	bne.n	8000336 <__udivmoddi4+0xaa>
 800029a:	428a      	cmp	r2, r1
 800029c:	4694      	mov	ip, r2
 800029e:	d969      	bls.n	8000374 <__udivmoddi4+0xe8>
 80002a0:	fab2 f282 	clz	r2, r2
 80002a4:	b152      	cbz	r2, 80002bc <__udivmoddi4+0x30>
 80002a6:	fa01 f302 	lsl.w	r3, r1, r2
 80002aa:	f1c2 0120 	rsb	r1, r2, #32
 80002ae:	fa20 f101 	lsr.w	r1, r0, r1
 80002b2:	fa0c fc02 	lsl.w	ip, ip, r2
 80002b6:	ea41 0e03 	orr.w	lr, r1, r3
 80002ba:	4094      	lsls	r4, r2
 80002bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c0:	0c21      	lsrs	r1, r4, #16
 80002c2:	fbbe f6f8 	udiv	r6, lr, r8
 80002c6:	fa1f f78c 	uxth.w	r7, ip
 80002ca:	fb08 e316 	mls	r3, r8, r6, lr
 80002ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002d2:	fb06 f107 	mul.w	r1, r6, r7
 80002d6:	4299      	cmp	r1, r3
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x64>
 80002da:	eb1c 0303 	adds.w	r3, ip, r3
 80002de:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002e2:	f080 811f 	bcs.w	8000524 <__udivmoddi4+0x298>
 80002e6:	4299      	cmp	r1, r3
 80002e8:	f240 811c 	bls.w	8000524 <__udivmoddi4+0x298>
 80002ec:	3e02      	subs	r6, #2
 80002ee:	4463      	add	r3, ip
 80002f0:	1a5b      	subs	r3, r3, r1
 80002f2:	b2a4      	uxth	r4, r4
 80002f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002f8:	fb08 3310 	mls	r3, r8, r0, r3
 80002fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000300:	fb00 f707 	mul.w	r7, r0, r7
 8000304:	42a7      	cmp	r7, r4
 8000306:	d90a      	bls.n	800031e <__udivmoddi4+0x92>
 8000308:	eb1c 0404 	adds.w	r4, ip, r4
 800030c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000310:	f080 810a 	bcs.w	8000528 <__udivmoddi4+0x29c>
 8000314:	42a7      	cmp	r7, r4
 8000316:	f240 8107 	bls.w	8000528 <__udivmoddi4+0x29c>
 800031a:	4464      	add	r4, ip
 800031c:	3802      	subs	r0, #2
 800031e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000322:	1be4      	subs	r4, r4, r7
 8000324:	2600      	movs	r6, #0
 8000326:	b11d      	cbz	r5, 8000330 <__udivmoddi4+0xa4>
 8000328:	40d4      	lsrs	r4, r2
 800032a:	2300      	movs	r3, #0
 800032c:	e9c5 4300 	strd	r4, r3, [r5]
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0xc2>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80ef 	beq.w	800051e <__udivmoddi4+0x292>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x160>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xd4>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80f9 	bhi.w	8000552 <__udivmoddi4+0x2c6>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0303 	sbc.w	r3, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	469e      	mov	lr, r3
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0e0      	beq.n	8000330 <__udivmoddi4+0xa4>
 800036e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000372:	e7dd      	b.n	8000330 <__udivmoddi4+0xa4>
 8000374:	b902      	cbnz	r2, 8000378 <__udivmoddi4+0xec>
 8000376:	deff      	udf	#255	; 0xff
 8000378:	fab2 f282 	clz	r2, r2
 800037c:	2a00      	cmp	r2, #0
 800037e:	f040 8092 	bne.w	80004a6 <__udivmoddi4+0x21a>
 8000382:	eba1 010c 	sub.w	r1, r1, ip
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2601      	movs	r6, #1
 8000390:	0c20      	lsrs	r0, r4, #16
 8000392:	fbb1 f3f7 	udiv	r3, r1, r7
 8000396:	fb07 1113 	mls	r1, r7, r3, r1
 800039a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039e:	fb0e f003 	mul.w	r0, lr, r3
 80003a2:	4288      	cmp	r0, r1
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x12c>
 80003a6:	eb1c 0101 	adds.w	r1, ip, r1
 80003aa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x12a>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2c0>
 80003b6:	4643      	mov	r3, r8
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c0:	fb07 1110 	mls	r1, r7, r0, r1
 80003c4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x156>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x154>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2ca>
 80003e0:	4608      	mov	r0, r1
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ea:	e79c      	b.n	8000326 <__udivmoddi4+0x9a>
 80003ec:	f1c6 0720 	rsb	r7, r6, #32
 80003f0:	40b3      	lsls	r3, r6
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa20 f407 	lsr.w	r4, r0, r7
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	431c      	orrs	r4, r3
 8000404:	40f9      	lsrs	r1, r7
 8000406:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800040a:	fa00 f306 	lsl.w	r3, r0, r6
 800040e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000412:	0c20      	lsrs	r0, r4, #16
 8000414:	fa1f fe8c 	uxth.w	lr, ip
 8000418:	fb09 1118 	mls	r1, r9, r8, r1
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	fb08 f00e 	mul.w	r0, r8, lr
 8000424:	4288      	cmp	r0, r1
 8000426:	fa02 f206 	lsl.w	r2, r2, r6
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b8>
 800042c:	eb1c 0101 	adds.w	r1, ip, r1
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2bc>
 8000438:	4288      	cmp	r0, r1
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2bc>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4461      	add	r1, ip
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f9 	udiv	r0, r1, r9
 800044c:	fb09 1110 	mls	r1, r9, r0, r1
 8000450:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000454:	fb00 fe0e 	mul.w	lr, r0, lr
 8000458:	458e      	cmp	lr, r1
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1e2>
 800045c:	eb1c 0101 	adds.w	r1, ip, r1
 8000460:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2b4>
 8000466:	458e      	cmp	lr, r1
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2b4>
 800046a:	3802      	subs	r0, #2
 800046c:	4461      	add	r1, ip
 800046e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000472:	fba0 9402 	umull	r9, r4, r0, r2
 8000476:	eba1 010e 	sub.w	r1, r1, lr
 800047a:	42a1      	cmp	r1, r4
 800047c:	46c8      	mov	r8, r9
 800047e:	46a6      	mov	lr, r4
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x2a4>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x2a0>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x212>
 8000486:	ebb3 0208 	subs.w	r2, r3, r8
 800048a:	eb61 010e 	sbc.w	r1, r1, lr
 800048e:	fa01 f707 	lsl.w	r7, r1, r7
 8000492:	fa22 f306 	lsr.w	r3, r2, r6
 8000496:	40f1      	lsrs	r1, r6
 8000498:	431f      	orrs	r7, r3
 800049a:	e9c5 7100 	strd	r7, r1, [r5]
 800049e:	2600      	movs	r6, #0
 80004a0:	4631      	mov	r1, r6
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	40d8      	lsrs	r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa21 f303 	lsr.w	r3, r1, r3
 80004b4:	4091      	lsls	r1, r2
 80004b6:	4301      	orrs	r1, r0
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c4:	fb07 3610 	mls	r6, r7, r0, r3
 80004c8:	0c0b      	lsrs	r3, r1, #16
 80004ca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ce:	fb00 f60e 	mul.w	r6, r0, lr
 80004d2:	429e      	cmp	r6, r3
 80004d4:	fa04 f402 	lsl.w	r4, r4, r2
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x260>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b8>
 80004e4:	429e      	cmp	r6, r3
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b8>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1b9b      	subs	r3, r3, r6
 80004ee:	b289      	uxth	r1, r1
 80004f0:	fbb3 f6f7 	udiv	r6, r3, r7
 80004f4:	fb07 3316 	mls	r3, r7, r6, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb06 f30e 	mul.w	r3, r6, lr
 8000500:	428b      	cmp	r3, r1
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x28a>
 8000504:	eb1c 0101 	adds.w	r1, ip, r1
 8000508:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2b0>
 800050e:	428b      	cmp	r3, r1
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2b0>
 8000512:	3e02      	subs	r6, #2
 8000514:	4461      	add	r1, ip
 8000516:	1ac9      	subs	r1, r1, r3
 8000518:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0x104>
 800051e:	462e      	mov	r6, r5
 8000520:	4628      	mov	r0, r5
 8000522:	e705      	b.n	8000330 <__udivmoddi4+0xa4>
 8000524:	4606      	mov	r6, r0
 8000526:	e6e3      	b.n	80002f0 <__udivmoddi4+0x64>
 8000528:	4618      	mov	r0, r3
 800052a:	e6f8      	b.n	800031e <__udivmoddi4+0x92>
 800052c:	454b      	cmp	r3, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f8>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000538:	3801      	subs	r0, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f8>
 800053c:	4646      	mov	r6, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x28a>
 8000540:	4620      	mov	r0, r4
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1e2>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x260>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b8>
 800054c:	3b02      	subs	r3, #2
 800054e:	4461      	add	r1, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x12c>
 8000552:	4630      	mov	r0, r6
 8000554:	e709      	b.n	800036a <__udivmoddi4+0xde>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x156>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_DMA_Init+0x38>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <MX_DMA_Init+0x38>)
 800056c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_DMA_Init+0x38>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	2011      	movs	r0, #17
 8000584:	f001 f853 	bl	800162e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000588:	2011      	movs	r0, #17
 800058a:	f001 f86c 	bl	8001666 <HAL_NVIC_EnableIRQ>

}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40023800 	.word	0x40023800

0800059c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	4b31      	ldr	r3, [pc, #196]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a30      	ldr	r2, [pc, #192]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a2a      	ldr	r2, [pc, #168]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b28      	ldr	r3, [pc, #160]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a24      	ldr	r2, [pc, #144]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b22      	ldr	r3, [pc, #136]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <MX_GPIO_Init+0xdc>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a1e      	ldr	r2, [pc, #120]	; (8000678 <MX_GPIO_Init+0xdc>)
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_GPIO_Init+0xdc>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0308 	and.w	r3, r3, #8
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_GPIO_Init+0xdc>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a18      	ldr	r2, [pc, #96]	; (8000678 <MX_GPIO_Init+0xdc>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_GPIO_Init+0xdc>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000630:	4812      	ldr	r0, [pc, #72]	; (800067c <MX_GPIO_Init+0xe0>)
 8000632:	f001 fd93 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800063c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <MX_GPIO_Init+0xe4>)
 800064e:	f001 fbd9 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000652:	f244 0381 	movw	r3, #16513	; 0x4081
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_GPIO_Init+0xe0>)
 800066c:	f001 fbca 	bl	8001e04 <HAL_GPIO_Init>

}
 8000670:	bf00      	nop
 8000672:	3728      	adds	r7, #40	; 0x28
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40020400 	.word	0x40020400
 8000680:	40020800 	.word	0x40020800

08000684 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <MX_I2C1_Init+0x78>)
 800068a:	4a1d      	ldr	r2, [pc, #116]	; (8000700 <MX_I2C1_Init+0x7c>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20000209;
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_I2C1_Init+0x78>)
 8000690:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <MX_I2C1_Init+0x80>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <MX_I2C1_Init+0x78>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_I2C1_Init+0x78>)
 800069c:	2201      	movs	r2, #1
 800069e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_I2C1_Init+0x78>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_I2C1_Init+0x78>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_I2C1_Init+0x78>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2C1_Init+0x78>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b8:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_I2C1_Init+0x78>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006be:	480f      	ldr	r0, [pc, #60]	; (80006fc <MX_I2C1_Init+0x78>)
 80006c0:	f001 fd66 	bl	8002190 <HAL_I2C_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ca:	f000 fbfb 	bl	8000ec4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ce:	2100      	movs	r1, #0
 80006d0:	480a      	ldr	r0, [pc, #40]	; (80006fc <MX_I2C1_Init+0x78>)
 80006d2:	f003 fc4b 	bl	8003f6c <HAL_I2CEx_ConfigAnalogFilter>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006dc:	f000 fbf2 	bl	8000ec4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006e0:	2100      	movs	r1, #0
 80006e2:	4806      	ldr	r0, [pc, #24]	; (80006fc <MX_I2C1_Init+0x78>)
 80006e4:	f003 fc8d 	bl	8004002 <HAL_I2CEx_ConfigDigitalFilter>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ee:	f000 fbe9 	bl	8000ec4 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f003 fcd2 	bl	800409c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000004c 	.word	0x2000004c
 8000700:	40005400 	.word	0x40005400
 8000704:	20000209 	.word	0x20000209

08000708 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0ae      	sub	sp, #184	; 0xb8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2290      	movs	r2, #144	; 0x90
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f028 f8b9 	bl	80288a0 <memset>
  if(i2cHandle->Instance==I2C1)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a3d      	ldr	r2, [pc, #244]	; (8000828 <HAL_I2C_MspInit+0x120>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d172      	bne.n	800081e <HAL_I2C_MspInit+0x116>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000738:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800073c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800073e:	2300      	movs	r3, #0
 8000740:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4618      	mov	r0, r3
 8000748:	f004 f9fc 	bl	8004b44 <HAL_RCCEx_PeriphCLKConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000752:	f000 fbb7 	bl	8000ec4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	4b35      	ldr	r3, [pc, #212]	; (800082c <HAL_I2C_MspInit+0x124>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a34      	ldr	r2, [pc, #208]	; (800082c <HAL_I2C_MspInit+0x124>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b32      	ldr	r3, [pc, #200]	; (800082c <HAL_I2C_MspInit+0x124>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800076e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000776:	2312      	movs	r3, #18
 8000778:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000788:	2304      	movs	r3, #4
 800078a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000792:	4619      	mov	r1, r3
 8000794:	4826      	ldr	r0, [pc, #152]	; (8000830 <HAL_I2C_MspInit+0x128>)
 8000796:	f001 fb35 	bl	8001e04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800079a:	4b24      	ldr	r3, [pc, #144]	; (800082c <HAL_I2C_MspInit+0x124>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	4a23      	ldr	r2, [pc, #140]	; (800082c <HAL_I2C_MspInit+0x124>)
 80007a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a4:	6413      	str	r3, [r2, #64]	; 0x40
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <HAL_I2C_MspInit+0x124>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <HAL_I2C_MspInit+0x12c>)
 80007b4:	4a20      	ldr	r2, [pc, #128]	; (8000838 <HAL_I2C_MspInit+0x130>)
 80007b6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <HAL_I2C_MspInit+0x12c>)
 80007ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007be:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <HAL_I2C_MspInit+0x12c>)
 80007c2:	2240      	movs	r2, #64	; 0x40
 80007c4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007c6:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <HAL_I2C_MspInit+0x12c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <HAL_I2C_MspInit+0x12c>)
 80007ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007d2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <HAL_I2C_MspInit+0x12c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <HAL_I2C_MspInit+0x12c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <HAL_I2C_MspInit+0x12c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <HAL_I2C_MspInit+0x12c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <HAL_I2C_MspInit+0x12c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80007f2:	4810      	ldr	r0, [pc, #64]	; (8000834 <HAL_I2C_MspInit+0x12c>)
 80007f4:	f000 ff52 	bl	800169c <HAL_DMA_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 80007fe:	f000 fb61 	bl	8000ec4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a0b      	ldr	r2, [pc, #44]	; (8000834 <HAL_I2C_MspInit+0x12c>)
 8000806:	639a      	str	r2, [r3, #56]	; 0x38
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <HAL_I2C_MspInit+0x12c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	201f      	movs	r0, #31
 8000814:	f000 ff0b 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000818:	201f      	movs	r0, #31
 800081a:	f000 ff24 	bl	8001666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800081e:	bf00      	nop
 8000820:	37b8      	adds	r7, #184	; 0xb8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40005400 	.word	0x40005400
 800082c:	40023800 	.word	0x40023800
 8000830:	40020400 	.word	0x40020400
 8000834:	200000a0 	.word	0x200000a0
 8000838:	400260a0 	.word	0x400260a0

0800083c <lv_port_DispInit>:

/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_port_DispInit(I2C_HandleTypeDef *I2C){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    /*-------------------------
     * Initialize your display
     * -----------------------*/
    disp_init(I2C);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 f82f 	bl	80008a8 <disp_init>
     */

    /* Example for 1) */
    static lv_disp_draw_buf_t draw_buf_dsc_1;
    static lv_color_t buf_1[MY_DISP_HOR_RES * 10];                          /*A buffer for 10 rows*/
    lv_disp_draw_buf_init(&draw_buf_dsc_1, buf_1, NULL, MY_DISP_HOR_RES * 10);   /*Initialize the display buffer*/
 800084a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800084e:	2200      	movs	r2, #0
 8000850:	490f      	ldr	r1, [pc, #60]	; (8000890 <lv_port_DispInit+0x54>)
 8000852:	4810      	ldr	r0, [pc, #64]	; (8000894 <lv_port_DispInit+0x58>)
 8000854:	f021 fa16 	bl	8021c84 <lv_disp_draw_buf_init>
    /*-----------------------------------
     * Register the display in LVGL
     *----------------------------------*/

    static lv_disp_drv_t disp_drv;                         /*Descriptor of a display driver*/
    lv_disp_drv_init(&disp_drv);                    /*Basic initialization*/
 8000858:	480f      	ldr	r0, [pc, #60]	; (8000898 <lv_port_DispInit+0x5c>)
 800085a:	f021 f9cf 	bl	8021bfc <lv_disp_drv_init>

    /*Set up the functions to access to your display*/

    /*Set the resolution of the display*/
    disp_drv.hor_res = MY_DISP_HOR_RES;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <lv_port_DispInit+0x5c>)
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	801a      	strh	r2, [r3, #0]
    disp_drv.ver_res = MY_DISP_VER_RES;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <lv_port_DispInit+0x5c>)
 8000866:	2240      	movs	r2, #64	; 0x40
 8000868:	805a      	strh	r2, [r3, #2]

    /*Used to copy the buffer's content to the display*/
#if USE_DMA == 0
    disp_drv.flush_cb = disp_flush;
#else
    disp_drv.flush_cb = disp_flush_dma;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <lv_port_DispInit+0x5c>)
 800086c:	4a0b      	ldr	r2, [pc, #44]	; (800089c <lv_port_DispInit+0x60>)
 800086e:	615a      	str	r2, [r3, #20]
#endif
    disp_drv.set_px_cb = set_px_cb;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <lv_port_DispInit+0x5c>)
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <lv_port_DispInit+0x64>)
 8000874:	61da      	str	r2, [r3, #28]
    disp_drv.rounder_cb = rounder_cb;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <lv_port_DispInit+0x5c>)
 8000878:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <lv_port_DispInit+0x68>)
 800087a:	619a      	str	r2, [r3, #24]

    /*Set a display buffer*/
    disp_drv.draw_buf = &draw_buf_dsc_1;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <lv_port_DispInit+0x5c>)
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <lv_port_DispInit+0x58>)
 8000880:	60da      	str	r2, [r3, #12]
     * Note that, in lv_conf.h you can enable GPUs that has built-in support in LVGL.
     * But if you have a different GPU you can use with this callback.*/
    //disp_drv.gpu_fill_cb = gpu_fill;

    /*Finally register the driver*/
    lv_disp_drv_register(&disp_drv);
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <lv_port_DispInit+0x5c>)
 8000884:	f021 fa1a 	bl	8021cbc <lv_disp_drv_register>
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2000012c 	.word	0x2000012c
 8000894:	20000110 	.word	0x20000110
 8000898:	2000062c 	.word	0x2000062c
 800089c:	080008c1 	.word	0x080008c1
 80008a0:	0800097d 	.word	0x0800097d
 80008a4:	08000a11 	.word	0x08000a11

080008a8 <disp_init>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

/*Initialize your display and the required peripherals.*/
static void disp_init(I2C_HandleTypeDef *i2c){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

	SH1106_HwInit(i2c);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f000 fb8d 	bl	8000fd0 <SH1106_HwInit>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <disp_flush_dma>:
    lv_disp_flush_ready(disp_drv);
}

#else
static void disp_flush_dma(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
    if(disp_flush_enabled) {
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <disp_flush_dma+0x9c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d03e      	beq.n	8000954 <disp_flush_dma+0x94>
        /*The most simple case (but also the slowest) to put all pixels to the screen one-by-one*/

    	/* fill global variables */
    	PageStart = (area->y1 / 8);
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	da00      	bge.n	80008e2 <disp_flush_dma+0x22>
 80008e0:	3307      	adds	r3, #7
 80008e2:	10db      	asrs	r3, r3, #3
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <disp_flush_dma+0xa0>)
 80008ea:	701a      	strb	r2, [r3, #0]
    	uint8_t lastPage = (area->y2 / 8);
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	da00      	bge.n	80008f8 <disp_flush_dma+0x38>
 80008f6:	3307      	adds	r3, #7
 80008f8:	10db      	asrs	r3, r3, #3
 80008fa:	b21b      	sxth	r3, r3
 80008fc:	75fb      	strb	r3, [r7, #23]
    	PagesLeftToSend = lastPage - PageStart + 1;
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <disp_flush_dma+0xa0>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	7dfa      	ldrb	r2, [r7, #23]
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	b2db      	uxtb	r3, r3
 800090a:	3301      	adds	r3, #1
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <disp_flush_dma+0xa4>)
 8000910:	701a      	strb	r2, [r3, #0]
    	PagesToSend = PagesLeftToSend;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <disp_flush_dma+0xa4>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <disp_flush_dma+0xa8>)
 800091a:	701a      	strb	r2, [r3, #0]

    	BuffPointer = (uint8_t *)color_p;
 800091c:	4a13      	ldr	r2, [pc, #76]	; (800096c <disp_flush_dma+0xac>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6013      	str	r3, [r2, #0]
    	XPositionStart = area->x1;
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <disp_flush_dma+0xb0>)
 800092c:	701a      	strb	r2, [r3, #0]
    	XPixels = area->x2 - area->x1 + 1;
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093c:	b2db      	uxtb	r3, r3
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	3301      	adds	r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <disp_flush_dma+0xb4>)
 8000948:	701a      	strb	r2, [r3, #0]

    	DispDrv = disp_drv;
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <disp_flush_dma+0xb8>)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	6013      	str	r3, [r2, #0]

    	/* start the routine where the magic happens :) */
    	dma_send_routine();
 8000950:	f000 f87e 	bl	8000a50 <dma_send_routine>

    /*IMPORTANT!!!
     *do not inform now that you are ready with flushing because you are not!
     *dma_send_routine() will do it when routine will be finished */
//    lv_disp_flush_ready(disp_drv);
}
 8000954:	bf00      	nop
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000000 	.word	0x20000000
 8000960:	20000100 	.word	0x20000100
 8000964:	20000102 	.word	0x20000102
 8000968:	20000101 	.word	0x20000101
 800096c:	2000010c 	.word	0x2000010c
 8000970:	20000103 	.word	0x20000103
 8000974:	20000104 	.word	0x20000104
 8000978:	20000108 	.word	0x20000108

0800097c <set_px_cb>:

#endif

/* two examples taken from internet... */
static void set_px_cb(struct _lv_disp_drv_t * disp_drv, uint8_t * buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
        				lv_color_t color, lv_opa_t opa){
 800097c:	b480      	push	{r7}
 800097e:	b087      	sub	sp, #28
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	4611      	mov	r1, r2
 8000988:	461a      	mov	r2, r3
 800098a:	460b      	mov	r3, r1
 800098c:	80fb      	strh	r3, [r7, #6]
 800098e:	4613      	mov	r3, r2
 8000990:	80bb      	strh	r3, [r7, #4]

	uint16_t byte_index = x + ((y / 8) * buf_w);
 8000992:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000996:	2b00      	cmp	r3, #0
 8000998:	da00      	bge.n	800099c <set_px_cb+0x20>
 800099a:	3307      	adds	r3, #7
 800099c:	10db      	asrs	r3, r3, #3
 800099e:	b21b      	sxth	r3, r3
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	fb12 f303 	smulbb	r3, r2, r3
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	88bb      	ldrh	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	82fb      	strh	r3, [r7, #22]
	uint8_t  bit_index  = y & 0x7;
 80009b0:	8c3b      	ldrh	r3, [r7, #32]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	f003 0307 	and.w	r3, r3, #7
 80009b8:	757b      	strb	r3, [r7, #21]

	// == 0 inverts, so we get blue on black
	if(color.full == 0){
 80009ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10f      	bne.n	80009e2 <set_px_cb+0x66>

		BIT_SET( buf[byte_index], bit_index);
 80009c2:	8afb      	ldrh	r3, [r7, #22]
 80009c4:	68ba      	ldr	r2, [r7, #8]
 80009c6:	4413      	add	r3, r2
 80009c8:	7819      	ldrb	r1, [r3, #0]
 80009ca:	7d7b      	ldrb	r3, [r7, #21]
 80009cc:	2201      	movs	r2, #1
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	8afb      	ldrh	r3, [r7, #22]
 80009d6:	68b8      	ldr	r0, [r7, #8]
 80009d8:	4403      	add	r3, r0
 80009da:	430a      	orrs	r2, r1
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	701a      	strb	r2, [r3, #0]
	}
	else{

		BIT_CLEAR( buf[byte_index], bit_index);
	}
}
 80009e0:	e010      	b.n	8000a04 <set_px_cb+0x88>
		BIT_CLEAR( buf[byte_index], bit_index);
 80009e2:	8afb      	ldrh	r3, [r7, #22]
 80009e4:	68ba      	ldr	r2, [r7, #8]
 80009e6:	4413      	add	r3, r2
 80009e8:	7819      	ldrb	r1, [r3, #0]
 80009ea:	7d7b      	ldrb	r3, [r7, #21]
 80009ec:	2201      	movs	r2, #1
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	8afb      	ldrh	r3, [r7, #22]
 80009fa:	68b8      	ldr	r0, [r7, #8]
 80009fc:	4403      	add	r3, r0
 80009fe:	400a      	ands	r2, r1
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	701a      	strb	r2, [r3, #0]
}
 8000a04:	bf00      	nop
 8000a06:	371c      	adds	r7, #28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <rounder_cb>:


static void rounder_cb(struct _lv_disp_drv_t * disp_drv, lv_area_t * area){
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]

	area->y1 = (area->y1 & (~0x7));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a20:	f023 0307 	bic.w	r3, r3, #7
 8000a24:	b21a      	sxth	r2, r3
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	805a      	strh	r2, [r3, #2]
	area->y2 = ((area->y2 & (~0x7)) + 7);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	f023 0307 	bic.w	r3, r3, #7
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	3307      	adds	r3, #7
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	b21a      	sxth	r2, r3
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	80da      	strh	r2, [r3, #6]
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <dma_send_routine>:

#if USE_DMA
/* this function should be called everytime:
 * - if the last transfer has been finished
 * - if we want to send a new buffer */
static void dma_send_routine(void){
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0

	if(PagesLeftToSend > 0){
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <dma_send_routine+0x74>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d028      	beq.n	8000ab2 <dma_send_routine+0x62>

		/* if there is still something to send... */
		uint8_t page_shift = PagesToSend - PagesLeftToSend;
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <dma_send_routine+0x78>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <dma_send_routine+0x74>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	71fb      	strb	r3, [r7, #7]
		uint8_t temp_page = (PageStart + page_shift);
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <dma_send_routine+0x7c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4413      	add	r3, r2
 8000a7a:	71bb      	strb	r3, [r7, #6]
		SH1106_WritePageNoBlock(temp_page, XPositionStart, XPixels, &BuffPointer[page_shift * XPixels]);
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <dma_send_routine+0x80>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2d9      	uxtb	r1, r3
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <dma_send_routine+0x84>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b2dc      	uxtb	r4, r3
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <dma_send_routine+0x88>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	79fa      	ldrb	r2, [r7, #7]
 8000a8e:	4811      	ldr	r0, [pc, #68]	; (8000ad4 <dma_send_routine+0x84>)
 8000a90:	7800      	ldrb	r0, [r0, #0]
 8000a92:	b2c0      	uxtb	r0, r0
 8000a94:	fb00 f202 	mul.w	r2, r0, r2
 8000a98:	4413      	add	r3, r2
 8000a9a:	79b8      	ldrb	r0, [r7, #6]
 8000a9c:	4622      	mov	r2, r4
 8000a9e:	f000 fadf 	bl	8001060 <SH1106_WritePageNoBlock>
		PagesLeftToSend--;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <dma_send_routine+0x74>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <dma_send_routine+0x74>)
 8000aae:	701a      	strb	r2, [r3, #0]

		/*IMPORTANT!!
		 * Here inform the graphics library that you are ready with the flushing */
		lv_disp_flush_ready(DispDrv);
	}
}
 8000ab0:	e004      	b.n	8000abc <dma_send_routine+0x6c>
		lv_disp_flush_ready(DispDrv);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <dma_send_routine+0x8c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f021 fa3c 	bl	8021f34 <lv_disp_flush_ready>
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd90      	pop	{r4, r7, pc}
 8000ac4:	20000102 	.word	0x20000102
 8000ac8:	20000101 	.word	0x20000101
 8000acc:	20000100 	.word	0x20000100
 8000ad0:	20000103 	.word	0x20000103
 8000ad4:	20000104 	.word	0x20000104
 8000ad8:	2000010c 	.word	0x2000010c
 8000adc:	20000108 	.word	0x20000108

08000ae0 <lv_port_DmaTxComplete>:


/* external function for user to call when transfer is complete */
void lv_port_DmaTxComplete(void){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

	dma_send_routine();
 8000ae4:	f7ff ffb4 	bl	8000a50 <dma_send_routine>
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <lv_timer_handler_run_in_period>:
 * with a given period in ms. You can use it with sleep or delay in OS environment.
 * This function is used to simplify the porting.
 * @param __ms the period for running lv_timer_handler()
 */
static inline LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_timer_handler_run_in_period(uint32_t ms)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
    static uint32_t last_tick = 0;
    uint32_t curr_tick = lv_tick_get();
 8000af4:	f021 fa6e 	bl	8021fd4 <lv_tick_get>
 8000af8:	60f8      	str	r0, [r7, #12]

    if((curr_tick - last_tick) >= (ms)) {
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <lv_timer_handler_run_in_period+0x34>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d806      	bhi.n	8000b16 <lv_timer_handler_run_in_period+0x2a>
        last_tick = curr_tick;
 8000b08:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <lv_timer_handler_run_in_period+0x34>)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6013      	str	r3, [r2, #0]
        return lv_timer_handler();
 8000b0e:	f024 fc1f 	bl	8025350 <lv_timer_handler>
 8000b12:	4603      	mov	r3, r0
 8000b14:	e000      	b.n	8000b18 <lv_timer_handler_run_in_period+0x2c>
    }
    return 1;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000067c 	.word	0x2000067c

08000b24 <lv_anim_set_var>:
 * Set a variable to animate
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
    a->var = var;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	683a      	ldr	r2, [r7, #0]
 8000b32:	601a      	str	r2, [r3, #0]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <lv_anim_set_exec_cb>:
 * @param exec_cb   a function to execute during animation
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
    a->time = duration;
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <lv_anim_set_values>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	68ba      	ldr	r2, [r7, #8]
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <lv_anim_set_path_cb>:
 * Set the path (curve) of the animation.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param path_cb a function to set the current value of the animation.
 */
static inline void lv_anim_set_path_cb(lv_anim_t * a, lv_anim_path_cb_t path_cb)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
    a->path_cb = path_cb;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	61da      	str	r2, [r3, #28]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <lv_anim_set_playback_time>:
 * Make the animation to play back to when the forward direction is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param time      the duration of the playback animation in milliseconds. 0: disable playback
 */
static inline void lv_anim_set_playback_time(lv_anim_t * a, uint32_t time)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	6039      	str	r1, [r7, #0]
    a->playback_time = time;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <lv_anim_set_playback_delay>:
 * Make the animation to play back to when the forward direction is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before starting the playback animation.
 */
static inline void lv_anim_set_playback_delay(lv_anim_t * a, uint32_t delay)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
    a->playback_delay = delay;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <lv_anim_set_repeat_count>:
 * Make the animation repeat itself.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	807b      	strh	r3, [r7, #2]
    a->repeat_cnt = cnt;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	887a      	ldrh	r2, [r7, #2]
 8000c06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <lv_anim_set_repeat_delay>:
 * Set a delay before repeating the animation.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	6039      	str	r1, [r7, #0]
    a->repeat_delay = delay;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <lv_scr_load>:
{
    return lv_disp_get_layer_sys(lv_disp_get_default());
}

static inline void lv_scr_load(lv_obj_t * scr)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
    lv_disp_load_scr(scr);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f005 fc14 	bl	8006468 <lv_disp_load_scr>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4e:	f000 fbb6 	bl	80013be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c52:	f000 f839 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c56:	f7ff fca1 	bl	800059c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c5a:	f7ff fc81 	bl	8000560 <MX_DMA_Init>
  MX_I2C1_Init();
 8000c5e:	f7ff fd11 	bl	8000684 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000c62:	f000 faf3 	bl	800124c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000c66:	f000 fa95 	bl	8001194 <MX_TIM6_Init>
  /////////////////////////////////////////////////////////////////

  // LVGL init

  /////////////////////////////////////////////////////////////////
  lv_init();
 8000c6a:	f007 f8b9 	bl	8007de0 <lv_init>
  lv_port_DispInit(&hi2c1);
 8000c6e:	4813      	ldr	r0, [pc, #76]	; (8000cbc <main+0x74>)
 8000c70:	f7ff fde4 	bl	800083c <lv_port_DispInit>
  HAL_TIM_Base_Start_IT(&htim6);
 8000c74:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <main+0x78>)
 8000c76:	f004 fbe5 	bl	8005444 <HAL_TIM_Base_Start_IT>

  lv_obj_t *scr = lv_obj_create(NULL);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f007 f902 	bl	8007e84 <lv_obj_create>
 8000c80:	6178      	str	r0, [r7, #20]
  lv_style_t style_1;
  lv_style_init(&style_1);
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	4618      	mov	r0, r3
 8000c86:	f023 ff67 	bl	8024b58 <lv_style_init>
  lv_obj_add_style(scr, &style_1, LV_PART_MAIN);
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4619      	mov	r1, r3
 8000c90:	6978      	ldr	r0, [r7, #20]
 8000c92:	f00d fc77 	bl	800e584 <lv_obj_add_style>

  lv_obj_t *label = lv_label_create(scr);
 8000c96:	6978      	ldr	r0, [r7, #20]
 8000c98:	f026 fa8e 	bl	80271b8 <lv_label_create>
 8000c9c:	6138      	str	r0, [r7, #16]
  lv_label_set_text(label, LV_SYMBOL_BLUETOOTH);
 8000c9e:	4909      	ldr	r1, [pc, #36]	; (8000cc4 <main+0x7c>)
 8000ca0:	6938      	ldr	r0, [r7, #16]
 8000ca2:	f026 fa9d 	bl	80271e0 <lv_label_set_text>
//  lv_obj_set_pos(label, 20, 20);
  lv_scr_load(scr);
 8000ca6:	6978      	ldr	r0, [r7, #20]
 8000ca8:	f7ff ffc3 	bl	8000c32 <lv_scr_load>

  lv_example_anim_2(label);
 8000cac:	6938      	ldr	r0, [r7, #16]
 8000cae:	f000 f8b1 	bl	8000e14 <lv_example_anim_2>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  lv_timer_handler_run_in_period(5);
 8000cb2:	2005      	movs	r0, #5
 8000cb4:	f7ff ff1a 	bl	8000aec <lv_timer_handler_run_in_period>
 8000cb8:	e7fb      	b.n	8000cb2 <main+0x6a>
 8000cba:	bf00      	nop
 8000cbc:	2000004c 	.word	0x2000004c
 8000cc0:	20000684 	.word	0x20000684
 8000cc4:	080288d8 	.word	0x080288d8

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b094      	sub	sp, #80	; 0x50
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	2234      	movs	r2, #52	; 0x34
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f027 fde2 	bl	80288a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cec:	f003 f9f6 	bl	80040dc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <SystemClock_Config+0xdc>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	4a2b      	ldr	r2, [pc, #172]	; (8000da4 <SystemClock_Config+0xdc>)
 8000cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <SystemClock_Config+0xdc>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <SystemClock_Config+0xe0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d10:	4a25      	ldr	r2, [pc, #148]	; (8000da8 <SystemClock_Config+0xe0>)
 8000d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <SystemClock_Config+0xe0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d24:	2301      	movs	r3, #1
 8000d26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d28:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d2c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d3c:	2360      	movs	r3, #96	; 0x60
 8000d3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d40:	2302      	movs	r3, #2
 8000d42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d44:	2304      	movs	r3, #4
 8000d46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	4618      	mov	r0, r3
 8000d52:	f003 fa23 	bl	800419c <HAL_RCC_OscConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d5c:	f000 f8b2 	bl	8000ec4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d60:	f003 f9cc 	bl	80040fc <HAL_PWREx_EnableOverDrive>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d6a:	f000 f8ab 	bl	8000ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6e:	230f      	movs	r3, #15
 8000d70:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d72:	2302      	movs	r3, #2
 8000d74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d84:	f107 0308 	add.w	r3, r7, #8
 8000d88:	2103      	movs	r1, #3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 fcb4 	bl	80046f8 <HAL_RCC_ClockConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d96:	f000 f895 	bl	8000ec4 <Error_Handler>
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	3750      	adds	r7, #80	; 0x50
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40007000 	.word	0x40007000

08000dac <HAL_TIM_PeriodElapsedCallback>:

// Interrupt callbacks

/////////////////////////////////////////////////////////////////

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6){
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d102      	bne.n	8000dc4 <HAL_TIM_PeriodElapsedCallback+0x18>

		lv_tick_inc(1);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f021 f8f0 	bl	8021fa4 <lv_tick_inc>
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40001000 	.word	0x40001000

08000dd0 <HAL_I2C_MemTxCpltCallback>:

#if USE_DMA
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

	if(hi2c->Instance == I2C1){
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_I2C_MemTxCpltCallback+0x20>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_I2C_MemTxCpltCallback+0x16>

		lv_port_DmaTxComplete();
 8000de2:	f7ff fe7d 	bl	8000ae0 <lv_port_DmaTxComplete>
	}
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40005400 	.word	0x40005400

08000df4 <anim_x_cb>:
/////////////////////////////////////////////////////////////////

// Animations

/////////////////////////////////////////////////////////////////
static void anim_x_cb(void *var, uint8_t v){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]

    lv_obj_set_x(var, v);
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	b21b      	sxth	r3, r3
 8000e04:	4619      	mov	r1, r3
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f009 fbe1 	bl	800a5ce <lv_obj_set_x>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <lv_example_anim_2>:


void lv_example_anim_2(lv_obj_t * obj){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b094      	sub	sp, #80	; 0x50
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

    lv_obj_align(obj, LV_ALIGN_LEFT_MID, 10, 0);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	220a      	movs	r2, #10
 8000e20:	2107      	movs	r1, #7
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f009 fed6 	bl	800abd4 <lv_obj_align>

    lv_anim_t a;
    lv_anim_init(&a);
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f021 f925 	bl	802207c <lv_anim_init>
    lv_anim_set_var(&a, obj);
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fe73 	bl	8000b24 <lv_anim_set_var>

    lv_anim_set_exec_cb(&a, (lv_anim_exec_xcb_t)anim_x_cb);
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	491e      	ldr	r1, [pc, #120]	; (8000ebc <lv_example_anim_2+0xa8>)
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fe7b 	bl	8000b40 <lv_anim_set_exec_cb>
    lv_anim_set_values(&a, 10, 80);
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	2250      	movs	r2, #80	; 0x50
 8000e50:	210a      	movs	r1, #10
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fe90 	bl	8000b78 <lv_anim_set_values>
    lv_anim_set_time(&a, 1000);
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fe7b 	bl	8000b5c <lv_anim_set_time>
    lv_anim_set_playback_delay(&a, 100);
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	2164      	movs	r1, #100	; 0x64
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff feb4 	bl	8000bda <lv_anim_set_playback_delay>
    lv_anim_set_playback_time(&a, 300);
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fe9f 	bl	8000bbe <lv_anim_set_playback_time>
    lv_anim_set_repeat_delay(&a, 500);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fec4 	bl	8000c16 <lv_anim_set_repeat_delay>
    lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fead 	bl	8000bf6 <lv_anim_set_repeat_count>
    lv_anim_set_path_cb(&a, lv_anim_path_ease_in_out);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <lv_example_anim_2+0xac>)
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fe7d 	bl	8000ba2 <lv_anim_set_path_cb>

    lv_anim_start(&a);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	4618      	mov	r0, r3
 8000eae:	f021 f90b 	bl	80220c8 <lv_anim_start>
}
 8000eb2:	bf00      	nop
 8000eb4:	3750      	adds	r7, #80	; 0x50
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	08000df5 	.word	0x08000df5
 8000ec0:	08022383 	.word	0x08022383

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <Error_Handler+0x8>
	...

08000ed0 <sh1106_cmd>:
/*********************************************************************************/
							// Low level I2C functions //
/*********************************************************************************/

// send single command
static void sh1106_cmd(uint8_t cmd){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af04      	add	r7, sp, #16
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_CMD, 1, &cmd, 1, SH1106_TIMEOUT_MS);
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <sh1106_cmd+0x2c>)
 8000edc:	6818      	ldr	r0, [r3, #0]
 8000ede:	2364      	movs	r3, #100	; 0x64
 8000ee0:	9302      	str	r3, [sp, #8]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2301      	movs	r3, #1
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	2178      	movs	r1, #120	; 0x78
 8000ef0:	f001 f9de 	bl	80022b0 <HAL_I2C_Mem_Write>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000680 	.word	0x20000680

08000f00 <sh1106_multi_cmd>:

// send more commands in one transfer
static void sh1106_multi_cmd(uint8_t *cmd, uint8_t len){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af04      	add	r7, sp, #16
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	70fb      	strb	r3, [r7, #3]

	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_MULTI_CMD, 1, cmd, len, SH1106_TIMEOUT_MS);
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <sh1106_multi_cmd+0x30>)
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	2264      	movs	r2, #100	; 0x64
 8000f16:	9202      	str	r2, [sp, #8]
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	2200      	movs	r2, #0
 8000f22:	2178      	movs	r1, #120	; 0x78
 8000f24:	f001 f9c4 	bl	80022b0 <HAL_I2C_Mem_Write>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000680 	.word	0x20000680

08000f34 <sh1106_multi_data_noblock>:

	HAL_I2C_Mem_Write(sh1106_i2c, SH1106_ADR, SH1106_MULTI_DATA, 1, data, len, SH1106_TIMEOUT_MS);
}

// send buffer with data (non-blocking)
static void sh1106_multi_data_noblock(uint8_t *data, uint8_t len){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70fb      	strb	r3, [r7, #3]

	HAL_I2C_Mem_Write_DMA(sh1106_i2c, SH1106_ADR, SH1106_MULTI_DATA, 1, data, len);
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <sh1106_multi_data_noblock+0x2c>)
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	2240      	movs	r2, #64	; 0x40
 8000f52:	2178      	movs	r1, #120	; 0x78
 8000f54:	f001 fac0 	bl	80024d8 <HAL_I2C_Mem_Write_DMA>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000680 	.word	0x20000680

08000f64 <sh1106_set_col>:

/*********************************************************************************/
								// Basic functions //
/*********************************************************************************/

static void sh1106_set_col(uint8_t col){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]

	uint8_t buff[2];

	buff[0] = ((col + SH1106_OFFSET) & 0b00001111) | SET_L_COL_ADDR;
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	3302      	adds	r3, #2
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	f003 030f 	and.w	r3, r3, #15
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	733b      	strb	r3, [r7, #12]
	buff[1] = ((col + SH1106_OFFSET) >> 4) | SET_H_COL_ADDR;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	3302      	adds	r3, #2
 8000f80:	111b      	asrs	r3, r3, #4
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	737b      	strb	r3, [r7, #13]

	sh1106_multi_cmd(buff, 2);
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	2102      	movs	r1, #2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ffb3 	bl	8000f00 <sh1106_multi_cmd>
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <sh1106_set_page>:

static void sh1106_set_page(uint8_t page){
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	71fb      	strb	r3, [r7, #7]

	uint8_t a = (page & 0b00000111) | SET_PAGE_ADDR;
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	73fb      	strb	r3, [r7, #15]

	sh1106_cmd(a);
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff85 	bl	8000ed0 <sh1106_cmd>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <SH1106_HwInit>:

							// oled initialization //

/*********************************************************************************/

void SH1106_HwInit(I2C_HandleTypeDef *i2c){
 8000fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fd4:	b087      	sub	sp, #28
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	466b      	mov	r3, sp
 8000fdc:	461e      	mov	r6, r3

	sh1106_i2c = i2c;
 8000fde:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <SH1106_HwInit+0x88>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6013      	str	r3, [r2, #0]

	uint8_t a = sizeof(init_commands);
 8000fe4:	2317      	movs	r3, #23
 8000fe6:	75fb      	strb	r3, [r7, #23]
	uint8_t tab[a];
 8000fe8:	7df9      	ldrb	r1, [r7, #23]
 8000fea:	460b      	mov	r3, r1
 8000fec:	3b01      	subs	r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	b2cb      	uxtb	r3, r1
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	4698      	mov	r8, r3
 8000ff6:	4691      	mov	r9, r2
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001004:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001008:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800100c:	b2cb      	uxtb	r3, r1
 800100e:	2200      	movs	r2, #0
 8001010:	461c      	mov	r4, r3
 8001012:	4615      	mov	r5, r2
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	f04f 0300 	mov.w	r3, #0
 800101c:	00eb      	lsls	r3, r5, #3
 800101e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001022:	00e2      	lsls	r2, r4, #3
 8001024:	460b      	mov	r3, r1
 8001026:	3307      	adds	r3, #7
 8001028:	08db      	lsrs	r3, r3, #3
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	ebad 0d03 	sub.w	sp, sp, r3
 8001030:	466b      	mov	r3, sp
 8001032:	3300      	adds	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]

	memcpy(tab, init_commands, a);
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	461a      	mov	r2, r3
 800103a:	4908      	ldr	r1, [pc, #32]	; (800105c <SH1106_HwInit+0x8c>)
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f027 fc21 	bl	8028884 <memcpy>

	sh1106_multi_cmd(tab, a);
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	4619      	mov	r1, r3
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f7ff ff5a 	bl	8000f00 <sh1106_multi_cmd>
 800104c:	46b5      	mov	sp, r6
}
 800104e:	bf00      	nop
 8001050:	371c      	adds	r7, #28
 8001052:	46bd      	mov	sp, r7
 8001054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001058:	20000680 	.word	0x20000680
 800105c:	08028918 	.word	0x08028918

08001060 <SH1106_WritePageNoBlock>:

					// Send single page in non-blocking mode //

/*********************************************************************************/

void SH1106_WritePageNoBlock(uint8_t Page, uint8_t XStart, uint8_t Len, uint8_t *Buff){
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	460b      	mov	r3, r1
 800106e:	71bb      	strb	r3, [r7, #6]
 8001070:	4613      	mov	r3, r2
 8001072:	717b      	strb	r3, [r7, #5]

	sh1106_set_page(Page);
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff93 	bl	8000fa2 <sh1106_set_page>
	sh1106_set_col(XStart);
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff70 	bl	8000f64 <sh1106_set_col>
	sh1106_multi_data_noblock(Buff, Len);
 8001084:	797b      	ldrb	r3, [r7, #5]
 8001086:	4619      	mov	r1, r3
 8001088:	6838      	ldr	r0, [r7, #0]
 800108a:	f7ff ff53 	bl	8000f34 <sh1106_multi_data_noblock>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <HAL_MspInit+0x44>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <HAL_MspInit+0x44>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_MspInit+0x44>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_MspInit+0x44>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_MspInit+0x44>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_MspInit+0x44>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <NMI_Handler+0x4>

080010e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler+0x4>

080010f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <UsageFault_Handler+0x4>

080010fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112c:	f000 f984 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}

08001134 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <DMA1_Stream6_IRQHandler+0x10>)
 800113a:	f000 fbdf 	bl	80018fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200000a0 	.word	0x200000a0

08001148 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <I2C1_EV_IRQHandler+0x10>)
 800114e:	f001 faa9 	bl	80026a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000004c 	.word	0x2000004c

0800115c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <TIM6_DAC_IRQHandler+0x10>)
 8001162:	f004 f9e7 	bl	8005534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000684 	.word	0x20000684

08001170 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <SystemInit+0x20>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <SystemInit+0x20>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_TIM6_Init+0x64>)
 80011a6:	4a15      	ldr	r2, [pc, #84]	; (80011fc <MX_TIM6_Init+0x68>)
 80011a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 959;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_TIM6_Init+0x64>)
 80011ac:	f240 32bf 	movw	r2, #959	; 0x3bf
 80011b0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_TIM6_Init+0x64>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_TIM6_Init+0x64>)
 80011ba:	2263      	movs	r2, #99	; 0x63
 80011bc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_TIM6_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <MX_TIM6_Init+0x64>)
 80011c6:	f004 f8e5 	bl	8005394 <HAL_TIM_Base_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011d0:	f7ff fe78 	bl	8000ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011d4:	2320      	movs	r3, #32
 80011d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_TIM6_Init+0x64>)
 80011e2:	f004 fb8f 	bl	8005904 <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011ec:	f7ff fe6a 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000684 	.word	0x20000684
 80011fc:	40001000 	.word	0x40001000

08001200 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <HAL_TIM_Base_MspInit+0x44>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d113      	bne.n	800123a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <HAL_TIM_Base_MspInit+0x48>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <HAL_TIM_Base_MspInit+0x48>)
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_TIM_Base_MspInit+0x48>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2036      	movs	r0, #54	; 0x36
 8001230:	f000 f9fd 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001234:	2036      	movs	r0, #54	; 0x36
 8001236:	f000 fa16 	bl	8001666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40001000 	.word	0x40001000
 8001248:	40023800 	.word	0x40023800

0800124c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_USART3_UART_Init+0x58>)
 8001252:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <MX_USART3_UART_Init+0x5c>)
 8001254:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <MX_USART3_UART_Init+0x58>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_USART3_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_USART3_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_USART3_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_USART3_UART_Init+0x58>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_USART3_UART_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_USART3_UART_Init+0x58>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_USART3_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_USART3_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_USART3_UART_Init+0x58>)
 8001290:	f004 fbe4 	bl	8005a5c <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800129a:	f7ff fe13 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200006d0 	.word	0x200006d0
 80012a8:	40004800 	.word	0x40004800

080012ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0ae      	sub	sp, #184	; 0xb8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2290      	movs	r2, #144	; 0x90
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f027 fae7 	bl	80288a0 <memset>
  if(uartHandle->Instance==USART3)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <HAL_UART_MspInit+0xb4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d13c      	bne.n	8001356 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 fc2a 	bl	8004b44 <HAL_RCCEx_PeriphCLKConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012f6:	f7ff fde5 	bl	8000ec4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_UART_MspInit+0xb8>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	4a19      	ldr	r2, [pc, #100]	; (8001364 <HAL_UART_MspInit+0xb8>)
 8001300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001304:	6413      	str	r3, [r2, #64]	; 0x40
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <HAL_UART_MspInit+0xb8>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <HAL_UART_MspInit+0xb8>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <HAL_UART_MspInit+0xb8>)
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_UART_MspInit+0xb8>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800132a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800132e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001344:	2307      	movs	r3, #7
 8001346:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800134e:	4619      	mov	r1, r3
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <HAL_UART_MspInit+0xbc>)
 8001352:	f000 fd57 	bl	8001e04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001356:	bf00      	nop
 8001358:	37b8      	adds	r7, #184	; 0xb8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40004800 	.word	0x40004800
 8001364:	40023800 	.word	0x40023800
 8001368:	40020c00 	.word	0x40020c00

0800136c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800136c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001370:	480d      	ldr	r0, [pc, #52]	; (80013a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001372:	490e      	ldr	r1, [pc, #56]	; (80013ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001374:	4a0e      	ldr	r2, [pc, #56]	; (80013b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001378:	e002      	b.n	8001380 <LoopCopyDataInit>

0800137a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800137c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137e:	3304      	adds	r3, #4

08001380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001384:	d3f9      	bcc.n	800137a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001388:	4c0b      	ldr	r4, [pc, #44]	; (80013b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800138c:	e001      	b.n	8001392 <LoopFillZerobss>

0800138e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001390:	3204      	adds	r2, #4

08001392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001394:	d3fb      	bcc.n	800138e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001396:	f7ff feeb 	bl	8001170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800139a:	f027 fa4f 	bl	802883c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139e:	f7ff fc53 	bl	8000c48 <main>
  bx  lr    
 80013a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013a4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ac:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80013b0:	0802fc24 	.word	0x0802fc24
  ldr r2, =_sbss
 80013b4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80013b8:	2000caec 	.word	0x2000caec

080013bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <ADC_IRQHandler>

080013be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c2:	2003      	movs	r0, #3
 80013c4:	f000 f928 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f000 f805 	bl	80013d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ce:	f7ff fe63 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_InitTick+0x54>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_InitTick+0x58>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f943 	bl	8001682 <HAL_SYSTICK_Config>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e00e      	b.n	8001424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d80a      	bhi.n	8001422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001414:	f000 f90b 	bl	800162e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001418:	4a06      	ldr	r2, [pc, #24]	; (8001434 <HAL_InitTick+0x5c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000004 	.word	0x20000004
 8001430:	2000000c 	.word	0x2000000c
 8001434:	20000008 	.word	0x20000008

08001438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x20>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x24>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <HAL_IncTick+0x24>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	2000000c 	.word	0x2000000c
 800145c:	20000758 	.word	0x20000758

08001460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000758 	.word	0x20000758

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <__NVIC_SetPriorityGrouping+0x40>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <__NVIC_SetPriorityGrouping+0x40>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00
 80014bc:	05fa0000 	.word	0x05fa0000

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f8:	f7ff ff8e 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff29 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001640:	f7ff ff3e 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 8001644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff ff8e 	bl	800156c <NVIC_EncodePriority>
 8001650:	4602      	mov	r2, r0
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff5d 	bl	8001518 <__NVIC_SetPriority>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff31 	bl	80014dc <__NVIC_EnableIRQ>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffa2 	bl	80015d4 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff feda 	bl	8001460 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e099      	b.n	80017ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2202      	movs	r2, #2
 80016bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0201 	bic.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016d8:	e00f      	b.n	80016fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016da:	f7ff fec1 	bl	8001460 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d908      	bls.n	80016fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2220      	movs	r2, #32
 80016ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2203      	movs	r2, #3
 80016f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e078      	b.n	80017ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e8      	bne.n	80016da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <HAL_DMA_Init+0x158>)
 8001714:	4013      	ands	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001726:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001732:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800173e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4313      	orrs	r3, r2
 800174a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	2b04      	cmp	r3, #4
 8001752:	d107      	bne.n	8001764 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	4313      	orrs	r3, r2
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4313      	orrs	r3, r2
 8001762:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f023 0307 	bic.w	r3, r3, #7
 800177a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	4313      	orrs	r3, r2
 8001784:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	2b04      	cmp	r3, #4
 800178c:	d117      	bne.n	80017be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4313      	orrs	r3, r2
 8001796:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00e      	beq.n	80017be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 fab3 	bl	8001d0c <DMA_CheckFifoParam>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2240      	movs	r2, #64	; 0x40
 80017b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017ba:	2301      	movs	r3, #1
 80017bc:	e016      	b.n	80017ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 fa6a 	bl	8001ca0 <DMA_CalcBaseAndBitshift>
 80017cc:	4603      	mov	r3, r0
 80017ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d4:	223f      	movs	r2, #63	; 0x3f
 80017d6:	409a      	lsls	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	e010803f 	.word	0xe010803f

080017f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001816:	2b01      	cmp	r3, #1
 8001818:	d101      	bne.n	800181e <HAL_DMA_Start_IT+0x26>
 800181a:	2302      	movs	r3, #2
 800181c:	e048      	b.n	80018b0 <HAL_DMA_Start_IT+0xb8>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b01      	cmp	r3, #1
 8001830:	d137      	bne.n	80018a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2202      	movs	r2, #2
 8001836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 f9fc 	bl	8001c44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001850:	223f      	movs	r2, #63	; 0x3f
 8001852:	409a      	lsls	r2, r3
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0216 	orr.w	r2, r2, #22
 8001866:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695a      	ldr	r2, [r3, #20]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001876:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	2b00      	cmp	r3, #0
 800187e:	d007      	beq.n	8001890 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0208 	orr.w	r2, r2, #8
 800188e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e005      	b.n	80018ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018aa:	2302      	movs	r3, #2
 80018ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d004      	beq.n	80018d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2280      	movs	r2, #128	; 0x80
 80018d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00c      	b.n	80018f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2205      	movs	r2, #5
 80018da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0201 	bic.w	r2, r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001908:	4b8e      	ldr	r3, [pc, #568]	; (8001b44 <HAL_DMA_IRQHandler+0x248>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a8e      	ldr	r2, [pc, #568]	; (8001b48 <HAL_DMA_IRQHandler+0x24c>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	0a9b      	lsrs	r3, r3, #10
 8001914:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001926:	2208      	movs	r2, #8
 8001928:	409a      	lsls	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d01a      	beq.n	8001968 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d013      	beq.n	8001968 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0204 	bic.w	r2, r2, #4
 800194e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	2208      	movs	r2, #8
 8001956:	409a      	lsls	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001960:	f043 0201 	orr.w	r2, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196c:	2201      	movs	r2, #1
 800196e:	409a      	lsls	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4013      	ands	r3, r2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d012      	beq.n	800199e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198a:	2201      	movs	r2, #1
 800198c:	409a      	lsls	r2, r3
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001996:	f043 0202 	orr.w	r2, r3, #2
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a2:	2204      	movs	r2, #4
 80019a4:	409a      	lsls	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d012      	beq.n	80019d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00b      	beq.n	80019d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	2204      	movs	r2, #4
 80019c2:	409a      	lsls	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019cc:	f043 0204 	orr.w	r2, r3, #4
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d8:	2210      	movs	r2, #16
 80019da:	409a      	lsls	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d043      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d03c      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f6:	2210      	movs	r2, #16
 80019f8:	409a      	lsls	r2, r3
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d018      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d108      	bne.n	8001a2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d024      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	4798      	blx	r3
 8001a2a:	e01f      	b.n	8001a6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01b      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	4798      	blx	r3
 8001a3c:	e016      	b.n	8001a6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d107      	bne.n	8001a5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0208 	bic.w	r2, r2, #8
 8001a5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a70:	2220      	movs	r2, #32
 8001a72:	409a      	lsls	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 808f 	beq.w	8001b9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0310 	and.w	r3, r3, #16
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 8087 	beq.w	8001b9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a92:	2220      	movs	r2, #32
 8001a94:	409a      	lsls	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d136      	bne.n	8001b14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0216 	bic.w	r2, r2, #22
 8001ab4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695a      	ldr	r2, [r3, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ac4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d103      	bne.n	8001ad6 <HAL_DMA_IRQHandler+0x1da>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0208 	bic.w	r2, r2, #8
 8001ae4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aea:	223f      	movs	r2, #63	; 0x3f
 8001aec:	409a      	lsls	r2, r3
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d07e      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	4798      	blx	r3
        }
        return;
 8001b12:	e079      	b.n	8001c08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d01d      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10d      	bne.n	8001b4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d031      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
 8001b40:	e02c      	b.n	8001b9c <HAL_DMA_IRQHandler+0x2a0>
 8001b42:	bf00      	nop
 8001b44:	20000004 	.word	0x20000004
 8001b48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d023      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	4798      	blx	r3
 8001b5c:	e01e      	b.n	8001b9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10f      	bne.n	8001b8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0210 	bic.w	r2, r2, #16
 8001b7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d032      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d022      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2205      	movs	r2, #5
 8001bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0201 	bic.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d307      	bcc.n	8001be4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f2      	bne.n	8001bc8 <HAL_DMA_IRQHandler+0x2cc>
 8001be2:	e000      	b.n	8001be6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001be4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	4798      	blx	r3
 8001c06:	e000      	b.n	8001c0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c08:	bf00      	nop
    }
  }
}
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c1e:	b2db      	uxtb	r3, r3
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b40      	cmp	r3, #64	; 0x40
 8001c70:	d108      	bne.n	8001c84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c82:	e007      	b.n	8001c94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	60da      	str	r2, [r3, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	3b10      	subs	r3, #16
 8001cb0:	4a13      	ldr	r2, [pc, #76]	; (8001d00 <DMA_CalcBaseAndBitshift+0x60>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	091b      	lsrs	r3, r3, #4
 8001cb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cba:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <DMA_CalcBaseAndBitshift+0x64>)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d908      	bls.n	8001ce0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <DMA_CalcBaseAndBitshift+0x68>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	1d1a      	adds	r2, r3, #4
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	659a      	str	r2, [r3, #88]	; 0x58
 8001cde:	e006      	b.n	8001cee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <DMA_CalcBaseAndBitshift+0x68>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	aaaaaaab 	.word	0xaaaaaaab
 8001d04:	08028948 	.word	0x08028948
 8001d08:	fffffc00 	.word	0xfffffc00

08001d0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d11f      	bne.n	8001d66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d856      	bhi.n	8001dda <DMA_CheckFifoParam+0xce>
 8001d2c:	a201      	add	r2, pc, #4	; (adr r2, 8001d34 <DMA_CheckFifoParam+0x28>)
 8001d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d32:	bf00      	nop
 8001d34:	08001d45 	.word	0x08001d45
 8001d38:	08001d57 	.word	0x08001d57
 8001d3c:	08001d45 	.word	0x08001d45
 8001d40:	08001ddb 	.word	0x08001ddb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d046      	beq.n	8001dde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d54:	e043      	b.n	8001dde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d5e:	d140      	bne.n	8001de2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d64:	e03d      	b.n	8001de2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d6e:	d121      	bne.n	8001db4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d837      	bhi.n	8001de6 <DMA_CheckFifoParam+0xda>
 8001d76:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <DMA_CheckFifoParam+0x70>)
 8001d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7c:	08001d8d 	.word	0x08001d8d
 8001d80:	08001d93 	.word	0x08001d93
 8001d84:	08001d8d 	.word	0x08001d8d
 8001d88:	08001da5 	.word	0x08001da5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d90:	e030      	b.n	8001df4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d025      	beq.n	8001dea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001da2:	e022      	b.n	8001dea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dac:	d11f      	bne.n	8001dee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001db2:	e01c      	b.n	8001dee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d903      	bls.n	8001dc2 <DMA_CheckFifoParam+0xb6>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d003      	beq.n	8001dc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001dc0:	e018      	b.n	8001df4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc6:	e015      	b.n	8001df4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00e      	beq.n	8001df2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8001dd8:	e00b      	b.n	8001df2 <DMA_CheckFifoParam+0xe6>
      break;
 8001dda:	bf00      	nop
 8001ddc:	e00a      	b.n	8001df4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dde:	bf00      	nop
 8001de0:	e008      	b.n	8001df4 <DMA_CheckFifoParam+0xe8>
      break;
 8001de2:	bf00      	nop
 8001de4:	e006      	b.n	8001df4 <DMA_CheckFifoParam+0xe8>
      break;
 8001de6:	bf00      	nop
 8001de8:	e004      	b.n	8001df4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dea:	bf00      	nop
 8001dec:	e002      	b.n	8001df4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dee:	bf00      	nop
 8001df0:	e000      	b.n	8001df4 <DMA_CheckFifoParam+0xe8>
      break;
 8001df2:	bf00      	nop
    }
  } 
  
  return status; 
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop

08001e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	e175      	b.n	8002110 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e24:	2201      	movs	r2, #1
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	f040 8164 	bne.w	800210a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d005      	beq.n	8001e5a <HAL_GPIO_Init+0x56>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d130      	bne.n	8001ebc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	2203      	movs	r2, #3
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e90:	2201      	movs	r2, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	f003 0201 	and.w	r2, r3, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d017      	beq.n	8001ef8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d123      	bne.n	8001f4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	08da      	lsrs	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3208      	adds	r2, #8
 8001f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	220f      	movs	r2, #15
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	08da      	lsrs	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3208      	adds	r2, #8
 8001f46:	69b9      	ldr	r1, [r7, #24]
 8001f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0203 	and.w	r2, r3, #3
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80be 	beq.w	800210a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	4b66      	ldr	r3, [pc, #408]	; (8002128 <HAL_GPIO_Init+0x324>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a65      	ldr	r2, [pc, #404]	; (8002128 <HAL_GPIO_Init+0x324>)
 8001f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_GPIO_Init+0x324>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001fa6:	4a61      	ldr	r2, [pc, #388]	; (800212c <HAL_GPIO_Init+0x328>)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	3302      	adds	r3, #2
 8001fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a58      	ldr	r2, [pc, #352]	; (8002130 <HAL_GPIO_Init+0x32c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d037      	beq.n	8002042 <HAL_GPIO_Init+0x23e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a57      	ldr	r2, [pc, #348]	; (8002134 <HAL_GPIO_Init+0x330>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d031      	beq.n	800203e <HAL_GPIO_Init+0x23a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a56      	ldr	r2, [pc, #344]	; (8002138 <HAL_GPIO_Init+0x334>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d02b      	beq.n	800203a <HAL_GPIO_Init+0x236>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a55      	ldr	r2, [pc, #340]	; (800213c <HAL_GPIO_Init+0x338>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d025      	beq.n	8002036 <HAL_GPIO_Init+0x232>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a54      	ldr	r2, [pc, #336]	; (8002140 <HAL_GPIO_Init+0x33c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01f      	beq.n	8002032 <HAL_GPIO_Init+0x22e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a53      	ldr	r2, [pc, #332]	; (8002144 <HAL_GPIO_Init+0x340>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_GPIO_Init+0x22a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a52      	ldr	r2, [pc, #328]	; (8002148 <HAL_GPIO_Init+0x344>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x226>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a51      	ldr	r2, [pc, #324]	; (800214c <HAL_GPIO_Init+0x348>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x222>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a50      	ldr	r2, [pc, #320]	; (8002150 <HAL_GPIO_Init+0x34c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x21e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4f      	ldr	r2, [pc, #316]	; (8002154 <HAL_GPIO_Init+0x350>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x21a>
 800201a:	2309      	movs	r3, #9
 800201c:	e012      	b.n	8002044 <HAL_GPIO_Init+0x240>
 800201e:	230a      	movs	r3, #10
 8002020:	e010      	b.n	8002044 <HAL_GPIO_Init+0x240>
 8002022:	2308      	movs	r3, #8
 8002024:	e00e      	b.n	8002044 <HAL_GPIO_Init+0x240>
 8002026:	2307      	movs	r3, #7
 8002028:	e00c      	b.n	8002044 <HAL_GPIO_Init+0x240>
 800202a:	2306      	movs	r3, #6
 800202c:	e00a      	b.n	8002044 <HAL_GPIO_Init+0x240>
 800202e:	2305      	movs	r3, #5
 8002030:	e008      	b.n	8002044 <HAL_GPIO_Init+0x240>
 8002032:	2304      	movs	r3, #4
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x240>
 8002036:	2303      	movs	r3, #3
 8002038:	e004      	b.n	8002044 <HAL_GPIO_Init+0x240>
 800203a:	2302      	movs	r3, #2
 800203c:	e002      	b.n	8002044 <HAL_GPIO_Init+0x240>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_GPIO_Init+0x240>
 8002042:	2300      	movs	r3, #0
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	f002 0203 	and.w	r2, r2, #3
 800204a:	0092      	lsls	r2, r2, #2
 800204c:	4093      	lsls	r3, r2
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002054:	4935      	ldr	r1, [pc, #212]	; (800212c <HAL_GPIO_Init+0x328>)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	3302      	adds	r3, #2
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002062:	4b3d      	ldr	r3, [pc, #244]	; (8002158 <HAL_GPIO_Init+0x354>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002086:	4a34      	ldr	r2, [pc, #208]	; (8002158 <HAL_GPIO_Init+0x354>)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800208c:	4b32      	ldr	r3, [pc, #200]	; (8002158 <HAL_GPIO_Init+0x354>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020b0:	4a29      	ldr	r2, [pc, #164]	; (8002158 <HAL_GPIO_Init+0x354>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020b6:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_GPIO_Init+0x354>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020da:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <HAL_GPIO_Init+0x354>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <HAL_GPIO_Init+0x354>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <HAL_GPIO_Init+0x354>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3301      	adds	r3, #1
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	2b0f      	cmp	r3, #15
 8002114:	f67f ae86 	bls.w	8001e24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3724      	adds	r7, #36	; 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800
 800212c:	40013800 	.word	0x40013800
 8002130:	40020000 	.word	0x40020000
 8002134:	40020400 	.word	0x40020400
 8002138:	40020800 	.word	0x40020800
 800213c:	40020c00 	.word	0x40020c00
 8002140:	40021000 	.word	0x40021000
 8002144:	40021400 	.word	0x40021400
 8002148:	40021800 	.word	0x40021800
 800214c:	40021c00 	.word	0x40021c00
 8002150:	40022000 	.word	0x40022000
 8002154:	40022400 	.word	0x40022400
 8002158:	40013c00 	.word	0x40013c00

0800215c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
 8002168:	4613      	mov	r3, r2
 800216a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002178:	e003      	b.n	8002182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	041a      	lsls	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	619a      	str	r2, [r3, #24]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7fe faa6 	bl	8000708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2224      	movs	r2, #36	; 0x24
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d107      	bne.n	800220a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	e006      	b.n	8002218 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002216:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d104      	bne.n	800222a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002228:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6859      	ldr	r1, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_I2C_Init+0x11c>)
 8002236:	430b      	orrs	r3, r1
 8002238:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002248:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69d9      	ldr	r1, [r3, #28]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1a      	ldr	r2, [r3, #32]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	02008000 	.word	0x02008000

080022b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	4608      	mov	r0, r1
 80022ba:	4611      	mov	r1, r2
 80022bc:	461a      	mov	r2, r3
 80022be:	4603      	mov	r3, r0
 80022c0:	817b      	strh	r3, [r7, #10]
 80022c2:	460b      	mov	r3, r1
 80022c4:	813b      	strh	r3, [r7, #8]
 80022c6:	4613      	mov	r3, r2
 80022c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	f040 80f9 	bne.w	80024ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_I2C_Mem_Write+0x34>
 80022de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d105      	bne.n	80022f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0ed      	b.n	80024cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_I2C_Mem_Write+0x4e>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e0e6      	b.n	80024cc <HAL_I2C_Mem_Write+0x21c>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002306:	f7ff f8ab 	bl	8001460 <HAL_GetTick>
 800230a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	2319      	movs	r3, #25
 8002312:	2201      	movs	r2, #1
 8002314:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f001 fb91 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0d1      	b.n	80024cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2221      	movs	r2, #33	; 0x21
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2240      	movs	r2, #64	; 0x40
 8002334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a3a      	ldr	r2, [r7, #32]
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002348:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002350:	88f8      	ldrh	r0, [r7, #6]
 8002352:	893a      	ldrh	r2, [r7, #8]
 8002354:	8979      	ldrh	r1, [r7, #10]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	4603      	mov	r3, r0
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fe11 	bl	8002f88 <I2C_RequestMemoryWrite>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0a9      	b.n	80024cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	2bff      	cmp	r3, #255	; 0xff
 8002380:	d90e      	bls.n	80023a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	22ff      	movs	r2, #255	; 0xff
 8002386:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	b2da      	uxtb	r2, r3
 800238e:	8979      	ldrh	r1, [r7, #10]
 8002390:	2300      	movs	r3, #0
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f001 fced 	bl	8003d78 <I2C_TransferConfig>
 800239e:	e00f      	b.n	80023c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	8979      	ldrh	r1, [r7, #10]
 80023b2:	2300      	movs	r3, #0
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f001 fcdc 	bl	8003d78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f001 fb7b 	bl	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e07b      	b.n	80024cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d034      	beq.n	8002478 <HAL_I2C_Mem_Write+0x1c8>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002412:	2b00      	cmp	r3, #0
 8002414:	d130      	bne.n	8002478 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	2200      	movs	r2, #0
 800241e:	2180      	movs	r1, #128	; 0x80
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f001 fb0d 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e04d      	b.n	80024cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29b      	uxth	r3, r3
 8002436:	2bff      	cmp	r3, #255	; 0xff
 8002438:	d90e      	bls.n	8002458 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	22ff      	movs	r2, #255	; 0xff
 800243e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002444:	b2da      	uxtb	r2, r3
 8002446:	8979      	ldrh	r1, [r7, #10]
 8002448:	2300      	movs	r3, #0
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f001 fc91 	bl	8003d78 <I2C_TransferConfig>
 8002456:	e00f      	b.n	8002478 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002466:	b2da      	uxtb	r2, r3
 8002468:	8979      	ldrh	r1, [r7, #10]
 800246a:	2300      	movs	r3, #0
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f001 fc80 	bl	8003d78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d19e      	bne.n	80023c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f001 fb5a 	bl	8003b40 <I2C_WaitOnSTOPFlagUntilTimeout>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e01a      	b.n	80024cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2220      	movs	r2, #32
 800249c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6859      	ldr	r1, [r3, #4]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <HAL_I2C_Mem_Write+0x224>)
 80024aa:	400b      	ands	r3, r1
 80024ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e000      	b.n	80024cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024ca:	2302      	movs	r3, #2
  }
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	fe00e800 	.word	0xfe00e800

080024d8 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af02      	add	r7, sp, #8
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	4608      	mov	r0, r1
 80024e2:	4611      	mov	r1, r2
 80024e4:	461a      	mov	r2, r3
 80024e6:	4603      	mov	r3, r0
 80024e8:	817b      	strh	r3, [r7, #10]
 80024ea:	460b      	mov	r3, r1
 80024ec:	813b      	strh	r3, [r7, #8]
 80024ee:	4613      	mov	r3, r2
 80024f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	f040 80c3 	bne.w	8002686 <HAL_I2C_Mem_Write_DMA+0x1ae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <HAL_I2C_Mem_Write_DMA+0x34>
 8002506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002508:	2b00      	cmp	r3, #0
 800250a:	d105      	bne.n	8002518 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002512:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0b7      	b.n	8002688 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002526:	d101      	bne.n	800252c <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8002528:	2302      	movs	r3, #2
 800252a:	e0ad      	b.n	8002688 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_I2C_Mem_Write_DMA+0x62>
 8002536:	2302      	movs	r3, #2
 8002538:	e0a6      	b.n	8002688 <HAL_I2C_Mem_Write_DMA+0x1b0>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2221      	movs	r2, #33	; 0x21
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2240      	movs	r2, #64	; 0x40
 800254e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a3a      	ldr	r2, [r7, #32]
 800255c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002562:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4a4a      	ldr	r2, [pc, #296]	; (8002690 <HAL_I2C_Mem_Write_DMA+0x1b8>)
 8002568:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4a49      	ldr	r2, [pc, #292]	; (8002694 <HAL_I2C_Mem_Write_DMA+0x1bc>)
 800256e:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8002570:	897a      	ldrh	r2, [r7, #10]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	2bff      	cmp	r3, #255	; 0xff
 800257e:	d903      	bls.n	8002588 <HAL_I2C_Mem_Write_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	22ff      	movs	r2, #255	; 0xff
 8002584:	851a      	strh	r2, [r3, #40]	; 0x28
 8002586:	e004      	b.n	8002592 <HAL_I2C_Mem_Write_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d109      	bne.n	80025ac <HAL_I2C_Mem_Write_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002598:	893b      	ldrh	r3, [r7, #8]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025a8:	651a      	str	r2, [r3, #80]	; 0x50
 80025aa:	e00b      	b.n	80025c4 <HAL_I2C_Mem_Write_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025ac:	893b      	ldrh	r3, [r7, #8]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80025ba:	893b      	ldrh	r3, [r7, #8]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmatx != NULL)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d020      	beq.n	800260e <HAL_I2C_Mem_Write_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	4a31      	ldr	r2, [pc, #196]	; (8002698 <HAL_I2C_Mem_Write_DMA+0x1c0>)
 80025d2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	4a30      	ldr	r2, [pc, #192]	; (800269c <HAL_I2C_Mem_Write_DMA+0x1c4>)
 80025da:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e0:	2200      	movs	r2, #0
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	2200      	movs	r2, #0
 80025ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025f0:	6a39      	ldr	r1, [r7, #32]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3328      	adds	r3, #40	; 0x28
 80025f8:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80025fe:	f7ff f8fb 	bl	80017f8 <HAL_DMA_Start_IT>
 8002602:	4603      	mov	r3, r0
 8002604:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8002606:	7dfb      	ldrb	r3, [r7, #23]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d128      	bne.n	800265e <HAL_I2C_Mem_Write_DMA+0x186>
 800260c:	e013      	b.n	8002636 <HAL_I2C_Mem_Write_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e028      	b.n	8002688 <HAL_I2C_Mem_Write_DMA+0x1b0>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	8979      	ldrh	r1, [r7, #10]
 800263c:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <HAL_I2C_Mem_Write_DMA+0x1c8>)
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f001 fb97 	bl	8003d78 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002652:	2101      	movs	r1, #1
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f001 fbc1 	bl	8003ddc <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	e014      	b.n	8002688 <HAL_I2C_Mem_Write_DMA+0x1b0>
      hi2c->State     = HAL_I2C_STATE_READY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2220      	movs	r2, #32
 8002662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	f043 0210 	orr.w	r2, r3, #16
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <HAL_I2C_Mem_Write_DMA+0x1b0>
  }
  else
  {
    return HAL_BUSY;
 8002686:	2302      	movs	r3, #2
  }
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	ffff0000 	.word	0xffff0000
 8002694:	08002b81 	.word	0x08002b81
 8002698:	080038fb 	.word	0x080038fb
 800269c:	08003991 	.word	0x08003991
 80026a0:	80002000 	.word	0x80002000

080026a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	68f9      	ldr	r1, [r7, #12]
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
  }
}
 80026d0:	bf00      	nop
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	70fb      	strb	r3, [r7, #3]
 8002734:	4613      	mov	r3, r2
 8002736:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <I2C_Slave_ISR_IT+0x24>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e0ec      	b.n	8002992 <I2C_Slave_ISR_IT+0x1fe>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d009      	beq.n	80027e0 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80027d8:	6939      	ldr	r1, [r7, #16]
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fe12 	bl	8003404 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d04d      	beq.n	8002888 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d047      	beq.n	8002888 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d128      	bne.n	8002854 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b28      	cmp	r3, #40	; 0x28
 800280c:	d108      	bne.n	8002820 <I2C_Slave_ISR_IT+0x8c>
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002814:	d104      	bne.n	8002820 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002816:	6939      	ldr	r1, [r7, #16]
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fefd 	bl	8003618 <I2C_ITListenCplt>
 800281e:	e032      	b.n	8002886 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b29      	cmp	r3, #41	; 0x29
 800282a:	d10e      	bne.n	800284a <I2C_Slave_ISR_IT+0xb6>
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002832:	d00a      	beq.n	800284a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2210      	movs	r2, #16
 800283a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f001 f838 	bl	80038b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fcb5 	bl	80031b2 <I2C_ITSlaveSeqCplt>
 8002848:	e01d      	b.n	8002886 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2210      	movs	r2, #16
 8002850:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002852:	e096      	b.n	8002982 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2210      	movs	r2, #16
 800285a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	f043 0204 	orr.w	r2, r3, #4
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d004      	beq.n	8002878 <I2C_Slave_ISR_IT+0xe4>
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002874:	f040 8085 	bne.w	8002982 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287c:	4619      	mov	r1, r3
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 ff20 	bl	80036c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002884:	e07d      	b.n	8002982 <I2C_Slave_ISR_IT+0x1ee>
 8002886:	e07c      	b.n	8002982 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d030      	beq.n	80028f6 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800289c:	2b00      	cmp	r3, #0
 800289e:	d02a      	beq.n	80028f6 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d018      	beq.n	80028dc <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d14f      	bne.n	8002986 <I2C_Slave_ISR_IT+0x1f2>
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028ec:	d04b      	beq.n	8002986 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fc5f 	bl	80031b2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80028f4:	e047      	b.n	8002986 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	08db      	lsrs	r3, r3, #3
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	08db      	lsrs	r3, r3, #3
 8002906:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800290a:	2b00      	cmp	r3, #0
 800290c:	d004      	beq.n	8002918 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800290e:	6939      	ldr	r1, [r7, #16]
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 fb8d 	bl	8003030 <I2C_ITAddrCplt>
 8002916:	e037      	b.n	8002988 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	085b      	lsrs	r3, r3, #1
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d031      	beq.n	8002988 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	085b      	lsrs	r3, r3, #1
 8002928:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800292c:	2b00      	cmp	r3, #0
 800292e:	d02b      	beq.n	8002988 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d018      	beq.n	800296c <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	781a      	ldrb	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	851a      	strh	r2, [r3, #40]	; 0x28
 800296a:	e00d      	b.n	8002988 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002972:	d002      	beq.n	800297a <I2C_Slave_ISR_IT+0x1e6>
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fc19 	bl	80031b2 <I2C_ITSlaveSeqCplt>
 8002980:	e002      	b.n	8002988 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002982:	bf00      	nop
 8002984:	e000      	b.n	8002988 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002986:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b088      	sub	sp, #32
 800299e:	af02      	add	r7, sp, #8
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <I2C_Master_ISR_DMA+0x1a>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e0e1      	b.n	8002b78 <I2C_Master_ISR_DMA+0x1de>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d017      	beq.n	80029f8 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d011      	beq.n	80029f8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2210      	movs	r2, #16
 80029da:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	f043 0204 	orr.w	r2, r3, #4
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80029e8:	2120      	movs	r1, #32
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f001 f9f6 	bl	8003ddc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 ff5e 	bl	80038b2 <I2C_Flush_TXDR>
 80029f6:	e0ba      	b.n	8002b6e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	09db      	lsrs	r3, r3, #7
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d072      	beq.n	8002aea <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	099b      	lsrs	r3, r3, #6
 8002a08:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d06c      	beq.n	8002aea <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a1e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d04e      	beq.n	8002ac8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a36:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2bff      	cmp	r3, #255	; 0xff
 8002a40:	d906      	bls.n	8002a50 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	22ff      	movs	r2, #255	; 0xff
 8002a46:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002a48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	e010      	b.n	8002a72 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a62:	d003      	beq.n	8002a6c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	e002      	b.n	8002a72 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002a6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a70:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	8a79      	ldrh	r1, [r7, #18]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f001 f979 	bl	8003d78 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b22      	cmp	r3, #34	; 0x22
 8002aa2:	d108      	bne.n	8002ab6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ab2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ab4:	e05b      	b.n	8002b6e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ac4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ac6:	e052      	b.n	8002b6e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ad6:	d003      	beq.n	8002ae0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fb2d 	bl	8003138 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002ade:	e046      	b.n	8002b6e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002ae0:	2140      	movs	r1, #64	; 0x40
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fdee 	bl	80036c4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002ae8:	e041      	b.n	8002b6e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	099b      	lsrs	r3, r3, #6
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d029      	beq.n	8002b4a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	099b      	lsrs	r3, r3, #6
 8002afa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d023      	beq.n	8002b4a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d119      	bne.n	8002b40 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b1a:	d027      	beq.n	8002b6c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b24:	d108      	bne.n	8002b38 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b34:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002b36:	e019      	b.n	8002b6c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fafd 	bl	8003138 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002b3e:	e015      	b.n	8002b6c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b40:	2140      	movs	r1, #64	; 0x40
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fdbe 	bl	80036c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002b48:	e010      	b.n	8002b6c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	095b      	lsrs	r3, r3, #5
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002b62:	68b9      	ldr	r1, [r7, #8]
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 fb83 	bl	8003270 <I2C_ITMasterCplt>
 8002b6a:	e000      	b.n	8002b6e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002b6c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002b8c:	4b8c      	ldr	r3, [pc, #560]	; (8002dc0 <I2C_Mem_ISR_DMA+0x240>)
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <I2C_Mem_ISR_DMA+0x1e>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e10c      	b.n	8002db8 <I2C_Mem_ISR_DMA+0x238>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d017      	beq.n	8002be2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d011      	beq.n	8002be2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2210      	movs	r2, #16
 8002bc4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	f043 0204 	orr.w	r2, r3, #4
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002bd2:	2120      	movs	r1, #32
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f001 f901 	bl	8003ddc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fe69 	bl	80038b2 <I2C_Flush_TXDR>
 8002be0:	e0e5      	b.n	8002dae <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00f      	beq.n	8002c0e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c0a:	651a      	str	r2, [r3, #80]	; 0x50
 8002c0c:	e0cf      	b.n	8002dae <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	09db      	lsrs	r3, r3, #7
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d05c      	beq.n	8002cd4 <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	099b      	lsrs	r3, r3, #6
 8002c1e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d056      	beq.n	8002cd4 <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002c26:	2110      	movs	r1, #16
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f001 f8d7 	bl	8003ddc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d048      	beq.n	8002cca <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2bff      	cmp	r3, #255	; 0xff
 8002c40:	d910      	bls.n	8002c64 <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	22ff      	movs	r2, #255	; 0xff
 8002c46:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4c:	b299      	uxth	r1, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	2300      	movs	r3, #0
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f001 f88b 	bl	8003d78 <I2C_TransferConfig>
 8002c62:	e011      	b.n	8002c88 <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c72:	b299      	uxth	r1, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f001 f878 	bl	8003d78 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b22      	cmp	r3, #34	; 0x22
 8002ca4:	d108      	bne.n	8002cb8 <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cb4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002cb6:	e07a      	b.n	8002dae <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002cc8:	e071      	b.n	8002dae <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002cca:	2140      	movs	r1, #64	; 0x40
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fcf9 	bl	80036c4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002cd2:	e06c      	b.n	8002dae <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	099b      	lsrs	r3, r3, #6
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d056      	beq.n	8002d8e <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	099b      	lsrs	r3, r3, #6
 8002ce4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d050      	beq.n	8002d8e <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b22      	cmp	r3, #34	; 0x22
 8002cf6:	d101      	bne.n	8002cfc <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 8002cf8:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <I2C_Mem_ISR_DMA+0x244>)
 8002cfa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2bff      	cmp	r3, #255	; 0xff
 8002d04:	d910      	bls.n	8002d28 <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	22ff      	movs	r2, #255	; 0xff
 8002d0a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d10:	b299      	uxth	r1, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f001 f829 	bl	8003d78 <I2C_TransferConfig>
 8002d26:	e011      	b.n	8002d4c <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d36:	b299      	uxth	r1, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f001 f816 	bl	8003d78 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b22      	cmp	r3, #34	; 0x22
 8002d68:	d108      	bne.n	8002d7c <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d78:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d7a:	e018      	b.n	8002dae <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d8a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d8c:	e00f      	b.n	8002dae <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fa61 	bl	8003270 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	80002000 	.word	0x80002000
 8002dc4:	80002400 	.word	0x80002400

08002dc8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <I2C_Slave_ISR_DMA+0x24>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e0c9      	b.n	8002f80 <I2C_Slave_ISR_DMA+0x1b8>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d009      	beq.n	8002e14 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 faf8 	bl	8003404 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 809a 	beq.w	8002f56 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8093 	beq.w	8002f56 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	0b9b      	lsrs	r3, r3, #14
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	0bdb      	lsrs	r3, r3, #15
 8002e40:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d07f      	beq.n	8002f48 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00d      	beq.n	8002e6c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	0bdb      	lsrs	r3, r3, #15
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00d      	beq.n	8002e90 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	0b9b      	lsrs	r3, r3, #14
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d128      	bne.n	8002ee8 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b28      	cmp	r3, #40	; 0x28
 8002ea0:	d108      	bne.n	8002eb4 <I2C_Slave_ISR_DMA+0xec>
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ea8:	d104      	bne.n	8002eb4 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fbb3 	bl	8003618 <I2C_ITListenCplt>
 8002eb2:	e048      	b.n	8002f46 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b29      	cmp	r3, #41	; 0x29
 8002ebe:	d10e      	bne.n	8002ede <I2C_Slave_ISR_DMA+0x116>
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ec6:	d00a      	beq.n	8002ede <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2210      	movs	r2, #16
 8002ece:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fcee 	bl	80038b2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f96b 	bl	80031b2 <I2C_ITSlaveSeqCplt>
 8002edc:	e033      	b.n	8002f46 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2210      	movs	r2, #16
 8002ee4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002ee6:	e034      	b.n	8002f52 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2210      	movs	r2, #16
 8002eee:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	f043 0204 	orr.w	r2, r3, #4
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f02:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <I2C_Slave_ISR_DMA+0x14a>
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f10:	d11f      	bne.n	8002f52 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
 8002f14:	2b21      	cmp	r3, #33	; 0x21
 8002f16:	d002      	beq.n	8002f1e <I2C_Slave_ISR_DMA+0x156>
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	2b29      	cmp	r3, #41	; 0x29
 8002f1c:	d103      	bne.n	8002f26 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2221      	movs	r2, #33	; 0x21
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30
 8002f24:	e008      	b.n	8002f38 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f26:	7dfb      	ldrb	r3, [r7, #23]
 8002f28:	2b22      	cmp	r3, #34	; 0x22
 8002f2a:	d002      	beq.n	8002f32 <I2C_Slave_ISR_DMA+0x16a>
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
 8002f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8002f30:	d102      	bne.n	8002f38 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2222      	movs	r2, #34	; 0x22
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fbc0 	bl	80036c4 <I2C_ITError>
      if (treatdmanack == 1U)
 8002f44:	e005      	b.n	8002f52 <I2C_Slave_ISR_DMA+0x18a>
 8002f46:	e004      	b.n	8002f52 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002f50:	e011      	b.n	8002f76 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8002f52:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002f54:	e00f      	b.n	8002f76 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	08db      	lsrs	r3, r3, #3
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	08db      	lsrs	r3, r3, #3
 8002f66:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f85d 	bl	8003030 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	4608      	mov	r0, r1
 8002f92:	4611      	mov	r1, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	817b      	strh	r3, [r7, #10]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	813b      	strh	r3, [r7, #8]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	8979      	ldrh	r1, [r7, #10]
 8002fa8:	4b20      	ldr	r3, [pc, #128]	; (800302c <I2C_RequestMemoryWrite+0xa4>)
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 fee1 	bl	8003d78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	69b9      	ldr	r1, [r7, #24]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 fd80 	bl	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e02c      	b.n	8003024 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fd0:	893b      	ldrh	r3, [r7, #8]
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	629a      	str	r2, [r3, #40]	; 0x28
 8002fda:	e015      	b.n	8003008 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fdc:	893b      	ldrh	r3, [r7, #8]
 8002fde:	0a1b      	lsrs	r3, r3, #8
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	69b9      	ldr	r1, [r7, #24]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fd66 	bl	8003ac0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e012      	b.n	8003024 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ffe:	893b      	ldrh	r3, [r7, #8]
 8003000:	b2da      	uxtb	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	2200      	movs	r2, #0
 8003010:	2180      	movs	r1, #128	; 0x80
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fd14 	bl	8003a40 <I2C_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	80002000 	.word	0x80002000

08003030 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003046:	2b28      	cmp	r3, #40	; 0x28
 8003048:	d16a      	bne.n	8003120 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	0c1b      	lsrs	r3, r3, #16
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	b29b      	uxth	r3, r3
 8003064:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003068:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	b29b      	uxth	r3, r3
 8003072:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003076:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	b29b      	uxth	r3, r3
 8003080:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003084:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d138      	bne.n	8003100 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800308e:	897b      	ldrh	r3, [r7, #10]
 8003090:	09db      	lsrs	r3, r3, #7
 8003092:	b29a      	uxth	r2, r3
 8003094:	89bb      	ldrh	r3, [r7, #12]
 8003096:	4053      	eors	r3, r2
 8003098:	b29b      	uxth	r3, r3
 800309a:	f003 0306 	and.w	r3, r3, #6
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d11c      	bne.n	80030dc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80030a2:	897b      	ldrh	r3, [r7, #10]
 80030a4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d13b      	bne.n	8003130 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2208      	movs	r2, #8
 80030c4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030ce:	89ba      	ldrh	r2, [r7, #12]
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	4619      	mov	r1, r3
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff fb27 	bl	8002728 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80030da:	e029      	b.n	8003130 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80030dc:	893b      	ldrh	r3, [r7, #8]
 80030de:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80030e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fee3 	bl	8003eb0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030f2:	89ba      	ldrh	r2, [r7, #12]
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	4619      	mov	r1, r3
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff fb15 	bl	8002728 <HAL_I2C_AddrCallback>
}
 80030fe:	e017      	b.n	8003130 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003100:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fed3 	bl	8003eb0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003112:	89ba      	ldrh	r2, [r7, #12]
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	4619      	mov	r1, r3
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff fb05 	bl	8002728 <HAL_I2C_AddrCallback>
}
 800311e:	e007      	b.n	8003130 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2208      	movs	r2, #8
 8003126:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b21      	cmp	r3, #33	; 0x21
 8003152:	d115      	bne.n	8003180 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2211      	movs	r2, #17
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003168:	2101      	movs	r1, #1
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fea0 	bl	8003eb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff faad 	bl	80026d8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800317e:	e014      	b.n	80031aa <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2212      	movs	r2, #18
 800318c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003194:	2102      	movs	r1, #2
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fe8a 	bl	8003eb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff faa1 	bl	80026ec <HAL_I2C_MasterRxCpltCallback>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	0b9b      	lsrs	r3, r3, #14
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	e00d      	b.n	8003204 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	0bdb      	lsrs	r3, r3, #15
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003202:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b29      	cmp	r3, #41	; 0x29
 800320e:	d112      	bne.n	8003236 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2228      	movs	r2, #40	; 0x28
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2221      	movs	r2, #33	; 0x21
 800321c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800321e:	2101      	movs	r1, #1
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fe45 	bl	8003eb0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff fa66 	bl	8002700 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003234:	e017      	b.n	8003266 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b2a      	cmp	r3, #42	; 0x2a
 8003240:	d111      	bne.n	8003266 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2228      	movs	r2, #40	; 0x28
 8003246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2222      	movs	r2, #34	; 0x22
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003250:	2102      	movs	r1, #2
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fe2c 	bl	8003eb0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff fa57 	bl	8002714 <HAL_I2C_SlaveRxCpltCallback>
}
 8003266:	bf00      	nop
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2220      	movs	r2, #32
 8003284:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b21      	cmp	r3, #33	; 0x21
 8003290:	d107      	bne.n	80032a2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003292:	2101      	movs	r1, #1
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fe0b 	bl	8003eb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2211      	movs	r2, #17
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
 80032a0:	e00c      	b.n	80032bc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b22      	cmp	r3, #34	; 0x22
 80032ac:	d106      	bne.n	80032bc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80032ae:	2102      	movs	r1, #2
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fdfd 	bl	8003eb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2212      	movs	r2, #18
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b4d      	ldr	r3, [pc, #308]	; (80033fc <I2C_ITMasterCplt+0x18c>)
 80032c8:	400b      	ands	r3, r1
 80032ca:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4a      	ldr	r2, [pc, #296]	; (8003400 <I2C_ITMasterCplt+0x190>)
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d009      	beq.n	80032f8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2210      	movs	r2, #16
 80032ea:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	f043 0204 	orr.w	r2, r3, #4
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b60      	cmp	r3, #96	; 0x60
 8003302:	d10b      	bne.n	800331c <I2C_ITMasterCplt+0xac>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	b2db      	uxtb	r3, r3
 8003318:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800331a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 fac8 	bl	80038b2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b60      	cmp	r3, #96	; 0x60
 8003332:	d002      	beq.n	800333a <I2C_ITMasterCplt+0xca>
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d006      	beq.n	8003348 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	4619      	mov	r1, r3
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f9bf 	bl	80036c4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003346:	e054      	b.n	80033f2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b21      	cmp	r3, #33	; 0x21
 8003352:	d124      	bne.n	800339e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b40      	cmp	r3, #64	; 0x40
 800336c:	d10b      	bne.n	8003386 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd fd26 	bl	8000dd0 <HAL_I2C_MemTxCpltCallback>
}
 8003384:	e035      	b.n	80033f2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff f99e 	bl	80026d8 <HAL_I2C_MasterTxCpltCallback>
}
 800339c:	e029      	b.n	80033f2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b22      	cmp	r3, #34	; 0x22
 80033a8:	d123      	bne.n	80033f2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b40      	cmp	r3, #64	; 0x40
 80033c2:	d10b      	bne.n	80033dc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff f9bf 	bl	8002758 <HAL_I2C_MemRxCpltCallback>
}
 80033da:	e00a      	b.n	80033f2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff f97d 	bl	80026ec <HAL_I2C_MasterRxCpltCallback>
}
 80033f2:	bf00      	nop
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	fe00e800 	.word	0xfe00e800
 8003400:	ffff0000 	.word	0xffff0000

08003404 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003420:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2220      	movs	r2, #32
 8003428:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	2b21      	cmp	r3, #33	; 0x21
 800342e:	d002      	beq.n	8003436 <I2C_ITSlaveCplt+0x32>
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	2b29      	cmp	r3, #41	; 0x29
 8003434:	d108      	bne.n	8003448 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003436:	f248 0101 	movw	r1, #32769	; 0x8001
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fd38 	bl	8003eb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2221      	movs	r2, #33	; 0x21
 8003444:	631a      	str	r2, [r3, #48]	; 0x30
 8003446:	e00d      	b.n	8003464 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b22      	cmp	r3, #34	; 0x22
 800344c:	d002      	beq.n	8003454 <I2C_ITSlaveCplt+0x50>
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	2b2a      	cmp	r3, #42	; 0x2a
 8003452:	d107      	bne.n	8003464 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003454:	f248 0102 	movw	r1, #32770	; 0x8002
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fd29 	bl	8003eb0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2222      	movs	r2, #34	; 0x22
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003472:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6859      	ldr	r1, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b64      	ldr	r3, [pc, #400]	; (8003610 <I2C_ITSlaveCplt+0x20c>)
 8003480:	400b      	ands	r3, r1
 8003482:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fa14 	bl	80038b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	0b9b      	lsrs	r3, r3, #14
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d013      	beq.n	80034be <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034a4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d020      	beq.n	80034f0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034bc:	e018      	b.n	80034f0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	0bdb      	lsrs	r3, r3, #15
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d012      	beq.n	80034f0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d006      	beq.n	80034f0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	089b      	lsrs	r3, r3, #2
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d020      	beq.n	800353e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f023 0304 	bic.w	r3, r3, #4
 8003502:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00c      	beq.n	800353e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	f043 0204 	orr.w	r2, r3, #4
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	2b00      	cmp	r3, #0
 8003568:	d010      	beq.n	800358c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	4619      	mov	r1, r3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8a7 	bl	80036c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b28      	cmp	r3, #40	; 0x28
 8003580:	d141      	bne.n	8003606 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003582:	6979      	ldr	r1, [r7, #20]
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f847 	bl	8003618 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800358a:	e03c      	b.n	8003606 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003594:	d014      	beq.n	80035c0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fe0b 	bl	80031b2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <I2C_ITSlaveCplt+0x210>)
 80035a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff f8c3 	bl	8002744 <HAL_I2C_ListenCpltCallback>
}
 80035be:	e022      	b.n	8003606 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b22      	cmp	r3, #34	; 0x22
 80035ca:	d10e      	bne.n	80035ea <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff f896 	bl	8002714 <HAL_I2C_SlaveRxCpltCallback>
}
 80035e8:	e00d      	b.n	8003606 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff f87d 	bl	8002700 <HAL_I2C_SlaveTxCpltCallback>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	fe00e800 	.word	0xfe00e800
 8003614:	ffff0000 	.word	0xffff0000

08003618 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a26      	ldr	r2, [pc, #152]	; (80036c0 <I2C_ITListenCplt+0xa8>)
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	089b      	lsrs	r3, r3, #2
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d022      	beq.n	8003696 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d012      	beq.n	8003696 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f043 0204 	orr.w	r2, r3, #4
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003696:	f248 0103 	movw	r1, #32771	; 0x8003
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fc08 	bl	8003eb0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2210      	movs	r2, #16
 80036a6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff f847 	bl	8002744 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	ffff0000 	.word	0xffff0000

080036c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a5d      	ldr	r2, [pc, #372]	; (8003858 <I2C_ITError+0x194>)
 80036e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	2b28      	cmp	r3, #40	; 0x28
 80036fa:	d005      	beq.n	8003708 <I2C_ITError+0x44>
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	2b29      	cmp	r3, #41	; 0x29
 8003700:	d002      	beq.n	8003708 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	2b2a      	cmp	r3, #42	; 0x2a
 8003706:	d10b      	bne.n	8003720 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003708:	2103      	movs	r1, #3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fbd0 	bl	8003eb0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2228      	movs	r2, #40	; 0x28
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a50      	ldr	r2, [pc, #320]	; (800385c <I2C_ITError+0x198>)
 800371c:	635a      	str	r2, [r3, #52]	; 0x34
 800371e:	e011      	b.n	8003744 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003720:	f248 0103 	movw	r1, #32771	; 0x8003
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fbc3 	bl	8003eb0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b60      	cmp	r3, #96	; 0x60
 8003734:	d003      	beq.n	800373e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	2b00      	cmp	r3, #0
 8003750:	d039      	beq.n	80037c6 <I2C_ITError+0x102>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b11      	cmp	r3, #17
 8003756:	d002      	beq.n	800375e <I2C_ITError+0x9a>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b21      	cmp	r3, #33	; 0x21
 800375c:	d133      	bne.n	80037c6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800376c:	d107      	bne.n	800377e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800377c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe fa44 	bl	8001c10 <HAL_DMA_GetState>
 8003788:	4603      	mov	r3, r0
 800378a:	2b01      	cmp	r3, #1
 800378c:	d017      	beq.n	80037be <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	4a33      	ldr	r2, [pc, #204]	; (8003860 <I2C_ITError+0x19c>)
 8003794:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe f888 	bl	80018b8 <HAL_DMA_Abort_IT>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d04d      	beq.n	800384a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037b8:	4610      	mov	r0, r2
 80037ba:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037bc:	e045      	b.n	800384a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f850 	bl	8003864 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037c4:	e041      	b.n	800384a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d039      	beq.n	8003842 <I2C_ITError+0x17e>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b12      	cmp	r3, #18
 80037d2:	d002      	beq.n	80037da <I2C_ITError+0x116>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b22      	cmp	r3, #34	; 0x22
 80037d8:	d133      	bne.n	8003842 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e8:	d107      	bne.n	80037fa <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037f8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fe fa06 	bl	8001c10 <HAL_DMA_GetState>
 8003804:	4603      	mov	r3, r0
 8003806:	2b01      	cmp	r3, #1
 8003808:	d017      	beq.n	800383a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	4a14      	ldr	r2, [pc, #80]	; (8003860 <I2C_ITError+0x19c>)
 8003810:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	4618      	mov	r0, r3
 8003820:	f7fe f84a 	bl	80018b8 <HAL_DMA_Abort_IT>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d011      	beq.n	800384e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003834:	4610      	mov	r0, r2
 8003836:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003838:	e009      	b.n	800384e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f812 	bl	8003864 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003840:	e005      	b.n	800384e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f80e 	bl	8003864 <I2C_TreatErrorCallback>
  }
}
 8003848:	e002      	b.n	8003850 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800384e:	bf00      	nop
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	ffff0000 	.word	0xffff0000
 800385c:	08002795 	.word	0x08002795
 8003860:	08003a05 	.word	0x08003a05

08003864 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b60      	cmp	r3, #96	; 0x60
 8003876:	d10e      	bne.n	8003896 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fe ff76 	bl	8002780 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003894:	e009      	b.n	80038aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7fe ff61 	bl	800276c <HAL_I2C_ErrorCallback>
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d103      	bne.n	80038d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2200      	movs	r2, #0
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d007      	beq.n	80038ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699a      	ldr	r2, [r3, #24]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0201 	orr.w	r2, r2, #1
 80038ec:	619a      	str	r2, [r3, #24]
  }
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003916:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d104      	bne.n	800392c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003922:	2120      	movs	r1, #32
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fa59 	bl	8003ddc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800392a:	e02d      	b.n	8003988 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8003934:	441a      	add	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	2bff      	cmp	r3, #255	; 0xff
 8003942:	d903      	bls.n	800394c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	22ff      	movs	r2, #255	; 0xff
 8003948:	851a      	strh	r2, [r3, #40]	; 0x28
 800394a:	e004      	b.n	8003956 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	4619      	mov	r1, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3328      	adds	r3, #40	; 0x28
 8003966:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800396c:	f7fd ff44 	bl	80017f8 <HAL_DMA_Start_IT>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d004      	beq.n	8003980 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003976:	2110      	movs	r1, #16
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f7ff fea3 	bl	80036c4 <I2C_ITError>
}
 800397e:	e003      	b.n	8003988 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8003980:	2140      	movs	r1, #64	; 0x40
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fa2a 	bl	8003ddc <I2C_Enable_IRQ>
}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 80039b6:	2301      	movs	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80039ce:	2301      	movs	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fe f92a 	bl	8001c2c <HAL_DMA_GetError>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d00e      	beq.n	80039fc <I2C_DMAError+0x6c>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00b      	beq.n	80039fc <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039f2:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80039f4:	2110      	movs	r1, #16
 80039f6:	68b8      	ldr	r0, [r7, #8]
 80039f8:	f7ff fe64 	bl	80036c4 <I2C_ITError>
  }
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	2200      	movs	r2, #0
 8003a20:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2e:	2200      	movs	r2, #0
 8003a30:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f7ff ff16 	bl	8003864 <I2C_TreatErrorCallback>
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a50:	e022      	b.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a58:	d01e      	beq.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5a:	f7fd fd01 	bl	8001460 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d302      	bcc.n	8003a70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d113      	bne.n	8003a98 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a74:	f043 0220 	orr.w	r2, r3, #32
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e00f      	b.n	8003ab8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	bf0c      	ite	eq
 8003aa8:	2301      	moveq	r3, #1
 8003aaa:	2300      	movne	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d0cd      	beq.n	8003a52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003acc:	e02c      	b.n	8003b28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f870 	bl	8003bb8 <I2C_IsErrorOccurred>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e02a      	b.n	8003b38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ae8:	d01e      	beq.n	8003b28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aea:	f7fd fcb9 	bl	8001460 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d302      	bcc.n	8003b00 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d113      	bne.n	8003b28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b04:	f043 0220 	orr.w	r2, r3, #32
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e007      	b.n	8003b38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d1cb      	bne.n	8003ace <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b4c:	e028      	b.n	8003ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f830 	bl	8003bb8 <I2C_IsErrorOccurred>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e026      	b.n	8003bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b62:	f7fd fc7d 	bl	8001460 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d302      	bcc.n	8003b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d113      	bne.n	8003ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	f043 0220 	orr.w	r2, r3, #32
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e007      	b.n	8003bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d1cf      	bne.n	8003b4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08a      	sub	sp, #40	; 0x28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d068      	beq.n	8003cb6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2210      	movs	r2, #16
 8003bea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bec:	e049      	b.n	8003c82 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bf4:	d045      	beq.n	8003c82 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bf6:	f7fd fc33 	bl	8001460 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <I2C_IsErrorOccurred+0x54>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d13a      	bne.n	8003c82 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c2e:	d121      	bne.n	8003c74 <I2C_IsErrorOccurred+0xbc>
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c36:	d01d      	beq.n	8003c74 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c38:	7cfb      	ldrb	r3, [r7, #19]
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	d01a      	beq.n	8003c74 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c4e:	f7fd fc07 	bl	8001460 <HAL_GetTick>
 8003c52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c54:	e00e      	b.n	8003c74 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c56:	f7fd fc03 	bl	8001460 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b19      	cmp	r3, #25
 8003c62:	d907      	bls.n	8003c74 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	f043 0320 	orr.w	r3, r3, #32
 8003c6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003c72:	e006      	b.n	8003c82 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d1e9      	bne.n	8003c56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d003      	beq.n	8003c98 <I2C_IsErrorOccurred+0xe0>
 8003c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0aa      	beq.n	8003bee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d103      	bne.n	8003ca8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	f043 0304 	orr.w	r3, r3, #4
 8003cae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00b      	beq.n	8003ce0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00b      	beq.n	8003d02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	f043 0308 	orr.w	r3, r3, #8
 8003cf0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00b      	beq.n	8003d24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	f043 0302 	orr.w	r3, r3, #2
 8003d12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01c      	beq.n	8003d66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f7ff fdc0 	bl	80038b2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6859      	ldr	r1, [r3, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <I2C_IsErrorOccurred+0x1bc>)
 8003d3e:	400b      	ands	r3, r1
 8003d40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003d66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3728      	adds	r7, #40	; 0x28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	fe00e800 	.word	0xfe00e800

08003d78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	607b      	str	r3, [r7, #4]
 8003d82:	460b      	mov	r3, r1
 8003d84:	817b      	strh	r3, [r7, #10]
 8003d86:	4613      	mov	r3, r2
 8003d88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d8a:	897b      	ldrh	r3, [r7, #10]
 8003d8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d90:	7a7b      	ldrb	r3, [r7, #9]
 8003d92:	041b      	lsls	r3, r3, #16
 8003d94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003da6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	0d5b      	lsrs	r3, r3, #21
 8003db2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003db6:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <I2C_TransferConfig+0x60>)
 8003db8:	430b      	orrs	r3, r1
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	ea02 0103 	and.w	r1, r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	03ff63ff 	.word	0x03ff63ff

08003ddc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df0:	4a2d      	ldr	r2, [pc, #180]	; (8003ea8 <I2C_Enable_IRQ+0xcc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d004      	beq.n	8003e00 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003dfa:	4a2c      	ldr	r2, [pc, #176]	; (8003eac <I2C_Enable_IRQ+0xd0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d11d      	bne.n	8003e3c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	da03      	bge.n	8003e10 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003e0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003e10:	887b      	ldrh	r3, [r7, #2]
 8003e12:	2b10      	cmp	r3, #16
 8003e14:	d103      	bne.n	8003e1e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003e1c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003e1e:	887b      	ldrh	r3, [r7, #2]
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d103      	bne.n	8003e2c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e2a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003e2c:	887b      	ldrh	r3, [r7, #2]
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d12c      	bne.n	8003e8c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e38:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003e3a:	e027      	b.n	8003e8c <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	da03      	bge.n	8003e4c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003e4a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003e4c:	887b      	ldrh	r3, [r7, #2]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003e5c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003e5e:	887b      	ldrh	r3, [r7, #2]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003e6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003e70:	887b      	ldrh	r3, [r7, #2]
 8003e72:	2b10      	cmp	r3, #16
 8003e74:	d103      	bne.n	8003e7e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003e7c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003e7e:	887b      	ldrh	r3, [r7, #2]
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d103      	bne.n	8003e8c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f043 0320 	orr.w	r3, r3, #32
 8003e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6819      	ldr	r1, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	0800299b 	.word	0x0800299b
 8003eac:	08002dc9 	.word	0x08002dc9

08003eb0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ec0:	887b      	ldrh	r3, [r7, #2]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00f      	beq.n	8003eea <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003ed0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ede:	2b28      	cmp	r3, #40	; 0x28
 8003ee0:	d003      	beq.n	8003eea <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003ee8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003eea:	887b      	ldrh	r3, [r7, #2]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00f      	beq.n	8003f14 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003efa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f08:	2b28      	cmp	r3, #40	; 0x28
 8003f0a:	d003      	beq.n	8003f14 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003f12:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003f14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	da03      	bge.n	8003f24 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003f22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003f24:	887b      	ldrh	r3, [r7, #2]
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	d103      	bne.n	8003f32 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003f30:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003f32:	887b      	ldrh	r3, [r7, #2]
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d103      	bne.n	8003f40 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f043 0320 	orr.w	r3, r3, #32
 8003f3e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003f40:	887b      	ldrh	r3, [r7, #2]
 8003f42:	2b40      	cmp	r3, #64	; 0x40
 8003f44:	d103      	bne.n	8003f4e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f4c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	43da      	mvns	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	400a      	ands	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d138      	bne.n	8003ff4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e032      	b.n	8003ff6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2224      	movs	r2, #36	; 0x24
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0201 	bic.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6819      	ldr	r1, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004002:	b480      	push	{r7}
 8004004:	b085      	sub	sp, #20
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b20      	cmp	r3, #32
 8004016:	d139      	bne.n	800408c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004022:	2302      	movs	r3, #2
 8004024:	e033      	b.n	800408e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2224      	movs	r2, #36	; 0x24
 8004032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0201 	bic.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004054:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040a4:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	4a0a      	ldr	r2, [pc, #40]	; (80040d4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80040aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040ae:	6453      	str	r3, [r2, #68]	; 0x44
 80040b0:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80040b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	4905      	ldr	r1, [pc, #20]	; (80040d8 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]
}
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	40023800 	.word	0x40023800
 80040d8:	40013800 	.word	0x40013800

080040dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ea:	6013      	str	r3, [r2, #0]
}
 80040ec:	bf00      	nop
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40007000 	.word	0x40007000

080040fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004106:	4b23      	ldr	r3, [pc, #140]	; (8004194 <HAL_PWREx_EnableOverDrive+0x98>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	4a22      	ldr	r2, [pc, #136]	; (8004194 <HAL_PWREx_EnableOverDrive+0x98>)
 800410c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004110:	6413      	str	r3, [r2, #64]	; 0x40
 8004112:	4b20      	ldr	r3, [pc, #128]	; (8004194 <HAL_PWREx_EnableOverDrive+0x98>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800411e:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004128:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800412a:	f7fd f999 	bl	8001460 <HAL_GetTick>
 800412e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004130:	e009      	b.n	8004146 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004132:	f7fd f995 	bl	8001460 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004140:	d901      	bls.n	8004146 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e022      	b.n	800418c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004146:	4b14      	ldr	r3, [pc, #80]	; (8004198 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004152:	d1ee      	bne.n	8004132 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004154:	4b10      	ldr	r3, [pc, #64]	; (8004198 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a0f      	ldr	r2, [pc, #60]	; (8004198 <HAL_PWREx_EnableOverDrive+0x9c>)
 800415a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800415e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004160:	f7fd f97e 	bl	8001460 <HAL_GetTick>
 8004164:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004166:	e009      	b.n	800417c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004168:	f7fd f97a 	bl	8001460 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004176:	d901      	bls.n	800417c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e007      	b.n	800418c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_PWREx_EnableOverDrive+0x9c>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004188:	d1ee      	bne.n	8004168 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40023800 	.word	0x40023800
 8004198:	40007000 	.word	0x40007000

0800419c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80041a4:	2300      	movs	r3, #0
 80041a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e29b      	b.n	80046ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8087 	beq.w	80042ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041c0:	4b96      	ldr	r3, [pc, #600]	; (800441c <HAL_RCC_OscConfig+0x280>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 030c 	and.w	r3, r3, #12
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d00c      	beq.n	80041e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041cc:	4b93      	ldr	r3, [pc, #588]	; (800441c <HAL_RCC_OscConfig+0x280>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 030c 	and.w	r3, r3, #12
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d112      	bne.n	80041fe <HAL_RCC_OscConfig+0x62>
 80041d8:	4b90      	ldr	r3, [pc, #576]	; (800441c <HAL_RCC_OscConfig+0x280>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e4:	d10b      	bne.n	80041fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e6:	4b8d      	ldr	r3, [pc, #564]	; (800441c <HAL_RCC_OscConfig+0x280>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d06c      	beq.n	80042cc <HAL_RCC_OscConfig+0x130>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d168      	bne.n	80042cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e275      	b.n	80046ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004206:	d106      	bne.n	8004216 <HAL_RCC_OscConfig+0x7a>
 8004208:	4b84      	ldr	r3, [pc, #528]	; (800441c <HAL_RCC_OscConfig+0x280>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a83      	ldr	r2, [pc, #524]	; (800441c <HAL_RCC_OscConfig+0x280>)
 800420e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	e02e      	b.n	8004274 <HAL_RCC_OscConfig+0xd8>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10c      	bne.n	8004238 <HAL_RCC_OscConfig+0x9c>
 800421e:	4b7f      	ldr	r3, [pc, #508]	; (800441c <HAL_RCC_OscConfig+0x280>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a7e      	ldr	r2, [pc, #504]	; (800441c <HAL_RCC_OscConfig+0x280>)
 8004224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4b7c      	ldr	r3, [pc, #496]	; (800441c <HAL_RCC_OscConfig+0x280>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a7b      	ldr	r2, [pc, #492]	; (800441c <HAL_RCC_OscConfig+0x280>)
 8004230:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e01d      	b.n	8004274 <HAL_RCC_OscConfig+0xd8>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0xc0>
 8004242:	4b76      	ldr	r3, [pc, #472]	; (800441c <HAL_RCC_OscConfig+0x280>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a75      	ldr	r2, [pc, #468]	; (800441c <HAL_RCC_OscConfig+0x280>)
 8004248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	4b73      	ldr	r3, [pc, #460]	; (800441c <HAL_RCC_OscConfig+0x280>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a72      	ldr	r2, [pc, #456]	; (800441c <HAL_RCC_OscConfig+0x280>)
 8004254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e00b      	b.n	8004274 <HAL_RCC_OscConfig+0xd8>
 800425c:	4b6f      	ldr	r3, [pc, #444]	; (800441c <HAL_RCC_OscConfig+0x280>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a6e      	ldr	r2, [pc, #440]	; (800441c <HAL_RCC_OscConfig+0x280>)
 8004262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	4b6c      	ldr	r3, [pc, #432]	; (800441c <HAL_RCC_OscConfig+0x280>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a6b      	ldr	r2, [pc, #428]	; (800441c <HAL_RCC_OscConfig+0x280>)
 800426e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d013      	beq.n	80042a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7fd f8f0 	bl	8001460 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004284:	f7fd f8ec 	bl	8001460 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	; 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e229      	b.n	80046ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b61      	ldr	r3, [pc, #388]	; (800441c <HAL_RCC_OscConfig+0x280>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0xe8>
 80042a2:	e014      	b.n	80042ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7fd f8dc 	bl	8001460 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ac:	f7fd f8d8 	bl	8001460 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	; 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e215      	b.n	80046ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042be:	4b57      	ldr	r3, [pc, #348]	; (800441c <HAL_RCC_OscConfig+0x280>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f0      	bne.n	80042ac <HAL_RCC_OscConfig+0x110>
 80042ca:	e000      	b.n	80042ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d069      	beq.n	80043ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042da:	4b50      	ldr	r3, [pc, #320]	; (800441c <HAL_RCC_OscConfig+0x280>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e6:	4b4d      	ldr	r3, [pc, #308]	; (800441c <HAL_RCC_OscConfig+0x280>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d11c      	bne.n	800432c <HAL_RCC_OscConfig+0x190>
 80042f2:	4b4a      	ldr	r3, [pc, #296]	; (800441c <HAL_RCC_OscConfig+0x280>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d116      	bne.n	800432c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fe:	4b47      	ldr	r3, [pc, #284]	; (800441c <HAL_RCC_OscConfig+0x280>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_RCC_OscConfig+0x17a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d001      	beq.n	8004316 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e1e9      	b.n	80046ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004316:	4b41      	ldr	r3, [pc, #260]	; (800441c <HAL_RCC_OscConfig+0x280>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	493d      	ldr	r1, [pc, #244]	; (800441c <HAL_RCC_OscConfig+0x280>)
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432a:	e040      	b.n	80043ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d023      	beq.n	800437c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004334:	4b39      	ldr	r3, [pc, #228]	; (800441c <HAL_RCC_OscConfig+0x280>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a38      	ldr	r2, [pc, #224]	; (800441c <HAL_RCC_OscConfig+0x280>)
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004340:	f7fd f88e 	bl	8001460 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004348:	f7fd f88a 	bl	8001460 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e1c7      	b.n	80046ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435a:	4b30      	ldr	r3, [pc, #192]	; (800441c <HAL_RCC_OscConfig+0x280>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004366:	4b2d      	ldr	r3, [pc, #180]	; (800441c <HAL_RCC_OscConfig+0x280>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	4929      	ldr	r1, [pc, #164]	; (800441c <HAL_RCC_OscConfig+0x280>)
 8004376:	4313      	orrs	r3, r2
 8004378:	600b      	str	r3, [r1, #0]
 800437a:	e018      	b.n	80043ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800437c:	4b27      	ldr	r3, [pc, #156]	; (800441c <HAL_RCC_OscConfig+0x280>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a26      	ldr	r2, [pc, #152]	; (800441c <HAL_RCC_OscConfig+0x280>)
 8004382:	f023 0301 	bic.w	r3, r3, #1
 8004386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fd f86a 	bl	8001460 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004390:	f7fd f866 	bl	8001460 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e1a3      	b.n	80046ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a2:	4b1e      	ldr	r3, [pc, #120]	; (800441c <HAL_RCC_OscConfig+0x280>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d038      	beq.n	800442c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d019      	beq.n	80043f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043c2:	4b16      	ldr	r3, [pc, #88]	; (800441c <HAL_RCC_OscConfig+0x280>)
 80043c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c6:	4a15      	ldr	r2, [pc, #84]	; (800441c <HAL_RCC_OscConfig+0x280>)
 80043c8:	f043 0301 	orr.w	r3, r3, #1
 80043cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ce:	f7fd f847 	bl	8001460 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d6:	f7fd f843 	bl	8001460 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e180      	b.n	80046ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e8:	4b0c      	ldr	r3, [pc, #48]	; (800441c <HAL_RCC_OscConfig+0x280>)
 80043ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x23a>
 80043f4:	e01a      	b.n	800442c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <HAL_RCC_OscConfig+0x280>)
 80043f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fa:	4a08      	ldr	r2, [pc, #32]	; (800441c <HAL_RCC_OscConfig+0x280>)
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004402:	f7fd f82d 	bl	8001460 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004408:	e00a      	b.n	8004420 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800440a:	f7fd f829 	bl	8001460 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d903      	bls.n	8004420 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e166      	b.n	80046ea <HAL_RCC_OscConfig+0x54e>
 800441c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004420:	4b92      	ldr	r3, [pc, #584]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 8004422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1ee      	bne.n	800440a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80a4 	beq.w	8004582 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800443a:	4b8c      	ldr	r3, [pc, #560]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10d      	bne.n	8004462 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004446:	4b89      	ldr	r3, [pc, #548]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	4a88      	ldr	r2, [pc, #544]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004450:	6413      	str	r3, [r2, #64]	; 0x40
 8004452:	4b86      	ldr	r3, [pc, #536]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004462:	4b83      	ldr	r3, [pc, #524]	; (8004670 <HAL_RCC_OscConfig+0x4d4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d118      	bne.n	80044a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800446e:	4b80      	ldr	r3, [pc, #512]	; (8004670 <HAL_RCC_OscConfig+0x4d4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a7f      	ldr	r2, [pc, #508]	; (8004670 <HAL_RCC_OscConfig+0x4d4>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447a:	f7fc fff1 	bl	8001460 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004482:	f7fc ffed 	bl	8001460 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b64      	cmp	r3, #100	; 0x64
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e12a      	b.n	80046ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004494:	4b76      	ldr	r3, [pc, #472]	; (8004670 <HAL_RCC_OscConfig+0x4d4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d106      	bne.n	80044b6 <HAL_RCC_OscConfig+0x31a>
 80044a8:	4b70      	ldr	r3, [pc, #448]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	4a6f      	ldr	r2, [pc, #444]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	6713      	str	r3, [r2, #112]	; 0x70
 80044b4:	e02d      	b.n	8004512 <HAL_RCC_OscConfig+0x376>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x33c>
 80044be:	4b6b      	ldr	r3, [pc, #428]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	4a6a      	ldr	r2, [pc, #424]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 80044c4:	f023 0301 	bic.w	r3, r3, #1
 80044c8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ca:	4b68      	ldr	r3, [pc, #416]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	4a67      	ldr	r2, [pc, #412]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 80044d0:	f023 0304 	bic.w	r3, r3, #4
 80044d4:	6713      	str	r3, [r2, #112]	; 0x70
 80044d6:	e01c      	b.n	8004512 <HAL_RCC_OscConfig+0x376>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b05      	cmp	r3, #5
 80044de:	d10c      	bne.n	80044fa <HAL_RCC_OscConfig+0x35e>
 80044e0:	4b62      	ldr	r3, [pc, #392]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	4a61      	ldr	r2, [pc, #388]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 80044e6:	f043 0304 	orr.w	r3, r3, #4
 80044ea:	6713      	str	r3, [r2, #112]	; 0x70
 80044ec:	4b5f      	ldr	r3, [pc, #380]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	4a5e      	ldr	r2, [pc, #376]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	6713      	str	r3, [r2, #112]	; 0x70
 80044f8:	e00b      	b.n	8004512 <HAL_RCC_OscConfig+0x376>
 80044fa:	4b5c      	ldr	r3, [pc, #368]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	4a5b      	ldr	r2, [pc, #364]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	6713      	str	r3, [r2, #112]	; 0x70
 8004506:	4b59      	ldr	r3, [pc, #356]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	4a58      	ldr	r2, [pc, #352]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 800450c:	f023 0304 	bic.w	r3, r3, #4
 8004510:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d015      	beq.n	8004546 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451a:	f7fc ffa1 	bl	8001460 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004520:	e00a      	b.n	8004538 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004522:	f7fc ff9d 	bl	8001460 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e0d8      	b.n	80046ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004538:	4b4c      	ldr	r3, [pc, #304]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 800453a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ee      	beq.n	8004522 <HAL_RCC_OscConfig+0x386>
 8004544:	e014      	b.n	8004570 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004546:	f7fc ff8b 	bl	8001460 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454c:	e00a      	b.n	8004564 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454e:	f7fc ff87 	bl	8001460 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	f241 3288 	movw	r2, #5000	; 0x1388
 800455c:	4293      	cmp	r3, r2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e0c2      	b.n	80046ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004564:	4b41      	ldr	r3, [pc, #260]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 8004566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1ee      	bne.n	800454e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004570:	7dfb      	ldrb	r3, [r7, #23]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d105      	bne.n	8004582 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004576:	4b3d      	ldr	r3, [pc, #244]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	4a3c      	ldr	r2, [pc, #240]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 800457c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004580:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 80ae 	beq.w	80046e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800458c:	4b37      	ldr	r3, [pc, #220]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 030c 	and.w	r3, r3, #12
 8004594:	2b08      	cmp	r3, #8
 8004596:	d06d      	beq.n	8004674 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	2b02      	cmp	r3, #2
 800459e:	d14b      	bne.n	8004638 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a0:	4b32      	ldr	r3, [pc, #200]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a31      	ldr	r2, [pc, #196]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 80045a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fc ff58 	bl	8001460 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b4:	f7fc ff54 	bl	8001460 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e091      	b.n	80046ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c6:	4b29      	ldr	r3, [pc, #164]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69da      	ldr	r2, [r3, #28]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	019b      	lsls	r3, r3, #6
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	085b      	lsrs	r3, r3, #1
 80045ea:	3b01      	subs	r3, #1
 80045ec:	041b      	lsls	r3, r3, #16
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	061b      	lsls	r3, r3, #24
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	071b      	lsls	r3, r3, #28
 80045fe:	491b      	ldr	r1, [pc, #108]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004604:	4b19      	ldr	r3, [pc, #100]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a18      	ldr	r2, [pc, #96]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 800460a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800460e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004610:	f7fc ff26 	bl	8001460 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004618:	f7fc ff22 	bl	8001460 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e05f      	b.n	80046ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0x47c>
 8004636:	e057      	b.n	80046e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a0b      	ldr	r2, [pc, #44]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 800463e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fc ff0c 	bl	8001460 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464c:	f7fc ff08 	bl	8001460 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e045      	b.n	80046ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465e:	4b03      	ldr	r3, [pc, #12]	; (800466c <HAL_RCC_OscConfig+0x4d0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x4b0>
 800466a:	e03d      	b.n	80046e8 <HAL_RCC_OscConfig+0x54c>
 800466c:	40023800 	.word	0x40023800
 8004670:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004674:	4b1f      	ldr	r3, [pc, #124]	; (80046f4 <HAL_RCC_OscConfig+0x558>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d030      	beq.n	80046e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800468c:	429a      	cmp	r2, r3
 800468e:	d129      	bne.n	80046e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800469a:	429a      	cmp	r2, r3
 800469c:	d122      	bne.n	80046e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046a4:	4013      	ands	r3, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d119      	bne.n	80046e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	085b      	lsrs	r3, r3, #1
 80046bc:	3b01      	subs	r3, #1
 80046be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d10f      	bne.n	80046e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40023800 	.word	0x40023800

080046f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0d0      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004710:	4b6a      	ldr	r3, [pc, #424]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d910      	bls.n	8004740 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471e:	4b67      	ldr	r3, [pc, #412]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f023 020f 	bic.w	r2, r3, #15
 8004726:	4965      	ldr	r1, [pc, #404]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	4313      	orrs	r3, r2
 800472c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472e:	4b63      	ldr	r3, [pc, #396]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d001      	beq.n	8004740 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e0b8      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d020      	beq.n	800478e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004758:	4b59      	ldr	r3, [pc, #356]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4a58      	ldr	r2, [pc, #352]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 800475e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004762:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004770:	4b53      	ldr	r3, [pc, #332]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	4a52      	ldr	r2, [pc, #328]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800477a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800477c:	4b50      	ldr	r3, [pc, #320]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	494d      	ldr	r1, [pc, #308]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d040      	beq.n	800481c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d107      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a2:	4b47      	ldr	r3, [pc, #284]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d115      	bne.n	80047da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e07f      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d107      	bne.n	80047ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ba:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e073      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ca:	4b3d      	ldr	r3, [pc, #244]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e06b      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047da:	4b39      	ldr	r3, [pc, #228]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f023 0203 	bic.w	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4936      	ldr	r1, [pc, #216]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ec:	f7fc fe38 	bl	8001460 <HAL_GetTick>
 80047f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	e00a      	b.n	800480a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f4:	f7fc fe34 	bl	8001460 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e053      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480a:	4b2d      	ldr	r3, [pc, #180]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 020c 	and.w	r2, r3, #12
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	429a      	cmp	r2, r3
 800481a:	d1eb      	bne.n	80047f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800481c:	4b27      	ldr	r3, [pc, #156]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d210      	bcs.n	800484c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482a:	4b24      	ldr	r3, [pc, #144]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 020f 	bic.w	r2, r3, #15
 8004832:	4922      	ldr	r1, [pc, #136]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	4b20      	ldr	r3, [pc, #128]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e032      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004858:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4916      	ldr	r1, [pc, #88]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004866:	4313      	orrs	r3, r2
 8004868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004876:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	490e      	ldr	r1, [pc, #56]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800488a:	f000 f821 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
 800488e:	4602      	mov	r2, r0
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	091b      	lsrs	r3, r3, #4
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	490a      	ldr	r1, [pc, #40]	; (80048c4 <HAL_RCC_ClockConfig+0x1cc>)
 800489c:	5ccb      	ldrb	r3, [r1, r3]
 800489e:	fa22 f303 	lsr.w	r3, r2, r3
 80048a2:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <HAL_RCC_ClockConfig+0x1d0>)
 80048a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <HAL_RCC_ClockConfig+0x1d4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fc fd94 	bl	80013d8 <HAL_InitTick>

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40023c00 	.word	0x40023c00
 80048c0:	40023800 	.word	0x40023800
 80048c4:	08028930 	.word	0x08028930
 80048c8:	20000004 	.word	0x20000004
 80048cc:	20000008 	.word	0x20000008

080048d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d4:	b094      	sub	sp, #80	; 0x50
 80048d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	647b      	str	r3, [r7, #68]	; 0x44
 80048dc:	2300      	movs	r3, #0
 80048de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e0:	2300      	movs	r3, #0
 80048e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e8:	4b79      	ldr	r3, [pc, #484]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 030c 	and.w	r3, r3, #12
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d00d      	beq.n	8004910 <HAL_RCC_GetSysClockFreq+0x40>
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	f200 80e1 	bhi.w	8004abc <HAL_RCC_GetSysClockFreq+0x1ec>
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_RCC_GetSysClockFreq+0x34>
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d003      	beq.n	800490a <HAL_RCC_GetSysClockFreq+0x3a>
 8004902:	e0db      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004904:	4b73      	ldr	r3, [pc, #460]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004906:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004908:	e0db      	b.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800490a:	4b73      	ldr	r3, [pc, #460]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x208>)
 800490c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800490e:	e0d8      	b.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004910:	4b6f      	ldr	r3, [pc, #444]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004918:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800491a:	4b6d      	ldr	r3, [pc, #436]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d063      	beq.n	80049ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004926:	4b6a      	ldr	r3, [pc, #424]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	099b      	lsrs	r3, r3, #6
 800492c:	2200      	movs	r2, #0
 800492e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004930:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004938:	633b      	str	r3, [r7, #48]	; 0x30
 800493a:	2300      	movs	r3, #0
 800493c:	637b      	str	r3, [r7, #52]	; 0x34
 800493e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004942:	4622      	mov	r2, r4
 8004944:	462b      	mov	r3, r5
 8004946:	f04f 0000 	mov.w	r0, #0
 800494a:	f04f 0100 	mov.w	r1, #0
 800494e:	0159      	lsls	r1, r3, #5
 8004950:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004954:	0150      	lsls	r0, r2, #5
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4621      	mov	r1, r4
 800495c:	1a51      	subs	r1, r2, r1
 800495e:	6139      	str	r1, [r7, #16]
 8004960:	4629      	mov	r1, r5
 8004962:	eb63 0301 	sbc.w	r3, r3, r1
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004974:	4659      	mov	r1, fp
 8004976:	018b      	lsls	r3, r1, #6
 8004978:	4651      	mov	r1, sl
 800497a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800497e:	4651      	mov	r1, sl
 8004980:	018a      	lsls	r2, r1, #6
 8004982:	4651      	mov	r1, sl
 8004984:	ebb2 0801 	subs.w	r8, r2, r1
 8004988:	4659      	mov	r1, fp
 800498a:	eb63 0901 	sbc.w	r9, r3, r1
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800499a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800499e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049a2:	4690      	mov	r8, r2
 80049a4:	4699      	mov	r9, r3
 80049a6:	4623      	mov	r3, r4
 80049a8:	eb18 0303 	adds.w	r3, r8, r3
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	462b      	mov	r3, r5
 80049b0:	eb49 0303 	adc.w	r3, r9, r3
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049c2:	4629      	mov	r1, r5
 80049c4:	024b      	lsls	r3, r1, #9
 80049c6:	4621      	mov	r1, r4
 80049c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049cc:	4621      	mov	r1, r4
 80049ce:	024a      	lsls	r2, r1, #9
 80049d0:	4610      	mov	r0, r2
 80049d2:	4619      	mov	r1, r3
 80049d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d6:	2200      	movs	r2, #0
 80049d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049e0:	f7fb fc3c 	bl	800025c <__aeabi_uldivmod>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4613      	mov	r3, r2
 80049ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ec:	e058      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ee:	4b38      	ldr	r3, [pc, #224]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	099b      	lsrs	r3, r3, #6
 80049f4:	2200      	movs	r2, #0
 80049f6:	4618      	mov	r0, r3
 80049f8:	4611      	mov	r1, r2
 80049fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049fe:	623b      	str	r3, [r7, #32]
 8004a00:	2300      	movs	r3, #0
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24
 8004a04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a08:	4642      	mov	r2, r8
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	f04f 0000 	mov.w	r0, #0
 8004a10:	f04f 0100 	mov.w	r1, #0
 8004a14:	0159      	lsls	r1, r3, #5
 8004a16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a1a:	0150      	lsls	r0, r2, #5
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4641      	mov	r1, r8
 8004a22:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a26:	4649      	mov	r1, r9
 8004a28:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a40:	ebb2 040a 	subs.w	r4, r2, sl
 8004a44:	eb63 050b 	sbc.w	r5, r3, fp
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	00eb      	lsls	r3, r5, #3
 8004a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a56:	00e2      	lsls	r2, r4, #3
 8004a58:	4614      	mov	r4, r2
 8004a5a:	461d      	mov	r5, r3
 8004a5c:	4643      	mov	r3, r8
 8004a5e:	18e3      	adds	r3, r4, r3
 8004a60:	603b      	str	r3, [r7, #0]
 8004a62:	464b      	mov	r3, r9
 8004a64:	eb45 0303 	adc.w	r3, r5, r3
 8004a68:	607b      	str	r3, [r7, #4]
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a76:	4629      	mov	r1, r5
 8004a78:	028b      	lsls	r3, r1, #10
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a80:	4621      	mov	r1, r4
 8004a82:	028a      	lsls	r2, r1, #10
 8004a84:	4610      	mov	r0, r2
 8004a86:	4619      	mov	r1, r3
 8004a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	61fa      	str	r2, [r7, #28]
 8004a90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a94:	f7fb fbe2 	bl	800025c <__aeabi_uldivmod>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	0c1b      	lsrs	r3, r3, #16
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	3301      	adds	r3, #1
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004ab0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004aba:	e002      	b.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004abc:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004abe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3750      	adds	r7, #80	; 0x50
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	00f42400 	.word	0x00f42400
 8004ad8:	007a1200 	.word	0x007a1200

08004adc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ae0:	4b03      	ldr	r3, [pc, #12]	; (8004af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000004 	.word	0x20000004

08004af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004af8:	f7ff fff0 	bl	8004adc <HAL_RCC_GetHCLKFreq>
 8004afc:	4602      	mov	r2, r0
 8004afe:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	0a9b      	lsrs	r3, r3, #10
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	4903      	ldr	r1, [pc, #12]	; (8004b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b0a:	5ccb      	ldrb	r3, [r1, r3]
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40023800 	.word	0x40023800
 8004b18:	08028940 	.word	0x08028940

08004b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b20:	f7ff ffdc 	bl	8004adc <HAL_RCC_GetHCLKFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	0b5b      	lsrs	r3, r3, #13
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	4903      	ldr	r1, [pc, #12]	; (8004b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b32:	5ccb      	ldrb	r3, [r1, r3]
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	08028940 	.word	0x08028940

08004b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d012      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b6c:	4b69      	ldr	r3, [pc, #420]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a68      	ldr	r2, [pc, #416]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b76:	6093      	str	r3, [r2, #8]
 8004b78:	4b66      	ldr	r3, [pc, #408]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b80:	4964      	ldr	r1, [pc, #400]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d017      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b9e:	4b5d      	ldr	r3, [pc, #372]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bac:	4959      	ldr	r1, [pc, #356]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d017      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bda:	4b4e      	ldr	r3, [pc, #312]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	494a      	ldr	r1, [pc, #296]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004c06:	2301      	movs	r3, #1
 8004c08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004c16:	2301      	movs	r3, #1
 8004c18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 808b 	beq.w	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c28:	4b3a      	ldr	r3, [pc, #232]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	4a39      	ldr	r2, [pc, #228]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c32:	6413      	str	r3, [r2, #64]	; 0x40
 8004c34:	4b37      	ldr	r3, [pc, #220]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c40:	4b35      	ldr	r3, [pc, #212]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a34      	ldr	r2, [pc, #208]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c4c:	f7fc fc08 	bl	8001460 <HAL_GetTick>
 8004c50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c54:	f7fc fc04 	bl	8001460 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e38f      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c66:	4b2c      	ldr	r3, [pc, #176]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c72:	4b28      	ldr	r3, [pc, #160]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d035      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d02e      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c90:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c9a:	4b1e      	ldr	r3, [pc, #120]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	4a1a      	ldr	r2, [pc, #104]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004cb2:	4a18      	ldr	r2, [pc, #96]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cb8:	4b16      	ldr	r3, [pc, #88]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d114      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fc fbcc 	bl	8001460 <HAL_GetTick>
 8004cc8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cca:	e00a      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ccc:	f7fc fbc8 	bl	8001460 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e351      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0ee      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cfa:	d111      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d08:	4b04      	ldr	r3, [pc, #16]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d0a:	400b      	ands	r3, r1
 8004d0c:	4901      	ldr	r1, [pc, #4]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	608b      	str	r3, [r1, #8]
 8004d12:	e00b      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d14:	40023800 	.word	0x40023800
 8004d18:	40007000 	.word	0x40007000
 8004d1c:	0ffffcff 	.word	0x0ffffcff
 8004d20:	4bac      	ldr	r3, [pc, #688]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	4aab      	ldr	r2, [pc, #684]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d2a:	6093      	str	r3, [r2, #8]
 8004d2c:	4ba9      	ldr	r3, [pc, #676]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d38:	49a6      	ldr	r1, [pc, #664]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0310 	and.w	r3, r3, #16
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d010      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d4a:	4ba2      	ldr	r3, [pc, #648]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d50:	4aa0      	ldr	r2, [pc, #640]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d5a:	4b9e      	ldr	r3, [pc, #632]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	499b      	ldr	r1, [pc, #620]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d78:	4b96      	ldr	r3, [pc, #600]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d86:	4993      	ldr	r1, [pc, #588]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d9a:	4b8e      	ldr	r3, [pc, #568]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004da8:	498a      	ldr	r1, [pc, #552]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dbc:	4b85      	ldr	r3, [pc, #532]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dca:	4982      	ldr	r1, [pc, #520]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dde:	4b7d      	ldr	r3, [pc, #500]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	4979      	ldr	r1, [pc, #484]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e00:	4b74      	ldr	r3, [pc, #464]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e06:	f023 0203 	bic.w	r2, r3, #3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0e:	4971      	ldr	r1, [pc, #452]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e22:	4b6c      	ldr	r3, [pc, #432]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e28:	f023 020c 	bic.w	r2, r3, #12
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e30:	4968      	ldr	r1, [pc, #416]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e44:	4b63      	ldr	r3, [pc, #396]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e52:	4960      	ldr	r1, [pc, #384]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e66:	4b5b      	ldr	r3, [pc, #364]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e74:	4957      	ldr	r1, [pc, #348]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e88:	4b52      	ldr	r3, [pc, #328]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e96:	494f      	ldr	r1, [pc, #316]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004eaa:	4b4a      	ldr	r3, [pc, #296]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	4946      	ldr	r1, [pc, #280]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ecc:	4b41      	ldr	r3, [pc, #260]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eda:	493e      	ldr	r1, [pc, #248]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004eee:	4b39      	ldr	r3, [pc, #228]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efc:	4935      	ldr	r1, [pc, #212]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f10:	4b30      	ldr	r3, [pc, #192]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f1e:	492d      	ldr	r1, [pc, #180]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d011      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f32:	4b28      	ldr	r3, [pc, #160]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f38:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f40:	4924      	ldr	r1, [pc, #144]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f50:	d101      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f52:	2301      	movs	r3, #1
 8004f54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f62:	2301      	movs	r3, #1
 8004f64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f72:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f78:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f80:	4914      	ldr	r1, [pc, #80]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f94:	4b0f      	ldr	r3, [pc, #60]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa4:	490b      	ldr	r1, [pc, #44]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00f      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004fb8:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc8:	4902      	ldr	r1, [pc, #8]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fd0:	e002      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004fd2:	bf00      	nop
 8004fd4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fe4:	4b8a      	ldr	r3, [pc, #552]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff4:	4986      	ldr	r1, [pc, #536]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005008:	4b81      	ldr	r3, [pc, #516]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800500a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800500e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005018:	497d      	ldr	r1, [pc, #500]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d006      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 80d6 	beq.w	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005034:	4b76      	ldr	r3, [pc, #472]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a75      	ldr	r2, [pc, #468]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800503e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005040:	f7fc fa0e 	bl	8001460 <HAL_GetTick>
 8005044:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005048:	f7fc fa0a 	bl	8001460 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	; 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e195      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800505a:	4b6d      	ldr	r3, [pc, #436]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d021      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005076:	2b00      	cmp	r3, #0
 8005078:	d11d      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800507a:	4b65      	ldr	r3, [pc, #404]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800507c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005080:	0c1b      	lsrs	r3, r3, #16
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005088:	4b61      	ldr	r3, [pc, #388]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800508a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508e:	0e1b      	lsrs	r3, r3, #24
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	019a      	lsls	r2, r3, #6
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	041b      	lsls	r3, r3, #16
 80050a0:	431a      	orrs	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	061b      	lsls	r3, r3, #24
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	071b      	lsls	r3, r3, #28
 80050ae:	4958      	ldr	r1, [pc, #352]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d004      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d02e      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050e0:	d129      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050e2:	4b4b      	ldr	r3, [pc, #300]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e8:	0c1b      	lsrs	r3, r3, #16
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050f0:	4b47      	ldr	r3, [pc, #284]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f6:	0f1b      	lsrs	r3, r3, #28
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	019a      	lsls	r2, r3, #6
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	041b      	lsls	r3, r3, #16
 8005108:	431a      	orrs	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	061b      	lsls	r3, r3, #24
 8005110:	431a      	orrs	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	071b      	lsls	r3, r3, #28
 8005116:	493e      	ldr	r1, [pc, #248]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800511e:	4b3c      	ldr	r3, [pc, #240]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005124:	f023 021f 	bic.w	r2, r3, #31
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	3b01      	subs	r3, #1
 800512e:	4938      	ldr	r1, [pc, #224]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d01d      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005142:	4b33      	ldr	r3, [pc, #204]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005148:	0e1b      	lsrs	r3, r3, #24
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005150:	4b2f      	ldr	r3, [pc, #188]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005156:	0f1b      	lsrs	r3, r3, #28
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	019a      	lsls	r2, r3, #6
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	041b      	lsls	r3, r3, #16
 800516a:	431a      	orrs	r2, r3
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	061b      	lsls	r3, r3, #24
 8005170:	431a      	orrs	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	071b      	lsls	r3, r3, #28
 8005176:	4926      	ldr	r1, [pc, #152]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d011      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	019a      	lsls	r2, r3, #6
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	041b      	lsls	r3, r3, #16
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	061b      	lsls	r3, r3, #24
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	071b      	lsls	r3, r3, #28
 80051a6:	491a      	ldr	r1, [pc, #104]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051ae:	4b18      	ldr	r3, [pc, #96]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a17      	ldr	r2, [pc, #92]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ba:	f7fc f951 	bl	8001460 <HAL_GetTick>
 80051be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051c0:	e008      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051c2:	f7fc f94d 	bl	8001460 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b64      	cmp	r3, #100	; 0x64
 80051ce:	d901      	bls.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e0d8      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051d4:	4b0e      	ldr	r3, [pc, #56]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0f0      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	f040 80ce 	bne.w	8005384 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a08      	ldr	r2, [pc, #32]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f4:	f7fc f934 	bl	8001460 <HAL_GetTick>
 80051f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051fa:	e00b      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051fc:	f7fc f930 	bl	8001460 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b64      	cmp	r3, #100	; 0x64
 8005208:	d904      	bls.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e0bb      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800520e:	bf00      	nop
 8005210:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005214:	4b5e      	ldr	r3, [pc, #376]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800521c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005220:	d0ec      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800523e:	2b00      	cmp	r3, #0
 8005240:	d02e      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d12a      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800524a:	4b51      	ldr	r3, [pc, #324]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005250:	0c1b      	lsrs	r3, r3, #16
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005258:	4b4d      	ldr	r3, [pc, #308]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525e:	0f1b      	lsrs	r3, r3, #28
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	019a      	lsls	r2, r3, #6
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	041b      	lsls	r3, r3, #16
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	061b      	lsls	r3, r3, #24
 8005278:	431a      	orrs	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	071b      	lsls	r3, r3, #28
 800527e:	4944      	ldr	r1, [pc, #272]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005286:	4b42      	ldr	r3, [pc, #264]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800528c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005294:	3b01      	subs	r3, #1
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	493d      	ldr	r1, [pc, #244]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d022      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052b4:	d11d      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052b6:	4b36      	ldr	r3, [pc, #216]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052bc:	0e1b      	lsrs	r3, r3, #24
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052c4:	4b32      	ldr	r3, [pc, #200]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ca:	0f1b      	lsrs	r3, r3, #28
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	019a      	lsls	r2, r3, #6
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	041b      	lsls	r3, r3, #16
 80052de:	431a      	orrs	r2, r3
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	061b      	lsls	r3, r3, #24
 80052e4:	431a      	orrs	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	071b      	lsls	r3, r3, #28
 80052ea:	4929      	ldr	r1, [pc, #164]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d028      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052fe:	4b24      	ldr	r3, [pc, #144]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005304:	0e1b      	lsrs	r3, r3, #24
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800530c:	4b20      	ldr	r3, [pc, #128]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005312:	0c1b      	lsrs	r3, r3, #16
 8005314:	f003 0303 	and.w	r3, r3, #3
 8005318:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	019a      	lsls	r2, r3, #6
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	041b      	lsls	r3, r3, #16
 8005324:	431a      	orrs	r2, r3
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	061b      	lsls	r3, r3, #24
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	071b      	lsls	r3, r3, #28
 8005332:	4917      	ldr	r1, [pc, #92]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800533a:	4b15      	ldr	r3, [pc, #84]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800533c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005340:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	4911      	ldr	r1, [pc, #68]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005350:	4b0f      	ldr	r3, [pc, #60]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a0e      	ldr	r2, [pc, #56]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800535c:	f7fc f880 	bl	8001460 <HAL_GetTick>
 8005360:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005364:	f7fc f87c 	bl	8001460 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	; 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e007      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800537e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005382:	d1ef      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3720      	adds	r7, #32
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40023800 	.word	0x40023800

08005394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e049      	b.n	800543a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fb ff20 	bl	8001200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f000 f9f6 	bl	80057c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b01      	cmp	r3, #1
 8005456:	d001      	beq.n	800545c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e054      	b.n	8005506 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a26      	ldr	r2, [pc, #152]	; (8005514 <HAL_TIM_Base_Start_IT+0xd0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d022      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x80>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005486:	d01d      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x80>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a22      	ldr	r2, [pc, #136]	; (8005518 <HAL_TIM_Base_Start_IT+0xd4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d018      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x80>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a21      	ldr	r2, [pc, #132]	; (800551c <HAL_TIM_Base_Start_IT+0xd8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d013      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x80>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1f      	ldr	r2, [pc, #124]	; (8005520 <HAL_TIM_Base_Start_IT+0xdc>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00e      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x80>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1e      	ldr	r2, [pc, #120]	; (8005524 <HAL_TIM_Base_Start_IT+0xe0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d009      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x80>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1c      	ldr	r2, [pc, #112]	; (8005528 <HAL_TIM_Base_Start_IT+0xe4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d004      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x80>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1b      	ldr	r2, [pc, #108]	; (800552c <HAL_TIM_Base_Start_IT+0xe8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d115      	bne.n	80054f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	4b19      	ldr	r3, [pc, #100]	; (8005530 <HAL_TIM_Base_Start_IT+0xec>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b06      	cmp	r3, #6
 80054d4:	d015      	beq.n	8005502 <HAL_TIM_Base_Start_IT+0xbe>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054dc:	d011      	beq.n	8005502 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0201 	orr.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ee:	e008      	b.n	8005502 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0201 	orr.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	e000      	b.n	8005504 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005502:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40010000 	.word	0x40010000
 8005518:	40000400 	.word	0x40000400
 800551c:	40000800 	.word	0x40000800
 8005520:	40000c00 	.word	0x40000c00
 8005524:	40010400 	.word	0x40010400
 8005528:	40014000 	.word	0x40014000
 800552c:	40001800 	.word	0x40001800
 8005530:	00010007 	.word	0x00010007

08005534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b02      	cmp	r3, #2
 8005548:	d122      	bne.n	8005590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b02      	cmp	r3, #2
 8005556:	d11b      	bne.n	8005590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f06f 0202 	mvn.w	r2, #2
 8005560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f905 	bl	8005786 <HAL_TIM_IC_CaptureCallback>
 800557c:	e005      	b.n	800558a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f8f7 	bl	8005772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f908 	bl	800579a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b04      	cmp	r3, #4
 800559c:	d122      	bne.n	80055e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d11b      	bne.n	80055e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0204 	mvn.w	r2, #4
 80055b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2202      	movs	r2, #2
 80055ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f8db 	bl	8005786 <HAL_TIM_IC_CaptureCallback>
 80055d0:	e005      	b.n	80055de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f8cd 	bl	8005772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f8de 	bl	800579a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d122      	bne.n	8005638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0308 	and.w	r3, r3, #8
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d11b      	bne.n	8005638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0208 	mvn.w	r2, #8
 8005608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2204      	movs	r2, #4
 800560e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f8b1 	bl	8005786 <HAL_TIM_IC_CaptureCallback>
 8005624:	e005      	b.n	8005632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8a3 	bl	8005772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f8b4 	bl	800579a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0310 	and.w	r3, r3, #16
 8005642:	2b10      	cmp	r3, #16
 8005644:	d122      	bne.n	800568c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b10      	cmp	r3, #16
 8005652:	d11b      	bne.n	800568c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0210 	mvn.w	r2, #16
 800565c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2208      	movs	r2, #8
 8005662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f887 	bl	8005786 <HAL_TIM_IC_CaptureCallback>
 8005678:	e005      	b.n	8005686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f879 	bl	8005772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f88a 	bl	800579a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b01      	cmp	r3, #1
 8005698:	d10e      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d107      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0201 	mvn.w	r2, #1
 80056b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fb fb7a 	bl	8000dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c2:	2b80      	cmp	r3, #128	; 0x80
 80056c4:	d10e      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d0:	2b80      	cmp	r3, #128	; 0x80
 80056d2:	d107      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f9a8 	bl	8005a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f2:	d10e      	bne.n	8005712 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fe:	2b80      	cmp	r3, #128	; 0x80
 8005700:	d107      	bne.n	8005712 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800570a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f99b 	bl	8005a48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571c:	2b40      	cmp	r3, #64	; 0x40
 800571e:	d10e      	bne.n	800573e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572a:	2b40      	cmp	r3, #64	; 0x40
 800572c:	d107      	bne.n	800573e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f838 	bl	80057ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b20      	cmp	r3, #32
 800574a:	d10e      	bne.n	800576a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b20      	cmp	r3, #32
 8005758:	d107      	bne.n	800576a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f06f 0220 	mvn.w	r2, #32
 8005762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f95b 	bl	8005a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800576a:	bf00      	nop
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
	...

080057c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a40      	ldr	r2, [pc, #256]	; (80058d8 <TIM_Base_SetConfig+0x114>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d013      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e2:	d00f      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a3d      	ldr	r2, [pc, #244]	; (80058dc <TIM_Base_SetConfig+0x118>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00b      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a3c      	ldr	r2, [pc, #240]	; (80058e0 <TIM_Base_SetConfig+0x11c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a3b      	ldr	r2, [pc, #236]	; (80058e4 <TIM_Base_SetConfig+0x120>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a3a      	ldr	r2, [pc, #232]	; (80058e8 <TIM_Base_SetConfig+0x124>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d108      	bne.n	8005816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a2f      	ldr	r2, [pc, #188]	; (80058d8 <TIM_Base_SetConfig+0x114>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d02b      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005824:	d027      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a2c      	ldr	r2, [pc, #176]	; (80058dc <TIM_Base_SetConfig+0x118>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d023      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a2b      	ldr	r2, [pc, #172]	; (80058e0 <TIM_Base_SetConfig+0x11c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d01f      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2a      	ldr	r2, [pc, #168]	; (80058e4 <TIM_Base_SetConfig+0x120>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d01b      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a29      	ldr	r2, [pc, #164]	; (80058e8 <TIM_Base_SetConfig+0x124>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d017      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a28      	ldr	r2, [pc, #160]	; (80058ec <TIM_Base_SetConfig+0x128>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d013      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a27      	ldr	r2, [pc, #156]	; (80058f0 <TIM_Base_SetConfig+0x12c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00f      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a26      	ldr	r2, [pc, #152]	; (80058f4 <TIM_Base_SetConfig+0x130>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00b      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a25      	ldr	r2, [pc, #148]	; (80058f8 <TIM_Base_SetConfig+0x134>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d007      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a24      	ldr	r2, [pc, #144]	; (80058fc <TIM_Base_SetConfig+0x138>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a23      	ldr	r2, [pc, #140]	; (8005900 <TIM_Base_SetConfig+0x13c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d108      	bne.n	8005888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a0a      	ldr	r2, [pc, #40]	; (80058d8 <TIM_Base_SetConfig+0x114>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d003      	beq.n	80058bc <TIM_Base_SetConfig+0xf8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a0c      	ldr	r2, [pc, #48]	; (80058e8 <TIM_Base_SetConfig+0x124>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d103      	bne.n	80058c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	615a      	str	r2, [r3, #20]
}
 80058ca:	bf00      	nop
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40010000 	.word	0x40010000
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800
 80058e4:	40000c00 	.word	0x40000c00
 80058e8:	40010400 	.word	0x40010400
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40014400 	.word	0x40014400
 80058f4:	40014800 	.word	0x40014800
 80058f8:	40001800 	.word	0x40001800
 80058fc:	40001c00 	.word	0x40001c00
 8005900:	40002000 	.word	0x40002000

08005904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005918:	2302      	movs	r3, #2
 800591a:	e06d      	b.n	80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a30      	ldr	r2, [pc, #192]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d004      	beq.n	8005950 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a2f      	ldr	r2, [pc, #188]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d108      	bne.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005956:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005968:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a20      	ldr	r2, [pc, #128]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d022      	beq.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598e:	d01d      	beq.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1d      	ldr	r2, [pc, #116]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d018      	beq.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1c      	ldr	r2, [pc, #112]	; (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d013      	beq.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1a      	ldr	r2, [pc, #104]	; (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00e      	beq.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a15      	ldr	r2, [pc, #84]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d009      	beq.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a16      	ldr	r2, [pc, #88]	; (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d004      	beq.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a15      	ldr	r2, [pc, #84]	; (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d10c      	bne.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	40010000 	.word	0x40010000
 8005a08:	40010400 	.word	0x40010400
 8005a0c:	40000400 	.word	0x40000400
 8005a10:	40000800 	.word	0x40000800
 8005a14:	40000c00 	.word	0x40000c00
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	40001800 	.word	0x40001800

08005a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e040      	b.n	8005af0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d106      	bne.n	8005a84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fb fc14 	bl	80012ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2224      	movs	r2, #36	; 0x24
 8005a88:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0201 	bic.w	r2, r2, #1
 8005a98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f82c 	bl	8005af8 <UART_SetConfig>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e022      	b.n	8005af0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa84 	bl	8005fc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ac6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ad6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0201 	orr.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fb0b 	bl	8006104 <UART_CheckIdleState>
 8005aee:	4603      	mov	r3, r0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4ba6      	ldr	r3, [pc, #664]	; (8005dbc <UART_SetConfig+0x2c4>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	6979      	ldr	r1, [r7, #20]
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a94      	ldr	r2, [pc, #592]	; (8005dc0 <UART_SetConfig+0x2c8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d120      	bne.n	8005bb6 <UART_SetConfig+0xbe>
 8005b74:	4b93      	ldr	r3, [pc, #588]	; (8005dc4 <UART_SetConfig+0x2cc>)
 8005b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d816      	bhi.n	8005bb0 <UART_SetConfig+0xb8>
 8005b82:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <UART_SetConfig+0x90>)
 8005b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b88:	08005b99 	.word	0x08005b99
 8005b8c:	08005ba5 	.word	0x08005ba5
 8005b90:	08005b9f 	.word	0x08005b9f
 8005b94:	08005bab 	.word	0x08005bab
 8005b98:	2301      	movs	r3, #1
 8005b9a:	77fb      	strb	r3, [r7, #31]
 8005b9c:	e150      	b.n	8005e40 <UART_SetConfig+0x348>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	77fb      	strb	r3, [r7, #31]
 8005ba2:	e14d      	b.n	8005e40 <UART_SetConfig+0x348>
 8005ba4:	2304      	movs	r3, #4
 8005ba6:	77fb      	strb	r3, [r7, #31]
 8005ba8:	e14a      	b.n	8005e40 <UART_SetConfig+0x348>
 8005baa:	2308      	movs	r3, #8
 8005bac:	77fb      	strb	r3, [r7, #31]
 8005bae:	e147      	b.n	8005e40 <UART_SetConfig+0x348>
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	77fb      	strb	r3, [r7, #31]
 8005bb4:	e144      	b.n	8005e40 <UART_SetConfig+0x348>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a83      	ldr	r2, [pc, #524]	; (8005dc8 <UART_SetConfig+0x2d0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d132      	bne.n	8005c26 <UART_SetConfig+0x12e>
 8005bc0:	4b80      	ldr	r3, [pc, #512]	; (8005dc4 <UART_SetConfig+0x2cc>)
 8005bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc6:	f003 030c 	and.w	r3, r3, #12
 8005bca:	2b0c      	cmp	r3, #12
 8005bcc:	d828      	bhi.n	8005c20 <UART_SetConfig+0x128>
 8005bce:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <UART_SetConfig+0xdc>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005c09 	.word	0x08005c09
 8005bd8:	08005c21 	.word	0x08005c21
 8005bdc:	08005c21 	.word	0x08005c21
 8005be0:	08005c21 	.word	0x08005c21
 8005be4:	08005c15 	.word	0x08005c15
 8005be8:	08005c21 	.word	0x08005c21
 8005bec:	08005c21 	.word	0x08005c21
 8005bf0:	08005c21 	.word	0x08005c21
 8005bf4:	08005c0f 	.word	0x08005c0f
 8005bf8:	08005c21 	.word	0x08005c21
 8005bfc:	08005c21 	.word	0x08005c21
 8005c00:	08005c21 	.word	0x08005c21
 8005c04:	08005c1b 	.word	0x08005c1b
 8005c08:	2300      	movs	r3, #0
 8005c0a:	77fb      	strb	r3, [r7, #31]
 8005c0c:	e118      	b.n	8005e40 <UART_SetConfig+0x348>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	77fb      	strb	r3, [r7, #31]
 8005c12:	e115      	b.n	8005e40 <UART_SetConfig+0x348>
 8005c14:	2304      	movs	r3, #4
 8005c16:	77fb      	strb	r3, [r7, #31]
 8005c18:	e112      	b.n	8005e40 <UART_SetConfig+0x348>
 8005c1a:	2308      	movs	r3, #8
 8005c1c:	77fb      	strb	r3, [r7, #31]
 8005c1e:	e10f      	b.n	8005e40 <UART_SetConfig+0x348>
 8005c20:	2310      	movs	r3, #16
 8005c22:	77fb      	strb	r3, [r7, #31]
 8005c24:	e10c      	b.n	8005e40 <UART_SetConfig+0x348>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a68      	ldr	r2, [pc, #416]	; (8005dcc <UART_SetConfig+0x2d4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d120      	bne.n	8005c72 <UART_SetConfig+0x17a>
 8005c30:	4b64      	ldr	r3, [pc, #400]	; (8005dc4 <UART_SetConfig+0x2cc>)
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c3a:	2b30      	cmp	r3, #48	; 0x30
 8005c3c:	d013      	beq.n	8005c66 <UART_SetConfig+0x16e>
 8005c3e:	2b30      	cmp	r3, #48	; 0x30
 8005c40:	d814      	bhi.n	8005c6c <UART_SetConfig+0x174>
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d009      	beq.n	8005c5a <UART_SetConfig+0x162>
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	d810      	bhi.n	8005c6c <UART_SetConfig+0x174>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <UART_SetConfig+0x15c>
 8005c4e:	2b10      	cmp	r3, #16
 8005c50:	d006      	beq.n	8005c60 <UART_SetConfig+0x168>
 8005c52:	e00b      	b.n	8005c6c <UART_SetConfig+0x174>
 8005c54:	2300      	movs	r3, #0
 8005c56:	77fb      	strb	r3, [r7, #31]
 8005c58:	e0f2      	b.n	8005e40 <UART_SetConfig+0x348>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	77fb      	strb	r3, [r7, #31]
 8005c5e:	e0ef      	b.n	8005e40 <UART_SetConfig+0x348>
 8005c60:	2304      	movs	r3, #4
 8005c62:	77fb      	strb	r3, [r7, #31]
 8005c64:	e0ec      	b.n	8005e40 <UART_SetConfig+0x348>
 8005c66:	2308      	movs	r3, #8
 8005c68:	77fb      	strb	r3, [r7, #31]
 8005c6a:	e0e9      	b.n	8005e40 <UART_SetConfig+0x348>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	77fb      	strb	r3, [r7, #31]
 8005c70:	e0e6      	b.n	8005e40 <UART_SetConfig+0x348>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a56      	ldr	r2, [pc, #344]	; (8005dd0 <UART_SetConfig+0x2d8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d120      	bne.n	8005cbe <UART_SetConfig+0x1c6>
 8005c7c:	4b51      	ldr	r3, [pc, #324]	; (8005dc4 <UART_SetConfig+0x2cc>)
 8005c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c86:	2bc0      	cmp	r3, #192	; 0xc0
 8005c88:	d013      	beq.n	8005cb2 <UART_SetConfig+0x1ba>
 8005c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c8c:	d814      	bhi.n	8005cb8 <UART_SetConfig+0x1c0>
 8005c8e:	2b80      	cmp	r3, #128	; 0x80
 8005c90:	d009      	beq.n	8005ca6 <UART_SetConfig+0x1ae>
 8005c92:	2b80      	cmp	r3, #128	; 0x80
 8005c94:	d810      	bhi.n	8005cb8 <UART_SetConfig+0x1c0>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <UART_SetConfig+0x1a8>
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d006      	beq.n	8005cac <UART_SetConfig+0x1b4>
 8005c9e:	e00b      	b.n	8005cb8 <UART_SetConfig+0x1c0>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	77fb      	strb	r3, [r7, #31]
 8005ca4:	e0cc      	b.n	8005e40 <UART_SetConfig+0x348>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	77fb      	strb	r3, [r7, #31]
 8005caa:	e0c9      	b.n	8005e40 <UART_SetConfig+0x348>
 8005cac:	2304      	movs	r3, #4
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	e0c6      	b.n	8005e40 <UART_SetConfig+0x348>
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	77fb      	strb	r3, [r7, #31]
 8005cb6:	e0c3      	b.n	8005e40 <UART_SetConfig+0x348>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	77fb      	strb	r3, [r7, #31]
 8005cbc:	e0c0      	b.n	8005e40 <UART_SetConfig+0x348>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a44      	ldr	r2, [pc, #272]	; (8005dd4 <UART_SetConfig+0x2dc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d125      	bne.n	8005d14 <UART_SetConfig+0x21c>
 8005cc8:	4b3e      	ldr	r3, [pc, #248]	; (8005dc4 <UART_SetConfig+0x2cc>)
 8005cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd6:	d017      	beq.n	8005d08 <UART_SetConfig+0x210>
 8005cd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cdc:	d817      	bhi.n	8005d0e <UART_SetConfig+0x216>
 8005cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce2:	d00b      	beq.n	8005cfc <UART_SetConfig+0x204>
 8005ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce8:	d811      	bhi.n	8005d0e <UART_SetConfig+0x216>
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <UART_SetConfig+0x1fe>
 8005cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cf2:	d006      	beq.n	8005d02 <UART_SetConfig+0x20a>
 8005cf4:	e00b      	b.n	8005d0e <UART_SetConfig+0x216>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	77fb      	strb	r3, [r7, #31]
 8005cfa:	e0a1      	b.n	8005e40 <UART_SetConfig+0x348>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e09e      	b.n	8005e40 <UART_SetConfig+0x348>
 8005d02:	2304      	movs	r3, #4
 8005d04:	77fb      	strb	r3, [r7, #31]
 8005d06:	e09b      	b.n	8005e40 <UART_SetConfig+0x348>
 8005d08:	2308      	movs	r3, #8
 8005d0a:	77fb      	strb	r3, [r7, #31]
 8005d0c:	e098      	b.n	8005e40 <UART_SetConfig+0x348>
 8005d0e:	2310      	movs	r3, #16
 8005d10:	77fb      	strb	r3, [r7, #31]
 8005d12:	e095      	b.n	8005e40 <UART_SetConfig+0x348>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a2f      	ldr	r2, [pc, #188]	; (8005dd8 <UART_SetConfig+0x2e0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d125      	bne.n	8005d6a <UART_SetConfig+0x272>
 8005d1e:	4b29      	ldr	r3, [pc, #164]	; (8005dc4 <UART_SetConfig+0x2cc>)
 8005d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d2c:	d017      	beq.n	8005d5e <UART_SetConfig+0x266>
 8005d2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d32:	d817      	bhi.n	8005d64 <UART_SetConfig+0x26c>
 8005d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d38:	d00b      	beq.n	8005d52 <UART_SetConfig+0x25a>
 8005d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d3e:	d811      	bhi.n	8005d64 <UART_SetConfig+0x26c>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <UART_SetConfig+0x254>
 8005d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d48:	d006      	beq.n	8005d58 <UART_SetConfig+0x260>
 8005d4a:	e00b      	b.n	8005d64 <UART_SetConfig+0x26c>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	77fb      	strb	r3, [r7, #31]
 8005d50:	e076      	b.n	8005e40 <UART_SetConfig+0x348>
 8005d52:	2302      	movs	r3, #2
 8005d54:	77fb      	strb	r3, [r7, #31]
 8005d56:	e073      	b.n	8005e40 <UART_SetConfig+0x348>
 8005d58:	2304      	movs	r3, #4
 8005d5a:	77fb      	strb	r3, [r7, #31]
 8005d5c:	e070      	b.n	8005e40 <UART_SetConfig+0x348>
 8005d5e:	2308      	movs	r3, #8
 8005d60:	77fb      	strb	r3, [r7, #31]
 8005d62:	e06d      	b.n	8005e40 <UART_SetConfig+0x348>
 8005d64:	2310      	movs	r3, #16
 8005d66:	77fb      	strb	r3, [r7, #31]
 8005d68:	e06a      	b.n	8005e40 <UART_SetConfig+0x348>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1b      	ldr	r2, [pc, #108]	; (8005ddc <UART_SetConfig+0x2e4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d138      	bne.n	8005de6 <UART_SetConfig+0x2ee>
 8005d74:	4b13      	ldr	r3, [pc, #76]	; (8005dc4 <UART_SetConfig+0x2cc>)
 8005d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d82:	d017      	beq.n	8005db4 <UART_SetConfig+0x2bc>
 8005d84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d88:	d82a      	bhi.n	8005de0 <UART_SetConfig+0x2e8>
 8005d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d8e:	d00b      	beq.n	8005da8 <UART_SetConfig+0x2b0>
 8005d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d94:	d824      	bhi.n	8005de0 <UART_SetConfig+0x2e8>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <UART_SetConfig+0x2aa>
 8005d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9e:	d006      	beq.n	8005dae <UART_SetConfig+0x2b6>
 8005da0:	e01e      	b.n	8005de0 <UART_SetConfig+0x2e8>
 8005da2:	2300      	movs	r3, #0
 8005da4:	77fb      	strb	r3, [r7, #31]
 8005da6:	e04b      	b.n	8005e40 <UART_SetConfig+0x348>
 8005da8:	2302      	movs	r3, #2
 8005daa:	77fb      	strb	r3, [r7, #31]
 8005dac:	e048      	b.n	8005e40 <UART_SetConfig+0x348>
 8005dae:	2304      	movs	r3, #4
 8005db0:	77fb      	strb	r3, [r7, #31]
 8005db2:	e045      	b.n	8005e40 <UART_SetConfig+0x348>
 8005db4:	2308      	movs	r3, #8
 8005db6:	77fb      	strb	r3, [r7, #31]
 8005db8:	e042      	b.n	8005e40 <UART_SetConfig+0x348>
 8005dba:	bf00      	nop
 8005dbc:	efff69f3 	.word	0xefff69f3
 8005dc0:	40011000 	.word	0x40011000
 8005dc4:	40023800 	.word	0x40023800
 8005dc8:	40004400 	.word	0x40004400
 8005dcc:	40004800 	.word	0x40004800
 8005dd0:	40004c00 	.word	0x40004c00
 8005dd4:	40005000 	.word	0x40005000
 8005dd8:	40011400 	.word	0x40011400
 8005ddc:	40007800 	.word	0x40007800
 8005de0:	2310      	movs	r3, #16
 8005de2:	77fb      	strb	r3, [r7, #31]
 8005de4:	e02c      	b.n	8005e40 <UART_SetConfig+0x348>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a72      	ldr	r2, [pc, #456]	; (8005fb4 <UART_SetConfig+0x4bc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d125      	bne.n	8005e3c <UART_SetConfig+0x344>
 8005df0:	4b71      	ldr	r3, [pc, #452]	; (8005fb8 <UART_SetConfig+0x4c0>)
 8005df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005dfa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005dfe:	d017      	beq.n	8005e30 <UART_SetConfig+0x338>
 8005e00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e04:	d817      	bhi.n	8005e36 <UART_SetConfig+0x33e>
 8005e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e0a:	d00b      	beq.n	8005e24 <UART_SetConfig+0x32c>
 8005e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e10:	d811      	bhi.n	8005e36 <UART_SetConfig+0x33e>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <UART_SetConfig+0x326>
 8005e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e1a:	d006      	beq.n	8005e2a <UART_SetConfig+0x332>
 8005e1c:	e00b      	b.n	8005e36 <UART_SetConfig+0x33e>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	77fb      	strb	r3, [r7, #31]
 8005e22:	e00d      	b.n	8005e40 <UART_SetConfig+0x348>
 8005e24:	2302      	movs	r3, #2
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e00a      	b.n	8005e40 <UART_SetConfig+0x348>
 8005e2a:	2304      	movs	r3, #4
 8005e2c:	77fb      	strb	r3, [r7, #31]
 8005e2e:	e007      	b.n	8005e40 <UART_SetConfig+0x348>
 8005e30:	2308      	movs	r3, #8
 8005e32:	77fb      	strb	r3, [r7, #31]
 8005e34:	e004      	b.n	8005e40 <UART_SetConfig+0x348>
 8005e36:	2310      	movs	r3, #16
 8005e38:	77fb      	strb	r3, [r7, #31]
 8005e3a:	e001      	b.n	8005e40 <UART_SetConfig+0x348>
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e48:	d15b      	bne.n	8005f02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005e4a:	7ffb      	ldrb	r3, [r7, #31]
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d828      	bhi.n	8005ea2 <UART_SetConfig+0x3aa>
 8005e50:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <UART_SetConfig+0x360>)
 8005e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e56:	bf00      	nop
 8005e58:	08005e7d 	.word	0x08005e7d
 8005e5c:	08005e85 	.word	0x08005e85
 8005e60:	08005e8d 	.word	0x08005e8d
 8005e64:	08005ea3 	.word	0x08005ea3
 8005e68:	08005e93 	.word	0x08005e93
 8005e6c:	08005ea3 	.word	0x08005ea3
 8005e70:	08005ea3 	.word	0x08005ea3
 8005e74:	08005ea3 	.word	0x08005ea3
 8005e78:	08005e9b 	.word	0x08005e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e7c:	f7fe fe3a 	bl	8004af4 <HAL_RCC_GetPCLK1Freq>
 8005e80:	61b8      	str	r0, [r7, #24]
        break;
 8005e82:	e013      	b.n	8005eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e84:	f7fe fe4a 	bl	8004b1c <HAL_RCC_GetPCLK2Freq>
 8005e88:	61b8      	str	r0, [r7, #24]
        break;
 8005e8a:	e00f      	b.n	8005eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e8c:	4b4b      	ldr	r3, [pc, #300]	; (8005fbc <UART_SetConfig+0x4c4>)
 8005e8e:	61bb      	str	r3, [r7, #24]
        break;
 8005e90:	e00c      	b.n	8005eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e92:	f7fe fd1d 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
 8005e96:	61b8      	str	r0, [r7, #24]
        break;
 8005e98:	e008      	b.n	8005eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e9e:	61bb      	str	r3, [r7, #24]
        break;
 8005ea0:	e004      	b.n	8005eac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	77bb      	strb	r3, [r7, #30]
        break;
 8005eaa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d074      	beq.n	8005f9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	005a      	lsls	r2, r3, #1
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	085b      	lsrs	r3, r3, #1
 8005ebc:	441a      	add	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	2b0f      	cmp	r3, #15
 8005ecc:	d916      	bls.n	8005efc <UART_SetConfig+0x404>
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed4:	d212      	bcs.n	8005efc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f023 030f 	bic.w	r3, r3, #15
 8005ede:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	085b      	lsrs	r3, r3, #1
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	89fb      	ldrh	r3, [r7, #14]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	89fa      	ldrh	r2, [r7, #14]
 8005ef8:	60da      	str	r2, [r3, #12]
 8005efa:	e04f      	b.n	8005f9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	77bb      	strb	r3, [r7, #30]
 8005f00:	e04c      	b.n	8005f9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f02:	7ffb      	ldrb	r3, [r7, #31]
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d828      	bhi.n	8005f5a <UART_SetConfig+0x462>
 8005f08:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <UART_SetConfig+0x418>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005f35 	.word	0x08005f35
 8005f14:	08005f3d 	.word	0x08005f3d
 8005f18:	08005f45 	.word	0x08005f45
 8005f1c:	08005f5b 	.word	0x08005f5b
 8005f20:	08005f4b 	.word	0x08005f4b
 8005f24:	08005f5b 	.word	0x08005f5b
 8005f28:	08005f5b 	.word	0x08005f5b
 8005f2c:	08005f5b 	.word	0x08005f5b
 8005f30:	08005f53 	.word	0x08005f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f34:	f7fe fdde 	bl	8004af4 <HAL_RCC_GetPCLK1Freq>
 8005f38:	61b8      	str	r0, [r7, #24]
        break;
 8005f3a:	e013      	b.n	8005f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f3c:	f7fe fdee 	bl	8004b1c <HAL_RCC_GetPCLK2Freq>
 8005f40:	61b8      	str	r0, [r7, #24]
        break;
 8005f42:	e00f      	b.n	8005f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f44:	4b1d      	ldr	r3, [pc, #116]	; (8005fbc <UART_SetConfig+0x4c4>)
 8005f46:	61bb      	str	r3, [r7, #24]
        break;
 8005f48:	e00c      	b.n	8005f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f4a:	f7fe fcc1 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
 8005f4e:	61b8      	str	r0, [r7, #24]
        break;
 8005f50:	e008      	b.n	8005f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f56:	61bb      	str	r3, [r7, #24]
        break;
 8005f58:	e004      	b.n	8005f64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	77bb      	strb	r3, [r7, #30]
        break;
 8005f62:	bf00      	nop
    }

    if (pclk != 0U)
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d018      	beq.n	8005f9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	085a      	lsrs	r2, r3, #1
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	441a      	add	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b0f      	cmp	r3, #15
 8005f82:	d909      	bls.n	8005f98 <UART_SetConfig+0x4a0>
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8a:	d205      	bcs.n	8005f98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	60da      	str	r2, [r3, #12]
 8005f96:	e001      	b.n	8005f9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005fa8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3720      	adds	r7, #32
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	40007c00 	.word	0x40007c00
 8005fb8:	40023800 	.word	0x40023800
 8005fbc:	00f42400 	.word	0x00f42400

08005fc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00a      	beq.n	8005fea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00a      	beq.n	800602e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	f003 0308 	and.w	r3, r3, #8
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00a      	beq.n	8006072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	f003 0320 	and.w	r3, r3, #32
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00a      	beq.n	8006094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609c:	2b00      	cmp	r3, #0
 800609e:	d01a      	beq.n	80060d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060be:	d10a      	bne.n	80060d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	605a      	str	r2, [r3, #4]
  }
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af02      	add	r7, sp, #8
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006114:	f7fb f9a4 	bl	8001460 <HAL_GetTick>
 8006118:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b08      	cmp	r3, #8
 8006126:	d10e      	bne.n	8006146 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f831 	bl	800619e <UART_WaitOnFlagUntilTimeout>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e027      	b.n	8006196 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b04      	cmp	r3, #4
 8006152:	d10e      	bne.n	8006172 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006154:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f81b 	bl	800619e <UART_WaitOnFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e011      	b.n	8006196 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2220      	movs	r2, #32
 8006176:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b09c      	sub	sp, #112	; 0x70
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	60f8      	str	r0, [r7, #12]
 80061a6:	60b9      	str	r1, [r7, #8]
 80061a8:	603b      	str	r3, [r7, #0]
 80061aa:	4613      	mov	r3, r2
 80061ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ae:	e0a7      	b.n	8006300 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061b6:	f000 80a3 	beq.w	8006300 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ba:	f7fb f951 	bl	8001460 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d302      	bcc.n	80061d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80061ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d13f      	bne.n	8006250 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061e4:	667b      	str	r3, [r7, #100]	; 0x64
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e6      	bne.n	80061d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3308      	adds	r3, #8
 8006208:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	f023 0301 	bic.w	r3, r3, #1
 8006218:	663b      	str	r3, [r7, #96]	; 0x60
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3308      	adds	r3, #8
 8006220:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006222:	64ba      	str	r2, [r7, #72]	; 0x48
 8006224:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e5      	bne.n	8006202 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e068      	b.n	8006322 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0304 	and.w	r3, r3, #4
 800625a:	2b00      	cmp	r3, #0
 800625c:	d050      	beq.n	8006300 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800626c:	d148      	bne.n	8006300 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006276:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800628c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006296:	637b      	str	r3, [r7, #52]	; 0x34
 8006298:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800629c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800629e:	e841 2300 	strex	r3, r2, [r1]
 80062a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1e6      	bne.n	8006278 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3308      	adds	r3, #8
 80062b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	613b      	str	r3, [r7, #16]
   return(result);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f023 0301 	bic.w	r3, r3, #1
 80062c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3308      	adds	r3, #8
 80062c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062ca:	623a      	str	r2, [r7, #32]
 80062cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	69f9      	ldr	r1, [r7, #28]
 80062d0:	6a3a      	ldr	r2, [r7, #32]
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e5      	bne.n	80062aa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2220      	movs	r2, #32
 80062e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2220      	movs	r2, #32
 80062e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e010      	b.n	8006322 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69da      	ldr	r2, [r3, #28]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4013      	ands	r3, r2
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	429a      	cmp	r2, r3
 800630e:	bf0c      	ite	eq
 8006310:	2301      	moveq	r3, #1
 8006312:	2300      	movne	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	429a      	cmp	r2, r3
 800631c:	f43f af48 	beq.w	80061b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3770      	adds	r7, #112	; 0x70
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <lv_anim_set_var>:
 * Set a variable to animate
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	6039      	str	r1, [r7, #0]
    a->var = var;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	601a      	str	r2, [r3, #0]
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <lv_anim_set_exec_cb>:
 * @param exec_cb   a function to execute during animation
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	605a      	str	r2, [r3, #4]
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
    a->time = duration;
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <lv_anim_set_delay>:
 * Set a delay before starting the animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay before the animation in milliseconds
 */
static inline void lv_anim_set_delay(lv_anim_t * a, uint32_t delay)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	6039      	str	r1, [r7, #0]
    a->act_time = -(int32_t)(delay);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	425a      	negs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <lv_anim_set_values>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80063ba:	bf00      	nop
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <lv_anim_set_start_cb>:
 * Set a function call when the animation really starts (considering `delay`)
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start_cb  a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_start_cb_t start_cb)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
    a->start_cb = start_cb;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	609a      	str	r2, [r3, #8]
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <lv_anim_set_ready_cb>:
 * Set a function call when the animation is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	60da      	str	r2, [r3, #12]
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <lv_scr_act>:
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 8006402:	f01b fd25 	bl	8021e50 <lv_disp_get_default>
 8006406:	4603      	mov	r3, r0
 8006408:	4618      	mov	r0, r3
 800640a:	f000 f803 	bl	8006414 <lv_disp_get_scr_act>
 800640e:	4603      	mov	r3, r0
}
 8006410:	4618      	mov	r0, r3
 8006412:	bd80      	pop	{r7, pc}

08006414 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d102      	bne.n	8006428 <lv_disp_get_scr_act+0x14>
 8006422:	f01b fd15 	bl	8021e50 <lv_disp_get_default>
 8006426:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	e001      	b.n	8006436 <lv_disp_get_scr_act+0x22>
    }

    return disp->act_scr;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d102      	bne.n	8006452 <lv_disp_get_scr_prev+0x14>
 800644c:	f01b fd00 	bl	8021e50 <lv_disp_get_default>
 8006450:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <lv_disp_get_scr_prev+0x1e>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
 8006458:	2300      	movs	r3, #0
 800645a:	e001      	b.n	8006460 <lv_disp_get_scr_prev+0x22>
    }

    return disp->prev_scr;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	695b      	ldr	r3, [r3, #20]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <lv_disp_load_scr>:
/**
 * Make a screen active
 * @param scr pointer to a screen
 */
void lv_disp_load_scr(lv_obj_t * scr)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af02      	add	r7, sp, #8
 800646e:	6078      	str	r0, [r7, #4]
    lv_scr_load_anim(scr, LV_SCR_LOAD_ANIM_NONE, 0, 0, false);
 8006470:	2300      	movs	r3, #0
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	2300      	movs	r3, #0
 8006476:	2200      	movs	r2, #0
 8006478:	2100      	movs	r1, #0
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f83e 	bl	80064fc <lv_scr_load_anim>
}
 8006480:	bf00      	nop
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d102      	bne.n	800649c <lv_disp_get_layer_top+0x14>
 8006496:	f01b fcdb 	bl	8021e50 <lv_disp_get_default>
 800649a:	6078      	str	r0, [r7, #4]
    if(!disp) {
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e001      	b.n	80064aa <lv_disp_get_layer_top+0x22>
    }

    return disp->top_layer;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	69db      	ldr	r3, [r3, #28]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default screen)
 * @return pointer to the sys layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d102      	bne.n	80064c6 <lv_disp_get_layer_sys+0x14>
 80064c0:	f01b fcc6 	bl	8021e50 <lv_disp_get_default>
 80064c4:	6078      	str	r0, [r7, #4]
    if(!disp) {
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
 80064cc:	2300      	movs	r3, #0
 80064ce:	e001      	b.n	80064d4 <lv_disp_get_layer_sys+0x22>
    }

    return disp->sys_layer;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d102      	bne.n	80064f0 <lv_disp_get_theme+0x14>
 80064ea:	f01b fcb1 	bl	8021e50 <lv_disp_get_default>
 80064ee:	6078      	str	r0, [r7, #4]
    return disp->theme;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <lv_scr_load_anim>:
 * @param time time of the animation
 * @param delay delay before the transition
 * @param auto_del true: automatically delete the old screen
 */
void lv_scr_load_anim(lv_obj_t * new_scr, lv_scr_load_anim_t anim_type, uint32_t time, uint32_t delay, bool auto_del)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b0a8      	sub	sp, #160	; 0xa0
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	607a      	str	r2, [r7, #4]
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	460b      	mov	r3, r1
 800650a:	72fb      	strb	r3, [r7, #11]

    lv_disp_t * d = lv_obj_get_disp(new_scr);
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f009 fd89 	bl	8010024 <lv_obj_get_disp>
 8006512:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    lv_obj_t * act_scr = lv_scr_act();
 8006516:	f7ff ff72 	bl	80063fe <lv_scr_act>
 800651a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /*If an other screen load animation is in progress
     *make target screen loaded immediately. */
    if(d->scr_to_load && act_scr != d->scr_to_load) {
 800651e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d035      	beq.n	8006594 <lv_scr_load_anim+0x98>
 8006528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006532:	429a      	cmp	r2, r3
 8006534:	d02e      	beq.n	8006594 <lv_scr_load_anim+0x98>
        scr_load_internal(d->scr_to_load);
 8006536:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	4618      	mov	r0, r3
 800653e:	f000 fa7e 	bl	8006a3e <scr_load_internal>
        lv_anim_del(d->scr_to_load, NULL);
 8006542:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	2100      	movs	r1, #0
 800654a:	4618      	mov	r0, r3
 800654c:	f01b fe34 	bl	80221b8 <lv_anim_del>
        lv_obj_set_pos(d->scr_to_load, 0, 0);
 8006550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	2200      	movs	r2, #0
 8006558:	2100      	movs	r1, #0
 800655a:	4618      	mov	r0, r3
 800655c:	f004 f81f 	bl	800a59e <lv_obj_set_pos>
        lv_obj_remove_local_style_prop(d->scr_to_load, LV_STYLE_OPA, 0);
 8006560:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	2200      	movs	r2, #0
 8006568:	2160      	movs	r1, #96	; 0x60
 800656a:	4618      	mov	r0, r3
 800656c:	f008 fb4b 	bl	800ec06 <lv_obj_remove_local_style_prop>

        if(d->del_prev) {
 8006570:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <lv_scr_load_anim+0x8e>
            lv_obj_del(act_scr);
 8006582:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8006586:	f009 fced 	bl	800ff64 <lv_obj_del>
        }
        act_scr = d->scr_to_load;
 800658a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    }

    d->scr_to_load = new_scr;
 8006594:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	619a      	str	r2, [r3, #24]

    if(d->prev_scr && d->del_prev) {
 800659c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d012      	beq.n	80065cc <lv_scr_load_anim+0xd0>
 80065a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d009      	beq.n	80065cc <lv_scr_load_anim+0xd0>
        lv_obj_del(d->prev_scr);
 80065b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	4618      	mov	r0, r3
 80065c0:	f009 fcd0 	bl	800ff64 <lv_obj_del>
        d->prev_scr = NULL;
 80065c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065c8:	2200      	movs	r2, #0
 80065ca:	615a      	str	r2, [r3, #20]
    }

    d->draw_prev_over_act = is_out_anim(anim_type);
 80065cc:	7afb      	ldrb	r3, [r7, #11]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fb04 	bl	8006bdc <is_out_anim>
 80065d4:	4603      	mov	r3, r0
 80065d6:	4619      	mov	r1, r3
 80065d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80065dc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80065e0:	f361 0300 	bfi	r3, r1, #0, #1
 80065e4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    d->del_prev = auto_del;
 80065e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80065ec:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80065f0:	f897 10a8 	ldrb.w	r1, [r7, #168]	; 0xa8
 80065f4:	f361 0341 	bfi	r3, r1, #1, #1
 80065f8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

    /*Be sure there is no other animation on the screens*/
    lv_anim_del(new_scr, NULL);
 80065fc:	2100      	movs	r1, #0
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f01b fdda 	bl	80221b8 <lv_anim_del>
    lv_anim_del(lv_scr_act(), NULL);
 8006604:	f7ff fefb 	bl	80063fe <lv_scr_act>
 8006608:	4603      	mov	r3, r0
 800660a:	2100      	movs	r1, #0
 800660c:	4618      	mov	r0, r3
 800660e:	f01b fdd3 	bl	80221b8 <lv_anim_del>

    /*Be sure both screens are in a normal position*/
    lv_obj_set_pos(new_scr, 0, 0);
 8006612:	2200      	movs	r2, #0
 8006614:	2100      	movs	r1, #0
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f003 ffc1 	bl	800a59e <lv_obj_set_pos>
    lv_obj_set_pos(lv_scr_act(), 0, 0);
 800661c:	f7ff feef 	bl	80063fe <lv_scr_act>
 8006620:	4603      	mov	r3, r0
 8006622:	2200      	movs	r2, #0
 8006624:	2100      	movs	r1, #0
 8006626:	4618      	mov	r0, r3
 8006628:	f003 ffb9 	bl	800a59e <lv_obj_set_pos>
    lv_obj_remove_local_style_prop(new_scr, LV_STYLE_OPA, 0);
 800662c:	2200      	movs	r2, #0
 800662e:	2160      	movs	r1, #96	; 0x60
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f008 fae8 	bl	800ec06 <lv_obj_remove_local_style_prop>
    lv_obj_remove_local_style_prop(lv_scr_act(), LV_STYLE_OPA, 0);
 8006636:	f7ff fee2 	bl	80063fe <lv_scr_act>
 800663a:	4603      	mov	r3, r0
 800663c:	2200      	movs	r2, #0
 800663e:	2160      	movs	r1, #96	; 0x60
 8006640:	4618      	mov	r0, r3
 8006642:	f008 fae0 	bl	800ec06 <lv_obj_remove_local_style_prop>


    /*Shortcut for immediate load*/
    if(time == 0 && delay == 0) {
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <lv_scr_load_anim+0x15e>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d103      	bne.n	800665a <lv_scr_load_anim+0x15e>
        scr_load_internal(new_scr);
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f9f3 	bl	8006a3e <scr_load_internal>
 8006658:	e1c8      	b.n	80069ec <lv_scr_load_anim+0x4f0>
        return;
    }

    lv_anim_t a_new;
    lv_anim_init(&a_new);
 800665a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800665e:	4618      	mov	r0, r3
 8006660:	f01b fd0c 	bl	802207c <lv_anim_init>
    lv_anim_set_var(&a_new, new_scr);
 8006664:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006668:	68f9      	ldr	r1, [r7, #12]
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff fe5d 	bl	800632a <lv_anim_set_var>
    lv_anim_set_start_cb(&a_new, scr_load_anim_start);
 8006670:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006674:	49df      	ldr	r1, [pc, #892]	; (80069f4 <lv_scr_load_anim+0x4f8>)
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff fea5 	bl	80063c6 <lv_anim_set_start_cb>
    lv_anim_set_ready_cb(&a_new, scr_anim_ready);
 800667c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006680:	49dd      	ldr	r1, [pc, #884]	; (80069f8 <lv_scr_load_anim+0x4fc>)
 8006682:	4618      	mov	r0, r3
 8006684:	f7ff fead 	bl	80063e2 <lv_anim_set_ready_cb>
    lv_anim_set_time(&a_new, time);
 8006688:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff fe67 	bl	8006362 <lv_anim_set_time>
    lv_anim_set_delay(&a_new, delay);
 8006694:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff fe6f 	bl	800637e <lv_anim_set_delay>

    lv_anim_t a_old;
    lv_anim_init(&a_old);
 80066a0:	f107 0310 	add.w	r3, r7, #16
 80066a4:	4618      	mov	r0, r3
 80066a6:	f01b fce9 	bl	802207c <lv_anim_init>
    lv_anim_set_var(&a_old, d->act_scr);
 80066aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	f107 0310 	add.w	r3, r7, #16
 80066b4:	4611      	mov	r1, r2
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff fe37 	bl	800632a <lv_anim_set_var>
    lv_anim_set_time(&a_old, time);
 80066bc:	f107 0310 	add.w	r3, r7, #16
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7ff fe4d 	bl	8006362 <lv_anim_set_time>
    lv_anim_set_delay(&a_old, delay);
 80066c8:	f107 0310 	add.w	r3, r7, #16
 80066cc:	6839      	ldr	r1, [r7, #0]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff fe55 	bl	800637e <lv_anim_set_delay>

    switch(anim_type) {
 80066d4:	7afb      	ldrb	r3, [r7, #11]
 80066d6:	2b0e      	cmp	r3, #14
 80066d8:	f200 8178 	bhi.w	80069cc <lv_scr_load_anim+0x4d0>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <lv_scr_load_anim+0x1e8>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	08006721 	.word	0x08006721
 80066e8:	0800673d 	.word	0x0800673d
 80066ec:	08006763 	.word	0x08006763
 80066f0:	08006789 	.word	0x08006789
 80066f4:	080067af 	.word	0x080067af
 80066f8:	080067d5 	.word	0x080067d5
 80066fc:	0800681f 	.word	0x0800681f
 8006700:	08006869 	.word	0x08006869
 8006704:	080068b3 	.word	0x080068b3
 8006708:	080068fd 	.word	0x080068fd
 800670c:	08006919 	.word	0x08006919
 8006710:	08006935 	.word	0x08006935
 8006714:	0800695b 	.word	0x0800695b
 8006718:	08006981 	.word	0x08006981
 800671c:	080069a7 	.word	0x080069a7
        case LV_SCR_LOAD_ANIM_NONE:
            /*Create a dummy animation to apply the delay*/
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 8006720:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006724:	49b5      	ldr	r1, [pc, #724]	; (80069fc <lv_scr_load_anim+0x500>)
 8006726:	4618      	mov	r0, r3
 8006728:	f7ff fe0d 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, 0, 0);
 800672c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006730:	2200      	movs	r2, #0
 8006732:	2100      	movs	r1, #0
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff fe31 	bl	800639c <lv_anim_set_values>
            break;
 800673a:	e147      	b.n	80069cc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OVER_LEFT:
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 800673c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006740:	49ae      	ldr	r1, [pc, #696]	; (80069fc <lv_scr_load_anim+0x500>)
 8006742:	4618      	mov	r0, r3
 8006744:	f7ff fdff 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, lv_disp_get_hor_res(d), 0);
 8006748:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800674c:	f01b fb8c 	bl	8021e68 <lv_disp_get_hor_res>
 8006750:	4603      	mov	r3, r0
 8006752:	4619      	mov	r1, r3
 8006754:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006758:	2200      	movs	r2, #0
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff fe1e 	bl	800639c <lv_anim_set_values>
            break;
 8006760:	e134      	b.n	80069cc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OVER_RIGHT:
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 8006762:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006766:	49a5      	ldr	r1, [pc, #660]	; (80069fc <lv_scr_load_anim+0x500>)
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff fdec 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, -lv_disp_get_hor_res(d), 0);
 800676e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006772:	f01b fb79 	bl	8021e68 <lv_disp_get_hor_res>
 8006776:	4603      	mov	r3, r0
 8006778:	4259      	negs	r1, r3
 800677a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800677e:	2200      	movs	r2, #0
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff fe0b 	bl	800639c <lv_anim_set_values>
            break;
 8006786:	e121      	b.n	80069cc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OVER_TOP:
            lv_anim_set_exec_cb(&a_new, set_y_anim);
 8006788:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800678c:	499c      	ldr	r1, [pc, #624]	; (8006a00 <lv_scr_load_anim+0x504>)
 800678e:	4618      	mov	r0, r3
 8006790:	f7ff fdd9 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, lv_disp_get_ver_res(d), 0);
 8006794:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006798:	f01b fb8c 	bl	8021eb4 <lv_disp_get_ver_res>
 800679c:	4603      	mov	r3, r0
 800679e:	4619      	mov	r1, r3
 80067a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80067a4:	2200      	movs	r2, #0
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fdf8 	bl	800639c <lv_anim_set_values>
            break;
 80067ac:	e10e      	b.n	80069cc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OVER_BOTTOM:
            lv_anim_set_exec_cb(&a_new, set_y_anim);
 80067ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80067b2:	4993      	ldr	r1, [pc, #588]	; (8006a00 <lv_scr_load_anim+0x504>)
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff fdc6 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, -lv_disp_get_ver_res(d), 0);
 80067ba:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80067be:	f01b fb79 	bl	8021eb4 <lv_disp_get_ver_res>
 80067c2:	4603      	mov	r3, r0
 80067c4:	4259      	negs	r1, r3
 80067c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80067ca:	2200      	movs	r2, #0
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff fde5 	bl	800639c <lv_anim_set_values>
            break;
 80067d2:	e0fb      	b.n	80069cc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_MOVE_LEFT:
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 80067d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80067d8:	4988      	ldr	r1, [pc, #544]	; (80069fc <lv_scr_load_anim+0x500>)
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff fdb3 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, lv_disp_get_hor_res(d), 0);
 80067e0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80067e4:	f01b fb40 	bl	8021e68 <lv_disp_get_hor_res>
 80067e8:	4603      	mov	r3, r0
 80067ea:	4619      	mov	r1, r3
 80067ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80067f0:	2200      	movs	r2, #0
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff fdd2 	bl	800639c <lv_anim_set_values>

            lv_anim_set_exec_cb(&a_old, set_x_anim);
 80067f8:	f107 0310 	add.w	r3, r7, #16
 80067fc:	497f      	ldr	r1, [pc, #508]	; (80069fc <lv_scr_load_anim+0x500>)
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff fda1 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, -lv_disp_get_hor_res(d));
 8006804:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006808:	f01b fb2e 	bl	8021e68 <lv_disp_get_hor_res>
 800680c:	4603      	mov	r3, r0
 800680e:	425a      	negs	r2, r3
 8006810:	f107 0310 	add.w	r3, r7, #16
 8006814:	2100      	movs	r1, #0
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff fdc0 	bl	800639c <lv_anim_set_values>
            break;
 800681c:	e0d6      	b.n	80069cc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_MOVE_RIGHT:
            lv_anim_set_exec_cb(&a_new, set_x_anim);
 800681e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006822:	4976      	ldr	r1, [pc, #472]	; (80069fc <lv_scr_load_anim+0x500>)
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff fd8e 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, -lv_disp_get_hor_res(d), 0);
 800682a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800682e:	f01b fb1b 	bl	8021e68 <lv_disp_get_hor_res>
 8006832:	4603      	mov	r3, r0
 8006834:	4259      	negs	r1, r3
 8006836:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800683a:	2200      	movs	r2, #0
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff fdad 	bl	800639c <lv_anim_set_values>

            lv_anim_set_exec_cb(&a_old, set_x_anim);
 8006842:	f107 0310 	add.w	r3, r7, #16
 8006846:	496d      	ldr	r1, [pc, #436]	; (80069fc <lv_scr_load_anim+0x500>)
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff fd7c 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, lv_disp_get_hor_res(d));
 800684e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006852:	f01b fb09 	bl	8021e68 <lv_disp_get_hor_res>
 8006856:	4603      	mov	r3, r0
 8006858:	461a      	mov	r2, r3
 800685a:	f107 0310 	add.w	r3, r7, #16
 800685e:	2100      	movs	r1, #0
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff fd9b 	bl	800639c <lv_anim_set_values>
            break;
 8006866:	e0b1      	b.n	80069cc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_MOVE_TOP:
            lv_anim_set_exec_cb(&a_new, set_y_anim);
 8006868:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800686c:	4964      	ldr	r1, [pc, #400]	; (8006a00 <lv_scr_load_anim+0x504>)
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff fd69 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, lv_disp_get_ver_res(d), 0);
 8006874:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006878:	f01b fb1c 	bl	8021eb4 <lv_disp_get_ver_res>
 800687c:	4603      	mov	r3, r0
 800687e:	4619      	mov	r1, r3
 8006880:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006884:	2200      	movs	r2, #0
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff fd88 	bl	800639c <lv_anim_set_values>

            lv_anim_set_exec_cb(&a_old, set_y_anim);
 800688c:	f107 0310 	add.w	r3, r7, #16
 8006890:	495b      	ldr	r1, [pc, #364]	; (8006a00 <lv_scr_load_anim+0x504>)
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff fd57 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, -lv_disp_get_ver_res(d));
 8006898:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800689c:	f01b fb0a 	bl	8021eb4 <lv_disp_get_ver_res>
 80068a0:	4603      	mov	r3, r0
 80068a2:	425a      	negs	r2, r3
 80068a4:	f107 0310 	add.w	r3, r7, #16
 80068a8:	2100      	movs	r1, #0
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff fd76 	bl	800639c <lv_anim_set_values>
            break;
 80068b0:	e08c      	b.n	80069cc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_MOVE_BOTTOM:
            lv_anim_set_exec_cb(&a_new, set_y_anim);
 80068b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80068b6:	4952      	ldr	r1, [pc, #328]	; (8006a00 <lv_scr_load_anim+0x504>)
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff fd44 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, -lv_disp_get_ver_res(d), 0);
 80068be:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80068c2:	f01b faf7 	bl	8021eb4 <lv_disp_get_ver_res>
 80068c6:	4603      	mov	r3, r0
 80068c8:	4259      	negs	r1, r3
 80068ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80068ce:	2200      	movs	r2, #0
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7ff fd63 	bl	800639c <lv_anim_set_values>

            lv_anim_set_exec_cb(&a_old, set_y_anim);
 80068d6:	f107 0310 	add.w	r3, r7, #16
 80068da:	4949      	ldr	r1, [pc, #292]	; (8006a00 <lv_scr_load_anim+0x504>)
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff fd32 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, lv_disp_get_ver_res(d));
 80068e2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80068e6:	f01b fae5 	bl	8021eb4 <lv_disp_get_ver_res>
 80068ea:	4603      	mov	r3, r0
 80068ec:	461a      	mov	r2, r3
 80068ee:	f107 0310 	add.w	r3, r7, #16
 80068f2:	2100      	movs	r1, #0
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff fd51 	bl	800639c <lv_anim_set_values>
            break;
 80068fa:	e067      	b.n	80069cc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_FADE_IN:
            lv_anim_set_exec_cb(&a_new, opa_scale_anim);
 80068fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006900:	4940      	ldr	r1, [pc, #256]	; (8006a04 <lv_scr_load_anim+0x508>)
 8006902:	4618      	mov	r0, r3
 8006904:	f7ff fd1f 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_new, LV_OPA_TRANSP, LV_OPA_COVER);
 8006908:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800690c:	22ff      	movs	r2, #255	; 0xff
 800690e:	2100      	movs	r1, #0
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff fd43 	bl	800639c <lv_anim_set_values>
            break;
 8006916:	e059      	b.n	80069cc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_FADE_OUT:
            lv_anim_set_exec_cb(&a_old, opa_scale_anim);
 8006918:	f107 0310 	add.w	r3, r7, #16
 800691c:	4939      	ldr	r1, [pc, #228]	; (8006a04 <lv_scr_load_anim+0x508>)
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff fd11 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, LV_OPA_COVER, LV_OPA_TRANSP);
 8006924:	f107 0310 	add.w	r3, r7, #16
 8006928:	2200      	movs	r2, #0
 800692a:	21ff      	movs	r1, #255	; 0xff
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff fd35 	bl	800639c <lv_anim_set_values>
            break;
 8006932:	e04b      	b.n	80069cc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OUT_LEFT:
            lv_anim_set_exec_cb(&a_old, set_x_anim);
 8006934:	f107 0310 	add.w	r3, r7, #16
 8006938:	4930      	ldr	r1, [pc, #192]	; (80069fc <lv_scr_load_anim+0x500>)
 800693a:	4618      	mov	r0, r3
 800693c:	f7ff fd03 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, -lv_disp_get_hor_res(d));
 8006940:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006944:	f01b fa90 	bl	8021e68 <lv_disp_get_hor_res>
 8006948:	4603      	mov	r3, r0
 800694a:	425a      	negs	r2, r3
 800694c:	f107 0310 	add.w	r3, r7, #16
 8006950:	2100      	movs	r1, #0
 8006952:	4618      	mov	r0, r3
 8006954:	f7ff fd22 	bl	800639c <lv_anim_set_values>
            break;
 8006958:	e038      	b.n	80069cc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OUT_RIGHT:
            lv_anim_set_exec_cb(&a_old, set_x_anim);
 800695a:	f107 0310 	add.w	r3, r7, #16
 800695e:	4927      	ldr	r1, [pc, #156]	; (80069fc <lv_scr_load_anim+0x500>)
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff fcf0 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, lv_disp_get_hor_res(d));
 8006966:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800696a:	f01b fa7d 	bl	8021e68 <lv_disp_get_hor_res>
 800696e:	4603      	mov	r3, r0
 8006970:	461a      	mov	r2, r3
 8006972:	f107 0310 	add.w	r3, r7, #16
 8006976:	2100      	movs	r1, #0
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff fd0f 	bl	800639c <lv_anim_set_values>
            break;
 800697e:	e025      	b.n	80069cc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OUT_TOP:
            lv_anim_set_exec_cb(&a_old, set_y_anim);
 8006980:	f107 0310 	add.w	r3, r7, #16
 8006984:	491e      	ldr	r1, [pc, #120]	; (8006a00 <lv_scr_load_anim+0x504>)
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff fcdd 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, -lv_disp_get_ver_res(d));
 800698c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006990:	f01b fa90 	bl	8021eb4 <lv_disp_get_ver_res>
 8006994:	4603      	mov	r3, r0
 8006996:	425a      	negs	r2, r3
 8006998:	f107 0310 	add.w	r3, r7, #16
 800699c:	2100      	movs	r1, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff fcfc 	bl	800639c <lv_anim_set_values>
            break;
 80069a4:	e012      	b.n	80069cc <lv_scr_load_anim+0x4d0>
        case LV_SCR_LOAD_ANIM_OUT_BOTTOM:
            lv_anim_set_exec_cb(&a_old, set_y_anim);
 80069a6:	f107 0310 	add.w	r3, r7, #16
 80069aa:	4915      	ldr	r1, [pc, #84]	; (8006a00 <lv_scr_load_anim+0x504>)
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff fcca 	bl	8006346 <lv_anim_set_exec_cb>
            lv_anim_set_values(&a_old, 0, lv_disp_get_ver_res(d));
 80069b2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80069b6:	f01b fa7d 	bl	8021eb4 <lv_disp_get_ver_res>
 80069ba:	4603      	mov	r3, r0
 80069bc:	461a      	mov	r2, r3
 80069be:	f107 0310 	add.w	r3, r7, #16
 80069c2:	2100      	movs	r1, #0
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff fce9 	bl	800639c <lv_anim_set_values>
            break;
 80069ca:	bf00      	nop
    }

    lv_event_send(act_scr, LV_EVENT_SCREEN_UNLOAD_START, NULL);
 80069cc:	2200      	movs	r2, #0
 80069ce:	2125      	movs	r1, #37	; 0x25
 80069d0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80069d4:	f000 f922 	bl	8006c1c <lv_event_send>

    lv_anim_start(&a_new);
 80069d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80069dc:	4618      	mov	r0, r3
 80069de:	f01b fb73 	bl	80220c8 <lv_anim_start>
    lv_anim_start(&a_old);
 80069e2:	f107 0310 	add.w	r3, r7, #16
 80069e6:	4618      	mov	r0, r3
 80069e8:	f01b fb6e 	bl	80220c8 <lv_anim_start>
}
 80069ec:	37a0      	adds	r7, #160	; 0xa0
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	08006ab9 	.word	0x08006ab9
 80069f8:	08006b51 	.word	0x08006b51
 80069fc:	08006b15 	.word	0x08006b15
 8006a00:	08006b33 	.word	0x08006b33
 8006a04:	08006af5 	.word	0x08006af5

08006a08 <lv_disp_is_invalidation_enabled>:
 * Get display invalidation is enabled.
 * @param disp pointer to a display (NULL to use the default display)
 * @return return true if invalidation is enabled
 */
bool lv_disp_is_invalidation_enabled(lv_disp_t * disp)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d102      	bne.n	8006a1c <lv_disp_is_invalidation_enabled+0x14>
 8006a16:	f01b fa1b 	bl	8021e50 <lv_disp_get_default>
 8006a1a:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <lv_disp_is_invalidation_enabled+0x1e>
        LV_LOG_WARN("no display registered");
        return false;
 8006a22:	2300      	movs	r3, #0
 8006a24:	e007      	b.n	8006a36 <lv_disp_is_invalidation_enabled+0x2e>
    }

    return (disp->inv_en_cnt > 0);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	bfcc      	ite	gt
 8006a30:	2301      	movgt	r3, #1
 8006a32:	2300      	movle	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <scr_load_internal>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void scr_load_internal(lv_obj_t * scr)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b084      	sub	sp, #16
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
    lv_disp_t * d = lv_obj_get_disp(scr);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f009 faec 	bl	8010024 <lv_obj_get_disp>
 8006a4c:	60f8      	str	r0, [r7, #12]
    if(!d) return;  /*Shouldn't happen, just to be sure*/
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d02d      	beq.n	8006ab0 <scr_load_internal+0x72>

    lv_obj_t * old_scr = d->act_scr;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	60bb      	str	r3, [r7, #8]

    if(d->act_scr) lv_event_send(old_scr, LV_EVENT_SCREEN_UNLOAD_START, NULL);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d004      	beq.n	8006a6c <scr_load_internal+0x2e>
 8006a62:	2200      	movs	r2, #0
 8006a64:	2125      	movs	r1, #37	; 0x25
 8006a66:	68b8      	ldr	r0, [r7, #8]
 8006a68:	f000 f8d8 	bl	8006c1c <lv_event_send>
    if(d->act_scr) lv_event_send(scr, LV_EVENT_SCREEN_LOAD_START, NULL);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d004      	beq.n	8006a7e <scr_load_internal+0x40>
 8006a74:	2200      	movs	r2, #0
 8006a76:	2126      	movs	r1, #38	; 0x26
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f8cf 	bl	8006c1c <lv_event_send>

    d->act_scr = scr;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	611a      	str	r2, [r3, #16]

    if(d->act_scr) lv_event_send(scr, LV_EVENT_SCREEN_LOADED, NULL);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d004      	beq.n	8006a96 <scr_load_internal+0x58>
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2127      	movs	r1, #39	; 0x27
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f8c3 	bl	8006c1c <lv_event_send>
    if(d->act_scr) lv_event_send(old_scr, LV_EVENT_SCREEN_UNLOADED, NULL);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d004      	beq.n	8006aa8 <scr_load_internal+0x6a>
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2128      	movs	r1, #40	; 0x28
 8006aa2:	68b8      	ldr	r0, [r7, #8]
 8006aa4:	f000 f8ba 	bl	8006c1c <lv_event_send>

    lv_obj_invalidate(scr);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f004 fe8c 	bl	800b7c6 <lv_obj_invalidate>
 8006aae:	e000      	b.n	8006ab2 <scr_load_internal+0x74>
    if(!d) return;  /*Shouldn't happen, just to be sure*/
 8006ab0:	bf00      	nop
}
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <scr_load_anim_start>:

static void scr_load_anim_start(lv_anim_t * a)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
    lv_disp_t * d = lv_obj_get_disp(a->var);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f009 faad 	bl	8010024 <lv_obj_get_disp>
 8006aca:	60f8      	str	r0, [r7, #12]

    d->prev_scr = lv_scr_act();
 8006acc:	f7ff fc97 	bl	80063fe <lv_scr_act>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	615a      	str	r2, [r3, #20]
    d->act_scr = a->var;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	611a      	str	r2, [r3, #16]

    lv_event_send(d->act_scr, LV_EVENT_SCREEN_LOAD_START, NULL);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2126      	movs	r1, #38	; 0x26
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 f898 	bl	8006c1c <lv_event_send>
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <opa_scale_anim>:

static void opa_scale_anim(void * obj, int32_t v)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
    lv_obj_set_style_opa(obj, v, 0);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2200      	movs	r2, #0
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f009 fa19 	bl	800ff3e <lv_obj_set_style_opa>
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <set_x_anim>:

static void set_x_anim(void * obj, int32_t v)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
    lv_obj_set_x(obj, v);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	b21b      	sxth	r3, r3
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f003 fd52 	bl	800a5ce <lv_obj_set_x>
}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <set_y_anim>:

static void set_y_anim(void * obj, int32_t v)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
    lv_obj_set_y(obj, v);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	b21b      	sxth	r3, r3
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f003 fd68 	bl	800a618 <lv_obj_set_y>
}
 8006b48:	bf00      	nop
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <scr_anim_ready>:

static void scr_anim_ready(lv_anim_t * a)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
    lv_disp_t * d = lv_obj_get_disp(a->var);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f009 fa61 	bl	8010024 <lv_obj_get_disp>
 8006b62:	60f8      	str	r0, [r7, #12]

    lv_event_send(d->act_scr, LV_EVENT_SCREEN_LOADED, NULL);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2127      	movs	r1, #39	; 0x27
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 f855 	bl	8006c1c <lv_event_send>
    lv_event_send(d->prev_scr, LV_EVENT_SCREEN_UNLOADED, NULL);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	2200      	movs	r2, #0
 8006b78:	2128      	movs	r1, #40	; 0x28
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 f84e 	bl	8006c1c <lv_event_send>

    if(d->prev_scr && d->del_prev) lv_obj_del(d->prev_scr);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00c      	beq.n	8006ba2 <scr_anim_ready+0x52>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <scr_anim_ready+0x52>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f009 f9e1 	bl	800ff64 <lv_obj_del>
    d->prev_scr = NULL;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	615a      	str	r2, [r3, #20]
    d->draw_prev_over_act = false;
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8006bae:	f36f 0300 	bfc	r3, #0, #1
 8006bb2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    d->scr_to_load = NULL;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	619a      	str	r2, [r3, #24]
    lv_obj_remove_local_style_prop(a->var, LV_STYLE_OPA, 0);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2160      	movs	r1, #96	; 0x60
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f008 f81e 	bl	800ec06 <lv_obj_remove_local_style_prop>
    lv_obj_invalidate(d->act_scr);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f004 fdf9 	bl	800b7c6 <lv_obj_invalidate>
}
 8006bd4:	bf00      	nop
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <is_out_anim>:

static bool is_out_anim(lv_scr_load_anim_t anim_type)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4603      	mov	r3, r0
 8006be4:	71fb      	strb	r3, [r7, #7]
    return anim_type == LV_SCR_LOAD_ANIM_FADE_OUT  ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_LEFT  ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_RIGHT ||
           anim_type == LV_SCR_LOAD_ANIM_OUT_TOP   ||
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	2b0a      	cmp	r3, #10
 8006bea:	d00b      	beq.n	8006c04 <is_out_anim+0x28>
    return anim_type == LV_SCR_LOAD_ANIM_FADE_OUT  ||
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	2b0b      	cmp	r3, #11
 8006bf0:	d008      	beq.n	8006c04 <is_out_anim+0x28>
           anim_type == LV_SCR_LOAD_ANIM_OUT_LEFT  ||
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	2b0c      	cmp	r3, #12
 8006bf6:	d005      	beq.n	8006c04 <is_out_anim+0x28>
           anim_type == LV_SCR_LOAD_ANIM_OUT_RIGHT ||
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	2b0d      	cmp	r3, #13
 8006bfc:	d002      	beq.n	8006c04 <is_out_anim+0x28>
           anim_type == LV_SCR_LOAD_ANIM_OUT_TOP   ||
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	2b0e      	cmp	r3, #14
 8006c02:	d101      	bne.n	8006c08 <is_out_anim+0x2c>
 8006c04:	2301      	movs	r3, #1
 8006c06:	e000      	b.n	8006c0a <is_out_anim+0x2e>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	b2db      	uxtb	r3, r3
           anim_type == LV_SCR_LOAD_ANIM_OUT_BOTTOM;
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <lv_event_send>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_res_t lv_event_send(lv_obj_t * obj, lv_event_code_t event_code, void * param)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08c      	sub	sp, #48	; 0x30
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	460b      	mov	r3, r1
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <lv_event_send+0x18>
 8006c30:	2301      	movs	r3, #1
 8006c32:	e02f      	b.n	8006c94 <lv_event_send+0x78>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_event_t e;
    e.target = obj;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	613b      	str	r3, [r7, #16]
    e.current_target = obj;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	617b      	str	r3, [r7, #20]
    e.code = event_code;
 8006c3c:	7afb      	ldrb	r3, [r7, #11]
 8006c3e:	763b      	strb	r3, [r7, #24]
    e.user_data = NULL;
 8006c40:	2300      	movs	r3, #0
 8006c42:	61fb      	str	r3, [r7, #28]
    e.param = param;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	623b      	str	r3, [r7, #32]
    e.deleted = 0;
 8006c48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c4c:	f36f 0300 	bfc	r3, #0, #1
 8006c50:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    e.stop_bubbling = 0;
 8006c54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c58:	f36f 0382 	bfc	r3, #2, #1
 8006c5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    e.stop_processing = 0;
 8006c60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c64:	f36f 0341 	bfc	r3, #1, #1
 8006c68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    /*Build a simple linked list from the objects used in the events
     *It's important to know if this object was deleted by a nested event
     *called from this `event_cb`.*/
    e.prev = event_head;
 8006c6c:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <lv_event_send+0x80>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
    event_head = &e;
 8006c72:	4a0a      	ldr	r2, [pc, #40]	; (8006c9c <lv_event_send+0x80>)
 8006c74:	f107 0310 	add.w	r3, r7, #16
 8006c78:	6013      	str	r3, [r2, #0]

    /*Send the event*/
    lv_res_t res = event_send_core(&e);
 8006c7a:	f107 0310 	add.w	r3, r7, #16
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 f95d 	bl	8006f3e <event_send_core>
 8006c84:	4603      	mov	r3, r0
 8006c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /*Remove this element from the list*/
    event_head = e.prev;
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	4a03      	ldr	r2, [pc, #12]	; (8006c9c <lv_event_send+0x80>)
 8006c8e:	6013      	str	r3, [r2, #0]

    return res;
 8006c90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3730      	adds	r7, #48	; 0x30
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	2000075c 	.word	0x2000075c

08006ca0 <lv_obj_event_base>:


lv_res_t lv_obj_event_base(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
    const lv_obj_class_t * base;
    if(class_p == NULL) base = e->current_target->class_p;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d104      	bne.n	8006cba <lv_obj_event_base+0x1a>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	60fb      	str	r3, [r7, #12]
 8006cb8:	e006      	b.n	8006cc8 <lv_obj_event_base+0x28>
    else base = class_p->base_class;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60fb      	str	r3, [r7, #12]

    /*Find a base in which call the ancestor's event handler_cb if set*/
    while(base && base->event_cb == NULL) base = base->base_class;
 8006cc0:	e002      	b.n	8006cc8 <lv_obj_event_base+0x28>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <lv_obj_event_base+0x36>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d0f5      	beq.n	8006cc2 <lv_obj_event_base+0x22>

    if(base == NULL) return LV_RES_OK;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <lv_obj_event_base+0x40>
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e019      	b.n	8006d14 <lv_obj_event_base+0x74>
    if(base->event_cb == NULL) return LV_RES_OK;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <lv_obj_event_base+0x4c>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e013      	b.n	8006d14 <lv_obj_event_base+0x74>

    /*Call the actual event callback*/
    e->user_data = NULL;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	60da      	str	r2, [r3, #12]
    base->event_cb(base, e);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	4798      	blx	r3

    lv_res_t res = LV_RES_OK;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	72fb      	strb	r3, [r7, #11]
    /*Stop if the object is deleted*/
    if(e->deleted) res = LV_RES_INV;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	7e1b      	ldrb	r3, [r3, #24]
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <lv_obj_event_base+0x72>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	72fb      	strb	r3, [r7, #11]

    return res;
 8006d12:	7afb      	ldrb	r3, [r7, #11]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <lv_event_get_target>:


lv_obj_t * lv_event_get_target(lv_event_t * e)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
    return e->target;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <lv_event_get_current_target>:

lv_obj_t * lv_event_get_current_target(lv_event_t * e)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
    return e->current_target;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <lv_event_get_code>:

lv_event_code_t lv_event_get_code(lv_event_t * e)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
    return e->code & ~LV_EVENT_PREPROCESS;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	7a1b      	ldrb	r3, [r3, #8]
 8006d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d5c:	b2db      	uxtb	r3, r3
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <lv_event_get_param>:

void * lv_event_get_param(lv_event_t * e)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
    return e->param;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
	...

08006d84 <_lv_event_mark_deleted>:
    last_id ++;
    return last_id;
}

void _lv_event_mark_deleted(lv_obj_t * obj)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
    lv_event_t * e = event_head;
 8006d8c:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <_lv_event_mark_deleted+0x48>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	60fb      	str	r3, [r7, #12]

    while(e) {
 8006d92:	e011      	b.n	8006db8 <_lv_event_mark_deleted+0x34>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d004      	beq.n	8006da8 <_lv_event_mark_deleted+0x24>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d104      	bne.n	8006db2 <_lv_event_mark_deleted+0x2e>
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	7e13      	ldrb	r3, [r2, #24]
 8006dac:	f043 0301 	orr.w	r3, r3, #1
 8006db0:	7613      	strb	r3, [r2, #24]
        e = e->prev;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	60fb      	str	r3, [r7, #12]
    while(e) {
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1ea      	bne.n	8006d94 <_lv_event_mark_deleted+0x10>
    }
}
 8006dbe:	bf00      	nop
 8006dc0:	bf00      	nop
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	2000075c 	.word	0x2000075c

08006dd0 <lv_event_get_indev>:
    }
    return NULL;
}

lv_indev_t * lv_event_get_indev(lv_event_t * e)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]

    if(e->code == LV_EVENT_PRESSED ||
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	7a1b      	ldrb	r3, [r3, #8]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d03b      	beq.n	8006e58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_PRESSING ||
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	7a1b      	ldrb	r3, [r3, #8]
    if(e->code == LV_EVENT_PRESSED ||
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d037      	beq.n	8006e58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_PRESS_LOST ||
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_PRESSING ||
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d033      	beq.n	8006e58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SHORT_CLICKED ||
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_PRESS_LOST ||
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d02f      	beq.n	8006e58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LONG_PRESSED ||
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SHORT_CLICKED ||
 8006dfc:	2b05      	cmp	r3, #5
 8006dfe:	d02b      	beq.n	8006e58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LONG_PRESSED_REPEAT ||
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_LONG_PRESSED ||
 8006e04:	2b06      	cmp	r3, #6
 8006e06:	d027      	beq.n	8006e58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_CLICKED ||
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_LONG_PRESSED_REPEAT ||
 8006e0c:	2b07      	cmp	r3, #7
 8006e0e:	d023      	beq.n	8006e58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_RELEASED ||
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_CLICKED ||
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d01f      	beq.n	8006e58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL_BEGIN ||
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_RELEASED ||
 8006e1c:	2b09      	cmp	r3, #9
 8006e1e:	d01b      	beq.n	8006e58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL_END ||
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL_BEGIN ||
 8006e24:	2b0a      	cmp	r3, #10
 8006e26:	d017      	beq.n	8006e58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_SCROLL ||
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL_END ||
 8006e2c:	2b0b      	cmp	r3, #11
 8006e2e:	d013      	beq.n	8006e58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_GESTURE ||
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_SCROLL ||
 8006e34:	2b0c      	cmp	r3, #12
 8006e36:	d00f      	beq.n	8006e58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_KEY ||
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_GESTURE ||
 8006e3c:	2b0d      	cmp	r3, #13
 8006e3e:	d00b      	beq.n	8006e58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_FOCUSED ||
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_KEY ||
 8006e44:	2b0e      	cmp	r3, #14
 8006e46:	d007      	beq.n	8006e58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_DEFOCUSED ||
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_FOCUSED ||
 8006e4c:	2b0f      	cmp	r3, #15
 8006e4e:	d003      	beq.n	8006e58 <lv_event_get_indev+0x88>
       e->code == LV_EVENT_LEAVE) {
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DEFOCUSED ||
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	d104      	bne.n	8006e62 <lv_event_get_indev+0x92>
        return lv_event_get_param(e);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f7ff ff86 	bl	8006d6a <lv_event_get_param>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	e000      	b.n	8006e64 <lv_event_get_indev+0x94>
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
        return NULL;
 8006e62:	2300      	movs	r3, #0
    }
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <lv_event_get_draw_ctx>:
        return NULL;
    }
}

lv_draw_ctx_t * lv_event_get_draw_ctx(lv_event_t * e)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	7a1b      	ldrb	r3, [r3, #8]
 8006e78:	2b15      	cmp	r3, #21
 8006e7a:	d013      	beq.n	8006ea4 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_MAIN_BEGIN ||
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	7a1b      	ldrb	r3, [r3, #8]
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8006e80:	2b14      	cmp	r3, #20
 8006e82:	d00f      	beq.n	8006ea4 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_MAIN_END ||
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_MAIN_BEGIN ||
 8006e88:	2b16      	cmp	r3, #22
 8006e8a:	d00b      	beq.n	8006ea4 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST ||
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_MAIN_END ||
 8006e90:	2b18      	cmp	r3, #24
 8006e92:	d007      	beq.n	8006ea4 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST_BEGIN ||
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_POST ||
 8006e98:	2b17      	cmp	r3, #23
 8006e9a:	d003      	beq.n	8006ea4 <lv_event_get_draw_ctx+0x38>
       e->code == LV_EVENT_DRAW_POST_END) {
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	7a1b      	ldrb	r3, [r3, #8]
       e->code == LV_EVENT_DRAW_POST_BEGIN ||
 8006ea0:	2b19      	cmp	r3, #25
 8006ea2:	d104      	bne.n	8006eae <lv_event_get_draw_ctx+0x42>
        return lv_event_get_param(e);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7ff ff60 	bl	8006d6a <lv_event_get_param>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	e000      	b.n	8006eb0 <lv_event_get_draw_ctx+0x44>
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
        return NULL;
 8006eae:	2300      	movs	r3, #0
    }
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <lv_event_set_ext_draw_size>:
        return 0;
    }
}

void lv_event_set_ext_draw_size(lv_event_t * e, lv_coord_t size)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	807b      	strh	r3, [r7, #2]
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7a1b      	ldrb	r3, [r3, #8]
 8006ec8:	2b13      	cmp	r3, #19
 8006eca:	d10e      	bne.n	8006eea <lv_event_set_ext_draw_size+0x32>
        lv_coord_t * cur_size = lv_event_get_param(e);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7ff ff4c 	bl	8006d6a <lv_event_get_param>
 8006ed2:	60f8      	str	r0, [r7, #12]
        *cur_size = LV_MAX(*cur_size, size);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eda:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	bfb8      	it	lt
 8006ee2:	4613      	movlt	r3, r2
 8006ee4:	b21a      	sxth	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	801a      	strh	r2, [r3, #0]
    }
    else {
        LV_LOG_WARN("Not interpreted with this event code");
    }
}
 8006eea:	bf00      	nop
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <lv_obj_get_event_dsc>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_event_dsc_t * lv_obj_get_event_dsc(const lv_obj_t * obj, uint32_t id)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b083      	sub	sp, #12
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!obj->spec_attr) return NULL;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <lv_obj_get_event_dsc+0x16>
 8006f04:	2300      	movs	r3, #0
 8006f06:	e014      	b.n	8006f32 <lv_obj_get_event_dsc+0x40>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	7e9b      	ldrb	r3, [r3, #26]
 8006f0e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	461a      	mov	r2, r3
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d301      	bcc.n	8006f20 <lv_obj_get_event_dsc+0x2e>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e008      	b.n	8006f32 <lv_obj_get_event_dsc+0x40>

    return &obj->spec_attr->event_dsc[id];
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	68d9      	ldr	r1, [r3, #12]
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	440b      	add	r3, r1
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <event_send_core>:

static lv_res_t event_send_core(lv_event_t * e)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b086      	sub	sp, #24
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, (void *)e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8006f46:	f000 fbe9 	bl	800771c <lv_indev_get_act>
 8006f4a:	60b8      	str	r0, [r7, #8]
    if(indev_act) {
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01f      	beq.n	8006f92 <event_send_core+0x54>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d008      	beq.n	8006f6e <event_send_core+0x30>
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	6810      	ldr	r0, [r2, #0]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	7a12      	ldrb	r2, [r2, #8]
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	4798      	blx	r3
        if(e->stop_processing) return LV_RES_OK;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	7e1b      	ldrb	r3, [r3, #24]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <event_send_core+0x42>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e0c4      	b.n	800710a <event_send_core+0x1cc>
        if(e->deleted) return LV_RES_INV;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	7e1b      	ldrb	r3, [r3, #24]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <event_send_core+0x54>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e0bb      	b.n	800710a <event_send_core+0x1cc>
    }

    lv_res_t res = LV_RES_OK;
 8006f92:	2301      	movs	r3, #1
 8006f94:	75fb      	strb	r3, [r7, #23]
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff ffa8 	bl	8006ef2 <lv_obj_get_event_dsc>
 8006fa2:	6138      	str	r0, [r7, #16]

    uint32_t i = 0;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60fb      	str	r3, [r7, #12]
    while(event_dsc && res == LV_RES_OK) {
 8006fa8:	e038      	b.n	800701c <event_send_core+0xde>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d02a      	beq.n	8007008 <event_send_core+0xca>
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	7a1b      	ldrb	r3, [r3, #8]
 8006fb6:	b25b      	sxtb	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	da25      	bge.n	8007008 <event_send_core+0xca>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	7a1b      	ldrb	r3, [r3, #8]
 8006fc0:	2b80      	cmp	r3, #128	; 0x80
 8006fc2:	d007      	beq.n	8006fd4 <event_send_core+0x96>
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	7a1b      	ldrb	r3, [r3, #8]
 8006fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	7a12      	ldrb	r2, [r2, #8]
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d119      	bne.n	8007008 <event_send_core+0xca>
            e->user_data = event_dsc->user_data;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	60da      	str	r2, [r3, #12]
            event_dsc->cb(e);
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3

            if(e->stop_processing) return LV_RES_OK;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	7e1b      	ldrb	r3, [r3, #24]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <event_send_core+0xb8>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e089      	b.n	800710a <event_send_core+0x1cc>
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	7e1b      	ldrb	r3, [r3, #24]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <event_send_core+0xca>
 8007004:	2300      	movs	r3, #0
 8007006:	e080      	b.n	800710a <event_send_core+0x1cc>
        }

        i++;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	3301      	adds	r3, #1
 800700c:	60fb      	str	r3, [r7, #12]
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	68f9      	ldr	r1, [r7, #12]
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff ff6c 	bl	8006ef2 <lv_obj_get_event_dsc>
 800701a:	6138      	str	r0, [r7, #16]
    while(event_dsc && res == LV_RES_OK) {
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <event_send_core+0xea>
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d0c0      	beq.n	8006faa <event_send_core+0x6c>
    }

    res = lv_obj_event_base(NULL, e);
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	2000      	movs	r0, #0
 800702c:	f7ff fe38 	bl	8006ca0 <lv_obj_event_base>
 8007030:	4603      	mov	r3, r0
 8007032:	75fb      	strb	r3, [r7, #23]

    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 8007034:	7dfb      	ldrb	r3, [r7, #23]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d007      	beq.n	800704a <event_send_core+0x10c>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2100      	movs	r1, #0
 8007040:	4618      	mov	r0, r3
 8007042:	f7ff ff56 	bl	8006ef2 <lv_obj_get_event_dsc>
 8007046:	4603      	mov	r3, r0
 8007048:	e000      	b.n	800704c <event_send_core+0x10e>
 800704a:	2300      	movs	r3, #0
 800704c:	613b      	str	r3, [r7, #16]

    i = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
    while(event_dsc && res == LV_RES_OK) {
 8007052:	e036      	b.n	80070c2 <event_send_core+0x184>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d028      	beq.n	80070ae <event_send_core+0x170>
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	7a1b      	ldrb	r3, [r3, #8]
 8007060:	b25b      	sxtb	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	db23      	blt.n	80070ae <event_send_core+0x170>
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	7a1b      	ldrb	r3, [r3, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d005      	beq.n	800707a <event_send_core+0x13c>
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	7a1a      	ldrb	r2, [r3, #8]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	7a1b      	ldrb	r3, [r3, #8]
 8007076:	429a      	cmp	r2, r3
 8007078:	d119      	bne.n	80070ae <event_send_core+0x170>
            e->user_data = event_dsc->user_data;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	60da      	str	r2, [r3, #12]
            event_dsc->cb(e);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	4798      	blx	r3

            if(e->stop_processing) return LV_RES_OK;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	7e1b      	ldrb	r3, [r3, #24]
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <event_send_core+0x15e>
 8007098:	2301      	movs	r3, #1
 800709a:	e036      	b.n	800710a <event_send_core+0x1cc>
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	7e1b      	ldrb	r3, [r3, #24]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <event_send_core+0x170>
 80070aa:	2300      	movs	r3, #0
 80070ac:	e02d      	b.n	800710a <event_send_core+0x1cc>
        }

        i++;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3301      	adds	r3, #1
 80070b2:	60fb      	str	r3, [r7, #12]
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	68f9      	ldr	r1, [r7, #12]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff ff19 	bl	8006ef2 <lv_obj_get_event_dsc>
 80070c0:	6138      	str	r0, [r7, #16]
    while(event_dsc && res == LV_RES_OK) {
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <event_send_core+0x190>
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d0c2      	beq.n	8007054 <event_send_core+0x116>
    }

    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d119      	bne.n	8007108 <event_send_core+0x1ca>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d014      	beq.n	8007108 <event_send_core+0x1ca>
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f818 	bl	8007114 <event_is_bubbled>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00e      	beq.n	8007108 <event_send_core+0x1ca>
        e->current_target = e->current_target->parent;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	605a      	str	r2, [r3, #4]
        res = event_send_core(e);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff ff22 	bl	8006f3e <event_send_core>
 80070fa:	4603      	mov	r3, r0
 80070fc:	75fb      	strb	r3, [r7, #23]
        if(res != LV_RES_OK) return LV_RES_INV;
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d001      	beq.n	8007108 <event_send_core+0x1ca>
 8007104:	2300      	movs	r3, #0
 8007106:	e000      	b.n	800710a <event_send_core+0x1cc>
    }

    return res;
 8007108:	7dfb      	ldrb	r3, [r7, #23]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
	...

08007114 <event_is_bubbled>:

static bool event_is_bubbled(lv_event_t * e)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
    if(e->stop_bubbling) return false;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	7e1b      	ldrb	r3, [r3, #24]
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <event_is_bubbled+0x1a>
 800712a:	2300      	movs	r3, #0
 800712c:	e059      	b.n	80071e2 <event_is_bubbled+0xce>

    /*Event codes that always bubble*/
    switch(e->code) {
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	7a1b      	ldrb	r3, [r3, #8]
 8007132:	3b23      	subs	r3, #35	; 0x23
 8007134:	2b01      	cmp	r3, #1
 8007136:	d801      	bhi.n	800713c <event_is_bubbled+0x28>
        case LV_EVENT_CHILD_CREATED:
        case LV_EVENT_CHILD_DELETED:
            return true;
 8007138:	2301      	movs	r3, #1
 800713a:	e052      	b.n	80071e2 <event_is_bubbled+0xce>
        default:
            break;
 800713c:	bf00      	nop
    }

    /*Check other codes only if bubbling is enabled*/
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007146:	4618      	mov	r0, r3
 8007148:	f000 ff41 	bl	8007fce <lv_obj_has_flag>
 800714c:	4603      	mov	r3, r0
 800714e:	f083 0301 	eor.w	r3, r3, #1
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <event_is_bubbled+0x48>
 8007158:	2300      	movs	r3, #0
 800715a:	e042      	b.n	80071e2 <event_is_bubbled+0xce>

    switch(e->code) {
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	7a1b      	ldrb	r3, [r3, #8]
 8007160:	3b11      	subs	r3, #17
 8007162:	2b1b      	cmp	r3, #27
 8007164:	d83c      	bhi.n	80071e0 <event_is_bubbled+0xcc>
 8007166:	a201      	add	r2, pc, #4	; (adr r2, 800716c <event_is_bubbled+0x58>)
 8007168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716c:	080071dd 	.word	0x080071dd
 8007170:	080071dd 	.word	0x080071dd
 8007174:	080071dd 	.word	0x080071dd
 8007178:	080071dd 	.word	0x080071dd
 800717c:	080071dd 	.word	0x080071dd
 8007180:	080071dd 	.word	0x080071dd
 8007184:	080071dd 	.word	0x080071dd
 8007188:	080071dd 	.word	0x080071dd
 800718c:	080071dd 	.word	0x080071dd
 8007190:	080071dd 	.word	0x080071dd
 8007194:	080071dd 	.word	0x080071dd
 8007198:	080071e1 	.word	0x080071e1
 800719c:	080071e1 	.word	0x080071e1
 80071a0:	080071dd 	.word	0x080071dd
 80071a4:	080071e1 	.word	0x080071e1
 80071a8:	080071e1 	.word	0x080071e1
 80071ac:	080071dd 	.word	0x080071dd
 80071b0:	080071dd 	.word	0x080071dd
 80071b4:	080071dd 	.word	0x080071dd
 80071b8:	080071dd 	.word	0x080071dd
 80071bc:	080071e1 	.word	0x080071e1
 80071c0:	080071e1 	.word	0x080071e1
 80071c4:	080071e1 	.word	0x080071e1
 80071c8:	080071e1 	.word	0x080071e1
 80071cc:	080071dd 	.word	0x080071dd
 80071d0:	080071dd 	.word	0x080071dd
 80071d4:	080071e1 	.word	0x080071e1
 80071d8:	080071dd 	.word	0x080071dd
        case LV_EVENT_CHILD_DELETED:
        case LV_EVENT_CHILD_CHANGED:
        case LV_EVENT_SIZE_CHANGED:
        case LV_EVENT_STYLE_CHANGED:
        case LV_EVENT_GET_SELF_SIZE:
            return false;
 80071dc:	2300      	movs	r3, #0
 80071de:	e000      	b.n	80071e2 <event_is_bubbled+0xce>
        default:
            return true;
 80071e0:	2301      	movs	r3, #1
    }
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop

080071ec <_lv_group_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_group_init(void)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 80071f0:	2120      	movs	r1, #32
 80071f2:	4802      	ldr	r0, [pc, #8]	; (80071fc <_lv_group_init+0x10>)
 80071f4:	f01c fbe1 	bl	80239ba <_lv_ll_init>
}
 80071f8:	bf00      	nop
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	200008f8 	.word	0x200008f8

08007200 <lv_group_get_default>:
{
    default_group = group;
}

lv_group_t * lv_group_get_default(void)
{
 8007200:	b480      	push	{r7}
 8007202:	af00      	add	r7, sp, #0
    return default_group;
 8007204:	4b03      	ldr	r3, [pc, #12]	; (8007214 <lv_group_get_default+0x14>)
 8007206:	681b      	ldr	r3, [r3, #0]
}
 8007208:	4618      	mov	r0, r3
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	20000760 	.word	0x20000760

08007218 <lv_group_add_obj>:

void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
    if(group == NULL) return;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d053      	beq.n	80072d0 <lv_group_add_obj+0xb8>

    LV_LOG_TRACE("begin");

    /*Be sure the object is removed from its current group*/
    lv_group_remove_obj(obj);
 8007228:	6838      	ldr	r0, [r7, #0]
 800722a:	f000 f859 	bl	80072e0 <lv_group_remove_obj>

    /*Do not add the object twice*/
    lv_obj_t ** obj_i;
    _LV_LL_READ(&group->obj_ll, obj_i) {
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4618      	mov	r0, r3
 8007232:	f01c fca0 	bl	8023b76 <_lv_ll_get_head>
 8007236:	6178      	str	r0, [r7, #20]
 8007238:	e00a      	b.n	8007250 <lv_group_add_obj+0x38>
        if((*obj_i) == obj) {
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	429a      	cmp	r2, r3
 8007242:	d047      	beq.n	80072d4 <lv_group_add_obj+0xbc>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6979      	ldr	r1, [r7, #20]
 8007248:	4618      	mov	r0, r3
 800724a:	f01c fcb6 	bl	8023bba <_lv_ll_get_next>
 800724e:	6178      	str	r0, [r7, #20]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1f1      	bne.n	800723a <lv_group_add_obj+0x22>
            return;
        }
    }

    /*If the object is already in a group and focused then refocus it*/
    lv_group_t * group_cur = lv_obj_get_group(obj);
 8007256:	6838      	ldr	r0, [r7, #0]
 8007258:	f000 feee 	bl	8008038 <lv_obj_get_group>
 800725c:	6138      	str	r0, [r7, #16]
    if(group_cur) {
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00f      	beq.n	8007284 <lv_group_add_obj+0x6c>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00a      	beq.n	8007284 <lv_group_add_obj+0x6c>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d102      	bne.n	8007284 <lv_group_add_obj+0x6c>
            lv_group_refocus(group_cur);
 800727e:	6938      	ldr	r0, [r7, #16]
 8007280:	f000 f908 	bl	8007494 <lv_group_refocus>

            LV_LOG_INFO("changing object's group");
        }
    }

    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d102      	bne.n	8007292 <lv_group_add_obj+0x7a>
 800728c:	6838      	ldr	r0, [r7, #0]
 800728e:	f000 fee7 	bl	8008060 <lv_obj_allocate_spec_attr>
    obj->spec_attr->group_p = group;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	609a      	str	r2, [r3, #8]

    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4618      	mov	r0, r3
 800729e:	f01c fbd9 	bl	8023a54 <_lv_ll_ins_tail>
 80072a2:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MALLOC(next);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d100      	bne.n	80072ac <lv_group_add_obj+0x94>
 80072aa:	e7fe      	b.n	80072aa <lv_group_add_obj+0x92>
    if(next == NULL) return;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d012      	beq.n	80072d8 <lv_group_add_obj+0xc0>
    *next = obj;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	601a      	str	r2, [r3, #0]

    /*If the head and the tail is equal then there is only one object in the linked list.
     *In this case automatically activate it*/
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f01c fc5b 	bl	8023b76 <_lv_ll_get_head>
 80072c0:	4602      	mov	r2, r0
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d108      	bne.n	80072da <lv_group_add_obj+0xc2>
        lv_group_refocus(group);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f8e3 	bl	8007494 <lv_group_refocus>
 80072ce:	e004      	b.n	80072da <lv_group_add_obj+0xc2>
    if(group == NULL) return;
 80072d0:	bf00      	nop
 80072d2:	e002      	b.n	80072da <lv_group_add_obj+0xc2>
            return;
 80072d4:	bf00      	nop
 80072d6:	e000      	b.n	80072da <lv_group_add_obj+0xc2>
    if(next == NULL) return;
 80072d8:	bf00      	nop
    }

    LV_LOG_TRACE("finished");
}
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <lv_group_remove_obj>:
    else if(*g1->obj_focus == obj2) lv_group_focus_obj(obj1);

}

void lv_group_remove_obj(lv_obj_t * obj)
{
 80072e0:	b590      	push	{r4, r7, lr}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
    lv_group_t * g = lv_obj_get_group(obj);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fea5 	bl	8008038 <lv_obj_get_group>
 80072ee:	60b8      	str	r0, [r7, #8]
    if(g == NULL) return;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d06a      	beq.n	80073cc <lv_group_remove_obj+0xec>

    LV_LOG_TRACE("begin");

    /*Focus on the next object*/
    if(g->obj_focus && *g->obj_focus == obj) {
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d033      	beq.n	8007366 <lv_group_remove_obj+0x86>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	429a      	cmp	r2, r3
 8007308:	d12d      	bne.n	8007366 <lv_group_remove_obj+0x86>
        if(g->frozen) g->frozen = 0;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	7f1b      	ldrb	r3, [r3, #28]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	d004      	beq.n	8007322 <lv_group_remove_obj+0x42>
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	7f13      	ldrb	r3, [r2, #28]
 800731c:	f36f 0300 	bfc	r3, #0, #1
 8007320:	7713      	strb	r3, [r2, #28]

        /*If this is the only object in the group then focus to nothing.*/
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	4618      	mov	r0, r3
 8007326:	f01c fc26 	bl	8023b76 <_lv_ll_get_head>
 800732a:	4602      	mov	r2, r0
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	429a      	cmp	r2, r3
 8007332:	d115      	bne.n	8007360 <lv_group_remove_obj+0x80>
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	4618      	mov	r0, r3
 8007338:	f01c fc2e 	bl	8023b98 <_lv_ll_get_tail>
 800733c:	4602      	mov	r2, r0
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	429a      	cmp	r2, r3
 8007344:	d10c      	bne.n	8007360 <lv_group_remove_obj+0x80>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	681c      	ldr	r4, [r3, #0]
 800734c:	68b8      	ldr	r0, [r7, #8]
 800734e:	f000 f9a8 	bl	80076a2 <get_indev>
 8007352:	4603      	mov	r3, r0
 8007354:	461a      	mov	r2, r3
 8007356:	210f      	movs	r1, #15
 8007358:	4620      	mov	r0, r4
 800735a:	f7ff fc5f 	bl	8006c1c <lv_event_send>
 800735e:	e002      	b.n	8007366 <lv_group_remove_obj+0x86>
        }
        /*If there more objects in the group then focus to the next/prev object*/
        else {
            lv_group_refocus(g);
 8007360:	68b8      	ldr	r0, [r7, #8]
 8007362:	f000 f897 	bl	8007494 <lv_group_refocus>
    }

    /*If the focuses object is still the same then it was the only object in the group but it will
     *be deleted. Set the `obj_focus` to NULL to get back to the initial state of the group with
     *zero objects*/
    if(g->obj_focus && *g->obj_focus == obj) {
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d008      	beq.n	8007380 <lv_group_remove_obj+0xa0>
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	429a      	cmp	r2, r3
 8007378:	d102      	bne.n	8007380 <lv_group_remove_obj+0xa0>
        g->obj_focus = NULL;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2200      	movs	r2, #0
 800737e:	60da      	str	r2, [r3, #12]
    }

    /*Search the object and remove it from its group*/
    lv_obj_t ** i;
    _LV_LL_READ(&g->obj_ll, i) {
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4618      	mov	r0, r3
 8007384:	f01c fbf7 	bl	8023b76 <_lv_ll_get_head>
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	e01b      	b.n	80073c4 <lv_group_remove_obj+0xe4>
        if(*i == obj) {
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	429a      	cmp	r2, r3
 8007394:	d110      	bne.n	80073b8 <lv_group_remove_obj+0xd8>
            _lv_ll_remove(&g->obj_ll, i);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	68f9      	ldr	r1, [r7, #12]
 800739a:	4618      	mov	r0, r3
 800739c:	f01c fb8e 	bl	8023abc <_lv_ll_remove>
            lv_mem_free(i);
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f01c fdd7 	bl	8023f54 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d010      	beq.n	80073d0 <lv_group_remove_obj+0xf0>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	2200      	movs	r2, #0
 80073b4:	609a      	str	r2, [r3, #8]
            break;
 80073b6:	e00b      	b.n	80073d0 <lv_group_remove_obj+0xf0>
    _LV_LL_READ(&g->obj_ll, i) {
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	68f9      	ldr	r1, [r7, #12]
 80073bc:	4618      	mov	r0, r3
 80073be:	f01c fbfc 	bl	8023bba <_lv_ll_get_next>
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e0      	bne.n	800738c <lv_group_remove_obj+0xac>
 80073ca:	e002      	b.n	80073d2 <lv_group_remove_obj+0xf2>
    if(g == NULL) return;
 80073cc:	bf00      	nop
 80073ce:	e000      	b.n	80073d2 <lv_group_remove_obj+0xf2>
            break;
 80073d0:	bf00      	nop
        }
    }
    LV_LOG_TRACE("finished");
}
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd90      	pop	{r4, r7, pc}

080073d8 <lv_group_focus_next>:
        }
    }
}

void lv_group_focus_next(lv_group_t * group)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
    bool focus_changed = focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
 80073e0:	4a0c      	ldr	r2, [pc, #48]	; (8007414 <lv_group_focus_next+0x3c>)
 80073e2:	490d      	ldr	r1, [pc, #52]	; (8007418 <lv_group_focus_next+0x40>)
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f886 	bl	80074f6 <focus_next_core>
 80073ea:	4603      	mov	r3, r0
 80073ec:	73fb      	strb	r3, [r7, #15]
    if(group->edge_cb) {
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <lv_group_focus_next+0x34>
        if(!focus_changed)
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
 80073f8:	f083 0301 	eor.w	r3, r3, #1
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d004      	beq.n	800740c <lv_group_focus_next+0x34>
            group->edge_cb(group, true);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	2101      	movs	r1, #1
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	4798      	blx	r3
    }
}
 800740c:	bf00      	nop
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	08023bbb 	.word	0x08023bbb
 8007418:	08023b77 	.word	0x08023b77

0800741c <lv_group_focus_prev>:

void lv_group_focus_prev(lv_group_t * group)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 8007424:	4a0c      	ldr	r2, [pc, #48]	; (8007458 <lv_group_focus_prev+0x3c>)
 8007426:	490d      	ldr	r1, [pc, #52]	; (800745c <lv_group_focus_prev+0x40>)
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f864 	bl	80074f6 <focus_next_core>
 800742e:	4603      	mov	r3, r0
 8007430:	73fb      	strb	r3, [r7, #15]
    if(group->edge_cb) {
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <lv_group_focus_prev+0x34>
        if(!focus_changed)
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	f083 0301 	eor.w	r3, r3, #1
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d004      	beq.n	8007450 <lv_group_focus_prev+0x34>
            group->edge_cb(group, false);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	2100      	movs	r1, #0
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	4798      	blx	r3
    }
}
 8007450:	bf00      	nop
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	08023be5 	.word	0x08023be5
 800745c:	08023b99 	.word	0x08023b99

08007460 <lv_group_get_editing>:
    if(!group) return NULL;
    return group->edge_cb;
}

bool lv_group_get_editing(const lv_group_t * group)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
    if(!group) return false;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <lv_group_get_editing+0x12>
 800746e:	2300      	movs	r3, #0
 8007470:	e00a      	b.n	8007488 <lv_group_get_editing+0x28>
    return group->editing ? true : false;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	7f1b      	ldrb	r3, [r3, #28]
 8007476:	085b      	lsrs	r3, r3, #1
 8007478:	b2db      	uxtb	r3, r3
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	bf14      	ite	ne
 8007482:	2301      	movne	r3, #1
 8007484:	2300      	moveq	r3, #0
 8007486:	b2db      	uxtb	r3, r3
}
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <lv_group_refocus>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_group_refocus(lv_group_t * g)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
    /*Refocus must temporarily allow wrapping to work correctly*/
    uint8_t temp_wrap = g->wrap;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	7f1b      	ldrb	r3, [r3, #28]
 80074a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	73fb      	strb	r3, [r7, #15]
    g->wrap           = 1;
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	7f13      	ldrb	r3, [r2, #28]
 80074ac:	f043 0308 	orr.w	r3, r3, #8
 80074b0:	7713      	strb	r3, [r2, #28]

    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	7f1b      	ldrb	r3, [r3, #28]
 80074b6:	f003 0304 	and.w	r3, r3, #4
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d103      	bne.n	80074c8 <lv_group_refocus+0x34>
        lv_group_focus_next(g);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff ff89 	bl	80073d8 <lv_group_focus_next>
 80074c6:	e009      	b.n	80074dc <lv_group_refocus+0x48>
    else if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_PREV)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	7f1b      	ldrb	r3, [r3, #28]
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d002      	beq.n	80074dc <lv_group_refocus+0x48>
        lv_group_focus_prev(g);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7ff ffa0 	bl	800741c <lv_group_focus_prev>
    /*Restore wrap property*/
    g->wrap = temp_wrap;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	b2d9      	uxtb	r1, r3
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	7f13      	ldrb	r3, [r2, #28]
 80074e8:	f361 03c3 	bfi	r3, r1, #3, #1
 80074ec:	7713      	strb	r3, [r2, #28]
}
 80074ee:	bf00      	nop
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <focus_next_core>:

static bool focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
                            void * (*move)(const lv_ll_t *, const void *))
{
 80074f6:	b590      	push	{r4, r7, lr}
 80074f8:	b08b      	sub	sp, #44	; 0x2c
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	60f8      	str	r0, [r7, #12]
 80074fe:	60b9      	str	r1, [r7, #8]
 8007500:	607a      	str	r2, [r7, #4]
    bool focus_changed = false;
 8007502:	2300      	movs	r3, #0
 8007504:	75fb      	strb	r3, [r7, #23]
    if(group->frozen) return focus_changed;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	7f1b      	ldrb	r3, [r3, #28]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <focus_next_core+0x22>
 8007514:	7dfb      	ldrb	r3, [r7, #23]
 8007516:	e0c0      	b.n	800769a <focus_next_core+0x1a4>

    lv_obj_t ** obj_next     = group->obj_focus;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	627b      	str	r3, [r7, #36]	; 0x24
    lv_obj_t ** obj_sentinel = NULL;
 800751e:	2300      	movs	r3, #0
 8007520:	623b      	str	r3, [r7, #32]
    bool can_move            = true;
 8007522:	2301      	movs	r3, #1
 8007524:	77fb      	strb	r3, [r7, #31]
    bool can_begin           = true;
 8007526:	2301      	movs	r3, #1
 8007528:	77bb      	strb	r3, [r7, #30]

    for(;;) {
        if(obj_next == NULL) {
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	2b00      	cmp	r3, #0
 800752e:	d11d      	bne.n	800756c <focus_next_core+0x76>
            if(group->wrap || obj_sentinel == NULL) {
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	7f1b      	ldrb	r3, [r3, #28]
 8007534:	f003 0308 	and.w	r3, r3, #8
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	d102      	bne.n	8007544 <focus_next_core+0x4e>
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d111      	bne.n	8007568 <focus_next_core+0x72>
                if(!can_begin) return focus_changed;
 8007544:	7fbb      	ldrb	r3, [r7, #30]
 8007546:	f083 0301 	eor.w	r3, r3, #1
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <focus_next_core+0x5e>
 8007550:	7dfb      	ldrb	r3, [r7, #23]
 8007552:	e0a2      	b.n	800769a <focus_next_core+0x1a4>
                obj_next  = begin(&group->obj_ll);
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	4610      	mov	r0, r2
 800755a:	4798      	blx	r3
 800755c:	6278      	str	r0, [r7, #36]	; 0x24
                can_move  = false;
 800755e:	2300      	movs	r3, #0
 8007560:	77fb      	strb	r3, [r7, #31]
                can_begin = false;
 8007562:	2300      	movs	r3, #0
 8007564:	77bb      	strb	r3, [r7, #30]
 8007566:	e001      	b.n	800756c <focus_next_core+0x76>
            }
            else {
                /*Currently focused object is the last/first in the group, keep it that way*/
                return focus_changed;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	e096      	b.n	800769a <focus_next_core+0x1a4>
            }
        }

        if(obj_sentinel == NULL) {
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d106      	bne.n	8007580 <focus_next_core+0x8a>
            obj_sentinel = obj_next;
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	623b      	str	r3, [r7, #32]
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <focus_next_core+0x8a>
 800757c:	7dfb      	ldrb	r3, [r7, #23]
 800757e:	e08c      	b.n	800769a <focus_next_core+0x1a4>
        }

        if(can_move) {
 8007580:	7ffb      	ldrb	r3, [r7, #31]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00b      	beq.n	800759e <focus_next_core+0xa8>
            obj_next = move(&group->obj_ll, obj_next);
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800758c:	4610      	mov	r0, r2
 800758e:	4798      	blx	r3
 8007590:	6278      	str	r0, [r7, #36]	; 0x24

            /*Give up if we walked the entire list and haven't found another visible object*/
            if(obj_next == obj_sentinel) return focus_changed;
 8007592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	429a      	cmp	r2, r3
 8007598:	d101      	bne.n	800759e <focus_next_core+0xa8>
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	e07d      	b.n	800769a <focus_next_core+0x1a4>
        }

        can_move = true;
 800759e:	2301      	movs	r3, #1
 80075a0:	77fb      	strb	r3, [r7, #31]

        if(obj_next == NULL) continue;
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d028      	beq.n	80075fa <focus_next_core+0x104>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 fd37 	bl	8008020 <lv_obj_get_state>
 80075b2:	4603      	mov	r3, r0
 80075b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d120      	bne.n	80075fe <focus_next_core+0x108>

        /*Hidden objects don't receive focus.
         *If any parent is hidden, the object is also hidden)*/
        lv_obj_t * parent = *obj_next;
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	61bb      	str	r3, [r7, #24]
        while(parent) {
 80075c2:	e00a      	b.n	80075da <focus_next_core+0xe4>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 80075c4:	2101      	movs	r1, #1
 80075c6:	69b8      	ldr	r0, [r7, #24]
 80075c8:	f000 fd01 	bl	8007fce <lv_obj_has_flag>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d107      	bne.n	80075e2 <focus_next_core+0xec>
            parent = lv_obj_get_parent(parent);
 80075d2:	69b8      	ldr	r0, [r7, #24]
 80075d4:	f008 fd60 	bl	8010098 <lv_obj_get_parent>
 80075d8:	61b8      	str	r0, [r7, #24]
        while(parent) {
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1f1      	bne.n	80075c4 <focus_next_core+0xce>
 80075e0:	e000      	b.n	80075e4 <focus_next_core+0xee>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 80075e2:	bf00      	nop
        }

        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00b      	beq.n	8007602 <focus_next_core+0x10c>
 80075ea:	2101      	movs	r1, #1
 80075ec:	69b8      	ldr	r0, [r7, #24]
 80075ee:	f000 fcee 	bl	8007fce <lv_obj_has_flag>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d004      	beq.n	8007602 <focus_next_core+0x10c>
 80075f8:	e002      	b.n	8007600 <focus_next_core+0x10a>
        if(obj_next == NULL) continue;
 80075fa:	bf00      	nop
 80075fc:	e795      	b.n	800752a <focus_next_core+0x34>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 80075fe:	bf00      	nop
    for(;;) {
 8007600:	e793      	b.n	800752a <focus_next_core+0x34>

        /*If we got her a good candidate is found*/
        break;
 8007602:	bf00      	nop
    }

    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800760a:	429a      	cmp	r2, r3
 800760c:	d101      	bne.n	8007612 <focus_next_core+0x11c>
 800760e:	7dfb      	ldrb	r3, [r7, #23]
 8007610:	e043      	b.n	800769a <focus_next_core+0x1a4>

    if(group->obj_focus) {
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d018      	beq.n	800764c <focus_next_core+0x156>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	681c      	ldr	r4, [r3, #0]
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 f83e 	bl	80076a2 <get_indev>
 8007626:	4603      	mov	r3, r0
 8007628:	461a      	mov	r2, r3
 800762a:	210f      	movs	r1, #15
 800762c:	4620      	mov	r0, r4
 800762e:	f7ff faf5 	bl	8006c1c <lv_event_send>
 8007632:	4603      	mov	r3, r0
 8007634:	75bb      	strb	r3, [r7, #22]
        if(res != LV_RES_OK) return focus_changed;
 8007636:	7dbb      	ldrb	r3, [r7, #22]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d001      	beq.n	8007640 <focus_next_core+0x14a>
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	e02c      	b.n	800769a <focus_next_core+0x1a4>
        lv_obj_invalidate(*group->obj_focus);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4618      	mov	r0, r3
 8007648:	f004 f8bd 	bl	800b7c6 <lv_obj_invalidate>
    }

    group->obj_focus = obj_next;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007650:	60da      	str	r2, [r3, #12]

    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	681c      	ldr	r4, [r3, #0]
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 f822 	bl	80076a2 <get_indev>
 800765e:	4603      	mov	r3, r0
 8007660:	461a      	mov	r2, r3
 8007662:	210e      	movs	r1, #14
 8007664:	4620      	mov	r0, r4
 8007666:	f7ff fad9 	bl	8006c1c <lv_event_send>
 800766a:	4603      	mov	r3, r0
 800766c:	757b      	strb	r3, [r7, #21]
    if(res != LV_RES_OK) return focus_changed;
 800766e:	7d7b      	ldrb	r3, [r7, #21]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d001      	beq.n	8007678 <focus_next_core+0x182>
 8007674:	7dfb      	ldrb	r3, [r7, #23]
 8007676:	e010      	b.n	800769a <focus_next_core+0x1a4>

    lv_obj_invalidate(*group->obj_focus);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4618      	mov	r0, r3
 8007680:	f004 f8a1 	bl	800b7c6 <lv_obj_invalidate>

    if(group->focus_cb) group->focus_cb(group);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <focus_next_core+0x19e>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	4798      	blx	r3
    focus_changed = true;
 8007694:	2301      	movs	r3, #1
 8007696:	75fb      	strb	r3, [r7, #23]
    return focus_changed;
 8007698:	7dfb      	ldrb	r3, [r7, #23]
}
 800769a:	4618      	mov	r0, r3
 800769c:	372c      	adds	r7, #44	; 0x2c
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd90      	pop	{r4, r7, pc}

080076a2 <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b086      	sub	sp, #24
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
    lv_indev_t * indev_encoder = NULL;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
    lv_indev_t * indev_group = NULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	613b      	str	r3, [r7, #16]
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80076b2:	2000      	movs	r0, #0
 80076b4:	f01a fc5e 	bl	8021f74 <lv_indev_get_next>
 80076b8:	60f8      	str	r0, [r7, #12]
    while(indev) {
 80076ba:	e019      	b.n	80076f0 <get_indev+0x4e>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 f839 	bl	8007734 <lv_indev_get_type>
 80076c2:	4603      	mov	r3, r0
 80076c4:	72fb      	strb	r3, [r7, #11]
        if(indev->group == g) {
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d10b      	bne.n	80076e8 <get_indev+0x46>
            /*Prefer KEYPAD*/
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 80076d0:	7afb      	ldrb	r3, [r7, #11]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d101      	bne.n	80076da <get_indev+0x38>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	e01b      	b.n	8007712 <get_indev+0x70>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 80076da:	7afb      	ldrb	r3, [r7, #11]
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d101      	bne.n	80076e4 <get_indev+0x42>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	617b      	str	r3, [r7, #20]
            indev_group = indev;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	613b      	str	r3, [r7, #16]
        }
        indev = lv_indev_get_next(indev);
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f01a fc43 	bl	8021f74 <lv_indev_get_next>
 80076ee:	60f8      	str	r0, [r7, #12]
    while(indev) {
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e2      	bne.n	80076bc <get_indev+0x1a>
    }

    if(indev_encoder) return indev_encoder;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <get_indev+0x5e>
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	e008      	b.n	8007712 <get_indev+0x70>
    if(indev_group) return indev_group;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <get_indev+0x68>
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	e003      	b.n	8007712 <get_indev+0x70>

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
 800770a:	2000      	movs	r0, #0
 800770c:	f01a fc32 	bl	8021f74 <lv_indev_get_next>
 8007710:	4603      	mov	r3, r0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <lv_indev_get_act>:
        }
    }
}

lv_indev_t * lv_indev_get_act(void)
{
 800771c:	b480      	push	{r7}
 800771e:	af00      	add	r7, sp, #0
    return indev_act;
 8007720:	4b03      	ldr	r3, [pc, #12]	; (8007730 <lv_indev_get_act+0x14>)
 8007722:	681b      	ldr	r3, [r3, #0]
}
 8007724:	4618      	mov	r0, r3
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20000764 	.word	0x20000764

08007734 <lv_indev_get_type>:

lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <lv_indev_get_type+0x12>
 8007742:	2300      	movs	r3, #0
 8007744:	e002      	b.n	800774c <lv_indev_get_type+0x18>

    return indev->driver->type;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <lv_indev_reset>:

void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
    if(indev) {
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d038      	beq.n	80077da <lv_indev_reset+0x82>
        indev->proc.reset_query = 1;
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	7953      	ldrb	r3, [r2, #5]
 800776c:	f043 0302 	orr.w	r3, r3, #2
 8007770:	7153      	strb	r3, [r2, #5]
        if(indev_act == indev) indev_obj_act = NULL;
 8007772:	4b3b      	ldr	r3, [pc, #236]	; (8007860 <lv_indev_reset+0x108>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	429a      	cmp	r2, r3
 800777a:	d102      	bne.n	8007782 <lv_indev_reset+0x2a>
 800777c:	4b39      	ldr	r3, [pc, #228]	; (8007864 <lv_indev_reset+0x10c>)
 800777e:	2200      	movs	r2, #0
 8007780:	601a      	str	r2, [r3, #0]
        if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d004      	beq.n	8007796 <lv_indev_reset+0x3e>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b02      	cmp	r3, #2
 8007794:	d160      	bne.n	8007858 <lv_indev_reset+0x100>
            if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d004      	beq.n	80077a6 <lv_indev_reset+0x4e>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d102      	bne.n	80077ac <lv_indev_reset+0x54>
                indev->proc.types.pointer.last_pressed = NULL;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	635a      	str	r2, [r3, #52]	; 0x34
            }
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d004      	beq.n	80077bc <lv_indev_reset+0x64>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d102      	bne.n	80077c2 <lv_indev_reset+0x6a>
                indev->proc.types.pointer.act_obj = NULL;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	629a      	str	r2, [r3, #40]	; 0x28
            }
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <lv_indev_reset+0x7a>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d142      	bne.n	8007858 <lv_indev_reset+0x100>
                indev->proc.types.pointer.last_obj = NULL;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	62da      	str	r2, [r3, #44]	; 0x2c
            }
            i = lv_indev_get_next(i);
        }
        indev_obj_act = NULL;
    }
}
 80077d8:	e03e      	b.n	8007858 <lv_indev_reset+0x100>
        lv_indev_t * i = lv_indev_get_next(NULL);
 80077da:	2000      	movs	r0, #0
 80077dc:	f01a fbca 	bl	8021f74 <lv_indev_get_next>
 80077e0:	60f8      	str	r0, [r7, #12]
        while(i) {
 80077e2:	e033      	b.n	800784c <lv_indev_reset+0xf4>
            i->proc.reset_query = 1;
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	7953      	ldrb	r3, [r2, #5]
 80077e8:	f043 0302 	orr.w	r3, r3, #2
 80077ec:	7153      	strb	r3, [r2, #5]
            if(i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) {
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d004      	beq.n	8007802 <lv_indev_reset+0xaa>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d120      	bne.n	8007844 <lv_indev_reset+0xec>
                if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d004      	beq.n	8007812 <lv_indev_reset+0xba>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	429a      	cmp	r2, r3
 8007810:	d102      	bne.n	8007818 <lv_indev_reset+0xc0>
                    i->proc.types.pointer.last_pressed = NULL;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	635a      	str	r2, [r3, #52]	; 0x34
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d004      	beq.n	8007828 <lv_indev_reset+0xd0>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d102      	bne.n	800782e <lv_indev_reset+0xd6>
                    i->proc.types.pointer.act_obj = NULL;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	629a      	str	r2, [r3, #40]	; 0x28
                if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d004      	beq.n	800783e <lv_indev_reset+0xe6>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d102      	bne.n	8007844 <lv_indev_reset+0xec>
                    i->proc.types.pointer.last_obj = NULL;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	62da      	str	r2, [r3, #44]	; 0x2c
            i = lv_indev_get_next(i);
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f01a fb95 	bl	8021f74 <lv_indev_get_next>
 800784a:	60f8      	str	r0, [r7, #12]
        while(i) {
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1c8      	bne.n	80077e4 <lv_indev_reset+0x8c>
        indev_obj_act = NULL;
 8007852:	4b04      	ldr	r3, [pc, #16]	; (8007864 <lv_indev_reset+0x10c>)
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]
}
 8007858:	bf00      	nop
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	20000764 	.word	0x20000764
 8007864:	20000768 	.word	0x20000768

08007868 <lv_indev_get_scroll_dir>:
    else
        return indev->proc.types.keypad.last_key;
}

lv_dir_t lv_indev_get_scroll_dir(const lv_indev_t * indev)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return false;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <lv_indev_get_scroll_dir+0x12>
 8007876:	2300      	movs	r3, #0
 8007878:	e011      	b.n	800789e <lv_indev_get_scroll_dir+0x36>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d006      	beq.n	8007892 <lv_indev_get_scroll_dir+0x2a>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b03      	cmp	r3, #3
 800788c:	d001      	beq.n	8007892 <lv_indev_get_scroll_dir+0x2a>
 800788e:	2300      	movs	r3, #0
 8007890:	e005      	b.n	800789e <lv_indev_get_scroll_dir+0x36>
    return indev->proc.types.pointer.scroll_dir;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007898:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800789c:	b2db      	uxtb	r3, r3
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <lv_indev_get_scroll_obj>:

lv_obj_t * lv_indev_get_scroll_obj(const lv_indev_t * indev)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return NULL;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <lv_indev_get_scroll_obj+0x12>
 80078b8:	2300      	movs	r3, #0
 80078ba:	e00d      	b.n	80078d8 <lv_indev_get_scroll_obj+0x2e>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d006      	beq.n	80078d4 <lv_indev_get_scroll_obj+0x2a>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d001      	beq.n	80078d4 <lv_indev_get_scroll_obj+0x2a>
 80078d0:	2300      	movs	r3, #0
 80078d2:	e001      	b.n	80078d8 <lv_indev_get_scroll_obj+0x2e>
    return indev->proc.types.pointer.scroll_obj;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <lv_indev_get_obj_act>:
    if(indev == NULL)return;
    indev->proc.wait_until_release = 1;
}

lv_obj_t * lv_indev_get_obj_act(void)
{
 80078e4:	b480      	push	{r7}
 80078e6:	af00      	add	r7, sp, #0
    return indev_obj_act;
 80078e8:	4b03      	ldr	r3, [pc, #12]	; (80078f8 <lv_indev_get_obj_act+0x14>)
 80078ea:	681b      	ldr	r3, [r3, #0]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	20000768 	.word	0x20000768

080078fc <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	f9b3 2000 	ldrsh.w	r2, [r3]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	80da      	strh	r2, [r3, #6]
}
 800792e:	bf00      	nop
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <lv_style_get_prop_inlined>:
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b08c      	sub	sp, #48	; 0x30
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	460b      	mov	r3, r1
 8007944:	607a      	str	r2, [r7, #4]
 8007946:	817b      	strh	r3, [r7, #10]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	891b      	ldrh	r3, [r3, #8]
 800794c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007950:	4293      	cmp	r3, r2
 8007952:	d137      	bne.n	80079c4 <lv_style_get_prop_inlined+0x8a>
        const lv_style_const_prop_t * const_prop;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8007954:	2300      	movs	r3, #0
 8007956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007958:	e02c      	b.n	80079b4 <lv_style_get_prop_inlined+0x7a>
            const_prop = style->v_p.const_props + i;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007960:	00db      	lsls	r3, r3, #3
 8007962:	4413      	add	r3, r2
 8007964:	617b      	str	r3, [r7, #20]
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800796e:	827b      	strh	r3, [r7, #18]
            if(prop_id == prop) {
 8007970:	8a7a      	ldrh	r2, [r7, #18]
 8007972:	897b      	ldrh	r3, [r7, #10]
 8007974:	429a      	cmp	r2, r3
 8007976:	d11a      	bne.n	80079ae <lv_style_get_prop_inlined+0x74>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	b21b      	sxth	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	da01      	bge.n	8007986 <lv_style_get_prop_inlined+0x4c>
                    return LV_STYLE_RES_INHERIT;
 8007982:	2302      	movs	r3, #2
 8007984:	e098      	b.n	8007ab8 <lv_style_get_prop_inlined+0x17e>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <lv_style_get_prop_inlined+0x68>
 8007992:	8a7b      	ldrh	r3, [r7, #18]
 8007994:	4618      	mov	r0, r3
 8007996:	f01d fa19 	bl	8024dcc <lv_style_prop_get_default>
 800799a:	4602      	mov	r2, r0
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	e003      	b.n	80079aa <lv_style_get_prop_inlined+0x70>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	6852      	ldr	r2, [r2, #4]
 80079a8:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e084      	b.n	8007ab8 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 80079ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b0:	3301      	adds	r3, #1
 80079b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	7adb      	ldrb	r3, [r3, #11]
 80079b8:	461a      	mov	r2, r3
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079bc:	4293      	cmp	r3, r2
 80079be:	d3cc      	bcc.n	800795a <lv_style_get_prop_inlined+0x20>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
 80079c0:	2300      	movs	r3, #0
 80079c2:	e079      	b.n	8007ab8 <lv_style_get_prop_inlined+0x17e>
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	7adb      	ldrb	r3, [r3, #11]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <lv_style_get_prop_inlined+0x96>
 80079cc:	2300      	movs	r3, #0
 80079ce:	e073      	b.n	8007ab8 <lv_style_get_prop_inlined+0x17e>

    if(style->prop_cnt > 1) {
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	7adb      	ldrb	r3, [r3, #11]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d948      	bls.n	8007a6a <lv_style_get_prop_inlined+0x130>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	7adb      	ldrb	r3, [r3, #11]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	627b      	str	r3, [r7, #36]	; 0x24
        uint16_t * props = (uint16_t *)tmp;
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	623b      	str	r3, [r7, #32]
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 80079ea:	2300      	movs	r3, #0
 80079ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80079ee:	e035      	b.n	8007a5c <lv_style_get_prop_inlined+0x122>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 80079f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	6a3a      	ldr	r2, [r7, #32]
 80079f6:	4413      	add	r3, r2
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80079fe:	83fb      	strh	r3, [r7, #30]
            if(prop_id == prop) {
 8007a00:	8bfa      	ldrh	r2, [r7, #30]
 8007a02:	897b      	ldrh	r3, [r7, #10]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d126      	bne.n	8007a56 <lv_style_get_prop_inlined+0x11c>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	005b      	lsls	r3, r3, #1
 8007a0c:	6a3a      	ldr	r2, [r7, #32]
 8007a0e:	4413      	add	r3, r2
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	b21b      	sxth	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	da01      	bge.n	8007a1c <lv_style_get_prop_inlined+0xe2>
                    return LV_STYLE_RES_INHERIT;
 8007a18:	2302      	movs	r3, #2
 8007a1a:	e04d      	b.n	8007ab8 <lv_style_get_prop_inlined+0x17e>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	005b      	lsls	r3, r3, #1
 8007a20:	6a3a      	ldr	r2, [r7, #32]
 8007a22:	4413      	add	r3, r2
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d007      	beq.n	8007a3e <lv_style_get_prop_inlined+0x104>
                    *value = lv_style_prop_get_default(prop_id);
 8007a2e:	8bfb      	ldrh	r3, [r7, #30]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f01d f9cb 	bl	8024dcc <lv_style_prop_get_default>
 8007a36:	4602      	mov	r2, r0
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e009      	b.n	8007a52 <lv_style_get_prop_inlined+0x118>
                else {
                    lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	61bb      	str	r3, [r7, #24]
                    *value = values[i];
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	441a      	add	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6812      	ldr	r2, [r2, #0]
 8007a50:	601a      	str	r2, [r3, #0]
                }
                return LV_STYLE_RES_FOUND;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e030      	b.n	8007ab8 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 8007a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a58:	3301      	adds	r3, #1
 8007a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	7adb      	ldrb	r3, [r3, #11]
 8007a60:	461a      	mov	r2, r3
 8007a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d3c3      	bcc.n	80079f0 <lv_style_get_prop_inlined+0xb6>
 8007a68:	e025      	b.n	8007ab6 <lv_style_get_prop_inlined+0x17c>
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	891b      	ldrh	r3, [r3, #8]
 8007a6e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007a72:	897b      	ldrh	r3, [r7, #10]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d11e      	bne.n	8007ab6 <lv_style_get_prop_inlined+0x17c>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	891b      	ldrh	r3, [r3, #8]
 8007a7c:	b21b      	sxth	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	da01      	bge.n	8007a86 <lv_style_get_prop_inlined+0x14c>
            return LV_STYLE_RES_INHERIT;
 8007a82:	2302      	movs	r3, #2
 8007a84:	e018      	b.n	8007ab8 <lv_style_get_prop_inlined+0x17e>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	891b      	ldrh	r3, [r3, #8]
 8007a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00b      	beq.n	8007aaa <lv_style_get_prop_inlined+0x170>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	891b      	ldrh	r3, [r3, #8]
 8007a96:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f01d f995 	bl	8024dcc <lv_style_prop_get_default>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	e003      	b.n	8007ab2 <lv_style_get_prop_inlined+0x178>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	6852      	ldr	r2, [r2, #4]
 8007ab0:	601a      	str	r2, [r3, #0]
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e000      	b.n	8007ab8 <lv_style_get_prop_inlined+0x17e>
    }
    return LV_STYLE_RES_NOT_FOUND;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3730      	adds	r7, #48	; 0x30
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8007ac8:	4a04      	ldr	r2, [pc, #16]	; (8007adc <lv_obj_remove_style_all+0x1c>)
 8007aca:	2100      	movs	r1, #0
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f006 fdf3 	bl	800e6b8 <lv_obj_remove_style>
}
 8007ad2:	bf00      	nop
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	000fffff 	.word	0x000fffff

08007ae0 <lv_obj_get_style_width>:
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8007aea:	2201      	movs	r2, #1
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f006 ffb2 	bl	800ea58 <lv_obj_get_style_prop>
 8007af4:	4603      	mov	r3, r0
 8007af6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	b21b      	sxth	r3, r3
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <lv_obj_get_style_height>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8007b0e:	2204      	movs	r2, #4
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f006 ffa0 	bl	800ea58 <lv_obj_get_style_prop>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	b21b      	sxth	r3, r3
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <lv_obj_get_style_align>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
    return (lv_coord_t)v.num;
}

static inline lv_align_t lv_obj_get_style_align(const struct _lv_obj_t * obj, uint32_t part)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8007b32:	2209      	movs	r2, #9
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f006 ff8e 	bl	800ea58 <lv_obj_get_style_prop>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	60fb      	str	r3, [r7, #12]
    return (lv_align_t)v.num;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	b2db      	uxtb	r3, r3
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <lv_obj_get_style_transform_width>:

static inline lv_coord_t lv_obj_get_style_transform_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8007b56:	2268      	movs	r2, #104	; 0x68
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f006 ff7c 	bl	800ea58 <lv_obj_get_style_prop>
 8007b60:	4603      	mov	r3, r0
 8007b62:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	b21b      	sxth	r3, r3
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <lv_obj_get_style_transform_height>:

static inline lv_coord_t lv_obj_get_style_transform_height(const struct _lv_obj_t * obj, uint32_t part)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8007b7a:	2269      	movs	r2, #105	; 0x69
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f006 ff6a 	bl	800ea58 <lv_obj_get_style_prop>
 8007b84:	4603      	mov	r3, r0
 8007b86:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	b21b      	sxth	r3, r3
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007b9e:	2210      	movs	r2, #16
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f006 ff58 	bl	800ea58 <lv_obj_get_style_prop>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	b21b      	sxth	r3, r3
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007bc2:	2212      	movs	r2, #18
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f006 ff46 	bl	800ea58 <lv_obj_get_style_prop>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	b21b      	sxth	r3, r3
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <lv_obj_get_style_bg_color>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
    return (lv_coord_t)v.num;
}

static inline lv_color_t lv_obj_get_style_bg_color(const struct _lv_obj_t * obj, uint32_t part)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8007be6:	2220      	movs	r2, #32
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f006 ff34 	bl	800ea58 <lv_obj_get_style_prop>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	60fb      	str	r3, [r7, #12]
    return v.color;
 8007bf4:	7b3b      	ldrb	r3, [r7, #12]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <lv_obj_get_style_bg_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_bg_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8007c08:	2221      	movs	r2, #33	; 0x21
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f006 ff23 	bl	800ea58 <lv_obj_get_style_prop>
 8007c12:	4603      	mov	r3, r0
 8007c14:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	b2db      	uxtb	r3, r3
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <lv_obj_get_style_border_color>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
    return (bool)v.num;
}

static inline lv_color_t lv_obj_get_style_border_color(const struct _lv_obj_t * obj, uint32_t part)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 8007c2c:	2230      	movs	r2, #48	; 0x30
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f006 ff11 	bl	800ea58 <lv_obj_get_style_prop>
 8007c36:	4603      	mov	r3, r0
 8007c38:	60fb      	str	r3, [r7, #12]
    return v.color;
 8007c3a:	7b3b      	ldrb	r3, [r7, #12]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <lv_obj_get_style_border_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_border_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8007c4e:	2231      	movs	r2, #49	; 0x31
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f006 ff00 	bl	800ea58 <lv_obj_get_style_prop>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	b2db      	uxtb	r3, r3
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <lv_obj_get_style_border_width>:

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007c72:	2232      	movs	r2, #50	; 0x32
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f006 feee 	bl	800ea58 <lv_obj_get_style_prop>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	b21b      	sxth	r3, r3
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <lv_obj_get_style_border_post>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
    return (lv_border_side_t)v.num;
}

static inline bool lv_obj_get_style_border_post(const struct _lv_obj_t * obj, uint32_t part)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8007c96:	2234      	movs	r2, #52	; 0x34
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f006 fedc 	bl	800ea58 <lv_obj_get_style_prop>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	bf14      	ite	ne
 8007caa:	2301      	movne	r3, #1
 8007cac:	2300      	moveq	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <lv_obj_get_style_shadow_width>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_shadow_width(const struct _lv_obj_t * obj, uint32_t part)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8007cc2:	2240      	movs	r2, #64	; 0x40
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f006 fec6 	bl	800ea58 <lv_obj_get_style_prop>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	b21b      	sxth	r3, r3
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <lv_obj_get_style_shadow_spread>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_shadow_spread(const struct _lv_obj_t * obj, uint32_t part)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8007ce6:	2243      	movs	r2, #67	; 0x43
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f006 feb4 	bl	800ea58 <lv_obj_get_style_prop>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	b21b      	sxth	r3, r3
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <lv_obj_get_style_shadow_color>:

static inline lv_color_t lv_obj_get_style_shadow_color(const struct _lv_obj_t * obj, uint32_t part)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 8007d0a:	2244      	movs	r2, #68	; 0x44
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f006 fea2 	bl	800ea58 <lv_obj_get_style_prop>
 8007d14:	4603      	mov	r3, r0
 8007d16:	60fb      	str	r3, [r7, #12]
    return v.color;
 8007d18:	7b3b      	ldrb	r3, [r7, #12]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <lv_obj_get_style_shadow_opa>:
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_shadow_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b084      	sub	sp, #16
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8007d2c:	2245      	movs	r2, #69	; 0x45
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f006 fe91 	bl	800ea58 <lv_obj_get_style_prop>
 8007d36:	4603      	mov	r3, r0
 8007d38:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	b2db      	uxtb	r3, r3
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <lv_obj_get_style_radius>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
    return (lv_text_align_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_radius(const struct _lv_obj_t * obj, uint32_t part)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8007d50:	220b      	movs	r2, #11
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f006 fe7f 	bl	800ea58 <lv_obj_get_style_prop>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	b21b      	sxth	r3, r3
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <lv_obj_get_style_clip_corner>:

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8007d74:	2217      	movs	r2, #23
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f006 fe6d 	bl	800ea58 <lv_obj_get_style_prop>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	bf14      	ite	ne
 8007d88:	2301      	movne	r3, #1
 8007d8a:	2300      	moveq	r3, #0
 8007d8c:	b2db      	uxtb	r3, r3
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <lv_obj_get_style_opa>:

static inline lv_opa_t lv_obj_get_style_opa(const struct _lv_obj_t * obj, uint32_t part)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8007da0:	2260      	movs	r2, #96	; 0x60
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f006 fe57 	bl	800ea58 <lv_obj_get_style_prop>
 8007daa:	4603      	mov	r3, r0
 8007dac:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	b2db      	uxtb	r3, r3
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <lv_obj_get_style_layout>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8007dc4:	220a      	movs	r2, #10
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f006 fe45 	bl	800ea58 <lv_obj_get_style_prop>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	60fb      	str	r3, [r7, #12]
    return (uint16_t)v.num;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	b29b      	uxth	r3, r3
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
	...

08007de0 <lv_init>:
{
    return lv_initialized;
}

void lv_init(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
    /*Do nothing if already initialized*/
    if(lv_initialized) {
 8007de6:	4b22      	ldr	r3, [pc, #136]	; (8007e70 <lv_init+0x90>)
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d13b      	bne.n	8007e66 <lv_init+0x86>
    }

    LV_LOG_INFO("begin");

    /*Initialize the misc modules*/
    lv_mem_init();
 8007dee:	f01c f871 	bl	8023ed4 <lv_mem_init>

    _lv_timer_core_init();
 8007df2:	f01d fa9f 	bl	8025334 <_lv_timer_core_init>

    _lv_fs_init();
 8007df6:	f01b fac1 	bl	802337c <_lv_fs_init>

    _lv_anim_core_init();
 8007dfa:	f01a f921 	bl	8022040 <_lv_anim_core_init>

    _lv_group_init();
 8007dfe:	f7ff f9f5 	bl	80071ec <_lv_group_init>

    lv_draw_init();
 8007e02:	f00a f9c4 	bl	801218e <lv_draw_init>

#if LV_USE_GPU_NXP_PXP && LV_USE_GPU_NXP_PXP_AUTO_INIT
    PXP_COND_STOP(!lv_gpu_nxp_pxp_init(), "PXP init failed.");
#endif

    _lv_obj_style_init();
 8007e06:	f006 fbb3 	bl	800e570 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8007e0a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8007e0e:	4819      	ldr	r0, [pc, #100]	; (8007e74 <lv_init+0x94>)
 8007e10:	f01b fdd3 	bl	80239ba <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8007e14:	215c      	movs	r1, #92	; 0x5c
 8007e16:	4818      	ldr	r0, [pc, #96]	; (8007e78 <lv_init+0x98>)
 8007e18:	f01b fdcf 	bl	80239ba <_lv_ll_init>

    /*Initialize the screen refresh system*/
    _lv_refr_init();
 8007e1c:	f008 fb5e 	bl	80104dc <_lv_refr_init>

    _lv_img_decoder_init();
 8007e20:	f00e fb76 	bl	8016510 <_lv_img_decoder_init>
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
#endif
    /*Test if the IDE has UTF-8 encoding*/
    char * txt = "Á";
 8007e24:	4b15      	ldr	r3, [pc, #84]	; (8007e7c <lv_init+0x9c>)
 8007e26:	617b      	str	r3, [r7, #20]

    uint8_t * txt_u8 = (uint8_t *)txt;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	613b      	str	r3, [r7, #16]
    if(txt_u8[0] != 0xc3 || txt_u8[1] != 0x81 || txt_u8[2] != 0x00) {
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	2bc3      	cmp	r3, #195	; 0xc3
 8007e32:	d103      	bne.n	8007e3c <lv_init+0x5c>
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	3301      	adds	r3, #1
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b81      	cmp	r3, #129	; 0x81
        LV_LOG_WARN("The strings have no UTF-8 encoding. Non-ASCII characters won't be displayed.");
    }

    uint32_t endianess_test = 0x11223344;
 8007e3c:	4b10      	ldr	r3, [pc, #64]	; (8007e80 <lv_init+0xa0>)
 8007e3e:	607b      	str	r3, [r7, #4]
    uint8_t * endianess_test_p = (uint8_t *) &endianess_test;
 8007e40:	1d3b      	adds	r3, r7, #4
 8007e42:	60fb      	str	r3, [r7, #12]
    bool big_endian = endianess_test_p[0] == 0x11 ? true : false;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b11      	cmp	r3, #17
 8007e4a:	bf0c      	ite	eq
 8007e4c:	2301      	moveq	r3, #1
 8007e4e:	2300      	movne	r3, #0
 8007e50:	72fb      	strb	r3, [r7, #11]

    if(big_endian) {
 8007e52:	7afb      	ldrb	r3, [r7, #11]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d000      	beq.n	8007e5a <lv_init+0x7a>
        LV_ASSERT_MSG(LV_BIG_ENDIAN_SYSTEM == 1,
 8007e58:	e7fe      	b.n	8007e58 <lv_init+0x78>

#if LV_LOG_LEVEL == LV_LOG_LEVEL_TRACE
    LV_LOG_WARN("Log level is set to 'Trace' which makes LVGL much slower");
#endif

    lv_extra_init();
 8007e5a:	f019 fab8 	bl	80213ce <lv_extra_init>

    lv_initialized = true;
 8007e5e:	4b04      	ldr	r3, [pc, #16]	; (8007e70 <lv_init+0x90>)
 8007e60:	2201      	movs	r2, #1
 8007e62:	701a      	strb	r2, [r3, #0]
 8007e64:	e000      	b.n	8007e68 <lv_init+0x88>
        return;
 8007e66:	bf00      	nop

    LV_LOG_TRACE("finished");
}
 8007e68:	3718      	adds	r7, #24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	2000076c 	.word	0x2000076c
 8007e74:	200008c8 	.word	0x200008c8
 8007e78:	200008d4 	.word	0x200008d4
 8007e7c:	080288dc 	.word	0x080288dc
 8007e80:	11223344 	.word	0x11223344

08007e84 <lv_obj_create>:
#endif
}
#endif

lv_obj_t * lv_obj_create(lv_obj_t * parent)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
    LV_LOG_INFO("begin");
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8007e8c:	6879      	ldr	r1, [r7, #4]
 8007e8e:	4806      	ldr	r0, [pc, #24]	; (8007ea8 <lv_obj_create+0x24>)
 8007e90:	f001 f9b8 	bl	8009204 <lv_obj_class_create_obj>
 8007e94:	60f8      	str	r0, [r7, #12]
    lv_obj_class_init_obj(obj);
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f001 fa69 	bl	800936e <lv_obj_class_init_obj>
    return obj;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	08028950 	.word	0x08028950

08007eac <lv_obj_clear_flag>:
        lv_obj_invalidate_area(obj, &ver_area);
    }
}

void lv_obj_clear_flag(lv_obj_t * obj, lv_obj_flag_t f)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b088      	sub	sp, #32
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f002 fe10 	bl	800aadc <lv_obj_is_layout_positioned>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	77fb      	strb	r3, [r7, #31]
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	f003 0310 	and.w	r3, r3, #16
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d013      	beq.n	8007ef2 <lv_obj_clear_flag+0x46>
        lv_area_t hor_area, ver_area;
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8007eca:	f107 020c 	add.w	r2, r7, #12
 8007ece:	f107 0314 	add.w	r3, r7, #20
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f005 f84f 	bl	800cf78 <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8007eda:	f107 0314 	add.w	r3, r7, #20
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f003 fc3b 	bl	800b75c <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8007ee6:	f107 030c 	add.w	r3, r7, #12
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f003 fc35 	bl	800b75c <lv_obj_invalidate_area>
    }

    obj->flags &= (~f);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	69da      	ldr	r2, [r3, #28]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	43db      	mvns	r3, r3
 8007efa:	401a      	ands	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	61da      	str	r2, [r3, #28]

    if(f & LV_OBJ_FLAG_HIDDEN) {
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d012      	beq.n	8007f30 <lv_obj_clear_flag+0x84>
        lv_obj_invalidate(obj);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f003 fc5b 	bl	800b7c6 <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f002 fde3 	bl	800aadc <lv_obj_is_layout_positioned>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d009      	beq.n	8007f30 <lv_obj_clear_flag+0x84>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f008 f8bb 	bl	8010098 <lv_obj_get_parent>
 8007f22:	4603      	mov	r3, r0
 8007f24:	4618      	mov	r0, r3
 8007f26:	f002 fe01 	bl	800ab2c <lv_obj_mark_layout_as_dirty>
            lv_obj_mark_layout_as_dirty(obj);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f002 fdfe 	bl	800ab2c <lv_obj_mark_layout_as_dirty>
        }
    }

    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f002 fdd3 	bl	800aadc <lv_obj_is_layout_positioned>
 8007f36:	4603      	mov	r3, r0
 8007f38:	461a      	mov	r2, r3
 8007f3a:	7ffb      	ldrb	r3, [r7, #31]
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d104      	bne.n	8007f4a <lv_obj_clear_flag+0x9e>
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	f003 73c0 	and.w	r3, r3, #25165824	; 0x1800000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d006      	beq.n	8007f58 <lv_obj_clear_flag+0xac>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f008 f8a4 	bl	8010098 <lv_obj_get_parent>
 8007f50:	4603      	mov	r3, r0
 8007f52:	4618      	mov	r0, r3
 8007f54:	f002 fdea 	bl	800ab2c <lv_obj_mark_layout_as_dirty>
    }

}
 8007f58:	bf00      	nop
 8007f5a:	3720      	adds	r7, #32
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <lv_obj_add_state>:

void lv_obj_add_state(lv_obj_t * obj, lv_state_t state)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t new_state = obj->state | state;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	8c1a      	ldrh	r2, [r3, #32]
 8007f70:	887b      	ldrh	r3, [r7, #2]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	81fb      	strh	r3, [r7, #14]
    if(obj->state != new_state) {
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	8c1b      	ldrh	r3, [r3, #32]
 8007f7a:	89fa      	ldrh	r2, [r7, #14]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d004      	beq.n	8007f8a <lv_obj_add_state+0x2a>
        lv_obj_set_state(obj, new_state);
 8007f80:	89fb      	ldrh	r3, [r7, #14]
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 ffd1 	bl	8008f2c <lv_obj_set_state>
    }
}
 8007f8a:	bf00      	nop
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <lv_obj_clear_state>:

void lv_obj_clear_state(lv_obj_t * obj, lv_state_t state)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t new_state = obj->state & (~state);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	8c1b      	ldrh	r3, [r3, #32]
 8007fa2:	b21a      	sxth	r2, r3
 8007fa4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007fa8:	43db      	mvns	r3, r3
 8007faa:	b21b      	sxth	r3, r3
 8007fac:	4013      	ands	r3, r2
 8007fae:	b21b      	sxth	r3, r3
 8007fb0:	81fb      	strh	r3, [r7, #14]
    if(obj->state != new_state) {
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	8c1b      	ldrh	r3, [r3, #32]
 8007fb6:	89fa      	ldrh	r2, [r7, #14]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d004      	beq.n	8007fc6 <lv_obj_clear_state+0x34>
        lv_obj_set_state(obj, new_state);
 8007fbc:	89fb      	ldrh	r3, [r7, #14]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 ffb3 	bl	8008f2c <lv_obj_set_state>
    }
}
 8007fc6:	bf00      	nop
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <lv_obj_has_flag>:
/*=======================
 * Getter functions
 *======================*/

bool lv_obj_has_flag(const lv_obj_t * obj, lv_obj_flag_t f)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return (obj->flags & f)  == f ? true : false;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	69da      	ldr	r2, [r3, #28]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	4013      	ands	r3, r2
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	bf0c      	ite	eq
 8007fe6:	2301      	moveq	r3, #1
 8007fe8:	2300      	movne	r3, #0
 8007fea:	b2db      	uxtb	r3, r3
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <lv_obj_has_flag_any>:

bool lv_obj_has_flag_any(const lv_obj_t * obj, lv_obj_flag_t f)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return (obj->flags & f) ? true : false;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	69da      	ldr	r2, [r3, #28]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	4013      	ands	r3, r2
 800800a:	2b00      	cmp	r3, #0
 800800c:	bf14      	ite	ne
 800800e:	2301      	movne	r3, #1
 8008010:	2300      	moveq	r3, #0
 8008012:	b2db      	uxtb	r3, r3
}
 8008014:	4618      	mov	r0, r3
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <lv_obj_get_state>:

lv_state_t lv_obj_get_state(const lv_obj_t * obj)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->state;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	8c1b      	ldrh	r3, [r3, #32]
}
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <lv_obj_get_group>:

    return obj->state & state ? true : false;
}

void * lv_obj_get_group(const lv_obj_t * obj)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr) return obj->spec_attr->group_p;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d003      	beq.n	8008050 <lv_obj_get_group+0x18>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	e000      	b.n	8008052 <lv_obj_get_group+0x1a>
    else return NULL;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
	...

08008060 <lv_obj_allocate_spec_attr>:
/*-------------------
 * OTHER FUNCTIONS
 *------------------*/

void lv_obj_allocate_spec_attr(lv_obj_t * obj)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) {
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d127      	bne.n	80080c0 <lv_obj_allocate_spec_attr+0x60>
        static uint32_t x = 0;
        x++;
 8008070:	4b15      	ldr	r3, [pc, #84]	; (80080c8 <lv_obj_allocate_spec_attr+0x68>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	3301      	adds	r3, #1
 8008076:	4a14      	ldr	r2, [pc, #80]	; (80080c8 <lv_obj_allocate_spec_attr+0x68>)
 8008078:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 800807a:	201c      	movs	r0, #28
 800807c:	f01b ff3a 	bl	8023ef4 <lv_mem_alloc>
 8008080:	4602      	mov	r2, r0
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d100      	bne.n	8008090 <lv_obj_allocate_spec_attr+0x30>
 800808e:	e7fe      	b.n	800808e <lv_obj_allocate_spec_attr+0x2e>
        if(obj->spec_attr == NULL) return;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d012      	beq.n	80080be <lv_obj_allocate_spec_attr+0x5e>

        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	211c      	movs	r1, #28
 800809e:	4618      	mov	r0, r3
 80080a0:	f01c fb5c 	bl	802475c <lv_memset_00>

        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	7e53      	ldrb	r3, [r2, #25]
 80080aa:	f043 030f 	orr.w	r3, r3, #15
 80080ae:	7653      	strb	r3, [r2, #25]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	7e13      	ldrb	r3, [r2, #24]
 80080b6:	f043 0303 	orr.w	r3, r3, #3
 80080ba:	7613      	strb	r3, [r2, #24]
 80080bc:	e000      	b.n	80080c0 <lv_obj_allocate_spec_attr+0x60>
        if(obj->spec_attr == NULL) return;
 80080be:	bf00      	nop
    }
}
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20000770 	.word	0x20000770

080080cc <lv_obj_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80080cc:	b590      	push	{r4, r7, lr}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_t * parent = obj->parent;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	60fb      	str	r3, [r7, #12]
    if(parent) {
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d03f      	beq.n	8008162 <lv_obj_constructor+0x96>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f004 fb3e 	bl	800c764 <lv_obj_get_scroll_left>
 80080e8:	4603      	mov	r3, r0
 80080ea:	817b      	strh	r3, [r7, #10]
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f004 fa9b 	bl	800c628 <lv_obj_get_scroll_top>
 80080f2:	4603      	mov	r3, r0
 80080f4:	813b      	strh	r3, [r7, #8]

        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80080fc:	b29c      	uxth	r4, r3
 80080fe:	2100      	movs	r1, #0
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f7ff fd47 	bl	8007b94 <lv_obj_get_style_pad_top>
 8008106:	4603      	mov	r3, r0
 8008108:	b29b      	uxth	r3, r3
 800810a:	4423      	add	r3, r4
 800810c:	b29a      	uxth	r2, r3
 800810e:	893b      	ldrh	r3, [r7, #8]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	b29b      	uxth	r3, r3
 8008114:	b21a      	sxth	r2, r3
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	82da      	strh	r2, [r3, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008120:	b29b      	uxth	r3, r3
 8008122:	3b01      	subs	r3, #1
 8008124:	b29b      	uxth	r3, r3
 8008126:	b21a      	sxth	r2, r3
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	835a      	strh	r2, [r3, #26]
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008132:	b29c      	uxth	r4, r3
 8008134:	2100      	movs	r1, #0
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f7ff fd3e 	bl	8007bb8 <lv_obj_get_style_pad_left>
 800813c:	4603      	mov	r3, r0
 800813e:	b29b      	uxth	r3, r3
 8008140:	4423      	add	r3, r4
 8008142:	b29a      	uxth	r2, r3
 8008144:	897b      	ldrh	r3, [r7, #10]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	b29b      	uxth	r3, r3
 800814a:	b21a      	sxth	r2, r3
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	829a      	strh	r2, [r3, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008156:	b29b      	uxth	r3, r3
 8008158:	3b01      	subs	r3, #1
 800815a:	b29b      	uxth	r3, r3
 800815c:	b21a      	sxth	r2, r3
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	831a      	strh	r2, [r3, #24]
    }

    /*Set attributes*/
    obj->flags = LV_OBJ_FLAG_CLICKABLE;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	2202      	movs	r2, #2
 8008166:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SNAPPABLE;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	69db      	ldr	r3, [r3, #28]
 800816c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_PRESS_LOCK;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d005      	beq.n	8008186 <lv_obj_constructor+0xba>
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d005      	beq.n	8008198 <lv_obj_constructor+0xcc>
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_CLICK_FOCUSABLE;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	f043 0204 	orr.w	r2, r3, #4
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLLABLE;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	69db      	ldr	r3, [r3, #28]
 80081a8:	f043 0210 	orr.w	r2, r3, #16
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_ELASTIC;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	f043 0220 	orr.w	r2, r3, #32
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_MOMENTUM;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	61da      	str	r2, [r3, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	69db      	ldr	r3, [r3, #28]
 80081cc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	61da      	str	r2, [r3, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d005      	beq.n	80081e6 <lv_obj_constructor+0x11a>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	61da      	str	r2, [r3, #28]

    LV_TRACE_OBJ_CREATE("finished");
}
 80081e6:	bf00      	nop
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd90      	pop	{r4, r7, pc}

080081ee <lv_obj_destructor>:

static void lv_obj_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);

    _lv_event_mark_deleted(obj);
 80081f8:	6838      	ldr	r0, [r7, #0]
 80081fa:	f7fe fdc3 	bl	8006d84 <_lv_event_mark_deleted>

    /*Remove all style*/
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 80081fe:	2000      	movs	r0, #0
 8008200:	f006 fc1a 	bl	800ea38 <lv_obj_enable_style_refresh>
    lv_obj_remove_style_all(obj);
 8008204:	6838      	ldr	r0, [r7, #0]
 8008206:	f7ff fc5b 	bl	8007ac0 <lv_obj_remove_style_all>
    lv_obj_enable_style_refresh(true);
 800820a:	2001      	movs	r0, #1
 800820c:	f006 fc14 	bl	800ea38 <lv_obj_enable_style_refresh>

    /*Remove the animations from this object*/
    lv_anim_del(obj, NULL);
 8008210:	2100      	movs	r1, #0
 8008212:	6838      	ldr	r0, [r7, #0]
 8008214:	f019 ffd0 	bl	80221b8 <lv_anim_del>

    /*Delete from the group*/
    lv_group_t * group = lv_obj_get_group(obj);
 8008218:	6838      	ldr	r0, [r7, #0]
 800821a:	f7ff ff0d 	bl	8008038 <lv_obj_get_group>
 800821e:	60f8      	str	r0, [r7, #12]
    if(group) lv_group_remove_obj(obj);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d002      	beq.n	800822c <lv_obj_destructor+0x3e>
 8008226:	6838      	ldr	r0, [r7, #0]
 8008228:	f7ff f85a 	bl	80072e0 <lv_group_remove_obj>

    if(obj->spec_attr) {
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d025      	beq.n	8008280 <lv_obj_destructor+0x92>
        if(obj->spec_attr->children) {
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d009      	beq.n	8008252 <lv_obj_destructor+0x64>
            lv_mem_free(obj->spec_attr->children);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4618      	mov	r0, r3
 8008246:	f01b fe85 	bl	8023f54 <lv_mem_free>
            obj->spec_attr->children = NULL;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]
        }
        if(obj->spec_attr->event_dsc) {
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d009      	beq.n	8008270 <lv_obj_destructor+0x82>
            lv_mem_free(obj->spec_attr->event_dsc);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	4618      	mov	r0, r3
 8008264:	f01b fe76 	bl	8023f54 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	2200      	movs	r2, #0
 800826e:	60da      	str	r2, [r3, #12]
        }

        lv_mem_free(obj->spec_attr);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	4618      	mov	r0, r3
 8008276:	f01b fe6d 	bl	8023f54 <lv_mem_free>
        obj->spec_attr = NULL;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2200      	movs	r2, #0
 800827e:	609a      	str	r2, [r3, #8]
    }
}
 8008280:	bf00      	nop
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <lv_obj_draw>:

static void lv_obj_draw(lv_event_t * e)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b0b4      	sub	sp, #208	; 0xd0
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
    lv_event_code_t code = lv_event_get_code(e);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7fe fd5b 	bl	8006d4c <lv_event_get_code>
 8008296:	4603      	mov	r3, r0
 8008298:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    lv_obj_t * obj = lv_event_get_target(e);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f7fe fd3d 	bl	8006d1c <lv_event_get_target>
 80082a2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if(code == LV_EVENT_COVER_CHECK) {
 80082a6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80082aa:	2b12      	cmp	r3, #18
 80082ac:	f040 8089 	bne.w	80083c2 <lv_obj_draw+0x13a>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7fe fd5a 	bl	8006d6a <lv_event_get_param>
 80082b6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        if(info->res == LV_COVER_RES_MASKED) return;
 80082ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	f000 8227 	beq.w	8008714 <lv_obj_draw+0x48c>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 80082c6:	2100      	movs	r1, #0
 80082c8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80082cc:	f7ff fd4d 	bl	8007d6a <lv_obj_get_style_clip_corner>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d004      	beq.n	80082e0 <lv_obj_draw+0x58>
            info->res = LV_COVER_RES_MASKED;
 80082d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80082da:	2202      	movs	r2, #2
 80082dc:	701a      	strb	r2, [r3, #0]
            return;
 80082de:	e21a      	b.n	8008716 <lv_obj_draw+0x48e>
        }

        /*Most trivial test. Is the mask fully IN the object? If no it surely doesn't cover it*/
        lv_coord_t r = lv_obj_get_style_radius(obj, LV_PART_MAIN);
 80082e0:	2100      	movs	r1, #0
 80082e2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80082e6:	f7ff fd2e 	bl	8007d46 <lv_obj_get_style_radius>
 80082ea:	4603      	mov	r3, r0
 80082ec:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 80082f0:	2100      	movs	r1, #0
 80082f2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80082f6:	f7ff fc29 	bl	8007b4c <lv_obj_get_style_transform_width>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 8008300:	2100      	movs	r1, #0
 8008302:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8008306:	f7ff fc33 	bl	8007b70 <lv_obj_get_style_transform_height>
 800830a:	4603      	mov	r3, r0
 800830c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 8008310:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008314:	f103 0214 	add.w	r2, r3, #20
 8008318:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800831c:	4611      	mov	r1, r2
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff faec 	bl	80078fc <lv_area_copy>
        coords.x1 -= w;
 8008324:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8008328:	b29a      	uxth	r2, r3
 800832a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	b29b      	uxth	r3, r3
 8008332:	b21b      	sxth	r3, r3
 8008334:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
        coords.x2 += w;
 8008338:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 800833c:	b29a      	uxth	r2, r3
 800833e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8008342:	4413      	add	r3, r2
 8008344:	b29b      	uxth	r3, r3
 8008346:	b21b      	sxth	r3, r3
 8008348:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
        coords.y1 -= h;
 800834c:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8008350:	b29a      	uxth	r2, r3
 8008352:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	b29b      	uxth	r3, r3
 800835a:	b21b      	sxth	r3, r3
 800835c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
        coords.y2 += h;
 8008360:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8008364:	b29a      	uxth	r2, r3
 8008366:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800836a:	4413      	add	r3, r2
 800836c:	b29b      	uxth	r3, r3
 800836e:	b21b      	sxth	r3, r3
 8008370:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

        if(_lv_area_is_in(info->area, &coords, r) == false) {
 8008374:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	; 0xa2
 800837e:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8008382:	4618      	mov	r0, r3
 8008384:	f01a fc7a 	bl	8022c7c <_lv_area_is_in>
 8008388:	4603      	mov	r3, r0
 800838a:	f083 0301 	eor.w	r3, r3, #1
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d004      	beq.n	800839e <lv_obj_draw+0x116>
            info->res = LV_COVER_RES_NOT_COVER;
 8008394:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008398:	2201      	movs	r2, #1
 800839a:	701a      	strb	r2, [r3, #0]
            return;
 800839c:	e1bb      	b.n	8008716 <lv_obj_draw+0x48e>
        }

        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 800839e:	2100      	movs	r1, #0
 80083a0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80083a4:	f7ff fc2b 	bl	8007bfe <lv_obj_get_style_bg_opa>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2bfc      	cmp	r3, #252	; 0xfc
 80083ac:	d804      	bhi.n	80083b8 <lv_obj_draw+0x130>
            info->res = LV_COVER_RES_NOT_COVER;
 80083ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80083b2:	2201      	movs	r2, #1
 80083b4:	701a      	strb	r2, [r3, #0]
            return;
 80083b6:	e1ae      	b.n	8008716 <lv_obj_draw+0x48e>
        }

        info->res = LV_COVER_RES_COVER;
 80083b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80083bc:	2200      	movs	r2, #0
 80083be:	701a      	strb	r2, [r3, #0]
 80083c0:	e1a9      	b.n	8008716 <lv_obj_draw+0x48e>

    }
    else if(code == LV_EVENT_DRAW_MAIN) {
 80083c2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80083c6:	2b15      	cmp	r3, #21
 80083c8:	f040 80e7 	bne.w	800859a <lv_obj_draw+0x312>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7fe fd4d 	bl	8006e6c <lv_event_get_draw_ctx>
 80083d2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        lv_draw_rect_dsc_t draw_dsc;
        lv_draw_rect_dsc_init(&draw_dsc);
 80083d6:	f107 030c 	add.w	r3, r7, #12
 80083da:	4618      	mov	r0, r3
 80083dc:	f00d febc 	bl	8016158 <lv_draw_rect_dsc_init>
        /*If the border is drawn later disable loading its properties*/
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 80083e0:	2100      	movs	r1, #0
 80083e2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80083e6:	f7ff fc51 	bl	8007c8c <lv_obj_get_style_border_post>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d005      	beq.n	80083fc <lv_obj_draw+0x174>
            draw_dsc.border_post = 1;
 80083f0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80083f4:	f043 0301 	orr.w	r3, r3, #1
 80083f8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
        }

        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 80083fc:	f107 030c 	add.w	r3, r7, #12
 8008400:	461a      	mov	r2, r3
 8008402:	2100      	movs	r1, #0
 8008404:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8008408:	f001 fb9c 	bl	8009b44 <lv_obj_init_draw_rect_dsc>
        lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 800840c:	2100      	movs	r1, #0
 800840e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8008412:	f7ff fb9b 	bl	8007b4c <lv_obj_get_style_transform_width>
 8008416:	4603      	mov	r3, r0
 8008418:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
        lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 800841c:	2100      	movs	r1, #0
 800841e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8008422:	f7ff fba5 	bl	8007b70 <lv_obj_get_style_transform_height>
 8008426:	4603      	mov	r3, r0
 8008428:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lv_area_t coords;
        lv_area_copy(&coords, &obj->coords);
 800842c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008430:	f103 0214 	add.w	r2, r3, #20
 8008434:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008438:	4611      	mov	r1, r2
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff fa5e 	bl	80078fc <lv_area_copy>
        coords.x1 -= w;
 8008440:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 8008444:	b29a      	uxth	r2, r3
 8008446:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	b29b      	uxth	r3, r3
 800844e:	b21b      	sxth	r3, r3
 8008450:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
        coords.x2 += w;
 8008454:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8008458:	b29a      	uxth	r2, r3
 800845a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800845e:	4413      	add	r3, r2
 8008460:	b29b      	uxth	r3, r3
 8008462:	b21b      	sxth	r3, r3
 8008464:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
        coords.y1 -= h;
 8008468:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 800846c:	b29a      	uxth	r2, r3
 800846e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	b29b      	uxth	r3, r3
 8008476:	b21b      	sxth	r3, r3
 8008478:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
        coords.y2 += h;
 800847c:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8008480:	b29a      	uxth	r2, r3
 8008482:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008486:	4413      	add	r3, r2
 8008488:	b29b      	uxth	r3, r3
 800848a:	b21b      	sxth	r3, r3
 800848c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

        lv_obj_draw_part_dsc_t part_dsc;
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8008490:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008494:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008498:	4618      	mov	r0, r3
 800849a:	f001 fe2f 	bl	800a0fc <lv_obj_draw_dsc_init>
        part_dsc.class_p = MY_CLASS;
 800849e:	4b9f      	ldr	r3, [pc, #636]	; (800871c <lv_obj_draw+0x494>)
 80084a0:	643b      	str	r3, [r7, #64]	; 0x40
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 80084a2:	2300      	movs	r3, #0
 80084a4:	647b      	str	r3, [r7, #68]	; 0x44
        part_dsc.rect_dsc = &draw_dsc;
 80084a6:	f107 030c 	add.w	r3, r7, #12
 80084aa:	64fb      	str	r3, [r7, #76]	; 0x4c
        part_dsc.draw_area = &coords;
 80084ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80084b0:	64bb      	str	r3, [r7, #72]	; 0x48
        part_dsc.part = LV_PART_MAIN;
 80084b2:	2300      	movs	r3, #0
 80084b4:	673b      	str	r3, [r7, #112]	; 0x70
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80084b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80084ba:	461a      	mov	r2, r3
 80084bc:	211a      	movs	r1, #26
 80084be:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80084c2:	f7fe fbab 	bl	8006c1c <lv_event_send>

#if LV_DRAW_COMPLEX
        /*With clip corner enabled draw the bg img separately to make it clipped*/
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 80084c6:	2100      	movs	r1, #0
 80084c8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80084cc:	f7ff fc4d 	bl	8007d6a <lv_obj_get_style_clip_corner>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d005      	beq.n	80084e2 <lv_obj_draw+0x25a>
 80084d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <lv_obj_draw+0x25a>
 80084de:	2301      	movs	r3, #1
 80084e0:	e000      	b.n	80084e4 <lv_obj_draw+0x25c>
 80084e2:	2300      	movs	r3, #0
 80084e4:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80084e8:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
        const void * bg_img_src = draw_dsc.bg_img_src;
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        if(clip_corner) {
 80084fa:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <lv_obj_draw+0x27e>
            draw_dsc.bg_img_src = NULL;
 8008502:	2300      	movs	r3, #0
 8008504:	61bb      	str	r3, [r7, #24]
        }
#endif

        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8008506:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800850a:	f107 030c 	add.w	r3, r7, #12
 800850e:	4619      	mov	r1, r3
 8008510:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8008514:	f00d fe64 	bl	80161e0 <lv_draw_rect>


#if LV_DRAW_COMPLEX
        if(clip_corner) {
 8008518:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d033      	beq.n	8008588 <lv_obj_draw+0x300>
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8008520:	2018      	movs	r0, #24
 8008522:	f01b fd71 	bl	8024008 <lv_mem_buf_get>
 8008526:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
            lv_draw_mask_radius_init(mp, &obj->coords, draw_dsc.radius, false);
 800852a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800852e:	f103 0114 	add.w	r1, r3, #20
 8008532:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008536:	2300      	movs	r3, #0
 8008538:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800853c:	f00b fe10 	bl	8014160 <lv_draw_mask_radius_init>
            /*Add the mask and use `obj+8` as custom id. Don't use `obj` directly because it might be used by the user*/
            lv_draw_mask_add(mp, obj + 8);
 8008540:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008544:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8008548:	4619      	mov	r1, r3
 800854a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800854e:	f00b fa3b 	bl	80139c8 <lv_draw_mask_add>

            if(bg_img_src) {
 8008552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008556:	2b00      	cmp	r3, #0
 8008558:	d016      	beq.n	8008588 <lv_obj_draw+0x300>
                draw_dsc.bg_opa = LV_OPA_TRANSP;
 800855a:	2300      	movs	r3, #0
 800855c:	73fb      	strb	r3, [r7, #15]
                draw_dsc.border_opa = LV_OPA_TRANSP;
 800855e:	2300      	movs	r3, #0
 8008560:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                draw_dsc.outline_opa = LV_OPA_TRANSP;
 8008564:	2300      	movs	r3, #0
 8008566:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                draw_dsc.shadow_opa = LV_OPA_TRANSP;
 800856a:	2300      	movs	r3, #0
 800856c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                draw_dsc.bg_img_src = bg_img_src;
 8008570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008574:	61bb      	str	r3, [r7, #24]
                lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8008576:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800857a:	f107 030c 	add.w	r3, r7, #12
 800857e:	4619      	mov	r1, r3
 8008580:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8008584:	f00d fe2c 	bl	80161e0 <lv_draw_rect>
            }

        }
#endif
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8008588:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800858c:	461a      	mov	r2, r3
 800858e:	211b      	movs	r1, #27
 8008590:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8008594:	f7fe fb42 	bl	8006c1c <lv_event_send>
 8008598:	e0bd      	b.n	8008716 <lv_obj_draw+0x48e>
    }
    else if(code == LV_EVENT_DRAW_POST) {
 800859a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800859e:	2b18      	cmp	r3, #24
 80085a0:	f040 80b9 	bne.w	8008716 <lv_obj_draw+0x48e>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7fe fc61 	bl	8006e6c <lv_event_get_draw_ctx>
 80085aa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        draw_scrollbar(obj, draw_ctx);
 80085ae:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80085b2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80085b6:	f000 f8b3 	bl	8008720 <draw_scrollbar>

#if LV_DRAW_COMPLEX
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 80085ba:	2100      	movs	r1, #0
 80085bc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80085c0:	f7ff fbd3 	bl	8007d6a <lv_obj_get_style_clip_corner>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d014      	beq.n	80085f4 <lv_obj_draw+0x36c>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 80085ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085ce:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80085d2:	4618      	mov	r0, r3
 80085d4:	f00b fa96 	bl	8013b04 <lv_draw_mask_remove_custom>
 80085d8:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
            if(param) {
 80085dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d007      	beq.n	80085f4 <lv_obj_draw+0x36c>
                lv_draw_mask_free_param(param);
 80085e4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80085e8:	f00b fab4 	bl	8013b54 <lv_draw_mask_free_param>
                lv_mem_buf_release(param);
 80085ec:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80085f0:	f01b fdb6 	bl	8024160 <lv_mem_buf_release>
            }
        }
#endif

        /*If the border is drawn later disable loading other properties*/
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 80085f4:	2100      	movs	r1, #0
 80085f6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80085fa:	f7ff fb47 	bl	8007c8c <lv_obj_get_style_border_post>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 8088 	beq.w	8008716 <lv_obj_draw+0x48e>
            lv_draw_rect_dsc_t draw_dsc;
            lv_draw_rect_dsc_init(&draw_dsc);
 8008606:	f107 030c 	add.w	r3, r7, #12
 800860a:	4618      	mov	r0, r3
 800860c:	f00d fda4 	bl	8016158 <lv_draw_rect_dsc_init>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8008610:	2300      	movs	r3, #0
 8008612:	73fb      	strb	r3, [r7, #15]
            draw_dsc.bg_img_opa = LV_OPA_TRANSP;
 8008614:	2300      	movs	r3, #0
 8008616:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 800861a:	2300      	movs	r3, #0
 800861c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8008620:	2300      	movs	r3, #0
 8008622:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8008626:	f107 030c 	add.w	r3, r7, #12
 800862a:	461a      	mov	r2, r3
 800862c:	2100      	movs	r1, #0
 800862e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8008632:	f001 fa87 	bl	8009b44 <lv_obj_init_draw_rect_dsc>

            lv_coord_t w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
 8008636:	2100      	movs	r1, #0
 8008638:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800863c:	f7ff fa86 	bl	8007b4c <lv_obj_get_style_transform_width>
 8008640:	4603      	mov	r3, r0
 8008642:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
            lv_coord_t h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
 8008646:	2100      	movs	r1, #0
 8008648:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800864c:	f7ff fa90 	bl	8007b70 <lv_obj_get_style_transform_height>
 8008650:	4603      	mov	r3, r0
 8008652:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
            lv_area_t coords;
            lv_area_copy(&coords, &obj->coords);
 8008656:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800865a:	f103 0214 	add.w	r2, r3, #20
 800865e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008662:	4611      	mov	r1, r2
 8008664:	4618      	mov	r0, r3
 8008666:	f7ff f949 	bl	80078fc <lv_area_copy>
            coords.x1 -= w;
 800866a:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800866e:	b29a      	uxth	r2, r3
 8008670:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	b29b      	uxth	r3, r3
 8008678:	b21b      	sxth	r3, r3
 800867a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
            coords.x2 += w;
 800867e:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 8008682:	b29a      	uxth	r2, r3
 8008684:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008688:	4413      	add	r3, r2
 800868a:	b29b      	uxth	r3, r3
 800868c:	b21b      	sxth	r3, r3
 800868e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
            coords.y1 -= h;
 8008692:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8008696:	b29a      	uxth	r2, r3
 8008698:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	b29b      	uxth	r3, r3
 80086a0:	b21b      	sxth	r3, r3
 80086a2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
            coords.y2 += h;
 80086a6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80086b0:	4413      	add	r3, r2
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	b21b      	sxth	r3, r3
 80086b6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

            lv_obj_draw_part_dsc_t part_dsc;
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80086ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80086be:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80086c2:	4618      	mov	r0, r3
 80086c4:	f001 fd1a 	bl	800a0fc <lv_obj_draw_dsc_init>
            part_dsc.class_p = MY_CLASS;
 80086c8:	4b14      	ldr	r3, [pc, #80]	; (800871c <lv_obj_draw+0x494>)
 80086ca:	643b      	str	r3, [r7, #64]	; 0x40
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 80086cc:	2301      	movs	r3, #1
 80086ce:	647b      	str	r3, [r7, #68]	; 0x44
            part_dsc.rect_dsc = &draw_dsc;
 80086d0:	f107 030c 	add.w	r3, r7, #12
 80086d4:	64fb      	str	r3, [r7, #76]	; 0x4c
            part_dsc.draw_area = &coords;
 80086d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80086da:	64bb      	str	r3, [r7, #72]	; 0x48
            part_dsc.part = LV_PART_MAIN;
 80086dc:	2300      	movs	r3, #0
 80086de:	673b      	str	r3, [r7, #112]	; 0x70
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80086e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80086e4:	461a      	mov	r2, r3
 80086e6:	211a      	movs	r1, #26
 80086e8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80086ec:	f7fe fa96 	bl	8006c1c <lv_event_send>

            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 80086f0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80086f4:	f107 030c 	add.w	r3, r7, #12
 80086f8:	4619      	mov	r1, r3
 80086fa:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80086fe:	f00d fd6f 	bl	80161e0 <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8008702:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008706:	461a      	mov	r2, r3
 8008708:	211b      	movs	r1, #27
 800870a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800870e:	f7fe fa85 	bl	8006c1c <lv_event_send>
 8008712:	e000      	b.n	8008716 <lv_obj_draw+0x48e>
        if(info->res == LV_COVER_RES_MASKED) return;
 8008714:	bf00      	nop
        }
    }
}
 8008716:	37d0      	adds	r7, #208	; 0xd0
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	08028950 	.word	0x08028950

08008720 <draw_scrollbar>:

static void draw_scrollbar(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b0a6      	sub	sp, #152	; 0x98
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]

    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800872a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800872e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f004 fc1f 	bl	800cf78 <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800873a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800873e:	4618      	mov	r0, r3
 8008740:	f01a f82b 	bl	802279a <lv_area_get_size>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d107      	bne.n	800875a <draw_scrollbar+0x3a>
 800874a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800874e:	4618      	mov	r0, r3
 8008750:	f01a f823 	bl	802279a <lv_area_get_size>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d062      	beq.n	8008820 <draw_scrollbar+0x100>

    lv_draw_rect_dsc_t draw_dsc;
    lv_res_t sb_res = scrollbar_init_draw_dsc(obj, &draw_dsc);
 800875a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 f865 	bl	8008830 <scrollbar_init_draw_dsc>
 8008766:	4603      	mov	r3, r0
 8008768:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    if(sb_res != LV_RES_OK) return;
 800876c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008770:	2b01      	cmp	r3, #1
 8008772:	d157      	bne.n	8008824 <draw_scrollbar+0x104>

    lv_obj_draw_part_dsc_t part_dsc;
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8008774:	f107 030c 	add.w	r3, r7, #12
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	4618      	mov	r0, r3
 800877c:	f001 fcbe 	bl	800a0fc <lv_obj_draw_dsc_init>
    part_dsc.class_p = MY_CLASS;
 8008780:	4b2a      	ldr	r3, [pc, #168]	; (800882c <draw_scrollbar+0x10c>)
 8008782:	613b      	str	r3, [r7, #16]
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
 8008784:	2302      	movs	r3, #2
 8008786:	617b      	str	r3, [r7, #20]
    part_dsc.rect_dsc = &draw_dsc;
 8008788:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800878c:	61fb      	str	r3, [r7, #28]
    part_dsc.part = LV_PART_SCROLLBAR;
 800878e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008792:	643b      	str	r3, [r7, #64]	; 0x40

    if(lv_area_get_size(&hor_area) > 0) {
 8008794:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008798:	4618      	mov	r0, r3
 800879a:	f019 fffe 	bl	802279a <lv_area_get_size>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d018      	beq.n	80087d6 <draw_scrollbar+0xb6>
        part_dsc.draw_area = &hor_area;
 80087a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80087a8:	61bb      	str	r3, [r7, #24]
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80087aa:	f107 030c 	add.w	r3, r7, #12
 80087ae:	461a      	mov	r2, r3
 80087b0:	211a      	movs	r1, #26
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7fe fa32 	bl	8006c1c <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &hor_area);
 80087b8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80087bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80087c0:	4619      	mov	r1, r3
 80087c2:	6838      	ldr	r0, [r7, #0]
 80087c4:	f00d fd0c 	bl	80161e0 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80087c8:	f107 030c 	add.w	r3, r7, #12
 80087cc:	461a      	mov	r2, r3
 80087ce:	211b      	movs	r1, #27
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7fe fa23 	bl	8006c1c <lv_event_send>
    }
    if(lv_area_get_size(&ver_area) > 0) {
 80087d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80087da:	4618      	mov	r0, r3
 80087dc:	f019 ffdd 	bl	802279a <lv_area_get_size>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d01f      	beq.n	8008826 <draw_scrollbar+0x106>
        part_dsc.draw_area = &ver_area;
 80087e6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80087ea:	61bb      	str	r3, [r7, #24]
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80087ec:	f107 030c 	add.w	r3, r7, #12
 80087f0:	461a      	mov	r2, r3
 80087f2:	211a      	movs	r1, #26
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f7fe fa11 	bl	8006c1c <lv_event_send>
        part_dsc.draw_area = &ver_area;
 80087fa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80087fe:	61bb      	str	r3, [r7, #24]
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 8008800:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8008804:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008808:	4619      	mov	r1, r3
 800880a:	6838      	ldr	r0, [r7, #0]
 800880c:	f00d fce8 	bl	80161e0 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8008810:	f107 030c 	add.w	r3, r7, #12
 8008814:	461a      	mov	r2, r3
 8008816:	211b      	movs	r1, #27
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7fe f9ff 	bl	8006c1c <lv_event_send>
 800881e:	e002      	b.n	8008826 <draw_scrollbar+0x106>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8008820:	bf00      	nop
 8008822:	e000      	b.n	8008826 <draw_scrollbar+0x106>
    if(sb_res != LV_RES_OK) return;
 8008824:	bf00      	nop
    }
}
 8008826:	3798      	adds	r7, #152	; 0x98
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	08028950 	.word	0x08028950

08008830 <scrollbar_init_draw_dsc>:
 * @param obj pointer to an object
 * @param dsc the draw descriptor to initialize
 * @return LV_RES_OK: the scrollbar is visible; LV_RES_INV: the scrollbar is not visible
 */
static lv_res_t scrollbar_init_draw_dsc(lv_obj_t * obj, lv_draw_rect_dsc_t * dsc)
{
 8008830:	b590      	push	{r4, r7, lr}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
    lv_draw_rect_dsc_init(dsc);
 800883a:	6838      	ldr	r0, [r7, #0]
 800883c:	f00d fc8c 	bl	8016158 <lv_draw_rect_dsc_init>
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 8008840:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7ff f9da 	bl	8007bfe <lv_obj_get_style_bg_opa>
 800884a:	4603      	mov	r3, r0
 800884c:	461a      	mov	r2, r3
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	70da      	strb	r2, [r3, #3]
    if(dsc->bg_opa > LV_OPA_MIN) {
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	78db      	ldrb	r3, [r3, #3]
 8008856:	2b02      	cmp	r3, #2
 8008858:	d906      	bls.n	8008868 <scrollbar_init_draw_dsc+0x38>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 800885a:	683c      	ldr	r4, [r7, #0]
 800885c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f7ff f9bb 	bl	8007bdc <lv_obj_get_style_bg_color>
 8008866:	7120      	strb	r0, [r4, #4]
    }

    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 8008868:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7ff f9e9 	bl	8007c44 <lv_obj_get_style_border_opa>
 8008872:	4603      	mov	r3, r0
 8008874:	461a      	mov	r2, r3
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	771a      	strb	r2, [r3, #28]
    if(dsc->border_opa > LV_OPA_MIN) {
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	7f1b      	ldrb	r3, [r3, #28]
 800887e:	2b02      	cmp	r3, #2
 8008880:	d918      	bls.n	80088b4 <scrollbar_init_draw_dsc+0x84>
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 8008882:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7ff f9ee 	bl	8007c68 <lv_obj_get_style_border_width>
 800888c:	4603      	mov	r3, r0
 800888e:	461a      	mov	r2, r3
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	835a      	strh	r2, [r3, #26]
        if(dsc->border_width > 0) {
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800889a:	2b00      	cmp	r3, #0
 800889c:	dd07      	ble.n	80088ae <scrollbar_init_draw_dsc+0x7e>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 800889e:	683c      	ldr	r4, [r7, #0]
 80088a0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f7ff f9bc 	bl	8007c22 <lv_obj_get_style_border_color>
 80088aa:	7620      	strb	r0, [r4, #24]
 80088ac:	e002      	b.n	80088b4 <scrollbar_init_draw_dsc+0x84>
        }
        else {
            dsc->border_opa = LV_OPA_TRANSP;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2200      	movs	r2, #0
 80088b2:	771a      	strb	r2, [r3, #28]
        }
    }

#if LV_DRAW_COMPLEX
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 80088b4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff fa32 	bl	8007d22 <lv_obj_get_style_shadow_opa>
 80088be:	4603      	mov	r3, r0
 80088c0:	461a      	mov	r2, r3
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if(dsc->shadow_opa > LV_OPA_MIN) {
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d923      	bls.n	800891a <scrollbar_init_draw_dsc+0xea>
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 80088d2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7ff f9ee 	bl	8007cb8 <lv_obj_get_style_shadow_width>
 80088dc:	4603      	mov	r3, r0
 80088de:	461a      	mov	r2, r3
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	84da      	strh	r2, [r3, #38]	; 0x26
        if(dsc->shadow_width > 0) {
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	dd11      	ble.n	8008912 <scrollbar_init_draw_dsc+0xe2>
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 80088ee:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7ff f9f2 	bl	8007cdc <lv_obj_get_style_shadow_spread>
 80088f8:	4603      	mov	r3, r0
 80088fa:	461a      	mov	r2, r3
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	859a      	strh	r2, [r3, #44]	; 0x2c
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 8008900:	683c      	ldr	r4, [r7, #0]
 8008902:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff f9fa 	bl	8007d00 <lv_obj_get_style_shadow_color>
 800890c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
 8008910:	e003      	b.n	800891a <scrollbar_init_draw_dsc+0xea>
        }
        else {
            dsc->shadow_opa = LV_OPA_TRANSP;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        }
    }

    lv_opa_t opa = lv_obj_get_style_opa(obj, LV_PART_SCROLLBAR);
 800891a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7ff fa39 	bl	8007d96 <lv_obj_get_style_opa>
 8008924:	4603      	mov	r3, r0
 8008926:	73fb      	strb	r3, [r7, #15]
    if(opa < LV_OPA_MAX) {
 8008928:	7bfb      	ldrb	r3, [r7, #15]
 800892a:	2bfc      	cmp	r3, #252	; 0xfc
 800892c:	d81e      	bhi.n	800896c <scrollbar_init_draw_dsc+0x13c>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	78db      	ldrb	r3, [r3, #3]
 8008932:	461a      	mov	r2, r3
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	fb02 f303 	mul.w	r3, r2, r3
 800893a:	121b      	asrs	r3, r3, #8
 800893c:	b2da      	uxtb	r2, r3
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	70da      	strb	r2, [r3, #3]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	78db      	ldrb	r3, [r3, #3]
 8008946:	461a      	mov	r2, r3
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	fb02 f303 	mul.w	r3, r2, r3
 800894e:	121b      	asrs	r3, r3, #8
 8008950:	b2da      	uxtb	r2, r3
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	771a      	strb	r2, [r3, #28]
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	78db      	ldrb	r3, [r3, #3]
 800895a:	461a      	mov	r2, r3
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	fb02 f303 	mul.w	r3, r2, r3
 8008962:	121b      	asrs	r3, r3, #8
 8008964:	b2da      	uxtb	r2, r3
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }

    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP) {
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	78db      	ldrb	r3, [r3, #3]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d108      	bne.n	8008986 <scrollbar_init_draw_dsc+0x156>
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	7f1b      	ldrb	r3, [r3, #28]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d104      	bne.n	8008986 <scrollbar_init_draw_dsc+0x156>
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00a      	beq.n	800899c <scrollbar_init_draw_dsc+0x16c>
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 8008986:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff f9db 	bl	8007d46 <lv_obj_get_style_radius>
 8008990:	4603      	mov	r3, r0
 8008992:	461a      	mov	r2, r3
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	801a      	strh	r2, [r3, #0]
        return LV_RES_OK;
 8008998:	2301      	movs	r3, #1
 800899a:	e000      	b.n	800899e <scrollbar_init_draw_dsc+0x16e>
    }
    else {
        return LV_RES_INV;
 800899c:	2300      	movs	r3, #0
    }
#else
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP) return LV_RES_OK;
    else return LV_RES_INV;
#endif
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd90      	pop	{r4, r7, pc}

080089a6 <lv_obj_event>:

static void lv_obj_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 80089a6:	b590      	push	{r4, r7, lr}
 80089a8:	b09b      	sub	sp, #108	; 0x6c
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);

    lv_event_code_t code = lv_event_get_code(e);
 80089b0:	6838      	ldr	r0, [r7, #0]
 80089b2:	f7fe f9cb 	bl	8006d4c <lv_event_get_code>
 80089b6:	4603      	mov	r3, r0
 80089b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    lv_obj_t * obj = lv_event_get_current_target(e);
 80089bc:	6838      	ldr	r0, [r7, #0]
 80089be:	f7fe f9b9 	bl	8006d34 <lv_event_get_current_target>
 80089c2:	6538      	str	r0, [r7, #80]	; 0x50
    if(code == LV_EVENT_PRESSED) {
 80089c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d104      	bne.n	80089d6 <lv_obj_event+0x30>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 80089cc:	2120      	movs	r1, #32
 80089ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80089d0:	f7ff fac6 	bl	8007f60 <lv_obj_add_state>
 80089d4:	e2a7      	b.n	8008f26 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_RELEASED) {
 80089d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089da:	2b08      	cmp	r3, #8
 80089dc:	d131      	bne.n	8008a42 <lv_obj_event+0x9c>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 80089de:	2120      	movs	r1, #32
 80089e0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80089e2:	f7ff fad6 	bl	8007f92 <lv_obj_clear_state>
        void * param = lv_event_get_param(e);
 80089e6:	6838      	ldr	r0, [r7, #0]
 80089e8:	f7fe f9bf 	bl	8006d6a <lv_event_get_param>
 80089ec:	6238      	str	r0, [r7, #32]
        /*Go the checked state if enabled*/
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 80089ee:	6a38      	ldr	r0, [r7, #32]
 80089f0:	f7fe ff5b 	bl	80078aa <lv_indev_get_scroll_obj>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f040 8295 	bne.w	8008f26 <lv_obj_event+0x580>
 80089fc:	2108      	movs	r1, #8
 80089fe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008a00:	f7ff fae5 	bl	8007fce <lv_obj_has_flag>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f000 828d 	beq.w	8008f26 <lv_obj_event+0x580>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 8008a0c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008a0e:	f7ff fb07 	bl	8008020 <lv_obj_get_state>
 8008a12:	4603      	mov	r3, r0
 8008a14:	f003 0301 	and.w	r3, r3, #1
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d104      	bne.n	8008a26 <lv_obj_event+0x80>
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008a20:	f7ff fa9e 	bl	8007f60 <lv_obj_add_state>
 8008a24:	e003      	b.n	8008a2e <lv_obj_event+0x88>
            else lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8008a26:	2101      	movs	r1, #1
 8008a28:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008a2a:	f7ff fab2 	bl	8007f92 <lv_obj_clear_state>

            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8008a2e:	2200      	movs	r2, #0
 8008a30:	211c      	movs	r1, #28
 8008a32:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008a34:	f7fe f8f2 	bl	8006c1c <lv_event_send>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	77fb      	strb	r3, [r7, #31]
            if(res != LV_RES_OK) return;
 8008a3c:	7ffb      	ldrb	r3, [r7, #31]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	e271      	b.n	8008f26 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_PRESS_LOST) {
 8008a42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d104      	bne.n	8008a54 <lv_obj_event+0xae>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8008a4a:	2120      	movs	r1, #32
 8008a4c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008a4e:	f7ff faa0 	bl	8007f92 <lv_obj_clear_state>
 8008a52:	e268      	b.n	8008f26 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_STYLE_CHANGED) {
 8008a54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a58:	2b2a      	cmp	r3, #42	; 0x2a
 8008a5a:	d119      	bne.n	8008a90 <lv_obj_event+0xea>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008a5c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008a5e:	f007 fb5f 	bl	8010120 <lv_obj_get_child_cnt>
 8008a62:	62b8      	str	r0, [r7, #40]	; 0x28
        for(uint32_t i = 0; i < child_cnt; i++) {
 8008a64:	2300      	movs	r3, #0
 8008a66:	667b      	str	r3, [r7, #100]	; 0x64
 8008a68:	e00d      	b.n	8008a86 <lv_obj_event+0xe0>
            lv_obj_t * child = obj->spec_attr->children[i];
 8008a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	627b      	str	r3, [r7, #36]	; 0x24
            lv_obj_mark_layout_as_dirty(child);
 8008a7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a7c:	f002 f856 	bl	800ab2c <lv_obj_mark_layout_as_dirty>
        for(uint32_t i = 0; i < child_cnt; i++) {
 8008a80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a82:	3301      	adds	r3, #1
 8008a84:	667b      	str	r3, [r7, #100]	; 0x64
 8008a86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d3ed      	bcc.n	8008a6a <lv_obj_event+0xc4>
 8008a8e:	e24a      	b.n	8008f26 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_KEY) {
 8008a90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a94:	2b0d      	cmp	r3, #13
 8008a96:	f040 8126 	bne.w	8008ce6 <lv_obj_event+0x340>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8008a9a:	2108      	movs	r1, #8
 8008a9c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008a9e:	f7ff fa96 	bl	8007fce <lv_obj_has_flag>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d030      	beq.n	8008b0a <lv_obj_event+0x164>
            char c = *((char *)lv_event_get_param(e));
 8008aa8:	6838      	ldr	r0, [r7, #0]
 8008aaa:	f7fe f95e 	bl	8006d6a <lv_event_get_param>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8008ab6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008aba:	2b13      	cmp	r3, #19
 8008abc:	d003      	beq.n	8008ac6 <lv_obj_event+0x120>
 8008abe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008ac2:	2b11      	cmp	r3, #17
 8008ac4:	d104      	bne.n	8008ad0 <lv_obj_event+0x12a>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008aca:	f7ff fa49 	bl	8007f60 <lv_obj_add_state>
 8008ace:	e00b      	b.n	8008ae8 <lv_obj_event+0x142>
            }
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8008ad0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008ad4:	2b14      	cmp	r3, #20
 8008ad6:	d003      	beq.n	8008ae0 <lv_obj_event+0x13a>
 8008ad8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008adc:	2b12      	cmp	r3, #18
 8008ade:	d103      	bne.n	8008ae8 <lv_obj_event+0x142>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008ae4:	f7ff fa55 	bl	8007f92 <lv_obj_clear_state>
            }

            /*With Enter LV_EVENT_RELEASED will send VALUE_CHANGE event*/
            if(c != LV_KEY_ENTER) {
 8008ae8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008aec:	2b0a      	cmp	r3, #10
 8008aee:	f000 821a 	beq.w	8008f26 <lv_obj_event+0x580>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8008af2:	2200      	movs	r2, #0
 8008af4:	211c      	movs	r1, #28
 8008af6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008af8:	f7fe f890 	bl	8006c1c <lv_event_send>
 8008afc:	4603      	mov	r3, r0
 8008afe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                if(res != LV_RES_OK) return;
 8008b02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	e20d      	b.n	8008f26 <lv_obj_event+0x580>
            }
        }
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE | LV_OBJ_FLAG_SCROLL_WITH_ARROW) && !lv_obj_is_editable(obj)) {
 8008b0a:	f44f 6101 	mov.w	r1, #2064	; 0x810
 8008b0e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008b10:	f7ff fa5d 	bl	8007fce <lv_obj_has_flag>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 8205 	beq.w	8008f26 <lv_obj_event+0x580>
 8008b1c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008b1e:	f000 fc8d 	bl	800943c <lv_obj_is_editable>
 8008b22:	4603      	mov	r3, r0
 8008b24:	f083 0301 	eor.w	r3, r3, #1
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 81fb 	beq.w	8008f26 <lv_obj_event+0x580>
            /*scroll by keypad or encoder*/
            lv_anim_enable_t anim_enable = LV_ANIM_OFF;
 8008b30:	2300      	movs	r3, #0
 8008b32:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8008b36:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008b38:	f003 fe14 	bl	800c764 <lv_obj_get_scroll_left>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	867b      	strh	r3, [r7, #50]	; 0x32
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8008b40:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008b42:	f003 feb3 	bl	800c8ac <lv_obj_get_scroll_right>
 8008b46:	4603      	mov	r3, r0
 8008b48:	863b      	strh	r3, [r7, #48]	; 0x30
            char c = *((char *)lv_event_get_param(e));
 8008b4a:	6838      	ldr	r0, [r7, #0]
 8008b4c:	f7fe f90d 	bl	8006d6a <lv_event_get_param>
 8008b50:	4603      	mov	r3, r0
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if(c == LV_KEY_DOWN) {
 8008b58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b5c:	2b12      	cmp	r3, #18
 8008b5e:	d118      	bne.n	8008b92 <lv_obj_event+0x1ec>
                /*use scroll_to_x/y functions to enforce scroll limits*/
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8008b60:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008b62:	f003 fd49 	bl	800c5f8 <lv_obj_get_scroll_y>
 8008b66:	4603      	mov	r3, r0
 8008b68:	b29c      	uxth	r4, r3
 8008b6a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008b6c:	f002 f86e 	bl	800ac4c <lv_obj_get_height>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	da00      	bge.n	8008b78 <lv_obj_event+0x1d2>
 8008b76:	3303      	adds	r3, #3
 8008b78:	109b      	asrs	r3, r3, #2
 8008b7a:	b21b      	sxth	r3, r3
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	4423      	add	r3, r4
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	b21b      	sxth	r3, r3
 8008b84:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008b8c:	f004 f95c 	bl	800ce48 <lv_obj_scroll_to_y>
 8008b90:	e1c9      	b.n	8008f26 <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_UP) {
 8008b92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b96:	2b11      	cmp	r3, #17
 8008b98:	d118      	bne.n	8008bcc <lv_obj_event+0x226>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8008b9a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008b9c:	f003 fd2c 	bl	800c5f8 <lv_obj_get_scroll_y>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	b29c      	uxth	r4, r3
 8008ba4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008ba6:	f002 f851 	bl	800ac4c <lv_obj_get_height>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	da00      	bge.n	8008bb2 <lv_obj_event+0x20c>
 8008bb0:	3303      	adds	r3, #3
 8008bb2:	109b      	asrs	r3, r3, #2
 8008bb4:	b21b      	sxth	r3, r3
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	1ae3      	subs	r3, r4, r3
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	b21b      	sxth	r3, r3
 8008bbe:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008bc6:	f004 f93f 	bl	800ce48 <lv_obj_scroll_to_y>
 8008bca:	e1ac      	b.n	8008f26 <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_RIGHT) {
 8008bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bd0:	2b13      	cmp	r3, #19
 8008bd2:	d141      	bne.n	8008c58 <lv_obj_event+0x2b2>
                /*If the object can't be scrolled horizontally then scroll it vertically*/
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8008bd4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008bd6:	f003 fcb5 	bl	800c544 <lv_obj_get_scroll_dir>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	f003 0303 	and.w	r3, r3, #3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d007      	beq.n	8008bf4 <lv_obj_event+0x24e>
 8008be4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dc1c      	bgt.n	8008c26 <lv_obj_event+0x280>
 8008bec:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	dc18      	bgt.n	8008c26 <lv_obj_event+0x280>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8008bf4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008bf6:	f003 fcff 	bl	800c5f8 <lv_obj_get_scroll_y>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	b29c      	uxth	r4, r3
 8008bfe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008c00:	f002 f824 	bl	800ac4c <lv_obj_get_height>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	da00      	bge.n	8008c0c <lv_obj_event+0x266>
 8008c0a:	3303      	adds	r3, #3
 8008c0c:	109b      	asrs	r3, r3, #2
 8008c0e:	b21b      	sxth	r3, r3
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	4423      	add	r3, r4
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	b21b      	sxth	r3, r3
 8008c18:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008c20:	f004 f912 	bl	800ce48 <lv_obj_scroll_to_y>
 8008c24:	e17f      	b.n	8008f26 <lv_obj_event+0x580>
                else
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 8008c26:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008c28:	f003 fcce 	bl	800c5c8 <lv_obj_get_scroll_x>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	b29c      	uxth	r4, r3
 8008c30:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008c32:	f001 fffd 	bl	800ac30 <lv_obj_get_width>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	da00      	bge.n	8008c3e <lv_obj_event+0x298>
 8008c3c:	3303      	adds	r3, #3
 8008c3e:	109b      	asrs	r3, r3, #2
 8008c40:	b21b      	sxth	r3, r3
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	4423      	add	r3, r4
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	b21b      	sxth	r3, r3
 8008c4a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008c52:	f004 f8d5 	bl	800ce00 <lv_obj_scroll_to_x>
 8008c56:	e166      	b.n	8008f26 <lv_obj_event+0x580>
            }
            else if(c == LV_KEY_LEFT) {
 8008c58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c5c:	2b14      	cmp	r3, #20
 8008c5e:	f040 8162 	bne.w	8008f26 <lv_obj_event+0x580>
                /*If the object can't be scrolled horizontally then scroll it vertically*/
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8008c62:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008c64:	f003 fc6e 	bl	800c544 <lv_obj_get_scroll_dir>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	f003 0303 	and.w	r3, r3, #3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d007      	beq.n	8008c82 <lv_obj_event+0x2dc>
 8008c72:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	dc1c      	bgt.n	8008cb4 <lv_obj_event+0x30e>
 8008c7a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	dc18      	bgt.n	8008cb4 <lv_obj_event+0x30e>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8008c82:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008c84:	f003 fcb8 	bl	800c5f8 <lv_obj_get_scroll_y>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	b29c      	uxth	r4, r3
 8008c8c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008c8e:	f001 ffdd 	bl	800ac4c <lv_obj_get_height>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	da00      	bge.n	8008c9a <lv_obj_event+0x2f4>
 8008c98:	3303      	adds	r3, #3
 8008c9a:	109b      	asrs	r3, r3, #2
 8008c9c:	b21b      	sxth	r3, r3
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	1ae3      	subs	r3, r4, r3
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	b21b      	sxth	r3, r3
 8008ca6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008caa:	4619      	mov	r1, r3
 8008cac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008cae:	f004 f8cb 	bl	800ce48 <lv_obj_scroll_to_y>
 8008cb2:	e138      	b.n	8008f26 <lv_obj_event+0x580>
                else
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 8008cb4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008cb6:	f003 fc87 	bl	800c5c8 <lv_obj_get_scroll_x>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	b29c      	uxth	r4, r3
 8008cbe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008cc0:	f001 ffb6 	bl	800ac30 <lv_obj_get_width>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	da00      	bge.n	8008ccc <lv_obj_event+0x326>
 8008cca:	3303      	adds	r3, #3
 8008ccc:	109b      	asrs	r3, r3, #2
 8008cce:	b21b      	sxth	r3, r3
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	1ae3      	subs	r3, r4, r3
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	b21b      	sxth	r3, r3
 8008cd8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008ce0:	f004 f88e 	bl	800ce00 <lv_obj_scroll_to_x>
 8008ce4:	e11f      	b.n	8008f26 <lv_obj_event+0x580>
            }
        }
    }
    else if(code == LV_EVENT_FOCUSED) {
 8008ce6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cea:	2b0e      	cmp	r3, #14
 8008cec:	d155      	bne.n	8008d9a <lv_obj_event+0x3f4>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 8008cee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008cf2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008cf4:	f7ff f96b 	bl	8007fce <lv_obj_has_flag>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d003      	beq.n	8008d06 <lv_obj_event+0x360>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 8008cfe:	2101      	movs	r1, #1
 8008d00:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008d02:	f004 f8c5 	bl	800ce90 <lv_obj_scroll_to_view_recursive>
        }

        bool editing = false;
 8008d06:	2300      	movs	r3, #0
 8008d08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8008d0c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008d0e:	f7ff f993 	bl	8008038 <lv_obj_get_group>
 8008d12:	4603      	mov	r3, r0
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fe fba3 	bl	8007460 <lv_group_get_editing>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        lv_state_t state = LV_STATE_FOCUSED;
 8008d20:	2302      	movs	r3, #2
 8008d22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        /* Use the indev for then indev handler.
         * But if the obj was focused manually it returns NULL so try to
         * use the indev from the event*/
        lv_indev_t * indev = lv_indev_get_act();
 8008d26:	f7fe fcf9 	bl	800771c <lv_indev_get_act>
 8008d2a:	65f8      	str	r0, [r7, #92]	; 0x5c
        if(indev == NULL) indev = lv_event_get_indev(e);
 8008d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d103      	bne.n	8008d3a <lv_obj_event+0x394>
 8008d32:	6838      	ldr	r0, [r7, #0]
 8008d34:	f7fe f84c 	bl	8006dd0 <lv_event_get_indev>
 8008d38:	65f8      	str	r0, [r7, #92]	; 0x5c

        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8008d3a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008d3c:	f7fe fcfa 	bl	8007734 <lv_indev_get_type>
 8008d40:	4603      	mov	r3, r0
 8008d42:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8008d46:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d003      	beq.n	8008d56 <lv_obj_event+0x3b0>
 8008d4e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d105      	bne.n	8008d62 <lv_obj_event+0x3bc>
 8008d56:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008d5a:	f043 0304 	orr.w	r3, r3, #4
 8008d5e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        if(editing) {
 8008d62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00c      	beq.n	8008d84 <lv_obj_event+0x3de>
            state |= LV_STATE_EDITED;
 8008d6a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008d6e:	f043 0308 	orr.w	r3, r3, #8
 8008d72:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            lv_obj_add_state(obj, state);
 8008d76:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008d7e:	f7ff f8ef 	bl	8007f60 <lv_obj_add_state>
 8008d82:	e0d0      	b.n	8008f26 <lv_obj_event+0x580>
        }
        else {
            lv_obj_add_state(obj, state);
 8008d84:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008d88:	4619      	mov	r1, r3
 8008d8a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008d8c:	f7ff f8e8 	bl	8007f60 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 8008d90:	2108      	movs	r1, #8
 8008d92:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008d94:	f7ff f8fd 	bl	8007f92 <lv_obj_clear_state>
 8008d98:	e0c5      	b.n	8008f26 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8008d9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d9e:	2b09      	cmp	r3, #9
 8008da0:	d104      	bne.n	8008dac <lv_obj_event+0x406>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 8008da2:	2140      	movs	r1, #64	; 0x40
 8008da4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008da6:	f7ff f8db 	bl	8007f60 <lv_obj_add_state>
 8008daa:	e0bc      	b.n	8008f26 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_SCROLL_END) {
 8008dac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008db0:	2b0a      	cmp	r3, #10
 8008db2:	d11f      	bne.n	8008df4 <lv_obj_event+0x44e>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 8008db4:	2140      	movs	r1, #64	; 0x40
 8008db6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008db8:	f7ff f8eb 	bl	8007f92 <lv_obj_clear_state>
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
 8008dbc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008dbe:	f003 fbab 	bl	800c518 <lv_obj_get_scrollbar_mode>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	f040 80ae 	bne.w	8008f26 <lv_obj_event+0x580>
            lv_area_t hor_area, ver_area;
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8008dca:	f107 020c 	add.w	r2, r7, #12
 8008dce:	f107 0314 	add.w	r3, r7, #20
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008dd6:	f004 f8cf 	bl	800cf78 <lv_obj_get_scrollbar_area>
            lv_obj_invalidate_area(obj, &hor_area);
 8008dda:	f107 0314 	add.w	r3, r7, #20
 8008dde:	4619      	mov	r1, r3
 8008de0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008de2:	f002 fcbb 	bl	800b75c <lv_obj_invalidate_area>
            lv_obj_invalidate_area(obj, &ver_area);
 8008de6:	f107 030c 	add.w	r3, r7, #12
 8008dea:	4619      	mov	r1, r3
 8008dec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008dee:	f002 fcb5 	bl	800b75c <lv_obj_invalidate_area>
 8008df2:	e098      	b.n	8008f26 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_DEFOCUSED) {
 8008df4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008df8:	2b0f      	cmp	r3, #15
 8008dfa:	d104      	bne.n	8008e06 <lv_obj_event+0x460>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 8008dfc:	210e      	movs	r1, #14
 8008dfe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008e00:	f7ff f8c7 	bl	8007f92 <lv_obj_clear_state>
 8008e04:	e08f      	b.n	8008f26 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8008e06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e0a:	2b29      	cmp	r3, #41	; 0x29
 8008e0c:	d132      	bne.n	8008e74 <lv_obj_event+0x4ce>
        lv_coord_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 8008e0e:	2100      	movs	r1, #0
 8008e10:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008e12:	f7fe fe89 	bl	8007b28 <lv_obj_get_style_align>
 8008e16:	4603      	mov	r3, r0
 8008e18:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        uint16_t layout = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008e20:	f7fe ffcb 	bl	8007dba <lv_obj_get_style_layout>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        if(layout || align) {
 8008e2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d103      	bne.n	8008e3a <lv_obj_event+0x494>
 8008e32:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <lv_obj_event+0x49a>
            lv_obj_mark_layout_as_dirty(obj);
 8008e3a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008e3c:	f001 fe76 	bl	800ab2c <lv_obj_mark_layout_as_dirty>
        }

        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008e40:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008e42:	f007 f96d 	bl	8010120 <lv_obj_get_child_cnt>
 8008e46:	63f8      	str	r0, [r7, #60]	; 0x3c
        for(i = 0; i < child_cnt; i++) {
 8008e48:	2300      	movs	r3, #0
 8008e4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e4c:	e00d      	b.n	8008e6a <lv_obj_event+0x4c4>
            lv_obj_t * child = obj->spec_attr->children[i];
 8008e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	63bb      	str	r3, [r7, #56]	; 0x38
            lv_obj_mark_layout_as_dirty(child);
 8008e5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e60:	f001 fe64 	bl	800ab2c <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < child_cnt; i++) {
 8008e64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e66:	3301      	adds	r3, #1
 8008e68:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d3ed      	bcc.n	8008e4e <lv_obj_event+0x4a8>
 8008e72:	e058      	b.n	8008f26 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_CHILD_CHANGED) {
 8008e74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e78:	2b22      	cmp	r3, #34	; 0x22
 8008e7a:	d133      	bne.n	8008ee4 <lv_obj_event+0x53e>
        lv_coord_t w = lv_obj_get_style_width(obj, LV_PART_MAIN);
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008e80:	f7fe fe2e 	bl	8007ae0 <lv_obj_get_style_width>
 8008e84:	4603      	mov	r3, r0
 8008e86:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_MAIN);
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008e8e:	f7fe fe39 	bl	8007b04 <lv_obj_get_style_height>
 8008e92:	4603      	mov	r3, r0
 8008e94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        lv_coord_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 8008e98:	2100      	movs	r1, #0
 8008e9a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008e9c:	f7fe fe44 	bl	8007b28 <lv_obj_get_style_align>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        uint16_t layout = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008eaa:	f7fe ff86 	bl	8007dba <lv_obj_get_style_layout>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 8008eb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10f      	bne.n	8008edc <lv_obj_event+0x536>
 8008ebc:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10b      	bne.n	8008edc <lv_obj_event+0x536>
 8008ec4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8008ec8:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d005      	beq.n	8008edc <lv_obj_event+0x536>
 8008ed0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8008ed4:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d124      	bne.n	8008f26 <lv_obj_event+0x580>
            lv_obj_mark_layout_as_dirty(obj);
 8008edc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008ede:	f001 fe25 	bl	800ab2c <lv_obj_mark_layout_as_dirty>
 8008ee2:	e020      	b.n	8008f26 <lv_obj_event+0x580>
        }
    }
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8008ee4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ee8:	2b13      	cmp	r3, #19
 8008eea:	d10d      	bne.n	8008f08 <lv_obj_event+0x562>
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 8008eec:	2100      	movs	r1, #0
 8008eee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008ef0:	f001 f866 	bl	8009fc0 <lv_obj_calculate_ext_draw_size>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lv_event_set_ext_draw_size(e, d);
 8008efa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008efe:	4619      	mov	r1, r3
 8008f00:	6838      	ldr	r0, [r7, #0]
 8008f02:	f7fd ffd9 	bl	8006eb8 <lv_event_set_ext_draw_size>
 8008f06:	e00e      	b.n	8008f26 <lv_obj_event+0x580>
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8008f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f0c:	2b15      	cmp	r3, #21
 8008f0e:	d007      	beq.n	8008f20 <lv_obj_event+0x57a>
 8008f10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f14:	2b18      	cmp	r3, #24
 8008f16:	d003      	beq.n	8008f20 <lv_obj_event+0x57a>
 8008f18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f1c:	2b12      	cmp	r3, #18
 8008f1e:	d102      	bne.n	8008f26 <lv_obj_event+0x580>
        lv_obj_draw(e);
 8008f20:	6838      	ldr	r0, [r7, #0]
 8008f22:	f7ff f9b1 	bl	8008288 <lv_obj_draw>
    }
}
 8008f26:	376c      	adds	r7, #108	; 0x6c
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd90      	pop	{r4, r7, pc}

08008f2c <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b094      	sub	sp, #80	; 0x50
 8008f30:	af02      	add	r7, sp, #8
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	807b      	strh	r3, [r7, #2]
    if(obj->state == new_state) return;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	8c1b      	ldrh	r3, [r3, #32]
 8008f3c:	887a      	ldrh	r2, [r7, #2]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	f000 815a 	beq.w	80091f8 <lv_obj_set_state+0x2cc>

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	8c1b      	ldrh	r3, [r3, #32]
 8008f48:	86fb      	strh	r3, [r7, #54]	; 0x36
    obj->state = new_state;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	887a      	ldrh	r2, [r7, #2]
 8008f4e:	841a      	strh	r2, [r3, #32]

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 8008f50:	887a      	ldrh	r2, [r7, #2]
 8008f52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f005 fff6 	bl	800ef48 <_lv_obj_style_state_compare>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 8008f62:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 8148 	beq.w	80091fc <lv_obj_set_state+0x2d0>

    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8008f6c:	f44f 7020 	mov.w	r0, #640	; 0x280
 8008f70:	f01b f84a 	bl	8024008 <lv_mem_buf_get>
 8008f74:	6338      	str	r0, [r7, #48]	; 0x30
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8008f76:	f44f 7120 	mov.w	r1, #640	; 0x280
 8008f7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f7c:	f01b fbee 	bl	802475c <lv_memset_00>
    uint32_t tsi = 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t i;
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8008f84:	2300      	movs	r3, #0
 8008f86:	643b      	str	r3, [r7, #64]	; 0x40
 8008f88:	e0e0      	b.n	800914c <lv_obj_set_state+0x220>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f90:	00db      	lsls	r3, r3, #3
 8008f92:	4413      	add	r3, r2
 8008f94:	62fb      	str	r3, [r7, #44]	; 0x2c
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68da      	ldr	r2, [r3, #12]
 8008f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	4413      	add	r3, r2
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f006 f9c4 	bl	800f334 <lv_obj_style_get_selector_state>
 8008fac:	4603      	mov	r3, r0
 8008fae:	857b      	strh	r3, [r7, #42]	; 0x2a
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68da      	ldr	r2, [r3, #12]
 8008fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fb6:	00db      	lsls	r3, r3, #3
 8008fb8:	4413      	add	r3, r2
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f006 f9c3 	bl	800f34c <lv_obj_style_get_selector_part>
 8008fc6:	6278      	str	r0, [r7, #36]	; 0x24
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8008fc8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8008fca:	887b      	ldrh	r3, [r7, #2]
 8008fcc:	43db      	mvns	r3, r3
 8008fce:	4013      	ands	r3, r2
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f040 80b3 	bne.w	800913c <lv_obj_set_state+0x210>
        if(obj_style->is_trans) continue;
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd8:	79db      	ldrb	r3, [r3, #7]
 8008fda:	f003 0302 	and.w	r3, r3, #2
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f040 80ad 	bne.w	8009140 <lv_obj_set_state+0x214>

        lv_style_value_t v;
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f107 020c 	add.w	r2, r7, #12
 8008fee:	2166      	movs	r1, #102	; 0x66
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fe fca2 	bl	800793a <lv_style_get_prop_inlined>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	f040 80a3 	bne.w	8009144 <lv_obj_set_state+0x218>
        const lv_style_transition_dsc_t * tr = v.ptr;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	623b      	str	r3, [r7, #32]

        /*Add the props to the set if not added yet or added but with smaller weight*/
        uint32_t j;
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8009002:	2300      	movs	r3, #0
 8009004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009006:	e08c      	b.n	8009122 <lv_obj_set_state+0x1f6>
            uint32_t t;
            for(t = 0; t < tsi; t++) {
 8009008:	2300      	movs	r3, #0
 800900a:	63bb      	str	r3, [r7, #56]	; 0x38
 800900c:	e02e      	b.n	800906c <lv_obj_set_state+0x140>
                lv_style_selector_t selector = ts[t].selector;
 800900e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009010:	4613      	mov	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	461a      	mov	r2, r3
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	4413      	add	r3, r2
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	61fb      	str	r3, [r7, #28]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8009022:	69f8      	ldr	r0, [r7, #28]
 8009024:	f006 f986 	bl	800f334 <lv_obj_style_get_selector_state>
 8009028:	4603      	mov	r3, r0
 800902a:	837b      	strh	r3, [r7, #26]
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 800902c:	69f8      	ldr	r0, [r7, #28]
 800902e:	f006 f98d 	bl	800f34c <lv_obj_style_get_selector_part>
 8009032:	6178      	str	r0, [r7, #20]
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 8009034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009036:	4613      	mov	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	461a      	mov	r2, r3
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	4413      	add	r3, r2
 8009044:	891a      	ldrh	r2, [r3, #8]
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	6819      	ldr	r1, [r3, #0]
 800904a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800904c:	005b      	lsls	r3, r3, #1
 800904e:	440b      	add	r3, r1
 8009050:	881b      	ldrh	r3, [r3, #0]
 8009052:	429a      	cmp	r2, r3
 8009054:	d107      	bne.n	8009066 <lv_obj_set_state+0x13a>
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	429a      	cmp	r2, r3
 800905c:	d103      	bne.n	8009066 <lv_obj_set_state+0x13a>
 800905e:	8b7a      	ldrh	r2, [r7, #26]
 8009060:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009062:	429a      	cmp	r2, r3
 8009064:	d207      	bcs.n	8009076 <lv_obj_set_state+0x14a>
            for(t = 0; t < tsi; t++) {
 8009066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009068:	3301      	adds	r3, #1
 800906a:	63bb      	str	r3, [r7, #56]	; 0x38
 800906c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800906e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009070:	429a      	cmp	r2, r3
 8009072:	d3cc      	bcc.n	800900e <lv_obj_set_state+0xe2>
 8009074:	e000      	b.n	8009078 <lv_obj_set_state+0x14c>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 8009076:	bf00      	nop
            }

            /*If not found  add it*/
            if(t == tsi) {
 8009078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800907a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800907c:	429a      	cmp	r2, r3
 800907e:	d14d      	bne.n	800911c <lv_obj_set_state+0x1f0>
                ts[tsi].time = tr->time;
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	68d9      	ldr	r1, [r3, #12]
 8009084:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009086:	4613      	mov	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	461a      	mov	r2, r3
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	4413      	add	r3, r2
 8009094:	b28a      	uxth	r2, r1
 8009096:	801a      	strh	r2, [r3, #0]
                ts[tsi].delay = tr->delay;
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	6919      	ldr	r1, [r3, #16]
 800909c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800909e:	4613      	mov	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	461a      	mov	r2, r3
 80090a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090aa:	4413      	add	r3, r2
 80090ac:	b28a      	uxth	r2, r1
 80090ae:	805a      	strh	r2, [r3, #2]
                ts[tsi].path_cb = tr->path_xcb;
 80090b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090b2:	4613      	mov	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	461a      	mov	r2, r3
 80090bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090be:	4413      	add	r3, r2
 80090c0:	6a3a      	ldr	r2, [r7, #32]
 80090c2:	6892      	ldr	r2, [r2, #8]
 80090c4:	60da      	str	r2, [r3, #12]
                ts[tsi].prop = tr->props[j];
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	18d1      	adds	r1, r2, r3
 80090d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090d2:	4613      	mov	r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	461a      	mov	r2, r3
 80090dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090de:	4413      	add	r3, r2
 80090e0:	880a      	ldrh	r2, [r1, #0]
 80090e2:	811a      	strh	r2, [r3, #8]
#if LV_USE_USER_DATA
                ts[tsi].user_data = tr->user_data;
 80090e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090e6:	4613      	mov	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4413      	add	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	461a      	mov	r2, r3
 80090f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f2:	4413      	add	r3, r2
 80090f4:	6a3a      	ldr	r2, [r7, #32]
 80090f6:	6852      	ldr	r2, [r2, #4]
 80090f8:	611a      	str	r2, [r3, #16]
#endif
                ts[tsi].selector = obj_style->selector;
 80090fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8009102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009104:	4613      	mov	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	461a      	mov	r2, r3
 800910e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009110:	4413      	add	r3, r2
 8009112:	460a      	mov	r2, r1
 8009114:	605a      	str	r2, [r3, #4]
                tsi++;
 8009116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009118:	3301      	adds	r3, #1
 800911a:	647b      	str	r3, [r7, #68]	; 0x44
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 800911c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800911e:	3301      	adds	r3, #1
 8009120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009122:	6a3b      	ldr	r3, [r7, #32]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	4413      	add	r3, r2
 800912c:	881b      	ldrh	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d009      	beq.n	8009146 <lv_obj_set_state+0x21a>
 8009132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009134:	2b1f      	cmp	r3, #31
 8009136:	f67f af67 	bls.w	8009008 <lv_obj_set_state+0xdc>
 800913a:	e004      	b.n	8009146 <lv_obj_set_state+0x21a>
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 800913c:	bf00      	nop
 800913e:	e002      	b.n	8009146 <lv_obj_set_state+0x21a>
        if(obj_style->is_trans) continue;
 8009140:	bf00      	nop
 8009142:	e000      	b.n	8009146 <lv_obj_set_state+0x21a>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 8009144:	bf00      	nop
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8009146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009148:	3301      	adds	r3, #1
 800914a:	643b      	str	r3, [r7, #64]	; 0x40
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009150:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8009154:	b2db      	uxtb	r3, r3
 8009156:	461a      	mov	r2, r3
 8009158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800915a:	4293      	cmp	r3, r2
 800915c:	d203      	bcs.n	8009166 <lv_obj_set_state+0x23a>
 800915e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009160:	2b1f      	cmp	r3, #31
 8009162:	f67f af12 	bls.w	8008f8a <lv_obj_set_state+0x5e>
            }
        }
    }

    for(i = 0; i < tsi; i++) {
 8009166:	2300      	movs	r3, #0
 8009168:	643b      	str	r3, [r7, #64]	; 0x40
 800916a:	e01f      	b.n	80091ac <lv_obj_set_state+0x280>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 800916c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800916e:	4613      	mov	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	461a      	mov	r2, r3
 8009178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917a:	4413      	add	r3, r2
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	4618      	mov	r0, r3
 8009180:	f006 f8e4 	bl	800f34c <lv_obj_style_get_selector_part>
 8009184:	6138      	str	r0, [r7, #16]
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8009186:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	461a      	mov	r2, r3
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	4413      	add	r3, r2
 8009196:	8879      	ldrh	r1, [r7, #2]
 8009198:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	460b      	mov	r3, r1
 800919e:	6939      	ldr	r1, [r7, #16]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f005 fd8b 	bl	800ecbc <_lv_obj_style_create_transition>
    for(i = 0; i < tsi; i++) {
 80091a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a8:	3301      	adds	r3, #1
 80091aa:	643b      	str	r3, [r7, #64]	; 0x40
 80091ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d3db      	bcc.n	800916c <lv_obj_set_state+0x240>
    }

    lv_mem_buf_release(ts);
 80091b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091b6:	f01a ffd3 	bl	8024160 <lv_mem_buf_release>

    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 80091ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d103      	bne.n	80091ca <lv_obj_set_state+0x29e>
        lv_obj_invalidate(obj);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f002 faff 	bl	800b7c6 <lv_obj_invalidate>
 80091c8:	e019      	b.n	80091fe <lv_obj_set_state+0x2d2>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 80091ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	d107      	bne.n	80091e2 <lv_obj_set_state+0x2b6>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 80091d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091d6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f005 fb62 	bl	800e8a4 <lv_obj_refresh_style>
 80091e0:	e00d      	b.n	80091fe <lv_obj_set_state+0x2d2>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 80091e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d109      	bne.n	80091fe <lv_obj_set_state+0x2d2>
        lv_obj_invalidate(obj);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f002 faeb 	bl	800b7c6 <lv_obj_invalidate>
        lv_obj_refresh_ext_draw_size(obj);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 ff93 	bl	800a11c <lv_obj_refresh_ext_draw_size>
 80091f6:	e002      	b.n	80091fe <lv_obj_set_state+0x2d2>
    if(obj->state == new_state) return;
 80091f8:	bf00      	nop
 80091fa:	e000      	b.n	80091fe <lv_obj_set_state+0x2d2>
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 80091fc:	bf00      	nop
    }
}
 80091fe:	3748      	adds	r7, #72	; 0x48
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <lv_obj_class_create_obj>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_obj_class_create_obj(const lv_obj_class_t * class_p, lv_obj_t * parent)
{
 8009204:	b590      	push	{r4, r7, lr}
 8009206:	b087      	sub	sp, #28
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
    LV_TRACE_OBJ_CREATE("Creating object with %p class on %p parent", (void *)class_p, (void *)parent);
    uint32_t s = get_instance_size(class_p);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f990 	bl	8009534 <get_instance_size>
 8009214:	6178      	str	r0, [r7, #20]
    lv_obj_t * obj = lv_mem_alloc(s);
 8009216:	6978      	ldr	r0, [r7, #20]
 8009218:	f01a fe6c 	bl	8023ef4 <lv_mem_alloc>
 800921c:	6138      	str	r0, [r7, #16]
    if(obj == NULL) return NULL;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <lv_obj_class_create_obj+0x24>
 8009224:	2300      	movs	r3, #0
 8009226:	e09e      	b.n	8009366 <lv_obj_class_create_obj+0x162>
    lv_memset_00(obj, s);
 8009228:	6979      	ldr	r1, [r7, #20]
 800922a:	6938      	ldr	r0, [r7, #16]
 800922c:	f01b fa96 	bl	802475c <lv_memset_00>
    obj->class_p = class_p;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	601a      	str	r2, [r3, #0]
    obj->parent = parent;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	605a      	str	r2, [r3, #4]

    /*Create a screen*/
    if(parent == NULL) {
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d153      	bne.n	80092ea <lv_obj_class_create_obj+0xe6>
        LV_TRACE_OBJ_CREATE("creating a screen");
        lv_disp_t * disp = lv_disp_get_default();
 8009242:	f018 fe05 	bl	8021e50 <lv_disp_get_default>
 8009246:	60f8      	str	r0, [r7, #12]
        if(!disp) {
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d104      	bne.n	8009258 <lv_obj_class_create_obj+0x54>
            LV_LOG_WARN("No display created yet. No place to assign the new screen");
            lv_mem_free(obj);
 800924e:	6938      	ldr	r0, [r7, #16]
 8009250:	f01a fe80 	bl	8023f54 <lv_mem_free>
            return NULL;
 8009254:	2300      	movs	r3, #0
 8009256:	e086      	b.n	8009366 <lv_obj_class_create_obj+0x162>
        }

        if(disp->screens == NULL) {
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10d      	bne.n	800927c <lv_obj_class_create_obj+0x78>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8009260:	2004      	movs	r0, #4
 8009262:	f01a fe47 	bl	8023ef4 <lv_mem_alloc>
 8009266:	4602      	mov	r2, r0
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	60da      	str	r2, [r3, #12]
            disp->screens[0] = obj;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	601a      	str	r2, [r3, #0]
            disp->screen_cnt = 1;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2201      	movs	r2, #1
 8009278:	625a      	str	r2, [r3, #36]	; 0x24
 800927a:	e01b      	b.n	80092b4 <lv_obj_class_create_obj+0xb0>
        }
        else {
            disp->screen_cnt++;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	625a      	str	r2, [r3, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4619      	mov	r1, r3
 8009292:	4610      	mov	r0, r2
 8009294:	f01a fe8c 	bl	8023fb0 <lv_mem_realloc>
 8009298:	4602      	mov	r2, r0
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	60da      	str	r2, [r3, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80092a6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80092aa:	440b      	add	r3, r1
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	601a      	str	r2, [r3, #0]
        }

        /*Set coordinates to full screen size*/
        obj->coords.x1 = 0;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	2200      	movs	r2, #0
 80092b8:	829a      	strh	r2, [r3, #20]
        obj->coords.y1 = 0;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	2200      	movs	r2, #0
 80092be:	82da      	strh	r2, [r3, #22]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 80092c0:	2000      	movs	r0, #0
 80092c2:	f018 fdd1 	bl	8021e68 <lv_disp_get_hor_res>
 80092c6:	4603      	mov	r3, r0
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	b21a      	sxth	r2, r3
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	831a      	strh	r2, [r3, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 80092d4:	2000      	movs	r0, #0
 80092d6:	f018 fded 	bl	8021eb4 <lv_disp_get_ver_res>
 80092da:	4603      	mov	r3, r0
 80092dc:	b29b      	uxth	r3, r3
 80092de:	3b01      	subs	r3, #1
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	b21a      	sxth	r2, r3
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	835a      	strh	r2, [r3, #26]
 80092e8:	e03c      	b.n	8009364 <lv_obj_class_create_obj+0x160>
    }
    /*Create a normal object*/
    else {
        LV_TRACE_OBJ_CREATE("creating normal object");
        LV_ASSERT_OBJ(parent, MY_CLASS);
        if(parent->spec_attr == NULL) {
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d102      	bne.n	80092f8 <lv_obj_class_create_obj+0xf4>
            lv_obj_allocate_spec_attr(parent);
 80092f2:	6838      	ldr	r0, [r7, #0]
 80092f4:	f7fe feb4 	bl	8008060 <lv_obj_allocate_spec_attr>
        }

        if(parent->spec_attr->children == NULL) {
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d110      	bne.n	8009324 <lv_obj_class_create_obj+0x120>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	689c      	ldr	r4, [r3, #8]
 8009306:	2004      	movs	r0, #4
 8009308:	f01a fdf4 	bl	8023ef4 <lv_mem_alloc>
 800930c:	4603      	mov	r3, r0
 800930e:	6023      	str	r3, [r4, #0]
            parent->spec_attr->children[0] = obj;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	601a      	str	r2, [r3, #0]
            parent->spec_attr->child_cnt = 1;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	2201      	movs	r2, #1
 8009320:	605a      	str	r2, [r3, #4]
 8009322:	e01f      	b.n	8009364 <lv_obj_class_create_obj+0x160>
        }
        else {
            parent->spec_attr->child_cnt++;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	3201      	adds	r2, #1
 800932c:	605a      	str	r2, [r3, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	681a      	ldr	r2, [r3, #0]
                                                         sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	0099      	lsls	r1, r3, #2
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	689c      	ldr	r4, [r3, #8]
 8009340:	4610      	mov	r0, r2
 8009342:	f01a fe35 	bl	8023fb0 <lv_mem_realloc>
 8009346:	4603      	mov	r3, r0
 8009348:	6023      	str	r3, [r4, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	6859      	ldr	r1, [r3, #4]
 8009356:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800935a:	440b      	add	r3, r1
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	601a      	str	r2, [r3, #0]
        }
    }

    return obj;
 8009364:	693b      	ldr	r3, [r7, #16]
}
 8009366:	4618      	mov	r0, r3
 8009368:	371c      	adds	r7, #28
 800936a:	46bd      	mov	sp, r7
 800936c:	bd90      	pop	{r4, r7, pc}

0800936e <lv_obj_class_init_obj>:

void lv_obj_class_init_obj(lv_obj_t * obj)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
    lv_obj_mark_layout_as_dirty(obj);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f001 fbd8 	bl	800ab2c <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 800937c:	2000      	movs	r0, #0
 800937e:	f005 fb5b 	bl	800ea38 <lv_obj_enable_style_refresh>

    lv_theme_apply(obj);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f008 fed0 	bl	8012128 <lv_theme_apply>
    lv_obj_construct(obj);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f8ab 	bl	80094e4 <lv_obj_construct>

    lv_obj_enable_style_refresh(true);
 800938e:	2001      	movs	r0, #1
 8009390:	f005 fb52 	bl	800ea38 <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8009394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009398:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f005 fa81 	bl	800e8a4 <lv_obj_refresh_style>

    lv_obj_refresh_self_size(obj);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f001 fd41 	bl	800ae2a <lv_obj_refresh_self_size>

    lv_group_t * def_group = lv_group_get_default();
 80093a8:	f7fd ff2a 	bl	8007200 <lv_group_get_default>
 80093ac:	60f8      	str	r0, [r7, #12]
    if(def_group && lv_obj_is_group_def(obj)) {
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d009      	beq.n	80093c8 <lv_obj_class_init_obj+0x5a>
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f86b 	bl	8009490 <lv_obj_is_group_def>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d003      	beq.n	80093c8 <lv_obj_class_init_obj+0x5a>
        lv_group_add_obj(def_group, obj);
 80093c0:	6879      	ldr	r1, [r7, #4]
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f7fd ff28 	bl	8007218 <lv_group_add_obj>
    }

    lv_obj_t * parent = lv_obj_get_parent(obj);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f006 fe65 	bl	8010098 <lv_obj_get_parent>
 80093ce:	60b8      	str	r0, [r7, #8]
    if(parent) {
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00c      	beq.n	80093f0 <lv_obj_class_init_obj+0x82>
        /*Call the ancestor's event handler to the parent to notify it about the new child.
         *Also triggers layout update*/
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	2122      	movs	r1, #34	; 0x22
 80093da:	68b8      	ldr	r0, [r7, #8]
 80093dc:	f7fd fc1e 	bl	8006c1c <lv_event_send>
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	2123      	movs	r1, #35	; 0x23
 80093e4:	68b8      	ldr	r0, [r7, #8]
 80093e6:	f7fd fc19 	bl	8006c1c <lv_event_send>

        /*Invalidate the area if not screen created*/
        lv_obj_invalidate(obj);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f002 f9eb 	bl	800b7c6 <lv_obj_invalidate>
    }
}
 80093f0:	bf00      	nop
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <_lv_obj_destruct>:

void _lv_obj_destruct(lv_obj_t * obj)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d007      	beq.n	800941a <_lv_obj_destruct+0x22>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	6812      	ldr	r2, [r2, #0]
 8009414:	6879      	ldr	r1, [r7, #4]
 8009416:	4610      	mov	r0, r2
 8009418:	4798      	blx	r3

    if(obj->class_p->base_class) {
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d007      	beq.n	8009434 <_lv_obj_destruct+0x3c>
        /*Don't let the descendant methods run during destructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	601a      	str	r2, [r3, #0]

        /*Call the base class's destructor too*/
        _lv_obj_destruct(obj);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7ff ffe2 	bl	80093f8 <_lv_obj_destruct>
    }
}
 8009434:	bf00      	nop
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <lv_obj_is_editable>:

bool lv_obj_is_editable(lv_obj_t * obj)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * class_p = obj->class_p;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	60fb      	str	r3, [r7, #12]

    /*Find a base in which editable is set*/
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 800944a:	e002      	b.n	8009452 <lv_obj_is_editable+0x16>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	60fb      	str	r3, [r7, #12]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d006      	beq.n	8009466 <lv_obj_is_editable+0x2a>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	7e1b      	ldrb	r3, [r3, #24]
 800945c:	f003 0303 	and.w	r3, r3, #3
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d0f2      	beq.n	800944c <lv_obj_is_editable+0x10>

    if(class_p == NULL) return false;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d101      	bne.n	8009470 <lv_obj_is_editable+0x34>
 800946c:	2300      	movs	r3, #0
 800946e:	e009      	b.n	8009484 <lv_obj_is_editable+0x48>

    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	7e1b      	ldrb	r3, [r3, #24]
 8009474:	f003 0303 	and.w	r3, r3, #3
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b01      	cmp	r3, #1
 800947c:	bf0c      	ite	eq
 800947e:	2301      	moveq	r3, #1
 8009480:	2300      	movne	r3, #0
 8009482:	b2db      	uxtb	r3, r3
}
 8009484:	4618      	mov	r0, r3
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <lv_obj_is_group_def>:

bool lv_obj_is_group_def(lv_obj_t * obj)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * class_p = obj->class_p;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	60fb      	str	r3, [r7, #12]

    /*Find a base in which group_def is set*/
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 800949e:	e002      	b.n	80094a6 <lv_obj_is_group_def+0x16>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	60fb      	str	r3, [r7, #12]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d006      	beq.n	80094ba <lv_obj_is_group_def+0x2a>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	7e1b      	ldrb	r3, [r3, #24]
 80094b0:	f003 030c 	and.w	r3, r3, #12
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0f2      	beq.n	80094a0 <lv_obj_is_group_def+0x10>

    if(class_p == NULL) return false;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <lv_obj_is_group_def+0x34>
 80094c0:	2300      	movs	r3, #0
 80094c2:	e009      	b.n	80094d8 <lv_obj_is_group_def+0x48>

    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	7e1b      	ldrb	r3, [r3, #24]
 80094c8:	f003 030c 	and.w	r3, r3, #12
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b04      	cmp	r3, #4
 80094d0:	bf0c      	ite	eq
 80094d2:	2301      	moveq	r3, #1
 80094d4:	2300      	movne	r3, #0
 80094d6:	b2db      	uxtb	r3, r3
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
    const lv_obj_class_t * original_class_p = obj->class_p;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	60fb      	str	r3, [r7, #12]

    if(obj->class_p->base_class) {
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d007      	beq.n	800950c <lv_obj_construct+0x28>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	601a      	str	r2, [r3, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f7ff ffec 	bl	80094e4 <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	601a      	str	r2, [r3, #0]

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d007      	beq.n	800952c <lv_obj_construct+0x48>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	6812      	ldr	r2, [r2, #0]
 8009526:	6879      	ldr	r1, [r7, #4]
 8009528:	4610      	mov	r0, r2
 800952a:	4798      	blx	r3
}
 800952c:	bf00      	nop
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <get_instance_size>:

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	60fb      	str	r3, [r7, #12]
    while(base && base->instance_size == 0) base = base->base_class;
 8009540:	e002      	b.n	8009548 <get_instance_size+0x14>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d005      	beq.n	800955a <get_instance_size+0x26>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	699a      	ldr	r2, [r3, #24]
 8009552:	4b0a      	ldr	r3, [pc, #40]	; (800957c <get_instance_size+0x48>)
 8009554:	4013      	ands	r3, r2
 8009556:	2b00      	cmp	r3, #0
 8009558:	d0f3      	beq.n	8009542 <get_instance_size+0xe>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <get_instance_size+0x30>
 8009560:	2300      	movs	r3, #0
 8009562:	e004      	b.n	800956e <get_instance_size+0x3a>

    return base->instance_size;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	f3c3 130f 	ubfx	r3, r3, #4, #16
 800956c:	b29b      	uxth	r3, r3
}
 800956e:	4618      	mov	r0, r3
 8009570:	3714      	adds	r7, #20
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	000ffff0 	.word	0x000ffff0

08009580 <lv_obj_get_style_transform_width>:
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800958a:	2268      	movs	r2, #104	; 0x68
 800958c:	6839      	ldr	r1, [r7, #0]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f005 fa62 	bl	800ea58 <lv_obj_get_style_prop>
 8009594:	4603      	mov	r3, r0
 8009596:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	b21b      	sxth	r3, r3
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <lv_obj_get_style_transform_height>:
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80095ae:	2269      	movs	r2, #105	; 0x69
 80095b0:	6839      	ldr	r1, [r7, #0]
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f005 fa50 	bl	800ea58 <lv_obj_get_style_prop>
 80095b8:	4603      	mov	r3, r0
 80095ba:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	b21b      	sxth	r3, r3
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <lv_obj_get_style_bg_color_filtered>:
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 80095d2:	2220      	movs	r2, #32
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f005 fa3e 	bl	800ea58 <lv_obj_get_style_prop>
 80095dc:	4603      	mov	r3, r0
 80095de:	461a      	mov	r2, r3
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f005 fc84 	bl	800eef0 <_lv_obj_style_apply_color_filter>
 80095e8:	4603      	mov	r3, r0
 80095ea:	60fb      	str	r3, [r7, #12]
    return v.color;
 80095ec:	7b3b      	ldrb	r3, [r7, #12]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <lv_obj_get_style_bg_opa>:
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8009600:	2221      	movs	r2, #33	; 0x21
 8009602:	6839      	ldr	r1, [r7, #0]
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f005 fa27 	bl	800ea58 <lv_obj_get_style_prop>
 800960a:	4603      	mov	r3, r0
 800960c:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	b2db      	uxtb	r3, r3
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <lv_obj_get_style_bg_grad_color_filtered>:
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR));
 8009624:	2222      	movs	r2, #34	; 0x22
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f005 fa15 	bl	800ea58 <lv_obj_get_style_prop>
 800962e:	4603      	mov	r3, r0
 8009630:	461a      	mov	r2, r3
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f005 fc5b 	bl	800eef0 <_lv_obj_style_apply_color_filter>
 800963a:	4603      	mov	r3, r0
 800963c:	60fb      	str	r3, [r7, #12]
    return v.color;
 800963e:	7b3b      	ldrb	r3, [r7, #12]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <lv_obj_get_style_bg_grad_dir>:
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 8009652:	2223      	movs	r2, #35	; 0x23
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f005 f9fe 	bl	800ea58 <lv_obj_get_style_prop>
 800965c:	4603      	mov	r3, r0
 800965e:	60fb      	str	r3, [r7, #12]
    return (lv_grad_dir_t)v.num;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	b2db      	uxtb	r3, r3
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <lv_obj_get_style_bg_main_stop>:
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 8009676:	2224      	movs	r2, #36	; 0x24
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f005 f9ec 	bl	800ea58 <lv_obj_get_style_prop>
 8009680:	4603      	mov	r3, r0
 8009682:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	b21b      	sxth	r3, r3
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <lv_obj_get_style_bg_grad_stop>:
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 800969a:	2225      	movs	r2, #37	; 0x25
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f005 f9da 	bl	800ea58 <lv_obj_get_style_prop>
 80096a4:	4603      	mov	r3, r0
 80096a6:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	b21b      	sxth	r3, r3
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <lv_obj_get_style_bg_grad>:
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD);
 80096be:	2226      	movs	r2, #38	; 0x26
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f005 f9c8 	bl	800ea58 <lv_obj_get_style_prop>
 80096c8:	4603      	mov	r3, r0
 80096ca:	60fb      	str	r3, [r7, #12]
    return (const lv_grad_dsc_t *)v.ptr;
 80096cc:	68fb      	ldr	r3, [r7, #12]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <lv_obj_get_style_bg_dither_mode>:
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b084      	sub	sp, #16
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_DITHER_MODE);
 80096e0:	2227      	movs	r2, #39	; 0x27
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f005 f9b7 	bl	800ea58 <lv_obj_get_style_prop>
 80096ea:	4603      	mov	r3, r0
 80096ec:	60fb      	str	r3, [r7, #12]
    return (lv_dither_mode_t)v.num;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	b2db      	uxtb	r3, r3
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <lv_obj_get_style_bg_img_src>:
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b084      	sub	sp, #16
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 8009704:	2228      	movs	r2, #40	; 0x28
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f005 f9a5 	bl	800ea58 <lv_obj_get_style_prop>
 800970e:	4603      	mov	r3, r0
 8009710:	60fb      	str	r3, [r7, #12]
    return (const void *)v.ptr;
 8009712:	68fb      	ldr	r3, [r7, #12]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <lv_obj_get_style_bg_img_opa>:
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 8009726:	2229      	movs	r2, #41	; 0x29
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f005 f994 	bl	800ea58 <lv_obj_get_style_prop>
 8009730:	4603      	mov	r3, r0
 8009732:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	b2db      	uxtb	r3, r3
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <lv_obj_get_style_bg_img_recolor_filtered>:
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR));
 800974a:	222a      	movs	r2, #42	; 0x2a
 800974c:	6839      	ldr	r1, [r7, #0]
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f005 f982 	bl	800ea58 <lv_obj_get_style_prop>
 8009754:	4603      	mov	r3, r0
 8009756:	461a      	mov	r2, r3
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f005 fbc8 	bl	800eef0 <_lv_obj_style_apply_color_filter>
 8009760:	4603      	mov	r3, r0
 8009762:	60fb      	str	r3, [r7, #12]
    return v.color;
 8009764:	7b3b      	ldrb	r3, [r7, #12]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <lv_obj_get_style_bg_img_recolor_opa>:
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b084      	sub	sp, #16
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 8009778:	222b      	movs	r2, #43	; 0x2b
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f005 f96b 	bl	800ea58 <lv_obj_get_style_prop>
 8009782:	4603      	mov	r3, r0
 8009784:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	b2db      	uxtb	r3, r3
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <lv_obj_get_style_bg_img_tiled>:
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b084      	sub	sp, #16
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 800979c:	222c      	movs	r2, #44	; 0x2c
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f005 f959 	bl	800ea58 <lv_obj_get_style_prop>
 80097a6:	4603      	mov	r3, r0
 80097a8:	60fb      	str	r3, [r7, #12]
    return (bool)v.num;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	bf14      	ite	ne
 80097b0:	2301      	movne	r3, #1
 80097b2:	2300      	moveq	r3, #0
 80097b4:	b2db      	uxtb	r3, r3
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <lv_obj_get_style_border_color_filtered>:
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
 80097c8:	2230      	movs	r2, #48	; 0x30
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f005 f943 	bl	800ea58 <lv_obj_get_style_prop>
 80097d2:	4603      	mov	r3, r0
 80097d4:	461a      	mov	r2, r3
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f005 fb89 	bl	800eef0 <_lv_obj_style_apply_color_filter>
 80097de:	4603      	mov	r3, r0
 80097e0:	60fb      	str	r3, [r7, #12]
    return v.color;
 80097e2:	7b3b      	ldrb	r3, [r7, #12]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <lv_obj_get_style_border_opa>:
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 80097f6:	2231      	movs	r2, #49	; 0x31
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f005 f92c 	bl	800ea58 <lv_obj_get_style_prop>
 8009800:	4603      	mov	r3, r0
 8009802:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	b2db      	uxtb	r3, r3
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <lv_obj_get_style_border_width>:
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800981a:	2232      	movs	r2, #50	; 0x32
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f005 f91a 	bl	800ea58 <lv_obj_get_style_prop>
 8009824:	4603      	mov	r3, r0
 8009826:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	b21b      	sxth	r3, r3
}
 800982c:	4618      	mov	r0, r3
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <lv_obj_get_style_border_side>:
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 800983e:	2233      	movs	r2, #51	; 0x33
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f005 f908 	bl	800ea58 <lv_obj_get_style_prop>
 8009848:	4603      	mov	r3, r0
 800984a:	60fb      	str	r3, [r7, #12]
    return (lv_border_side_t)v.num;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	b2db      	uxtb	r3, r3
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <lv_obj_get_style_outline_width>:
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8009862:	2235      	movs	r2, #53	; 0x35
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f005 f8f6 	bl	800ea58 <lv_obj_get_style_prop>
 800986c:	4603      	mov	r3, r0
 800986e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	b21b      	sxth	r3, r3
}
 8009874:	4618      	mov	r0, r3
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <lv_obj_get_style_outline_color_filtered>:
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR));
 8009886:	2236      	movs	r2, #54	; 0x36
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f005 f8e4 	bl	800ea58 <lv_obj_get_style_prop>
 8009890:	4603      	mov	r3, r0
 8009892:	461a      	mov	r2, r3
 8009894:	6839      	ldr	r1, [r7, #0]
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f005 fb2a 	bl	800eef0 <_lv_obj_style_apply_color_filter>
 800989c:	4603      	mov	r3, r0
 800989e:	60fb      	str	r3, [r7, #12]
    return v.color;
 80098a0:	7b3b      	ldrb	r3, [r7, #12]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <lv_obj_get_style_outline_opa>:
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b084      	sub	sp, #16
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 80098b4:	2237      	movs	r2, #55	; 0x37
 80098b6:	6839      	ldr	r1, [r7, #0]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f005 f8cd 	bl	800ea58 <lv_obj_get_style_prop>
 80098be:	4603      	mov	r3, r0
 80098c0:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	b2db      	uxtb	r3, r3
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <lv_obj_get_style_outline_pad>:
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b084      	sub	sp, #16
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 80098d8:	2238      	movs	r2, #56	; 0x38
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f005 f8bb 	bl	800ea58 <lv_obj_get_style_prop>
 80098e2:	4603      	mov	r3, r0
 80098e4:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	b21b      	sxth	r3, r3
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <lv_obj_get_style_shadow_width>:
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b084      	sub	sp, #16
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 80098fc:	2240      	movs	r2, #64	; 0x40
 80098fe:	6839      	ldr	r1, [r7, #0]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f005 f8a9 	bl	800ea58 <lv_obj_get_style_prop>
 8009906:	4603      	mov	r3, r0
 8009908:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	b21b      	sxth	r3, r3
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <lv_obj_get_style_shadow_ofs_x>:
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8009920:	2241      	movs	r2, #65	; 0x41
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f005 f897 	bl	800ea58 <lv_obj_get_style_prop>
 800992a:	4603      	mov	r3, r0
 800992c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	b21b      	sxth	r3, r3
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <lv_obj_get_style_shadow_ofs_y>:
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b084      	sub	sp, #16
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8009944:	2242      	movs	r2, #66	; 0x42
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f005 f885 	bl	800ea58 <lv_obj_get_style_prop>
 800994e:	4603      	mov	r3, r0
 8009950:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	b21b      	sxth	r3, r3
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <lv_obj_get_style_shadow_spread>:
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b084      	sub	sp, #16
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8009968:	2243      	movs	r2, #67	; 0x43
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f005 f873 	bl	800ea58 <lv_obj_get_style_prop>
 8009972:	4603      	mov	r3, r0
 8009974:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	b21b      	sxth	r3, r3
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <lv_obj_get_style_shadow_color_filtered>:
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b084      	sub	sp, #16
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
 800998c:	2244      	movs	r2, #68	; 0x44
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f005 f861 	bl	800ea58 <lv_obj_get_style_prop>
 8009996:	4603      	mov	r3, r0
 8009998:	461a      	mov	r2, r3
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f005 faa7 	bl	800eef0 <_lv_obj_style_apply_color_filter>
 80099a2:	4603      	mov	r3, r0
 80099a4:	60fb      	str	r3, [r7, #12]
    return v.color;
 80099a6:	7b3b      	ldrb	r3, [r7, #12]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <lv_obj_get_style_shadow_opa>:
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 80099ba:	2245      	movs	r2, #69	; 0x45
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f005 f84a 	bl	800ea58 <lv_obj_get_style_prop>
 80099c4:	4603      	mov	r3, r0
 80099c6:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	b2db      	uxtb	r3, r3
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <lv_obj_get_style_text_color_filtered>:
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 80099de:	2255      	movs	r2, #85	; 0x55
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f005 f838 	bl	800ea58 <lv_obj_get_style_prop>
 80099e8:	4603      	mov	r3, r0
 80099ea:	461a      	mov	r2, r3
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f005 fa7e 	bl	800eef0 <_lv_obj_style_apply_color_filter>
 80099f4:	4603      	mov	r3, r0
 80099f6:	60fb      	str	r3, [r7, #12]
    return v.color;
 80099f8:	7b3b      	ldrb	r3, [r7, #12]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <lv_obj_get_style_text_opa>:
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 8009a0c:	2256      	movs	r2, #86	; 0x56
 8009a0e:	6839      	ldr	r1, [r7, #0]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f005 f821 	bl	800ea58 <lv_obj_get_style_prop>
 8009a16:	4603      	mov	r3, r0
 8009a18:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	b2db      	uxtb	r3, r3
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <lv_obj_get_style_text_font>:
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b084      	sub	sp, #16
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8009a30:	2257      	movs	r2, #87	; 0x57
 8009a32:	6839      	ldr	r1, [r7, #0]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f005 f80f 	bl	800ea58 <lv_obj_get_style_prop>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	60fb      	str	r3, [r7, #12]
    return (const lv_font_t *)v.ptr;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <lv_obj_get_style_text_letter_space>:
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8009a52:	2258      	movs	r2, #88	; 0x58
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f004 fffe 	bl	800ea58 <lv_obj_get_style_prop>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	b21b      	sxth	r3, r3
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <lv_obj_get_style_text_line_space>:
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8009a76:	2259      	movs	r2, #89	; 0x59
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f004 ffec 	bl	800ea58 <lv_obj_get_style_prop>
 8009a80:	4603      	mov	r3, r0
 8009a82:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	b21b      	sxth	r3, r3
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <lv_obj_get_style_text_decor>:
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 8009a9a:	225a      	movs	r2, #90	; 0x5a
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f004 ffda 	bl	800ea58 <lv_obj_get_style_prop>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	60fb      	str	r3, [r7, #12]
    return (lv_text_decor_t)v.num;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	b2db      	uxtb	r3, r3
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <lv_obj_get_style_text_align>:
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 8009abe:	225b      	movs	r2, #91	; 0x5b
 8009ac0:	6839      	ldr	r1, [r7, #0]
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f004 ffc8 	bl	800ea58 <lv_obj_get_style_prop>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	60fb      	str	r3, [r7, #12]
    return (lv_text_align_t)v.num;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	b2db      	uxtb	r3, r3
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <lv_obj_get_style_radius>:
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8009ae2:	220b      	movs	r2, #11
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f004 ffb6 	bl	800ea58 <lv_obj_get_style_prop>
 8009aec:	4603      	mov	r3, r0
 8009aee:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	b21b      	sxth	r3, r3
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <lv_obj_get_style_opa>:
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8009b06:	2260      	movs	r2, #96	; 0x60
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f004 ffa4 	bl	800ea58 <lv_obj_get_style_prop>
 8009b10:	4603      	mov	r3, r0
 8009b12:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	b2db      	uxtb	r3, r3
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <lv_obj_get_style_blend_mode>:
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8009b2a:	2267      	movs	r2, #103	; 0x67
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f004 ff92 	bl	800ea58 <lv_obj_get_style_prop>
 8009b34:	4603      	mov	r3, r0
 8009b36:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	b2db      	uxtb	r3, r3
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 8009b44:	b590      	push	{r4, r7, lr}
 8009b46:	b087      	sub	sp, #28
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
    lv_opa_t opa = LV_OPA_COVER;
 8009b50:	23ff      	movs	r3, #255	; 0xff
 8009b52:	75fb      	strb	r3, [r7, #23]
    if(part != LV_PART_MAIN) {
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d01a      	beq.n	8009b90 <lv_obj_init_draw_rect_dsc+0x4c>
        opa = lv_obj_get_style_opa(obj, part);
 8009b5a:	68b9      	ldr	r1, [r7, #8]
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f7ff ffcd 	bl	8009afc <lv_obj_get_style_opa>
 8009b62:	4603      	mov	r3, r0
 8009b64:	75fb      	strb	r3, [r7, #23]
        if(opa <= LV_OPA_MIN) {
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d811      	bhi.n	8009b90 <lv_obj_init_draw_rect_dsc+0x4c>
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	70da      	strb	r2, [r3, #3]
            draw_dsc->bg_img_opa = LV_OPA_TRANSP;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	755a      	strb	r2, [r3, #21]
            draw_dsc->border_opa = LV_OPA_TRANSP;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	771a      	strb	r2, [r3, #28]
            draw_dsc->outline_opa = LV_OPA_TRANSP;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            draw_dsc->shadow_opa = LV_OPA_TRANSP;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            return;
 8009b8e:	e19f      	b.n	8009ed0 <lv_obj_init_draw_rect_dsc+0x38c>
        }
    }

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d007      	beq.n	8009ba6 <lv_obj_init_draw_rect_dsc+0x62>
 8009b96:	68b9      	ldr	r1, [r7, #8]
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f7ff ffc1 	bl	8009b20 <lv_obj_get_style_blend_mode>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	709a      	strb	r2, [r3, #2]

    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 8009ba6:	68b9      	ldr	r1, [r7, #8]
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f7ff ff95 	bl	8009ad8 <lv_obj_get_style_radius>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	801a      	strh	r2, [r3, #0]

    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	78db      	ldrb	r3, [r3, #3]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d065      	beq.n	8009c8a <lv_obj_init_draw_rect_dsc+0x146>
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 8009bbe:	68b9      	ldr	r1, [r7, #8]
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f7ff fd18 	bl	80095f6 <lv_obj_get_style_bg_opa>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	461a      	mov	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	70da      	strb	r2, [r3, #3]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	78db      	ldrb	r3, [r3, #3]
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d959      	bls.n	8009c8a <lv_obj_init_draw_rect_dsc+0x146>
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 8009bd6:	687c      	ldr	r4, [r7, #4]
 8009bd8:	68b9      	ldr	r1, [r7, #8]
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7ff fcf4 	bl	80095c8 <lv_obj_get_style_bg_color_filtered>
 8009be0:	7120      	strb	r0, [r4, #4]
            const lv_grad_dsc_t * grad = lv_obj_get_style_bg_grad(obj, part);
 8009be2:	68b9      	ldr	r1, [r7, #8]
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f7ff fd65 	bl	80096b4 <lv_obj_get_style_bg_grad>
 8009bea:	6138      	str	r0, [r7, #16]
            if(grad && grad->dir != LV_GRAD_DIR_NONE) {
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00e      	beq.n	8009c10 <lv_obj_init_draw_rect_dsc+0xcc>
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	795b      	ldrb	r3, [r3, #5]
 8009bf6:	f003 0307 	and.w	r3, r3, #7
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d007      	beq.n	8009c10 <lv_obj_init_draw_rect_dsc+0xcc>
                lv_memcpy(&draw_dsc->bg_grad, grad, sizeof(*grad));
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	3305      	adds	r3, #5
 8009c04:	2206      	movs	r2, #6
 8009c06:	6939      	ldr	r1, [r7, #16]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f01a fb01 	bl	8024210 <lv_memcpy>
 8009c0e:	e03c      	b.n	8009c8a <lv_obj_init_draw_rect_dsc+0x146>
            }
            else {
                draw_dsc->bg_grad.dir = lv_obj_get_style_bg_grad_dir(obj, part);
 8009c10:	68b9      	ldr	r1, [r7, #8]
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f7ff fd18 	bl	8009648 <lv_obj_get_style_bg_grad_dir>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	f003 0307 	and.w	r3, r3, #7
 8009c1e:	b2d9      	uxtb	r1, r3
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	7a93      	ldrb	r3, [r2, #10]
 8009c24:	f361 0302 	bfi	r3, r1, #0, #3
 8009c28:	7293      	strb	r3, [r2, #10]
                if(draw_dsc->bg_grad.dir != LV_GRAD_DIR_NONE) {
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	7a9b      	ldrb	r3, [r3, #10]
 8009c2e:	f003 0307 	and.w	r3, r3, #7
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d01b      	beq.n	8009c70 <lv_obj_init_draw_rect_dsc+0x12c>
                    draw_dsc->bg_grad.stops[0].color = lv_obj_get_style_bg_color_filtered(obj, part);
 8009c38:	687c      	ldr	r4, [r7, #4]
 8009c3a:	68b9      	ldr	r1, [r7, #8]
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f7ff fcc3 	bl	80095c8 <lv_obj_get_style_bg_color_filtered>
 8009c42:	7160      	strb	r0, [r4, #5]
                    draw_dsc->bg_grad.stops[1].color = lv_obj_get_style_bg_grad_color_filtered(obj, part);
 8009c44:	687c      	ldr	r4, [r7, #4]
 8009c46:	68b9      	ldr	r1, [r7, #8]
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f7ff fce6 	bl	800961a <lv_obj_get_style_bg_grad_color_filtered>
 8009c4e:	71e0      	strb	r0, [r4, #7]
                    draw_dsc->bg_grad.stops[0].frac = lv_obj_get_style_bg_main_stop(obj, part);
 8009c50:	68b9      	ldr	r1, [r7, #8]
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f7ff fd0a 	bl	800966c <lv_obj_get_style_bg_main_stop>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	719a      	strb	r2, [r3, #6]
                    draw_dsc->bg_grad.stops[1].frac = lv_obj_get_style_bg_grad_stop(obj, part);
 8009c60:	68b9      	ldr	r1, [r7, #8]
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f7ff fd14 	bl	8009690 <lv_obj_get_style_bg_grad_stop>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	b2da      	uxtb	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	721a      	strb	r2, [r3, #8]
                }
                draw_dsc->bg_grad.dither = lv_obj_get_style_bg_dither_mode(obj, part);
 8009c70:	68b9      	ldr	r1, [r7, #8]
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	f7ff fd2f 	bl	80096d6 <lv_obj_get_style_bg_dither_mode>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	f003 0307 	and.w	r3, r3, #7
 8009c7e:	b2d9      	uxtb	r1, r3
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	7a93      	ldrb	r3, [r2, #10]
 8009c84:	f361 03c5 	bfi	r3, r1, #3, #3
 8009c88:	7293      	strb	r3, [r2, #10]
            }
        }
    }

    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f7ff fdbf 	bl	8009810 <lv_obj_get_style_border_width>
 8009c92:	4603      	mov	r3, r0
 8009c94:	461a      	mov	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	835a      	strh	r2, [r3, #26]
    if(draw_dsc->border_width) {
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d022      	beq.n	8009cea <lv_obj_init_draw_rect_dsc+0x1a6>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	7f1b      	ldrb	r3, [r3, #28]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d01e      	beq.n	8009cea <lv_obj_init_draw_rect_dsc+0x1a6>
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 8009cac:	68b9      	ldr	r1, [r7, #8]
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f7ff fd9c 	bl	80097ec <lv_obj_get_style_border_opa>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	771a      	strb	r2, [r3, #28]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	7f1b      	ldrb	r3, [r3, #28]
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d912      	bls.n	8009cea <lv_obj_init_draw_rect_dsc+0x1a6>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 8009cc4:	68b9      	ldr	r1, [r7, #8]
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f7ff fdb4 	bl	8009834 <lv_obj_get_style_border_side>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	f003 031f 	and.w	r3, r3, #31
 8009cd2:	b2d9      	uxtb	r1, r3
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	7f53      	ldrb	r3, [r2, #29]
 8009cd8:	f361 0345 	bfi	r3, r1, #1, #5
 8009cdc:	7753      	strb	r3, [r2, #29]
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 8009cde:	687c      	ldr	r4, [r7, #4]
 8009ce0:	68b9      	ldr	r1, [r7, #8]
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f7ff fd6b 	bl	80097be <lv_obj_get_style_border_color_filtered>
 8009ce8:	7620      	strb	r0, [r4, #24]
            }
        }
    }

    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 8009cea:	68b9      	ldr	r1, [r7, #8]
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f7ff fdb3 	bl	8009858 <lv_obj_get_style_outline_width>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	841a      	strh	r2, [r3, #32]
    if(draw_dsc->outline_width) {
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d020      	beq.n	8009d46 <lv_obj_init_draw_rect_dsc+0x202>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d01b      	beq.n	8009d46 <lv_obj_init_draw_rect_dsc+0x202>
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8009d0e:	68b9      	ldr	r1, [r7, #8]
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f7ff fdca 	bl	80098aa <lv_obj_get_style_outline_opa>
 8009d16:	4603      	mov	r3, r0
 8009d18:	461a      	mov	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d90d      	bls.n	8009d46 <lv_obj_init_draw_rect_dsc+0x202>
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8009d2a:	68b9      	ldr	r1, [r7, #8]
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f7ff fdce 	bl	80098ce <lv_obj_get_style_outline_pad>
 8009d32:	4603      	mov	r3, r0
 8009d34:	461a      	mov	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	845a      	strh	r2, [r3, #34]	; 0x22
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
 8009d3a:	687c      	ldr	r4, [r7, #4]
 8009d3c:	68b9      	ldr	r1, [r7, #8]
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7ff fd9c 	bl	800987c <lv_obj_get_style_outline_color_filtered>
 8009d44:	77a0      	strb	r0, [r4, #30]
            }
        }
    }

    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	7d5b      	ldrb	r3, [r3, #21]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d042      	beq.n	8009dd4 <lv_obj_init_draw_rect_dsc+0x290>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 8009d4e:	68b9      	ldr	r1, [r7, #8]
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f7ff fcd2 	bl	80096fa <lv_obj_get_style_bg_img_src>
 8009d56:	4602      	mov	r2, r0
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	60da      	str	r2, [r3, #12]
        if(draw_dsc->bg_img_src) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d037      	beq.n	8009dd4 <lv_obj_init_draw_rect_dsc+0x290>
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 8009d64:	68b9      	ldr	r1, [r7, #8]
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f7ff fcd8 	bl	800971c <lv_obj_get_style_bg_img_opa>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	461a      	mov	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	755a      	strb	r2, [r3, #21]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	7d5b      	ldrb	r3, [r3, #21]
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d92b      	bls.n	8009dd4 <lv_obj_init_draw_rect_dsc+0x290>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f008 fb7c 	bl	801247e <lv_img_src_get_type>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d10d      	bne.n	8009da8 <lv_obj_init_draw_rect_dsc+0x264>
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
 8009d8c:	68b9      	ldr	r1, [r7, #8]
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f7ff fe49 	bl	8009a26 <lv_obj_get_style_text_font>
 8009d94:	4602      	mov	r2, r0
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	611a      	str	r2, [r3, #16]
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 8009d9a:	687c      	ldr	r4, [r7, #4]
 8009d9c:	68b9      	ldr	r1, [r7, #8]
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f7ff fe18 	bl	80099d4 <lv_obj_get_style_text_color_filtered>
 8009da4:	7520      	strb	r0, [r4, #20]
 8009da6:	e015      	b.n	8009dd4 <lv_obj_init_draw_rect_dsc+0x290>
                }
                else {
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
 8009da8:	687c      	ldr	r4, [r7, #4]
 8009daa:	68b9      	ldr	r1, [r7, #8]
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f7ff fcc7 	bl	8009740 <lv_obj_get_style_bg_img_recolor_filtered>
 8009db2:	7520      	strb	r0, [r4, #20]
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 8009db4:	68b9      	ldr	r1, [r7, #8]
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f7ff fcd9 	bl	800976e <lv_obj_get_style_bg_img_recolor_opa>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	759a      	strb	r2, [r3, #22]
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 8009dc4:	68b9      	ldr	r1, [r7, #8]
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f7ff fce3 	bl	8009792 <lv_obj_get_style_bg_img_tiled>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	461a      	mov	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	75da      	strb	r2, [r3, #23]
                }
            }
        }
    }

    if(draw_dsc->shadow_opa) {
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d03e      	beq.n	8009e5c <lv_obj_init_draw_rect_dsc+0x318>
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 8009dde:	68b9      	ldr	r1, [r7, #8]
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f7ff fd86 	bl	80098f2 <lv_obj_get_style_shadow_width>
 8009de6:	4603      	mov	r3, r0
 8009de8:	461a      	mov	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	84da      	strh	r2, [r3, #38]	; 0x26
        if(draw_dsc->shadow_width) {
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d031      	beq.n	8009e5c <lv_obj_init_draw_rect_dsc+0x318>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d92c      	bls.n	8009e5c <lv_obj_init_draw_rect_dsc+0x318>
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 8009e02:	68b9      	ldr	r1, [r7, #8]
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7ff fdd3 	bl	80099b0 <lv_obj_get_style_shadow_opa>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d91e      	bls.n	8009e5c <lv_obj_init_draw_rect_dsc+0x318>
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8009e1e:	68b9      	ldr	r1, [r7, #8]
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f7ff fd78 	bl	8009916 <lv_obj_get_style_shadow_ofs_x>
 8009e26:	4603      	mov	r3, r0
 8009e28:	461a      	mov	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	851a      	strh	r2, [r3, #40]	; 0x28
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8009e2e:	68b9      	ldr	r1, [r7, #8]
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f7ff fd82 	bl	800993a <lv_obj_get_style_shadow_ofs_y>
 8009e36:	4603      	mov	r3, r0
 8009e38:	461a      	mov	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 8009e3e:	68b9      	ldr	r1, [r7, #8]
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f7ff fd8c 	bl	800995e <lv_obj_get_style_shadow_spread>
 8009e46:	4603      	mov	r3, r0
 8009e48:	461a      	mov	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	859a      	strh	r2, [r3, #44]	; 0x2c
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 8009e4e:	687c      	ldr	r4, [r7, #4]
 8009e50:	68b9      	ldr	r1, [r7, #8]
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f7ff fd95 	bl	8009982 <lv_obj_get_style_shadow_color_filtered>
 8009e58:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
            }
        }
    }
#endif

    if(part != LV_PART_MAIN) {
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d036      	beq.n	8009ed0 <lv_obj_init_draw_rect_dsc+0x38c>
        if(opa < LV_OPA_MAX) {
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
 8009e64:	2bfc      	cmp	r3, #252	; 0xfc
 8009e66:	d833      	bhi.n	8009ed0 <lv_obj_init_draw_rect_dsc+0x38c>
            draw_dsc->bg_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8009e68:	7dfb      	ldrb	r3, [r7, #23]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8009e70:	fb02 f303 	mul.w	r3, r2, r3
 8009e74:	121b      	asrs	r3, r3, #8
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	70da      	strb	r2, [r3, #3]
            draw_dsc->bg_img_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8009e7c:	7dfb      	ldrb	r3, [r7, #23]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8009e84:	fb02 f303 	mul.w	r3, r2, r3
 8009e88:	121b      	asrs	r3, r3, #8
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	755a      	strb	r2, [r3, #21]
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8009e90:	7dfb      	ldrb	r3, [r7, #23]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8009e98:	fb02 f303 	mul.w	r3, r2, r3
 8009e9c:	121b      	asrs	r3, r3, #8
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	771a      	strb	r2, [r3, #28]
            draw_dsc->outline_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8009ea4:	7dfb      	ldrb	r3, [r7, #23]
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8009eac:	fb02 f303 	mul.w	r3, r2, r3
 8009eb0:	121b      	asrs	r3, r3, #8
 8009eb2:	b2da      	uxtb	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8009eba:	7dfb      	ldrb	r3, [r7, #23]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8009ec2:	fb02 f303 	mul.w	r3, r2, r3
 8009ec6:	121b      	asrs	r3, r3, #8
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        }
    }
}
 8009ed0:	371c      	adds	r7, #28
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd90      	pop	{r4, r7, pc}

08009ed6 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 8009ed6:	b590      	push	{r4, r7, lr}
 8009ed8:	b087      	sub	sp, #28
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	60b9      	str	r1, [r7, #8]
 8009ee0:	607a      	str	r2, [r7, #4]
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8009ee2:	68b9      	ldr	r1, [r7, #8]
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f7ff fd8c 	bl	8009a02 <lv_obj_get_style_text_opa>
 8009eea:	4603      	mov	r3, r0
 8009eec:	461a      	mov	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	761a      	strb	r2, [r3, #24]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	7e1b      	ldrb	r3, [r3, #24]
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	d95e      	bls.n	8009fb8 <lv_obj_init_draw_label_dsc+0xe2>

    if(part != LV_PART_MAIN) {
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d018      	beq.n	8009f32 <lv_obj_init_draw_label_dsc+0x5c>
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
 8009f00:	68b9      	ldr	r1, [r7, #8]
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f7ff fdfa 	bl	8009afc <lv_obj_get_style_opa>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	75fb      	strb	r3, [r7, #23]
        if(opa <= LV_OPA_MIN) {
 8009f0c:	7dfb      	ldrb	r3, [r7, #23]
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d803      	bhi.n	8009f1a <lv_obj_init_draw_label_dsc+0x44>
            draw_dsc->opa = LV_OPA_TRANSP;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	761a      	strb	r2, [r3, #24]
            return;
 8009f18:	e04f      	b.n	8009fba <lv_obj_init_draw_label_dsc+0xe4>
        }
        if(opa < LV_OPA_MAX) {
 8009f1a:	7dfb      	ldrb	r3, [r7, #23]
 8009f1c:	2bfc      	cmp	r3, #252	; 0xfc
 8009f1e:	d808      	bhi.n	8009f32 <lv_obj_init_draw_label_dsc+0x5c>
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 8009f20:	7dfb      	ldrb	r3, [r7, #23]
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	7e12      	ldrb	r2, [r2, #24]
 8009f26:	fb02 f303 	mul.w	r3, r2, r3
 8009f2a:	121b      	asrs	r3, r3, #8
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	761a      	strb	r2, [r3, #24]
        }
    }

    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 8009f32:	687c      	ldr	r4, [r7, #4]
 8009f34:	68b9      	ldr	r1, [r7, #8]
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f7ff fd4c 	bl	80099d4 <lv_obj_get_style_text_color_filtered>
 8009f3c:	7320      	strb	r0, [r4, #12]
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 8009f3e:	68b9      	ldr	r1, [r7, #8]
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f7ff fd81 	bl	8009a48 <lv_obj_get_style_text_letter_space>
 8009f46:	4603      	mov	r3, r0
 8009f48:	461a      	mov	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	825a      	strh	r2, [r3, #18]
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 8009f4e:	68b9      	ldr	r1, [r7, #8]
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f7ff fd8b 	bl	8009a6c <lv_obj_get_style_text_line_space>
 8009f56:	4603      	mov	r3, r0
 8009f58:	461a      	mov	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	821a      	strh	r2, [r3, #16]
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 8009f5e:	68b9      	ldr	r1, [r7, #8]
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f7ff fd95 	bl	8009a90 <lv_obj_get_style_text_decor>
 8009f66:	4603      	mov	r3, r0
 8009f68:	f003 0307 	and.w	r3, r3, #7
 8009f6c:	b2d9      	uxtb	r1, r3
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	7f13      	ldrb	r3, [r2, #28]
 8009f72:	f361 0302 	bfi	r3, r1, #0, #3
 8009f76:	7713      	strb	r3, [r2, #28]
#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00c      	beq.n	8009f98 <lv_obj_init_draw_label_dsc+0xc2>
 8009f7e:	68b9      	ldr	r1, [r7, #8]
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f7ff fdcd 	bl	8009b20 <lv_obj_get_style_blend_mode>
 8009f86:	4603      	mov	r3, r0
 8009f88:	f003 0307 	and.w	r3, r3, #7
 8009f8c:	b2d9      	uxtb	r1, r3
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	7f13      	ldrb	r3, [r2, #28]
 8009f92:	f361 03c5 	bfi	r3, r1, #3, #3
 8009f96:	7713      	strb	r3, [r2, #28]
#endif

    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 8009f98:	68b9      	ldr	r1, [r7, #8]
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7ff fd43 	bl	8009a26 <lv_obj_get_style_text_font>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	601a      	str	r2, [r3, #0]

#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 8009fa6:	68b9      	ldr	r1, [r7, #8]
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f7ff fd83 	bl	8009ab4 <lv_obj_get_style_text_align>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	769a      	strb	r2, [r3, #26]
 8009fb6:	e000      	b.n	8009fba <lv_obj_init_draw_label_dsc+0xe4>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8009fb8:	bf00      	nop
}
 8009fba:	371c      	adds	r7, #28
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd90      	pop	{r4, r7, pc}

08009fc0 <lv_obj_calculate_ext_draw_size>:
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b088      	sub	sp, #32
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
    lv_coord_t s = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	83fb      	strh	r3, [r7, #30]

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
 8009fce:	6839      	ldr	r1, [r7, #0]
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7ff fc8e 	bl	80098f2 <lv_obj_get_style_shadow_width>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	83bb      	strh	r3, [r7, #28]
    if(sh_width) {
 8009fda:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d045      	beq.n	800a06e <lv_obj_calculate_ext_draw_size+0xae>
        lv_opa_t sh_opa = lv_obj_get_style_shadow_opa(obj, part);
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7ff fce3 	bl	80099b0 <lv_obj_get_style_shadow_opa>
 8009fea:	4603      	mov	r3, r0
 8009fec:	76fb      	strb	r3, [r7, #27]
        if(sh_opa > LV_OPA_MIN) {
 8009fee:	7efb      	ldrb	r3, [r7, #27]
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d93c      	bls.n	800a06e <lv_obj_calculate_ext_draw_size+0xae>
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 8009ff4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	da00      	bge.n	8009ffe <lv_obj_calculate_ext_draw_size+0x3e>
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	105b      	asrs	r3, r3, #1
 800a000:	b21b      	sxth	r3, r3
 800a002:	b29b      	uxth	r3, r3
 800a004:	3301      	adds	r3, #1
 800a006:	b29b      	uxth	r3, r3
 800a008:	83bb      	strh	r3, [r7, #28]
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f7ff fca6 	bl	800995e <lv_obj_get_style_shadow_spread>
 800a012:	4603      	mov	r3, r0
 800a014:	b29a      	uxth	r2, r3
 800a016:	8bbb      	ldrh	r3, [r7, #28]
 800a018:	4413      	add	r3, r2
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	83bb      	strh	r3, [r7, #28]
            lv_coord_t sh_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f7ff fc78 	bl	8009916 <lv_obj_get_style_shadow_ofs_x>
 800a026:	4603      	mov	r3, r0
 800a028:	833b      	strh	r3, [r7, #24]
            lv_coord_t sh_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 800a02a:	6839      	ldr	r1, [r7, #0]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f7ff fc84 	bl	800993a <lv_obj_get_style_shadow_ofs_y>
 800a032:	4603      	mov	r3, r0
 800a034:	82fb      	strh	r3, [r7, #22]
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 800a036:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	bfb8      	it	lt
 800a03e:	425b      	neglt	r3, r3
 800a040:	b29a      	uxth	r2, r3
 800a042:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a046:	2b00      	cmp	r3, #0
 800a048:	bfb8      	it	lt
 800a04a:	425b      	neglt	r3, r3
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	4293      	cmp	r3, r2
 800a050:	bf38      	it	cc
 800a052:	4613      	movcc	r3, r2
 800a054:	b29a      	uxth	r2, r3
 800a056:	8bbb      	ldrh	r3, [r7, #28]
 800a058:	4413      	add	r3, r2
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	83bb      	strh	r3, [r7, #28]
            s = LV_MAX(s, sh_width);
 800a05e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800a062:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a066:	4293      	cmp	r3, r2
 800a068:	bfb8      	it	lt
 800a06a:	4613      	movlt	r3, r2
 800a06c:	83fb      	strh	r3, [r7, #30]
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f7ff fbf1 	bl	8009858 <lv_obj_get_style_outline_width>
 800a076:	4603      	mov	r3, r0
 800a078:	82bb      	strh	r3, [r7, #20]
    if(outline_width) {
 800a07a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d019      	beq.n	800a0b6 <lv_obj_calculate_ext_draw_size+0xf6>
        lv_opa_t outline_opa = lv_obj_get_style_outline_opa(obj, part);
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7ff fc10 	bl	80098aa <lv_obj_get_style_outline_opa>
 800a08a:	4603      	mov	r3, r0
 800a08c:	74fb      	strb	r3, [r7, #19]
        if(outline_opa > LV_OPA_MIN) {
 800a08e:	7cfb      	ldrb	r3, [r7, #19]
 800a090:	2b02      	cmp	r3, #2
 800a092:	d910      	bls.n	800a0b6 <lv_obj_calculate_ext_draw_size+0xf6>
            lv_coord_t outline_pad = lv_obj_get_style_outline_pad(obj, part);
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7ff fc19 	bl	80098ce <lv_obj_get_style_outline_pad>
 800a09c:	4603      	mov	r3, r0
 800a09e:	823b      	strh	r3, [r7, #16]
            s = LV_MAX(s, outline_pad + outline_width);
 800a0a0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800a0a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a0a8:	441a      	add	r2, r3
 800a0aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	bfb8      	it	lt
 800a0b2:	4613      	movlt	r3, r2
 800a0b4:	83fb      	strh	r3, [r7, #30]
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
 800a0b6:	6839      	ldr	r1, [r7, #0]
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7ff fa61 	bl	8009580 <lv_obj_get_style_transform_width>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
 800a0c2:	6839      	ldr	r1, [r7, #0]
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f7ff fa6d 	bl	80095a4 <lv_obj_get_style_transform_height>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	81bb      	strh	r3, [r7, #12]
    lv_coord_t wh = LV_MAX(w, h);
 800a0ce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a0d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	bfb8      	it	lt
 800a0da:	4613      	movlt	r3, r2
 800a0dc:	817b      	strh	r3, [r7, #10]
    if(wh > 0) s += wh;
 800a0de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	dd04      	ble.n	800a0f0 <lv_obj_calculate_ext_draw_size+0x130>
 800a0e6:	8bfa      	ldrh	r2, [r7, #30]
 800a0e8:	897b      	ldrh	r3, [r7, #10]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	83fb      	strh	r3, [r7, #30]

    return s;
 800a0f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3720      	adds	r7, #32
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, lv_draw_ctx_t * draw_ctx)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 800a106:	2148      	movs	r1, #72	; 0x48
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f01a fb27 	bl	802475c <lv_memset_00>
    dsc->draw_ctx = draw_ctx;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	601a      	str	r2, [r3, #0]
}
 800a114:	bf00      	nop
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <lv_obj_refresh_ext_draw_size>:
    if(dsc->class_p == class_p && dsc->type == type) return true;
    else return false;
}

void lv_obj_refresh_ext_draw_size(lv_obj_t * obj)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 f837 	bl	800a198 <_lv_obj_get_ext_draw_size>
 800a12a:	4603      	mov	r3, r0
 800a12c:	81fb      	strh	r3, [r7, #14]
    lv_coord_t s_new = 0;
 800a12e:	2300      	movs	r3, #0
 800a130:	81bb      	strh	r3, [r7, #12]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 800a132:	f107 030c 	add.w	r3, r7, #12
 800a136:	461a      	mov	r2, r3
 800a138:	2113      	movs	r1, #19
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7fc fd6e 	bl	8006c1c <lv_event_send>

    if(s_new != s_old) lv_obj_invalidate(obj);
 800a140:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a144:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d002      	beq.n	800a152 <lv_obj_refresh_ext_draw_size+0x36>
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f001 fb3a 	bl	800b7c6 <lv_obj_invalidate>

    /*Store the result if the special attrs already allocated*/
    if(obj->spec_attr) {
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d005      	beq.n	800a166 <lv_obj_refresh_ext_draw_size+0x4a>
        obj->spec_attr->ext_draw_size = s_new;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a162:	82da      	strh	r2, [r3, #22]
 800a164:	e00b      	b.n	800a17e <lv_obj_refresh_ext_draw_size+0x62>
    }
    /*Allocate spec. attrs. only if the result is not zero.
     *Zero is the default value if the spec. attr. are not defined.*/
    else if(s_new != 0) {
 800a166:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d007      	beq.n	800a17e <lv_obj_refresh_ext_draw_size+0x62>
        lv_obj_allocate_spec_attr(obj);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7fd ff76 	bl	8008060 <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a17c:	82da      	strh	r2, [r3, #22]
    }

    if(s_new != s_old) lv_obj_invalidate(obj);
 800a17e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a182:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a186:	429a      	cmp	r2, r3
 800a188:	d002      	beq.n	800a190 <lv_obj_refresh_ext_draw_size+0x74>
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f001 fb1b 	bl	800b7c6 <lv_obj_invalidate>
}
 800a190:	bf00      	nop
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <_lv_obj_get_ext_draw_size>:

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d004      	beq.n	800a1b2 <_lv_obj_get_ext_draw_size+0x1a>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800a1b0:	e000      	b.n	800a1b4 <_lv_obj_get_ext_draw_size+0x1c>
    else return 0;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <_lv_obj_get_layer_type>:

lv_layer_type_t _lv_obj_get_layer_type(const lv_obj_t * obj)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]

    if(obj->spec_attr) return obj->spec_attr->layer_type;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d006      	beq.n	800a1de <_lv_obj_get_layer_type+0x1e>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	7e9b      	ldrb	r3, [r3, #26]
 800a1d6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	e000      	b.n	800a1e0 <_lv_obj_get_layer_type+0x20>
    else return LV_LAYER_TYPE_NONE;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <lv_area_copy>:
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	80da      	strh	r2, [r3, #6]
}
 800a21e:	bf00      	nop
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800a22a:	b480      	push	{r7}
 800a22c:	b083      	sub	sp, #12
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a238:	b29a      	uxth	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a240:	b29b      	uxth	r3, r3
 800a242:	1ad3      	subs	r3, r2, r3
 800a244:	b29b      	uxth	r3, r3
 800a246:	3301      	adds	r3, #1
 800a248:	b29b      	uxth	r3, r3
 800a24a:	b21b      	sxth	r3, r3
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a266:	b29a      	uxth	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a26e:	b29b      	uxth	r3, r3
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	b29b      	uxth	r3, r3
 800a274:	3301      	adds	r3, #1
 800a276:	b29b      	uxth	r3, r3
 800a278:	b21b      	sxth	r3, r3
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	370c      	adds	r7, #12
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <lv_obj_get_style_width>:
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b084      	sub	sp, #16
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800a290:	2201      	movs	r2, #1
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f004 fbdf 	bl	800ea58 <lv_obj_get_style_prop>
 800a29a:	4603      	mov	r3, r0
 800a29c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	b21b      	sxth	r3, r3
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <lv_obj_get_style_min_width>:
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f004 fbcd 	bl	800ea58 <lv_obj_get_style_prop>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	b21b      	sxth	r3, r3
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <lv_obj_get_style_max_width>:
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b084      	sub	sp, #16
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
 800a2d6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 800a2d8:	2203      	movs	r2, #3
 800a2da:	6839      	ldr	r1, [r7, #0]
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f004 fbbb 	bl	800ea58 <lv_obj_get_style_prop>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	b21b      	sxth	r3, r3
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <lv_obj_get_style_height>:
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800a2fc:	2204      	movs	r2, #4
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f004 fba9 	bl	800ea58 <lv_obj_get_style_prop>
 800a306:	4603      	mov	r3, r0
 800a308:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	b21b      	sxth	r3, r3
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <lv_obj_get_style_min_height>:
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b084      	sub	sp, #16
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 800a320:	2205      	movs	r2, #5
 800a322:	6839      	ldr	r1, [r7, #0]
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f004 fb97 	bl	800ea58 <lv_obj_get_style_prop>
 800a32a:	4603      	mov	r3, r0
 800a32c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	b21b      	sxth	r3, r3
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <lv_obj_get_style_max_height>:
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b084      	sub	sp, #16
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 800a344:	2206      	movs	r2, #6
 800a346:	6839      	ldr	r1, [r7, #0]
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f004 fb85 	bl	800ea58 <lv_obj_get_style_prop>
 800a34e:	4603      	mov	r3, r0
 800a350:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	b21b      	sxth	r3, r3
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <lv_obj_get_style_x>:
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b084      	sub	sp, #16
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 800a368:	2207      	movs	r2, #7
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f004 fb73 	bl	800ea58 <lv_obj_get_style_prop>
 800a372:	4603      	mov	r3, r0
 800a374:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	b21b      	sxth	r3, r3
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <lv_obj_get_style_y>:
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b084      	sub	sp, #16
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
 800a38a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 800a38c:	2208      	movs	r2, #8
 800a38e:	6839      	ldr	r1, [r7, #0]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f004 fb61 	bl	800ea58 <lv_obj_get_style_prop>
 800a396:	4603      	mov	r3, r0
 800a398:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	b21b      	sxth	r3, r3
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3710      	adds	r7, #16
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <lv_obj_get_style_align>:
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b084      	sub	sp, #16
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 800a3b0:	2209      	movs	r2, #9
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f004 fb4f 	bl	800ea58 <lv_obj_get_style_prop>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	60fb      	str	r3, [r7, #12]
    return (lv_align_t)v.num;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	b2db      	uxtb	r3, r3
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <lv_obj_get_style_translate_x>:
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800a3d4:	226a      	movs	r2, #106	; 0x6a
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f004 fb3d 	bl	800ea58 <lv_obj_get_style_prop>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	b21b      	sxth	r3, r3
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <lv_obj_get_style_translate_y>:
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b084      	sub	sp, #16
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800a3f8:	226b      	movs	r2, #107	; 0x6b
 800a3fa:	6839      	ldr	r1, [r7, #0]
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f004 fb2b 	bl	800ea58 <lv_obj_get_style_prop>
 800a402:	4603      	mov	r3, r0
 800a404:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	b21b      	sxth	r3, r3
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <lv_obj_get_style_transform_zoom>:
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b084      	sub	sp, #16
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800a41c:	226c      	movs	r2, #108	; 0x6c
 800a41e:	6839      	ldr	r1, [r7, #0]
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f004 fb19 	bl	800ea58 <lv_obj_get_style_prop>
 800a426:	4603      	mov	r3, r0
 800a428:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	b21b      	sxth	r3, r3
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <lv_obj_get_style_transform_angle>:
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b084      	sub	sp, #16
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800a440:	226d      	movs	r2, #109	; 0x6d
 800a442:	6839      	ldr	r1, [r7, #0]
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f004 fb07 	bl	800ea58 <lv_obj_get_style_prop>
 800a44a:	4603      	mov	r3, r0
 800a44c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	b21b      	sxth	r3, r3
}
 800a452:	4618      	mov	r0, r3
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <lv_obj_get_style_transform_pivot_x>:
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b084      	sub	sp, #16
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 800a464:	226e      	movs	r2, #110	; 0x6e
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f004 faf5 	bl	800ea58 <lv_obj_get_style_prop>
 800a46e:	4603      	mov	r3, r0
 800a470:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	b21b      	sxth	r3, r3
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <lv_obj_get_style_transform_pivot_y>:
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b084      	sub	sp, #16
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 800a488:	226f      	movs	r2, #111	; 0x6f
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f004 fae3 	bl	800ea58 <lv_obj_get_style_prop>
 800a492:	4603      	mov	r3, r0
 800a494:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	b21b      	sxth	r3, r3
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <lv_obj_get_style_pad_top>:
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b084      	sub	sp, #16
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800a4ac:	2210      	movs	r2, #16
 800a4ae:	6839      	ldr	r1, [r7, #0]
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f004 fad1 	bl	800ea58 <lv_obj_get_style_prop>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	b21b      	sxth	r3, r3
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <lv_obj_get_style_pad_bottom>:
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b084      	sub	sp, #16
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800a4d0:	2211      	movs	r2, #17
 800a4d2:	6839      	ldr	r1, [r7, #0]
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f004 fabf 	bl	800ea58 <lv_obj_get_style_prop>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	b21b      	sxth	r3, r3
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <lv_obj_get_style_pad_left>:
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b084      	sub	sp, #16
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a4f4:	2212      	movs	r2, #18
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f004 faad 	bl	800ea58 <lv_obj_get_style_prop>
 800a4fe:	4603      	mov	r3, r0
 800a500:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	b21b      	sxth	r3, r3
}
 800a506:	4618      	mov	r0, r3
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <lv_obj_get_style_pad_right>:
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a518:	2213      	movs	r2, #19
 800a51a:	6839      	ldr	r1, [r7, #0]
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f004 fa9b 	bl	800ea58 <lv_obj_get_style_prop>
 800a522:	4603      	mov	r3, r0
 800a524:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	b21b      	sxth	r3, r3
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <lv_obj_get_style_border_width>:
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b084      	sub	sp, #16
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
 800a53a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800a53c:	2232      	movs	r2, #50	; 0x32
 800a53e:	6839      	ldr	r1, [r7, #0]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f004 fa89 	bl	800ea58 <lv_obj_get_style_prop>
 800a546:	4603      	mov	r3, r0
 800a548:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	b21b      	sxth	r3, r3
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <lv_obj_get_style_layout>:
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 800a560:	220a      	movs	r2, #10
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f004 fa77 	bl	800ea58 <lv_obj_get_style_prop>
 800a56a:	4603      	mov	r3, r0
 800a56c:	60fb      	str	r3, [r7, #12]
    return (uint16_t)v.num;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	b29b      	uxth	r3, r3
}
 800a572:	4618      	mov	r0, r3
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <lv_obj_get_style_base_dir>:

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b084      	sub	sp, #16
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
 800a582:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800a584:	2216      	movs	r2, #22
 800a586:	6839      	ldr	r1, [r7, #0]
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f004 fa65 	bl	800ea58 <lv_obj_get_style_prop>
 800a58e:	4603      	mov	r3, r0
 800a590:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	b2db      	uxtb	r3, r3
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <lv_obj_set_pos>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_set_pos(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b082      	sub	sp, #8
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	807b      	strh	r3, [r7, #2]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	803b      	strh	r3, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_set_x(obj, x);
 800a5ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f80a 	bl	800a5ce <lv_obj_set_x>
    lv_obj_set_y(obj, y);
 800a5ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f829 	bl	800a618 <lv_obj_set_y>
}
 800a5c6:	bf00      	nop
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <lv_obj_set_x>:

void lv_obj_set_x(lv_obj_t * obj, lv_coord_t x)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b084      	sub	sp, #16
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_res_t res_x;
    lv_style_value_t v_x;

    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 800a5da:	f107 0208 	add.w	r2, r7, #8
 800a5de:	2300      	movs	r3, #0
 800a5e0:	2107      	movs	r1, #7
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f004 facf 	bl	800eb86 <lv_obj_get_local_style_prop>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73fb      	strb	r3, [r7, #15]

    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d104      	bne.n	800a5fc <lv_obj_set_x+0x2e>
 800a5f2:	68ba      	ldr	r2, [r7, #8]
 800a5f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d102      	bne.n	800a602 <lv_obj_set_x+0x34>
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d106      	bne.n	800a610 <lv_obj_set_x+0x42>
        lv_obj_set_style_x(obj, x, 0);
 800a602:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a606:	2200      	movs	r2, #0
 800a608:	4619      	mov	r1, r3
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f005 fc5c 	bl	800fec8 <lv_obj_set_style_x>
    }
}
 800a610:	bf00      	nop
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <lv_obj_set_y>:

void lv_obj_set_y(lv_obj_t * obj, lv_coord_t y)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	460b      	mov	r3, r1
 800a622:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_res_t res_y;
    lv_style_value_t v_y;

    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 800a624:	f107 0208 	add.w	r2, r7, #8
 800a628:	2300      	movs	r3, #0
 800a62a:	2108      	movs	r1, #8
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f004 faaa 	bl	800eb86 <lv_obj_get_local_style_prop>
 800a632:	4603      	mov	r3, r0
 800a634:	73fb      	strb	r3, [r7, #15]

    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 800a636:	7bfb      	ldrb	r3, [r7, #15]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d104      	bne.n	800a646 <lv_obj_set_y+0x2e>
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a642:	429a      	cmp	r2, r3
 800a644:	d102      	bne.n	800a64c <lv_obj_set_y+0x34>
 800a646:	7bfb      	ldrb	r3, [r7, #15]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d106      	bne.n	800a65a <lv_obj_set_y+0x42>
        lv_obj_set_style_y(obj, y, 0);
 800a64c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a650:	2200      	movs	r2, #0
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f005 fc4b 	bl	800fef0 <lv_obj_set_style_y>
    }
}
 800a65a:	bf00      	nop
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
	...

0800a664 <lv_obj_refr_size>:

bool lv_obj_refr_size(lv_obj_t * obj)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b090      	sub	sp, #64	; 0x40
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*If the width or height is set by a layout do not modify them*/
    if(obj->w_layout && obj->h_layout) return false;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a672:	f003 0304 	and.w	r3, r3, #4
 800a676:	b2db      	uxtb	r3, r3
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d009      	beq.n	800a690 <lv_obj_refr_size+0x2c>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a682:	f003 0302 	and.w	r3, r3, #2
 800a686:	b2db      	uxtb	r3, r3
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <lv_obj_refr_size+0x2c>
 800a68c:	2300      	movs	r3, #0
 800a68e:	e221      	b.n	800aad4 <lv_obj_refr_size+0x470>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f005 fd01 	bl	8010098 <lv_obj_get_parent>
 800a696:	6378      	str	r0, [r7, #52]	; 0x34
    if(parent == NULL) return false;
 800a698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <lv_obj_refr_size+0x3e>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e218      	b.n	800aad4 <lv_obj_refr_size+0x470>

    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f002 f85e 	bl	800c764 <lv_obj_get_scroll_left>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	867b      	strh	r3, [r7, #50]	; 0x32
    bool w_is_content = false;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bool w_is_pct = false;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    lv_coord_t w;
    if(obj->w_layout) {
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a6be:	f003 0304 	and.w	r3, r3, #4
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d005      	beq.n	800a6d4 <lv_obj_refr_size+0x70>
        w = lv_obj_get_width(obj);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fab1 	bl	800ac30 <lv_obj_get_width>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a6d2:	e0a0      	b.n	800a816 <lv_obj_refr_size+0x1b2>
    }
    else {
        w = lv_obj_get_style_width(obj, LV_PART_MAIN);
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f7ff fdd5 	bl	800a286 <lv_obj_get_style_width>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	87bb      	strh	r3, [r7, #60]	; 0x3c
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 800a6e0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800a6e4:	f242 72d1 	movw	r2, #10193	; 0x27d1
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	bf0c      	ite	eq
 800a6ec:	2301      	moveq	r3, #1
 800a6ee:	2300      	movne	r3, #0
 800a6f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 800a6f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a6f6:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a6fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6fe:	d108      	bne.n	800a712 <lv_obj_refr_size+0xae>
 800a700:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a702:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a706:	b21b      	sxth	r3, r3
 800a708:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a70c:	dc01      	bgt.n	800a712 <lv_obj_refr_size+0xae>
 800a70e:	2301      	movs	r3, #1
 800a710:	e000      	b.n	800a714 <lv_obj_refr_size+0xb0>
 800a712:	2300      	movs	r3, #0
 800a714:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800a718:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a71c:	f003 0301 	and.w	r3, r3, #1
 800a720:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 800a724:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a726:	f000 fa9f 	bl	800ac68 <lv_obj_get_content_width>
 800a72a:	4603      	mov	r3, r0
 800a72c:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if(w_is_content) {
 800a72e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a732:	2b00      	cmp	r3, #0
 800a734:	d005      	beq.n	800a742 <lv_obj_refr_size+0xde>
            w = calc_content_width(obj);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f001 fa36 	bl	800bba8 <calc_content_width>
 800a73c:	4603      	mov	r3, r0
 800a73e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a740:	e051      	b.n	800a7e6 <lv_obj_refr_size+0x182>
        }
        else if(w_is_pct) {
 800a742:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a746:	2b00      	cmp	r3, #0
 800a748:	d04d      	beq.n	800a7e6 <lv_obj_refr_size+0x182>
            /*If parent has content size and the child has pct size
             *a circular dependency will occur. To solve it keep child size at zero */
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 800a74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a74c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a750:	f003 0304 	and.w	r3, r3, #4
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b00      	cmp	r3, #0
 800a758:	d128      	bne.n	800a7ac <lv_obj_refr_size+0x148>
 800a75a:	2100      	movs	r1, #0
 800a75c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a75e:	f7ff fd92 	bl	800a286 <lv_obj_get_style_width>
 800a762:	4603      	mov	r3, r0
 800a764:	461a      	mov	r2, r3
 800a766:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d11e      	bne.n	800a7ac <lv_obj_refr_size+0x148>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 800a76e:	2100      	movs	r1, #0
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f7ff fede 	bl	800a532 <lv_obj_get_style_border_width>
 800a776:	4603      	mov	r3, r0
 800a778:	85bb      	strh	r3, [r7, #44]	; 0x2c
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 800a77a:	2100      	movs	r1, #0
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f7ff feb4 	bl	800a4ea <lv_obj_get_style_pad_left>
 800a782:	4603      	mov	r3, r0
 800a784:	b29a      	uxth	r2, r3
 800a786:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a788:	4413      	add	r3, r2
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	87bb      	strh	r3, [r7, #60]	; 0x3c
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 800a78e:	2100      	movs	r1, #0
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7ff febc 	bl	800a50e <lv_obj_get_style_pad_right>
 800a796:	4603      	mov	r3, r0
 800a798:	461a      	mov	r2, r3
 800a79a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800a79e:	4413      	add	r3, r2
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a7a4:	4413      	add	r3, r2
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 800a7aa:	e01c      	b.n	800a7e6 <lv_obj_refr_size+0x182>
            }
            else {
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 800a7ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a7ae:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a7b2:	b21b      	sxth	r3, r3
 800a7b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7b8:	dd06      	ble.n	800a7c8 <lv_obj_refr_size+0x164>
 800a7ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a7bc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a7c0:	b21b      	sxth	r3, r3
 800a7c2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800a7c6:	e003      	b.n	800a7d0 <lv_obj_refr_size+0x16c>
 800a7c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a7ca:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a7ce:	b21b      	sxth	r3, r3
 800a7d0:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800a7d4:	fb02 f303 	mul.w	r3, r2, r3
 800a7d8:	4a9f      	ldr	r2, [pc, #636]	; (800aa58 <lv_obj_refr_size+0x3f4>)
 800a7da:	fb82 1203 	smull	r1, r2, r2, r3
 800a7de:	1152      	asrs	r2, r2, #5
 800a7e0:	17db      	asrs	r3, r3, #31
 800a7e2:	1ad3      	subs	r3, r2, r3
 800a7e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
            }
        }

        lv_coord_t minw = lv_obj_get_style_min_width(obj, LV_PART_MAIN);
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7ff fd5e 	bl	800a2aa <lv_obj_get_style_min_width>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	857b      	strh	r3, [r7, #42]	; 0x2a
        lv_coord_t maxw = lv_obj_get_style_max_width(obj, LV_PART_MAIN);
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7ff fd6a 	bl	800a2ce <lv_obj_get_style_max_width>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	853b      	strh	r3, [r7, #40]	; 0x28
        w = lv_clamp_width(w, minw, maxw, parent_w);
 800a7fe:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a802:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800a806:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800a80a:	f9b7 003c 	ldrsh.w	r0, [r7, #60]	; 0x3c
 800a80e:	f001 f8db 	bl	800b9c8 <lv_clamp_width>
 800a812:	4603      	mov	r3, r0
 800a814:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }

    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f001 ff06 	bl	800c628 <lv_obj_get_scroll_top>
 800a81c:	4603      	mov	r3, r0
 800a81e:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t h;
    bool h_is_content = false;
 800a820:	2300      	movs	r3, #0
 800a822:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    bool h_is_pct = false;
 800a826:	2300      	movs	r3, #0
 800a828:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if(obj->h_layout) {
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a832:	f003 0302 	and.w	r3, r3, #2
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d005      	beq.n	800a848 <lv_obj_refr_size+0x1e4>
        h = lv_obj_get_height(obj);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fa05 	bl	800ac4c <lv_obj_get_height>
 800a842:	4603      	mov	r3, r0
 800a844:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a846:	e0a0      	b.n	800a98a <lv_obj_refr_size+0x326>
    }
    else {
        h = lv_obj_get_style_height(obj, LV_PART_MAIN);
 800a848:	2100      	movs	r1, #0
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f7ff fd51 	bl	800a2f2 <lv_obj_get_style_height>
 800a850:	4603      	mov	r3, r0
 800a852:	877b      	strh	r3, [r7, #58]	; 0x3a
        h_is_content = h == LV_SIZE_CONTENT ? true : false;
 800a854:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800a858:	f242 72d1 	movw	r2, #10193	; 0x27d1
 800a85c:	4293      	cmp	r3, r2
 800a85e:	bf0c      	ite	eq
 800a860:	2301      	moveq	r3, #1
 800a862:	2300      	movne	r3, #0
 800a864:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 800a868:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a86a:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a86e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a872:	d108      	bne.n	800a886 <lv_obj_refr_size+0x222>
 800a874:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a876:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a87a:	b21b      	sxth	r3, r3
 800a87c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a880:	dc01      	bgt.n	800a886 <lv_obj_refr_size+0x222>
 800a882:	2301      	movs	r3, #1
 800a884:	e000      	b.n	800a888 <lv_obj_refr_size+0x224>
 800a886:	2300      	movs	r3, #0
 800a888:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a88c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a890:	f003 0301 	and.w	r3, r3, #1
 800a894:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 800a898:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a89a:	f000 fa10 	bl	800acbe <lv_obj_get_content_height>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	847b      	strh	r3, [r7, #34]	; 0x22

        if(h_is_content) {
 800a8a2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d005      	beq.n	800a8b6 <lv_obj_refr_size+0x252>
            h = calc_content_height(obj);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f001 faf2 	bl	800be94 <calc_content_height>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a8b4:	e051      	b.n	800a95a <lv_obj_refr_size+0x2f6>
        }
        else if(h_is_pct) {
 800a8b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d04d      	beq.n	800a95a <lv_obj_refr_size+0x2f6>
            /*If parent has content size and the child has pct size
             *a circular dependency will occur. To solve it keep child size at zero */
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 800a8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a8c4:	f003 0302 	and.w	r3, r3, #2
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d128      	bne.n	800a920 <lv_obj_refr_size+0x2bc>
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a8d2:	f7ff fd0e 	bl	800a2f2 <lv_obj_get_style_height>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	461a      	mov	r2, r3
 800a8da:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d11e      	bne.n	800a920 <lv_obj_refr_size+0x2bc>
                lv_coord_t border_w = lv_obj_get_style_border_width(obj, 0);
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7ff fe24 	bl	800a532 <lv_obj_get_style_border_width>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	843b      	strh	r3, [r7, #32]
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7ff fdd6 	bl	800a4a2 <lv_obj_get_style_pad_top>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	8c3b      	ldrh	r3, [r7, #32]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	877b      	strh	r3, [r7, #58]	; 0x3a
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 800a902:	2100      	movs	r1, #0
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7ff fdde 	bl	800a4c6 <lv_obj_get_style_pad_bottom>
 800a90a:	4603      	mov	r3, r0
 800a90c:	461a      	mov	r2, r3
 800a90e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a912:	4413      	add	r3, r2
 800a914:	b29a      	uxth	r2, r3
 800a916:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a918:	4413      	add	r3, r2
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	877b      	strh	r3, [r7, #58]	; 0x3a
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 800a91e:	e01c      	b.n	800a95a <lv_obj_refr_size+0x2f6>
            }
            else {
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 800a920:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a922:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a926:	b21b      	sxth	r3, r3
 800a928:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a92c:	dd06      	ble.n	800a93c <lv_obj_refr_size+0x2d8>
 800a92e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a930:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a934:	b21b      	sxth	r3, r3
 800a936:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800a93a:	e003      	b.n	800a944 <lv_obj_refr_size+0x2e0>
 800a93c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a93e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800a942:	b21b      	sxth	r3, r3
 800a944:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800a948:	fb02 f303 	mul.w	r3, r2, r3
 800a94c:	4a42      	ldr	r2, [pc, #264]	; (800aa58 <lv_obj_refr_size+0x3f4>)
 800a94e:	fb82 1203 	smull	r1, r2, r2, r3
 800a952:	1152      	asrs	r2, r2, #5
 800a954:	17db      	asrs	r3, r3, #31
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	877b      	strh	r3, [r7, #58]	; 0x3a
            }
        }

        lv_coord_t minh = lv_obj_get_style_min_height(obj, LV_PART_MAIN);
 800a95a:	2100      	movs	r1, #0
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f7ff fcda 	bl	800a316 <lv_obj_get_style_min_height>
 800a962:	4603      	mov	r3, r0
 800a964:	83fb      	strh	r3, [r7, #30]
        lv_coord_t maxh = lv_obj_get_style_max_height(obj, LV_PART_MAIN);
 800a966:	2100      	movs	r1, #0
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f7ff fce6 	bl	800a33a <lv_obj_get_style_max_height>
 800a96e:	4603      	mov	r3, r0
 800a970:	83bb      	strh	r3, [r7, #28]
        h = lv_clamp_height(h, minh, maxh, parent_h);
 800a972:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a976:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800a97a:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800a97e:	f9b7 003a 	ldrsh.w	r0, [r7, #58]	; 0x3a
 800a982:	f001 f899 	bl	800bab8 <lv_clamp_height>
 800a986:	4603      	mov	r3, r0
 800a988:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    /*calc_auto_size set the scroll x/y to 0 so revert the original value*/
    if(w_is_content || h_is_content) {
 800a98a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d103      	bne.n	800a99a <lv_obj_refr_size+0x336>
 800a992:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a996:	2b00      	cmp	r3, #0
 800a998:	d007      	beq.n	800a9aa <lv_obj_refr_size+0x346>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 800a99a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a99e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f002 fa0b 	bl	800cdc0 <lv_obj_scroll_to>
    }

    /*Do nothing if the size is not changed*/
    /*It is very important else recursive resizing can occur without size change*/
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f940 	bl	800ac30 <lv_obj_get_width>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d10a      	bne.n	800a9d2 <lv_obj_refr_size+0x36e>
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f945 	bl	800ac4c <lv_obj_get_height>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d101      	bne.n	800a9d2 <lv_obj_refr_size+0x36e>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	e080      	b.n	800aad4 <lv_obj_refr_size+0x470>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 fef7 	bl	800b7c6 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 800a9d8:	f107 0310 	add.w	r3, r7, #16
 800a9dc:	4619      	mov	r1, r3
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 f917 	bl	800ac12 <lv_obj_get_coords>

    /*Check if the object inside the parent or not*/
    lv_area_t parent_fit_area;
    lv_obj_get_content_coords(parent, &parent_fit_area);
 800a9e4:	f107 0308 	add.w	r3, r7, #8
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a9ec:	f000 f992 	bl	800ad14 <lv_obj_get_content_coords>

    /*If the object is already out of the parent and its position is changes
     *surely the scrollbars also changes so invalidate them*/
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 800a9f0:	f107 0108 	add.w	r1, r7, #8
 800a9f4:	f107 0310 	add.w	r3, r7, #16
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f018 f93e 	bl	8022c7c <_lv_area_is_in>
 800aa00:	4603      	mov	r3, r0
 800aa02:	76fb      	strb	r3, [r7, #27]
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 800aa04:	7efb      	ldrb	r3, [r7, #27]
 800aa06:	f083 0301 	eor.w	r3, r3, #1
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d002      	beq.n	800aa16 <lv_obj_refr_size+0x3b2>
 800aa10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aa12:	f003 f875 	bl	800db00 <lv_obj_scrollbar_invalidate>

    /*Set the length and height
     *Be sure the content is not scrolled in an invalid position on the new size*/
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aa20:	4413      	add	r3, r2
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	3b01      	subs	r3, #1
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	b21a      	sxth	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	835a      	strh	r2, [r3, #26]
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800aa2e:	2100      	movs	r1, #0
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7ff fda2 	bl	800a57a <lv_obj_get_style_base_dir>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d10f      	bne.n	800aa5c <lv_obj_refr_size+0x3f8>
        obj->coords.x1 = obj->coords.x2 - w + 1;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	b21a      	sxth	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	829a      	strh	r2, [r3, #20]
 800aa54:	e00e      	b.n	800aa74 <lv_obj_refr_size+0x410>
 800aa56:	bf00      	nop
 800aa58:	51eb851f 	.word	0x51eb851f
    }
    else {
        obj->coords.x2 = obj->coords.x1 + w - 1;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800aa62:	b29a      	uxth	r2, r3
 800aa64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aa66:	4413      	add	r3, r2
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	b21a      	sxth	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	831a      	strh	r2, [r3, #24]
    }

    /*Call the ancestor's event handler to the object with its new coordinates*/
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 800aa74:	f107 0310 	add.w	r3, r7, #16
 800aa78:	461a      	mov	r2, r3
 800aa7a:	2129      	movs	r1, #41	; 0x29
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7fc f8cd 	bl	8006c1c <lv_event_send>

    /*Call the ancestor's event handler to the parent too*/
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	2122      	movs	r1, #34	; 0x22
 800aa86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aa88:	f7fc f8c8 	bl	8006c1c <lv_event_send>

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fe9a 	bl	800b7c6 <lv_obj_invalidate>

    lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 800aa92:	2100      	movs	r1, #0
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f003 f870 	bl	800db7a <lv_obj_readjust_scroll>

    /*If the object was out of the parent invalidate the new scrollbar area too.
     *If it wasn't out of the parent but out now, also invalidate the scrollbars*/
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	3314      	adds	r3, #20
 800aa9e:	f107 0108 	add.w	r1, r7, #8
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f018 f8e9 	bl	8022c7c <_lv_area_is_in>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	76bb      	strb	r3, [r7, #26]
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 800aaae:	7efb      	ldrb	r3, [r7, #27]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d108      	bne.n	800aac6 <lv_obj_refr_size+0x462>
 800aab4:	7efb      	ldrb	r3, [r7, #27]
 800aab6:	f083 0301 	eor.w	r3, r3, #1
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d005      	beq.n	800aacc <lv_obj_refr_size+0x468>
 800aac0:	7ebb      	ldrb	r3, [r7, #26]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d002      	beq.n	800aacc <lv_obj_refr_size+0x468>
 800aac6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aac8:	f003 f81a 	bl	800db00 <lv_obj_scrollbar_invalidate>

    lv_obj_refresh_ext_draw_size(obj);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f7ff fb25 	bl	800a11c <lv_obj_refresh_ext_draw_size>

    return true;
 800aad2:	2301      	movs	r3, #1
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3740      	adds	r7, #64	; 0x40
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <lv_obj_is_layout_positioned>:

    lv_obj_mark_layout_as_dirty(obj);
}

bool lv_obj_is_layout_positioned(const lv_obj_t * obj)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 800aae4:	4910      	ldr	r1, [pc, #64]	; (800ab28 <lv_obj_is_layout_positioned+0x4c>)
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7fd fa86 	bl	8007ff8 <lv_obj_has_flag_any>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d001      	beq.n	800aaf6 <lv_obj_is_layout_positioned+0x1a>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	e014      	b.n	800ab20 <lv_obj_is_layout_positioned+0x44>

    lv_obj_t * parent = lv_obj_get_parent(obj);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f005 face 	bl	8010098 <lv_obj_get_parent>
 800aafc:	60f8      	str	r0, [r7, #12]
    if(parent == NULL) return false;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <lv_obj_is_layout_positioned+0x2c>
 800ab04:	2300      	movs	r3, #0
 800ab06:	e00b      	b.n	800ab20 <lv_obj_is_layout_positioned+0x44>

    uint32_t layout = lv_obj_get_style_layout(parent, LV_PART_MAIN);
 800ab08:	2100      	movs	r1, #0
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f7ff fd23 	bl	800a556 <lv_obj_get_style_layout>
 800ab10:	4603      	mov	r3, r0
 800ab12:	60bb      	str	r3, [r7, #8]
    if(layout) return true;
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d001      	beq.n	800ab1e <lv_obj_is_layout_positioned+0x42>
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e000      	b.n	800ab20 <lv_obj_is_layout_positioned+0x44>
    else return false;
 800ab1e:	2300      	movs	r3, #0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3710      	adds	r7, #16
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	00060001 	.word	0x00060001

0800ab2c <lv_obj_mark_layout_as_dirty>:

void lv_obj_mark_layout_as_dirty(lv_obj_t * obj)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
    obj->layout_inv = 1;
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800ab3a:	f043 0301 	orr.w	r3, r3, #1
 800ab3e:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    /*Mark the screen as dirty too to mark that there is something to do on this screen*/
    lv_obj_t * scr = lv_obj_get_screen(obj);
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f005 fa59 	bl	800fffa <lv_obj_get_screen>
 800ab48:	60f8      	str	r0, [r7, #12]
    scr->scr_layout_inv = 1;
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800ab50:	f043 0302 	orr.w	r3, r3, #2
 800ab54:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    /*Make the display refreshing*/
    lv_disp_t * disp = lv_obj_get_disp(scr);
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	f005 fa63 	bl	8010024 <lv_obj_get_disp>
 800ab5e:	60b8      	str	r0, [r7, #8]
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d004      	beq.n	800ab72 <lv_obj_mark_layout_as_dirty+0x46>
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f01a fd16 	bl	802559e <lv_timer_resume>
}
 800ab72:	bf00      	nop
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
	...

0800ab7c <lv_obj_update_layout>:

void lv_obj_update_layout(const lv_obj_t * obj)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
    static bool mutex = false;
    if(mutex) {
 800ab84:	4b12      	ldr	r3, [pc, #72]	; (800abd0 <lv_obj_update_layout+0x54>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d11d      	bne.n	800abc8 <lv_obj_update_layout+0x4c>
        LV_LOG_TRACE("Already running, returning");
        return;
    }
    mutex = true;
 800ab8c:	4b10      	ldr	r3, [pc, #64]	; (800abd0 <lv_obj_update_layout+0x54>)
 800ab8e:	2201      	movs	r2, #1
 800ab90:	701a      	strb	r2, [r3, #0]

    lv_obj_t * scr = lv_obj_get_screen(obj);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f005 fa31 	bl	800fffa <lv_obj_get_screen>
 800ab98:	60f8      	str	r0, [r7, #12]

    /*Repeat until there where layout invalidations*/
    while(scr->scr_layout_inv) {
 800ab9a:	e009      	b.n	800abb0 <lv_obj_update_layout+0x34>
        LV_LOG_INFO("Layout update begin");
        scr->scr_layout_inv = 0;
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800aba2:	f36f 0341 	bfc	r3, #1, #1
 800aba6:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
        layout_update_core(scr);
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f001 fa38 	bl	800c020 <layout_update_core>
    while(scr->scr_layout_inv) {
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800abb6:	f003 0302 	and.w	r3, r3, #2
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d1ed      	bne.n	800ab9c <lv_obj_update_layout+0x20>
        LV_LOG_TRACE("Layout update end");
    }

    mutex = false;
 800abc0:	4b03      	ldr	r3, [pc, #12]	; (800abd0 <lv_obj_update_layout+0x54>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	701a      	strb	r2, [r3, #0]
 800abc6:	e000      	b.n	800abca <lv_obj_update_layout+0x4e>
        return;
 800abc8:	bf00      	nop
}
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	20000778 	.word	0x20000778

0800abd4 <lv_obj_align>:
{
    lv_obj_set_style_align(obj, align, 0);
}

void lv_obj_align(lv_obj_t * obj, lv_align_t align, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	4608      	mov	r0, r1
 800abde:	4611      	mov	r1, r2
 800abe0:	461a      	mov	r2, r3
 800abe2:	4603      	mov	r3, r0
 800abe4:	72fb      	strb	r3, [r7, #11]
 800abe6:	460b      	mov	r3, r1
 800abe8:	813b      	strh	r3, [r7, #8]
 800abea:	4613      	mov	r3, r2
 800abec:	80fb      	strh	r3, [r7, #6]
    lv_obj_set_style_align(obj, align, 0);
 800abee:	7afb      	ldrb	r3, [r7, #11]
 800abf0:	2200      	movs	r2, #0
 800abf2:	4619      	mov	r1, r3
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f005 f98f 	bl	800ff18 <lv_obj_set_style_align>
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 800abfa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800abfe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ac02:	4619      	mov	r1, r3
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f7ff fcca 	bl	800a59e <lv_obj_set_pos>
}
 800ac0a:	bf00      	nop
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <lv_obj_get_coords>:
    lv_obj_set_pos(obj, x, y);

}

void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * coords)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b082      	sub	sp, #8
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_area_copy(coords, &obj->coords);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3314      	adds	r3, #20
 800ac20:	4619      	mov	r1, r3
 800ac22:	6838      	ldr	r0, [r7, #0]
 800ac24:	f7ff fae2 	bl	800a1ec <lv_area_copy>
}
 800ac28:	bf00      	nop
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <lv_obj_get_width>:
    return lv_obj_get_style_y(obj, LV_PART_MAIN);
}


lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_width(&obj->coords);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	3314      	adds	r3, #20
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7ff faf4 	bl	800a22a <lv_area_get_width>
 800ac42:	4603      	mov	r3, r0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <lv_obj_get_height>:

lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return lv_area_get_height(&obj->coords);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	3314      	adds	r3, #20
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7ff fafd 	bl	800a258 <lv_area_get_height>
 800ac5e:	4603      	mov	r3, r0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <lv_obj_get_content_width>:

lv_coord_t lv_obj_get_content_width(const lv_obj_t * obj)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800ac70:	2100      	movs	r1, #0
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff fc39 	bl	800a4ea <lv_obj_get_style_pad_left>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	81fb      	strh	r3, [r7, #14]
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7ff fc45 	bl	800a50e <lv_obj_get_style_pad_right>
 800ac84:	4603      	mov	r3, r0
 800ac86:	81bb      	strh	r3, [r7, #12]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800ac88:	2100      	movs	r1, #0
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f7ff fc51 	bl	800a532 <lv_obj_get_style_border_width>
 800ac90:	4603      	mov	r3, r0
 800ac92:	817b      	strh	r3, [r7, #10]

    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f7ff ffcb 	bl	800ac30 <lv_obj_get_width>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	89fb      	ldrh	r3, [r7, #14]
 800aca0:	1ad3      	subs	r3, r2, r3
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	89bb      	ldrh	r3, [r7, #12]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	897b      	ldrh	r3, [r7, #10]
 800acac:	005b      	lsls	r3, r3, #1
 800acae:	b29b      	uxth	r3, r3
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	b21b      	sxth	r3, r3
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <lv_obj_get_content_height>:

lv_coord_t lv_obj_get_content_height(const lv_obj_t * obj)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b084      	sub	sp, #16
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800acc6:	2100      	movs	r1, #0
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff fbea 	bl	800a4a2 <lv_obj_get_style_pad_top>
 800acce:	4603      	mov	r3, r0
 800acd0:	81fb      	strh	r3, [r7, #14]
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 800acd2:	2100      	movs	r1, #0
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f7ff fbf6 	bl	800a4c6 <lv_obj_get_style_pad_bottom>
 800acda:	4603      	mov	r3, r0
 800acdc:	81bb      	strh	r3, [r7, #12]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800acde:	2100      	movs	r1, #0
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7ff fc26 	bl	800a532 <lv_obj_get_style_border_width>
 800ace6:	4603      	mov	r3, r0
 800ace8:	817b      	strh	r3, [r7, #10]

    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7ff ffae 	bl	800ac4c <lv_obj_get_height>
 800acf0:	4603      	mov	r3, r0
 800acf2:	b29a      	uxth	r2, r3
 800acf4:	89fb      	ldrh	r3, [r7, #14]
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	89bb      	ldrh	r3, [r7, #12]
 800acfc:	1ad3      	subs	r3, r2, r3
 800acfe:	b29a      	uxth	r2, r3
 800ad00:	897b      	ldrh	r3, [r7, #10]
 800ad02:	005b      	lsls	r3, r3, #1
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	b21b      	sxth	r3, r3
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <lv_obj_get_content_coords>:

void lv_obj_get_content_coords(const lv_obj_t * obj, lv_area_t * area)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800ad1e:	2100      	movs	r1, #0
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7ff fc06 	bl	800a532 <lv_obj_get_style_border_width>
 800ad26:	4603      	mov	r3, r0
 800ad28:	81fb      	strh	r3, [r7, #14]

    lv_obj_get_coords(obj, area);
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f7ff ff70 	bl	800ac12 <lv_obj_get_coords>
    lv_area_increase(area, -border_width, -border_width);
 800ad32:	89fb      	ldrh	r3, [r7, #14]
 800ad34:	425b      	negs	r3, r3
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	b21b      	sxth	r3, r3
 800ad3a:	89fa      	ldrh	r2, [r7, #14]
 800ad3c:	4252      	negs	r2, r2
 800ad3e:	b292      	uxth	r2, r2
 800ad40:	b212      	sxth	r2, r2
 800ad42:	4619      	mov	r1, r3
 800ad44:	6838      	ldr	r0, [r7, #0]
 800ad46:	f017 fd49 	bl	80227dc <lv_area_increase>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff fbcc 	bl	800a4ea <lv_obj_get_style_pad_left>
 800ad52:	4603      	mov	r3, r0
 800ad54:	4619      	mov	r1, r3
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	b28b      	uxth	r3, r1
 800ad60:	4413      	add	r3, r2
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	b21a      	sxth	r2, r3
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	801a      	strh	r2, [r3, #0]
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 800ad6a:	2100      	movs	r1, #0
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7ff fbce 	bl	800a50e <lv_obj_get_style_pad_right>
 800ad72:	4603      	mov	r3, r0
 800ad74:	4619      	mov	r1, r3
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	b28b      	uxth	r3, r1
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	b21a      	sxth	r2, r3
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	809a      	strh	r2, [r3, #4]
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7ff fb88 	bl	800a4a2 <lv_obj_get_style_pad_top>
 800ad92:	4603      	mov	r3, r0
 800ad94:	4619      	mov	r1, r3
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ad9c:	b29a      	uxth	r2, r3
 800ad9e:	b28b      	uxth	r3, r1
 800ada0:	4413      	add	r3, r2
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	b21a      	sxth	r2, r3
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	805a      	strh	r2, [r3, #2]
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 800adaa:	2100      	movs	r1, #0
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7ff fb8a 	bl	800a4c6 <lv_obj_get_style_pad_bottom>
 800adb2:	4603      	mov	r3, r0
 800adb4:	4619      	mov	r1, r3
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	b28b      	uxth	r3, r1
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	b21a      	sxth	r2, r3
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	80da      	strh	r2, [r3, #6]

}
 800adca:	bf00      	nop
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <lv_obj_get_self_width>:

lv_coord_t lv_obj_get_self_width(const lv_obj_t * obj)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b084      	sub	sp, #16
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
    lv_point_t p = {0, LV_COORD_MIN};
 800adda:	2300      	movs	r3, #0
 800addc:	81bb      	strh	r3, [r7, #12]
 800adde:	f24e 0301 	movw	r3, #57345	; 0xe001
 800ade2:	81fb      	strh	r3, [r7, #14]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 800ade4:	f107 030c 	add.w	r3, r7, #12
 800ade8:	461a      	mov	r2, r3
 800adea:	212c      	movs	r1, #44	; 0x2c
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7fb ff15 	bl	8006c1c <lv_event_send>
    return p.x;
 800adf2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <lv_obj_get_self_height>:

lv_coord_t lv_obj_get_self_height(const lv_obj_t * obj)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b084      	sub	sp, #16
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
    lv_point_t p = {LV_COORD_MIN, 0};
 800ae06:	f24e 0301 	movw	r3, #57345	; 0xe001
 800ae0a:	81bb      	strh	r3, [r7, #12]
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	81fb      	strh	r3, [r7, #14]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 800ae10:	f107 030c 	add.w	r3, r7, #12
 800ae14:	461a      	mov	r2, r3
 800ae16:	212c      	movs	r1, #44	; 0x2c
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f7fb feff 	bl	8006c1c <lv_event_send>
    return p.y;
 800ae1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <lv_obj_refresh_self_size>:

bool lv_obj_refresh_self_size(lv_obj_t * obj)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b084      	sub	sp, #16
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
    lv_coord_t w_set = lv_obj_get_style_width(obj, LV_PART_MAIN);
 800ae32:	2100      	movs	r1, #0
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7ff fa26 	bl	800a286 <lv_obj_get_style_width>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h_set = lv_obj_get_style_height(obj, LV_PART_MAIN);
 800ae3e:	2100      	movs	r1, #0
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7ff fa56 	bl	800a2f2 <lv_obj_get_style_height>
 800ae46:	4603      	mov	r3, r0
 800ae48:	81bb      	strh	r3, [r7, #12]
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 800ae4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ae4e:	f242 72d1 	movw	r2, #10193	; 0x27d1
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d007      	beq.n	800ae66 <lv_obj_refresh_self_size+0x3c>
 800ae56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae5a:	f242 72d1 	movw	r2, #10193	; 0x27d1
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d001      	beq.n	800ae66 <lv_obj_refresh_self_size+0x3c>
 800ae62:	2300      	movs	r3, #0
 800ae64:	e003      	b.n	800ae6e <lv_obj_refresh_self_size+0x44>

    lv_obj_mark_layout_as_dirty(obj);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7ff fe60 	bl	800ab2c <lv_obj_mark_layout_as_dirty>
    return true;
 800ae6c:	2301      	movs	r3, #1
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
	...

0800ae78 <lv_obj_refr_pos>:

void lv_obj_refr_pos(lv_obj_t * obj)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b088      	sub	sp, #32
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
    if(lv_obj_is_layout_positioned(obj)) return;
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f7ff fe2b 	bl	800aadc <lv_obj_is_layout_positioned>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f040 81ef 	bne.w	800b26c <lv_obj_refr_pos+0x3f4>


    lv_obj_t * parent = lv_obj_get_parent(obj);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f005 f902 	bl	8010098 <lv_obj_get_parent>
 800ae94:	6138      	str	r0, [r7, #16]
    lv_coord_t x = lv_obj_get_style_x(obj, LV_PART_MAIN);
 800ae96:	2100      	movs	r1, #0
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f7ff fa60 	bl	800a35e <lv_obj_get_style_x>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	83fb      	strh	r3, [r7, #30]
    lv_coord_t y = lv_obj_get_style_y(obj, LV_PART_MAIN);
 800aea2:	2100      	movs	r1, #0
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f7ff fa6c 	bl	800a382 <lv_obj_get_style_y>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	83bb      	strh	r3, [r7, #28]

    if(parent == NULL) {
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d108      	bne.n	800aec6 <lv_obj_refr_pos+0x4e>
        lv_obj_move_to(obj, x, y);
 800aeb4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800aeb8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aebc:	4619      	mov	r1, r3
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 f9d8 	bl	800b274 <lv_obj_move_to>
        return;
 800aec4:	e1d3      	b.n	800b26e <lv_obj_refr_pos+0x3f6>
    }

    /*Handle percentage value*/
    lv_coord_t pw = lv_obj_get_content_width(parent);
 800aec6:	6938      	ldr	r0, [r7, #16]
 800aec8:	f7ff fece 	bl	800ac68 <lv_obj_get_content_width>
 800aecc:	4603      	mov	r3, r0
 800aece:	81fb      	strh	r3, [r7, #14]
    lv_coord_t ph = lv_obj_get_content_height(parent);
 800aed0:	6938      	ldr	r0, [r7, #16]
 800aed2:	f7ff fef4 	bl	800acbe <lv_obj_get_content_height>
 800aed6:	4603      	mov	r3, r0
 800aed8:	81bb      	strh	r3, [r7, #12]
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 800aeda:	8bfb      	ldrh	r3, [r7, #30]
 800aedc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800aee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aee4:	d123      	bne.n	800af2e <lv_obj_refr_pos+0xb6>
 800aee6:	8bfb      	ldrh	r3, [r7, #30]
 800aee8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800aeec:	b21b      	sxth	r3, r3
 800aeee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800aef2:	dc1c      	bgt.n	800af2e <lv_obj_refr_pos+0xb6>
 800aef4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800aef8:	8bfb      	ldrh	r3, [r7, #30]
 800aefa:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800aefe:	b21b      	sxth	r3, r3
 800af00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af04:	dd06      	ble.n	800af14 <lv_obj_refr_pos+0x9c>
 800af06:	8bfb      	ldrh	r3, [r7, #30]
 800af08:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800af0c:	b21b      	sxth	r3, r3
 800af0e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800af12:	e003      	b.n	800af1c <lv_obj_refr_pos+0xa4>
 800af14:	8bfb      	ldrh	r3, [r7, #30]
 800af16:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800af1a:	b21b      	sxth	r3, r3
 800af1c:	fb02 f303 	mul.w	r3, r2, r3
 800af20:	4aa6      	ldr	r2, [pc, #664]	; (800b1bc <lv_obj_refr_pos+0x344>)
 800af22:	fb82 1203 	smull	r1, r2, r2, r3
 800af26:	1152      	asrs	r2, r2, #5
 800af28:	17db      	asrs	r3, r3, #31
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	83fb      	strh	r3, [r7, #30]
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 800af2e:	8bbb      	ldrh	r3, [r7, #28]
 800af30:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800af34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af38:	d123      	bne.n	800af82 <lv_obj_refr_pos+0x10a>
 800af3a:	8bbb      	ldrh	r3, [r7, #28]
 800af3c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800af40:	b21b      	sxth	r3, r3
 800af42:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800af46:	dc1c      	bgt.n	800af82 <lv_obj_refr_pos+0x10a>
 800af48:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800af4c:	8bbb      	ldrh	r3, [r7, #28]
 800af4e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800af52:	b21b      	sxth	r3, r3
 800af54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af58:	dd06      	ble.n	800af68 <lv_obj_refr_pos+0xf0>
 800af5a:	8bbb      	ldrh	r3, [r7, #28]
 800af5c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800af60:	b21b      	sxth	r3, r3
 800af62:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800af66:	e003      	b.n	800af70 <lv_obj_refr_pos+0xf8>
 800af68:	8bbb      	ldrh	r3, [r7, #28]
 800af6a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800af6e:	b21b      	sxth	r3, r3
 800af70:	fb02 f303 	mul.w	r3, r2, r3
 800af74:	4a91      	ldr	r2, [pc, #580]	; (800b1bc <lv_obj_refr_pos+0x344>)
 800af76:	fb82 1203 	smull	r1, r2, r2, r3
 800af7a:	1152      	asrs	r2, r2, #5
 800af7c:	17db      	asrs	r3, r3, #31
 800af7e:	1ad3      	subs	r3, r2, r3
 800af80:	83bb      	strh	r3, [r7, #28]

    /*Handle percentage value of translate*/
    lv_coord_t tr_x = lv_obj_get_style_translate_x(obj, LV_PART_MAIN);
 800af82:	2100      	movs	r1, #0
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f7ff fa20 	bl	800a3ca <lv_obj_get_style_translate_x>
 800af8a:	4603      	mov	r3, r0
 800af8c:	837b      	strh	r3, [r7, #26]
    lv_coord_t tr_y = lv_obj_get_style_translate_y(obj, LV_PART_MAIN);
 800af8e:	2100      	movs	r1, #0
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7ff fa2c 	bl	800a3ee <lv_obj_get_style_translate_y>
 800af96:	4603      	mov	r3, r0
 800af98:	833b      	strh	r3, [r7, #24]
    lv_coord_t w = lv_obj_get_width(obj);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f7ff fe48 	bl	800ac30 <lv_obj_get_width>
 800afa0:	4603      	mov	r3, r0
 800afa2:	817b      	strh	r3, [r7, #10]
    lv_coord_t h = lv_obj_get_height(obj);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7ff fe51 	bl	800ac4c <lv_obj_get_height>
 800afaa:	4603      	mov	r3, r0
 800afac:	813b      	strh	r3, [r7, #8]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800afae:	8b7b      	ldrh	r3, [r7, #26]
 800afb0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800afb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afb8:	d123      	bne.n	800b002 <lv_obj_refr_pos+0x18a>
 800afba:	8b7b      	ldrh	r3, [r7, #26]
 800afbc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800afc0:	b21b      	sxth	r3, r3
 800afc2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800afc6:	dc1c      	bgt.n	800b002 <lv_obj_refr_pos+0x18a>
 800afc8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800afcc:	8b7b      	ldrh	r3, [r7, #26]
 800afce:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800afd2:	b21b      	sxth	r3, r3
 800afd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800afd8:	dd06      	ble.n	800afe8 <lv_obj_refr_pos+0x170>
 800afda:	8b7b      	ldrh	r3, [r7, #26]
 800afdc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800afe0:	b21b      	sxth	r3, r3
 800afe2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800afe6:	e003      	b.n	800aff0 <lv_obj_refr_pos+0x178>
 800afe8:	8b7b      	ldrh	r3, [r7, #26]
 800afea:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800afee:	b21b      	sxth	r3, r3
 800aff0:	fb02 f303 	mul.w	r3, r2, r3
 800aff4:	4a71      	ldr	r2, [pc, #452]	; (800b1bc <lv_obj_refr_pos+0x344>)
 800aff6:	fb82 1203 	smull	r1, r2, r2, r3
 800affa:	1152      	asrs	r2, r2, #5
 800affc:	17db      	asrs	r3, r3, #31
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	837b      	strh	r3, [r7, #26]
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800b002:	8b3b      	ldrh	r3, [r7, #24]
 800b004:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b00c:	d123      	bne.n	800b056 <lv_obj_refr_pos+0x1de>
 800b00e:	8b3b      	ldrh	r3, [r7, #24]
 800b010:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800b014:	b21b      	sxth	r3, r3
 800b016:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b01a:	dc1c      	bgt.n	800b056 <lv_obj_refr_pos+0x1de>
 800b01c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b020:	8b3b      	ldrh	r3, [r7, #24]
 800b022:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800b026:	b21b      	sxth	r3, r3
 800b028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b02c:	dd06      	ble.n	800b03c <lv_obj_refr_pos+0x1c4>
 800b02e:	8b3b      	ldrh	r3, [r7, #24]
 800b030:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800b034:	b21b      	sxth	r3, r3
 800b036:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800b03a:	e003      	b.n	800b044 <lv_obj_refr_pos+0x1cc>
 800b03c:	8b3b      	ldrh	r3, [r7, #24]
 800b03e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800b042:	b21b      	sxth	r3, r3
 800b044:	fb02 f303 	mul.w	r3, r2, r3
 800b048:	4a5c      	ldr	r2, [pc, #368]	; (800b1bc <lv_obj_refr_pos+0x344>)
 800b04a:	fb82 1203 	smull	r1, r2, r2, r3
 800b04e:	1152      	asrs	r2, r2, #5
 800b050:	17db      	asrs	r3, r3, #31
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	833b      	strh	r3, [r7, #24]

    /*Use the translation*/
    x += tr_x;
 800b056:	8bfa      	ldrh	r2, [r7, #30]
 800b058:	8b7b      	ldrh	r3, [r7, #26]
 800b05a:	4413      	add	r3, r2
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	83fb      	strh	r3, [r7, #30]
    y += tr_y;
 800b060:	8bba      	ldrh	r2, [r7, #28]
 800b062:	8b3b      	ldrh	r3, [r7, #24]
 800b064:	4413      	add	r3, r2
 800b066:	b29b      	uxth	r3, r3
 800b068:	83bb      	strh	r3, [r7, #28]

    lv_align_t align = lv_obj_get_style_align(obj, LV_PART_MAIN);
 800b06a:	2100      	movs	r1, #0
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7ff f99a 	bl	800a3a6 <lv_obj_get_style_align>
 800b072:	4603      	mov	r3, r0
 800b074:	75fb      	strb	r3, [r7, #23]

    if(align == LV_ALIGN_DEFAULT) {
 800b076:	7dfb      	ldrb	r3, [r7, #23]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10b      	bne.n	800b094 <lv_obj_refr_pos+0x21c>
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 800b07c:	2100      	movs	r1, #0
 800b07e:	6938      	ldr	r0, [r7, #16]
 800b080:	f7ff fa7b 	bl	800a57a <lv_obj_get_style_base_dir>
 800b084:	4603      	mov	r3, r0
 800b086:	2b01      	cmp	r3, #1
 800b088:	d102      	bne.n	800b090 <lv_obj_refr_pos+0x218>
 800b08a:	2303      	movs	r3, #3
 800b08c:	75fb      	strb	r3, [r7, #23]
 800b08e:	e001      	b.n	800b094 <lv_obj_refr_pos+0x21c>
        else align = LV_ALIGN_TOP_LEFT;
 800b090:	2301      	movs	r3, #1
 800b092:	75fb      	strb	r3, [r7, #23]
    }

    if(align == LV_ALIGN_TOP_LEFT) {
 800b094:	7dfb      	ldrb	r3, [r7, #23]
 800b096:	2b01      	cmp	r3, #1
 800b098:	d108      	bne.n	800b0ac <lv_obj_refr_pos+0x234>
        lv_obj_move_to(obj, x, y);
 800b09a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b09e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f8e5 	bl	800b274 <lv_obj_move_to>
 800b0aa:	e0e0      	b.n	800b26e <lv_obj_refr_pos+0x3f6>
    }
    else {

        switch(align) {
 800b0ac:	7dfb      	ldrb	r3, [r7, #23]
 800b0ae:	3b02      	subs	r3, #2
 800b0b0:	2b07      	cmp	r3, #7
 800b0b2:	f200 80d1 	bhi.w	800b258 <lv_obj_refr_pos+0x3e0>
 800b0b6:	a201      	add	r2, pc, #4	; (adr r2, 800b0bc <lv_obj_refr_pos+0x244>)
 800b0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0bc:	0800b0dd 	.word	0x0800b0dd
 800b0c0:	0800b10b 	.word	0x0800b10b
 800b0c4:	0800b14b 	.word	0x0800b14b
 800b0c8:	0800b15d 	.word	0x0800b15d
 800b0cc:	0800b19b 	.word	0x0800b19b
 800b0d0:	0800b11d 	.word	0x0800b11d
 800b0d4:	0800b1c1 	.word	0x0800b1c1
 800b0d8:	0800b1ff 	.word	0x0800b1ff
            case LV_ALIGN_TOP_MID:
                x += pw / 2 - w / 2;
 800b0dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	da00      	bge.n	800b0e6 <lv_obj_refr_pos+0x26e>
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	105b      	asrs	r3, r3, #1
 800b0e8:	b21b      	sxth	r3, r3
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	da00      	bge.n	800b0f6 <lv_obj_refr_pos+0x27e>
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	105b      	asrs	r3, r3, #1
 800b0f8:	b21b      	sxth	r3, r3
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	1ad3      	subs	r3, r2, r3
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	8bfb      	ldrh	r3, [r7, #30]
 800b102:	4413      	add	r3, r2
 800b104:	b29b      	uxth	r3, r3
 800b106:	83fb      	strh	r3, [r7, #30]
                break;
 800b108:	e0a7      	b.n	800b25a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_TOP_RIGHT:
                x += pw - w;
 800b10a:	89fa      	ldrh	r2, [r7, #14]
 800b10c:	897b      	ldrh	r3, [r7, #10]
 800b10e:	1ad3      	subs	r3, r2, r3
 800b110:	b29a      	uxth	r2, r3
 800b112:	8bfb      	ldrh	r3, [r7, #30]
 800b114:	4413      	add	r3, r2
 800b116:	b29b      	uxth	r3, r3
 800b118:	83fb      	strh	r3, [r7, #30]
                break;
 800b11a:	e09e      	b.n	800b25a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_LEFT_MID:
                y += ph / 2 - h / 2;
 800b11c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b120:	2b00      	cmp	r3, #0
 800b122:	da00      	bge.n	800b126 <lv_obj_refr_pos+0x2ae>
 800b124:	3301      	adds	r3, #1
 800b126:	105b      	asrs	r3, r3, #1
 800b128:	b21b      	sxth	r3, r3
 800b12a:	b29a      	uxth	r2, r3
 800b12c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b130:	2b00      	cmp	r3, #0
 800b132:	da00      	bge.n	800b136 <lv_obj_refr_pos+0x2be>
 800b134:	3301      	adds	r3, #1
 800b136:	105b      	asrs	r3, r3, #1
 800b138:	b21b      	sxth	r3, r3
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	1ad3      	subs	r3, r2, r3
 800b13e:	b29a      	uxth	r2, r3
 800b140:	8bbb      	ldrh	r3, [r7, #28]
 800b142:	4413      	add	r3, r2
 800b144:	b29b      	uxth	r3, r3
 800b146:	83bb      	strh	r3, [r7, #28]
                break;
 800b148:	e087      	b.n	800b25a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_LEFT:
                y += ph - h;
 800b14a:	89ba      	ldrh	r2, [r7, #12]
 800b14c:	893b      	ldrh	r3, [r7, #8]
 800b14e:	1ad3      	subs	r3, r2, r3
 800b150:	b29a      	uxth	r2, r3
 800b152:	8bbb      	ldrh	r3, [r7, #28]
 800b154:	4413      	add	r3, r2
 800b156:	b29b      	uxth	r3, r3
 800b158:	83bb      	strh	r3, [r7, #28]
                break;
 800b15a:	e07e      	b.n	800b25a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_MID:
                x += pw / 2 - w / 2;
 800b15c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b160:	2b00      	cmp	r3, #0
 800b162:	da00      	bge.n	800b166 <lv_obj_refr_pos+0x2ee>
 800b164:	3301      	adds	r3, #1
 800b166:	105b      	asrs	r3, r3, #1
 800b168:	b21b      	sxth	r3, r3
 800b16a:	b29a      	uxth	r2, r3
 800b16c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b170:	2b00      	cmp	r3, #0
 800b172:	da00      	bge.n	800b176 <lv_obj_refr_pos+0x2fe>
 800b174:	3301      	adds	r3, #1
 800b176:	105b      	asrs	r3, r3, #1
 800b178:	b21b      	sxth	r3, r3
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	b29a      	uxth	r2, r3
 800b180:	8bfb      	ldrh	r3, [r7, #30]
 800b182:	4413      	add	r3, r2
 800b184:	b29b      	uxth	r3, r3
 800b186:	83fb      	strh	r3, [r7, #30]
                y += ph - h;
 800b188:	89ba      	ldrh	r2, [r7, #12]
 800b18a:	893b      	ldrh	r3, [r7, #8]
 800b18c:	1ad3      	subs	r3, r2, r3
 800b18e:	b29a      	uxth	r2, r3
 800b190:	8bbb      	ldrh	r3, [r7, #28]
 800b192:	4413      	add	r3, r2
 800b194:	b29b      	uxth	r3, r3
 800b196:	83bb      	strh	r3, [r7, #28]
                break;
 800b198:	e05f      	b.n	800b25a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_BOTTOM_RIGHT:
                x += pw - w;
 800b19a:	89fa      	ldrh	r2, [r7, #14]
 800b19c:	897b      	ldrh	r3, [r7, #10]
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	b29a      	uxth	r2, r3
 800b1a2:	8bfb      	ldrh	r3, [r7, #30]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	83fb      	strh	r3, [r7, #30]
                y += ph - h;
 800b1aa:	89ba      	ldrh	r2, [r7, #12]
 800b1ac:	893b      	ldrh	r3, [r7, #8]
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	8bbb      	ldrh	r3, [r7, #28]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	83bb      	strh	r3, [r7, #28]
                break;
 800b1ba:	e04e      	b.n	800b25a <lv_obj_refr_pos+0x3e2>
 800b1bc:	51eb851f 	.word	0x51eb851f
            case LV_ALIGN_RIGHT_MID:
                x += pw - w;
 800b1c0:	89fa      	ldrh	r2, [r7, #14]
 800b1c2:	897b      	ldrh	r3, [r7, #10]
 800b1c4:	1ad3      	subs	r3, r2, r3
 800b1c6:	b29a      	uxth	r2, r3
 800b1c8:	8bfb      	ldrh	r3, [r7, #30]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	83fb      	strh	r3, [r7, #30]
                y += ph / 2 - h / 2;
 800b1d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	da00      	bge.n	800b1da <lv_obj_refr_pos+0x362>
 800b1d8:	3301      	adds	r3, #1
 800b1da:	105b      	asrs	r3, r3, #1
 800b1dc:	b21b      	sxth	r3, r3
 800b1de:	b29a      	uxth	r2, r3
 800b1e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	da00      	bge.n	800b1ea <lv_obj_refr_pos+0x372>
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	105b      	asrs	r3, r3, #1
 800b1ec:	b21b      	sxth	r3, r3
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	8bbb      	ldrh	r3, [r7, #28]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	83bb      	strh	r3, [r7, #28]
                break;
 800b1fc:	e02d      	b.n	800b25a <lv_obj_refr_pos+0x3e2>
            case LV_ALIGN_CENTER:
                x += pw / 2 - w / 2;
 800b1fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b202:	2b00      	cmp	r3, #0
 800b204:	da00      	bge.n	800b208 <lv_obj_refr_pos+0x390>
 800b206:	3301      	adds	r3, #1
 800b208:	105b      	asrs	r3, r3, #1
 800b20a:	b21b      	sxth	r3, r3
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b212:	2b00      	cmp	r3, #0
 800b214:	da00      	bge.n	800b218 <lv_obj_refr_pos+0x3a0>
 800b216:	3301      	adds	r3, #1
 800b218:	105b      	asrs	r3, r3, #1
 800b21a:	b21b      	sxth	r3, r3
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	b29a      	uxth	r2, r3
 800b222:	8bfb      	ldrh	r3, [r7, #30]
 800b224:	4413      	add	r3, r2
 800b226:	b29b      	uxth	r3, r3
 800b228:	83fb      	strh	r3, [r7, #30]
                y += ph / 2 - h / 2;
 800b22a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	da00      	bge.n	800b234 <lv_obj_refr_pos+0x3bc>
 800b232:	3301      	adds	r3, #1
 800b234:	105b      	asrs	r3, r3, #1
 800b236:	b21b      	sxth	r3, r3
 800b238:	b29a      	uxth	r2, r3
 800b23a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	da00      	bge.n	800b244 <lv_obj_refr_pos+0x3cc>
 800b242:	3301      	adds	r3, #1
 800b244:	105b      	asrs	r3, r3, #1
 800b246:	b21b      	sxth	r3, r3
 800b248:	b29b      	uxth	r3, r3
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	8bbb      	ldrh	r3, [r7, #28]
 800b250:	4413      	add	r3, r2
 800b252:	b29b      	uxth	r3, r3
 800b254:	83bb      	strh	r3, [r7, #28]
                break;
 800b256:	e000      	b.n	800b25a <lv_obj_refr_pos+0x3e2>
            default:
                break;
 800b258:	bf00      	nop
        }
        lv_obj_move_to(obj, x, y);
 800b25a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b25e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b262:	4619      	mov	r1, r3
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f805 	bl	800b274 <lv_obj_move_to>
 800b26a:	e000      	b.n	800b26e <lv_obj_refr_pos+0x3f6>
    if(lv_obj_is_layout_positioned(obj)) return;
 800b26c:	bf00      	nop
    }
}
 800b26e:	3720      	adds	r7, #32
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <lv_obj_move_to>:

void lv_obj_move_to(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 800b274:	b590      	push	{r4, r7, lr}
 800b276:	b08d      	sub	sp, #52	; 0x34
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	460b      	mov	r3, r1
 800b27e:	807b      	strh	r3, [r7, #2]
 800b280:	4613      	mov	r3, r2
 800b282:	803b      	strh	r3, [r7, #0]
    /*Convert x and y to absolute coordinates*/
    lv_obj_t * parent = obj->parent;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	62bb      	str	r3, [r7, #40]	; 0x28

    if(parent) {
 800b28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d05a      	beq.n	800b346 <lv_obj_move_to+0xd2>
        lv_coord_t pad_left = lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 800b290:	2100      	movs	r1, #0
 800b292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b294:	f7ff f929 	bl	800a4ea <lv_obj_get_style_pad_left>
 800b298:	4603      	mov	r3, r0
 800b29a:	84fb      	strh	r3, [r7, #38]	; 0x26
        lv_coord_t pad_top = lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 800b29c:	2100      	movs	r1, #0
 800b29e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2a0:	f7ff f8ff 	bl	800a4a2 <lv_obj_get_style_pad_top>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	84bb      	strh	r3, [r7, #36]	; 0x24

        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 800b2a8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f7fc fe8e 	bl	8007fce <lv_obj_has_flag>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d016      	beq.n	800b2e6 <lv_obj_move_to+0x72>
            x += pad_left + parent->coords.x1;
 800b2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b2c2:	4413      	add	r3, r2
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	887b      	ldrh	r3, [r7, #2]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	807b      	strh	r3, [r7, #2]
            y += pad_top + parent->coords.y1;
 800b2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2d8:	4413      	add	r3, r2
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	883b      	ldrh	r3, [r7, #0]
 800b2de:	4413      	add	r3, r2
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	803b      	strh	r3, [r7, #0]
 800b2e4:	e01f      	b.n	800b326 <lv_obj_move_to+0xb2>
        }
        else {
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 800b2e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b2ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2ec:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800b2f0:	189c      	adds	r4, r3, r2
 800b2f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2f4:	f001 f968 	bl	800c5c8 <lv_obj_get_scroll_x>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	1ae3      	subs	r3, r4, r3
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	887b      	ldrh	r3, [r7, #2]
 800b300:	4413      	add	r3, r2
 800b302:	b29b      	uxth	r3, r3
 800b304:	807b      	strh	r3, [r7, #2]
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 800b306:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b30a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b30c:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 800b310:	189c      	adds	r4, r3, r2
 800b312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b314:	f001 f970 	bl	800c5f8 <lv_obj_get_scroll_y>
 800b318:	4603      	mov	r3, r0
 800b31a:	1ae3      	subs	r3, r4, r3
 800b31c:	b29a      	uxth	r2, r3
 800b31e:	883b      	ldrh	r3, [r7, #0]
 800b320:	4413      	add	r3, r2
 800b322:	b29b      	uxth	r3, r3
 800b324:	803b      	strh	r3, [r7, #0]
        }

        lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 800b326:	2100      	movs	r1, #0
 800b328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b32a:	f7ff f902 	bl	800a532 <lv_obj_get_style_border_width>
 800b32e:	4603      	mov	r3, r0
 800b330:	847b      	strh	r3, [r7, #34]	; 0x22
        x += border_width;
 800b332:	887a      	ldrh	r2, [r7, #2]
 800b334:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b336:	4413      	add	r3, r2
 800b338:	b29b      	uxth	r3, r3
 800b33a:	807b      	strh	r3, [r7, #2]
        y += border_width;
 800b33c:	883a      	ldrh	r2, [r7, #0]
 800b33e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b340:	4413      	add	r3, r2
 800b342:	b29b      	uxth	r3, r3
 800b344:	803b      	strh	r3, [r7, #0]
    }

    /*Calculate and set the movement*/
    lv_point_t diff;
    diff.x = x - obj->coords.x1;
 800b346:	887a      	ldrh	r2, [r7, #2]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b34e:	b29b      	uxth	r3, r3
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	b29b      	uxth	r3, r3
 800b354:	b21b      	sxth	r3, r3
 800b356:	83bb      	strh	r3, [r7, #28]
    diff.y = y - obj->coords.y1;
 800b358:	883a      	ldrh	r2, [r7, #0]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b360:	b29b      	uxth	r3, r3
 800b362:	1ad3      	subs	r3, r2, r3
 800b364:	b29b      	uxth	r3, r3
 800b366:	b21b      	sxth	r3, r3
 800b368:	83fb      	strh	r3, [r7, #30]

    /*Do nothing if the position is not changed*/
    /*It is very important else recursive positioning can
     *occur without position change*/
    if(diff.x == 0 && diff.y == 0) return;
 800b36a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d104      	bne.n	800b37c <lv_obj_move_to+0x108>
 800b372:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b376:	2b00      	cmp	r3, #0
 800b378:	f000 808e 	beq.w	800b498 <lv_obj_move_to+0x224>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 fa22 	bl	800b7c6 <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 800b382:	f107 0314 	add.w	r3, r7, #20
 800b386:	4619      	mov	r1, r3
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f7ff fc42 	bl	800ac12 <lv_obj_get_coords>

    /*Check if the object inside the parent or not*/
    lv_area_t parent_fit_area;
    bool on1 = false;
 800b38e:	2300      	movs	r3, #0
 800b390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(parent) {
 800b394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b396:	2b00      	cmp	r3, #0
 800b398:	d01a      	beq.n	800b3d0 <lv_obj_move_to+0x15c>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 800b39a:	f107 030c 	add.w	r3, r7, #12
 800b39e:	4619      	mov	r1, r3
 800b3a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3a2:	f7ff fcb7 	bl	800ad14 <lv_obj_get_content_coords>

        /*If the object is already out of the parent and its position is changes
         *surely the scrollbars also changes so invalidate them*/
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 800b3a6:	f107 010c 	add.w	r1, r7, #12
 800b3aa:	f107 0314 	add.w	r3, r7, #20
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f017 fc63 	bl	8022c7c <_lv_area_is_in>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 800b3bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3c0:	f083 0301 	eor.w	r3, r3, #1
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d002      	beq.n	800b3d0 <lv_obj_move_to+0x15c>
 800b3ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3cc:	f002 fb98 	bl	800db00 <lv_obj_scrollbar_invalidate>
    }

    obj->coords.x1 += diff.x;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	4413      	add	r3, r2
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	b21a      	sxth	r2, r3
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	829a      	strh	r2, [r3, #20]
    obj->coords.y1 += diff.y;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	4413      	add	r3, r2
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	b21a      	sxth	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	82da      	strh	r2, [r3, #22]
    obj->coords.x2 += diff.x;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b406:	b29a      	uxth	r2, r3
 800b408:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	4413      	add	r3, r2
 800b410:	b29b      	uxth	r3, r3
 800b412:	b21a      	sxth	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	831a      	strh	r2, [r3, #24]
    obj->coords.y2 += diff.y;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b41e:	b29a      	uxth	r2, r3
 800b420:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b424:	b29b      	uxth	r3, r3
 800b426:	4413      	add	r3, r2
 800b428:	b29b      	uxth	r3, r3
 800b42a:	b21a      	sxth	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	835a      	strh	r2, [r3, #26]

    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 800b430:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800b434:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b438:	2300      	movs	r3, #0
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f830 	bl	800b4a0 <lv_obj_move_children_by>

    /*Call the ancestor's event handler to the parent too*/
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 800b440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b442:	2b00      	cmp	r3, #0
 800b444:	d004      	beq.n	800b450 <lv_obj_move_to+0x1dc>
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	2122      	movs	r1, #34	; 0x22
 800b44a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b44c:	f7fb fbe6 	bl	8006c1c <lv_event_send>

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 f9b8 	bl	800b7c6 <lv_obj_invalidate>

    /*If the object was out of the parent invalidate the new scrollbar area too.
     *If it wasn't out of the parent but out now, also invalidate the srollbars*/
    if(parent) {
 800b456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d01e      	beq.n	800b49a <lv_obj_move_to+0x226>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	3314      	adds	r3, #20
 800b460:	f107 010c 	add.w	r1, r7, #12
 800b464:	2200      	movs	r2, #0
 800b466:	4618      	mov	r0, r3
 800b468:	f017 fc08 	bl	8022c7c <_lv_area_is_in>
 800b46c:	4603      	mov	r3, r0
 800b46e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 800b472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10a      	bne.n	800b490 <lv_obj_move_to+0x21c>
 800b47a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b47e:	f083 0301 	eor.w	r3, r3, #1
 800b482:	b2db      	uxtb	r3, r3
 800b484:	2b00      	cmp	r3, #0
 800b486:	d008      	beq.n	800b49a <lv_obj_move_to+0x226>
 800b488:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d004      	beq.n	800b49a <lv_obj_move_to+0x226>
 800b490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b492:	f002 fb35 	bl	800db00 <lv_obj_scrollbar_invalidate>
 800b496:	e000      	b.n	800b49a <lv_obj_move_to+0x226>
    if(diff.x == 0 && diff.y == 0) return;
 800b498:	bf00      	nop
    }
}
 800b49a:	3734      	adds	r7, #52	; 0x34
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd90      	pop	{r4, r7, pc}

0800b4a0 <lv_obj_move_children_by>:

void lv_obj_move_children_by(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff, bool ignore_floating)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b088      	sub	sp, #32
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	4608      	mov	r0, r1
 800b4aa:	4611      	mov	r1, r2
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	817b      	strh	r3, [r7, #10]
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	813b      	strh	r3, [r7, #8]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	71fb      	strb	r3, [r7, #7]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	f004 fe30 	bl	8010120 <lv_obj_get_child_cnt>
 800b4c0:	61b8      	str	r0, [r7, #24]
    for(i = 0; i < child_cnt; i++) {
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	61fb      	str	r3, [r7, #28]
 800b4c6:	e047      	b.n	800b558 <lv_obj_move_children_by+0xb8>
        lv_obj_t * child = obj->spec_attr->children[i];
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	4413      	add	r3, r2
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	617b      	str	r3, [r7, #20]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 800b4d8:	79fb      	ldrb	r3, [r7, #7]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d007      	beq.n	800b4ee <lv_obj_move_children_by+0x4e>
 800b4de:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800b4e2:	6978      	ldr	r0, [r7, #20]
 800b4e4:	f7fc fd73 	bl	8007fce <lv_obj_has_flag>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d130      	bne.n	800b550 <lv_obj_move_children_by+0xb0>
        child->coords.x1 += x_diff;
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	897b      	ldrh	r3, [r7, #10]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	b21a      	sxth	r2, r3
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	829a      	strh	r2, [r3, #20]
        child->coords.y1 += y_diff;
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b508:	b29a      	uxth	r2, r3
 800b50a:	893b      	ldrh	r3, [r7, #8]
 800b50c:	4413      	add	r3, r2
 800b50e:	b29b      	uxth	r3, r3
 800b510:	b21a      	sxth	r2, r3
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	82da      	strh	r2, [r3, #22]
        child->coords.x2 += x_diff;
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	897b      	ldrh	r3, [r7, #10]
 800b520:	4413      	add	r3, r2
 800b522:	b29b      	uxth	r3, r3
 800b524:	b21a      	sxth	r2, r3
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	831a      	strh	r2, [r3, #24]
        child->coords.y2 += y_diff;
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800b530:	b29a      	uxth	r2, r3
 800b532:	893b      	ldrh	r3, [r7, #8]
 800b534:	4413      	add	r3, r2
 800b536:	b29b      	uxth	r3, r3
 800b538:	b21a      	sxth	r2, r3
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	835a      	strh	r2, [r3, #26]

        lv_obj_move_children_by(child, x_diff, y_diff, false);
 800b53e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b542:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800b546:	2300      	movs	r3, #0
 800b548:	6978      	ldr	r0, [r7, #20]
 800b54a:	f7ff ffa9 	bl	800b4a0 <lv_obj_move_children_by>
 800b54e:	e000      	b.n	800b552 <lv_obj_move_children_by+0xb2>
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 800b550:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	3301      	adds	r3, #1
 800b556:	61fb      	str	r3, [r7, #28]
 800b558:	69fa      	ldr	r2, [r7, #28]
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d3b3      	bcc.n	800b4c8 <lv_obj_move_children_by+0x28>
    }
}
 800b560:	bf00      	nop
 800b562:	bf00      	nop
 800b564:	3720      	adds	r7, #32
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <lv_obj_transform_point>:

void lv_obj_transform_point(const lv_obj_t * obj, lv_point_t * p, bool recursive, bool inv)
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b086      	sub	sp, #24
 800b56e:	af00      	add	r7, sp, #0
 800b570:	60f8      	str	r0, [r7, #12]
 800b572:	60b9      	str	r1, [r7, #8]
 800b574:	4611      	mov	r1, r2
 800b576:	461a      	mov	r2, r3
 800b578:	460b      	mov	r3, r1
 800b57a:	71fb      	strb	r3, [r7, #7]
 800b57c:	4613      	mov	r3, r2
 800b57e:	71bb      	strb	r3, [r7, #6]
    if(obj) {
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d036      	beq.n	800b5f4 <lv_obj_transform_point+0x8a>
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f7fe fe1a 	bl	800a1c0 <_lv_obj_get_layer_type>
 800b58c:	4603      	mov	r3, r0
 800b58e:	75fb      	strb	r3, [r7, #23]
        bool do_tranf = layer_type == LV_LAYER_TYPE_TRANSFORM;
 800b590:	7dfb      	ldrb	r3, [r7, #23]
 800b592:	2b02      	cmp	r3, #2
 800b594:	bf0c      	ite	eq
 800b596:	2301      	moveq	r3, #1
 800b598:	2300      	movne	r3, #0
 800b59a:	75bb      	strb	r3, [r7, #22]
        if(inv) {
 800b59c:	79bb      	ldrb	r3, [r7, #6]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d014      	beq.n	800b5cc <lv_obj_transform_point+0x62>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 800b5a2:	79fb      	ldrb	r3, [r7, #7]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d007      	beq.n	800b5b8 <lv_obj_transform_point+0x4e>
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f004 fd75 	bl	8010098 <lv_obj_get_parent>
 800b5ae:	79bb      	ldrb	r3, [r7, #6]
 800b5b0:	79fa      	ldrb	r2, [r7, #7]
 800b5b2:	68b9      	ldr	r1, [r7, #8]
 800b5b4:	f7ff ffd9 	bl	800b56a <lv_obj_transform_point>
            if(do_tranf) transform_point(obj, p, inv);
 800b5b8:	7dbb      	ldrb	r3, [r7, #22]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d01a      	beq.n	800b5f4 <lv_obj_transform_point+0x8a>
 800b5be:	79bb      	ldrb	r3, [r7, #6]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	68b9      	ldr	r1, [r7, #8]
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f000 fd8d 	bl	800c0e4 <transform_point>
        else {
            if(do_tranf) transform_point(obj, p, inv);
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
        }
    }
}
 800b5ca:	e013      	b.n	800b5f4 <lv_obj_transform_point+0x8a>
            if(do_tranf) transform_point(obj, p, inv);
 800b5cc:	7dbb      	ldrb	r3, [r7, #22]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d005      	beq.n	800b5de <lv_obj_transform_point+0x74>
 800b5d2:	79bb      	ldrb	r3, [r7, #6]
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	68b9      	ldr	r1, [r7, #8]
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	f000 fd83 	bl	800c0e4 <transform_point>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 800b5de:	79fb      	ldrb	r3, [r7, #7]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d007      	beq.n	800b5f4 <lv_obj_transform_point+0x8a>
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f004 fd57 	bl	8010098 <lv_obj_get_parent>
 800b5ea:	79bb      	ldrb	r3, [r7, #6]
 800b5ec:	79fa      	ldrb	r2, [r7, #7]
 800b5ee:	68b9      	ldr	r1, [r7, #8]
 800b5f0:	f7ff ffbb 	bl	800b56a <lv_obj_transform_point>
}
 800b5f4:	bf00      	nop
 800b5f6:	3718      	adds	r7, #24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <lv_obj_get_transformed_area>:

void lv_obj_get_transformed_area(const lv_obj_t * obj, lv_area_t * area, bool recursive,
                                 bool inv)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b088      	sub	sp, #32
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	4611      	mov	r1, r2
 800b608:	461a      	mov	r2, r3
 800b60a:	460b      	mov	r3, r1
 800b60c:	71fb      	strb	r3, [r7, #7]
 800b60e:	4613      	mov	r3, r2
 800b610:	71bb      	strb	r3, [r7, #6]
    lv_point_t p[4] = {
        {area->x1, area->y1},
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	f9b3 3000 	ldrsh.w	r3, [r3]
    lv_point_t p[4] = {
 800b618:	823b      	strh	r3, [r7, #16]
        {area->x1, area->y1},
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    lv_point_t p[4] = {
 800b620:	827b      	strh	r3, [r7, #18]
        {area->x1, area->y2},
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	f9b3 3000 	ldrsh.w	r3, [r3]
    lv_point_t p[4] = {
 800b628:	82bb      	strh	r3, [r7, #20]
        {area->x1, area->y2},
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    lv_point_t p[4] = {
 800b630:	82fb      	strh	r3, [r7, #22]
        {area->x2, area->y1},
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    lv_point_t p[4] = {
 800b638:	833b      	strh	r3, [r7, #24]
        {area->x2, area->y1},
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    lv_point_t p[4] = {
 800b640:	837b      	strh	r3, [r7, #26]
        {area->x2, area->y2},
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    lv_point_t p[4] = {
 800b648:	83bb      	strh	r3, [r7, #28]
        {area->x2, area->y2},
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    lv_point_t p[4] = {
 800b650:	83fb      	strh	r3, [r7, #30]
    };

    lv_obj_transform_point(obj, &p[0], recursive, inv);
 800b652:	79bb      	ldrb	r3, [r7, #6]
 800b654:	79fa      	ldrb	r2, [r7, #7]
 800b656:	f107 0110 	add.w	r1, r7, #16
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff ff85 	bl	800b56a <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[1], recursive, inv);
 800b660:	79b8      	ldrb	r0, [r7, #6]
 800b662:	79fa      	ldrb	r2, [r7, #7]
 800b664:	f107 0310 	add.w	r3, r7, #16
 800b668:	1d19      	adds	r1, r3, #4
 800b66a:	4603      	mov	r3, r0
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f7ff ff7c 	bl	800b56a <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[2], recursive, inv);
 800b672:	79b8      	ldrb	r0, [r7, #6]
 800b674:	79fa      	ldrb	r2, [r7, #7]
 800b676:	f107 0310 	add.w	r3, r7, #16
 800b67a:	f103 0108 	add.w	r1, r3, #8
 800b67e:	4603      	mov	r3, r0
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f7ff ff72 	bl	800b56a <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[3], recursive, inv);
 800b686:	79b8      	ldrb	r0, [r7, #6]
 800b688:	79fa      	ldrb	r2, [r7, #7]
 800b68a:	f107 0310 	add.w	r3, r7, #16
 800b68e:	f103 010c 	add.w	r1, r3, #12
 800b692:	4603      	mov	r3, r0
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f7ff ff68 	bl	800b56a <lv_obj_transform_point>

    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 800b69a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b69e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	bfa8      	it	ge
 800b6a6:	4613      	movge	r3, r2
 800b6a8:	b21a      	sxth	r2, r3
 800b6aa:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800b6ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b6b2:	428b      	cmp	r3, r1
 800b6b4:	bfa8      	it	ge
 800b6b6:	460b      	movge	r3, r1
 800b6b8:	b21b      	sxth	r3, r3
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	bfa8      	it	ge
 800b6be:	4613      	movge	r3, r2
 800b6c0:	b21a      	sxth	r2, r3
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	801a      	strh	r2, [r3, #0]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 800b6c6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b6ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	bfb8      	it	lt
 800b6d2:	4613      	movlt	r3, r2
 800b6d4:	b21a      	sxth	r2, r3
 800b6d6:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800b6da:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b6de:	428b      	cmp	r3, r1
 800b6e0:	bfb8      	it	lt
 800b6e2:	460b      	movlt	r3, r1
 800b6e4:	b21b      	sxth	r3, r3
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	bfb8      	it	lt
 800b6ea:	4613      	movlt	r3, r2
 800b6ec:	b21a      	sxth	r2, r3
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	809a      	strh	r2, [r3, #4]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 800b6f2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b6f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	bfa8      	it	ge
 800b6fe:	4613      	movge	r3, r2
 800b700:	b21a      	sxth	r2, r3
 800b702:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800b706:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b70a:	428b      	cmp	r3, r1
 800b70c:	bfa8      	it	ge
 800b70e:	460b      	movge	r3, r1
 800b710:	b21b      	sxth	r3, r3
 800b712:	4293      	cmp	r3, r2
 800b714:	bfa8      	it	ge
 800b716:	4613      	movge	r3, r2
 800b718:	b21a      	sxth	r2, r3
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	805a      	strh	r2, [r3, #2]
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 800b71e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b722:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b726:	4293      	cmp	r3, r2
 800b728:	bfb8      	it	lt
 800b72a:	4613      	movlt	r3, r2
 800b72c:	b21a      	sxth	r2, r3
 800b72e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800b732:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b736:	428b      	cmp	r3, r1
 800b738:	bfb8      	it	lt
 800b73a:	460b      	movlt	r3, r1
 800b73c:	b21b      	sxth	r3, r3
 800b73e:	4293      	cmp	r3, r2
 800b740:	bfb8      	it	lt
 800b742:	4613      	movlt	r3, r2
 800b744:	b21a      	sxth	r2, r3
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	80da      	strh	r2, [r3, #6]
    lv_area_increase(area, 5, 5);
 800b74a:	2205      	movs	r2, #5
 800b74c:	2105      	movs	r1, #5
 800b74e:	68b8      	ldr	r0, [r7, #8]
 800b750:	f017 f844 	bl	80227dc <lv_area_increase>
}
 800b754:	bf00      	nop
 800b756:	3720      	adds	r7, #32
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <lv_obj_invalidate_area>:


void lv_obj_invalidate_area(const lv_obj_t * obj, const lv_area_t * area)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b086      	sub	sp, #24
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_disp_t * disp   = lv_obj_get_disp(obj);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f004 fc5c 	bl	8010024 <lv_obj_get_disp>
 800b76c:	6178      	str	r0, [r7, #20]
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800b76e:	6978      	ldr	r0, [r7, #20]
 800b770:	f7fb f94a 	bl	8006a08 <lv_disp_is_invalidation_enabled>
 800b774:	4603      	mov	r3, r0
 800b776:	f083 0301 	eor.w	r3, r3, #1
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d11c      	bne.n	800b7ba <lv_obj_invalidate_area+0x5e>

    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, area);
 800b780:	f107 030c 	add.w	r3, r7, #12
 800b784:	6839      	ldr	r1, [r7, #0]
 800b786:	4618      	mov	r0, r3
 800b788:	f7fe fd30 	bl	800a1ec <lv_area_copy>
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 800b78c:	f107 030c 	add.w	r3, r7, #12
 800b790:	4619      	mov	r1, r3
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f853 	bl	800b83e <lv_obj_area_is_visible>
 800b798:	4603      	mov	r3, r0
 800b79a:	f083 0301 	eor.w	r3, r3, #1
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d10c      	bne.n	800b7be <lv_obj_invalidate_area+0x62>

    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f004 fc3d 	bl	8010024 <lv_obj_get_disp>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	f107 030c 	add.w	r3, r7, #12
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4610      	mov	r0, r2
 800b7b4:	f004 ff52 	bl	801065c <_lv_inv_area>
 800b7b8:	e002      	b.n	800b7c0 <lv_obj_invalidate_area+0x64>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800b7ba:	bf00      	nop
 800b7bc:	e000      	b.n	800b7c0 <lv_obj_invalidate_area+0x64>
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 800b7be:	bf00      	nop
}
 800b7c0:	3718      	adds	r7, #24
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <lv_obj_invalidate>:

void lv_obj_invalidate(const lv_obj_t * obj)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b086      	sub	sp, #24
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*Truncate the area to the object*/
    lv_area_t obj_coords;
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7fe fce2 	bl	800a198 <_lv_obj_get_ext_draw_size>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	82fb      	strh	r3, [r7, #22]
    lv_area_copy(&obj_coords, &obj->coords);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f103 0214 	add.w	r2, r3, #20
 800b7de:	f107 030c 	add.w	r3, r7, #12
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7fe fd01 	bl	800a1ec <lv_area_copy>
    obj_coords.x1 -= ext_size;
 800b7ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	8afb      	ldrh	r3, [r7, #22]
 800b7f2:	1ad3      	subs	r3, r2, r3
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	b21b      	sxth	r3, r3
 800b7f8:	81bb      	strh	r3, [r7, #12]
    obj_coords.y1 -= ext_size;
 800b7fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	8afb      	ldrh	r3, [r7, #22]
 800b802:	1ad3      	subs	r3, r2, r3
 800b804:	b29b      	uxth	r3, r3
 800b806:	b21b      	sxth	r3, r3
 800b808:	81fb      	strh	r3, [r7, #14]
    obj_coords.x2 += ext_size;
 800b80a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b80e:	b29a      	uxth	r2, r3
 800b810:	8afb      	ldrh	r3, [r7, #22]
 800b812:	4413      	add	r3, r2
 800b814:	b29b      	uxth	r3, r3
 800b816:	b21b      	sxth	r3, r3
 800b818:	823b      	strh	r3, [r7, #16]
    obj_coords.y2 += ext_size;
 800b81a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b81e:	b29a      	uxth	r2, r3
 800b820:	8afb      	ldrh	r3, [r7, #22]
 800b822:	4413      	add	r3, r2
 800b824:	b29b      	uxth	r3, r3
 800b826:	b21b      	sxth	r3, r3
 800b828:	827b      	strh	r3, [r7, #18]

    lv_obj_invalidate_area(obj, &obj_coords);
 800b82a:	f107 030c 	add.w	r3, r7, #12
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7ff ff93 	bl	800b75c <lv_obj_invalidate_area>

}
 800b836:	bf00      	nop
 800b838:	3718      	adds	r7, #24
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <lv_obj_area_is_visible>:

bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b08a      	sub	sp, #40	; 0x28
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	6039      	str	r1, [r7, #0]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 800b848:	2101      	movs	r1, #1
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f7fc fbbf 	bl	8007fce <lv_obj_has_flag>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d001      	beq.n	800b85a <lv_obj_area_is_visible+0x1c>
 800b856:	2300      	movs	r3, #0
 800b858:	e0b2      	b.n	800b9c0 <lv_obj_area_is_visible+0x182>

    /*Invalidate the object only if it belongs to the current or previous or one of the layers'*/
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f004 fbcd 	bl	800fffa <lv_obj_get_screen>
 800b860:	6238      	str	r0, [r7, #32]
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 800b862:	6a38      	ldr	r0, [r7, #32]
 800b864:	f004 fbde 	bl	8010024 <lv_obj_get_disp>
 800b868:	61f8      	str	r0, [r7, #28]
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 800b86a:	69f8      	ldr	r0, [r7, #28]
 800b86c:	f7fa fdd2 	bl	8006414 <lv_disp_get_scr_act>
 800b870:	4602      	mov	r2, r0
 800b872:	6a3b      	ldr	r3, [r7, #32]
 800b874:	4293      	cmp	r3, r2
 800b876:	d016      	beq.n	800b8a6 <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 800b878:	69f8      	ldr	r0, [r7, #28]
 800b87a:	f7fa fde0 	bl	800643e <lv_disp_get_scr_prev>
 800b87e:	4602      	mov	r2, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 800b880:	6a3b      	ldr	r3, [r7, #32]
 800b882:	4293      	cmp	r3, r2
 800b884:	d00f      	beq.n	800b8a6 <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_layer_top(disp) &&
 800b886:	69f8      	ldr	r0, [r7, #28]
 800b888:	f7fa fdfe 	bl	8006488 <lv_disp_get_layer_top>
 800b88c:	4602      	mov	r2, r0
       obj_scr != lv_disp_get_scr_prev(disp) &&
 800b88e:	6a3b      	ldr	r3, [r7, #32]
 800b890:	4293      	cmp	r3, r2
 800b892:	d008      	beq.n	800b8a6 <lv_obj_area_is_visible+0x68>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 800b894:	69f8      	ldr	r0, [r7, #28]
 800b896:	f7fa fe0c 	bl	80064b2 <lv_disp_get_layer_sys>
 800b89a:	4602      	mov	r2, r0
       obj_scr != lv_disp_get_layer_top(disp) &&
 800b89c:	6a3b      	ldr	r3, [r7, #32]
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d001      	beq.n	800b8a6 <lv_obj_area_is_visible+0x68>
        return false;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	e08c      	b.n	800b9c0 <lv_obj_area_is_visible+0x182>
    }

    /*Truncate the area to the object*/
    if(!lv_obj_has_flag_any(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800b8a6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7fc fba4 	bl	8007ff8 <lv_obj_has_flag_any>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	f083 0301 	eor.w	r3, r3, #1
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d03c      	beq.n	800b936 <lv_obj_area_is_visible+0xf8>
        lv_area_t obj_coords;
        lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f7fe fc6b 	bl	800a198 <_lv_obj_get_ext_draw_size>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	837b      	strh	r3, [r7, #26]
        lv_area_copy(&obj_coords, &obj->coords);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f103 0214 	add.w	r2, r3, #20
 800b8cc:	f107 0310 	add.w	r3, r7, #16
 800b8d0:	4611      	mov	r1, r2
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7fe fc8a 	bl	800a1ec <lv_area_copy>
        obj_coords.x1 -= ext_size;
 800b8d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	8b7b      	ldrh	r3, [r7, #26]
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	b21b      	sxth	r3, r3
 800b8e6:	823b      	strh	r3, [r7, #16]
        obj_coords.y1 -= ext_size;
 800b8e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b8ec:	b29a      	uxth	r2, r3
 800b8ee:	8b7b      	ldrh	r3, [r7, #26]
 800b8f0:	1ad3      	subs	r3, r2, r3
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	b21b      	sxth	r3, r3
 800b8f6:	827b      	strh	r3, [r7, #18]
        obj_coords.x2 += ext_size;
 800b8f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b8fc:	b29a      	uxth	r2, r3
 800b8fe:	8b7b      	ldrh	r3, [r7, #26]
 800b900:	4413      	add	r3, r2
 800b902:	b29b      	uxth	r3, r3
 800b904:	b21b      	sxth	r3, r3
 800b906:	82bb      	strh	r3, [r7, #20]
        obj_coords.y2 += ext_size;
 800b908:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	8b7b      	ldrh	r3, [r7, #26]
 800b910:	4413      	add	r3, r2
 800b912:	b29b      	uxth	r3, r3
 800b914:	b21b      	sxth	r3, r3
 800b916:	82fb      	strh	r3, [r7, #22]

        /*The area is not on the object*/
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 800b918:	f107 0310 	add.w	r3, r7, #16
 800b91c:	461a      	mov	r2, r3
 800b91e:	6839      	ldr	r1, [r7, #0]
 800b920:	6838      	ldr	r0, [r7, #0]
 800b922:	f016 ffc7 	bl	80228b4 <_lv_area_intersect>
 800b926:	4603      	mov	r3, r0
 800b928:	f083 0301 	eor.w	r3, r3, #1
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d001      	beq.n	800b936 <lv_obj_area_is_visible+0xf8>
 800b932:	2300      	movs	r3, #0
 800b934:	e044      	b.n	800b9c0 <lv_obj_area_is_visible+0x182>
    }

    lv_obj_get_transformed_area(obj, area, true, false);
 800b936:	2300      	movs	r3, #0
 800b938:	2201      	movs	r2, #1
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f7ff fe5d 	bl	800b5fc <lv_obj_get_transformed_area>


    /*Truncate recursively to the parents*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f004 fba8 	bl	8010098 <lv_obj_get_parent>
 800b948:	6278      	str	r0, [r7, #36]	; 0x24
    while(par != NULL) {
 800b94a:	e035      	b.n	800b9b8 <lv_obj_area_is_visible+0x17a>
        /*If the parent is hidden then the child is hidden and won't be drawn*/
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 800b94c:	2101      	movs	r1, #1
 800b94e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b950:	f7fc fb3d 	bl	8007fce <lv_obj_has_flag>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d001      	beq.n	800b95e <lv_obj_area_is_visible+0x120>
 800b95a:	2300      	movs	r3, #0
 800b95c:	e030      	b.n	800b9c0 <lv_obj_area_is_visible+0x182>

        /*Truncate to the parent and if no common parts break*/
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800b95e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b962:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b964:	f7fc fb48 	bl	8007ff8 <lv_obj_has_flag_any>
 800b968:	4603      	mov	r3, r0
 800b96a:	f083 0301 	eor.w	r3, r3, #1
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	2b00      	cmp	r3, #0
 800b972:	d01d      	beq.n	800b9b0 <lv_obj_area_is_visible+0x172>
            lv_area_t par_area = par->coords;
 800b974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b976:	f107 0308 	add.w	r3, r7, #8
 800b97a:	3214      	adds	r2, #20
 800b97c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b980:	e883 0003 	stmia.w	r3, {r0, r1}
            lv_obj_get_transformed_area(par, &par_area, true, false);
 800b984:	f107 0108 	add.w	r1, r7, #8
 800b988:	2300      	movs	r3, #0
 800b98a:	2201      	movs	r2, #1
 800b98c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b98e:	f7ff fe35 	bl	800b5fc <lv_obj_get_transformed_area>
            if(!_lv_area_intersect(area, area, &par_area)) return false;
 800b992:	f107 0308 	add.w	r3, r7, #8
 800b996:	461a      	mov	r2, r3
 800b998:	6839      	ldr	r1, [r7, #0]
 800b99a:	6838      	ldr	r0, [r7, #0]
 800b99c:	f016 ff8a 	bl	80228b4 <_lv_area_intersect>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	f083 0301 	eor.w	r3, r3, #1
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d001      	beq.n	800b9b0 <lv_obj_area_is_visible+0x172>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	e007      	b.n	800b9c0 <lv_obj_area_is_visible+0x182>
        }

        par = lv_obj_get_parent(par);
 800b9b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9b2:	f004 fb71 	bl	8010098 <lv_obj_get_parent>
 800b9b6:	6278      	str	r0, [r7, #36]	; 0x24
    while(par != NULL) {
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1c6      	bne.n	800b94c <lv_obj_area_is_visible+0x10e>
    }

    return true;
 800b9be:	2301      	movs	r3, #1
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3728      	adds	r7, #40	; 0x28
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <lv_clamp_width>:

    return res;
}

lv_coord_t lv_clamp_width(lv_coord_t width, lv_coord_t min_width, lv_coord_t max_width, lv_coord_t ref_width)
{
 800b9c8:	b490      	push	{r4, r7}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	4608      	mov	r0, r1
 800b9d2:	4611      	mov	r1, r2
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	4623      	mov	r3, r4
 800b9d8:	80fb      	strh	r3, [r7, #6]
 800b9da:	4603      	mov	r3, r0
 800b9dc:	80bb      	strh	r3, [r7, #4]
 800b9de:	460b      	mov	r3, r1
 800b9e0:	807b      	strh	r3, [r7, #2]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	803b      	strh	r3, [r7, #0]
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 800b9e6:	88bb      	ldrh	r3, [r7, #4]
 800b9e8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b9ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9f0:	d123      	bne.n	800ba3a <lv_clamp_width+0x72>
 800b9f2:	88bb      	ldrh	r3, [r7, #4]
 800b9f4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800b9f8:	b21b      	sxth	r3, r3
 800b9fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b9fe:	dc1c      	bgt.n	800ba3a <lv_clamp_width+0x72>
 800ba00:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ba04:	88bb      	ldrh	r3, [r7, #4]
 800ba06:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800ba0a:	b21b      	sxth	r3, r3
 800ba0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba10:	dd06      	ble.n	800ba20 <lv_clamp_width+0x58>
 800ba12:	88bb      	ldrh	r3, [r7, #4]
 800ba14:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800ba18:	b21b      	sxth	r3, r3
 800ba1a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800ba1e:	e003      	b.n	800ba28 <lv_clamp_width+0x60>
 800ba20:	88bb      	ldrh	r3, [r7, #4]
 800ba22:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800ba26:	b21b      	sxth	r3, r3
 800ba28:	fb02 f303 	mul.w	r3, r2, r3
 800ba2c:	4a21      	ldr	r2, [pc, #132]	; (800bab4 <lv_clamp_width+0xec>)
 800ba2e:	fb82 1203 	smull	r1, r2, r2, r3
 800ba32:	1152      	asrs	r2, r2, #5
 800ba34:	17db      	asrs	r3, r3, #31
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	80bb      	strh	r3, [r7, #4]
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 800ba3a:	887b      	ldrh	r3, [r7, #2]
 800ba3c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800ba40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba44:	d123      	bne.n	800ba8e <lv_clamp_width+0xc6>
 800ba46:	887b      	ldrh	r3, [r7, #2]
 800ba48:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800ba4c:	b21b      	sxth	r3, r3
 800ba4e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ba52:	dc1c      	bgt.n	800ba8e <lv_clamp_width+0xc6>
 800ba54:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ba58:	887b      	ldrh	r3, [r7, #2]
 800ba5a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800ba5e:	b21b      	sxth	r3, r3
 800ba60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba64:	dd06      	ble.n	800ba74 <lv_clamp_width+0xac>
 800ba66:	887b      	ldrh	r3, [r7, #2]
 800ba68:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800ba6c:	b21b      	sxth	r3, r3
 800ba6e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800ba72:	e003      	b.n	800ba7c <lv_clamp_width+0xb4>
 800ba74:	887b      	ldrh	r3, [r7, #2]
 800ba76:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800ba7a:	b21b      	sxth	r3, r3
 800ba7c:	fb02 f303 	mul.w	r3, r2, r3
 800ba80:	4a0c      	ldr	r2, [pc, #48]	; (800bab4 <lv_clamp_width+0xec>)
 800ba82:	fb82 1203 	smull	r1, r2, r2, r3
 800ba86:	1152      	asrs	r2, r2, #5
 800ba88:	17db      	asrs	r3, r3, #31
 800ba8a:	1ad3      	subs	r3, r2, r3
 800ba8c:	807b      	strh	r3, [r7, #2]
    return LV_CLAMP(min_width, width, max_width);
 800ba8e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ba92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ba96:	4293      	cmp	r3, r2
 800ba98:	bfa8      	it	ge
 800ba9a:	4613      	movge	r3, r2
 800ba9c:	b21b      	sxth	r3, r3
 800ba9e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800baa2:	4293      	cmp	r3, r2
 800baa4:	bfb8      	it	lt
 800baa6:	4613      	movlt	r3, r2
 800baa8:	b21b      	sxth	r3, r3
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bc90      	pop	{r4, r7}
 800bab2:	4770      	bx	lr
 800bab4:	51eb851f 	.word	0x51eb851f

0800bab8 <lv_clamp_height>:

lv_coord_t lv_clamp_height(lv_coord_t height, lv_coord_t min_height, lv_coord_t max_height, lv_coord_t ref_height)
{
 800bab8:	b490      	push	{r4, r7}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	4604      	mov	r4, r0
 800bac0:	4608      	mov	r0, r1
 800bac2:	4611      	mov	r1, r2
 800bac4:	461a      	mov	r2, r3
 800bac6:	4623      	mov	r3, r4
 800bac8:	80fb      	strh	r3, [r7, #6]
 800baca:	4603      	mov	r3, r0
 800bacc:	80bb      	strh	r3, [r7, #4]
 800bace:	460b      	mov	r3, r1
 800bad0:	807b      	strh	r3, [r7, #2]
 800bad2:	4613      	mov	r3, r2
 800bad4:	803b      	strh	r3, [r7, #0]
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 800bad6:	88bb      	ldrh	r3, [r7, #4]
 800bad8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800badc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bae0:	d123      	bne.n	800bb2a <lv_clamp_height+0x72>
 800bae2:	88bb      	ldrh	r3, [r7, #4]
 800bae4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800bae8:	b21b      	sxth	r3, r3
 800baea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800baee:	dc1c      	bgt.n	800bb2a <lv_clamp_height+0x72>
 800baf0:	f9b7 2000 	ldrsh.w	r2, [r7]
 800baf4:	88bb      	ldrh	r3, [r7, #4]
 800baf6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800bafa:	b21b      	sxth	r3, r3
 800bafc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb00:	dd06      	ble.n	800bb10 <lv_clamp_height+0x58>
 800bb02:	88bb      	ldrh	r3, [r7, #4]
 800bb04:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800bb08:	b21b      	sxth	r3, r3
 800bb0a:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800bb0e:	e003      	b.n	800bb18 <lv_clamp_height+0x60>
 800bb10:	88bb      	ldrh	r3, [r7, #4]
 800bb12:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800bb16:	b21b      	sxth	r3, r3
 800bb18:	fb02 f303 	mul.w	r3, r2, r3
 800bb1c:	4a21      	ldr	r2, [pc, #132]	; (800bba4 <lv_clamp_height+0xec>)
 800bb1e:	fb82 1203 	smull	r1, r2, r2, r3
 800bb22:	1152      	asrs	r2, r2, #5
 800bb24:	17db      	asrs	r3, r3, #31
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	80bb      	strh	r3, [r7, #4]
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 800bb2a:	887b      	ldrh	r3, [r7, #2]
 800bb2c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800bb30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb34:	d123      	bne.n	800bb7e <lv_clamp_height+0xc6>
 800bb36:	887b      	ldrh	r3, [r7, #2]
 800bb38:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800bb3c:	b21b      	sxth	r3, r3
 800bb3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bb42:	dc1c      	bgt.n	800bb7e <lv_clamp_height+0xc6>
 800bb44:	f9b7 2000 	ldrsh.w	r2, [r7]
 800bb48:	887b      	ldrh	r3, [r7, #2]
 800bb4a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800bb4e:	b21b      	sxth	r3, r3
 800bb50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb54:	dd06      	ble.n	800bb64 <lv_clamp_height+0xac>
 800bb56:	887b      	ldrh	r3, [r7, #2]
 800bb58:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800bb5c:	b21b      	sxth	r3, r3
 800bb5e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800bb62:	e003      	b.n	800bb6c <lv_clamp_height+0xb4>
 800bb64:	887b      	ldrh	r3, [r7, #2]
 800bb66:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800bb6a:	b21b      	sxth	r3, r3
 800bb6c:	fb02 f303 	mul.w	r3, r2, r3
 800bb70:	4a0c      	ldr	r2, [pc, #48]	; (800bba4 <lv_clamp_height+0xec>)
 800bb72:	fb82 1203 	smull	r1, r2, r2, r3
 800bb76:	1152      	asrs	r2, r2, #5
 800bb78:	17db      	asrs	r3, r3, #31
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	807b      	strh	r3, [r7, #2]
    return LV_CLAMP(min_height, height, max_height);
 800bb7e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800bb82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bb86:	4293      	cmp	r3, r2
 800bb88:	bfa8      	it	ge
 800bb8a:	4613      	movge	r3, r2
 800bb8c:	b21b      	sxth	r3, r3
 800bb8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800bb92:	4293      	cmp	r3, r2
 800bb94:	bfb8      	it	lt
 800bb96:	4613      	movlt	r3, r2
 800bb98:	b21b      	sxth	r3, r3
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3708      	adds	r7, #8
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bc90      	pop	{r4, r7}
 800bba2:	4770      	bx	lr
 800bba4:	51eb851f 	.word	0x51eb851f

0800bba8 <calc_content_width>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_coord_t calc_content_width(lv_obj_t * obj)
{
 800bba8:	b590      	push	{r4, r7, lr}
 800bbaa:	b08d      	sub	sp, #52	; 0x34
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f001 f923 	bl	800ce00 <lv_obj_scroll_to_x>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800bbba:	2100      	movs	r1, #0
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f7fe fcb8 	bl	800a532 <lv_obj_get_style_border_width>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f7fe fca0 	bl	800a50e <lv_obj_get_style_pad_right>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bbd4:	4413      	add	r3, r2
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800bbda:	2100      	movs	r1, #0
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f7fe fc84 	bl	800a4ea <lv_obj_get_style_pad_left>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bbe8:	4413      	add	r3, r2
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	847b      	strh	r3, [r7, #34]	; 0x22

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7ff f8ef 	bl	800add2 <lv_obj_get_self_width>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbfa:	4413      	add	r3, r2
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc00:	4413      	add	r3, r2
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	843b      	strh	r3, [r7, #32]

    lv_coord_t child_res = LV_COORD_MIN;
 800bc06:	f24e 0301 	movw	r3, #57345	; 0xe001
 800bc0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f004 fa87 	bl	8010120 <lv_obj_get_child_cnt>
 800bc12:	61f8      	str	r0, [r7, #28]
    /*With RTL find the left most coordinate*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800bc14:	2100      	movs	r1, #0
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f7fe fcaf 	bl	800a57a <lv_obj_get_style_base_dir>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	f040 8094 	bne.w	800bd4c <calc_content_width+0x1a4>
        for(i = 0; i < child_cnt; i++) {
 800bc24:	2300      	movs	r3, #0
 800bc26:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc28:	e07f      	b.n	800bd2a <calc_content_width+0x182>
            lv_obj_t * child = obj->spec_attr->children[i];
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4413      	add	r3, r2
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	613b      	str	r3, [r7, #16]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800bc3a:	4994      	ldr	r1, [pc, #592]	; (800be8c <calc_content_width+0x2e4>)
 800bc3c:	6938      	ldr	r0, [r7, #16]
 800bc3e:	f7fc f9db 	bl	8007ff8 <lv_obj_has_flag_any>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d16c      	bne.n	800bd22 <calc_content_width+0x17a>

            if(!lv_obj_is_layout_positioned(child)) {
 800bc48:	6938      	ldr	r0, [r7, #16]
 800bc4a:	f7fe ff47 	bl	800aadc <lv_obj_is_layout_positioned>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	f083 0301 	eor.w	r3, r3, #1
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d053      	beq.n	800bd02 <calc_content_width+0x15a>
                lv_align_t align = lv_obj_get_style_align(child, 0);
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	6938      	ldr	r0, [r7, #16]
 800bc5e:	f7fe fba2 	bl	800a3a6 <lv_obj_get_style_align>
 800bc62:	4603      	mov	r3, r0
 800bc64:	73fb      	strb	r3, [r7, #15]
                switch(align) {
 800bc66:	7bfb      	ldrb	r3, [r7, #15]
 800bc68:	2b08      	cmp	r3, #8
 800bc6a:	d825      	bhi.n	800bcb8 <calc_content_width+0x110>
 800bc6c:	a201      	add	r2, pc, #4	; (adr r2, 800bc74 <calc_content_width+0xcc>)
 800bc6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc72:	bf00      	nop
 800bc74:	0800bc99 	.word	0x0800bc99
 800bc78:	0800bcb9 	.word	0x0800bcb9
 800bc7c:	0800bcb9 	.word	0x0800bcb9
 800bc80:	0800bc99 	.word	0x0800bc99
 800bc84:	0800bcb9 	.word	0x0800bcb9
 800bc88:	0800bcb9 	.word	0x0800bcb9
 800bc8c:	0800bc99 	.word	0x0800bc99
 800bc90:	0800bcb9 	.word	0x0800bcb9
 800bc94:	0800bc99 	.word	0x0800bc99
                    case LV_ALIGN_DEFAULT:
                    case LV_ALIGN_TOP_RIGHT:
                    case LV_ALIGN_BOTTOM_RIGHT:
                    case LV_ALIGN_RIGHT_MID:
                        /*Normal right aligns. Other are ignored due to possible circular dependencies*/
                        child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	1c5a      	adds	r2, r3, #1
 800bcaa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	bfb8      	it	lt
 800bcb2:	4613      	movlt	r3, r2
 800bcb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        break;
 800bcb6:	e035      	b.n	800bd24 <calc_content_width+0x17c>
                    default:
                        /* Consider other cases only if x=0 and use the width of the object.
                         * With x!=0 circular dependency could occur. */
                        if(lv_obj_get_style_x(child, 0) == 0) {
 800bcb8:	2100      	movs	r1, #0
 800bcba:	6938      	ldr	r0, [r7, #16]
 800bcbc:	f7fe fb4f 	bl	800a35e <lv_obj_get_style_x>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d12e      	bne.n	800bd24 <calc_content_width+0x17c>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 800bcc6:	f9b7 402e 	ldrsh.w	r4, [r7, #46]	; 0x2e
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	3314      	adds	r3, #20
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fe faab 	bl	800a22a <lv_area_get_width>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bcdc:	4413      	add	r3, r2
 800bcde:	429c      	cmp	r4, r3
 800bce0:	dc0b      	bgt.n	800bcfa <calc_content_width+0x152>
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	3314      	adds	r3, #20
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fe fa9f 	bl	800a22a <lv_area_get_width>
 800bcec:	4603      	mov	r3, r0
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcf2:	4413      	add	r3, r2
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	b21b      	sxth	r3, r3
 800bcf8:	e001      	b.n	800bcfe <calc_content_width+0x156>
 800bcfa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bcfe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bd00:	e010      	b.n	800bd24 <calc_content_width+0x17c>
                        }
                }
            }
            else {
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800bd08:	461a      	mov	r2, r3
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	1c5a      	adds	r2, r3, #1
 800bd14:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	bfb8      	it	lt
 800bd1c:	4613      	movlt	r3, r2
 800bd1e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bd20:	e000      	b.n	800bd24 <calc_content_width+0x17c>
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800bd22:	bf00      	nop
        for(i = 0; i < child_cnt; i++) {
 800bd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd26:	3301      	adds	r3, #1
 800bd28:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	f4ff af7b 	bcc.w	800bc2a <calc_content_width+0x82>
            }
        }
        if(child_res != LV_COORD_MIN) {
 800bd34:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bd38:	4a55      	ldr	r2, [pc, #340]	; (800be90 <calc_content_width+0x2e8>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	f000 8092 	beq.w	800be64 <calc_content_width+0x2bc>
            child_res += pad_left;
 800bd40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bd42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd44:	4413      	add	r3, r2
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bd4a:	e08b      	b.n	800be64 <calc_content_width+0x2bc>
        }
    }
    /*Else find the right most coordinate*/
    else {
        for(i = 0; i < child_cnt; i++) {
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd50:	e07a      	b.n	800be48 <calc_content_width+0x2a0>
            lv_obj_t * child = obj->spec_attr->children[i];
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	689b      	ldr	r3, [r3, #8]
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4413      	add	r3, r2
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	61bb      	str	r3, [r7, #24]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800bd62:	494a      	ldr	r1, [pc, #296]	; (800be8c <calc_content_width+0x2e4>)
 800bd64:	69b8      	ldr	r0, [r7, #24]
 800bd66:	f7fc f947 	bl	8007ff8 <lv_obj_has_flag_any>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d167      	bne.n	800be40 <calc_content_width+0x298>

            if(!lv_obj_is_layout_positioned(child)) {
 800bd70:	69b8      	ldr	r0, [r7, #24]
 800bd72:	f7fe feb3 	bl	800aadc <lv_obj_is_layout_positioned>
 800bd76:	4603      	mov	r3, r0
 800bd78:	f083 0301 	eor.w	r3, r3, #1
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d04e      	beq.n	800be20 <calc_content_width+0x278>
                lv_align_t align = lv_obj_get_style_align(child, 0);
 800bd82:	2100      	movs	r1, #0
 800bd84:	69b8      	ldr	r0, [r7, #24]
 800bd86:	f7fe fb0e 	bl	800a3a6 <lv_obj_get_style_align>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	75fb      	strb	r3, [r7, #23]
                switch(align) {
 800bd8e:	7dfb      	ldrb	r3, [r7, #23]
 800bd90:	2b07      	cmp	r3, #7
 800bd92:	bf8c      	ite	hi
 800bd94:	2201      	movhi	r2, #1
 800bd96:	2200      	movls	r2, #0
 800bd98:	b2d2      	uxtb	r2, r2
 800bd9a:	2a00      	cmp	r2, #0
 800bd9c:	d11b      	bne.n	800bdd6 <calc_content_width+0x22e>
 800bd9e:	2201      	movs	r2, #1
 800bda0:	fa02 f303 	lsl.w	r3, r2, r3
 800bda4:	f003 0393 	and.w	r3, r3, #147	; 0x93
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	bf14      	ite	ne
 800bdac:	2301      	movne	r3, #1
 800bdae:	2300      	moveq	r3, #0
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00f      	beq.n	800bdd6 <calc_content_width+0x22e>
                    case LV_ALIGN_DEFAULT:
                    case LV_ALIGN_TOP_LEFT:
                    case LV_ALIGN_BOTTOM_LEFT:
                    case LV_ALIGN_LEFT_MID:
                        /*Normal left aligns.*/
                        child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	1c5a      	adds	r2, r3, #1
 800bdc8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	bfb8      	it	lt
 800bdd0:	4613      	movlt	r3, r2
 800bdd2:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        break;
 800bdd4:	e035      	b.n	800be42 <calc_content_width+0x29a>
                    default:
                        /* Consider other cases only if x=0 and use the width of the object.
                         * With x!=0 circular dependency could occur. */
                        if(lv_obj_get_style_y(child, 0) == 0) {
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	69b8      	ldr	r0, [r7, #24]
 800bdda:	f7fe fad2 	bl	800a382 <lv_obj_get_style_y>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d12e      	bne.n	800be42 <calc_content_width+0x29a>
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 800bde4:	f9b7 402e 	ldrsh.w	r4, [r7, #46]	; 0x2e
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	3314      	adds	r3, #20
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7fe fa1c 	bl	800a22a <lv_area_get_width>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bdfa:	4413      	add	r3, r2
 800bdfc:	429c      	cmp	r4, r3
 800bdfe:	dc0b      	bgt.n	800be18 <calc_content_width+0x270>
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	3314      	adds	r3, #20
 800be04:	4618      	mov	r0, r3
 800be06:	f7fe fa10 	bl	800a22a <lv_area_get_width>
 800be0a:	4603      	mov	r3, r0
 800be0c:	b29a      	uxth	r2, r3
 800be0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be10:	4413      	add	r3, r2
 800be12:	b29b      	uxth	r3, r3
 800be14:	b21b      	sxth	r3, r3
 800be16:	e001      	b.n	800be1c <calc_content_width+0x274>
 800be18:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800be1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800be1e:	e010      	b.n	800be42 <calc_content_width+0x29a>
                        }
                }
            }
            else {
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800be26:	461a      	mov	r2, r3
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800be2e:	1ad3      	subs	r3, r2, r3
 800be30:	1c5a      	adds	r2, r3, #1
 800be32:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800be36:	4293      	cmp	r3, r2
 800be38:	bfb8      	it	lt
 800be3a:	4613      	movlt	r3, r2
 800be3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800be3e:	e000      	b.n	800be42 <calc_content_width+0x29a>
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800be40:	bf00      	nop
        for(i = 0; i < child_cnt; i++) {
 800be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be44:	3301      	adds	r3, #1
 800be46:	62bb      	str	r3, [r7, #40]	; 0x28
 800be48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be4a:	69fb      	ldr	r3, [r7, #28]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d380      	bcc.n	800bd52 <calc_content_width+0x1aa>
            }
        }

        if(child_res != LV_COORD_MIN) {
 800be50:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800be54:	4a0e      	ldr	r2, [pc, #56]	; (800be90 <calc_content_width+0x2e8>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d004      	beq.n	800be64 <calc_content_width+0x2bc>
            child_res += pad_right;
 800be5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800be5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be5e:	4413      	add	r3, r2
 800be60:	b29b      	uxth	r3, r3
 800be62:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
    }

    if(child_res == LV_COORD_MIN) return self_w;
 800be64:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800be68:	4a09      	ldr	r2, [pc, #36]	; (800be90 <calc_content_width+0x2e8>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d102      	bne.n	800be74 <calc_content_width+0x2cc>
 800be6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800be72:	e007      	b.n	800be84 <calc_content_width+0x2dc>
    else return LV_MAX(child_res, self_w);
 800be74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be78:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800be7c:	4293      	cmp	r3, r2
 800be7e:	bfb8      	it	lt
 800be80:	4613      	movlt	r3, r2
 800be82:	b21b      	sxth	r3, r3
}
 800be84:	4618      	mov	r0, r3
 800be86:	3734      	adds	r7, #52	; 0x34
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd90      	pop	{r4, r7, pc}
 800be8c:	00040001 	.word	0x00040001
 800be90:	ffffe001 	.word	0xffffe001

0800be94 <calc_content_height>:

static lv_coord_t calc_content_height(lv_obj_t * obj)
{
 800be94:	b590      	push	{r4, r7, lr}
 800be96:	b08b      	sub	sp, #44	; 0x2c
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 800be9c:	2200      	movs	r2, #0
 800be9e:	2100      	movs	r1, #0
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 ffd1 	bl	800ce48 <lv_obj_scroll_to_y>

    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800bea6:	2100      	movs	r1, #0
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f7fe fb42 	bl	800a532 <lv_obj_get_style_border_width>
 800beae:	4603      	mov	r3, r0
 800beb0:	83fb      	strh	r3, [r7, #30]
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 800beb2:	2100      	movs	r1, #0
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7fe faf4 	bl	800a4a2 <lv_obj_get_style_pad_top>
 800beba:	4603      	mov	r3, r0
 800bebc:	b29a      	uxth	r2, r3
 800bebe:	8bfb      	ldrh	r3, [r7, #30]
 800bec0:	4413      	add	r3, r2
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	83bb      	strh	r3, [r7, #28]
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 800bec6:	2100      	movs	r1, #0
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f7fe fafc 	bl	800a4c6 <lv_obj_get_style_pad_bottom>
 800bece:	4603      	mov	r3, r0
 800bed0:	b29a      	uxth	r2, r3
 800bed2:	8bfb      	ldrh	r3, [r7, #30]
 800bed4:	4413      	add	r3, r2
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	837b      	strh	r3, [r7, #26]

    lv_coord_t self_h;
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f7fe ff8f 	bl	800adfe <lv_obj_get_self_height>
 800bee0:	4603      	mov	r3, r0
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	8bbb      	ldrh	r3, [r7, #28]
 800bee6:	4413      	add	r3, r2
 800bee8:	b29a      	uxth	r2, r3
 800beea:	8b7b      	ldrh	r3, [r7, #26]
 800beec:	4413      	add	r3, r2
 800beee:	b29b      	uxth	r3, r3
 800bef0:	833b      	strh	r3, [r7, #24]

    lv_coord_t child_res = LV_COORD_MIN;
 800bef2:	f24e 0301 	movw	r3, #57345	; 0xe001
 800bef6:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f004 f911 	bl	8010120 <lv_obj_get_child_cnt>
 800befe:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 800bf00:	2300      	movs	r3, #0
 800bf02:	623b      	str	r3, [r7, #32]
 800bf04:	e06b      	b.n	800bfde <calc_content_height+0x14a>
        lv_obj_t * child = obj->spec_attr->children[i];
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	6a3b      	ldr	r3, [r7, #32]
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4413      	add	r3, r2
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	613b      	str	r3, [r7, #16]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800bf16:	4940      	ldr	r1, [pc, #256]	; (800c018 <calc_content_height+0x184>)
 800bf18:	6938      	ldr	r0, [r7, #16]
 800bf1a:	f7fc f86d 	bl	8007ff8 <lv_obj_has_flag_any>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d156      	bne.n	800bfd2 <calc_content_height+0x13e>


        if(!lv_obj_is_layout_positioned(child)) {
 800bf24:	6938      	ldr	r0, [r7, #16]
 800bf26:	f7fe fdd9 	bl	800aadc <lv_obj_is_layout_positioned>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	f083 0301 	eor.w	r3, r3, #1
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d03d      	beq.n	800bfb2 <calc_content_height+0x11e>
            lv_align_t align = lv_obj_get_style_align(child, 0);
 800bf36:	2100      	movs	r1, #0
 800bf38:	6938      	ldr	r0, [r7, #16]
 800bf3a:	f7fe fa34 	bl	800a3a6 <lv_obj_get_style_align>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	73fb      	strb	r3, [r7, #15]
            switch(align) {
 800bf42:	7bfb      	ldrb	r3, [r7, #15]
 800bf44:	2b03      	cmp	r3, #3
 800bf46:	d80f      	bhi.n	800bf68 <calc_content_height+0xd4>
                case LV_ALIGN_DEFAULT:
                case LV_ALIGN_TOP_RIGHT:
                case LV_ALIGN_TOP_MID:
                case LV_ALIGN_TOP_LEFT:
                    /*Normal top aligns. */
                    child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	1c5a      	adds	r2, r3, #1
 800bf5a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	bfb8      	it	lt
 800bf62:	4613      	movlt	r3, r2
 800bf64:	84fb      	strh	r3, [r7, #38]	; 0x26
                    break;
 800bf66:	e037      	b.n	800bfd8 <calc_content_height+0x144>
                default:
                    /* Consider other cases only if y=0 and use the height of the object.
                     * With y!=0 circular dependency could occur. */
                    if(lv_obj_get_style_y(child, 0) == 0) {
 800bf68:	2100      	movs	r1, #0
 800bf6a:	6938      	ldr	r0, [r7, #16]
 800bf6c:	f7fe fa09 	bl	800a382 <lv_obj_get_style_y>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d12f      	bne.n	800bfd6 <calc_content_height+0x142>
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 800bf76:	f9b7 4026 	ldrsh.w	r4, [r7, #38]	; 0x26
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	3314      	adds	r3, #20
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7fe f96a 	bl	800a258 <lv_area_get_height>
 800bf84:	4603      	mov	r3, r0
 800bf86:	461a      	mov	r2, r3
 800bf88:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	429c      	cmp	r4, r3
 800bf90:	dc0b      	bgt.n	800bfaa <calc_content_height+0x116>
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	3314      	adds	r3, #20
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fe f95e 	bl	800a258 <lv_area_get_height>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	b29a      	uxth	r2, r3
 800bfa0:	8bbb      	ldrh	r3, [r7, #28]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	b21b      	sxth	r3, r3
 800bfa8:	e001      	b.n	800bfae <calc_content_height+0x11a>
 800bfaa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bfae:	84fb      	strh	r3, [r7, #38]	; 0x26
                    }
                    break;
 800bfb0:	e011      	b.n	800bfd6 <calc_content_height+0x142>
            }
        }
        else {
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800bfb8:	461a      	mov	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	1c5a      	adds	r2, r3, #1
 800bfc4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	bfb8      	it	lt
 800bfcc:	4613      	movlt	r3, r2
 800bfce:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bfd0:	e002      	b.n	800bfd8 <calc_content_height+0x144>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800bfd2:	bf00      	nop
 800bfd4:	e000      	b.n	800bfd8 <calc_content_height+0x144>
                    break;
 800bfd6:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800bfd8:	6a3b      	ldr	r3, [r7, #32]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	623b      	str	r3, [r7, #32]
 800bfde:	6a3a      	ldr	r2, [r7, #32]
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d38f      	bcc.n	800bf06 <calc_content_height+0x72>
        }
    }

    if(child_res != LV_COORD_MIN) {
 800bfe6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bfea:	4a0c      	ldr	r2, [pc, #48]	; (800c01c <calc_content_height+0x188>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d00d      	beq.n	800c00c <calc_content_height+0x178>
        child_res += pad_bottom;
 800bff0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bff2:	8b7b      	ldrh	r3, [r7, #26]
 800bff4:	4413      	add	r3, r2
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	84fb      	strh	r3, [r7, #38]	; 0x26
        return LV_MAX(child_res, self_h);
 800bffa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800bffe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c002:	4293      	cmp	r3, r2
 800c004:	bfb8      	it	lt
 800c006:	4613      	movlt	r3, r2
 800c008:	b21b      	sxth	r3, r3
 800c00a:	e001      	b.n	800c010 <calc_content_height+0x17c>
    }
    else {
        return self_h;
 800c00c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
    }

}
 800c010:	4618      	mov	r0, r3
 800c012:	372c      	adds	r7, #44	; 0x2c
 800c014:	46bd      	mov	sp, r7
 800c016:	bd90      	pop	{r4, r7, pc}
 800c018:	00040001 	.word	0x00040001
 800c01c:	ffffe001 	.word	0xffffe001

0800c020 <layout_update_core>:

static void layout_update_core(lv_obj_t * obj)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b088      	sub	sp, #32
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f004 f879 	bl	8010120 <lv_obj_get_child_cnt>
 800c02e:	61b8      	str	r0, [r7, #24]
    for(i = 0; i < child_cnt; i++) {
 800c030:	2300      	movs	r3, #0
 800c032:	61fb      	str	r3, [r7, #28]
 800c034:	e00d      	b.n	800c052 <layout_update_core+0x32>
        lv_obj_t * child = obj->spec_attr->children[i];
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4413      	add	r3, r2
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	60fb      	str	r3, [r7, #12]
        layout_update_core(child);
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	f7ff ffea 	bl	800c020 <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	3301      	adds	r3, #1
 800c050:	61fb      	str	r3, [r7, #28]
 800c052:	69fa      	ldr	r2, [r7, #28]
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	429a      	cmp	r2, r3
 800c058:	d3ed      	bcc.n	800c036 <layout_update_core+0x16>
    }

    if(obj->layout_inv == 0) return;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800c060:	f003 0301 	and.w	r3, r3, #1
 800c064:	b2db      	uxtb	r3, r3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d034      	beq.n	800c0d4 <layout_update_core+0xb4>

    obj->layout_inv = 0;
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800c070:	f36f 0300 	bfc	r3, #0, #1
 800c074:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    lv_obj_refr_size(obj);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f7fe faf3 	bl	800a664 <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7fe fefa 	bl	800ae78 <lv_obj_refr_pos>

    if(child_cnt > 0) {
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d025      	beq.n	800c0d6 <layout_update_core+0xb6>
        uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 800c08a:	2100      	movs	r1, #0
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f7fe fa62 	bl	800a556 <lv_obj_get_style_layout>
 800c092:	4603      	mov	r3, r0
 800c094:	617b      	str	r3, [r7, #20]
        if(layout_id > 0 && layout_id <= layout_cnt) {
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d01c      	beq.n	800c0d6 <layout_update_core+0xb6>
 800c09c:	4b0f      	ldr	r3, [pc, #60]	; (800c0dc <layout_update_core+0xbc>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	697a      	ldr	r2, [r7, #20]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d817      	bhi.n	800c0d6 <layout_update_core+0xb6>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 800c0a6:	4b0e      	ldr	r3, [pc, #56]	; (800c0e0 <layout_update_core+0xc0>)
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	6979      	ldr	r1, [r7, #20]
 800c0ac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c0b0:	440b      	add	r3, r1
 800c0b2:	00db      	lsls	r3, r3, #3
 800c0b4:	4413      	add	r3, r2
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	613b      	str	r3, [r7, #16]
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 800c0ba:	4b09      	ldr	r3, [pc, #36]	; (800c0e0 <layout_update_core+0xc0>)
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	6979      	ldr	r1, [r7, #20]
 800c0c0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c0c4:	440b      	add	r3, r1
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	4413      	add	r3, r2
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	6939      	ldr	r1, [r7, #16]
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	4798      	blx	r3
 800c0d2:	e000      	b.n	800c0d6 <layout_update_core+0xb6>
    if(obj->layout_inv == 0) return;
 800c0d4:	bf00      	nop
        }
    }
}
 800c0d6:	3720      	adds	r7, #32
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	20000774 	.word	0x20000774
 800c0e0:	2000091c 	.word	0x2000091c

0800c0e4 <transform_point>:

static void transform_point(const lv_obj_t * obj, lv_point_t * p, bool inv)
{
 800c0e4:	b590      	push	{r4, r7, lr}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	71fb      	strb	r3, [r7, #7]
    int16_t angle = lv_obj_get_style_transform_angle(obj, 0);
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	f7fe f99e 	bl	800a436 <lv_obj_get_style_transform_angle>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	82fb      	strh	r3, [r7, #22]
    int16_t zoom = lv_obj_get_style_transform_zoom(obj, 0);
 800c0fe:	2100      	movs	r1, #0
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f7fe f986 	bl	800a412 <lv_obj_get_style_transform_zoom>
 800c106:	4603      	mov	r3, r0
 800c108:	82bb      	strh	r3, [r7, #20]

    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 800c10a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d105      	bne.n	800c11e <transform_point+0x3a>
 800c112:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c11a:	f000 80a6 	beq.w	800c26a <transform_point+0x186>

    lv_point_t pivot = {
        .x = lv_obj_get_style_transform_pivot_x(obj, 0),
 800c11e:	2100      	movs	r1, #0
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f7fe f99a 	bl	800a45a <lv_obj_get_style_transform_pivot_x>
 800c126:	4603      	mov	r3, r0
    lv_point_t pivot = {
 800c128:	823b      	strh	r3, [r7, #16]
        .y = lv_obj_get_style_transform_pivot_y(obj, 0)
 800c12a:	2100      	movs	r1, #0
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f7fe f9a6 	bl	800a47e <lv_obj_get_style_transform_pivot_y>
 800c132:	4603      	mov	r3, r0
    lv_point_t pivot = {
 800c134:	827b      	strh	r3, [r7, #18]
    };

    if(LV_COORD_IS_PCT(pivot.x)) {
 800c136:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c144:	d12d      	bne.n	800c1a2 <transform_point+0xbe>
 800c146:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c14a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800c14e:	b21b      	sxth	r3, r3
 800c150:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c154:	dc25      	bgt.n	800c1a2 <transform_point+0xbe>
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 800c156:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c15a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800c15e:	b21b      	sxth	r3, r3
 800c160:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c164:	dd07      	ble.n	800c176 <transform_point+0x92>
 800c166:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c16a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800c16e:	b21b      	sxth	r3, r3
 800c170:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800c174:	e005      	b.n	800c182 <transform_point+0x9e>
 800c176:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c17a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800c17e:	b21b      	sxth	r3, r3
 800c180:	461c      	mov	r4, r3
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	3314      	adds	r3, #20
 800c186:	4618      	mov	r0, r3
 800c188:	f7fe f84f 	bl	800a22a <lv_area_get_width>
 800c18c:	4603      	mov	r3, r0
 800c18e:	fb04 f303 	mul.w	r3, r4, r3
 800c192:	4a38      	ldr	r2, [pc, #224]	; (800c274 <transform_point+0x190>)
 800c194:	fb82 1203 	smull	r1, r2, r2, r3
 800c198:	1152      	asrs	r2, r2, #5
 800c19a:	17db      	asrs	r3, r3, #31
 800c19c:	1ad3      	subs	r3, r2, r3
 800c19e:	b21b      	sxth	r3, r3
 800c1a0:	823b      	strh	r3, [r7, #16]
    }
    if(LV_COORD_IS_PCT(pivot.y)) {
 800c1a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c1ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1b0:	d12d      	bne.n	800c20e <transform_point+0x12a>
 800c1b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c1b6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800c1ba:	b21b      	sxth	r3, r3
 800c1bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c1c0:	dc25      	bgt.n	800c20e <transform_point+0x12a>
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 800c1c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c1c6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800c1ca:	b21b      	sxth	r3, r3
 800c1cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1d0:	dd07      	ble.n	800c1e2 <transform_point+0xfe>
 800c1d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c1d6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800c1da:	b21b      	sxth	r3, r3
 800c1dc:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 800c1e0:	e005      	b.n	800c1ee <transform_point+0x10a>
 800c1e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c1e6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800c1ea:	b21b      	sxth	r3, r3
 800c1ec:	461c      	mov	r4, r3
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3314      	adds	r3, #20
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fe f830 	bl	800a258 <lv_area_get_height>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	fb04 f303 	mul.w	r3, r4, r3
 800c1fe:	4a1d      	ldr	r2, [pc, #116]	; (800c274 <transform_point+0x190>)
 800c200:	fb82 1203 	smull	r1, r2, r2, r3
 800c204:	1152      	asrs	r2, r2, #5
 800c206:	17db      	asrs	r3, r3, #31
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	b21b      	sxth	r3, r3
 800c20c:	827b      	strh	r3, [r7, #18]
    }

    pivot.x = obj->coords.x1 + pivot.x;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c214:	b29a      	uxth	r2, r3
 800c216:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	4413      	add	r3, r2
 800c21e:	b29b      	uxth	r3, r3
 800c220:	b21b      	sxth	r3, r3
 800c222:	823b      	strh	r3, [r7, #16]
    pivot.y = obj->coords.y1 + pivot.y;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c230:	b29b      	uxth	r3, r3
 800c232:	4413      	add	r3, r2
 800c234:	b29b      	uxth	r3, r3
 800c236:	b21b      	sxth	r3, r3
 800c238:	827b      	strh	r3, [r7, #18]

    if(inv) {
 800c23a:	79fb      	ldrb	r3, [r7, #7]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00a      	beq.n	800c256 <transform_point+0x172>
        angle = -angle;
 800c240:	8afb      	ldrh	r3, [r7, #22]
 800c242:	425b      	negs	r3, r3
 800c244:	b29b      	uxth	r3, r3
 800c246:	82fb      	strh	r3, [r7, #22]
        zoom = (256 * 256) / zoom;
 800c248:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c24c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c250:	fb92 f3f3 	sdiv	r3, r2, r3
 800c254:	82bb      	strh	r3, [r7, #20]
    }

    lv_point_transform(p, angle, zoom, &pivot);
 800c256:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800c25a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800c25e:	f107 0310 	add.w	r3, r7, #16
 800c262:	68b8      	ldr	r0, [r7, #8]
 800c264:	f016 fe30 	bl	8022ec8 <lv_point_transform>
 800c268:	e000      	b.n	800c26c <transform_point+0x188>
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 800c26a:	bf00      	nop
}
 800c26c:	371c      	adds	r7, #28
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd90      	pop	{r4, r7, pc}
 800c272:	bf00      	nop
 800c274:	51eb851f 	.word	0x51eb851f

0800c278 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c286:	b29a      	uxth	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c28e:	b29b      	uxth	r3, r3
 800c290:	1ad3      	subs	r3, r2, r3
 800c292:	b29b      	uxth	r3, r3
 800c294:	3301      	adds	r3, #1
 800c296:	b29b      	uxth	r3, r3
 800c298:	b21b      	sxth	r3, r3
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	370c      	adds	r7, #12
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr

0800c2a6 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800c2a6:	b480      	push	{r7}
 800c2a8:	b083      	sub	sp, #12
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	1ad3      	subs	r3, r2, r3
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	b21b      	sxth	r3, r3
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	370c      	adds	r7, #12
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <lv_anim_set_var>:
 * Set a variable to animate
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
    a->var = var;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	683a      	ldr	r2, [r7, #0]
 800c2e2:	601a      	str	r2, [r3, #0]
}
 800c2e4:	bf00      	nop
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <lv_anim_set_exec_cb>:
 * @param exec_cb   a function to execute during animation
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	683a      	ldr	r2, [r7, #0]
 800c2fe:	605a      	str	r2, [r3, #4]
}
 800c300:	bf00      	nop
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
    a->time = duration;
 800c316:	683a      	ldr	r2, [r7, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c31c:	bf00      	nop
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <lv_anim_set_values>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	68ba      	ldr	r2, [r7, #8]
 800c338:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c346:	bf00      	nop
 800c348:	3714      	adds	r7, #20
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr

0800c352 <lv_anim_set_path_cb>:
 * Set the path (curve) of the animation.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param path_cb a function to set the current value of the animation.
 */
static inline void lv_anim_set_path_cb(lv_anim_t * a, lv_anim_path_cb_t path_cb)
{
 800c352:	b480      	push	{r7}
 800c354:	b083      	sub	sp, #12
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	6039      	str	r1, [r7, #0]
    a->path_cb = path_cb;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	683a      	ldr	r2, [r7, #0]
 800c360:	61da      	str	r2, [r3, #28]
}
 800c362:	bf00      	nop
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr

0800c36e <lv_anim_set_ready_cb>:
 * Set a function call when the animation is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
 800c36e:	b480      	push	{r7}
 800c370:	b083      	sub	sp, #12
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
 800c376:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	683a      	ldr	r2, [r7, #0]
 800c37c:	60da      	str	r2, [r3, #12]
}
 800c37e:	bf00      	nop
 800c380:	370c      	adds	r7, #12
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <lv_obj_get_style_width>:
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b084      	sub	sp, #16
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
 800c392:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800c394:	2201      	movs	r2, #1
 800c396:	6839      	ldr	r1, [r7, #0]
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f002 fb5d 	bl	800ea58 <lv_obj_get_style_prop>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	b21b      	sxth	r3, r3
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <lv_obj_get_style_pad_top>:
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b084      	sub	sp, #16
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
 800c3b6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800c3b8:	2210      	movs	r2, #16
 800c3ba:	6839      	ldr	r1, [r7, #0]
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f002 fb4b 	bl	800ea58 <lv_obj_get_style_prop>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	b21b      	sxth	r3, r3
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <lv_obj_get_style_pad_bottom>:
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b084      	sub	sp, #16
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800c3dc:	2211      	movs	r2, #17
 800c3de:	6839      	ldr	r1, [r7, #0]
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f002 fb39 	bl	800ea58 <lv_obj_get_style_prop>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	b21b      	sxth	r3, r3
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <lv_obj_get_style_pad_left>:
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b084      	sub	sp, #16
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
 800c3fe:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800c400:	2212      	movs	r2, #18
 800c402:	6839      	ldr	r1, [r7, #0]
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f002 fb27 	bl	800ea58 <lv_obj_get_style_prop>
 800c40a:	4603      	mov	r3, r0
 800c40c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	b21b      	sxth	r3, r3
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <lv_obj_get_style_pad_right>:
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b084      	sub	sp, #16
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800c424:	2213      	movs	r2, #19
 800c426:	6839      	ldr	r1, [r7, #0]
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f002 fb15 	bl	800ea58 <lv_obj_get_style_prop>
 800c42e:	4603      	mov	r3, r0
 800c430:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	b21b      	sxth	r3, r3
}
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <lv_obj_get_style_bg_opa>:
{
 800c43e:	b580      	push	{r7, lr}
 800c440:	b084      	sub	sp, #16
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
 800c446:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 800c448:	2221      	movs	r2, #33	; 0x21
 800c44a:	6839      	ldr	r1, [r7, #0]
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f002 fb03 	bl	800ea58 <lv_obj_get_style_prop>
 800c452:	4603      	mov	r3, r0
 800c454:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	b2db      	uxtb	r3, r3
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <lv_obj_get_style_border_opa>:
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b084      	sub	sp, #16
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
 800c46a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 800c46c:	2231      	movs	r2, #49	; 0x31
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f002 faf1 	bl	800ea58 <lv_obj_get_style_prop>
 800c476:	4603      	mov	r3, r0
 800c478:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	b2db      	uxtb	r3, r3
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <lv_obj_get_style_border_width>:
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b084      	sub	sp, #16
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
 800c48e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800c490:	2232      	movs	r2, #50	; 0x32
 800c492:	6839      	ldr	r1, [r7, #0]
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f002 fadf 	bl	800ea58 <lv_obj_get_style_prop>
 800c49a:	4603      	mov	r3, r0
 800c49c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	b21b      	sxth	r3, r3
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3710      	adds	r7, #16
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <lv_obj_get_style_base_dir>:
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b084      	sub	sp, #16
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
 800c4b2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800c4b4:	2216      	movs	r2, #22
 800c4b6:	6839      	ldr	r1, [r7, #0]
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f002 facd 	bl	800ea58 <lv_obj_get_style_prop>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	b2db      	uxtb	r3, r3
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <lv_obj_set_scrollbar_mode>:
/*=====================
 * Setter functions
 *====================*/

void lv_obj_set_scrollbar_mode(lv_obj_t * obj, lv_scrollbar_mode_t mode)
{
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b082      	sub	sp, #8
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_allocate_spec_attr(obj);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f7fb fdc0 	bl	8008060 <lv_obj_allocate_spec_attr>

    if(obj->spec_attr->scrollbar_mode == mode) return;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	7e1b      	ldrb	r3, [r3, #24]
 800c4e6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	78fb      	ldrb	r3, [r7, #3]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d00d      	beq.n	800c510 <lv_obj_set_scrollbar_mode+0x42>
    obj->spec_attr->scrollbar_mode = mode;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	689a      	ldr	r2, [r3, #8]
 800c4f8:	78fb      	ldrb	r3, [r7, #3]
 800c4fa:	f003 0303 	and.w	r3, r3, #3
 800c4fe:	b2d9      	uxtb	r1, r3
 800c500:	7e13      	ldrb	r3, [r2, #24]
 800c502:	f361 0301 	bfi	r3, r1, #0, #2
 800c506:	7613      	strb	r3, [r2, #24]
    lv_obj_invalidate(obj);
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f7ff f95c 	bl	800b7c6 <lv_obj_invalidate>
 800c50e:	e000      	b.n	800c512 <lv_obj_set_scrollbar_mode+0x44>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 800c510:	bf00      	nop
}
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <lv_obj_get_scrollbar_mode>:
/*=====================
 * Getter functions
 *====================*/

lv_scrollbar_mode_t lv_obj_get_scrollbar_mode(const lv_obj_t * obj)
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d006      	beq.n	800c536 <lv_obj_get_scrollbar_mode+0x1e>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	7e1b      	ldrb	r3, [r3, #24]
 800c52e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c532:	b2db      	uxtb	r3, r3
 800c534:	e000      	b.n	800c538 <lv_obj_get_scrollbar_mode+0x20>
    else return LV_SCROLLBAR_MODE_AUTO;
 800c536:	2303      	movs	r3, #3
}
 800c538:	4618      	mov	r0, r3
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <lv_obj_get_scroll_dir>:

lv_dir_t lv_obj_get_scroll_dir(const lv_obj_t * obj)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d006      	beq.n	800c562 <lv_obj_get_scroll_dir+0x1e>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	7e5b      	ldrb	r3, [r3, #25]
 800c55a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	e000      	b.n	800c564 <lv_obj_get_scroll_dir+0x20>
    else return LV_DIR_ALL;
 800c562:	230f      	movs	r3, #15
}
 800c564:	4618      	mov	r0, r3
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <lv_obj_get_scroll_snap_x>:

lv_scroll_snap_t lv_obj_get_scroll_snap_x(const lv_obj_t * obj)
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d006      	beq.n	800c58e <lv_obj_get_scroll_snap_x+0x1e>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	7e1b      	ldrb	r3, [r3, #24]
 800c586:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	e000      	b.n	800c590 <lv_obj_get_scroll_snap_x+0x20>
    else return LV_SCROLL_SNAP_NONE;
 800c58e:	2300      	movs	r3, #0
}
 800c590:	4618      	mov	r0, r3
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <lv_obj_get_scroll_snap_y>:

lv_scroll_snap_t lv_obj_get_scroll_snap_y(const lv_obj_t * obj)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d006      	beq.n	800c5ba <lv_obj_get_scroll_snap_y+0x1e>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	689b      	ldr	r3, [r3, #8]
 800c5b0:	7e1b      	ldrb	r3, [r3, #24]
 800c5b2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	e000      	b.n	800c5bc <lv_obj_get_scroll_snap_y+0x20>
    else return LV_SCROLL_SNAP_NONE;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <lv_obj_get_scroll_x>:

lv_coord_t lv_obj_get_scroll_x(const lv_obj_t * obj)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b083      	sub	sp, #12
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d101      	bne.n	800c5dc <lv_obj_get_scroll_x+0x14>
 800c5d8:	2300      	movs	r3, #0
 800c5da:	e007      	b.n	800c5ec <lv_obj_get_scroll_x+0x24>
    return -obj->spec_attr->scroll.x;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	425b      	negs	r3, r3
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	b21b      	sxth	r3, r3
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	370c      	adds	r7, #12
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <lv_obj_get_scroll_y>:

lv_coord_t lv_obj_get_scroll_y(const lv_obj_t * obj)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b083      	sub	sp, #12
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d101      	bne.n	800c60c <lv_obj_get_scroll_y+0x14>
 800c608:	2300      	movs	r3, #0
 800c60a:	e007      	b.n	800c61c <lv_obj_get_scroll_y+0x24>
    return -obj->spec_attr->scroll.y;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c614:	b29b      	uxth	r3, r3
 800c616:	425b      	negs	r3, r3
 800c618:	b29b      	uxth	r3, r3
 800c61a:	b21b      	sxth	r3, r3
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <lv_obj_get_scroll_top>:

lv_coord_t lv_obj_get_scroll_top(lv_obj_t * obj)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
    if(obj->spec_attr == NULL) return 0;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d101      	bne.n	800c63c <lv_obj_get_scroll_top+0x14>
 800c638:	2300      	movs	r3, #0
 800c63a:	e007      	b.n	800c64c <lv_obj_get_scroll_top+0x24>
    return -obj->spec_attr->scroll.y;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c644:	b29b      	uxth	r3, r3
 800c646:	425b      	negs	r3, r3
 800c648:	b29b      	uxth	r3, r3
 800c64a:	b21b      	sxth	r3, r3
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <lv_obj_get_scroll_bottom>:

lv_coord_t lv_obj_get_scroll_bottom(lv_obj_t * obj)
{
 800c658:	b5b0      	push	{r4, r5, r7, lr}
 800c65a:	b088      	sub	sp, #32
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_coord_t child_res = LV_COORD_MIN;
 800c660:	f24e 0301 	movw	r3, #57345	; 0xe001
 800c664:	83fb      	strh	r3, [r7, #30]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f003 fd5a 	bl	8010120 <lv_obj_get_child_cnt>
 800c66c:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 800c66e:	2300      	movs	r3, #0
 800c670:	61bb      	str	r3, [r7, #24]
 800c672:	e01c      	b.n	800c6ae <lv_obj_get_scroll_bottom+0x56>
        lv_obj_t * child = obj->spec_attr->children[i];
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	681a      	ldr	r2, [r3, #0]
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	4413      	add	r3, r2
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	60bb      	str	r3, [r7, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800c684:	4935      	ldr	r1, [pc, #212]	; (800c75c <lv_obj_get_scroll_bottom+0x104>)
 800c686:	68b8      	ldr	r0, [r7, #8]
 800c688:	f7fb fcb6 	bl	8007ff8 <lv_obj_has_flag_any>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d109      	bne.n	800c6a6 <lv_obj_get_scroll_bottom+0x4e>
        child_res = LV_MAX(child_res, child->coords.y2);
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800c698:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800c69c:	4293      	cmp	r3, r2
 800c69e:	bfb8      	it	lt
 800c6a0:	4613      	movlt	r3, r2
 800c6a2:	83fb      	strh	r3, [r7, #30]
 800c6a4:	e000      	b.n	800c6a8 <lv_obj_get_scroll_bottom+0x50>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800c6a6:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	61bb      	str	r3, [r7, #24]
 800c6ae:	69ba      	ldr	r2, [r7, #24]
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d3de      	bcc.n	800c674 <lv_obj_get_scroll_bottom+0x1c>
    }

    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f7ff fe78 	bl	800c3ae <lv_obj_get_style_pad_top>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	827b      	strh	r3, [r7, #18]
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f7ff fe84 	bl	800c3d2 <lv_obj_get_style_pad_bottom>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	823b      	strh	r3, [r7, #16]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f7ff fed8 	bl	800c486 <lv_obj_get_style_border_width>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	81fb      	strh	r3, [r7, #14]

    if(child_res != LV_COORD_MIN) {
 800c6da:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c6de:	4a20      	ldr	r2, [pc, #128]	; (800c760 <lv_obj_get_scroll_bottom+0x108>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d00d      	beq.n	800c700 <lv_obj_get_scroll_bottom+0xa8>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 800c6e4:	8a3a      	ldrh	r2, [r7, #16]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	89fb      	ldrh	r3, [r7, #14]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	b29a      	uxth	r2, r3
 800c6f8:	8bfb      	ldrh	r3, [r7, #30]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	83fb      	strh	r3, [r7, #30]
    }

    lv_coord_t self_h = lv_obj_get_self_height(obj);
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f7fe fb7c 	bl	800adfe <lv_obj_get_self_height>
 800c706:	4603      	mov	r3, r0
 800c708:	81bb      	strh	r3, [r7, #12]
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 800c70a:	89fb      	ldrh	r3, [r7, #14]
 800c70c:	005b      	lsls	r3, r3, #1
 800c70e:	b29c      	uxth	r4, r3
 800c710:	8a7d      	ldrh	r5, [r7, #18]
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f7fe fa9a 	bl	800ac4c <lv_obj_get_height>
 800c718:	4603      	mov	r3, r0
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	1aeb      	subs	r3, r5, r3
 800c71e:	b29a      	uxth	r2, r3
 800c720:	8a3b      	ldrh	r3, [r7, #16]
 800c722:	4413      	add	r3, r2
 800c724:	b29b      	uxth	r3, r3
 800c726:	4423      	add	r3, r4
 800c728:	b29a      	uxth	r2, r3
 800c72a:	89bb      	ldrh	r3, [r7, #12]
 800c72c:	4413      	add	r3, r2
 800c72e:	b29b      	uxth	r3, r3
 800c730:	81bb      	strh	r3, [r7, #12]
    self_h -= lv_obj_get_scroll_y(obj);
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f7ff ff60 	bl	800c5f8 <lv_obj_get_scroll_y>
 800c738:	4603      	mov	r3, r0
 800c73a:	89ba      	ldrh	r2, [r7, #12]
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	1ad3      	subs	r3, r2, r3
 800c740:	b29b      	uxth	r3, r3
 800c742:	81bb      	strh	r3, [r7, #12]
    return LV_MAX(child_res, self_h);
 800c744:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c748:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c74c:	4293      	cmp	r3, r2
 800c74e:	bfb8      	it	lt
 800c750:	4613      	movlt	r3, r2
 800c752:	b21b      	sxth	r3, r3
}
 800c754:	4618      	mov	r0, r3
 800c756:	3720      	adds	r7, #32
 800c758:	46bd      	mov	sp, r7
 800c75a:	bdb0      	pop	{r4, r5, r7, pc}
 800c75c:	00040001 	.word	0x00040001
 800c760:	ffffe001 	.word	0xffffe001

0800c764 <lv_obj_get_scroll_left>:

lv_coord_t lv_obj_get_scroll_left(lv_obj_t * obj)
{
 800c764:	b5b0      	push	{r4, r5, r7, lr}
 800c766:	b08a      	sub	sp, #40	; 0x28
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*Normally can't scroll the object out on the left.
     *So simply use the current scroll position as "left size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800c76c:	2100      	movs	r1, #0
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7ff fe9b 	bl	800c4aa <lv_obj_get_style_base_dir>
 800c774:	4603      	mov	r3, r0
 800c776:	2b01      	cmp	r3, #1
 800c778:	d00e      	beq.n	800c798 <lv_obj_get_scroll_left+0x34>
        if(obj->spec_attr == NULL) return 0;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d101      	bne.n	800c786 <lv_obj_get_scroll_left+0x22>
 800c782:	2300      	movs	r3, #0
 800c784:	e08b      	b.n	800c89e <lv_obj_get_scroll_left+0x13a>
        return -obj->spec_attr->scroll.x;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c78e:	b29b      	uxth	r3, r3
 800c790:	425b      	negs	r3, r3
 800c792:	b29b      	uxth	r3, r3
 800c794:	b21b      	sxth	r3, r3
 800c796:	e082      	b.n	800c89e <lv_obj_get_scroll_left+0x13a>
    }

    /*With RTL base direction scrolling the left is normal so find the left most coordinate*/
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 800c798:	2100      	movs	r1, #0
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f7ff fe3d 	bl	800c41a <lv_obj_get_style_pad_right>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	83bb      	strh	r3, [r7, #28]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7ff fe25 	bl	800c3f6 <lv_obj_get_style_pad_left>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	837b      	strh	r3, [r7, #26]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800c7b0:	2100      	movs	r1, #0
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f7ff fe67 	bl	800c486 <lv_obj_get_style_border_width>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	833b      	strh	r3, [r7, #24]

    lv_coord_t child_res = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	84fb      	strh	r3, [r7, #38]	; 0x26

    uint32_t i;
    lv_coord_t x1 = LV_COORD_MAX;
 800c7c0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800c7c4:	83fb      	strh	r3, [r7, #30]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f003 fcaa 	bl	8010120 <lv_obj_get_child_cnt>
 800c7cc:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	623b      	str	r3, [r7, #32]
 800c7d2:	e01c      	b.n	800c80e <lv_obj_get_scroll_left+0xaa>
        lv_obj_t * child = obj->spec_attr->children[i];
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	6a3b      	ldr	r3, [r7, #32]
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	4413      	add	r3, r2
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	60fb      	str	r3, [r7, #12]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800c7e4:	4930      	ldr	r1, [pc, #192]	; (800c8a8 <lv_obj_get_scroll_left+0x144>)
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	f7fb fc06 	bl	8007ff8 <lv_obj_has_flag_any>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d109      	bne.n	800c806 <lv_obj_get_scroll_left+0xa2>
        x1 = LV_MIN(x1, child->coords.x1);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c7f8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	bfa8      	it	ge
 800c800:	4613      	movge	r3, r2
 800c802:	83fb      	strh	r3, [r7, #30]
 800c804:	e000      	b.n	800c808 <lv_obj_get_scroll_left+0xa4>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800c806:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800c808:	6a3b      	ldr	r3, [r7, #32]
 800c80a:	3301      	adds	r3, #1
 800c80c:	623b      	str	r3, [r7, #32]
 800c80e:	6a3a      	ldr	r2, [r7, #32]
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	429a      	cmp	r2, r3
 800c814:	d3de      	bcc.n	800c7d4 <lv_obj_get_scroll_left+0x70>

    }

    if(x1 != LV_COORD_MAX) {
 800c816:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c81a:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800c81e:	4293      	cmp	r3, r2
 800c820:	d010      	beq.n	800c844 <lv_obj_get_scroll_left+0xe0>
        child_res = x1;
 800c822:	8bfb      	ldrh	r3, [r7, #30]
 800c824:	84fb      	strh	r3, [r7, #38]	; 0x26
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800c82c:	b29a      	uxth	r2, r3
 800c82e:	8b7b      	ldrh	r3, [r7, #26]
 800c830:	4413      	add	r3, r2
 800c832:	b29a      	uxth	r2, r3
 800c834:	8b3b      	ldrh	r3, [r7, #24]
 800c836:	4413      	add	r3, r2
 800c838:	b29a      	uxth	r2, r3
 800c83a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	b29b      	uxth	r3, r3
 800c840:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c842:	e002      	b.n	800c84a <lv_obj_get_scroll_left+0xe6>
    }
    else {
        child_res = LV_COORD_MIN;
 800c844:	f24e 0301 	movw	r3, #57345	; 0xe001
 800c848:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    lv_coord_t self_w = lv_obj_get_self_width(obj);
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f7fe fac1 	bl	800add2 <lv_obj_get_self_width>
 800c850:	4603      	mov	r3, r0
 800c852:	827b      	strh	r3, [r7, #18]
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800c854:	8b3b      	ldrh	r3, [r7, #24]
 800c856:	005b      	lsls	r3, r3, #1
 800c858:	b29c      	uxth	r4, r3
 800c85a:	8bbd      	ldrh	r5, [r7, #28]
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f7fe f9e7 	bl	800ac30 <lv_obj_get_width>
 800c862:	4603      	mov	r3, r0
 800c864:	b29b      	uxth	r3, r3
 800c866:	1aeb      	subs	r3, r5, r3
 800c868:	b29a      	uxth	r2, r3
 800c86a:	8b7b      	ldrh	r3, [r7, #26]
 800c86c:	4413      	add	r3, r2
 800c86e:	b29b      	uxth	r3, r3
 800c870:	4423      	add	r3, r4
 800c872:	b29a      	uxth	r2, r3
 800c874:	8a7b      	ldrh	r3, [r7, #18]
 800c876:	4413      	add	r3, r2
 800c878:	b29b      	uxth	r3, r3
 800c87a:	827b      	strh	r3, [r7, #18]
    self_w += lv_obj_get_scroll_x(obj);
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7ff fea3 	bl	800c5c8 <lv_obj_get_scroll_x>
 800c882:	4603      	mov	r3, r0
 800c884:	b29a      	uxth	r2, r3
 800c886:	8a7b      	ldrh	r3, [r7, #18]
 800c888:	4413      	add	r3, r2
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	827b      	strh	r3, [r7, #18]

    return LV_MAX(child_res, self_w);
 800c88e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800c892:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c896:	4293      	cmp	r3, r2
 800c898:	bfb8      	it	lt
 800c89a:	4613      	movlt	r3, r2
 800c89c:	b21b      	sxth	r3, r3
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3728      	adds	r7, #40	; 0x28
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bdb0      	pop	{r4, r5, r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	00040001 	.word	0x00040001

0800c8ac <lv_obj_get_scroll_right>:

lv_coord_t lv_obj_get_scroll_right(lv_obj_t * obj)
{
 800c8ac:	b5b0      	push	{r4, r5, r7, lr}
 800c8ae:	b088      	sub	sp, #32
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    /*With RTL base dir can't scroll to the object out on the right.
     *So simply use the current scroll position as "right size"*/
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7ff fdf7 	bl	800c4aa <lv_obj_get_style_base_dir>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d10a      	bne.n	800c8d8 <lv_obj_get_scroll_right+0x2c>
        if(obj->spec_attr == NULL) return 0;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d101      	bne.n	800c8ce <lv_obj_get_scroll_right+0x22>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	e07e      	b.n	800c9cc <lv_obj_get_scroll_right+0x120>
        return obj->spec_attr->scroll.x;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800c8d6:	e079      	b.n	800c9cc <lv_obj_get_scroll_right+0x120>
    }

    /*With other base direction (LTR) scrolling to the right is normal so find the right most coordinate*/
    lv_coord_t child_res = LV_COORD_MIN;
 800c8d8:	f24e 0301 	movw	r3, #57345	; 0xe001
 800c8dc:	83fb      	strh	r3, [r7, #30]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f003 fc1e 	bl	8010120 <lv_obj_get_child_cnt>
 800c8e4:	6178      	str	r0, [r7, #20]
    for(i = 0; i < child_cnt; i++) {
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	61bb      	str	r3, [r7, #24]
 800c8ea:	e01c      	b.n	800c926 <lv_obj_get_scroll_right+0x7a>
        lv_obj_t * child = obj->spec_attr->children[i];
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	4413      	add	r3, r2
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	60bb      	str	r3, [r7, #8]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800c8fc:	4935      	ldr	r1, [pc, #212]	; (800c9d4 <lv_obj_get_scroll_right+0x128>)
 800c8fe:	68b8      	ldr	r0, [r7, #8]
 800c900:	f7fb fb7a 	bl	8007ff8 <lv_obj_has_flag_any>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d109      	bne.n	800c91e <lv_obj_get_scroll_right+0x72>
        child_res = LV_MAX(child_res, child->coords.x2);
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800c910:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800c914:	4293      	cmp	r3, r2
 800c916:	bfb8      	it	lt
 800c918:	4613      	movlt	r3, r2
 800c91a:	83fb      	strh	r3, [r7, #30]
 800c91c:	e000      	b.n	800c920 <lv_obj_get_scroll_right+0x74>
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800c91e:	bf00      	nop
    for(i = 0; i < child_cnt; i++) {
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	3301      	adds	r3, #1
 800c924:	61bb      	str	r3, [r7, #24]
 800c926:	69ba      	ldr	r2, [r7, #24]
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d3de      	bcc.n	800c8ec <lv_obj_get_scroll_right+0x40>
    }

    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 800c92e:	2100      	movs	r1, #0
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f7ff fd72 	bl	800c41a <lv_obj_get_style_pad_right>
 800c936:	4603      	mov	r3, r0
 800c938:	827b      	strh	r3, [r7, #18]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800c93a:	2100      	movs	r1, #0
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f7ff fd5a 	bl	800c3f6 <lv_obj_get_style_pad_left>
 800c942:	4603      	mov	r3, r0
 800c944:	823b      	strh	r3, [r7, #16]
    lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 800c946:	2100      	movs	r1, #0
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f7ff fd9c 	bl	800c486 <lv_obj_get_style_border_width>
 800c94e:	4603      	mov	r3, r0
 800c950:	81fb      	strh	r3, [r7, #14]

    if(child_res != LV_COORD_MIN) {
 800c952:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c956:	4a20      	ldr	r2, [pc, #128]	; (800c9d8 <lv_obj_get_scroll_right+0x12c>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d00d      	beq.n	800c978 <lv_obj_get_scroll_right+0xcc>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 800c95c:	8a7a      	ldrh	r2, [r7, #18]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800c964:	b29b      	uxth	r3, r3
 800c966:	1ad3      	subs	r3, r2, r3
 800c968:	b29a      	uxth	r2, r3
 800c96a:	89fb      	ldrh	r3, [r7, #14]
 800c96c:	4413      	add	r3, r2
 800c96e:	b29a      	uxth	r2, r3
 800c970:	8bfb      	ldrh	r3, [r7, #30]
 800c972:	4413      	add	r3, r2
 800c974:	b29b      	uxth	r3, r3
 800c976:	83fb      	strh	r3, [r7, #30]
    }

    lv_coord_t self_w;
    self_w = lv_obj_get_self_width(obj);
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f7fe fa2a 	bl	800add2 <lv_obj_get_self_width>
 800c97e:	4603      	mov	r3, r0
 800c980:	81bb      	strh	r3, [r7, #12]
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 800c982:	89fb      	ldrh	r3, [r7, #14]
 800c984:	005b      	lsls	r3, r3, #1
 800c986:	b29c      	uxth	r4, r3
 800c988:	8a7d      	ldrh	r5, [r7, #18]
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f7fe f950 	bl	800ac30 <lv_obj_get_width>
 800c990:	4603      	mov	r3, r0
 800c992:	b29b      	uxth	r3, r3
 800c994:	1aeb      	subs	r3, r5, r3
 800c996:	b29a      	uxth	r2, r3
 800c998:	8a3b      	ldrh	r3, [r7, #16]
 800c99a:	4413      	add	r3, r2
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	4423      	add	r3, r4
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	89bb      	ldrh	r3, [r7, #12]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	81bb      	strh	r3, [r7, #12]
    self_w -= lv_obj_get_scroll_x(obj);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7ff fe0c 	bl	800c5c8 <lv_obj_get_scroll_x>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	89ba      	ldrh	r2, [r7, #12]
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	81bb      	strh	r3, [r7, #12]
    return LV_MAX(child_res, self_w);
 800c9bc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c9c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	bfb8      	it	lt
 800c9c8:	4613      	movlt	r3, r2
 800c9ca:	b21b      	sxth	r3, r3
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3720      	adds	r7, #32
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bdb0      	pop	{r4, r5, r7, pc}
 800c9d4:	00040001 	.word	0x00040001
 800c9d8:	ffffe001 	.word	0xffffe001

0800c9dc <lv_obj_scroll_by_bounded>:
/*=====================
 * Other functions
 *====================*/

void lv_obj_scroll_by_bounded(lv_obj_t * obj, lv_coord_t dx, lv_coord_t dy, lv_anim_enable_t anim_en)
{
 800c9dc:	b590      	push	{r4, r7, lr}
 800c9de:	b089      	sub	sp, #36	; 0x24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	4608      	mov	r0, r1
 800c9e6:	4611      	mov	r1, r2
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	817b      	strh	r3, [r7, #10]
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	813b      	strh	r3, [r7, #8]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	71fb      	strb	r3, [r7, #7]
    if(dx == 0 && dy == 0) return;
 800c9f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d104      	bne.n	800ca08 <lv_obj_scroll_by_bounded+0x2c>
 800c9fe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	f000 80b5 	beq.w	800cb72 <lv_obj_scroll_by_bounded+0x196>

    /*We need to know the final sizes for bound check*/
    lv_obj_update_layout(obj);
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f7fe f8b7 	bl	800ab7c <lv_obj_update_layout>

    /*Don't let scroll more then naturally possible by the size of the content*/
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 800ca0e:	68f8      	ldr	r0, [r7, #12]
 800ca10:	f7ff fdda 	bl	800c5c8 <lv_obj_get_scroll_x>
 800ca14:	4603      	mov	r3, r0
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	425b      	negs	r3, r3
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	82bb      	strh	r3, [r7, #20]
    lv_coord_t x_bounded = x_current + dx;
 800ca1e:	8aba      	ldrh	r2, [r7, #20]
 800ca20:	897b      	ldrh	r3, [r7, #10]
 800ca22:	4413      	add	r3, r2
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	83fb      	strh	r3, [r7, #30]

    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800ca28:	2100      	movs	r1, #0
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f7ff fd3d 	bl	800c4aa <lv_obj_get_style_base_dir>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d028      	beq.n	800ca88 <lv_obj_scroll_by_bounded+0xac>
        if(x_bounded > 0) x_bounded = 0;
 800ca36:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	dd01      	ble.n	800ca42 <lv_obj_scroll_by_bounded+0x66>
 800ca3e:	2300      	movs	r3, #0
 800ca40:	83fb      	strh	r3, [r7, #30]
        if(x_bounded < 0) {
 800ca42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	da43      	bge.n	800cad2 <lv_obj_scroll_by_bounded+0xf6>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f7ff fe8a 	bl	800c764 <lv_obj_get_scroll_left>
 800ca50:	4603      	mov	r3, r0
 800ca52:	b29c      	uxth	r4, r3
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f7ff ff29 	bl	800c8ac <lv_obj_get_scroll_right>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	4423      	add	r3, r4
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	83bb      	strh	r3, [r7, #28]
            if(scroll_max < 0) scroll_max = 0;
 800ca64:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	da01      	bge.n	800ca70 <lv_obj_scroll_by_bounded+0x94>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	83bb      	strh	r3, [r7, #28]

            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 800ca70:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800ca74:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ca78:	425b      	negs	r3, r3
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	da29      	bge.n	800cad2 <lv_obj_scroll_by_bounded+0xf6>
 800ca7e:	8bbb      	ldrh	r3, [r7, #28]
 800ca80:	425b      	negs	r3, r3
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	83fb      	strh	r3, [r7, #30]
 800ca86:	e024      	b.n	800cad2 <lv_obj_scroll_by_bounded+0xf6>
        }
    }
    else {
        if(x_bounded < 0) x_bounded = 0;
 800ca88:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	da01      	bge.n	800ca94 <lv_obj_scroll_by_bounded+0xb8>
 800ca90:	2300      	movs	r3, #0
 800ca92:	83fb      	strh	r3, [r7, #30]
        if(x_bounded > 0) {
 800ca94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	dd1a      	ble.n	800cad2 <lv_obj_scroll_by_bounded+0xf6>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800ca9c:	68f8      	ldr	r0, [r7, #12]
 800ca9e:	f7ff fe61 	bl	800c764 <lv_obj_get_scroll_left>
 800caa2:	4603      	mov	r3, r0
 800caa4:	b29c      	uxth	r4, r3
 800caa6:	68f8      	ldr	r0, [r7, #12]
 800caa8:	f7ff ff00 	bl	800c8ac <lv_obj_get_scroll_right>
 800caac:	4603      	mov	r3, r0
 800caae:	b29b      	uxth	r3, r3
 800cab0:	4423      	add	r3, r4
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	837b      	strh	r3, [r7, #26]
            if(scroll_max < 0) scroll_max = 0;
 800cab6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	da01      	bge.n	800cac2 <lv_obj_scroll_by_bounded+0xe6>
 800cabe:	2300      	movs	r3, #0
 800cac0:	837b      	strh	r3, [r7, #26]

            if(x_bounded > scroll_max) x_bounded = scroll_max;
 800cac2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800cac6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800caca:	429a      	cmp	r2, r3
 800cacc:	dd01      	ble.n	800cad2 <lv_obj_scroll_by_bounded+0xf6>
 800cace:	8b7b      	ldrh	r3, [r7, #26]
 800cad0:	83fb      	strh	r3, [r7, #30]
        }
    }

    /*Don't let scroll more then naturally possible by the size of the content*/
    lv_coord_t y_current = -lv_obj_get_scroll_y(obj);
 800cad2:	68f8      	ldr	r0, [r7, #12]
 800cad4:	f7ff fd90 	bl	800c5f8 <lv_obj_get_scroll_y>
 800cad8:	4603      	mov	r3, r0
 800cada:	b29b      	uxth	r3, r3
 800cadc:	425b      	negs	r3, r3
 800cade:	b29b      	uxth	r3, r3
 800cae0:	827b      	strh	r3, [r7, #18]
    lv_coord_t y_bounded = y_current + dy;
 800cae2:	8a7a      	ldrh	r2, [r7, #18]
 800cae4:	893b      	ldrh	r3, [r7, #8]
 800cae6:	4413      	add	r3, r2
 800cae8:	b29b      	uxth	r3, r3
 800caea:	833b      	strh	r3, [r7, #24]

    if(y_bounded > 0) y_bounded = 0;
 800caec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	dd01      	ble.n	800caf8 <lv_obj_scroll_by_bounded+0x11c>
 800caf4:	2300      	movs	r3, #0
 800caf6:	833b      	strh	r3, [r7, #24]
    if(y_bounded < 0) {
 800caf8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	da1d      	bge.n	800cb3c <lv_obj_scroll_by_bounded+0x160>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 800cb00:	68f8      	ldr	r0, [r7, #12]
 800cb02:	f7ff fd91 	bl	800c628 <lv_obj_get_scroll_top>
 800cb06:	4603      	mov	r3, r0
 800cb08:	b29c      	uxth	r4, r3
 800cb0a:	68f8      	ldr	r0, [r7, #12]
 800cb0c:	f7ff fda4 	bl	800c658 <lv_obj_get_scroll_bottom>
 800cb10:	4603      	mov	r3, r0
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	4423      	add	r3, r4
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	82fb      	strh	r3, [r7, #22]
        if(scroll_max < 0) scroll_max = 0;
 800cb1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	da01      	bge.n	800cb26 <lv_obj_scroll_by_bounded+0x14a>
 800cb22:	2300      	movs	r3, #0
 800cb24:	82fb      	strh	r3, [r7, #22]
        if(y_bounded < -scroll_max) y_bounded = -scroll_max;
 800cb26:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800cb2a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cb2e:	425b      	negs	r3, r3
 800cb30:	429a      	cmp	r2, r3
 800cb32:	da03      	bge.n	800cb3c <lv_obj_scroll_by_bounded+0x160>
 800cb34:	8afb      	ldrh	r3, [r7, #22]
 800cb36:	425b      	negs	r3, r3
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	833b      	strh	r3, [r7, #24]
    }

    dx = x_bounded - x_current;
 800cb3c:	8bfa      	ldrh	r2, [r7, #30]
 800cb3e:	8abb      	ldrh	r3, [r7, #20]
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	817b      	strh	r3, [r7, #10]
    dy = y_bounded - y_current;
 800cb46:	8b3a      	ldrh	r2, [r7, #24]
 800cb48:	8a7b      	ldrh	r3, [r7, #18]
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	813b      	strh	r3, [r7, #8]
    if(dx || dy) {
 800cb50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d103      	bne.n	800cb60 <lv_obj_scroll_by_bounded+0x184>
 800cb58:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d009      	beq.n	800cb74 <lv_obj_scroll_by_bounded+0x198>
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 800cb60:	79fb      	ldrb	r3, [r7, #7]
 800cb62:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800cb66:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	f000 f806 	bl	800cb7c <lv_obj_scroll_by>
 800cb70:	e000      	b.n	800cb74 <lv_obj_scroll_by_bounded+0x198>
    if(dx == 0 && dy == 0) return;
 800cb72:	bf00      	nop
    }
}
 800cb74:	3724      	adds	r7, #36	; 0x24
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd90      	pop	{r4, r7, pc}
	...

0800cb7c <lv_obj_scroll_by>:


void lv_obj_scroll_by(lv_obj_t * obj, lv_coord_t dx, lv_coord_t dy, lv_anim_enable_t anim_en)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b09c      	sub	sp, #112	; 0x70
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	4608      	mov	r0, r1
 800cb86:	4611      	mov	r1, r2
 800cb88:	461a      	mov	r2, r3
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	817b      	strh	r3, [r7, #10]
 800cb8e:	460b      	mov	r3, r1
 800cb90:	813b      	strh	r3, [r7, #8]
 800cb92:	4613      	mov	r3, r2
 800cb94:	71fb      	strb	r3, [r7, #7]
    if(dx == 0 && dy == 0) return;
 800cb96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d104      	bne.n	800cba8 <lv_obj_scroll_by+0x2c>
 800cb9e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f000 80f7 	beq.w	800cd96 <lv_obj_scroll_by+0x21a>
    if(anim_en == LV_ANIM_ON) {
 800cba8:	79fb      	ldrb	r3, [r7, #7]
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	f040 80c4 	bne.w	800cd38 <lv_obj_scroll_by+0x1bc>
        lv_disp_t * d = lv_obj_get_disp(obj);
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f003 fa37 	bl	8010024 <lv_obj_get_disp>
 800cbb6:	6638      	str	r0, [r7, #96]	; 0x60
        lv_anim_t a;
        lv_anim_init(&a);
 800cbb8:	f107 0314 	add.w	r3, r7, #20
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f015 fa5d 	bl	802207c <lv_anim_init>
        lv_anim_set_var(&a, obj);
 800cbc2:	f107 0314 	add.w	r3, r7, #20
 800cbc6:	68f9      	ldr	r1, [r7, #12]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7ff fb83 	bl	800c2d4 <lv_anim_set_var>
        lv_anim_set_ready_cb(&a, scroll_anim_ready_cb);
 800cbce:	f107 0314 	add.w	r3, r7, #20
 800cbd2:	4977      	ldr	r1, [pc, #476]	; (800cdb0 <lv_obj_scroll_by+0x234>)
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f7ff fbca 	bl	800c36e <lv_anim_set_ready_cb>

        if(dx) {
 800cbda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d052      	beq.n	800cc88 <lv_obj_scroll_by+0x10c>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 800cbe2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800cbe4:	f015 f940 	bl	8021e68 <lv_disp_get_hor_res>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	005b      	lsls	r3, r3, #1
 800cbec:	109b      	asrs	r3, r3, #2
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	2100      	movs	r1, #0
 800cbf8:	f015 fb46 	bl	8022288 <lv_anim_speed_to_time>
 800cbfc:	66f8      	str	r0, [r7, #108]	; 0x6c
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 800cbfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc00:	2bc7      	cmp	r3, #199	; 0xc7
 800cc02:	d801      	bhi.n	800cc08 <lv_obj_scroll_by+0x8c>
 800cc04:	23c8      	movs	r3, #200	; 0xc8
 800cc06:	66fb      	str	r3, [r7, #108]	; 0x6c
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 800cc08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc0a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800cc0e:	d902      	bls.n	800cc16 <lv_obj_scroll_by+0x9a>
 800cc10:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cc14:	66fb      	str	r3, [r7, #108]	; 0x6c
            lv_anim_set_time(&a, t);
 800cc16:	f107 0314 	add.w	r3, r7, #20
 800cc1a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7ff fb75 	bl	800c30c <lv_anim_set_time>
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	f7ff fcd0 	bl	800c5c8 <lv_obj_get_scroll_x>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_anim_set_values(&a, -sx, -sx + dx);
 800cc2e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800cc32:	4259      	negs	r1, r3
 800cc34:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800cc38:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800cc3c:	1ad2      	subs	r2, r2, r3
 800cc3e:	f107 0314 	add.w	r3, r7, #20
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7ff fb70 	bl	800c328 <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, scroll_x_anim);
 800cc48:	f107 0314 	add.w	r3, r7, #20
 800cc4c:	4959      	ldr	r1, [pc, #356]	; (800cdb4 <lv_obj_scroll_by+0x238>)
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7ff fb4e 	bl	800c2f0 <lv_anim_set_exec_cb>
            lv_anim_set_path_cb(&a, lv_anim_path_ease_out);
 800cc54:	f107 0314 	add.w	r3, r7, #20
 800cc58:	4957      	ldr	r1, [pc, #348]	; (800cdb8 <lv_obj_scroll_by+0x23c>)
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7ff fb79 	bl	800c352 <lv_anim_set_path_cb>

            lv_res_t res;
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 800cc60:	f107 0314 	add.w	r3, r7, #20
 800cc64:	461a      	mov	r2, r3
 800cc66:	2109      	movs	r1, #9
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f7f9 ffd7 	bl	8006c1c <lv_event_send>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
            if(res != LV_RES_OK) return;
 800cc74:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	f040 808e 	bne.w	800cd9a <lv_obj_scroll_by+0x21e>
            lv_anim_start(&a);
 800cc7e:	f107 0314 	add.w	r3, r7, #20
 800cc82:	4618      	mov	r0, r3
 800cc84:	f015 fa20 	bl	80220c8 <lv_anim_start>
        }

        if(dy) {
 800cc88:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	f000 808b 	beq.w	800cda8 <lv_obj_scroll_by+0x22c>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 800cc92:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800cc94:	f015 f90e 	bl	8021eb4 <lv_disp_get_ver_res>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	005b      	lsls	r3, r3, #1
 800cc9c:	109b      	asrs	r3, r3, #2
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800cca4:	461a      	mov	r2, r3
 800cca6:	2100      	movs	r1, #0
 800cca8:	f015 faee 	bl	8022288 <lv_anim_speed_to_time>
 800ccac:	66b8      	str	r0, [r7, #104]	; 0x68
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 800ccae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccb0:	2bc7      	cmp	r3, #199	; 0xc7
 800ccb2:	d801      	bhi.n	800ccb8 <lv_obj_scroll_by+0x13c>
 800ccb4:	23c8      	movs	r3, #200	; 0xc8
 800ccb6:	66bb      	str	r3, [r7, #104]	; 0x68
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 800ccb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800ccbe:	d902      	bls.n	800ccc6 <lv_obj_scroll_by+0x14a>
 800ccc0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ccc4:	66bb      	str	r3, [r7, #104]	; 0x68
            lv_anim_set_time(&a, t);
 800ccc6:	f107 0314 	add.w	r3, r7, #20
 800ccca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7ff fb1d 	bl	800c30c <lv_anim_set_time>
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 800ccd2:	68f8      	ldr	r0, [r7, #12]
 800ccd4:	f7ff fc90 	bl	800c5f8 <lv_obj_get_scroll_y>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            lv_anim_set_values(&a, -sy, -sy + dy);
 800ccde:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800cce2:	4259      	negs	r1, r3
 800cce4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800cce8:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800ccec:	1ad2      	subs	r2, r2, r3
 800ccee:	f107 0314 	add.w	r3, r7, #20
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7ff fb18 	bl	800c328 <lv_anim_set_values>
            lv_anim_set_exec_cb(&a,  scroll_y_anim);
 800ccf8:	f107 0314 	add.w	r3, r7, #20
 800ccfc:	492f      	ldr	r1, [pc, #188]	; (800cdbc <lv_obj_scroll_by+0x240>)
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7ff faf6 	bl	800c2f0 <lv_anim_set_exec_cb>
            lv_anim_set_path_cb(&a, lv_anim_path_ease_out);
 800cd04:	f107 0314 	add.w	r3, r7, #20
 800cd08:	492b      	ldr	r1, [pc, #172]	; (800cdb8 <lv_obj_scroll_by+0x23c>)
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7ff fb21 	bl	800c352 <lv_anim_set_path_cb>

            lv_res_t res;
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 800cd10:	f107 0314 	add.w	r3, r7, #20
 800cd14:	461a      	mov	r2, r3
 800cd16:	2109      	movs	r1, #9
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	f7f9 ff7f 	bl	8006c1c <lv_event_send>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
            if(res != LV_RES_OK) return;
 800cd24:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d138      	bne.n	800cd9e <lv_obj_scroll_by+0x222>
            lv_anim_start(&a);
 800cd2c:	f107 0314 	add.w	r3, r7, #20
 800cd30:	4618      	mov	r0, r3
 800cd32:	f015 f9c9 	bl	80220c8 <lv_anim_start>
 800cd36:	e037      	b.n	800cda8 <lv_obj_scroll_by+0x22c>
        }
    }
    else {
        /*Remove pending animations*/
        lv_anim_del(obj, scroll_y_anim);
 800cd38:	4920      	ldr	r1, [pc, #128]	; (800cdbc <lv_obj_scroll_by+0x240>)
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f015 fa3c 	bl	80221b8 <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 800cd40:	491c      	ldr	r1, [pc, #112]	; (800cdb4 <lv_obj_scroll_by+0x238>)
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f015 fa38 	bl	80221b8 <lv_anim_del>

        lv_res_t res;
        res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 800cd48:	2200      	movs	r2, #0
 800cd4a:	2109      	movs	r1, #9
 800cd4c:	68f8      	ldr	r0, [r7, #12]
 800cd4e:	f7f9 ff65 	bl	8006c1c <lv_event_send>
 800cd52:	4603      	mov	r3, r0
 800cd54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 800cd58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d120      	bne.n	800cda2 <lv_obj_scroll_by+0x226>

        res = _lv_obj_scroll_by_raw(obj, dx, dy);
 800cd60:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800cd64:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cd68:	4619      	mov	r1, r3
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	f000 f8bb 	bl	800cee6 <_lv_obj_scroll_by_raw>
 800cd70:	4603      	mov	r3, r0
 800cd72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 800cd76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d113      	bne.n	800cda6 <lv_obj_scroll_by+0x22a>

        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 800cd7e:	2200      	movs	r2, #0
 800cd80:	210a      	movs	r1, #10
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f7f9 ff4a 	bl	8006c1c <lv_event_send>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(res != LV_RES_OK) return;
 800cd8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	e008      	b.n	800cda8 <lv_obj_scroll_by+0x22c>
    if(dx == 0 && dy == 0) return;
 800cd96:	bf00      	nop
 800cd98:	e006      	b.n	800cda8 <lv_obj_scroll_by+0x22c>
            if(res != LV_RES_OK) return;
 800cd9a:	bf00      	nop
 800cd9c:	e004      	b.n	800cda8 <lv_obj_scroll_by+0x22c>
            if(res != LV_RES_OK) return;
 800cd9e:	bf00      	nop
 800cda0:	e002      	b.n	800cda8 <lv_obj_scroll_by+0x22c>
        if(res != LV_RES_OK) return;
 800cda2:	bf00      	nop
 800cda4:	e000      	b.n	800cda8 <lv_obj_scroll_by+0x22c>
        if(res != LV_RES_OK) return;
 800cda6:	bf00      	nop
    }
}
 800cda8:	3770      	adds	r7, #112	; 0x70
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	0800dccf 	.word	0x0800dccf
 800cdb4:	0800dc6f 	.word	0x0800dc6f
 800cdb8:	0802231b 	.word	0x0802231b
 800cdbc:	0800dc9f 	.word	0x0800dc9f

0800cdc0 <lv_obj_scroll_to>:

void lv_obj_scroll_to(lv_obj_t * obj, lv_coord_t x, lv_coord_t y, lv_anim_enable_t anim_en)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	4608      	mov	r0, r1
 800cdca:	4611      	mov	r1, r2
 800cdcc:	461a      	mov	r2, r3
 800cdce:	4603      	mov	r3, r0
 800cdd0:	817b      	strh	r3, [r7, #10]
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	813b      	strh	r3, [r7, #8]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	71fb      	strb	r3, [r7, #7]
    lv_obj_scroll_to_x(obj, x, anim_en);
 800cdda:	79fa      	ldrb	r2, [r7, #7]
 800cddc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800cde0:	4619      	mov	r1, r3
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f000 f80c 	bl	800ce00 <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 800cde8:	79fa      	ldrb	r2, [r7, #7]
 800cdea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800cdee:	4619      	mov	r1, r3
 800cdf0:	68f8      	ldr	r0, [r7, #12]
 800cdf2:	f000 f829 	bl	800ce48 <lv_obj_scroll_to_y>
}
 800cdf6:	bf00      	nop
 800cdf8:	3710      	adds	r7, #16
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
	...

0800ce00 <lv_obj_scroll_to_x>:

void lv_obj_scroll_to_x(lv_obj_t * obj, lv_coord_t x, lv_anim_enable_t anim_en)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	460b      	mov	r3, r1
 800ce0a:	807b      	strh	r3, [r7, #2]
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	707b      	strb	r3, [r7, #1]
    lv_anim_del(obj, scroll_x_anim);
 800ce10:	490c      	ldr	r1, [pc, #48]	; (800ce44 <lv_obj_scroll_to_x+0x44>)
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f015 f9d0 	bl	80221b8 <lv_anim_del>

    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7ff fbd5 	bl	800c5c8 <lv_obj_get_scroll_x>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	81fb      	strh	r3, [r7, #14]
    lv_coord_t diff = -x + scroll_x;
 800ce22:	89fa      	ldrh	r2, [r7, #14]
 800ce24:	887b      	ldrh	r3, [r7, #2]
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	81bb      	strh	r3, [r7, #12]

    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 800ce2c:	787b      	ldrb	r3, [r7, #1]
 800ce2e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800ce32:	2200      	movs	r2, #0
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f7ff fdd1 	bl	800c9dc <lv_obj_scroll_by_bounded>
}
 800ce3a:	bf00      	nop
 800ce3c:	3710      	adds	r7, #16
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	0800dc6f 	.word	0x0800dc6f

0800ce48 <lv_obj_scroll_to_y>:

void lv_obj_scroll_to_y(lv_obj_t * obj, lv_coord_t y, lv_anim_enable_t anim_en)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b084      	sub	sp, #16
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	460b      	mov	r3, r1
 800ce52:	807b      	strh	r3, [r7, #2]
 800ce54:	4613      	mov	r3, r2
 800ce56:	707b      	strb	r3, [r7, #1]
    lv_anim_del(obj, scroll_y_anim);
 800ce58:	490c      	ldr	r1, [pc, #48]	; (800ce8c <lv_obj_scroll_to_y+0x44>)
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f015 f9ac 	bl	80221b8 <lv_anim_del>

    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7ff fbc9 	bl	800c5f8 <lv_obj_get_scroll_y>
 800ce66:	4603      	mov	r3, r0
 800ce68:	81fb      	strh	r3, [r7, #14]
    lv_coord_t diff = -y + scroll_y;
 800ce6a:	89fa      	ldrh	r2, [r7, #14]
 800ce6c:	887b      	ldrh	r3, [r7, #2]
 800ce6e:	1ad3      	subs	r3, r2, r3
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	81bb      	strh	r3, [r7, #12]

    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 800ce74:	787b      	ldrb	r3, [r7, #1]
 800ce76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7ff fdad 	bl	800c9dc <lv_obj_scroll_by_bounded>
}
 800ce82:	bf00      	nop
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	0800dc9f 	.word	0x0800dc9f

0800ce90 <lv_obj_scroll_to_view_recursive>:
    lv_point_t p = {0, 0};
    scroll_area_into_view(&obj->coords, obj, &p, anim_en);
}

void lv_obj_scroll_to_view_recursive(lv_obj_t * obj, lv_anim_enable_t anim_en)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b086      	sub	sp, #24
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	70fb      	strb	r3, [r7, #3]
    /*Be sure the screens layout is correct*/
    lv_obj_update_layout(obj);
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7fd fe6d 	bl	800ab7c <lv_obj_update_layout>

    lv_point_t p = {0, 0};
 800cea2:	2300      	movs	r3, #0
 800cea4:	81bb      	strh	r3, [r7, #12]
 800cea6:	2300      	movs	r3, #0
 800cea8:	81fb      	strh	r3, [r7, #14]
    lv_obj_t * child = obj;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	617b      	str	r3, [r7, #20]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800ceae:	6978      	ldr	r0, [r7, #20]
 800ceb0:	f003 f8f2 	bl	8010098 <lv_obj_get_parent>
 800ceb4:	6138      	str	r0, [r7, #16]
    while(parent) {
 800ceb6:	e00e      	b.n	800ced6 <lv_obj_scroll_to_view_recursive+0x46>
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f103 0014 	add.w	r0, r3, #20
 800cebe:	78fb      	ldrb	r3, [r7, #3]
 800cec0:	f107 020c 	add.w	r2, r7, #12
 800cec4:	6979      	ldr	r1, [r7, #20]
 800cec6:	f000 ff11 	bl	800dcec <scroll_area_into_view>
        child = parent;
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	617b      	str	r3, [r7, #20]
        parent = lv_obj_get_parent(parent);
 800cece:	6938      	ldr	r0, [r7, #16]
 800ced0:	f003 f8e2 	bl	8010098 <lv_obj_get_parent>
 800ced4:	6138      	str	r0, [r7, #16]
    while(parent) {
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1ed      	bne.n	800ceb8 <lv_obj_scroll_to_view_recursive+0x28>
    }
}
 800cedc:	bf00      	nop
 800cede:	bf00      	nop
 800cee0:	3718      	adds	r7, #24
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}

0800cee6 <_lv_obj_scroll_by_raw>:

lv_res_t _lv_obj_scroll_by_raw(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 800cee6:	b580      	push	{r7, lr}
 800cee8:	b084      	sub	sp, #16
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6078      	str	r0, [r7, #4]
 800ceee:	460b      	mov	r3, r1
 800cef0:	807b      	strh	r3, [r7, #2]
 800cef2:	4613      	mov	r3, r2
 800cef4:	803b      	strh	r3, [r7, #0]
    if(x == 0 && y == 0) return LV_RES_OK;
 800cef6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d105      	bne.n	800cf0a <_lv_obj_scroll_by_raw+0x24>
 800cefe:	f9b7 3000 	ldrsh.w	r3, [r7]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d101      	bne.n	800cf0a <_lv_obj_scroll_by_raw+0x24>
 800cf06:	2301      	movs	r3, #1
 800cf08:	e032      	b.n	800cf70 <_lv_obj_scroll_by_raw+0x8a>

    lv_obj_allocate_spec_attr(obj);
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f7fb f8a8 	bl	8008060 <lv_obj_allocate_spec_attr>

    obj->spec_attr->scroll.x += x;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800cf18:	b29a      	uxth	r2, r3
 800cf1a:	887b      	ldrh	r3, [r7, #2]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	b29a      	uxth	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	b212      	sxth	r2, r2
 800cf26:	821a      	strh	r2, [r3, #16]
    obj->spec_attr->scroll.y += y;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	689b      	ldr	r3, [r3, #8]
 800cf2c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800cf30:	b29a      	uxth	r2, r3
 800cf32:	883b      	ldrh	r3, [r7, #0]
 800cf34:	4413      	add	r3, r2
 800cf36:	b29a      	uxth	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	b212      	sxth	r2, r2
 800cf3e:	825a      	strh	r2, [r3, #18]

    lv_obj_move_children_by(obj, x, y, true);
 800cf40:	f9b7 2000 	ldrsh.w	r2, [r7]
 800cf44:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800cf48:	2301      	movs	r3, #1
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f7fe faa8 	bl	800b4a0 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 800cf50:	2200      	movs	r2, #0
 800cf52:	210b      	movs	r1, #11
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7f9 fe61 	bl	8006c1c <lv_event_send>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	73fb      	strb	r3, [r7, #15]
    if(res != LV_RES_OK) return res;
 800cf5e:	7bfb      	ldrb	r3, [r7, #15]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d001      	beq.n	800cf68 <_lv_obj_scroll_by_raw+0x82>
 800cf64:	7bfb      	ldrb	r3, [r7, #15]
 800cf66:	e003      	b.n	800cf70 <_lv_obj_scroll_by_raw+0x8a>
    lv_obj_invalidate(obj);
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7fe fc2c 	bl	800b7c6 <lv_obj_invalidate>
    return LV_RES_OK;
 800cf6e:	2301      	movs	r3, #1
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <lv_obj_get_scrollbar_area>:
    lv_indev_scroll_get_snap_dist(obj, &p);
    lv_obj_scroll_by(obj, p.x, p.y, anim_en);
}

void lv_obj_get_scrollbar_area(lv_obj_t * obj, lv_area_t * hor_area, lv_area_t * ver_area)
{
 800cf78:	b590      	push	{r4, r7, lr}
 800cf7a:	b095      	sub	sp, #84	; 0x54
 800cf7c:	af02      	add	r7, sp, #8
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	607a      	str	r2, [r7, #4]
    lv_area_set(hor_area, 0, 0, -1, -1);
 800cf84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf88:	9300      	str	r3, [sp, #0]
 800cf8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf8e:	2200      	movs	r2, #0
 800cf90:	2100      	movs	r1, #0
 800cf92:	68b8      	ldr	r0, [r7, #8]
 800cf94:	f015 fbca 	bl	802272c <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 800cf98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf9c:	9300      	str	r3, [sp, #0]
 800cf9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	2100      	movs	r1, #0
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f015 fbc0 	bl	802272c <lv_area_set>

    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 800cfac:	2110      	movs	r1, #16
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	f7fb f80d 	bl	8007fce <lv_obj_has_flag>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	f083 0301 	eor.w	r3, r3, #1
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	f040 8591 	bne.w	800dae4 <lv_obj_get_scrollbar_area+0xb6c>

    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 800cfc2:	68f8      	ldr	r0, [r7, #12]
 800cfc4:	f7ff faa8 	bl	800c518 <lv_obj_get_scrollbar_mode>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 800cfce:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	f000 8588 	beq.w	800dae8 <lv_obj_get_scrollbar_area+0xb70>

    /*If there is no indev scrolling this object but `mode==active` return*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800cfd8:	2000      	movs	r0, #0
 800cfda:	f014 ffcb 	bl	8021f74 <lv_indev_get_next>
 800cfde:	6478      	str	r0, [r7, #68]	; 0x44
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 800cfe0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800cfe4:	2b02      	cmp	r3, #2
 800cfe6:	d114      	bne.n	800d012 <lv_obj_get_scrollbar_area+0x9a>
        while(indev) {
 800cfe8:	e00a      	b.n	800d000 <lv_obj_get_scrollbar_area+0x88>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 800cfea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cfec:	f7fa fc5d 	bl	80078aa <lv_indev_get_scroll_obj>
 800cff0:	4602      	mov	r2, r0
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d007      	beq.n	800d008 <lv_obj_get_scrollbar_area+0x90>
            indev = lv_indev_get_next(indev);
 800cff8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cffa:	f014 ffbb 	bl	8021f74 <lv_indev_get_next>
 800cffe:	6478      	str	r0, [r7, #68]	; 0x44
        while(indev) {
 800d000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d002:	2b00      	cmp	r3, #0
 800d004:	d1f1      	bne.n	800cfea <lv_obj_get_scrollbar_area+0x72>
 800d006:	e000      	b.n	800d00a <lv_obj_get_scrollbar_area+0x92>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 800d008:	bf00      	nop
        }
        if(indev == NULL)  return;
 800d00a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f000 856d 	beq.w	800daec <lv_obj_get_scrollbar_area+0xb74>
    }

    lv_coord_t st = lv_obj_get_scroll_top(obj);
 800d012:	68f8      	ldr	r0, [r7, #12]
 800d014:	f7ff fb08 	bl	800c628 <lv_obj_get_scroll_top>
 800d018:	4603      	mov	r3, r0
 800d01a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f7ff fb1b 	bl	800c658 <lv_obj_get_scroll_bottom>
 800d022:	4603      	mov	r3, r0
 800d024:	87bb      	strh	r3, [r7, #60]	; 0x3c
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800d026:	68f8      	ldr	r0, [r7, #12]
 800d028:	f7ff fb9c 	bl	800c764 <lv_obj_get_scroll_left>
 800d02c:	4603      	mov	r3, r0
 800d02e:	877b      	strh	r3, [r7, #58]	; 0x3a
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f7ff fc3b 	bl	800c8ac <lv_obj_get_scroll_right>
 800d036:	4603      	mov	r3, r0
 800d038:	873b      	strh	r3, [r7, #56]	; 0x38

    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 800d03a:	68f8      	ldr	r0, [r7, #12]
 800d03c:	f7ff fa82 	bl	800c544 <lv_obj_get_scroll_dir>
 800d040:	4603      	mov	r3, r0
 800d042:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    bool ver_draw = false;
 800d046:	2300      	movs	r3, #0
 800d048:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    if((dir & LV_DIR_VER) &&
 800d04c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d050:	f003 030c 	and.w	r3, r3, #12
 800d054:	2b00      	cmp	r3, #0
 800d056:	d01c      	beq.n	800d092 <lv_obj_get_scrollbar_area+0x11a>
 800d058:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d015      	beq.n	800d08c <lv_obj_get_scrollbar_area+0x114>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800d060:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800d064:	2b03      	cmp	r3, #3
 800d066:	d107      	bne.n	800d078 <lv_obj_get_scrollbar_area+0x100>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800d068:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	dc0d      	bgt.n	800d08c <lv_obj_get_scrollbar_area+0x114>
 800d070:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800d074:	2b00      	cmp	r3, #0
 800d076:	dc09      	bgt.n	800d08c <lv_obj_get_scrollbar_area+0x114>
 800d078:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800d07c:	2b02      	cmp	r3, #2
 800d07e:	d108      	bne.n	800d092 <lv_obj_get_scrollbar_area+0x11a>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 800d080:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d082:	f7fa fbf1 	bl	8007868 <lv_indev_get_scroll_dir>
 800d086:	4603      	mov	r3, r0
 800d088:	2b0c      	cmp	r3, #12
 800d08a:	d102      	bne.n	800d092 <lv_obj_get_scrollbar_area+0x11a>
        ver_draw = true;
 800d08c:	2301      	movs	r3, #1
 800d08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }


    bool hor_draw = false;
 800d092:	2300      	movs	r3, #0
 800d094:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    if((dir & LV_DIR_HOR) &&
 800d098:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d09c:	f003 0303 	and.w	r3, r3, #3
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d01c      	beq.n	800d0de <lv_obj_get_scrollbar_area+0x166>
 800d0a4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d015      	beq.n	800d0d8 <lv_obj_get_scrollbar_area+0x160>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800d0ac:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800d0b0:	2b03      	cmp	r3, #3
 800d0b2:	d107      	bne.n	800d0c4 <lv_obj_get_scrollbar_area+0x14c>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800d0b4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	dc0d      	bgt.n	800d0d8 <lv_obj_get_scrollbar_area+0x160>
 800d0bc:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	dc09      	bgt.n	800d0d8 <lv_obj_get_scrollbar_area+0x160>
 800d0c4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800d0c8:	2b02      	cmp	r3, #2
 800d0ca:	d108      	bne.n	800d0de <lv_obj_get_scrollbar_area+0x166>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 800d0cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d0ce:	f7fa fbcb 	bl	8007868 <lv_indev_get_scroll_dir>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2b03      	cmp	r3, #3
 800d0d6:	d102      	bne.n	800d0de <lv_obj_get_scrollbar_area+0x166>
        hor_draw = true;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    }

    if(!hor_draw && !ver_draw) return;
 800d0de:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d0e2:	f083 0301 	eor.w	r3, r3, #1
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d007      	beq.n	800d0fc <lv_obj_get_scrollbar_area+0x184>
 800d0ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d0f0:	f083 0301 	eor.w	r3, r3, #1
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	f040 84fa 	bne.w	800daf0 <lv_obj_get_scrollbar_area+0xb78>

    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_SCROLLBAR) == LV_BASE_DIR_RTL ? true : false;
 800d0fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f7ff f9d2 	bl	800c4aa <lv_obj_get_style_base_dir>
 800d106:	4603      	mov	r3, r0
 800d108:	2b01      	cmp	r3, #1
 800d10a:	bf0c      	ite	eq
 800d10c:	2301      	moveq	r3, #1
 800d10e:	2300      	movne	r3, #0
 800d110:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    lv_coord_t top_space = lv_obj_get_style_pad_top(obj, LV_PART_SCROLLBAR);
 800d114:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	f7ff f948 	bl	800c3ae <lv_obj_get_style_pad_top>
 800d11e:	4603      	mov	r3, r0
 800d120:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_coord_t bottom_space = lv_obj_get_style_pad_bottom(obj, LV_PART_SCROLLBAR);
 800d122:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d126:	68f8      	ldr	r0, [r7, #12]
 800d128:	f7ff f953 	bl	800c3d2 <lv_obj_get_style_pad_bottom>
 800d12c:	4603      	mov	r3, r0
 800d12e:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t left_space = lv_obj_get_style_pad_left(obj, LV_PART_SCROLLBAR);
 800d130:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f7ff f95e 	bl	800c3f6 <lv_obj_get_style_pad_left>
 800d13a:	4603      	mov	r3, r0
 800d13c:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t right_space = lv_obj_get_style_pad_right(obj, LV_PART_SCROLLBAR);
 800d13e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f7ff f969 	bl	800c41a <lv_obj_get_style_pad_right>
 800d148:	4603      	mov	r3, r0
 800d14a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t tickness = lv_obj_get_style_width(obj, LV_PART_SCROLLBAR);
 800d14c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	f7ff f91a 	bl	800c38a <lv_obj_get_style_width>
 800d156:	4603      	mov	r3, r0
 800d158:	85bb      	strh	r3, [r7, #44]	; 0x2c

    lv_coord_t obj_h = lv_obj_get_height(obj);
 800d15a:	68f8      	ldr	r0, [r7, #12]
 800d15c:	f7fd fd76 	bl	800ac4c <lv_obj_get_height>
 800d160:	4603      	mov	r3, r0
 800d162:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t obj_w = lv_obj_get_width(obj);
 800d164:	68f8      	ldr	r0, [r7, #12]
 800d166:	f7fd fd63 	bl	800ac30 <lv_obj_get_width>
 800d16a:	4603      	mov	r3, r0
 800d16c:	853b      	strh	r3, [r7, #40]	; 0x28

    /*Space required for the vertical and horizontal scrollbars*/
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 800d16e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d172:	2b00      	cmp	r3, #0
 800d174:	d002      	beq.n	800d17c <lv_obj_get_scrollbar_area+0x204>
 800d176:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d17a:	e000      	b.n	800d17e <lv_obj_get_scrollbar_area+0x206>
 800d17c:	2300      	movs	r3, #0
 800d17e:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 800d180:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d184:	2b00      	cmp	r3, #0
 800d186:	d002      	beq.n	800d18e <lv_obj_get_scrollbar_area+0x216>
 800d188:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800d18c:	e000      	b.n	800d190 <lv_obj_get_scrollbar_area+0x218>
 800d18e:	2300      	movs	r3, #0
 800d190:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t rem;

    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800d192:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f7ff f951 	bl	800c43e <lv_obj_get_style_bg_opa>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d808      	bhi.n	800d1b4 <lv_obj_get_scrollbar_area+0x23c>
       lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN) {
 800d1a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d1a6:	68f8      	ldr	r0, [r7, #12]
 800d1a8:	f7ff f95b 	bl	800c462 <lv_obj_get_style_border_opa>
 800d1ac:	4603      	mov	r3, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	f240 84a0 	bls.w	800daf4 <lv_obj_get_scrollbar_area+0xb7c>
        return;
    }

    /*Draw vertical scrollbar if the mode is ON or can be scrolled in this direction*/
    lv_coord_t content_h = obj_h + st + sb;
 800d1b4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800d1b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d1b8:	4413      	add	r3, r2
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d1be:	4413      	add	r3, r2
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	847b      	strh	r3, [r7, #34]	; 0x22
    if(ver_draw && content_h) {
 800d1c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f000 81c3 	beq.w	800d554 <lv_obj_get_scrollbar_area+0x5dc>
 800d1ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f000 81be 	beq.w	800d554 <lv_obj_get_scrollbar_area+0x5dc>
        ver_area->y1 = obj->coords.y1;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	805a      	strh	r2, [r3, #2]
        ver_area->y2 = obj->coords.y2;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	80da      	strh	r2, [r3, #6]
        if(rtl) {
 800d1ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d016      	beq.n	800d222 <lv_obj_get_scrollbar_area+0x2aa>
            ver_area->x1 = obj->coords.x1 + left_space;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800d1fa:	b29a      	uxth	r2, r3
 800d1fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d1fe:	4413      	add	r3, r2
 800d200:	b29b      	uxth	r3, r3
 800d202:	b21a      	sxth	r2, r3
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	801a      	strh	r2, [r3, #0]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d20e:	b29a      	uxth	r2, r3
 800d210:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d212:	4413      	add	r3, r2
 800d214:	b29b      	uxth	r3, r3
 800d216:	3b01      	subs	r3, #1
 800d218:	b29b      	uxth	r3, r3
 800d21a:	b21a      	sxth	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	809a      	strh	r2, [r3, #4]
 800d220:	e015      	b.n	800d24e <lv_obj_get_scrollbar_area+0x2d6>
        }
        else {
            ver_area->x2 = obj->coords.x2 - right_space;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800d228:	b29a      	uxth	r2, r3
 800d22a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d22c:	1ad3      	subs	r3, r2, r3
 800d22e:	b29b      	uxth	r3, r3
 800d230:	b21a      	sxth	r2, r3
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	809a      	strh	r2, [r3, #4]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d240:	1ad3      	subs	r3, r2, r3
 800d242:	b29b      	uxth	r3, r3
 800d244:	3301      	adds	r3, #1
 800d246:	b29b      	uxth	r3, r3
 800d248:	b21a      	sxth	r2, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	801a      	strh	r2, [r3, #0]
        }

        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 800d24e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800d252:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800d256:	1ad2      	subs	r2, r2, r3
 800d258:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800d25c:	1ad2      	subs	r2, r2, r3
 800d25e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d262:	1ad3      	subs	r3, r2, r3
 800d264:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800d268:	fb03 f202 	mul.w	r2, r3, r2
 800d26c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d270:	fb92 f3f3 	sdiv	r3, r2, r3
 800d274:	843b      	strh	r3, [r7, #32]
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 800d276:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800d27a:	2000      	movs	r0, #0
 800d27c:	f014 fe40 	bl	8021f00 <lv_disp_get_dpi>
 800d280:	4603      	mov	r3, r0
 800d282:	461a      	mov	r2, r3
 800d284:	4613      	mov	r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	4413      	add	r3, r2
 800d28a:	005b      	lsls	r3, r3, #1
 800d28c:	2bef      	cmp	r3, #239	; 0xef
 800d28e:	dd10      	ble.n	800d2b2 <lv_obj_get_scrollbar_area+0x33a>
 800d290:	2000      	movs	r0, #0
 800d292:	f014 fe35 	bl	8021f00 <lv_disp_get_dpi>
 800d296:	4603      	mov	r3, r0
 800d298:	461a      	mov	r2, r3
 800d29a:	4613      	mov	r3, r2
 800d29c:	009b      	lsls	r3, r3, #2
 800d29e:	4413      	add	r3, r2
 800d2a0:	005b      	lsls	r3, r3, #1
 800d2a2:	3350      	adds	r3, #80	; 0x50
 800d2a4:	4aa7      	ldr	r2, [pc, #668]	; (800d544 <lv_obj_get_scrollbar_area+0x5cc>)
 800d2a6:	fb82 1203 	smull	r1, r2, r2, r3
 800d2aa:	1192      	asrs	r2, r2, #6
 800d2ac:	17db      	asrs	r3, r3, #31
 800d2ae:	1ad3      	subs	r3, r2, r3
 800d2b0:	e000      	b.n	800d2b4 <lv_obj_get_scrollbar_area+0x33c>
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	42a3      	cmp	r3, r4
 800d2b6:	db1e      	blt.n	800d2f6 <lv_obj_get_scrollbar_area+0x37e>
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	f014 fe21 	bl	8021f00 <lv_disp_get_dpi>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	4413      	add	r3, r2
 800d2c8:	005b      	lsls	r3, r3, #1
 800d2ca:	2bef      	cmp	r3, #239	; 0xef
 800d2cc:	dd11      	ble.n	800d2f2 <lv_obj_get_scrollbar_area+0x37a>
 800d2ce:	2000      	movs	r0, #0
 800d2d0:	f014 fe16 	bl	8021f00 <lv_disp_get_dpi>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	4613      	mov	r3, r2
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	4413      	add	r3, r2
 800d2de:	005b      	lsls	r3, r3, #1
 800d2e0:	3350      	adds	r3, #80	; 0x50
 800d2e2:	4a98      	ldr	r2, [pc, #608]	; (800d544 <lv_obj_get_scrollbar_area+0x5cc>)
 800d2e4:	fb82 1203 	smull	r1, r2, r2, r3
 800d2e8:	1192      	asrs	r2, r2, #6
 800d2ea:	17db      	asrs	r3, r3, #31
 800d2ec:	1ad3      	subs	r3, r2, r3
 800d2ee:	b21b      	sxth	r3, r3
 800d2f0:	e003      	b.n	800d2fa <lv_obj_get_scrollbar_area+0x382>
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e001      	b.n	800d2fa <lv_obj_get_scrollbar_area+0x382>
 800d2f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d2fa:	843b      	strh	r3, [r7, #32]
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 800d2fc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800d2fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	b29a      	uxth	r2, r3
 800d304:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d306:	1ad3      	subs	r3, r2, r3
 800d308:	b29a      	uxth	r2, r3
 800d30a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d30c:	1ad3      	subs	r3, r2, r3
 800d30e:	b29a      	uxth	r2, r3
 800d310:	8c3b      	ldrh	r3, [r7, #32]
 800d312:	1ad3      	subs	r3, r2, r3
 800d314:	b29b      	uxth	r3, r3
 800d316:	83fb      	strh	r3, [r7, #30]
              sb_h;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 800d318:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d31a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d31c:	1ad3      	subs	r3, r2, r3
 800d31e:	b29b      	uxth	r3, r3
 800d320:	83bb      	strh	r3, [r7, #28]
        if(scroll_h <= 0) {
 800d322:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800d326:	2b00      	cmp	r3, #0
 800d328:	dc19      	bgt.n	800d35e <lv_obj_get_scrollbar_area+0x3e6>
            ver_area->y1 = obj->coords.y1 + top_space;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800d330:	b29a      	uxth	r2, r3
 800d332:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d334:	4413      	add	r3, r2
 800d336:	b29b      	uxth	r3, r3
 800d338:	b21a      	sxth	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	805a      	strh	r2, [r3, #2]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800d344:	b29a      	uxth	r2, r3
 800d346:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d348:	1ad3      	subs	r3, r2, r3
 800d34a:	b29a      	uxth	r2, r3
 800d34c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d34e:	1ad3      	subs	r3, r2, r3
 800d350:	b29b      	uxth	r3, r3
 800d352:	3b01      	subs	r3, #1
 800d354:	b29b      	uxth	r3, r3
 800d356:	b21a      	sxth	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	80da      	strh	r2, [r3, #6]
 800d35c:	e0fa      	b.n	800d554 <lv_obj_get_scrollbar_area+0x5dc>
        }
        else {
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 800d35e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d362:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800d366:	fb03 f202 	mul.w	r2, r3, r2
 800d36a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800d36e:	fb92 f3f3 	sdiv	r3, r2, r3
 800d372:	837b      	strh	r3, [r7, #26]
            sb_y = rem - sb_y;
 800d374:	8bfa      	ldrh	r2, [r7, #30]
 800d376:	8b7b      	ldrh	r3, [r7, #26]
 800d378:	1ad3      	subs	r3, r2, r3
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	837b      	strh	r3, [r7, #26]

            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800d384:	b29a      	uxth	r2, r3
 800d386:	8b7b      	ldrh	r3, [r7, #26]
 800d388:	4413      	add	r3, r2
 800d38a:	b29a      	uxth	r2, r3
 800d38c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d38e:	4413      	add	r3, r2
 800d390:	b29b      	uxth	r3, r3
 800d392:	b21a      	sxth	r2, r3
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	805a      	strh	r2, [r3, #2]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d39e:	b29a      	uxth	r2, r3
 800d3a0:	8c3b      	ldrh	r3, [r7, #32]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	3b01      	subs	r3, #1
 800d3a8:	b29b      	uxth	r3, r3
 800d3aa:	b21a      	sxth	r2, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	80da      	strh	r2, [r3, #6]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800d3be:	4619      	mov	r1, r3
 800d3c0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800d3c4:	440b      	add	r3, r1
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	da57      	bge.n	800d47a <lv_obj_get_scrollbar_area+0x502>
                ver_area->y1 = obj->coords.y1 + top_space;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d3d4:	4413      	add	r3, r2
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	b21a      	sxth	r2, r3
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	805a      	strh	r2, [r3, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d3e4:	461c      	mov	r4, r3
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	f014 fd8a 	bl	8021f00 <lv_disp_get_dpi>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	4613      	mov	r3, r2
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	4413      	add	r3, r2
 800d3f6:	005b      	lsls	r3, r3, #1
 800d3f8:	2bef      	cmp	r3, #239	; 0xef
 800d3fa:	dd10      	ble.n	800d41e <lv_obj_get_scrollbar_area+0x4a6>
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	f014 fd7f 	bl	8021f00 <lv_disp_get_dpi>
 800d402:	4603      	mov	r3, r0
 800d404:	461a      	mov	r2, r3
 800d406:	4613      	mov	r3, r2
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	4413      	add	r3, r2
 800d40c:	005b      	lsls	r3, r3, #1
 800d40e:	3350      	adds	r3, #80	; 0x50
 800d410:	4a4c      	ldr	r2, [pc, #304]	; (800d544 <lv_obj_get_scrollbar_area+0x5cc>)
 800d412:	fb82 1203 	smull	r1, r2, r2, r3
 800d416:	1192      	asrs	r2, r2, #6
 800d418:	17db      	asrs	r3, r3, #31
 800d41a:	1ad3      	subs	r3, r2, r3
 800d41c:	e000      	b.n	800d420 <lv_obj_get_scrollbar_area+0x4a8>
 800d41e:	2301      	movs	r3, #1
 800d420:	4423      	add	r3, r4
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800d428:	4293      	cmp	r3, r2
 800d42a:	dd26      	ble.n	800d47a <lv_obj_get_scrollbar_area+0x502>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d432:	b29c      	uxth	r4, r3
 800d434:	2000      	movs	r0, #0
 800d436:	f014 fd63 	bl	8021f00 <lv_disp_get_dpi>
 800d43a:	4603      	mov	r3, r0
 800d43c:	461a      	mov	r2, r3
 800d43e:	4613      	mov	r3, r2
 800d440:	009b      	lsls	r3, r3, #2
 800d442:	4413      	add	r3, r2
 800d444:	005b      	lsls	r3, r3, #1
 800d446:	2bef      	cmp	r3, #239	; 0xef
 800d448:	dd11      	ble.n	800d46e <lv_obj_get_scrollbar_area+0x4f6>
 800d44a:	2000      	movs	r0, #0
 800d44c:	f014 fd58 	bl	8021f00 <lv_disp_get_dpi>
 800d450:	4603      	mov	r3, r0
 800d452:	461a      	mov	r2, r3
 800d454:	4613      	mov	r3, r2
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	4413      	add	r3, r2
 800d45a:	005b      	lsls	r3, r3, #1
 800d45c:	3350      	adds	r3, #80	; 0x50
 800d45e:	4a39      	ldr	r2, [pc, #228]	; (800d544 <lv_obj_get_scrollbar_area+0x5cc>)
 800d460:	fb82 1203 	smull	r1, r2, r2, r3
 800d464:	1192      	asrs	r2, r2, #6
 800d466:	17db      	asrs	r3, r3, #31
 800d468:	1ad3      	subs	r3, r2, r3
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	e000      	b.n	800d470 <lv_obj_get_scrollbar_area+0x4f8>
 800d46e:	2301      	movs	r3, #1
 800d470:	4423      	add	r3, r4
 800d472:	b29b      	uxth	r3, r3
 800d474:	b21a      	sxth	r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	80da      	strh	r2, [r3, #6]
                }
            }
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d480:	4619      	mov	r1, r3
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800d488:	461a      	mov	r2, r3
 800d48a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d48e:	1ad2      	subs	r2, r2, r3
 800d490:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800d494:	1ad3      	subs	r3, r2, r3
 800d496:	4299      	cmp	r1, r3
 800d498:	dd5c      	ble.n	800d554 <lv_obj_get_scrollbar_area+0x5dc>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4a4:	1ad3      	subs	r3, r2, r3
 800d4a6:	b29a      	uxth	r2, r3
 800d4a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d4aa:	1ad3      	subs	r3, r2, r3
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	b21a      	sxth	r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	80da      	strh	r2, [r3, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d4ba:	461c      	mov	r4, r3
 800d4bc:	2000      	movs	r0, #0
 800d4be:	f014 fd1f 	bl	8021f00 <lv_disp_get_dpi>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	4613      	mov	r3, r2
 800d4c8:	009b      	lsls	r3, r3, #2
 800d4ca:	4413      	add	r3, r2
 800d4cc:	005b      	lsls	r3, r3, #1
 800d4ce:	2bef      	cmp	r3, #239	; 0xef
 800d4d0:	dd10      	ble.n	800d4f4 <lv_obj_get_scrollbar_area+0x57c>
 800d4d2:	2000      	movs	r0, #0
 800d4d4:	f014 fd14 	bl	8021f00 <lv_disp_get_dpi>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	461a      	mov	r2, r3
 800d4dc:	4613      	mov	r3, r2
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	4413      	add	r3, r2
 800d4e2:	005b      	lsls	r3, r3, #1
 800d4e4:	3350      	adds	r3, #80	; 0x50
 800d4e6:	4a17      	ldr	r2, [pc, #92]	; (800d544 <lv_obj_get_scrollbar_area+0x5cc>)
 800d4e8:	fb82 1203 	smull	r1, r2, r2, r3
 800d4ec:	1192      	asrs	r2, r2, #6
 800d4ee:	17db      	asrs	r3, r3, #31
 800d4f0:	1ad3      	subs	r3, r2, r3
 800d4f2:	e000      	b.n	800d4f6 <lv_obj_get_scrollbar_area+0x57e>
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	1ae3      	subs	r3, r4, r3
 800d4f8:	687a      	ldr	r2, [r7, #4]
 800d4fa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800d4fe:	4293      	cmp	r3, r2
 800d500:	da28      	bge.n	800d554 <lv_obj_get_scrollbar_area+0x5dc>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d508:	b29c      	uxth	r4, r3
 800d50a:	2000      	movs	r0, #0
 800d50c:	f014 fcf8 	bl	8021f00 <lv_disp_get_dpi>
 800d510:	4603      	mov	r3, r0
 800d512:	461a      	mov	r2, r3
 800d514:	4613      	mov	r3, r2
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	4413      	add	r3, r2
 800d51a:	005b      	lsls	r3, r3, #1
 800d51c:	2bef      	cmp	r3, #239	; 0xef
 800d51e:	dd13      	ble.n	800d548 <lv_obj_get_scrollbar_area+0x5d0>
 800d520:	2000      	movs	r0, #0
 800d522:	f014 fced 	bl	8021f00 <lv_disp_get_dpi>
 800d526:	4603      	mov	r3, r0
 800d528:	461a      	mov	r2, r3
 800d52a:	4613      	mov	r3, r2
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	4413      	add	r3, r2
 800d530:	005b      	lsls	r3, r3, #1
 800d532:	3350      	adds	r3, #80	; 0x50
 800d534:	4a03      	ldr	r2, [pc, #12]	; (800d544 <lv_obj_get_scrollbar_area+0x5cc>)
 800d536:	fb82 1203 	smull	r1, r2, r2, r3
 800d53a:	1192      	asrs	r2, r2, #6
 800d53c:	17db      	asrs	r3, r3, #31
 800d53e:	1ad3      	subs	r3, r2, r3
 800d540:	b29b      	uxth	r3, r3
 800d542:	e002      	b.n	800d54a <lv_obj_get_scrollbar_area+0x5d2>
 800d544:	66666667 	.word	0x66666667
 800d548:	2301      	movs	r3, #1
 800d54a:	1ae3      	subs	r3, r4, r3
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	b21a      	sxth	r2, r3
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	805a      	strh	r2, [r3, #2]
            }
        }
    }

    /*Draw horizontal scrollbar if the mode is ON or can be scrolled in this direction*/
    lv_coord_t content_w = obj_w + sl + sr;
 800d554:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d556:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d558:	4413      	add	r3, r2
 800d55a:	b29a      	uxth	r2, r3
 800d55c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d55e:	4413      	add	r3, r2
 800d560:	b29b      	uxth	r3, r3
 800d562:	833b      	strh	r3, [r7, #24]
    if(hor_draw && content_w) {
 800d564:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f000 82c4 	beq.w	800daf6 <lv_obj_get_scrollbar_area+0xb7e>
 800d56e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d572:	2b00      	cmp	r3, #0
 800d574:	f000 82bf 	beq.w	800daf6 <lv_obj_get_scrollbar_area+0xb7e>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800d57e:	b29a      	uxth	r2, r3
 800d580:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800d582:	1ad3      	subs	r3, r2, r3
 800d584:	b29b      	uxth	r3, r3
 800d586:	b21a      	sxth	r2, r3
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	80da      	strh	r2, [r3, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d592:	b29a      	uxth	r2, r3
 800d594:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d596:	1ad3      	subs	r3, r2, r3
 800d598:	b29b      	uxth	r3, r3
 800d59a:	3301      	adds	r3, #1
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	b21a      	sxth	r2, r3
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	805a      	strh	r2, [r3, #2]
        hor_area->x1 = obj->coords.x1;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	801a      	strh	r2, [r3, #0]
        hor_area->x2 = obj->coords.x2;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	809a      	strh	r2, [r3, #4]

        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 800d5b8:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800d5bc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800d5c0:	1ad2      	subs	r2, r2, r3
 800d5c2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800d5c6:	1ad2      	subs	r2, r2, r3
 800d5c8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d5cc:	1ad3      	subs	r3, r2, r3
 800d5ce:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800d5d2:	fb03 f202 	mul.w	r2, r3, r2
 800d5d6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d5da:	fb92 f3f3 	sdiv	r3, r2, r3
 800d5de:	82fb      	strh	r3, [r7, #22]
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800d5e0:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 800d5e4:	2000      	movs	r0, #0
 800d5e6:	f014 fc8b 	bl	8021f00 <lv_disp_get_dpi>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	4413      	add	r3, r2
 800d5f4:	005b      	lsls	r3, r3, #1
 800d5f6:	2bef      	cmp	r3, #239	; 0xef
 800d5f8:	dd10      	ble.n	800d61c <lv_obj_get_scrollbar_area+0x6a4>
 800d5fa:	2000      	movs	r0, #0
 800d5fc:	f014 fc80 	bl	8021f00 <lv_disp_get_dpi>
 800d600:	4603      	mov	r3, r0
 800d602:	461a      	mov	r2, r3
 800d604:	4613      	mov	r3, r2
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	4413      	add	r3, r2
 800d60a:	005b      	lsls	r3, r3, #1
 800d60c:	3350      	adds	r3, #80	; 0x50
 800d60e:	4aa7      	ldr	r2, [pc, #668]	; (800d8ac <lv_obj_get_scrollbar_area+0x934>)
 800d610:	fb82 1203 	smull	r1, r2, r2, r3
 800d614:	1192      	asrs	r2, r2, #6
 800d616:	17db      	asrs	r3, r3, #31
 800d618:	1ad3      	subs	r3, r2, r3
 800d61a:	e000      	b.n	800d61e <lv_obj_get_scrollbar_area+0x6a6>
 800d61c:	2301      	movs	r3, #1
 800d61e:	42a3      	cmp	r3, r4
 800d620:	db1e      	blt.n	800d660 <lv_obj_get_scrollbar_area+0x6e8>
 800d622:	2000      	movs	r0, #0
 800d624:	f014 fc6c 	bl	8021f00 <lv_disp_get_dpi>
 800d628:	4603      	mov	r3, r0
 800d62a:	461a      	mov	r2, r3
 800d62c:	4613      	mov	r3, r2
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	4413      	add	r3, r2
 800d632:	005b      	lsls	r3, r3, #1
 800d634:	2bef      	cmp	r3, #239	; 0xef
 800d636:	dd11      	ble.n	800d65c <lv_obj_get_scrollbar_area+0x6e4>
 800d638:	2000      	movs	r0, #0
 800d63a:	f014 fc61 	bl	8021f00 <lv_disp_get_dpi>
 800d63e:	4603      	mov	r3, r0
 800d640:	461a      	mov	r2, r3
 800d642:	4613      	mov	r3, r2
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	4413      	add	r3, r2
 800d648:	005b      	lsls	r3, r3, #1
 800d64a:	3350      	adds	r3, #80	; 0x50
 800d64c:	4a97      	ldr	r2, [pc, #604]	; (800d8ac <lv_obj_get_scrollbar_area+0x934>)
 800d64e:	fb82 1203 	smull	r1, r2, r2, r3
 800d652:	1192      	asrs	r2, r2, #6
 800d654:	17db      	asrs	r3, r3, #31
 800d656:	1ad3      	subs	r3, r2, r3
 800d658:	b21b      	sxth	r3, r3
 800d65a:	e003      	b.n	800d664 <lv_obj_get_scrollbar_area+0x6ec>
 800d65c:	2301      	movs	r3, #1
 800d65e:	e001      	b.n	800d664 <lv_obj_get_scrollbar_area+0x6ec>
 800d660:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d664:	82fb      	strh	r3, [r7, #22]
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 800d666:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d668:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d66a:	1ad3      	subs	r3, r2, r3
 800d66c:	b29a      	uxth	r2, r3
 800d66e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d670:	1ad3      	subs	r3, r2, r3
 800d672:	b29a      	uxth	r2, r3
 800d674:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d676:	1ad3      	subs	r3, r2, r3
 800d678:	b29a      	uxth	r2, r3
 800d67a:	8afb      	ldrh	r3, [r7, #22]
 800d67c:	1ad3      	subs	r3, r2, r3
 800d67e:	b29b      	uxth	r3, r3
 800d680:	83fb      	strh	r3, [r7, #30]
              sb_w;  /*Remaining size from the scrollbar track that is not the scrollbar itself*/
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 800d682:	8b3a      	ldrh	r2, [r7, #24]
 800d684:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d686:	1ad3      	subs	r3, r2, r3
 800d688:	b29b      	uxth	r3, r3
 800d68a:	82bb      	strh	r3, [r7, #20]
        if(scroll_w <= 0) {
 800d68c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d690:	2b00      	cmp	r3, #0
 800d692:	dc37      	bgt.n	800d704 <lv_obj_get_scrollbar_area+0x78c>
            if(rtl) {
 800d694:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d019      	beq.n	800d6d0 <lv_obj_get_scrollbar_area+0x758>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d6a6:	4413      	add	r3, r2
 800d6a8:	b29a      	uxth	r2, r3
 800d6aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6ac:	4413      	add	r3, r2
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	b21a      	sxth	r2, r3
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6c4:	1ad3      	subs	r3, r2, r3
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	b21a      	sxth	r2, r3
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	809a      	strh	r2, [r3, #4]
 800d6ce:	e212      	b.n	800daf6 <lv_obj_get_scrollbar_area+0xb7e>
            }
            else {
                hor_area->x1 = obj->coords.x1 + left_space;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800d6d6:	b29a      	uxth	r2, r3
 800d6d8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d6da:	4413      	add	r3, r2
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	b21a      	sxth	r2, r3
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6ee:	1ad3      	subs	r3, r2, r3
 800d6f0:	b29a      	uxth	r2, r3
 800d6f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6f4:	1ad3      	subs	r3, r2, r3
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	3b01      	subs	r3, #1
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	b21a      	sxth	r2, r3
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	809a      	strh	r2, [r3, #4]
 800d702:	e1f8      	b.n	800daf6 <lv_obj_get_scrollbar_area+0xb7e>
            }
        }
        else {
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 800d704:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d708:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800d70c:	fb03 f202 	mul.w	r2, r3, r2
 800d710:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d714:	fb92 f3f3 	sdiv	r3, r2, r3
 800d718:	827b      	strh	r3, [r7, #18]
            sb_x = rem - sb_x;
 800d71a:	8bfa      	ldrh	r2, [r7, #30]
 800d71c:	8a7b      	ldrh	r3, [r7, #18]
 800d71e:	1ad3      	subs	r3, r2, r3
 800d720:	b29b      	uxth	r3, r3
 800d722:	827b      	strh	r3, [r7, #18]

            if(rtl) {
 800d724:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800d728:	2b00      	cmp	r3, #0
 800d72a:	f000 80f1 	beq.w	800d910 <lv_obj_get_scrollbar_area+0x998>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800d734:	b29a      	uxth	r2, r3
 800d736:	8a7b      	ldrh	r3, [r7, #18]
 800d738:	4413      	add	r3, r2
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d73e:	4413      	add	r3, r2
 800d740:	b29a      	uxth	r2, r3
 800d742:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d744:	4413      	add	r3, r2
 800d746:	b29b      	uxth	r3, r3
 800d748:	b21a      	sxth	r2, r3
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d754:	b29a      	uxth	r2, r3
 800d756:	8afb      	ldrh	r3, [r7, #22]
 800d758:	4413      	add	r3, r2
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	3b01      	subs	r3, #1
 800d75e:	b29b      	uxth	r3, r3
 800d760:	b21a      	sxth	r2, r3
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	809a      	strh	r2, [r3, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d76c:	4619      	mov	r1, r3
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800d774:	461a      	mov	r2, r3
 800d776:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800d77a:	441a      	add	r2, r3
 800d77c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d780:	4413      	add	r3, r2
 800d782:	4299      	cmp	r1, r3
 800d784:	da5a      	bge.n	800d83c <lv_obj_get_scrollbar_area+0x8c4>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800d78c:	b29a      	uxth	r2, r3
 800d78e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d790:	4413      	add	r3, r2
 800d792:	b29a      	uxth	r2, r3
 800d794:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d796:	4413      	add	r3, r2
 800d798:	b29b      	uxth	r3, r3
 800d79a:	b21a      	sxth	r2, r3
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	801a      	strh	r2, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7a6:	461c      	mov	r4, r3
 800d7a8:	2000      	movs	r0, #0
 800d7aa:	f014 fba9 	bl	8021f00 <lv_disp_get_dpi>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	4613      	mov	r3, r2
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	4413      	add	r3, r2
 800d7b8:	005b      	lsls	r3, r3, #1
 800d7ba:	2bef      	cmp	r3, #239	; 0xef
 800d7bc:	dd10      	ble.n	800d7e0 <lv_obj_get_scrollbar_area+0x868>
 800d7be:	2000      	movs	r0, #0
 800d7c0:	f014 fb9e 	bl	8021f00 <lv_disp_get_dpi>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	4613      	mov	r3, r2
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	4413      	add	r3, r2
 800d7ce:	005b      	lsls	r3, r3, #1
 800d7d0:	3350      	adds	r3, #80	; 0x50
 800d7d2:	4a36      	ldr	r2, [pc, #216]	; (800d8ac <lv_obj_get_scrollbar_area+0x934>)
 800d7d4:	fb82 1203 	smull	r1, r2, r2, r3
 800d7d8:	1192      	asrs	r2, r2, #6
 800d7da:	17db      	asrs	r3, r3, #31
 800d7dc:	1ad3      	subs	r3, r2, r3
 800d7de:	e000      	b.n	800d7e2 <lv_obj_get_scrollbar_area+0x86a>
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	4423      	add	r3, r4
 800d7e4:	68ba      	ldr	r2, [r7, #8]
 800d7e6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	dd26      	ble.n	800d83c <lv_obj_get_scrollbar_area+0x8c4>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d7f4:	b29c      	uxth	r4, r3
 800d7f6:	2000      	movs	r0, #0
 800d7f8:	f014 fb82 	bl	8021f00 <lv_disp_get_dpi>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	461a      	mov	r2, r3
 800d800:	4613      	mov	r3, r2
 800d802:	009b      	lsls	r3, r3, #2
 800d804:	4413      	add	r3, r2
 800d806:	005b      	lsls	r3, r3, #1
 800d808:	2bef      	cmp	r3, #239	; 0xef
 800d80a:	dd11      	ble.n	800d830 <lv_obj_get_scrollbar_area+0x8b8>
 800d80c:	2000      	movs	r0, #0
 800d80e:	f014 fb77 	bl	8021f00 <lv_disp_get_dpi>
 800d812:	4603      	mov	r3, r0
 800d814:	461a      	mov	r2, r3
 800d816:	4613      	mov	r3, r2
 800d818:	009b      	lsls	r3, r3, #2
 800d81a:	4413      	add	r3, r2
 800d81c:	005b      	lsls	r3, r3, #1
 800d81e:	3350      	adds	r3, #80	; 0x50
 800d820:	4a22      	ldr	r2, [pc, #136]	; (800d8ac <lv_obj_get_scrollbar_area+0x934>)
 800d822:	fb82 1203 	smull	r1, r2, r2, r3
 800d826:	1192      	asrs	r2, r2, #6
 800d828:	17db      	asrs	r3, r3, #31
 800d82a:	1ad3      	subs	r3, r2, r3
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	e000      	b.n	800d832 <lv_obj_get_scrollbar_area+0x8ba>
 800d830:	2301      	movs	r3, #1
 800d832:	4423      	add	r3, r4
 800d834:	b29b      	uxth	r3, r3
 800d836:	b21a      	sxth	r2, r3
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	809a      	strh	r2, [r3, #4]
                    }
                }
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d842:	461a      	mov	r2, r3
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800d84a:	4619      	mov	r1, r3
 800d84c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800d850:	1acb      	subs	r3, r1, r3
 800d852:	429a      	cmp	r2, r3
 800d854:	f340 814f 	ble.w	800daf6 <lv_obj_get_scrollbar_area+0xb7e>
                    hor_area->x2 = obj->coords.x2 - right_space;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800d85e:	b29a      	uxth	r2, r3
 800d860:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d862:	1ad3      	subs	r3, r2, r3
 800d864:	b29b      	uxth	r3, r3
 800d866:	b21a      	sxth	r2, r3
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	809a      	strh	r2, [r3, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d872:	461c      	mov	r4, r3
 800d874:	2000      	movs	r0, #0
 800d876:	f014 fb43 	bl	8021f00 <lv_disp_get_dpi>
 800d87a:	4603      	mov	r3, r0
 800d87c:	461a      	mov	r2, r3
 800d87e:	4613      	mov	r3, r2
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	4413      	add	r3, r2
 800d884:	005b      	lsls	r3, r3, #1
 800d886:	2bef      	cmp	r3, #239	; 0xef
 800d888:	dd12      	ble.n	800d8b0 <lv_obj_get_scrollbar_area+0x938>
 800d88a:	2000      	movs	r0, #0
 800d88c:	f014 fb38 	bl	8021f00 <lv_disp_get_dpi>
 800d890:	4603      	mov	r3, r0
 800d892:	461a      	mov	r2, r3
 800d894:	4613      	mov	r3, r2
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	4413      	add	r3, r2
 800d89a:	005b      	lsls	r3, r3, #1
 800d89c:	3350      	adds	r3, #80	; 0x50
 800d89e:	4a03      	ldr	r2, [pc, #12]	; (800d8ac <lv_obj_get_scrollbar_area+0x934>)
 800d8a0:	fb82 1203 	smull	r1, r2, r2, r3
 800d8a4:	1192      	asrs	r2, r2, #6
 800d8a6:	17db      	asrs	r3, r3, #31
 800d8a8:	1ad3      	subs	r3, r2, r3
 800d8aa:	e002      	b.n	800d8b2 <lv_obj_get_scrollbar_area+0x93a>
 800d8ac:	66666667 	.word	0x66666667
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	1ae3      	subs	r3, r4, r3
 800d8b4:	68ba      	ldr	r2, [r7, #8]
 800d8b6:	f9b2 2000 	ldrsh.w	r2, [r2]
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	f280 811b 	bge.w	800daf6 <lv_obj_get_scrollbar_area+0xb7e>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d8c6:	b29c      	uxth	r4, r3
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	f014 fb19 	bl	8021f00 <lv_disp_get_dpi>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	4613      	mov	r3, r2
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	4413      	add	r3, r2
 800d8d8:	005b      	lsls	r3, r3, #1
 800d8da:	2bef      	cmp	r3, #239	; 0xef
 800d8dc:	dd11      	ble.n	800d902 <lv_obj_get_scrollbar_area+0x98a>
 800d8de:	2000      	movs	r0, #0
 800d8e0:	f014 fb0e 	bl	8021f00 <lv_disp_get_dpi>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	4613      	mov	r3, r2
 800d8ea:	009b      	lsls	r3, r3, #2
 800d8ec:	4413      	add	r3, r2
 800d8ee:	005b      	lsls	r3, r3, #1
 800d8f0:	3350      	adds	r3, #80	; 0x50
 800d8f2:	4a82      	ldr	r2, [pc, #520]	; (800dafc <lv_obj_get_scrollbar_area+0xb84>)
 800d8f4:	fb82 1203 	smull	r1, r2, r2, r3
 800d8f8:	1192      	asrs	r2, r2, #6
 800d8fa:	17db      	asrs	r3, r3, #31
 800d8fc:	1ad3      	subs	r3, r2, r3
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	e000      	b.n	800d904 <lv_obj_get_scrollbar_area+0x98c>
 800d902:	2301      	movs	r3, #1
 800d904:	1ae3      	subs	r3, r4, r3
 800d906:	b29b      	uxth	r3, r3
 800d908:	b21a      	sxth	r2, r3
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	801a      	strh	r2, [r3, #0]
 800d90e:	e0f2      	b.n	800daf6 <lv_obj_get_scrollbar_area+0xb7e>
                    }
                }
            }
            else {
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800d916:	b29a      	uxth	r2, r3
 800d918:	8a7b      	ldrh	r3, [r7, #18]
 800d91a:	4413      	add	r3, r2
 800d91c:	b29a      	uxth	r2, r3
 800d91e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d920:	4413      	add	r3, r2
 800d922:	b29b      	uxth	r3, r3
 800d924:	b21a      	sxth	r2, r3
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	801a      	strh	r2, [r3, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d930:	b29a      	uxth	r2, r3
 800d932:	8afb      	ldrh	r3, [r7, #22]
 800d934:	4413      	add	r3, r2
 800d936:	b29b      	uxth	r3, r3
 800d938:	3b01      	subs	r3, #1
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	b21a      	sxth	r2, r3
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	809a      	strh	r2, [r3, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d948:	461a      	mov	r2, r3
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800d950:	4619      	mov	r1, r3
 800d952:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800d956:	440b      	add	r3, r1
 800d958:	429a      	cmp	r2, r3
 800d95a:	da57      	bge.n	800da0c <lv_obj_get_scrollbar_area+0xa94>
                    hor_area->x1 = obj->coords.x1 + left_space;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800d962:	b29a      	uxth	r2, r3
 800d964:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d966:	4413      	add	r3, r2
 800d968:	b29b      	uxth	r3, r3
 800d96a:	b21a      	sxth	r2, r3
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	801a      	strh	r2, [r3, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d976:	461c      	mov	r4, r3
 800d978:	2000      	movs	r0, #0
 800d97a:	f014 fac1 	bl	8021f00 <lv_disp_get_dpi>
 800d97e:	4603      	mov	r3, r0
 800d980:	461a      	mov	r2, r3
 800d982:	4613      	mov	r3, r2
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	4413      	add	r3, r2
 800d988:	005b      	lsls	r3, r3, #1
 800d98a:	2bef      	cmp	r3, #239	; 0xef
 800d98c:	dd10      	ble.n	800d9b0 <lv_obj_get_scrollbar_area+0xa38>
 800d98e:	2000      	movs	r0, #0
 800d990:	f014 fab6 	bl	8021f00 <lv_disp_get_dpi>
 800d994:	4603      	mov	r3, r0
 800d996:	461a      	mov	r2, r3
 800d998:	4613      	mov	r3, r2
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	4413      	add	r3, r2
 800d99e:	005b      	lsls	r3, r3, #1
 800d9a0:	3350      	adds	r3, #80	; 0x50
 800d9a2:	4a56      	ldr	r2, [pc, #344]	; (800dafc <lv_obj_get_scrollbar_area+0xb84>)
 800d9a4:	fb82 1203 	smull	r1, r2, r2, r3
 800d9a8:	1192      	asrs	r2, r2, #6
 800d9aa:	17db      	asrs	r3, r3, #31
 800d9ac:	1ad3      	subs	r3, r2, r3
 800d9ae:	e000      	b.n	800d9b2 <lv_obj_get_scrollbar_area+0xa3a>
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	4423      	add	r3, r4
 800d9b4:	68ba      	ldr	r2, [r7, #8]
 800d9b6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	dd26      	ble.n	800da0c <lv_obj_get_scrollbar_area+0xa94>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d9c4:	b29c      	uxth	r4, r3
 800d9c6:	2000      	movs	r0, #0
 800d9c8:	f014 fa9a 	bl	8021f00 <lv_disp_get_dpi>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	4613      	mov	r3, r2
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	4413      	add	r3, r2
 800d9d6:	005b      	lsls	r3, r3, #1
 800d9d8:	2bef      	cmp	r3, #239	; 0xef
 800d9da:	dd11      	ble.n	800da00 <lv_obj_get_scrollbar_area+0xa88>
 800d9dc:	2000      	movs	r0, #0
 800d9de:	f014 fa8f 	bl	8021f00 <lv_disp_get_dpi>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	4613      	mov	r3, r2
 800d9e8:	009b      	lsls	r3, r3, #2
 800d9ea:	4413      	add	r3, r2
 800d9ec:	005b      	lsls	r3, r3, #1
 800d9ee:	3350      	adds	r3, #80	; 0x50
 800d9f0:	4a42      	ldr	r2, [pc, #264]	; (800dafc <lv_obj_get_scrollbar_area+0xb84>)
 800d9f2:	fb82 1203 	smull	r1, r2, r2, r3
 800d9f6:	1192      	asrs	r2, r2, #6
 800d9f8:	17db      	asrs	r3, r3, #31
 800d9fa:	1ad3      	subs	r3, r2, r3
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	e000      	b.n	800da02 <lv_obj_get_scrollbar_area+0xa8a>
 800da00:	2301      	movs	r3, #1
 800da02:	4423      	add	r3, r4
 800da04:	b29b      	uxth	r3, r3
 800da06:	b21a      	sxth	r2, r3
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	809a      	strh	r2, [r3, #4]
                    }
                }
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800da12:	4619      	mov	r1, r3
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800da1a:	461a      	mov	r2, r3
 800da1c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800da20:	1ad2      	subs	r2, r2, r3
 800da22:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800da26:	1ad3      	subs	r3, r2, r3
 800da28:	4299      	cmp	r1, r3
 800da2a:	dd64      	ble.n	800daf6 <lv_obj_get_scrollbar_area+0xb7e>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800da32:	b29a      	uxth	r2, r3
 800da34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	b29a      	uxth	r2, r3
 800da3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da3c:	1ad3      	subs	r3, r2, r3
 800da3e:	b29b      	uxth	r3, r3
 800da40:	b21a      	sxth	r2, r3
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	809a      	strh	r2, [r3, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800da4c:	461c      	mov	r4, r3
 800da4e:	2000      	movs	r0, #0
 800da50:	f014 fa56 	bl	8021f00 <lv_disp_get_dpi>
 800da54:	4603      	mov	r3, r0
 800da56:	461a      	mov	r2, r3
 800da58:	4613      	mov	r3, r2
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	4413      	add	r3, r2
 800da5e:	005b      	lsls	r3, r3, #1
 800da60:	2bef      	cmp	r3, #239	; 0xef
 800da62:	dd10      	ble.n	800da86 <lv_obj_get_scrollbar_area+0xb0e>
 800da64:	2000      	movs	r0, #0
 800da66:	f014 fa4b 	bl	8021f00 <lv_disp_get_dpi>
 800da6a:	4603      	mov	r3, r0
 800da6c:	461a      	mov	r2, r3
 800da6e:	4613      	mov	r3, r2
 800da70:	009b      	lsls	r3, r3, #2
 800da72:	4413      	add	r3, r2
 800da74:	005b      	lsls	r3, r3, #1
 800da76:	3350      	adds	r3, #80	; 0x50
 800da78:	4a20      	ldr	r2, [pc, #128]	; (800dafc <lv_obj_get_scrollbar_area+0xb84>)
 800da7a:	fb82 1203 	smull	r1, r2, r2, r3
 800da7e:	1192      	asrs	r2, r2, #6
 800da80:	17db      	asrs	r3, r3, #31
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	e000      	b.n	800da88 <lv_obj_get_scrollbar_area+0xb10>
 800da86:	2301      	movs	r3, #1
 800da88:	1ae3      	subs	r3, r4, r3
 800da8a:	68ba      	ldr	r2, [r7, #8]
 800da8c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800da90:	4293      	cmp	r3, r2
 800da92:	da30      	bge.n	800daf6 <lv_obj_get_scrollbar_area+0xb7e>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800da9a:	b29c      	uxth	r4, r3
 800da9c:	2000      	movs	r0, #0
 800da9e:	f014 fa2f 	bl	8021f00 <lv_disp_get_dpi>
 800daa2:	4603      	mov	r3, r0
 800daa4:	461a      	mov	r2, r3
 800daa6:	4613      	mov	r3, r2
 800daa8:	009b      	lsls	r3, r3, #2
 800daaa:	4413      	add	r3, r2
 800daac:	005b      	lsls	r3, r3, #1
 800daae:	2bef      	cmp	r3, #239	; 0xef
 800dab0:	dd11      	ble.n	800dad6 <lv_obj_get_scrollbar_area+0xb5e>
 800dab2:	2000      	movs	r0, #0
 800dab4:	f014 fa24 	bl	8021f00 <lv_disp_get_dpi>
 800dab8:	4603      	mov	r3, r0
 800daba:	461a      	mov	r2, r3
 800dabc:	4613      	mov	r3, r2
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	4413      	add	r3, r2
 800dac2:	005b      	lsls	r3, r3, #1
 800dac4:	3350      	adds	r3, #80	; 0x50
 800dac6:	4a0d      	ldr	r2, [pc, #52]	; (800dafc <lv_obj_get_scrollbar_area+0xb84>)
 800dac8:	fb82 1203 	smull	r1, r2, r2, r3
 800dacc:	1192      	asrs	r2, r2, #6
 800dace:	17db      	asrs	r3, r3, #31
 800dad0:	1ad3      	subs	r3, r2, r3
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	e000      	b.n	800dad8 <lv_obj_get_scrollbar_area+0xb60>
 800dad6:	2301      	movs	r3, #1
 800dad8:	1ae3      	subs	r3, r4, r3
 800dada:	b29b      	uxth	r3, r3
 800dadc:	b21a      	sxth	r2, r3
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	801a      	strh	r2, [r3, #0]
 800dae2:	e008      	b.n	800daf6 <lv_obj_get_scrollbar_area+0xb7e>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 800dae4:	bf00      	nop
 800dae6:	e006      	b.n	800daf6 <lv_obj_get_scrollbar_area+0xb7e>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 800dae8:	bf00      	nop
 800daea:	e004      	b.n	800daf6 <lv_obj_get_scrollbar_area+0xb7e>
        if(indev == NULL)  return;
 800daec:	bf00      	nop
 800daee:	e002      	b.n	800daf6 <lv_obj_get_scrollbar_area+0xb7e>
    if(!hor_draw && !ver_draw) return;
 800daf0:	bf00      	nop
 800daf2:	e000      	b.n	800daf6 <lv_obj_get_scrollbar_area+0xb7e>
        return;
 800daf4:	bf00      	nop
                    }
                }
            }
        }
    }
}
 800daf6:	374c      	adds	r7, #76	; 0x4c
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd90      	pop	{r4, r7, pc}
 800dafc:	66666667 	.word	0x66666667

0800db00 <lv_obj_scrollbar_invalidate>:

void lv_obj_scrollbar_invalidate(lv_obj_t * obj)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b086      	sub	sp, #24
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800db08:	f107 0208 	add.w	r2, r7, #8
 800db0c:	f107 0310 	add.w	r3, r7, #16
 800db10:	4619      	mov	r1, r3
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f7ff fa30 	bl	800cf78 <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800db18:	f107 0310 	add.w	r3, r7, #16
 800db1c:	4618      	mov	r0, r3
 800db1e:	f014 fe3c 	bl	802279a <lv_area_get_size>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d107      	bne.n	800db38 <lv_obj_scrollbar_invalidate+0x38>
 800db28:	f107 0308 	add.w	r3, r7, #8
 800db2c:	4618      	mov	r0, r3
 800db2e:	f014 fe34 	bl	802279a <lv_area_get_size>
 800db32:	4603      	mov	r3, r0
 800db34:	2b00      	cmp	r3, #0
 800db36:	d01c      	beq.n	800db72 <lv_obj_scrollbar_invalidate+0x72>

    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 800db38:	f107 0310 	add.w	r3, r7, #16
 800db3c:	4618      	mov	r0, r3
 800db3e:	f014 fe2c 	bl	802279a <lv_area_get_size>
 800db42:	4603      	mov	r3, r0
 800db44:	2b00      	cmp	r3, #0
 800db46:	d005      	beq.n	800db54 <lv_obj_scrollbar_invalidate+0x54>
 800db48:	f107 0310 	add.w	r3, r7, #16
 800db4c:	4619      	mov	r1, r3
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f7fd fe04 	bl	800b75c <lv_obj_invalidate_area>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 800db54:	f107 0308 	add.w	r3, r7, #8
 800db58:	4618      	mov	r0, r3
 800db5a:	f014 fe1e 	bl	802279a <lv_area_get_size>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d007      	beq.n	800db74 <lv_obj_scrollbar_invalidate+0x74>
 800db64:	f107 0308 	add.w	r3, r7, #8
 800db68:	4619      	mov	r1, r3
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f7fd fdf6 	bl	800b75c <lv_obj_invalidate_area>
 800db70:	e000      	b.n	800db74 <lv_obj_scrollbar_invalidate+0x74>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800db72:	bf00      	nop
}
 800db74:	3718      	adds	r7, #24
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}

0800db7a <lv_obj_readjust_scroll>:

void lv_obj_readjust_scroll(lv_obj_t * obj, lv_anim_enable_t anim_en)
{
 800db7a:	b580      	push	{r7, lr}
 800db7c:	b084      	sub	sp, #16
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
 800db82:	460b      	mov	r3, r1
 800db84:	70fb      	strb	r3, [r7, #3]
    /*Be sure the bottom side is not remains scrolled in*/
    /*With snapping the content can't be scrolled in*/
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f7fe fd08 	bl	800c59c <lv_obj_get_scroll_snap_y>
 800db8c:	4603      	mov	r3, r0
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d121      	bne.n	800dbd6 <lv_obj_readjust_scroll+0x5c>
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f7fe fd48 	bl	800c628 <lv_obj_get_scroll_top>
 800db98:	4603      	mov	r3, r0
 800db9a:	81fb      	strh	r3, [r7, #14]
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7fe fd5b 	bl	800c658 <lv_obj_get_scroll_bottom>
 800dba2:	4603      	mov	r3, r0
 800dba4:	81bb      	strh	r3, [r7, #12]
        if(sb < 0 && st > 0) {
 800dba6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	da13      	bge.n	800dbd6 <lv_obj_readjust_scroll+0x5c>
 800dbae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	dd0f      	ble.n	800dbd6 <lv_obj_readjust_scroll+0x5c>
            sb = LV_MIN(st, -sb);
 800dbb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800dbba:	425a      	negs	r2, r3
 800dbbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	bfa8      	it	ge
 800dbc4:	4613      	movge	r3, r2
 800dbc6:	81bb      	strh	r3, [r7, #12]
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 800dbc8:	78fb      	ldrb	r3, [r7, #3]
 800dbca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800dbce:	2100      	movs	r1, #0
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f7fe ffd3 	bl	800cb7c <lv_obj_scroll_by>
        }
    }

    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f7fe fcca 	bl	800c570 <lv_obj_get_scroll_snap_x>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d141      	bne.n	800dc66 <lv_obj_readjust_scroll+0xec>
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f7fe fdbe 	bl	800c764 <lv_obj_get_scroll_left>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	817b      	strh	r3, [r7, #10]
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f7fe fe5d 	bl	800c8ac <lv_obj_get_scroll_right>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	813b      	strh	r3, [r7, #8]
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800dbf6:	2100      	movs	r1, #0
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f7fe fc56 	bl	800c4aa <lv_obj_get_style_base_dir>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d018      	beq.n	800dc36 <lv_obj_readjust_scroll+0xbc>
            /*Be sure the left side is not remains scrolled in*/
            if(sr < 0 && sl > 0) {
 800dc04:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	da2c      	bge.n	800dc66 <lv_obj_readjust_scroll+0xec>
 800dc0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	dd28      	ble.n	800dc66 <lv_obj_readjust_scroll+0xec>
                sr = LV_MIN(sl, -sr);
 800dc14:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800dc18:	425a      	negs	r2, r3
 800dc1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	bfa8      	it	ge
 800dc22:	4613      	movge	r3, r2
 800dc24:	813b      	strh	r3, [r7, #8]
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 800dc26:	78fb      	ldrb	r3, [r7, #3]
 800dc28:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f7fe ffa4 	bl	800cb7c <lv_obj_scroll_by>
                sr = LV_MIN(sr, -sl);
                lv_obj_scroll_by(obj, sl, 0, anim_en);
            }
        }
    }
}
 800dc34:	e017      	b.n	800dc66 <lv_obj_readjust_scroll+0xec>
            if(sl < 0 && sr > 0) {
 800dc36:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	da13      	bge.n	800dc66 <lv_obj_readjust_scroll+0xec>
 800dc3e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	dd0f      	ble.n	800dc66 <lv_obj_readjust_scroll+0xec>
                sr = LV_MIN(sr, -sl);
 800dc46:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dc4a:	425a      	negs	r2, r3
 800dc4c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800dc50:	4293      	cmp	r3, r2
 800dc52:	bfa8      	it	ge
 800dc54:	4613      	movge	r3, r2
 800dc56:	813b      	strh	r3, [r7, #8]
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 800dc58:	78fb      	ldrb	r3, [r7, #3]
 800dc5a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f7fe ff8b 	bl	800cb7c <lv_obj_scroll_by>
}
 800dc66:	bf00      	nop
 800dc68:	3710      	adds	r7, #16
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <scroll_x_anim>:
 *   STATIC FUNCTIONS
 **********************/


static void scroll_x_anim(void * obj, int32_t v)
{
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b082      	sub	sp, #8
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
 800dc76:	6039      	str	r1, [r7, #0]
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f7fe fca5 	bl	800c5c8 <lv_obj_get_scroll_x>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	b29a      	uxth	r2, r3
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	4413      	add	r3, r2
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	b21b      	sxth	r3, r3
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7ff f928 	bl	800cee6 <_lv_obj_scroll_by_raw>
}
 800dc96:	bf00      	nop
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <scroll_y_anim>:

static void scroll_y_anim(void * obj, int32_t v)
{
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b082      	sub	sp, #8
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
 800dca6:	6039      	str	r1, [r7, #0]
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f7fe fca5 	bl	800c5f8 <lv_obj_get_scroll_y>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	4413      	add	r3, r2
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	b21b      	sxth	r3, r3
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f7ff f910 	bl	800cee6 <_lv_obj_scroll_by_raw>
}
 800dcc6:	bf00      	nop
 800dcc8:	3708      	adds	r7, #8
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <scroll_anim_ready_cb>:

static void scroll_anim_ready_cb(lv_anim_t * a)
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b082      	sub	sp, #8
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	210a      	movs	r1, #10
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7f8 ff9c 	bl	8006c1c <lv_event_send>
}
 800dce4:	bf00      	nop
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <scroll_area_into_view>:

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b092      	sub	sp, #72	; 0x48
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
 800dcf8:	70fb      	strb	r3, [r7, #3]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800dcfa:	68b8      	ldr	r0, [r7, #8]
 800dcfc:	f002 f9cc 	bl	8010098 <lv_obj_get_parent>
 800dd00:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 800dd02:	2110      	movs	r1, #16
 800dd04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dd06:	f7fa f962 	bl	8007fce <lv_obj_has_flag>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	f083 0301 	eor.w	r3, r3, #1
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	f040 829f 	bne.w	800e256 <scroll_area_into_view+0x56a>

    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 800dd18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dd1a:	f7fe fc13 	bl	800c544 <lv_obj_get_scroll_dir>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    lv_coord_t snap_goal = 0;
 800dd24:	2300      	movs	r3, #0
 800dd26:	873b      	strh	r3, [r7, #56]	; 0x38
    lv_coord_t act = 0;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	86fb      	strh	r3, [r7, #54]	; 0x36
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 800dd32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dd34:	f7fe fc32 	bl	800c59c <lv_obj_get_scroll_snap_y>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800dd3e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d003      	beq.n	800dd4e <scroll_area_into_view+0x62>
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	3314      	adds	r3, #20
 800dd4a:	647b      	str	r3, [r7, #68]	; 0x44
 800dd4c:	e001      	b.n	800dd52 <scroll_area_into_view+0x66>
    else area_tmp = area;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 800dd52:	2100      	movs	r1, #0
 800dd54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dd56:	f7fe fb96 	bl	800c486 <lv_obj_get_style_border_width>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 800dd5e:	2100      	movs	r1, #0
 800dd60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dd62:	f7fe fb24 	bl	800c3ae <lv_obj_get_style_pad_top>
 800dd66:	4603      	mov	r3, r0
 800dd68:	b29a      	uxth	r2, r3
 800dd6a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800dd6c:	4413      	add	r3, r2
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 800dd72:	2100      	movs	r1, #0
 800dd74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dd76:	f7fe fb2c 	bl	800c3d2 <lv_obj_get_style_pad_bottom>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800dd80:	4413      	add	r3, r2
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	85fb      	strh	r3, [r7, #46]	; 0x2e
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800dd86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd88:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800dd8c:	b29a      	uxth	r2, r3
 800dd8e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dd90:	4413      	add	r3, r2
 800dd92:	b29a      	uxth	r2, r3
 800dd94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	1ad3      	subs	r3, r2, r3
 800dd9e:	b29a      	uxth	r2, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	1ad3      	subs	r3, r2, r3
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ddb4:	b29a      	uxth	r2, r3
 800ddb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddb8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ddbc:	b299      	uxth	r1, r3
 800ddbe:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800ddc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddc2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	1ac3      	subs	r3, r0, r3
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	440b      	add	r3, r1
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	4413      	add	r3, r2
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 800ddd6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ddd8:	f7fc ff38 	bl	800ac4c <lv_obj_get_height>
 800dddc:	4603      	mov	r3, r0
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dde2:	1ad3      	subs	r3, r2, r3
 800dde4:	b29a      	uxth	r2, r3
 800dde6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dde8:	1ad3      	subs	r3, r2, r3
 800ddea:	b29b      	uxth	r3, r3
 800ddec:	853b      	strh	r3, [r7, #40]	; 0x28
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 800ddee:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	db07      	blt.n	800de06 <scroll_area_into_view+0x11a>
 800ddf6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	db03      	blt.n	800de06 <scroll_area_into_view+0x11a>
 800ddfe:	2300      	movs	r3, #0
 800de00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800de04:	e02e      	b.n	800de64 <scroll_area_into_view+0x178>
    else if(top_diff > 0) {
 800de06:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	dd12      	ble.n	800de34 <scroll_area_into_view+0x148>
        y_scroll = top_diff;
 800de0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800de10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /*Do not let scrolling in*/
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 800de14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800de16:	f7fe fc07 	bl	800c628 <lv_obj_get_scroll_top>
 800de1a:	4603      	mov	r3, r0
 800de1c:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(st - y_scroll < 0) y_scroll = 0;
 800de1e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800de22:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	2b00      	cmp	r3, #0
 800de2a:	da1b      	bge.n	800de64 <scroll_area_into_view+0x178>
 800de2c:	2300      	movs	r3, #0
 800de2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800de32:	e017      	b.n	800de64 <scroll_area_into_view+0x178>
    }
    else if(bottom_diff > 0) {
 800de34:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800de38:	2b00      	cmp	r3, #0
 800de3a:	dd13      	ble.n	800de64 <scroll_area_into_view+0x178>
        y_scroll = -bottom_diff;
 800de3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800de3e:	425b      	negs	r3, r3
 800de40:	b29b      	uxth	r3, r3
 800de42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 800de46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800de48:	f7fe fc06 	bl	800c658 <lv_obj_get_scroll_bottom>
 800de4c:	4603      	mov	r3, r0
 800de4e:	84fb      	strh	r3, [r7, #38]	; 0x26
        if(sb + y_scroll < 0) y_scroll = 0;
 800de50:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800de54:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800de58:	4413      	add	r3, r2
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	da02      	bge.n	800de64 <scroll_area_into_view+0x178>
 800de5e:	2300      	movs	r3, #0
 800de60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    switch(snap_y) {
 800de64:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800de68:	2b03      	cmp	r3, #3
 800de6a:	d03e      	beq.n	800deea <scroll_area_into_view+0x1fe>
 800de6c:	2b03      	cmp	r3, #3
 800de6e:	dc6e      	bgt.n	800df4e <scroll_area_into_view+0x262>
 800de70:	2b01      	cmp	r3, #1
 800de72:	d002      	beq.n	800de7a <scroll_area_into_view+0x18e>
 800de74:	2b02      	cmp	r3, #2
 800de76:	d01c      	beq.n	800deb2 <scroll_area_into_view+0x1c6>
 800de78:	e069      	b.n	800df4e <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.y1 + ptop;
 800de7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de7c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800de80:	b29a      	uxth	r2, r3
 800de82:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800de84:	4413      	add	r3, r2
 800de86:	b29b      	uxth	r3, r3
 800de88:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->y1 + y_scroll;
 800de8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800de90:	b29a      	uxth	r2, r3
 800de92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de96:	4413      	add	r3, r2
 800de98:	b29b      	uxth	r3, r3
 800de9a:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800de9c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800de9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dea0:	1ad3      	subs	r3, r2, r3
 800dea2:	b29a      	uxth	r2, r3
 800dea4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dea8:	4413      	add	r3, r2
 800deaa:	b29b      	uxth	r3, r3
 800deac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800deb0:	e04d      	b.n	800df4e <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.y2 - pbottom;
 800deb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deb4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800deb8:	b29a      	uxth	r2, r3
 800deba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800debc:	1ad3      	subs	r3, r2, r3
 800debe:	b29b      	uxth	r3, r3
 800dec0:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->y2 + y_scroll;
 800dec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dec4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dec8:	b29a      	uxth	r2, r3
 800deca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dece:	4413      	add	r3, r2
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800ded4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ded6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ded8:	1ad3      	subs	r3, r2, r3
 800deda:	b29a      	uxth	r2, r3
 800dedc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dee0:	4413      	add	r3, r2
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800dee8:	e031      	b.n	800df4e <scroll_area_into_view+0x262>
        case LV_SCROLL_SNAP_CENTER:
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 800deea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deec:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800def0:	b29a      	uxth	r2, r3
 800def2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800def4:	4413      	add	r3, r2
 800def6:	b29a      	uxth	r2, r3
 800def8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800defc:	2b00      	cmp	r3, #0
 800defe:	da00      	bge.n	800df02 <scroll_area_into_view+0x216>
 800df00:	3301      	adds	r3, #1
 800df02:	105b      	asrs	r3, r3, #1
 800df04:	b21b      	sxth	r3, r3
 800df06:	b29b      	uxth	r3, r3
 800df08:	4413      	add	r3, r2
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	873b      	strh	r3, [r7, #56]	; 0x38
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 800df0e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800df10:	f7fe f9c9 	bl	800c2a6 <lv_area_get_height>
 800df14:	4603      	mov	r3, r0
 800df16:	2b00      	cmp	r3, #0
 800df18:	da00      	bge.n	800df1c <scroll_area_into_view+0x230>
 800df1a:	3301      	adds	r3, #1
 800df1c:	105b      	asrs	r3, r3, #1
 800df1e:	b21b      	sxth	r3, r3
 800df20:	b29a      	uxth	r2, r3
 800df22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800df28:	b29b      	uxth	r3, r3
 800df2a:	4413      	add	r3, r2
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df32:	4413      	add	r3, r2
 800df34:	b29b      	uxth	r3, r3
 800df36:	86fb      	strh	r3, [r7, #54]	; 0x36
            y_scroll += snap_goal - act;
 800df38:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800df3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	b29a      	uxth	r2, r3
 800df40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df44:	4413      	add	r3, r2
 800df46:	b29b      	uxth	r3, r3
 800df48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            break;
 800df4c:	bf00      	nop
    }

    lv_coord_t x_scroll = 0;
 800df4e:	2300      	movs	r3, #0
 800df50:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 800df54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800df56:	f7fe fb0b 	bl	800c570 <lv_obj_get_scroll_snap_x>
 800df5a:	4603      	mov	r3, r0
 800df5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800df60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df64:	2b00      	cmp	r3, #0
 800df66:	d003      	beq.n	800df70 <scroll_area_into_view+0x284>
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	3314      	adds	r3, #20
 800df6c:	647b      	str	r3, [r7, #68]	; 0x44
 800df6e:	e001      	b.n	800df74 <scroll_area_into_view+0x288>
    else area_tmp = area;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 800df74:	2100      	movs	r1, #0
 800df76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800df78:	f7fe fa3d 	bl	800c3f6 <lv_obj_get_style_pad_left>
 800df7c:	4603      	mov	r3, r0
 800df7e:	b29a      	uxth	r2, r3
 800df80:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800df82:	4413      	add	r3, r2
 800df84:	b29b      	uxth	r3, r3
 800df86:	843b      	strh	r3, [r7, #32]
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 800df88:	2100      	movs	r1, #0
 800df8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800df8c:	f7fe fa45 	bl	800c41a <lv_obj_get_style_pad_right>
 800df90:	4603      	mov	r3, r0
 800df92:	b29a      	uxth	r2, r3
 800df94:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800df96:	4413      	add	r3, r2
 800df98:	b29b      	uxth	r3, r3
 800df9a:	83fb      	strh	r3, [r7, #30]
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 800df9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df9e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	8c3b      	ldrh	r3, [r7, #32]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	b29a      	uxth	r2, r3
 800dfaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	1ad3      	subs	r3, r2, r3
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	1ad3      	subs	r3, r2, r3
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	83bb      	strh	r3, [r7, #28]
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfca:	b29a      	uxth	r2, r3
 800dfcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dfd2:	b299      	uxth	r1, r3
 800dfd4:	8bf8      	ldrh	r0, [r7, #30]
 800dfd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfd8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	1ac3      	subs	r3, r0, r3
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	440b      	add	r3, r1
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	4413      	add	r3, r2
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	837b      	strh	r3, [r7, #26]
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 800dfec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	db07      	blt.n	800e004 <scroll_area_into_view+0x318>
 800dff4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	db03      	blt.n	800e004 <scroll_area_into_view+0x318>
 800dffc:	2300      	movs	r3, #0
 800dffe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e002:	e02e      	b.n	800e062 <scroll_area_into_view+0x376>
    else if(left_diff > 0) {
 800e004:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	dd12      	ble.n	800e032 <scroll_area_into_view+0x346>
        x_scroll = left_diff;
 800e00c:	8bbb      	ldrh	r3, [r7, #28]
 800e00e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        /*Do not let scrolling in*/
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 800e012:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e014:	f7fe fba6 	bl	800c764 <lv_obj_get_scroll_left>
 800e018:	4603      	mov	r3, r0
 800e01a:	82fb      	strh	r3, [r7, #22]
        if(sl - x_scroll < 0) x_scroll = 0;
 800e01c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e020:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800e024:	1ad3      	subs	r3, r2, r3
 800e026:	2b00      	cmp	r3, #0
 800e028:	da1b      	bge.n	800e062 <scroll_area_into_view+0x376>
 800e02a:	2300      	movs	r3, #0
 800e02c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e030:	e017      	b.n	800e062 <scroll_area_into_view+0x376>
    }
    else if(right_diff > 0) {
 800e032:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e036:	2b00      	cmp	r3, #0
 800e038:	dd13      	ble.n	800e062 <scroll_area_into_view+0x376>
        x_scroll = -right_diff;
 800e03a:	8b7b      	ldrh	r3, [r7, #26]
 800e03c:	425b      	negs	r3, r3
 800e03e:	b29b      	uxth	r3, r3
 800e040:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 800e044:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e046:	f7fe fc31 	bl	800c8ac <lv_obj_get_scroll_right>
 800e04a:	4603      	mov	r3, r0
 800e04c:	833b      	strh	r3, [r7, #24]
        if(sr + x_scroll < 0) x_scroll = 0;
 800e04e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e052:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800e056:	4413      	add	r3, r2
 800e058:	2b00      	cmp	r3, #0
 800e05a:	da02      	bge.n	800e062 <scroll_area_into_view+0x376>
 800e05c:	2300      	movs	r3, #0
 800e05e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 800e062:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e064:	f7fc fde4 	bl	800ac30 <lv_obj_get_width>
 800e068:	4603      	mov	r3, r0
 800e06a:	b29a      	uxth	r2, r3
 800e06c:	8c3b      	ldrh	r3, [r7, #32]
 800e06e:	1ad3      	subs	r3, r2, r3
 800e070:	b29a      	uxth	r2, r3
 800e072:	8bfb      	ldrh	r3, [r7, #30]
 800e074:	1ad3      	subs	r3, r2, r3
 800e076:	b29b      	uxth	r3, r3
 800e078:	82bb      	strh	r3, [r7, #20]
    switch(snap_x) {
 800e07a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e07e:	2b03      	cmp	r3, #3
 800e080:	d03e      	beq.n	800e100 <scroll_area_into_view+0x414>
 800e082:	2b03      	cmp	r3, #3
 800e084:	dc6e      	bgt.n	800e164 <scroll_area_into_view+0x478>
 800e086:	2b01      	cmp	r3, #1
 800e088:	d002      	beq.n	800e090 <scroll_area_into_view+0x3a4>
 800e08a:	2b02      	cmp	r3, #2
 800e08c:	d01c      	beq.n	800e0c8 <scroll_area_into_view+0x3dc>
 800e08e:	e069      	b.n	800e164 <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.x1 + pleft;
 800e090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e092:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800e096:	b29a      	uxth	r2, r3
 800e098:	8c3b      	ldrh	r3, [r7, #32]
 800e09a:	4413      	add	r3, r2
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->x1 + x_scroll;
 800e0a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0a6:	b29a      	uxth	r2, r3
 800e0a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e0ac:	4413      	add	r3, r2
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800e0b2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800e0b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e0b6:	1ad3      	subs	r3, r2, r3
 800e0b8:	b29a      	uxth	r2, r3
 800e0ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e0be:	4413      	add	r3, r2
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800e0c6:	e04d      	b.n	800e164 <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_END:
            snap_goal = parent->coords.x2 - pright;
 800e0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ca:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800e0ce:	b29a      	uxth	r2, r3
 800e0d0:	8bfb      	ldrh	r3, [r7, #30]
 800e0d2:	1ad3      	subs	r3, r2, r3
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	873b      	strh	r3, [r7, #56]	; 0x38
            act = area_tmp->x2 + x_scroll;
 800e0d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e0de:	b29a      	uxth	r2, r3
 800e0e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e0e4:	4413      	add	r3, r2
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800e0ea:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800e0ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e0ee:	1ad3      	subs	r3, r2, r3
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e0f6:	4413      	add	r3, r2
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800e0fe:	e031      	b.n	800e164 <scroll_area_into_view+0x478>
        case LV_SCROLL_SNAP_CENTER:
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 800e100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e102:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800e106:	b29a      	uxth	r2, r3
 800e108:	8c3b      	ldrh	r3, [r7, #32]
 800e10a:	4413      	add	r3, r2
 800e10c:	b29a      	uxth	r2, r3
 800e10e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e112:	2b00      	cmp	r3, #0
 800e114:	da00      	bge.n	800e118 <scroll_area_into_view+0x42c>
 800e116:	3301      	adds	r3, #1
 800e118:	105b      	asrs	r3, r3, #1
 800e11a:	b21b      	sxth	r3, r3
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	4413      	add	r3, r2
 800e120:	b29b      	uxth	r3, r3
 800e122:	873b      	strh	r3, [r7, #56]	; 0x38
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 800e124:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e126:	f7fe f8a7 	bl	800c278 <lv_area_get_width>
 800e12a:	4603      	mov	r3, r0
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	da00      	bge.n	800e132 <scroll_area_into_view+0x446>
 800e130:	3301      	adds	r3, #1
 800e132:	105b      	asrs	r3, r3, #1
 800e134:	b21b      	sxth	r3, r3
 800e136:	b29a      	uxth	r2, r3
 800e138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e13a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e13e:	b29b      	uxth	r3, r3
 800e140:	4413      	add	r3, r2
 800e142:	b29a      	uxth	r2, r3
 800e144:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e148:	4413      	add	r3, r2
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	86fb      	strh	r3, [r7, #54]	; 0x36
            x_scroll += snap_goal - act;
 800e14e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800e150:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e152:	1ad3      	subs	r3, r2, r3
 800e154:	b29a      	uxth	r2, r3
 800e156:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e15a:	4413      	add	r3, r2
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            break;
 800e162:	bf00      	nop
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 800e164:	493f      	ldr	r1, [pc, #252]	; (800e264 <scroll_area_into_view+0x578>)
 800e166:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e168:	f014 f826 	bl	80221b8 <lv_anim_del>
 800e16c:	4603      	mov	r3, r0
 800e16e:	74fb      	strb	r3, [r7, #19]
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 800e170:	493d      	ldr	r1, [pc, #244]	; (800e268 <scroll_area_into_view+0x57c>)
 800e172:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e174:	f014 f820 	bl	80221b8 <lv_anim_del>
 800e178:	4603      	mov	r3, r0
 800e17a:	74bb      	strb	r3, [r7, #18]
    if(y_del || x_del) {
 800e17c:	7cfb      	ldrb	r3, [r7, #19]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d102      	bne.n	800e188 <scroll_area_into_view+0x49c>
 800e182:	7cbb      	ldrb	r3, [r7, #18]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d009      	beq.n	800e19c <scroll_area_into_view+0x4b0>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
 800e188:	2200      	movs	r2, #0
 800e18a:	210a      	movs	r1, #10
 800e18c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e18e:	f7f8 fd45 	bl	8006c1c <lv_event_send>
 800e192:	4603      	mov	r3, r0
 800e194:	747b      	strb	r3, [r7, #17]
        if(res != LV_RES_OK) return;
 800e196:	7c7b      	ldrb	r3, [r7, #17]
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d15e      	bne.n	800e25a <scroll_area_into_view+0x56e>
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 800e19c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e1a0:	f003 0301 	and.w	r3, r3, #1
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d106      	bne.n	800e1b6 <scroll_area_into_view+0x4ca>
 800e1a8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	da02      	bge.n	800e1b6 <scroll_area_into_view+0x4ca>
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 800e1b6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e1ba:	f003 0302 	and.w	r3, r3, #2
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d106      	bne.n	800e1d0 <scroll_area_into_view+0x4e4>
 800e1c2:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	dd02      	ble.n	800e1d0 <scroll_area_into_view+0x4e4>
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 800e1d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e1d4:	f003 0304 	and.w	r3, r3, #4
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d106      	bne.n	800e1ea <scroll_area_into_view+0x4fe>
 800e1dc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	da02      	bge.n	800e1ea <scroll_area_into_view+0x4fe>
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 800e1ea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e1ee:	f003 0308 	and.w	r3, r3, #8
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d106      	bne.n	800e204 <scroll_area_into_view+0x518>
 800e1f6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	dd02      	ble.n	800e204 <scroll_area_into_view+0x518>
 800e1fe:	2300      	movs	r3, #0
 800e200:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	78fb      	ldrb	r3, [r7, #3]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d002      	beq.n	800e218 <scroll_area_into_view+0x52c>
 800e212:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e216:	e000      	b.n	800e21a <scroll_area_into_view+0x52e>
 800e218:	2300      	movs	r3, #0
 800e21a:	4413      	add	r3, r2
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	b21a      	sxth	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	801a      	strh	r2, [r3, #0]
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e22a:	b29a      	uxth	r2, r3
 800e22c:	78fb      	ldrb	r3, [r7, #3]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d002      	beq.n	800e238 <scroll_area_into_view+0x54c>
 800e232:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e236:	e000      	b.n	800e23a <scroll_area_into_view+0x54e>
 800e238:	2300      	movs	r3, #0
 800e23a:	4413      	add	r3, r2
 800e23c:	b29b      	uxth	r3, r3
 800e23e:	b21a      	sxth	r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	805a      	strh	r2, [r3, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 800e244:	78fb      	ldrb	r3, [r7, #3]
 800e246:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 800e24a:	f9b7 1040 	ldrsh.w	r1, [r7, #64]	; 0x40
 800e24e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e250:	f7fe fc94 	bl	800cb7c <lv_obj_scroll_by>
 800e254:	e002      	b.n	800e25c <scroll_area_into_view+0x570>
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 800e256:	bf00      	nop
 800e258:	e000      	b.n	800e25c <scroll_area_into_view+0x570>
        if(res != LV_RES_OK) return;
 800e25a:	bf00      	nop
}
 800e25c:	3748      	adds	r7, #72	; 0x48
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	0800dc9f 	.word	0x0800dc9f
 800e268:	0800dc6f 	.word	0x0800dc6f

0800e26c <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b085      	sub	sp, #20
 800e270:	af00      	add	r7, sp, #0
 800e272:	7138      	strb	r0, [r7, #4]
 800e274:	7039      	strb	r1, [r7, #0]
 800e276:	4613      	mov	r3, r2
 800e278:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 800e27a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	da01      	bge.n	800e286 <lv_color_mix+0x1a>
 800e282:	793b      	ldrb	r3, [r7, #4]
 800e284:	e000      	b.n	800e288 <lv_color_mix+0x1c>
 800e286:	783b      	ldrb	r3, [r7, #0]
 800e288:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 800e28a:	7b3b      	ldrb	r3, [r7, #12]
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3714      	adds	r7, #20
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr

0800e298 <lv_anim_set_var>:
{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
    a->var = var;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	683a      	ldr	r2, [r7, #0]
 800e2a6:	601a      	str	r2, [r3, #0]
}
 800e2a8:	bf00      	nop
 800e2aa:	370c      	adds	r7, #12
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr

0800e2b4 <lv_anim_set_exec_cb>:
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	683a      	ldr	r2, [r7, #0]
 800e2c2:	605a      	str	r2, [r3, #4]
}
 800e2c4:	bf00      	nop
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr

0800e2d0 <lv_anim_set_time>:
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	6039      	str	r1, [r7, #0]
    a->time = duration;
 800e2da:	683a      	ldr	r2, [r7, #0]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e2e0:	bf00      	nop
 800e2e2:	370c      	adds	r7, #12
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr

0800e2ec <lv_anim_set_delay>:
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b083      	sub	sp, #12
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	6039      	str	r1, [r7, #0]
    a->act_time = -(int32_t)(delay);
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	425a      	negs	r2, r3
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800e2fe:	bf00      	nop
 800e300:	370c      	adds	r7, #12
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr

0800e30a <lv_anim_set_values>:
{
 800e30a:	b480      	push	{r7}
 800e30c:	b085      	sub	sp, #20
 800e30e:	af00      	add	r7, sp, #0
 800e310:	60f8      	str	r0, [r7, #12]
 800e312:	60b9      	str	r1, [r7, #8]
 800e314:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	68ba      	ldr	r2, [r7, #8]
 800e31a:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	68ba      	ldr	r2, [r7, #8]
 800e320:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	629a      	str	r2, [r3, #40]	; 0x28
}
 800e328:	bf00      	nop
 800e32a:	3714      	adds	r7, #20
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr

0800e334 <lv_anim_set_path_cb>:
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
    a->path_cb = path_cb;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	683a      	ldr	r2, [r7, #0]
 800e342:	61da      	str	r2, [r3, #28]
}
 800e344:	bf00      	nop
 800e346:	370c      	adds	r7, #12
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr

0800e350 <lv_anim_set_start_cb>:
{
 800e350:	b480      	push	{r7}
 800e352:	b083      	sub	sp, #12
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
    a->start_cb = start_cb;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	683a      	ldr	r2, [r7, #0]
 800e35e:	609a      	str	r2, [r3, #8]
}
 800e360:	bf00      	nop
 800e362:	370c      	adds	r7, #12
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr

0800e36c <lv_anim_set_ready_cb>:
{
 800e36c:	b480      	push	{r7}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
    a->ready_cb = ready_cb;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	683a      	ldr	r2, [r7, #0]
 800e37a:	60da      	str	r2, [r3, #12]
}
 800e37c:	bf00      	nop
 800e37e:	370c      	adds	r7, #12
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr

0800e388 <lv_anim_set_early_apply>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
 800e388:	b480      	push	{r7}
 800e38a:	b083      	sub	sp, #12
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	460b      	mov	r3, r1
 800e392:	70fb      	strb	r3, [r7, #3]
    a->early_apply = en;
 800e394:	687a      	ldr	r2, [r7, #4]
 800e396:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 800e39a:	78f9      	ldrb	r1, [r7, #3]
 800e39c:	f361 0300 	bfi	r3, r1, #0, #1
 800e3a0:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
}
 800e3a4:	bf00      	nop
 800e3a6:	370c      	adds	r7, #12
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr

0800e3b0 <lv_bidi_calculate_align>:
 * @param align     For LV_TEXT_ALIGN_AUTO give LV_TEXT_ALIGN_LEFT else leave unchanged, write back the calculated align here
 * @param base_dir  Unused
 * @param txt       Unused
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b085      	sub	sp, #20
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d102      	bne.n	800e3ca <lv_bidi_calculate_align+0x1a>
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	701a      	strb	r2, [r3, #0]
}
 800e3ca:	bf00      	nop
 800e3cc:	3714      	adds	r7, #20
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr

0800e3d6 <lv_style_prop_has_flag>:
 * @param prop Property ID
 * @param flag Flag
 * @return true if the flag is set for this property
 */
static inline bool lv_style_prop_has_flag(lv_style_prop_t prop, uint8_t flag)
{
 800e3d6:	b580      	push	{r7, lr}
 800e3d8:	b082      	sub	sp, #8
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	4603      	mov	r3, r0
 800e3de:	460a      	mov	r2, r1
 800e3e0:	80fb      	strh	r3, [r7, #6]
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	717b      	strb	r3, [r7, #5]
    return _lv_style_prop_lookup_flags(prop) & flag;
 800e3e6:	88fb      	ldrh	r3, [r7, #6]
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f016 fe2f 	bl	802504c <_lv_style_prop_lookup_flags>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	461a      	mov	r2, r3
 800e3f2:	797b      	ldrb	r3, [r7, #5]
 800e3f4:	4013      	ands	r3, r2
 800e3f6:	b2db      	uxtb	r3, r3
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	bf14      	ite	ne
 800e3fc:	2301      	movne	r3, #1
 800e3fe:	2300      	moveq	r3, #0
 800e400:	b2db      	uxtb	r3, r3
}
 800e402:	4618      	mov	r0, r3
 800e404:	3708      	adds	r7, #8
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <lv_obj_get_style_width>:
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b084      	sub	sp, #16
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
 800e412:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800e414:	2201      	movs	r2, #1
 800e416:	6839      	ldr	r1, [r7, #0]
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f000 fb1d 	bl	800ea58 <lv_obj_get_style_prop>
 800e41e:	4603      	mov	r3, r0
 800e420:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	b21b      	sxth	r3, r3
}
 800e426:	4618      	mov	r0, r3
 800e428:	3710      	adds	r7, #16
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <lv_obj_get_style_height>:
{
 800e42e:	b580      	push	{r7, lr}
 800e430:	b084      	sub	sp, #16
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
 800e436:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800e438:	2204      	movs	r2, #4
 800e43a:	6839      	ldr	r1, [r7, #0]
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 fb0b 	bl	800ea58 <lv_obj_get_style_prop>
 800e442:	4603      	mov	r3, r0
 800e444:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	b21b      	sxth	r3, r3
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}

0800e452 <lv_obj_get_style_transform_zoom>:
{
 800e452:	b580      	push	{r7, lr}
 800e454:	b084      	sub	sp, #16
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
 800e45a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800e45c:	226c      	movs	r2, #108	; 0x6c
 800e45e:	6839      	ldr	r1, [r7, #0]
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 faf9 	bl	800ea58 <lv_obj_get_style_prop>
 800e466:	4603      	mov	r3, r0
 800e468:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	b21b      	sxth	r3, r3
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3710      	adds	r7, #16
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}

0800e476 <lv_obj_get_style_transform_angle>:
{
 800e476:	b580      	push	{r7, lr}
 800e478:	b084      	sub	sp, #16
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	6078      	str	r0, [r7, #4]
 800e47e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800e480:	226d      	movs	r2, #109	; 0x6d
 800e482:	6839      	ldr	r1, [r7, #0]
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f000 fae7 	bl	800ea58 <lv_obj_get_style_prop>
 800e48a:	4603      	mov	r3, r0
 800e48c:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	b21b      	sxth	r3, r3
}
 800e492:	4618      	mov	r0, r3
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <lv_obj_get_style_text_align>:
{
 800e49a:	b580      	push	{r7, lr}
 800e49c:	b084      	sub	sp, #16
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
 800e4a2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 800e4a4:	225b      	movs	r2, #91	; 0x5b
 800e4a6:	6839      	ldr	r1, [r7, #0]
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f000 fad5 	bl	800ea58 <lv_obj_get_style_prop>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	60fb      	str	r3, [r7, #12]
    return (lv_text_align_t)v.num;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	b2db      	uxtb	r3, r3
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3710      	adds	r7, #16
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}

0800e4be <lv_obj_get_style_opa>:
{
 800e4be:	b580      	push	{r7, lr}
 800e4c0:	b084      	sub	sp, #16
 800e4c2:	af00      	add	r7, sp, #0
 800e4c4:	6078      	str	r0, [r7, #4]
 800e4c6:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800e4c8:	2260      	movs	r2, #96	; 0x60
 800e4ca:	6839      	ldr	r1, [r7, #0]
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 fac3 	bl	800ea58 <lv_obj_get_style_prop>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	b2db      	uxtb	r3, r3
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3710      	adds	r7, #16
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}

0800e4e2 <lv_obj_get_style_color_filter_dsc>:
{
 800e4e2:	b580      	push	{r7, lr}
 800e4e4:	b084      	sub	sp, #16
 800e4e6:	af00      	add	r7, sp, #0
 800e4e8:	6078      	str	r0, [r7, #4]
 800e4ea:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 800e4ec:	2261      	movs	r2, #97	; 0x61
 800e4ee:	6839      	ldr	r1, [r7, #0]
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 fab1 	bl	800ea58 <lv_obj_get_style_prop>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	60fb      	str	r3, [r7, #12]
    return (const lv_color_filter_dsc_t *)v.ptr;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3710      	adds	r7, #16
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <lv_obj_get_style_color_filter_opa>:
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 800e50e:	2262      	movs	r2, #98	; 0x62
 800e510:	6839      	ldr	r1, [r7, #0]
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f000 faa0 	bl	800ea58 <lv_obj_get_style_prop>
 800e518:	4603      	mov	r3, r0
 800e51a:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	b2db      	uxtb	r3, r3
}
 800e520:	4618      	mov	r0, r3
 800e522:	3710      	adds	r7, #16
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <lv_obj_get_style_blend_mode>:
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800e532:	2267      	movs	r2, #103	; 0x67
 800e534:	6839      	ldr	r1, [r7, #0]
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f000 fa8e 	bl	800ea58 <lv_obj_get_style_prop>
 800e53c:	4603      	mov	r3, r0
 800e53e:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	b2db      	uxtb	r3, r3
}
 800e544:	4618      	mov	r0, r3
 800e546:	3710      	adds	r7, #16
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <lv_obj_get_style_base_dir>:
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b084      	sub	sp, #16
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800e556:	2216      	movs	r2, #22
 800e558:	6839      	ldr	r1, [r7, #0]
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f000 fa7c 	bl	800ea58 <lv_obj_get_style_prop>
 800e560:	4603      	mov	r3, r0
 800e562:	60fb      	str	r3, [r7, #12]
    return (lv_base_dir_t)v.num;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	b2db      	uxtb	r3, r3
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3710      	adds	r7, #16
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <_lv_obj_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_obj_style_init(void)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 800e574:	2114      	movs	r1, #20
 800e576:	4802      	ldr	r0, [pc, #8]	; (800e580 <_lv_obj_style_init+0x10>)
 800e578:	f015 fa1f 	bl	80239ba <_lv_ll_init>
}
 800e57c:	bf00      	nop
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	20000910 	.word	0x20000910

0800e584 <lv_obj_add_style>:

void lv_obj_add_style(lv_obj_t * obj, lv_style_t * style, lv_style_selector_t selector)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b086      	sub	sp, #24
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	607a      	str	r2, [r7, #4]
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 800e590:	2300      	movs	r3, #0
 800e592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e596:	6879      	ldr	r1, [r7, #4]
 800e598:	68f8      	ldr	r0, [r7, #12]
 800e59a:	f001 f9a1 	bl	800f8e0 <trans_del>

    uint32_t i;
    /*Go after the transition and local styles*/
    for(i = 0; i < obj->style_cnt; i++) {
 800e59e:	2300      	movs	r3, #0
 800e5a0:	617b      	str	r3, [r7, #20]
 800e5a2:	e01a      	b.n	800e5da <lv_obj_add_style+0x56>
        if(obj->styles[i].is_trans) continue;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	68da      	ldr	r2, [r3, #12]
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	00db      	lsls	r3, r3, #3
 800e5ac:	4413      	add	r3, r2
 800e5ae:	79db      	ldrb	r3, [r3, #7]
 800e5b0:	f003 0302 	and.w	r3, r3, #2
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d10b      	bne.n	800e5d2 <lv_obj_add_style+0x4e>
        if(obj->styles[i].is_local) continue;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	68da      	ldr	r2, [r3, #12]
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	00db      	lsls	r3, r3, #3
 800e5c2:	4413      	add	r3, r2
 800e5c4:	79db      	ldrb	r3, [r3, #7]
 800e5c6:	f003 0301 	and.w	r3, r3, #1
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d00e      	beq.n	800e5ee <lv_obj_add_style+0x6a>
 800e5d0:	e000      	b.n	800e5d4 <lv_obj_add_style+0x50>
        if(obj->styles[i].is_trans) continue;
 800e5d2:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	617b      	str	r3, [r7, #20]
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e5de:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	461a      	mov	r2, r3
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d3db      	bcc.n	800e5a4 <lv_obj_add_style+0x20>
 800e5ec:	e000      	b.n	800e5f0 <lv_obj_add_style+0x6c>
        break;
 800e5ee:	bf00      	nop
    }

    /*Now `i` is at the first normal style. Insert the new style before this*/

    /*Allocate space for the new style and shift the rest of the style to the end*/
    obj->style_cnt++;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e5f4:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e600:	b2d9      	uxtb	r1, r3
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800e606:	f361 03c8 	bfi	r3, r1, #3, #6
 800e60a:	8453      	strh	r3, [r2, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	68da      	ldr	r2, [r3, #12]
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e614:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	00db      	lsls	r3, r3, #3
 800e61c:	4619      	mov	r1, r3
 800e61e:	4610      	mov	r0, r2
 800e620:	f015 fcc6 	bl	8023fb0 <lv_mem_realloc>
 800e624:	4602      	mov	r2, r0
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	60da      	str	r2, [r3, #12]

    uint32_t j;
    for(j = obj->style_cnt - 1; j > i ; j--) {
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e62e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800e632:	b2db      	uxtb	r3, r3
 800e634:	3b01      	subs	r3, #1
 800e636:	613b      	str	r3, [r7, #16]
 800e638:	e014      	b.n	800e664 <lv_obj_add_style+0xe0>
        obj->styles[j] = obj->styles[j - 1];
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	68da      	ldr	r2, [r3, #12]
 800e63e:	6939      	ldr	r1, [r7, #16]
 800e640:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800e644:	440b      	add	r3, r1
 800e646:	00db      	lsls	r3, r3, #3
 800e648:	18d1      	adds	r1, r2, r3
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	68da      	ldr	r2, [r3, #12]
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	00db      	lsls	r3, r3, #3
 800e652:	4413      	add	r3, r2
 800e654:	460a      	mov	r2, r1
 800e656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e65a:	e883 0003 	stmia.w	r3, {r0, r1}
    for(j = obj->style_cnt - 1; j > i ; j--) {
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	3b01      	subs	r3, #1
 800e662:	613b      	str	r3, [r7, #16]
 800e664:	693a      	ldr	r2, [r7, #16]
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d8e6      	bhi.n	800e63a <lv_obj_add_style+0xb6>
    }

    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	68da      	ldr	r2, [r3, #12]
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	00db      	lsls	r3, r3, #3
 800e674:	4413      	add	r3, r2
 800e676:	2108      	movs	r1, #8
 800e678:	4618      	mov	r0, r3
 800e67a:	f016 f86f 	bl	802475c <lv_memset_00>
    obj->styles[i].style = style;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	68da      	ldr	r2, [r3, #12]
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	00db      	lsls	r3, r3, #3
 800e686:	4413      	add	r3, r2
 800e688:	68ba      	ldr	r2, [r7, #8]
 800e68a:	601a      	str	r2, [r3, #0]
    obj->styles[i].selector = selector;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	68da      	ldr	r2, [r3, #12]
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	00db      	lsls	r3, r3, #3
 800e694:	441a      	add	r2, r3
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800e69c:	6853      	ldr	r3, [r2, #4]
 800e69e:	f361 0317 	bfi	r3, r1, #0, #24
 800e6a2:	6053      	str	r3, [r2, #4]

    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 800e6a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6a8:	6879      	ldr	r1, [r7, #4]
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f000 f8fa 	bl	800e8a4 <lv_obj_refresh_style>
}
 800e6b0:	bf00      	nop
 800e6b2:	3718      	adds	r7, #24
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <lv_obj_remove_style>:

void lv_obj_remove_style(lv_obj_t * obj, lv_style_t * style, lv_style_selector_t selector)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b08c      	sub	sp, #48	; 0x30
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	60b9      	str	r1, [r7, #8]
 800e6c2:	607a      	str	r2, [r7, #4]
    lv_state_t state = lv_obj_style_get_selector_state(selector);
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f000 fe35 	bl	800f334 <lv_obj_style_get_selector_state>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	83fb      	strh	r3, [r7, #30]
    lv_part_t part = lv_obj_style_get_selector_part(selector);
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f000 fe3c 	bl	800f34c <lv_obj_style_get_selector_part>
 800e6d4:	61b8      	str	r0, [r7, #24]
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 800e6d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e6da:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d005      	beq.n	800e6ee <lv_obj_remove_style+0x36>
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	7adb      	ldrb	r3, [r3, #11]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d101      	bne.n	800e6ee <lv_obj_remove_style+0x36>
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	85fb      	strh	r3, [r7, #46]	; 0x2e

    uint32_t i = 0;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	62bb      	str	r3, [r7, #40]	; 0x28
    bool deleted = false;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(i <  obj->style_cnt) {
 800e6f8:	e0b9      	b.n	800e86e <lv_obj_remove_style+0x1b6>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	68da      	ldr	r2, [r3, #12]
 800e6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e700:	00db      	lsls	r3, r3, #3
 800e702:	4413      	add	r3, r2
 800e704:	685b      	ldr	r3, [r3, #4]
 800e706:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800e70a:	4618      	mov	r0, r3
 800e70c:	f000 fe12 	bl	800f334 <lv_obj_style_get_selector_state>
 800e710:	4603      	mov	r3, r0
 800e712:	82fb      	strh	r3, [r7, #22]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	68da      	ldr	r2, [r3, #12]
 800e718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71a:	00db      	lsls	r3, r3, #3
 800e71c:	4413      	add	r3, r2
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800e724:	4618      	mov	r0, r3
 800e726:	f000 fe11 	bl	800f34c <lv_obj_style_get_selector_part>
 800e72a:	6138      	str	r0, [r7, #16]
        if((state != LV_STATE_ANY && state_act != state) ||
 800e72c:	8bfb      	ldrh	r3, [r7, #30]
 800e72e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e732:	4293      	cmp	r3, r2
 800e734:	d003      	beq.n	800e73e <lv_obj_remove_style+0x86>
 800e736:	8afa      	ldrh	r2, [r7, #22]
 800e738:	8bfb      	ldrh	r3, [r7, #30]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d113      	bne.n	800e766 <lv_obj_remove_style+0xae>
 800e73e:	69bb      	ldr	r3, [r7, #24]
 800e740:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800e744:	d003      	beq.n	800e74e <lv_obj_remove_style+0x96>
           (part != LV_PART_ANY && part_act != part) ||
 800e746:	693a      	ldr	r2, [r7, #16]
 800e748:	69bb      	ldr	r3, [r7, #24]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d10b      	bne.n	800e766 <lv_obj_remove_style+0xae>
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d00c      	beq.n	800e76e <lv_obj_remove_style+0xb6>
           (style != NULL && style != obj->styles[i].style)) {
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	68da      	ldr	r2, [r3, #12]
 800e758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75a:	00db      	lsls	r3, r3, #3
 800e75c:	4413      	add	r3, r2
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	68ba      	ldr	r2, [r7, #8]
 800e762:	429a      	cmp	r2, r3
 800e764:	d003      	beq.n	800e76e <lv_obj_remove_style+0xb6>
            i++;
 800e766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e768:	3301      	adds	r3, #1
 800e76a:	62bb      	str	r3, [r7, #40]	; 0x28
            continue;
 800e76c:	e07f      	b.n	800e86e <lv_obj_remove_style+0x1b6>
        }

        if(obj->styles[i].is_trans) {
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	68da      	ldr	r2, [r3, #12]
 800e772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e774:	00db      	lsls	r3, r3, #3
 800e776:	4413      	add	r3, r2
 800e778:	79db      	ldrb	r3, [r3, #7]
 800e77a:	f003 0302 	and.w	r3, r3, #2
 800e77e:	b2db      	uxtb	r3, r3
 800e780:	2b00      	cmp	r3, #0
 800e782:	d006      	beq.n	800e792 <lv_obj_remove_style+0xda>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 800e784:	2300      	movs	r3, #0
 800e786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e78a:	69b9      	ldr	r1, [r7, #24]
 800e78c:	68f8      	ldr	r0, [r7, #12]
 800e78e:	f001 f8a7 	bl	800f8e0 <trans_del>
        }

        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	68da      	ldr	r2, [r3, #12]
 800e796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e798:	00db      	lsls	r3, r3, #3
 800e79a:	4413      	add	r3, r2
 800e79c:	79db      	ldrb	r3, [r3, #7]
 800e79e:	f003 0301 	and.w	r3, r3, #1
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d10a      	bne.n	800e7be <lv_obj_remove_style+0x106>
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	68da      	ldr	r2, [r3, #12]
 800e7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ae:	00db      	lsls	r3, r3, #3
 800e7b0:	4413      	add	r3, r2
 800e7b2:	79db      	ldrb	r3, [r3, #7]
 800e7b4:	f003 0302 	and.w	r3, r3, #2
 800e7b8:	b2db      	uxtb	r3, r3
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d018      	beq.n	800e7f0 <lv_obj_remove_style+0x138>
            lv_style_reset(obj->styles[i].style);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	68da      	ldr	r2, [r3, #12]
 800e7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c4:	00db      	lsls	r3, r3, #3
 800e7c6:	4413      	add	r3, r2
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f016 f9da 	bl	8024b84 <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	68da      	ldr	r2, [r3, #12]
 800e7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d6:	00db      	lsls	r3, r3, #3
 800e7d8:	4413      	add	r3, r2
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f015 fbb9 	bl	8023f54 <lv_mem_free>
            obj->styles[i].style = NULL;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	68da      	ldr	r2, [r3, #12]
 800e7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e8:	00db      	lsls	r3, r3, #3
 800e7ea:	4413      	add	r3, r2
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	601a      	str	r2, [r3, #0]
        }

        /*Shift the styles after `i` by one*/
        uint32_t j;
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f2:	623b      	str	r3, [r7, #32]
 800e7f4:	e012      	b.n	800e81c <lv_obj_remove_style+0x164>
            obj->styles[j] = obj->styles[j + 1];
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	68da      	ldr	r2, [r3, #12]
 800e7fa:	6a3b      	ldr	r3, [r7, #32]
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	00db      	lsls	r3, r3, #3
 800e800:	18d1      	adds	r1, r2, r3
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	68da      	ldr	r2, [r3, #12]
 800e806:	6a3b      	ldr	r3, [r7, #32]
 800e808:	00db      	lsls	r3, r3, #3
 800e80a:	4413      	add	r3, r2
 800e80c:	460a      	mov	r2, r1
 800e80e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e812:	e883 0003 	stmia.w	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800e816:	6a3b      	ldr	r3, [r7, #32]
 800e818:	3301      	adds	r3, #1
 800e81a:	623b      	str	r3, [r7, #32]
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e820:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800e824:	b2db      	uxtb	r3, r3
 800e826:	3b01      	subs	r3, #1
 800e828:	6a3a      	ldr	r2, [r7, #32]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d3e3      	bcc.n	800e7f6 <lv_obj_remove_style+0x13e>
        }

        obj->style_cnt--;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e832:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800e836:	b2db      	uxtb	r3, r3
 800e838:	333f      	adds	r3, #63	; 0x3f
 800e83a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e83e:	b2d9      	uxtb	r1, r3
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800e844:	f361 03c8 	bfi	r3, r1, #3, #6
 800e848:	8453      	strh	r3, [r2, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	68da      	ldr	r2, [r3, #12]
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e852:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800e856:	b2db      	uxtb	r3, r3
 800e858:	00db      	lsls	r3, r3, #3
 800e85a:	4619      	mov	r1, r3
 800e85c:	4610      	mov	r0, r2
 800e85e:	f015 fba7 	bl	8023fb0 <lv_mem_realloc>
 800e862:	4602      	mov	r2, r0
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	60da      	str	r2, [r3, #12]

        deleted = true;
 800e868:	2301      	movs	r3, #1
 800e86a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(i <  obj->style_cnt) {
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e872:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800e876:	b2db      	uxtb	r3, r3
 800e878:	461a      	mov	r2, r3
 800e87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87c:	4293      	cmp	r3, r2
 800e87e:	f4ff af3c 	bcc.w	800e6fa <lv_obj_remove_style+0x42>
        /*The style from the current `i` index is removed, so `i` points to the next style.
         *Therefore it doesn't needs to be incremented*/
    }
    if(deleted && prop != LV_STYLE_PROP_INV) {
 800e882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e886:	2b00      	cmp	r3, #0
 800e888:	d008      	beq.n	800e89c <lv_obj_remove_style+0x1e4>
 800e88a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d005      	beq.n	800e89c <lv_obj_remove_style+0x1e4>
        lv_obj_refresh_style(obj, part, prop);
 800e890:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e892:	461a      	mov	r2, r3
 800e894:	69b9      	ldr	r1, [r7, #24]
 800e896:	68f8      	ldr	r0, [r7, #12]
 800e898:	f000 f804 	bl	800e8a4 <lv_obj_refresh_style>
    }
}
 800e89c:	bf00      	nop
 800e89e:	3730      	adds	r7, #48	; 0x30
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <lv_obj_refresh_style>:
        d = lv_disp_get_next(d);
    }
}

void lv_obj_refresh_style(lv_obj_t * obj, lv_style_selector_t selector, lv_style_prop_t prop)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b088      	sub	sp, #32
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	60f8      	str	r0, [r7, #12]
 800e8ac:	60b9      	str	r1, [r7, #8]
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	80fb      	strh	r3, [r7, #6]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!style_refr) return;
 800e8b2:	4b60      	ldr	r3, [pc, #384]	; (800ea34 <lv_obj_refresh_style+0x190>)
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	f083 0301 	eor.w	r3, r3, #1
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f040 80b4 	bne.w	800ea2a <lv_obj_refresh_style+0x186>

    lv_obj_invalidate(obj);
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	f7fc ff7f 	bl	800b7c6 <lv_obj_invalidate>

    lv_part_t part = lv_obj_style_get_selector_part(selector);
 800e8c8:	68b8      	ldr	r0, [r7, #8]
 800e8ca:	f000 fd3f 	bl	800f34c <lv_obj_style_get_selector_part>
 800e8ce:	61f8      	str	r0, [r7, #28]

    bool is_layout_refr = lv_style_prop_has_flag(prop, LV_STYLE_PROP_LAYOUT_REFR);
 800e8d0:	88fb      	ldrh	r3, [r7, #6]
 800e8d2:	2104      	movs	r1, #4
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7ff fd7e 	bl	800e3d6 <lv_style_prop_has_flag>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	76fb      	strb	r3, [r7, #27]
    bool is_ext_draw = lv_style_prop_has_flag(prop, LV_STYLE_PROP_EXT_DRAW);
 800e8de:	88fb      	ldrh	r3, [r7, #6]
 800e8e0:	2102      	movs	r1, #2
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7ff fd77 	bl	800e3d6 <lv_style_prop_has_flag>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	76bb      	strb	r3, [r7, #26]
    bool is_inheritable = lv_style_prop_has_flag(prop, LV_STYLE_PROP_INHERIT);
 800e8ec:	88fb      	ldrh	r3, [r7, #6]
 800e8ee:	2101      	movs	r1, #1
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7ff fd70 	bl	800e3d6 <lv_style_prop_has_flag>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	767b      	strb	r3, [r7, #25]
    bool is_layer_refr = lv_style_prop_has_flag(prop, LV_STYLE_PROP_LAYER_REFR);
 800e8fa:	88fb      	ldrh	r3, [r7, #6]
 800e8fc:	2110      	movs	r1, #16
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7ff fd69 	bl	800e3d6 <lv_style_prop_has_flag>
 800e904:	4603      	mov	r3, r0
 800e906:	763b      	strb	r3, [r7, #24]

    if(is_layout_refr) {
 800e908:	7efb      	ldrb	r3, [r7, #27]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d022      	beq.n	800e954 <lv_obj_refresh_style+0xb0>
        if(part == LV_PART_ANY ||
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800e914:	d016      	beq.n	800e944 <lv_obj_refresh_style+0xa0>
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d013      	beq.n	800e944 <lv_obj_refresh_style+0xa0>
           part == LV_PART_MAIN ||
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800e91c:	2100      	movs	r1, #0
 800e91e:	68f8      	ldr	r0, [r7, #12]
 800e920:	f7ff fd85 	bl	800e42e <lv_obj_get_style_height>
 800e924:	4603      	mov	r3, r0
 800e926:	461a      	mov	r2, r3
           part == LV_PART_MAIN ||
 800e928:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d009      	beq.n	800e944 <lv_obj_refresh_style+0xa0>
           lv_obj_get_style_width(obj, 0) == LV_SIZE_CONTENT) {
 800e930:	2100      	movs	r1, #0
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	f7ff fd69 	bl	800e40a <lv_obj_get_style_width>
 800e938:	4603      	mov	r3, r0
 800e93a:	461a      	mov	r2, r3
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800e93c:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800e940:	429a      	cmp	r2, r3
 800e942:	d107      	bne.n	800e954 <lv_obj_refresh_style+0xb0>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 800e944:	2200      	movs	r2, #0
 800e946:	212a      	movs	r1, #42	; 0x2a
 800e948:	68f8      	ldr	r0, [r7, #12]
 800e94a:	f7f8 f967 	bl	8006c1c <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 800e94e:	68f8      	ldr	r0, [r7, #12]
 800e950:	f7fc f8ec 	bl	800ab2c <lv_obj_mark_layout_as_dirty>
        }
    }
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800e95a:	d002      	beq.n	800e962 <lv_obj_refresh_style+0xbe>
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d111      	bne.n	800e986 <lv_obj_refresh_style+0xe2>
 800e962:	88fb      	ldrh	r3, [r7, #6]
 800e964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e968:	4293      	cmp	r3, r2
 800e96a:	d002      	beq.n	800e972 <lv_obj_refresh_style+0xce>
 800e96c:	7efb      	ldrb	r3, [r7, #27]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d009      	beq.n	800e986 <lv_obj_refresh_style+0xe2>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800e972:	68f8      	ldr	r0, [r7, #12]
 800e974:	f001 fb90 	bl	8010098 <lv_obj_get_parent>
 800e978:	6178      	str	r0, [r7, #20]
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d002      	beq.n	800e986 <lv_obj_refresh_style+0xe2>
 800e980:	6978      	ldr	r0, [r7, #20]
 800e982:	f7fc f8d3 	bl	800ab2c <lv_obj_mark_layout_as_dirty>
    }

    /*Cache the layer type*/
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 800e986:	69fb      	ldr	r3, [r7, #28]
 800e988:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800e98c:	d002      	beq.n	800e994 <lv_obj_refresh_style+0xf0>
 800e98e:	69fb      	ldr	r3, [r7, #28]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d126      	bne.n	800e9e2 <lv_obj_refresh_style+0x13e>
 800e994:	7e3b      	ldrb	r3, [r7, #24]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d023      	beq.n	800e9e2 <lv_obj_refresh_style+0x13e>
        lv_layer_type_t layer_type = calculate_layer_type(obj);
 800e99a:	68f8      	ldr	r0, [r7, #12]
 800e99c:	f001 fa66 	bl	800fe6c <calculate_layer_type>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	74fb      	strb	r3, [r7, #19]
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	689b      	ldr	r3, [r3, #8]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d00a      	beq.n	800e9c2 <lv_obj_refresh_style+0x11e>
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	689a      	ldr	r2, [r3, #8]
 800e9b0:	7cfb      	ldrb	r3, [r7, #19]
 800e9b2:	f003 0303 	and.w	r3, r3, #3
 800e9b6:	b2d9      	uxtb	r1, r3
 800e9b8:	7e93      	ldrb	r3, [r2, #26]
 800e9ba:	f361 1387 	bfi	r3, r1, #6, #2
 800e9be:	7693      	strb	r3, [r2, #26]
 800e9c0:	e00f      	b.n	800e9e2 <lv_obj_refresh_style+0x13e>
        else if(layer_type != LV_LAYER_TYPE_NONE) {
 800e9c2:	7cfb      	ldrb	r3, [r7, #19]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d00c      	beq.n	800e9e2 <lv_obj_refresh_style+0x13e>
            lv_obj_allocate_spec_attr(obj);
 800e9c8:	68f8      	ldr	r0, [r7, #12]
 800e9ca:	f7f9 fb49 	bl	8008060 <lv_obj_allocate_spec_attr>
            obj->spec_attr->layer_type = layer_type;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	689a      	ldr	r2, [r3, #8]
 800e9d2:	7cfb      	ldrb	r3, [r7, #19]
 800e9d4:	f003 0303 	and.w	r3, r3, #3
 800e9d8:	b2d9      	uxtb	r1, r3
 800e9da:	7e93      	ldrb	r3, [r2, #26]
 800e9dc:	f361 1387 	bfi	r3, r1, #6, #2
 800e9e0:	7693      	strb	r3, [r2, #26]
        }
    }

    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 800e9e2:	88fb      	ldrh	r3, [r7, #6]
 800e9e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d002      	beq.n	800e9f2 <lv_obj_refresh_style+0x14e>
 800e9ec:	7ebb      	ldrb	r3, [r7, #26]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d002      	beq.n	800e9f8 <lv_obj_refresh_style+0x154>
        lv_obj_refresh_ext_draw_size(obj);
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	f7fb fb92 	bl	800a11c <lv_obj_refresh_ext_draw_size>
    }
    lv_obj_invalidate(obj);
 800e9f8:	68f8      	ldr	r0, [r7, #12]
 800e9fa:	f7fc fee4 	bl	800b7c6 <lv_obj_invalidate>

    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 800e9fe:	88fb      	ldrh	r3, [r7, #6]
 800ea00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d008      	beq.n	800ea1a <lv_obj_refresh_style+0x176>
 800ea08:	7e7b      	ldrb	r3, [r7, #25]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d00e      	beq.n	800ea2c <lv_obj_refresh_style+0x188>
 800ea0e:	7ebb      	ldrb	r3, [r7, #26]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d102      	bne.n	800ea1a <lv_obj_refresh_style+0x176>
 800ea14:	7efb      	ldrb	r3, [r7, #27]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d008      	beq.n	800ea2c <lv_obj_refresh_style+0x188>
        if(part != LV_PART_SCROLLBAR) {
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea20:	d004      	beq.n	800ea2c <lv_obj_refresh_style+0x188>
            refresh_children_style(obj);
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	f000 ff2e 	bl	800f884 <refresh_children_style>
 800ea28:	e000      	b.n	800ea2c <lv_obj_refresh_style+0x188>
    if(!style_refr) return;
 800ea2a:	bf00      	nop
        }
    }
}
 800ea2c:	3720      	adds	r7, #32
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	2000000d 	.word	0x2000000d

0800ea38 <lv_obj_enable_style_refresh>:

void lv_obj_enable_style_refresh(bool en)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b083      	sub	sp, #12
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	4603      	mov	r3, r0
 800ea40:	71fb      	strb	r3, [r7, #7]
    style_refr = en;
 800ea42:	4a04      	ldr	r2, [pc, #16]	; (800ea54 <lv_obj_enable_style_refresh+0x1c>)
 800ea44:	79fb      	ldrb	r3, [r7, #7]
 800ea46:	7013      	strb	r3, [r2, #0]
}
 800ea48:	bf00      	nop
 800ea4a:	370c      	adds	r7, #12
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr
 800ea54:	2000000d 	.word	0x2000000d

0800ea58 <lv_obj_get_style_prop>:

lv_style_value_t lv_obj_get_style_prop(const lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b088      	sub	sp, #32
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	60f8      	str	r0, [r7, #12]
 800ea60:	60b9      	str	r1, [r7, #8]
 800ea62:	4613      	mov	r3, r2
 800ea64:	80fb      	strh	r3, [r7, #6]
    lv_style_value_t value_act;
    bool inheritable = lv_style_prop_has_flag(prop, LV_STYLE_PROP_INHERIT);
 800ea66:	88fb      	ldrh	r3, [r7, #6]
 800ea68:	2101      	movs	r1, #1
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7ff fcb3 	bl	800e3d6 <lv_style_prop_has_flag>
 800ea70:	4603      	mov	r3, r0
 800ea72:	75fb      	strb	r3, [r7, #23]
    lv_style_res_t found = LV_STYLE_RES_NOT_FOUND;
 800ea74:	2300      	movs	r3, #0
 800ea76:	77fb      	strb	r3, [r7, #31]
    while(obj) {
 800ea78:	e01e      	b.n	800eab8 <lv_obj_get_style_prop+0x60>
        found = get_prop_core(obj, part, prop, &value_act);
 800ea7a:	f107 0310 	add.w	r3, r7, #16
 800ea7e:	88fa      	ldrh	r2, [r7, #6]
 800ea80:	68b9      	ldr	r1, [r7, #8]
 800ea82:	68f8      	ldr	r0, [r7, #12]
 800ea84:	f000 fdfa 	bl	800f67c <get_prop_core>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	77fb      	strb	r3, [r7, #31]
        if(found == LV_STYLE_RES_FOUND) break;
 800ea8c:	7ffb      	ldrb	r3, [r7, #31]
 800ea8e:	2b01      	cmp	r3, #1
 800ea90:	d016      	beq.n	800eac0 <lv_obj_get_style_prop+0x68>
        if(!inheritable) break;
 800ea92:	7dfb      	ldrb	r3, [r7, #23]
 800ea94:	f083 0301 	eor.w	r3, r3, #1
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d112      	bne.n	800eac4 <lv_obj_get_style_prop+0x6c>

        /*If not found, check the `MAIN` style first*/
        if(found != LV_STYLE_RES_INHERIT && part != LV_PART_MAIN) {
 800ea9e:	7ffb      	ldrb	r3, [r7, #31]
 800eaa0:	2b02      	cmp	r3, #2
 800eaa2:	d005      	beq.n	800eab0 <lv_obj_get_style_prop+0x58>
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d002      	beq.n	800eab0 <lv_obj_get_style_prop+0x58>
            part = LV_PART_MAIN;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	60bb      	str	r3, [r7, #8]
            continue;
 800eaae:	e003      	b.n	800eab8 <lv_obj_get_style_prop+0x60>
        }

        /*Check the parent too.*/
        obj = lv_obj_get_parent(obj);
 800eab0:	68f8      	ldr	r0, [r7, #12]
 800eab2:	f001 faf1 	bl	8010098 <lv_obj_get_parent>
 800eab6:	60f8      	str	r0, [r7, #12]
    while(obj) {
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d1dd      	bne.n	800ea7a <lv_obj_get_style_prop+0x22>
 800eabe:	e002      	b.n	800eac6 <lv_obj_get_style_prop+0x6e>
        if(found == LV_STYLE_RES_FOUND) break;
 800eac0:	bf00      	nop
 800eac2:	e000      	b.n	800eac6 <lv_obj_get_style_prop+0x6e>
        if(!inheritable) break;
 800eac4:	bf00      	nop
    }

    if(found != LV_STYLE_RES_FOUND) {
 800eac6:	7ffb      	ldrb	r3, [r7, #31]
 800eac8:	2b01      	cmp	r3, #1
 800eaca:	d03a      	beq.n	800eb42 <lv_obj_get_style_prop+0xea>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d131      	bne.n	800eb36 <lv_obj_get_style_prop+0xde>
 800ead2:	88fb      	ldrh	r3, [r7, #6]
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d002      	beq.n	800eade <lv_obj_get_style_prop+0x86>
 800ead8:	88fb      	ldrh	r3, [r7, #6]
 800eada:	2b04      	cmp	r3, #4
 800eadc:	d12b      	bne.n	800eb36 <lv_obj_get_style_prop+0xde>
            const lv_obj_class_t * cls = obj->class_p;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	61bb      	str	r3, [r7, #24]
            while(cls) {
 800eae4:	e010      	b.n	800eb08 <lv_obj_get_style_prop+0xb0>
                if(prop == LV_STYLE_WIDTH) {
 800eae6:	88fb      	ldrh	r3, [r7, #6]
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	d105      	bne.n	800eaf8 <lv_obj_get_style_prop+0xa0>
                    if(cls->width_def != 0) break;
 800eaec:	69bb      	ldr	r3, [r7, #24]
 800eaee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d005      	beq.n	800eb02 <lv_obj_get_style_prop+0xaa>
 800eaf6:	e00c      	b.n	800eb12 <lv_obj_get_style_prop+0xba>
                }
                else {
                    if(cls->height_def != 0) break;
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d106      	bne.n	800eb10 <lv_obj_get_style_prop+0xb8>
                }
                cls = cls->base_class;
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	61bb      	str	r3, [r7, #24]
            while(cls) {
 800eb08:	69bb      	ldr	r3, [r7, #24]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d1eb      	bne.n	800eae6 <lv_obj_get_style_prop+0x8e>
 800eb0e:	e000      	b.n	800eb12 <lv_obj_get_style_prop+0xba>
                    if(cls->height_def != 0) break;
 800eb10:	bf00      	nop
            }

            if(cls) {
 800eb12:	69bb      	ldr	r3, [r7, #24]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d00b      	beq.n	800eb30 <lv_obj_get_style_prop+0xd8>
                value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 800eb18:	88fb      	ldrh	r3, [r7, #6]
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	d103      	bne.n	800eb26 <lv_obj_get_style_prop+0xce>
 800eb1e:	69bb      	ldr	r3, [r7, #24]
 800eb20:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800eb24:	e002      	b.n	800eb2c <lv_obj_get_style_prop+0xd4>
 800eb26:	69bb      	ldr	r3, [r7, #24]
 800eb28:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800eb2c:	613b      	str	r3, [r7, #16]
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800eb2e:	e008      	b.n	800eb42 <lv_obj_get_style_prop+0xea>
            }
            else {
                value_act.num = 0;
 800eb30:	2300      	movs	r3, #0
 800eb32:	613b      	str	r3, [r7, #16]
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800eb34:	e005      	b.n	800eb42 <lv_obj_get_style_prop+0xea>
            }
        }
        else {
            value_act = lv_style_prop_get_default(prop);
 800eb36:	88fb      	ldrh	r3, [r7, #6]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f016 f947 	bl	8024dcc <lv_style_prop_get_default>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	613b      	str	r3, [r7, #16]
        }
    }
    return value_act;
 800eb42:	693b      	ldr	r3, [r7, #16]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3720      	adds	r7, #32
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <lv_obj_set_local_style_prop>:

void lv_obj_set_local_style_prop(lv_obj_t * obj, lv_style_prop_t prop, lv_style_value_t value,
                                 lv_style_selector_t selector)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b086      	sub	sp, #24
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	60f8      	str	r0, [r7, #12]
 800eb54:	607a      	str	r2, [r7, #4]
 800eb56:	603b      	str	r3, [r7, #0]
 800eb58:	460b      	mov	r3, r1
 800eb5a:	817b      	strh	r3, [r7, #10]
    lv_style_t * style = get_local_style(obj, selector);
 800eb5c:	6839      	ldr	r1, [r7, #0]
 800eb5e:	68f8      	ldr	r0, [r7, #12]
 800eb60:	f000 fc20 	bl	800f3a4 <get_local_style>
 800eb64:	6178      	str	r0, [r7, #20]
    lv_style_set_prop(style, prop, value);
 800eb66:	897b      	ldrh	r3, [r7, #10]
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	6978      	ldr	r0, [r7, #20]
 800eb6e:	f016 f907 	bl	8024d80 <lv_style_set_prop>
    lv_obj_refresh_style(obj, selector, prop);
 800eb72:	897b      	ldrh	r3, [r7, #10]
 800eb74:	461a      	mov	r2, r3
 800eb76:	6839      	ldr	r1, [r7, #0]
 800eb78:	68f8      	ldr	r0, [r7, #12]
 800eb7a:	f7ff fe93 	bl	800e8a4 <lv_obj_refresh_style>
}
 800eb7e:	bf00      	nop
 800eb80:	3718      	adds	r7, #24
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <lv_obj_get_local_style_prop>:
}


lv_style_res_t lv_obj_get_local_style_prop(lv_obj_t * obj, lv_style_prop_t prop, lv_style_value_t * value,
                                           lv_style_selector_t selector)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b086      	sub	sp, #24
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	60f8      	str	r0, [r7, #12]
 800eb8e:	607a      	str	r2, [r7, #4]
 800eb90:	603b      	str	r3, [r7, #0]
 800eb92:	460b      	mov	r3, r1
 800eb94:	817b      	strh	r3, [r7, #10]
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800eb96:	2300      	movs	r3, #0
 800eb98:	617b      	str	r3, [r7, #20]
 800eb9a:	e026      	b.n	800ebea <lv_obj_get_local_style_prop+0x64>
        if(obj->styles[i].is_local &&
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	68da      	ldr	r2, [r3, #12]
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	00db      	lsls	r3, r3, #3
 800eba4:	4413      	add	r3, r2
 800eba6:	79db      	ldrb	r3, [r3, #7]
 800eba8:	f003 0301 	and.w	r3, r3, #1
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d018      	beq.n	800ebe4 <lv_obj_get_local_style_prop+0x5e>
           obj->styles[i].selector == selector) {
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	68da      	ldr	r2, [r3, #12]
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	00db      	lsls	r3, r3, #3
 800ebba:	4413      	add	r3, r2
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800ebc2:	461a      	mov	r2, r3
        if(obj->styles[i].is_local &&
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d10c      	bne.n	800ebe4 <lv_obj_get_local_style_prop+0x5e>
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	68da      	ldr	r2, [r3, #12]
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	00db      	lsls	r3, r3, #3
 800ebd2:	4413      	add	r3, r2
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	8979      	ldrh	r1, [r7, #10]
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f016 f8e4 	bl	8024da8 <lv_style_get_prop>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	e00c      	b.n	800ebfe <lv_obj_get_local_style_prop+0x78>
    for(i = 0; i < obj->style_cnt; i++) {
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	617b      	str	r3, [r7, #20]
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ebee:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800ebf2:	b2db      	uxtb	r3, r3
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d3cf      	bcc.n	800eb9c <lv_obj_get_local_style_prop+0x16>
        }
    }

    return LV_STYLE_RES_NOT_FOUND;
 800ebfc:	2300      	movs	r3, #0
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3718      	adds	r7, #24
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <lv_obj_remove_local_style_prop>:

bool lv_obj_remove_local_style_prop(lv_obj_t * obj, lv_style_prop_t prop, lv_style_selector_t selector)
{
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b086      	sub	sp, #24
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	60f8      	str	r0, [r7, #12]
 800ec0e:	460b      	mov	r3, r1
 800ec10:	607a      	str	r2, [r7, #4]
 800ec12:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    uint32_t i;
    /*Find the style*/
    for(i = 0; i < obj->style_cnt; i++) {
 800ec14:	2300      	movs	r3, #0
 800ec16:	617b      	str	r3, [r7, #20]
 800ec18:	e019      	b.n	800ec4e <lv_obj_remove_local_style_prop+0x48>
        if(obj->styles[i].is_local &&
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	68da      	ldr	r2, [r3, #12]
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	00db      	lsls	r3, r3, #3
 800ec22:	4413      	add	r3, r2
 800ec24:	79db      	ldrb	r3, [r3, #7]
 800ec26:	f003 0301 	and.w	r3, r3, #1
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d00b      	beq.n	800ec48 <lv_obj_remove_local_style_prop+0x42>
           obj->styles[i].selector == selector) {
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	68da      	ldr	r2, [r3, #12]
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	00db      	lsls	r3, r3, #3
 800ec38:	4413      	add	r3, r2
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800ec40:	461a      	mov	r2, r3
        if(obj->styles[i].is_local &&
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	4293      	cmp	r3, r2
 800ec46:	d00c      	beq.n	800ec62 <lv_obj_remove_local_style_prop+0x5c>
    for(i = 0; i < obj->style_cnt; i++) {
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	617b      	str	r3, [r7, #20]
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ec52:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800ec56:	b2db      	uxtb	r3, r3
 800ec58:	461a      	mov	r2, r3
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d3dc      	bcc.n	800ec1a <lv_obj_remove_local_style_prop+0x14>
 800ec60:	e000      	b.n	800ec64 <lv_obj_remove_local_style_prop+0x5e>
            break;
 800ec62:	bf00      	nop
        }
    }

    /*The style is not found*/
    if(i == obj->style_cnt) return false;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ec68:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	461a      	mov	r2, r3
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d101      	bne.n	800ec7a <lv_obj_remove_local_style_prop+0x74>
 800ec76:	2300      	movs	r3, #0
 800ec78:	e01b      	b.n	800ecb2 <lv_obj_remove_local_style_prop+0xac>

    lv_res_t res = lv_style_remove_prop(obj->styles[i].style, prop);
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	68da      	ldr	r2, [r3, #12]
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	00db      	lsls	r3, r3, #3
 800ec82:	4413      	add	r3, r2
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	897a      	ldrh	r2, [r7, #10]
 800ec88:	4611      	mov	r1, r2
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f015 ffa6 	bl	8024bdc <lv_style_remove_prop>
 800ec90:	4603      	mov	r3, r0
 800ec92:	74fb      	strb	r3, [r7, #19]
    if(res == LV_RES_OK) {
 800ec94:	7cfb      	ldrb	r3, [r7, #19]
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d105      	bne.n	800eca6 <lv_obj_remove_local_style_prop+0xa0>
        lv_obj_refresh_style(obj, selector, prop);
 800ec9a:	897b      	ldrh	r3, [r7, #10]
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	6879      	ldr	r1, [r7, #4]
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f7ff fdff 	bl	800e8a4 <lv_obj_refresh_style>
    }

    return res;
 800eca6:	7cfb      	ldrb	r3, [r7, #19]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	bf14      	ite	ne
 800ecac:	2301      	movne	r3, #1
 800ecae:	2300      	moveq	r3, #0
 800ecb0:	b2db      	uxtb	r3, r3
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3718      	adds	r7, #24
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
	...

0800ecbc <_lv_obj_style_create_transition>:

void _lv_obj_style_create_transition(lv_obj_t * obj, lv_part_t part, lv_state_t prev_state, lv_state_t new_state,
                                     const _lv_obj_style_transition_dsc_t * tr_dsc)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b09a      	sub	sp, #104	; 0x68
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	4611      	mov	r1, r2
 800ecc8:	461a      	mov	r2, r3
 800ecca:	460b      	mov	r3, r1
 800eccc:	80fb      	strh	r3, [r7, #6]
 800ecce:	4613      	mov	r3, r2
 800ecd0:	80bb      	strh	r3, [r7, #4]
    trans_t * tr;

    /*Get the previous and current values*/
    obj->skip_trans = 1;
 800ecd2:	68fa      	ldr	r2, [r7, #12]
 800ecd4:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800ecd8:	f043 0304 	orr.w	r3, r3, #4
 800ecdc:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
    obj->state = prev_state;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	88fa      	ldrh	r2, [r7, #6]
 800ece4:	841a      	strh	r2, [r3, #32]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800ece6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ece8:	891b      	ldrh	r3, [r3, #8]
 800ecea:	461a      	mov	r2, r3
 800ecec:	68b9      	ldr	r1, [r7, #8]
 800ecee:	68f8      	ldr	r0, [r7, #12]
 800ecf0:	f7ff feb2 	bl	800ea58 <lv_obj_get_style_prop>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	65bb      	str	r3, [r7, #88]	; 0x58
    obj->state = new_state;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	88ba      	ldrh	r2, [r7, #4]
 800ecfc:	841a      	strh	r2, [r3, #32]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800ecfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed00:	891b      	ldrh	r3, [r3, #8]
 800ed02:	461a      	mov	r2, r3
 800ed04:	68b9      	ldr	r1, [r7, #8]
 800ed06:	68f8      	ldr	r0, [r7, #12]
 800ed08:	f7ff fea6 	bl	800ea58 <lv_obj_get_style_prop>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	657b      	str	r3, [r7, #84]	; 0x54
    obj->skip_trans = 0;
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800ed16:	f36f 0382 	bfc	r3, #2, #1
 800ed1a:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22

    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800ed1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d10a      	bne.n	800ed3c <_lv_obj_style_create_transition+0x80>
 800ed26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d106      	bne.n	800ed3c <_lv_obj_style_create_transition+0x80>
 800ed2e:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800ed32:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ed36:	429a      	cmp	r2, r3
 800ed38:	f000 80cc 	beq.w	800eed4 <_lv_obj_style_create_transition+0x218>
    obj->state = prev_state;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	88fa      	ldrh	r2, [r7, #6]
 800ed40:	841a      	strh	r2, [r3, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800ed42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed44:	891b      	ldrh	r3, [r3, #8]
 800ed46:	461a      	mov	r2, r3
 800ed48:	68b9      	ldr	r1, [r7, #8]
 800ed4a:	68f8      	ldr	r0, [r7, #12]
 800ed4c:	f7ff fe84 	bl	800ea58 <lv_obj_get_style_prop>
 800ed50:	4603      	mov	r3, r0
 800ed52:	65bb      	str	r3, [r7, #88]	; 0x58
    obj->state = new_state;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	88ba      	ldrh	r2, [r7, #4]
 800ed58:	841a      	strh	r2, [r3, #32]

    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 800ed5a:	68b9      	ldr	r1, [r7, #8]
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f000 fbec 	bl	800f53a <get_trans_style>
 800ed62:	6678      	str	r0, [r7, #100]	; 0x64
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 800ed64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed66:	6818      	ldr	r0, [r3, #0]
 800ed68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed6a:	891b      	ldrh	r3, [r3, #8]
 800ed6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed6e:	4619      	mov	r1, r3
 800ed70:	f016 f806 	bl	8024d80 <lv_style_set_prop>

    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 800ed74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed76:	891b      	ldrh	r3, [r3, #8]
 800ed78:	2b0b      	cmp	r3, #11
 800ed7a:	d143      	bne.n	800ee04 <_lv_obj_style_create_transition+0x148>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 800ed7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed7e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d004      	beq.n	800ed90 <_lv_obj_style_create_transition+0xd4>
 800ed86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed88:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d139      	bne.n	800ee04 <_lv_obj_style_create_transition+0x148>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800ed90:	68f8      	ldr	r0, [r7, #12]
 800ed92:	f7fb ff4d 	bl	800ac30 <lv_obj_get_width>
 800ed96:	4603      	mov	r3, r0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	da00      	bge.n	800ed9e <_lv_obj_style_create_transition+0xe2>
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	105b      	asrs	r3, r3, #1
 800eda0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800eda4:	68f8      	ldr	r0, [r7, #12]
 800eda6:	f7fb ff51 	bl	800ac4c <lv_obj_get_height>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b00      	cmp	r3, #0
 800edae:	da00      	bge.n	800edb2 <_lv_obj_style_create_transition+0xf6>
 800edb0:	3301      	adds	r3, #1
 800edb2:	105b      	asrs	r3, r3, #1
 800edb4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800edb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800edba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d10d      	bne.n	800edde <_lv_obj_style_create_transition+0x122>
 800edc2:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800edc6:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800edca:	429a      	cmp	r2, r3
 800edcc:	da03      	bge.n	800edd6 <_lv_obj_style_create_transition+0x11a>
 800edce:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800edd2:	3301      	adds	r3, #1
 800edd4:	e002      	b.n	800eddc <_lv_obj_style_create_transition+0x120>
 800edd6:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800edda:	3301      	adds	r3, #1
 800eddc:	65bb      	str	r3, [r7, #88]	; 0x58
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800edde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ede0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d10d      	bne.n	800ee04 <_lv_obj_style_create_transition+0x148>
 800ede8:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800edec:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800edf0:	429a      	cmp	r2, r3
 800edf2:	da03      	bge.n	800edfc <_lv_obj_style_create_transition+0x140>
 800edf4:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800edf8:	3301      	adds	r3, #1
 800edfa:	e002      	b.n	800ee02 <_lv_obj_style_create_transition+0x146>
 800edfc:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 800ee00:	3301      	adds	r3, #1
 800ee02:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800ee04:	4836      	ldr	r0, [pc, #216]	; (800eee0 <_lv_obj_style_create_transition+0x224>)
 800ee06:	f014 fdf1 	bl	80239ec <_lv_ll_ins_head>
 800ee0a:	65f8      	str	r0, [r7, #92]	; 0x5c
    LV_ASSERT_MALLOC(tr);
 800ee0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d100      	bne.n	800ee14 <_lv_obj_style_create_transition+0x158>
 800ee12:	e7fe      	b.n	800ee12 <_lv_obj_style_create_transition+0x156>
    if(tr == NULL) return;
 800ee14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d05e      	beq.n	800eed8 <_lv_obj_style_create_transition+0x21c>
    tr->start_value = v1;
 800ee1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ee1e:	60da      	str	r2, [r3, #12]
    tr->end_value = v2;
 800ee20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee24:	611a      	str	r2, [r3, #16]
    tr->obj = obj;
 800ee26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee28:	68fa      	ldr	r2, [r7, #12]
 800ee2a:	601a      	str	r2, [r3, #0]
    tr->prop = tr_dsc->prop;
 800ee2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee2e:	891a      	ldrh	r2, [r3, #8]
 800ee30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee32:	809a      	strh	r2, [r3, #4]
    tr->selector = part;
 800ee34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee36:	68ba      	ldr	r2, [r7, #8]
 800ee38:	609a      	str	r2, [r3, #8]

    lv_anim_t a;
    lv_anim_init(&a);
 800ee3a:	f107 0310 	add.w	r3, r7, #16
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f013 f91c 	bl	802207c <lv_anim_init>
    lv_anim_set_var(&a, tr);
 800ee44:	f107 0310 	add.w	r3, r7, #16
 800ee48:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f7ff fa24 	bl	800e298 <lv_anim_set_var>
    lv_anim_set_exec_cb(&a, trans_anim_cb);
 800ee50:	f107 0310 	add.w	r3, r7, #16
 800ee54:	4923      	ldr	r1, [pc, #140]	; (800eee4 <_lv_obj_style_create_transition+0x228>)
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7ff fa2c 	bl	800e2b4 <lv_anim_set_exec_cb>
    lv_anim_set_start_cb(&a, trans_anim_start_cb);
 800ee5c:	f107 0310 	add.w	r3, r7, #16
 800ee60:	4921      	ldr	r1, [pc, #132]	; (800eee8 <_lv_obj_style_create_transition+0x22c>)
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7ff fa74 	bl	800e350 <lv_anim_set_start_cb>
    lv_anim_set_ready_cb(&a, trans_anim_ready_cb);
 800ee68:	f107 0310 	add.w	r3, r7, #16
 800ee6c:	491f      	ldr	r1, [pc, #124]	; (800eeec <_lv_obj_style_create_transition+0x230>)
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7ff fa7c 	bl	800e36c <lv_anim_set_ready_cb>
    lv_anim_set_values(&a, 0x00, 0xFF);
 800ee74:	f107 0310 	add.w	r3, r7, #16
 800ee78:	22ff      	movs	r2, #255	; 0xff
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7ff fa44 	bl	800e30a <lv_anim_set_values>
    lv_anim_set_time(&a, tr_dsc->time);
 800ee82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee84:	881b      	ldrh	r3, [r3, #0]
 800ee86:	461a      	mov	r2, r3
 800ee88:	f107 0310 	add.w	r3, r7, #16
 800ee8c:	4611      	mov	r1, r2
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7ff fa1e 	bl	800e2d0 <lv_anim_set_time>
    lv_anim_set_delay(&a, tr_dsc->delay);
 800ee94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee96:	885b      	ldrh	r3, [r3, #2]
 800ee98:	461a      	mov	r2, r3
 800ee9a:	f107 0310 	add.w	r3, r7, #16
 800ee9e:	4611      	mov	r1, r2
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7ff fa23 	bl	800e2ec <lv_anim_set_delay>
    lv_anim_set_path_cb(&a, tr_dsc->path_cb);
 800eea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eea8:	68da      	ldr	r2, [r3, #12]
 800eeaa:	f107 0310 	add.w	r3, r7, #16
 800eeae:	4611      	mov	r1, r2
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7ff fa3f 	bl	800e334 <lv_anim_set_path_cb>
    lv_anim_set_early_apply(&a, false);
 800eeb6:	f107 0310 	add.w	r3, r7, #16
 800eeba:	2100      	movs	r1, #0
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7ff fa63 	bl	800e388 <lv_anim_set_early_apply>
#if LV_USE_USER_DATA
    a.user_data = tr_dsc->user_data;
 800eec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eec4:	691b      	ldr	r3, [r3, #16]
 800eec6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    lv_anim_start(&a);
 800eec8:	f107 0310 	add.w	r3, r7, #16
 800eecc:	4618      	mov	r0, r3
 800eece:	f013 f8fb 	bl	80220c8 <lv_anim_start>
 800eed2:	e002      	b.n	800eeda <_lv_obj_style_create_transition+0x21e>
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800eed4:	bf00      	nop
 800eed6:	e000      	b.n	800eeda <_lv_obj_style_create_transition+0x21e>
    if(tr == NULL) return;
 800eed8:	bf00      	nop
}
 800eeda:	3768      	adds	r7, #104	; 0x68
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	20000910 	.word	0x20000910
 800eee4:	0800f9e5 	.word	0x0800f9e5
 800eee8:	0800fcc5 	.word	0x0800fcc5
 800eeec:	0800fd3d 	.word	0x0800fd3d

0800eef0 <_lv_obj_style_apply_color_filter>:


lv_style_value_t _lv_obj_style_apply_color_filter(const lv_obj_t * obj, uint32_t part, lv_style_value_t v)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b086      	sub	sp, #24
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	60f8      	str	r0, [r7, #12]
 800eef8:	60b9      	str	r1, [r7, #8]
 800eefa:	607a      	str	r2, [r7, #4]
    if(obj == NULL) return v;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d101      	bne.n	800ef06 <_lv_obj_style_apply_color_filter+0x16>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	e01c      	b.n	800ef40 <_lv_obj_style_apply_color_filter+0x50>
    const lv_color_filter_dsc_t * f = lv_obj_get_style_color_filter_dsc(obj, part);
 800ef06:	68b9      	ldr	r1, [r7, #8]
 800ef08:	68f8      	ldr	r0, [r7, #12]
 800ef0a:	f7ff faea 	bl	800e4e2 <lv_obj_get_style_color_filter_dsc>
 800ef0e:	6178      	str	r0, [r7, #20]
    if(f && f->filter_cb) {
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d013      	beq.n	800ef3e <_lv_obj_style_apply_color_filter+0x4e>
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00f      	beq.n	800ef3e <_lv_obj_style_apply_color_filter+0x4e>
        lv_opa_t f_opa = lv_obj_get_style_color_filter_opa(obj, part);
 800ef1e:	68b9      	ldr	r1, [r7, #8]
 800ef20:	68f8      	ldr	r0, [r7, #12]
 800ef22:	f7ff faef 	bl	800e504 <lv_obj_get_style_color_filter_opa>
 800ef26:	4603      	mov	r3, r0
 800ef28:	74fb      	strb	r3, [r7, #19]
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 800ef2a:	7cfb      	ldrb	r3, [r7, #19]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d006      	beq.n	800ef3e <_lv_obj_style_apply_color_filter+0x4e>
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	7cfa      	ldrb	r2, [r7, #19]
 800ef36:	7939      	ldrb	r1, [r7, #4]
 800ef38:	6978      	ldr	r0, [r7, #20]
 800ef3a:	4798      	blx	r3
 800ef3c:	7138      	strb	r0, [r7, #4]
    }
    return v;
 800ef3e:	687b      	ldr	r3, [r7, #4]
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3718      	adds	r7, #24
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}

0800ef48 <_lv_obj_style_state_compare>:

_lv_style_state_cmp_t _lv_obj_style_state_compare(lv_obj_t * obj, lv_state_t state1, lv_state_t state2)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b088      	sub	sp, #32
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	460b      	mov	r3, r1
 800ef52:	807b      	strh	r3, [r7, #2]
 800ef54:	4613      	mov	r3, r2
 800ef56:	803b      	strh	r3, [r7, #0]
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	77fb      	strb	r3, [r7, #31]

    /*Are there any new styles for the new state?*/
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	61bb      	str	r3, [r7, #24]
 800ef60:	e1d9      	b.n	800f316 <_lv_obj_style_state_compare+0x3ce>
        if(obj->styles[i].is_trans) continue;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	68da      	ldr	r2, [r3, #12]
 800ef66:	69bb      	ldr	r3, [r7, #24]
 800ef68:	00db      	lsls	r3, r3, #3
 800ef6a:	4413      	add	r3, r2
 800ef6c:	79db      	ldrb	r3, [r3, #7]
 800ef6e:	f003 0302 	and.w	r3, r3, #2
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	f040 81ca 	bne.w	800f30e <_lv_obj_style_state_compare+0x3c6>

        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	68da      	ldr	r2, [r3, #12]
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	00db      	lsls	r3, r3, #3
 800ef82:	4413      	add	r3, r2
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f000 f9d2 	bl	800f334 <lv_obj_style_get_selector_state>
 800ef90:	4603      	mov	r3, r0
 800ef92:	82bb      	strh	r3, [r7, #20]
        /*The style is valid for a state but not the other*/
        bool valid1 = state_act & (~state1) ? false : true;
 800ef94:	8aba      	ldrh	r2, [r7, #20]
 800ef96:	887b      	ldrh	r3, [r7, #2]
 800ef98:	43db      	mvns	r3, r3
 800ef9a:	4013      	ands	r3, r2
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	bf0c      	ite	eq
 800efa0:	2301      	moveq	r3, #1
 800efa2:	2300      	movne	r3, #0
 800efa4:	74fb      	strb	r3, [r7, #19]
        bool valid2 = state_act & (~state2) ? false : true;
 800efa6:	8aba      	ldrh	r2, [r7, #20]
 800efa8:	883b      	ldrh	r3, [r7, #0]
 800efaa:	43db      	mvns	r3, r3
 800efac:	4013      	ands	r3, r2
 800efae:	2b00      	cmp	r3, #0
 800efb0:	bf0c      	ite	eq
 800efb2:	2301      	moveq	r3, #1
 800efb4:	2300      	movne	r3, #0
 800efb6:	74bb      	strb	r3, [r7, #18]
        if(valid1 != valid2) {
 800efb8:	7cfa      	ldrb	r2, [r7, #19]
 800efba:	7cbb      	ldrb	r3, [r7, #18]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	f000 81a7 	beq.w	800f310 <_lv_obj_style_state_compare+0x3c8>
            lv_style_t * style = obj->styles[i].style;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	68da      	ldr	r2, [r3, #12]
 800efc6:	69bb      	ldr	r3, [r7, #24]
 800efc8:	00db      	lsls	r3, r3, #3
 800efca:	4413      	add	r3, r2
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	60fb      	str	r3, [r7, #12]
            lv_style_value_t v;
            /*If there is layout difference on the main part, return immediately. There is no more serious difference*/
            bool layout_diff = false;
 800efd0:	2300      	movs	r3, #0
 800efd2:	75fb      	strb	r3, [r7, #23]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 800efd4:	f107 0308 	add.w	r3, r7, #8
 800efd8:	461a      	mov	r2, r3
 800efda:	2110      	movs	r1, #16
 800efdc:	68f8      	ldr	r0, [r7, #12]
 800efde:	f015 fee3 	bl	8024da8 <lv_style_get_prop>
 800efe2:	4603      	mov	r3, r0
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d002      	beq.n	800efee <_lv_obj_style_state_compare+0xa6>
 800efe8:	2301      	movs	r3, #1
 800efea:	75fb      	strb	r3, [r7, #23]
 800efec:	e0db      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 800efee:	f107 0308 	add.w	r3, r7, #8
 800eff2:	461a      	mov	r2, r3
 800eff4:	2111      	movs	r1, #17
 800eff6:	68f8      	ldr	r0, [r7, #12]
 800eff8:	f015 fed6 	bl	8024da8 <lv_style_get_prop>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d002      	beq.n	800f008 <_lv_obj_style_state_compare+0xc0>
 800f002:	2301      	movs	r3, #1
 800f004:	75fb      	strb	r3, [r7, #23]
 800f006:	e0ce      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 800f008:	f107 0308 	add.w	r3, r7, #8
 800f00c:	461a      	mov	r2, r3
 800f00e:	2112      	movs	r1, #18
 800f010:	68f8      	ldr	r0, [r7, #12]
 800f012:	f015 fec9 	bl	8024da8 <lv_style_get_prop>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d002      	beq.n	800f022 <_lv_obj_style_state_compare+0xda>
 800f01c:	2301      	movs	r3, #1
 800f01e:	75fb      	strb	r3, [r7, #23]
 800f020:	e0c1      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 800f022:	f107 0308 	add.w	r3, r7, #8
 800f026:	461a      	mov	r2, r3
 800f028:	2113      	movs	r1, #19
 800f02a:	68f8      	ldr	r0, [r7, #12]
 800f02c:	f015 febc 	bl	8024da8 <lv_style_get_prop>
 800f030:	4603      	mov	r3, r0
 800f032:	2b00      	cmp	r3, #0
 800f034:	d002      	beq.n	800f03c <_lv_obj_style_state_compare+0xf4>
 800f036:	2301      	movs	r3, #1
 800f038:	75fb      	strb	r3, [r7, #23]
 800f03a:	e0b4      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 800f03c:	f107 0308 	add.w	r3, r7, #8
 800f040:	461a      	mov	r2, r3
 800f042:	2115      	movs	r1, #21
 800f044:	68f8      	ldr	r0, [r7, #12]
 800f046:	f015 feaf 	bl	8024da8 <lv_style_get_prop>
 800f04a:	4603      	mov	r3, r0
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d002      	beq.n	800f056 <_lv_obj_style_state_compare+0x10e>
 800f050:	2301      	movs	r3, #1
 800f052:	75fb      	strb	r3, [r7, #23]
 800f054:	e0a7      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 800f056:	f107 0308 	add.w	r3, r7, #8
 800f05a:	461a      	mov	r2, r3
 800f05c:	2114      	movs	r1, #20
 800f05e:	68f8      	ldr	r0, [r7, #12]
 800f060:	f015 fea2 	bl	8024da8 <lv_style_get_prop>
 800f064:	4603      	mov	r3, r0
 800f066:	2b00      	cmp	r3, #0
 800f068:	d002      	beq.n	800f070 <_lv_obj_style_state_compare+0x128>
 800f06a:	2301      	movs	r3, #1
 800f06c:	75fb      	strb	r3, [r7, #23]
 800f06e:	e09a      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 800f070:	f107 0308 	add.w	r3, r7, #8
 800f074:	461a      	mov	r2, r3
 800f076:	210a      	movs	r1, #10
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f015 fe95 	bl	8024da8 <lv_style_get_prop>
 800f07e:	4603      	mov	r3, r0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d002      	beq.n	800f08a <_lv_obj_style_state_compare+0x142>
 800f084:	2301      	movs	r3, #1
 800f086:	75fb      	strb	r3, [r7, #23]
 800f088:	e08d      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 800f08a:	f107 0308 	add.w	r3, r7, #8
 800f08e:	461a      	mov	r2, r3
 800f090:	216a      	movs	r1, #106	; 0x6a
 800f092:	68f8      	ldr	r0, [r7, #12]
 800f094:	f015 fe88 	bl	8024da8 <lv_style_get_prop>
 800f098:	4603      	mov	r3, r0
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d002      	beq.n	800f0a4 <_lv_obj_style_state_compare+0x15c>
 800f09e:	2301      	movs	r3, #1
 800f0a0:	75fb      	strb	r3, [r7, #23]
 800f0a2:	e080      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 800f0a4:	f107 0308 	add.w	r3, r7, #8
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	216b      	movs	r1, #107	; 0x6b
 800f0ac:	68f8      	ldr	r0, [r7, #12]
 800f0ae:	f015 fe7b 	bl	8024da8 <lv_style_get_prop>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d002      	beq.n	800f0be <_lv_obj_style_state_compare+0x176>
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	75fb      	strb	r3, [r7, #23]
 800f0bc:	e073      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 800f0be:	f107 0308 	add.w	r3, r7, #8
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	2101      	movs	r1, #1
 800f0c6:	68f8      	ldr	r0, [r7, #12]
 800f0c8:	f015 fe6e 	bl	8024da8 <lv_style_get_prop>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d002      	beq.n	800f0d8 <_lv_obj_style_state_compare+0x190>
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	75fb      	strb	r3, [r7, #23]
 800f0d6:	e066      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 800f0d8:	f107 0308 	add.w	r3, r7, #8
 800f0dc:	461a      	mov	r2, r3
 800f0de:	2104      	movs	r1, #4
 800f0e0:	68f8      	ldr	r0, [r7, #12]
 800f0e2:	f015 fe61 	bl	8024da8 <lv_style_get_prop>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d002      	beq.n	800f0f2 <_lv_obj_style_state_compare+0x1aa>
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	75fb      	strb	r3, [r7, #23]
 800f0f0:	e059      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 800f0f2:	f107 0308 	add.w	r3, r7, #8
 800f0f6:	461a      	mov	r2, r3
 800f0f8:	2102      	movs	r1, #2
 800f0fa:	68f8      	ldr	r0, [r7, #12]
 800f0fc:	f015 fe54 	bl	8024da8 <lv_style_get_prop>
 800f100:	4603      	mov	r3, r0
 800f102:	2b00      	cmp	r3, #0
 800f104:	d002      	beq.n	800f10c <_lv_obj_style_state_compare+0x1c4>
 800f106:	2301      	movs	r3, #1
 800f108:	75fb      	strb	r3, [r7, #23]
 800f10a:	e04c      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 800f10c:	f107 0308 	add.w	r3, r7, #8
 800f110:	461a      	mov	r2, r3
 800f112:	2103      	movs	r1, #3
 800f114:	68f8      	ldr	r0, [r7, #12]
 800f116:	f015 fe47 	bl	8024da8 <lv_style_get_prop>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d002      	beq.n	800f126 <_lv_obj_style_state_compare+0x1de>
 800f120:	2301      	movs	r3, #1
 800f122:	75fb      	strb	r3, [r7, #23]
 800f124:	e03f      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 800f126:	f107 0308 	add.w	r3, r7, #8
 800f12a:	461a      	mov	r2, r3
 800f12c:	2105      	movs	r1, #5
 800f12e:	68f8      	ldr	r0, [r7, #12]
 800f130:	f015 fe3a 	bl	8024da8 <lv_style_get_prop>
 800f134:	4603      	mov	r3, r0
 800f136:	2b00      	cmp	r3, #0
 800f138:	d002      	beq.n	800f140 <_lv_obj_style_state_compare+0x1f8>
 800f13a:	2301      	movs	r3, #1
 800f13c:	75fb      	strb	r3, [r7, #23]
 800f13e:	e032      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 800f140:	f107 0308 	add.w	r3, r7, #8
 800f144:	461a      	mov	r2, r3
 800f146:	2106      	movs	r1, #6
 800f148:	68f8      	ldr	r0, [r7, #12]
 800f14a:	f015 fe2d 	bl	8024da8 <lv_style_get_prop>
 800f14e:	4603      	mov	r3, r0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d002      	beq.n	800f15a <_lv_obj_style_state_compare+0x212>
 800f154:	2301      	movs	r3, #1
 800f156:	75fb      	strb	r3, [r7, #23]
 800f158:	e025      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 800f15a:	f107 0308 	add.w	r3, r7, #8
 800f15e:	461a      	mov	r2, r3
 800f160:	2132      	movs	r1, #50	; 0x32
 800f162:	68f8      	ldr	r0, [r7, #12]
 800f164:	f015 fe20 	bl	8024da8 <lv_style_get_prop>
 800f168:	4603      	mov	r3, r0
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d002      	beq.n	800f174 <_lv_obj_style_state_compare+0x22c>
 800f16e:	2301      	movs	r3, #1
 800f170:	75fb      	strb	r3, [r7, #23]
 800f172:	e018      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
 800f174:	f107 0308 	add.w	r3, r7, #8
 800f178:	461a      	mov	r2, r3
 800f17a:	216d      	movs	r1, #109	; 0x6d
 800f17c:	68f8      	ldr	r0, [r7, #12]
 800f17e:	f015 fe13 	bl	8024da8 <lv_style_get_prop>
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d002      	beq.n	800f18e <_lv_obj_style_state_compare+0x246>
 800f188:	2301      	movs	r3, #1
 800f18a:	75fb      	strb	r3, [r7, #23]
 800f18c:	e00b      	b.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
 800f18e:	f107 0308 	add.w	r3, r7, #8
 800f192:	461a      	mov	r2, r3
 800f194:	216c      	movs	r1, #108	; 0x6c
 800f196:	68f8      	ldr	r0, [r7, #12]
 800f198:	f015 fe06 	bl	8024da8 <lv_style_get_prop>
 800f19c:	4603      	mov	r3, r0
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d001      	beq.n	800f1a6 <_lv_obj_style_state_compare+0x25e>
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	75fb      	strb	r3, [r7, #23]

            if(layout_diff) {
 800f1a6:	7dfb      	ldrb	r3, [r7, #23]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d001      	beq.n	800f1b0 <_lv_obj_style_state_compare+0x268>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 800f1ac:	2303      	movs	r3, #3
 800f1ae:	e0bd      	b.n	800f32c <_lv_obj_style_state_compare+0x3e4>
            }

            /*Check for draw pad changes*/
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800f1b0:	f107 0308 	add.w	r3, r7, #8
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	2168      	movs	r1, #104	; 0x68
 800f1b8:	68f8      	ldr	r0, [r7, #12]
 800f1ba:	f015 fdf5 	bl	8024da8 <lv_style_get_prop>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d002      	beq.n	800f1ca <_lv_obj_style_state_compare+0x282>
 800f1c4:	2302      	movs	r3, #2
 800f1c6:	77fb      	strb	r3, [r7, #31]
 800f1c8:	e0a2      	b.n	800f310 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800f1ca:	f107 0308 	add.w	r3, r7, #8
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	2169      	movs	r1, #105	; 0x69
 800f1d2:	68f8      	ldr	r0, [r7, #12]
 800f1d4:	f015 fde8 	bl	8024da8 <lv_style_get_prop>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d002      	beq.n	800f1e4 <_lv_obj_style_state_compare+0x29c>
 800f1de:	2302      	movs	r3, #2
 800f1e0:	77fb      	strb	r3, [r7, #31]
 800f1e2:	e095      	b.n	800f310 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800f1e4:	f107 0308 	add.w	r3, r7, #8
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	216d      	movs	r1, #109	; 0x6d
 800f1ec:	68f8      	ldr	r0, [r7, #12]
 800f1ee:	f015 fddb 	bl	8024da8 <lv_style_get_prop>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d002      	beq.n	800f1fe <_lv_obj_style_state_compare+0x2b6>
 800f1f8:	2302      	movs	r3, #2
 800f1fa:	77fb      	strb	r3, [r7, #31]
 800f1fc:	e088      	b.n	800f310 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800f1fe:	f107 0308 	add.w	r3, r7, #8
 800f202:	461a      	mov	r2, r3
 800f204:	216c      	movs	r1, #108	; 0x6c
 800f206:	68f8      	ldr	r0, [r7, #12]
 800f208:	f015 fdce 	bl	8024da8 <lv_style_get_prop>
 800f20c:	4603      	mov	r3, r0
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d002      	beq.n	800f218 <_lv_obj_style_state_compare+0x2d0>
 800f212:	2302      	movs	r3, #2
 800f214:	77fb      	strb	r3, [r7, #31]
 800f216:	e07b      	b.n	800f310 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800f218:	f107 0308 	add.w	r3, r7, #8
 800f21c:	461a      	mov	r2, r3
 800f21e:	2137      	movs	r1, #55	; 0x37
 800f220:	68f8      	ldr	r0, [r7, #12]
 800f222:	f015 fdc1 	bl	8024da8 <lv_style_get_prop>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d002      	beq.n	800f232 <_lv_obj_style_state_compare+0x2ea>
 800f22c:	2302      	movs	r3, #2
 800f22e:	77fb      	strb	r3, [r7, #31]
 800f230:	e06e      	b.n	800f310 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800f232:	f107 0308 	add.w	r3, r7, #8
 800f236:	461a      	mov	r2, r3
 800f238:	2138      	movs	r1, #56	; 0x38
 800f23a:	68f8      	ldr	r0, [r7, #12]
 800f23c:	f015 fdb4 	bl	8024da8 <lv_style_get_prop>
 800f240:	4603      	mov	r3, r0
 800f242:	2b00      	cmp	r3, #0
 800f244:	d002      	beq.n	800f24c <_lv_obj_style_state_compare+0x304>
 800f246:	2302      	movs	r3, #2
 800f248:	77fb      	strb	r3, [r7, #31]
 800f24a:	e061      	b.n	800f310 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800f24c:	f107 0308 	add.w	r3, r7, #8
 800f250:	461a      	mov	r2, r3
 800f252:	2135      	movs	r1, #53	; 0x35
 800f254:	68f8      	ldr	r0, [r7, #12]
 800f256:	f015 fda7 	bl	8024da8 <lv_style_get_prop>
 800f25a:	4603      	mov	r3, r0
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d002      	beq.n	800f266 <_lv_obj_style_state_compare+0x31e>
 800f260:	2302      	movs	r3, #2
 800f262:	77fb      	strb	r3, [r7, #31]
 800f264:	e054      	b.n	800f310 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800f266:	f107 0308 	add.w	r3, r7, #8
 800f26a:	461a      	mov	r2, r3
 800f26c:	2140      	movs	r1, #64	; 0x40
 800f26e:	68f8      	ldr	r0, [r7, #12]
 800f270:	f015 fd9a 	bl	8024da8 <lv_style_get_prop>
 800f274:	4603      	mov	r3, r0
 800f276:	2b00      	cmp	r3, #0
 800f278:	d002      	beq.n	800f280 <_lv_obj_style_state_compare+0x338>
 800f27a:	2302      	movs	r3, #2
 800f27c:	77fb      	strb	r3, [r7, #31]
 800f27e:	e047      	b.n	800f310 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800f280:	f107 0308 	add.w	r3, r7, #8
 800f284:	461a      	mov	r2, r3
 800f286:	2145      	movs	r1, #69	; 0x45
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	f015 fd8d 	bl	8024da8 <lv_style_get_prop>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d002      	beq.n	800f29a <_lv_obj_style_state_compare+0x352>
 800f294:	2302      	movs	r3, #2
 800f296:	77fb      	strb	r3, [r7, #31]
 800f298:	e03a      	b.n	800f310 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800f29a:	f107 0308 	add.w	r3, r7, #8
 800f29e:	461a      	mov	r2, r3
 800f2a0:	2141      	movs	r1, #65	; 0x41
 800f2a2:	68f8      	ldr	r0, [r7, #12]
 800f2a4:	f015 fd80 	bl	8024da8 <lv_style_get_prop>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d002      	beq.n	800f2b4 <_lv_obj_style_state_compare+0x36c>
 800f2ae:	2302      	movs	r3, #2
 800f2b0:	77fb      	strb	r3, [r7, #31]
 800f2b2:	e02d      	b.n	800f310 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800f2b4:	f107 0308 	add.w	r3, r7, #8
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	2142      	movs	r1, #66	; 0x42
 800f2bc:	68f8      	ldr	r0, [r7, #12]
 800f2be:	f015 fd73 	bl	8024da8 <lv_style_get_prop>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d002      	beq.n	800f2ce <_lv_obj_style_state_compare+0x386>
 800f2c8:	2302      	movs	r3, #2
 800f2ca:	77fb      	strb	r3, [r7, #31]
 800f2cc:	e020      	b.n	800f310 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800f2ce:	f107 0308 	add.w	r3, r7, #8
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	2143      	movs	r1, #67	; 0x43
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f015 fd66 	bl	8024da8 <lv_style_get_prop>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d002      	beq.n	800f2e8 <_lv_obj_style_state_compare+0x3a0>
 800f2e2:	2302      	movs	r3, #2
 800f2e4:	77fb      	strb	r3, [r7, #31]
 800f2e6:	e013      	b.n	800f310 <_lv_obj_style_state_compare+0x3c8>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800f2e8:	f107 0308 	add.w	r3, r7, #8
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	2149      	movs	r1, #73	; 0x49
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	f015 fd59 	bl	8024da8 <lv_style_get_prop>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d002      	beq.n	800f302 <_lv_obj_style_state_compare+0x3ba>
 800f2fc:	2302      	movs	r3, #2
 800f2fe:	77fb      	strb	r3, [r7, #31]
 800f300:	e006      	b.n	800f310 <_lv_obj_style_state_compare+0x3c8>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 800f302:	7ffb      	ldrb	r3, [r7, #31]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d103      	bne.n	800f310 <_lv_obj_style_state_compare+0x3c8>
 800f308:	2301      	movs	r3, #1
 800f30a:	77fb      	strb	r3, [r7, #31]
 800f30c:	e000      	b.n	800f310 <_lv_obj_style_state_compare+0x3c8>
        if(obj->styles[i].is_trans) continue;
 800f30e:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 800f310:	69bb      	ldr	r3, [r7, #24]
 800f312:	3301      	adds	r3, #1
 800f314:	61bb      	str	r3, [r7, #24]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f31a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800f31e:	b2db      	uxtb	r3, r3
 800f320:	461a      	mov	r2, r3
 800f322:	69bb      	ldr	r3, [r7, #24]
 800f324:	4293      	cmp	r3, r2
 800f326:	f4ff ae1c 	bcc.w	800ef62 <_lv_obj_style_state_compare+0x1a>
        }
    }

    return res;
 800f32a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3720      	adds	r7, #32
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <lv_obj_style_get_selector_state>:
    lv_anim_set_delay(&a, delay);
    lv_anim_start(&a);
}

lv_state_t lv_obj_style_get_selector_state(lv_style_selector_t selector)
{
 800f334:	b480      	push	{r7}
 800f336:	b083      	sub	sp, #12
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
    return selector & 0xFFFF;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	b29b      	uxth	r3, r3
}
 800f340:	4618      	mov	r0, r3
 800f342:	370c      	adds	r7, #12
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr

0800f34c <lv_obj_style_get_selector_part>:

lv_part_t lv_obj_style_get_selector_part(lv_style_selector_t selector)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b083      	sub	sp, #12
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
    return selector & 0xFF0000;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	370c      	adds	r7, #12
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr

0800f366 <lv_obj_calculate_style_text_align>:


lv_text_align_t lv_obj_calculate_style_text_align(const struct _lv_obj_t * obj, lv_part_t part, const char * txt)
{
 800f366:	b580      	push	{r7, lr}
 800f368:	b086      	sub	sp, #24
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	60f8      	str	r0, [r7, #12]
 800f36e:	60b9      	str	r1, [r7, #8]
 800f370:	607a      	str	r2, [r7, #4]
    lv_text_align_t align = lv_obj_get_style_text_align(obj, part);
 800f372:	68b9      	ldr	r1, [r7, #8]
 800f374:	68f8      	ldr	r0, [r7, #12]
 800f376:	f7ff f890 	bl	800e49a <lv_obj_get_style_text_align>
 800f37a:	4603      	mov	r3, r0
 800f37c:	75fb      	strb	r3, [r7, #23]
    lv_base_dir_t base_dir = lv_obj_get_style_base_dir(obj, part);
 800f37e:	68b9      	ldr	r1, [r7, #8]
 800f380:	68f8      	ldr	r0, [r7, #12]
 800f382:	f7ff f8e3 	bl	800e54c <lv_obj_get_style_base_dir>
 800f386:	4603      	mov	r3, r0
 800f388:	75bb      	strb	r3, [r7, #22]
    lv_bidi_calculate_align(&align, &base_dir, txt);
 800f38a:	f107 0116 	add.w	r1, r7, #22
 800f38e:	f107 0317 	add.w	r3, r7, #23
 800f392:	687a      	ldr	r2, [r7, #4]
 800f394:	4618      	mov	r0, r3
 800f396:	f7ff f80b 	bl	800e3b0 <lv_bidi_calculate_align>
    return align;
 800f39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3718      	adds	r7, #24
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <get_local_style>:
 * @param obj pointer to an object
 * @param selector OR-ed value of parts and state for which the style should be get
 * @return pointer to the local style
 */
static lv_style_t * get_local_style(lv_obj_t * obj, lv_style_selector_t selector)
{
 800f3a4:	b590      	push	{r4, r7, lr}
 800f3a6:	b085      	sub	sp, #20
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	60fb      	str	r3, [r7, #12]
 800f3b2:	e020      	b.n	800f3f6 <get_local_style+0x52>
        if(obj->styles[i].is_local &&
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	68da      	ldr	r2, [r3, #12]
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	00db      	lsls	r3, r3, #3
 800f3bc:	4413      	add	r3, r2
 800f3be:	79db      	ldrb	r3, [r3, #7]
 800f3c0:	f003 0301 	and.w	r3, r3, #1
 800f3c4:	b2db      	uxtb	r3, r3
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d012      	beq.n	800f3f0 <get_local_style+0x4c>
           obj->styles[i].selector == selector) {
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	68da      	ldr	r2, [r3, #12]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	00db      	lsls	r3, r3, #3
 800f3d2:	4413      	add	r3, r2
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800f3da:	461a      	mov	r2, r3
        if(obj->styles[i].is_local &&
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d106      	bne.n	800f3f0 <get_local_style+0x4c>
            return obj->styles[i].style;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	68da      	ldr	r2, [r3, #12]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	00db      	lsls	r3, r3, #3
 800f3ea:	4413      	add	r3, r2
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	e0a0      	b.n	800f532 <get_local_style+0x18e>
    for(i = 0; i < obj->style_cnt; i++) {
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	3301      	adds	r3, #1
 800f3f4:	60fb      	str	r3, [r7, #12]
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f3fa:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	461a      	mov	r2, r3
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	4293      	cmp	r3, r2
 800f406:	d3d5      	bcc.n	800f3b4 <get_local_style+0x10>
        }
    }

    obj->style_cnt++;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f40c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800f410:	b2db      	uxtb	r3, r3
 800f412:	3301      	adds	r3, #1
 800f414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f418:	b2d9      	uxtb	r1, r3
 800f41a:	687a      	ldr	r2, [r7, #4]
 800f41c:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800f41e:	f361 03c8 	bfi	r3, r1, #3, #6
 800f422:	8453      	strh	r3, [r2, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	68da      	ldr	r2, [r3, #12]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f42c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800f430:	b2db      	uxtb	r3, r3
 800f432:	00db      	lsls	r3, r3, #3
 800f434:	4619      	mov	r1, r3
 800f436:	4610      	mov	r0, r2
 800f438:	f014 fdba 	bl	8023fb0 <lv_mem_realloc>
 800f43c:	4602      	mov	r2, r0
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	60da      	str	r2, [r3, #12]
    LV_ASSERT_MALLOC(obj->styles);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	68db      	ldr	r3, [r3, #12]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d100      	bne.n	800f44c <get_local_style+0xa8>
 800f44a:	e7fe      	b.n	800f44a <get_local_style+0xa6>

    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f450:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800f454:	b2db      	uxtb	r3, r3
 800f456:	3b01      	subs	r3, #1
 800f458:	60fb      	str	r3, [r7, #12]
 800f45a:	e030      	b.n	800f4be <get_local_style+0x11a>
        /*Copy only normal styles (not local and transition).
         *The new local style will be added as the last local style*/
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	68da      	ldr	r2, [r3, #12]
 800f460:	68f9      	ldr	r1, [r7, #12]
 800f462:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f466:	440b      	add	r3, r1
 800f468:	00db      	lsls	r3, r3, #3
 800f46a:	4413      	add	r3, r2
 800f46c:	79db      	ldrb	r3, [r3, #7]
 800f46e:	f003 0301 	and.w	r3, r3, #1
 800f472:	b2db      	uxtb	r3, r3
 800f474:	2b00      	cmp	r3, #0
 800f476:	d125      	bne.n	800f4c4 <get_local_style+0x120>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	68da      	ldr	r2, [r3, #12]
 800f47c:	68f9      	ldr	r1, [r7, #12]
 800f47e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f482:	440b      	add	r3, r1
 800f484:	00db      	lsls	r3, r3, #3
 800f486:	4413      	add	r3, r2
 800f488:	79db      	ldrb	r3, [r3, #7]
 800f48a:	f003 0302 	and.w	r3, r3, #2
 800f48e:	b2db      	uxtb	r3, r3
 800f490:	2b00      	cmp	r3, #0
 800f492:	d117      	bne.n	800f4c4 <get_local_style+0x120>
        obj->styles[i] = obj->styles[i - 1];
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	68da      	ldr	r2, [r3, #12]
 800f498:	68f9      	ldr	r1, [r7, #12]
 800f49a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f49e:	440b      	add	r3, r1
 800f4a0:	00db      	lsls	r3, r3, #3
 800f4a2:	18d1      	adds	r1, r2, r3
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	68da      	ldr	r2, [r3, #12]
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	00db      	lsls	r3, r3, #3
 800f4ac:	4413      	add	r3, r2
 800f4ae:	460a      	mov	r2, r1
 800f4b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f4b4:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	3b01      	subs	r3, #1
 800f4bc:	60fb      	str	r3, [r7, #12]
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d1cb      	bne.n	800f45c <get_local_style+0xb8>
    }

    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	68da      	ldr	r2, [r3, #12]
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	00db      	lsls	r3, r3, #3
 800f4cc:	4413      	add	r3, r2
 800f4ce:	2108      	movs	r1, #8
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f015 f943 	bl	802475c <lv_memset_00>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	68da      	ldr	r2, [r3, #12]
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	00db      	lsls	r3, r3, #3
 800f4de:	18d4      	adds	r4, r2, r3
 800f4e0:	200c      	movs	r0, #12
 800f4e2:	f014 fd07 	bl	8023ef4 <lv_mem_alloc>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	6023      	str	r3, [r4, #0]
    lv_style_init(obj->styles[i].style);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	68da      	ldr	r2, [r3, #12]
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	00db      	lsls	r3, r3, #3
 800f4f2:	4413      	add	r3, r2
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f015 fb2e 	bl	8024b58 <lv_style_init>
    obj->styles[i].is_local = 1;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	68da      	ldr	r2, [r3, #12]
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	00db      	lsls	r3, r3, #3
 800f504:	441a      	add	r2, r3
 800f506:	79d3      	ldrb	r3, [r2, #7]
 800f508:	f043 0301 	orr.w	r3, r3, #1
 800f50c:	71d3      	strb	r3, [r2, #7]
    obj->styles[i].selector = selector;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	68da      	ldr	r2, [r3, #12]
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	00db      	lsls	r3, r3, #3
 800f516:	441a      	add	r2, r3
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800f51e:	6853      	ldr	r3, [r2, #4]
 800f520:	f361 0317 	bfi	r3, r1, #0, #24
 800f524:	6053      	str	r3, [r2, #4]
    return obj->styles[i].style;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	68da      	ldr	r2, [r3, #12]
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	00db      	lsls	r3, r3, #3
 800f52e:	4413      	add	r3, r2
 800f530:	681b      	ldr	r3, [r3, #0]
}
 800f532:	4618      	mov	r0, r3
 800f534:	3714      	adds	r7, #20
 800f536:	46bd      	mov	sp, r7
 800f538:	bd90      	pop	{r4, r7, pc}

0800f53a <get_trans_style>:
 * @param obj   pointer to an object
 * @param selector OR-ed value of parts and state for which the style should be get
 * @return pointer to the transition style
 */
static _lv_obj_style_t * get_trans_style(lv_obj_t * obj,  lv_style_selector_t selector)
{
 800f53a:	b590      	push	{r4, r7, lr}
 800f53c:	b085      	sub	sp, #20
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
 800f542:	6039      	str	r1, [r7, #0]
    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800f544:	2300      	movs	r3, #0
 800f546:	60fb      	str	r3, [r7, #12]
 800f548:	e019      	b.n	800f57e <get_trans_style+0x44>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	68da      	ldr	r2, [r3, #12]
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	00db      	lsls	r3, r3, #3
 800f552:	4413      	add	r3, r2
 800f554:	79db      	ldrb	r3, [r3, #7]
 800f556:	f003 0302 	and.w	r3, r3, #2
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d00b      	beq.n	800f578 <get_trans_style+0x3e>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	68da      	ldr	r2, [r3, #12]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	00db      	lsls	r3, r3, #3
 800f568:	4413      	add	r3, r2
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800f570:	461a      	mov	r2, r3
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	4293      	cmp	r3, r2
 800f576:	d00c      	beq.n	800f592 <get_trans_style+0x58>
    for(i = 0; i < obj->style_cnt; i++) {
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	3301      	adds	r3, #1
 800f57c:	60fb      	str	r3, [r7, #12]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f582:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800f586:	b2db      	uxtb	r3, r3
 800f588:	461a      	mov	r2, r3
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d3dc      	bcc.n	800f54a <get_trans_style+0x10>
 800f590:	e000      	b.n	800f594 <get_trans_style+0x5a>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800f592:	bf00      	nop
    }

    /*Already have a transition style for it*/
    if(i != obj->style_cnt) return &obj->styles[i];
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f598:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800f59c:	b2db      	uxtb	r3, r3
 800f59e:	461a      	mov	r2, r3
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d005      	beq.n	800f5b2 <get_trans_style+0x78>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	68da      	ldr	r2, [r3, #12]
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	00db      	lsls	r3, r3, #3
 800f5ae:	4413      	add	r3, r2
 800f5b0:	e060      	b.n	800f674 <get_trans_style+0x13a>

    obj->style_cnt++;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f5b6:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	3301      	adds	r3, #1
 800f5be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5c2:	b2d9      	uxtb	r1, r3
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800f5c8:	f361 03c8 	bfi	r3, r1, #3, #6
 800f5cc:	8453      	strh	r3, [r2, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	68da      	ldr	r2, [r3, #12]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f5d6:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	00db      	lsls	r3, r3, #3
 800f5de:	4619      	mov	r1, r3
 800f5e0:	4610      	mov	r0, r2
 800f5e2:	f014 fce5 	bl	8023fb0 <lv_mem_realloc>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	60da      	str	r2, [r3, #12]

    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f5f0:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800f5f4:	b2db      	uxtb	r3, r3
 800f5f6:	3b01      	subs	r3, #1
 800f5f8:	60fb      	str	r3, [r7, #12]
 800f5fa:	e014      	b.n	800f626 <get_trans_style+0xec>
        obj->styles[i] = obj->styles[i - 1];
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	68da      	ldr	r2, [r3, #12]
 800f600:	68f9      	ldr	r1, [r7, #12]
 800f602:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f606:	440b      	add	r3, r1
 800f608:	00db      	lsls	r3, r3, #3
 800f60a:	18d1      	adds	r1, r2, r3
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	68da      	ldr	r2, [r3, #12]
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	00db      	lsls	r3, r3, #3
 800f614:	4413      	add	r3, r2
 800f616:	460a      	mov	r2, r1
 800f618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f61c:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	3b01      	subs	r3, #1
 800f624:	60fb      	str	r3, [r7, #12]
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d1e7      	bne.n	800f5fc <get_trans_style+0xc2>
    }

    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	68db      	ldr	r3, [r3, #12]
 800f630:	2108      	movs	r1, #8
 800f632:	4618      	mov	r0, r3
 800f634:	f015 f892 	bl	802475c <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	68dc      	ldr	r4, [r3, #12]
 800f63c:	200c      	movs	r0, #12
 800f63e:	f014 fc59 	bl	8023ef4 <lv_mem_alloc>
 800f642:	4603      	mov	r3, r0
 800f644:	6023      	str	r3, [r4, #0]
    lv_style_init(obj->styles[0].style);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4618      	mov	r0, r3
 800f64e:	f015 fa83 	bl	8024b58 <lv_style_init>
    obj->styles[0].is_trans = 1;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	68da      	ldr	r2, [r3, #12]
 800f656:	79d3      	ldrb	r3, [r2, #7]
 800f658:	f043 0302 	orr.w	r3, r3, #2
 800f65c:	71d3      	strb	r3, [r2, #7]
    obj->styles[0].selector = selector;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	68da      	ldr	r2, [r3, #12]
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800f668:	6853      	ldr	r3, [r2, #4]
 800f66a:	f361 0317 	bfi	r3, r1, #0, #24
 800f66e:	6053      	str	r3, [r2, #4]
    return &obj->styles[0];
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	68db      	ldr	r3, [r3, #12]
}
 800f674:	4618      	mov	r0, r3
 800f676:	3714      	adds	r7, #20
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd90      	pop	{r4, r7, pc}

0800f67c <get_prop_core>:


static lv_style_res_t get_prop_core(const lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, lv_style_value_t * v)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b090      	sub	sp, #64	; 0x40
 800f680:	af00      	add	r7, sp, #0
 800f682:	60f8      	str	r0, [r7, #12]
 800f684:	60b9      	str	r1, [r7, #8]
 800f686:	603b      	str	r3, [r7, #0]
 800f688:	4613      	mov	r3, r2
 800f68a:	80fb      	strh	r3, [r7, #6]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 800f68c:	88fb      	ldrh	r3, [r7, #6]
 800f68e:	4618      	mov	r0, r3
 800f690:	f015 fcc4 	bl	802501c <_lv_style_get_prop_group>
 800f694:	4603      	mov	r3, r0
 800f696:	461a      	mov	r2, r3
 800f698:	2301      	movs	r3, #1
 800f69a:	4093      	lsls	r3, r2
 800f69c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t weight = -1;
 800f6a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    lv_state_t state = obj->state;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	8c1b      	ldrh	r3, [r3, #32]
 800f6aa:	86bb      	strh	r3, [r7, #52]	; 0x34
    lv_state_t state_inv = ~state;
 800f6ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f6ae:	43db      	mvns	r3, r3
 800f6b0:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_style_value_t value_tmp;
    bool skip_trans = obj->skip_trans;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800f6b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	bf14      	ite	ne
 800f6c2:	2301      	movne	r3, #1
 800f6c4:	2300      	moveq	r3, #0
 800f6c6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    uint32_t i;
    lv_style_res_t found;
    for(i = 0; i < obj->style_cnt; i++) {
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800f6ce:	e04b      	b.n	800f768 <get_prop_core+0xec>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	68da      	ldr	r2, [r3, #12]
 800f6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d6:	00db      	lsls	r3, r3, #3
 800f6d8:	4413      	add	r3, r2
 800f6da:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(obj_style->is_trans == false) break;
 800f6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6de:	79db      	ldrb	r3, [r3, #7]
 800f6e0:	f003 0302 	and.w	r3, r3, #2
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d048      	beq.n	800f77c <get_prop_core+0x100>
        if(skip_trans) continue;
 800f6ea:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d132      	bne.n	800f758 <get_prop_core+0xdc>

        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	68da      	ldr	r2, [r3, #12]
 800f6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f8:	00db      	lsls	r3, r3, #3
 800f6fa:	4413      	add	r3, r2
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800f702:	4618      	mov	r0, r3
 800f704:	f7ff fe22 	bl	800f34c <lv_obj_style_get_selector_part>
 800f708:	62b8      	str	r0, [r7, #40]	; 0x28

        if(part_act != part) continue;
 800f70a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d124      	bne.n	800f75c <get_prop_core+0xe0>
        if((obj_style->style->has_group & group) == 0) continue;
 800f712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	7a9a      	ldrb	r2, [r3, #10]
 800f718:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f71c:	4013      	ands	r3, r2
 800f71e:	b2db      	uxtb	r3, r3
 800f720:	2b00      	cmp	r3, #0
 800f722:	d01d      	beq.n	800f760 <get_prop_core+0xe4>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800f724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	f107 0214 	add.w	r2, r7, #20
 800f72c:	88f9      	ldrh	r1, [r7, #6]
 800f72e:	4618      	mov	r0, r3
 800f730:	f015 fb3a 	bl	8024da8 <lv_style_get_prop>
 800f734:	4603      	mov	r3, r0
 800f736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(found == LV_STYLE_RES_FOUND) {
 800f73a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f73e:	2b01      	cmp	r3, #1
 800f740:	d104      	bne.n	800f74c <get_prop_core+0xd0>
            *v = value_tmp;
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	697a      	ldr	r2, [r7, #20]
 800f746:	601a      	str	r2, [r3, #0]
            return LV_STYLE_RES_FOUND;
 800f748:	2301      	movs	r3, #1
 800f74a:	e097      	b.n	800f87c <get_prop_core+0x200>
        }
        else if(found == LV_STYLE_RES_INHERIT) {
 800f74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f750:	2b02      	cmp	r3, #2
 800f752:	d106      	bne.n	800f762 <get_prop_core+0xe6>
            return LV_STYLE_RES_INHERIT;
 800f754:	2302      	movs	r3, #2
 800f756:	e091      	b.n	800f87c <get_prop_core+0x200>
        if(skip_trans) continue;
 800f758:	bf00      	nop
 800f75a:	e002      	b.n	800f762 <get_prop_core+0xe6>
        if(part_act != part) continue;
 800f75c:	bf00      	nop
 800f75e:	e000      	b.n	800f762 <get_prop_core+0xe6>
        if((obj_style->style->has_group & group) == 0) continue;
 800f760:	bf00      	nop
    for(i = 0; i < obj->style_cnt; i++) {
 800f762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f764:	3301      	adds	r3, #1
 800f766:	63bb      	str	r3, [r7, #56]	; 0x38
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f76c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800f770:	b2db      	uxtb	r3, r3
 800f772:	461a      	mov	r2, r3
 800f774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f776:	4293      	cmp	r3, r2
 800f778:	d3aa      	bcc.n	800f6d0 <get_prop_core+0x54>
 800f77a:	e06d      	b.n	800f858 <get_prop_core+0x1dc>
        if(obj_style->is_trans == false) break;
 800f77c:	bf00      	nop
        }
    }

    for(; i < obj->style_cnt; i++) {
 800f77e:	e06b      	b.n	800f858 <get_prop_core+0x1dc>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	68da      	ldr	r2, [r3, #12]
 800f784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f786:	00db      	lsls	r3, r3, #3
 800f788:	4413      	add	r3, r2
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	7a9a      	ldrb	r2, [r3, #10]
 800f78e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f792:	4013      	ands	r3, r2
 800f794:	b2db      	uxtb	r3, r3
 800f796:	2b00      	cmp	r3, #0
 800f798:	d054      	beq.n	800f844 <get_prop_core+0x1c8>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	68da      	ldr	r2, [r3, #12]
 800f79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a0:	00db      	lsls	r3, r3, #3
 800f7a2:	4413      	add	r3, r2
 800f7a4:	623b      	str	r3, [r7, #32]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	68da      	ldr	r2, [r3, #12]
 800f7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ac:	00db      	lsls	r3, r3, #3
 800f7ae:	4413      	add	r3, r2
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7ff fdc8 	bl	800f34c <lv_obj_style_get_selector_part>
 800f7bc:	61f8      	str	r0, [r7, #28]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	68da      	ldr	r2, [r3, #12]
 800f7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c4:	00db      	lsls	r3, r3, #3
 800f7c6:	4413      	add	r3, r2
 800f7c8:	685b      	ldr	r3, [r3, #4]
 800f7ca:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7ff fdb0 	bl	800f334 <lv_obj_style_get_selector_state>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	837b      	strh	r3, [r7, #26]
        if(part_act != part) continue;
 800f7d8:	69fa      	ldr	r2, [r7, #28]
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d133      	bne.n	800f848 <get_prop_core+0x1cc>

        /*Be sure the style not specifies other state than the requested.
         *E.g. For HOVER+PRESS object state, HOVER style only is OK, but HOVER+FOCUS style is not*/
        if((state_act & state_inv)) continue;
 800f7e0:	8b7a      	ldrh	r2, [r7, #26]
 800f7e2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800f7e4:	4013      	ands	r3, r2
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d12f      	bne.n	800f84c <get_prop_core+0x1d0>

        /*Check only better candidates*/
        if(state_act <= weight) continue;
 800f7ec:	8b7b      	ldrh	r3, [r7, #26]
 800f7ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	da2d      	bge.n	800f850 <get_prop_core+0x1d4>

        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800f7f4:	6a3b      	ldr	r3, [r7, #32]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f107 0214 	add.w	r2, r7, #20
 800f7fc:	88f9      	ldrh	r1, [r7, #6]
 800f7fe:	4618      	mov	r0, r3
 800f800:	f015 fad2 	bl	8024da8 <lv_style_get_prop>
 800f804:	4603      	mov	r3, r0
 800f806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if(found == LV_STYLE_RES_FOUND) {
 800f80a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f80e:	2b01      	cmp	r3, #1
 800f810:	d112      	bne.n	800f838 <get_prop_core+0x1bc>
            if(state_act == state) {
 800f812:	8b7a      	ldrh	r2, [r7, #26]
 800f814:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f816:	429a      	cmp	r2, r3
 800f818:	d104      	bne.n	800f824 <get_prop_core+0x1a8>
                *v = value_tmp;
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	697a      	ldr	r2, [r7, #20]
 800f81e:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 800f820:	2301      	movs	r3, #1
 800f822:	e02b      	b.n	800f87c <get_prop_core+0x200>
            }
            if(weight < state_act) {
 800f824:	8b7b      	ldrh	r3, [r7, #26]
 800f826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f828:	429a      	cmp	r2, r3
 800f82a:	da12      	bge.n	800f852 <get_prop_core+0x1d6>
                weight = state_act;
 800f82c:	8b7b      	ldrh	r3, [r7, #26]
 800f82e:	63fb      	str	r3, [r7, #60]	; 0x3c
                *v = value_tmp;
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	697a      	ldr	r2, [r7, #20]
 800f834:	601a      	str	r2, [r3, #0]
 800f836:	e00c      	b.n	800f852 <get_prop_core+0x1d6>
            }
        }
        else if(found == LV_STYLE_RES_INHERIT) {
 800f838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f83c:	2b02      	cmp	r3, #2
 800f83e:	d108      	bne.n	800f852 <get_prop_core+0x1d6>
            return LV_STYLE_RES_INHERIT;
 800f840:	2302      	movs	r3, #2
 800f842:	e01b      	b.n	800f87c <get_prop_core+0x200>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 800f844:	bf00      	nop
 800f846:	e004      	b.n	800f852 <get_prop_core+0x1d6>
        if(part_act != part) continue;
 800f848:	bf00      	nop
 800f84a:	e002      	b.n	800f852 <get_prop_core+0x1d6>
        if((state_act & state_inv)) continue;
 800f84c:	bf00      	nop
 800f84e:	e000      	b.n	800f852 <get_prop_core+0x1d6>
        if(state_act <= weight) continue;
 800f850:	bf00      	nop
    for(; i < obj->style_cnt; i++) {
 800f852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f854:	3301      	adds	r3, #1
 800f856:	63bb      	str	r3, [r7, #56]	; 0x38
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f85c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800f860:	b2db      	uxtb	r3, r3
 800f862:	461a      	mov	r2, r3
 800f864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f866:	4293      	cmp	r3, r2
 800f868:	d38a      	bcc.n	800f780 <get_prop_core+0x104>
        }
    }

    if(weight >= 0) {
 800f86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	db04      	blt.n	800f87a <get_prop_core+0x1fe>
        *v = value_tmp;
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	697a      	ldr	r2, [r7, #20]
 800f874:	601a      	str	r2, [r3, #0]
        return LV_STYLE_RES_FOUND;
 800f876:	2301      	movs	r3, #1
 800f878:	e000      	b.n	800f87c <get_prop_core+0x200>
    }
    else return LV_STYLE_RES_NOT_FOUND;
 800f87a:	2300      	movs	r3, #0
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3740      	adds	r7, #64	; 0x40
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b086      	sub	sp, #24
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
    uint32_t i;
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f000 fc47 	bl	8010120 <lv_obj_get_child_cnt>
 800f892:	6138      	str	r0, [r7, #16]
    for(i = 0; i < child_cnt; i++) {
 800f894:	2300      	movs	r3, #0
 800f896:	617b      	str	r3, [r7, #20]
 800f898:	e018      	b.n	800f8cc <refresh_children_style+0x48>
        lv_obj_t * child = obj->spec_attr->children[i];
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	689b      	ldr	r3, [r3, #8]
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	009b      	lsls	r3, r3, #2
 800f8a4:	4413      	add	r3, r2
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	60fb      	str	r3, [r7, #12]
        lv_obj_invalidate(child);
 800f8aa:	68f8      	ldr	r0, [r7, #12]
 800f8ac:	f7fb ff8b 	bl	800b7c6 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	212a      	movs	r1, #42	; 0x2a
 800f8b4:	68f8      	ldr	r0, [r7, #12]
 800f8b6:	f7f7 f9b1 	bl	8006c1c <lv_event_send>
        lv_obj_invalidate(child);
 800f8ba:	68f8      	ldr	r0, [r7, #12]
 800f8bc:	f7fb ff83 	bl	800b7c6 <lv_obj_invalidate>

        refresh_children_style(child); /*Check children too*/
 800f8c0:	68f8      	ldr	r0, [r7, #12]
 800f8c2:	f7ff ffdf 	bl	800f884 <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	617b      	str	r3, [r7, #20]
 800f8cc:	697a      	ldr	r2, [r7, #20]
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d3e2      	bcc.n	800f89a <refresh_children_style+0x16>
    }
}
 800f8d4:	bf00      	nop
 800f8d6:	bf00      	nop
 800f8d8:	3718      	adds	r7, #24
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
	...

0800f8e0 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b088      	sub	sp, #32
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	60b9      	str	r1, [r7, #8]
 800f8ea:	603b      	str	r3, [r7, #0]
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	80fb      	strh	r3, [r7, #6]
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	76fb      	strb	r3, [r7, #27]
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800f8f4:	483a      	ldr	r0, [pc, #232]	; (800f9e0 <trans_del+0x100>)
 800f8f6:	f014 f94f 	bl	8023b98 <_lv_ll_get_tail>
 800f8fa:	61f8      	str	r0, [r7, #28]
    while(tr != NULL) {
 800f8fc:	e065      	b.n	800f9ca <trans_del+0xea>
        if(tr == tr_limit) break;
 800f8fe:	69fa      	ldr	r2, [r7, #28]
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	429a      	cmp	r2, r3
 800f904:	d065      	beq.n	800f9d2 <trans_del+0xf2>

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800f906:	69f9      	ldr	r1, [r7, #28]
 800f908:	4835      	ldr	r0, [pc, #212]	; (800f9e0 <trans_del+0x100>)
 800f90a:	f014 f96b 	bl	8023be4 <_lv_ll_get_prev>
 800f90e:	6138      	str	r0, [r7, #16]

        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	68fa      	ldr	r2, [r7, #12]
 800f916:	429a      	cmp	r2, r3
 800f918:	d155      	bne.n	800f9c6 <trans_del+0xe6>
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	689b      	ldr	r3, [r3, #8]
 800f91e:	68ba      	ldr	r2, [r7, #8]
 800f920:	429a      	cmp	r2, r3
 800f922:	d003      	beq.n	800f92c <trans_del+0x4c>
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800f92a:	d14c      	bne.n	800f9c6 <trans_del+0xe6>
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	889b      	ldrh	r3, [r3, #4]
 800f930:	88fa      	ldrh	r2, [r7, #6]
 800f932:	429a      	cmp	r2, r3
 800f934:	d004      	beq.n	800f940 <trans_del+0x60>
 800f936:	88fb      	ldrh	r3, [r7, #6]
 800f938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d142      	bne.n	800f9c6 <trans_del+0xe6>
            /*Remove any transitioned properties from the trans. style
             *to allow changing it by normal styles*/
            uint32_t i;
            for(i = 0; i < obj->style_cnt; i++) {
 800f940:	2300      	movs	r3, #0
 800f942:	617b      	str	r3, [r7, #20]
 800f944:	e029      	b.n	800f99a <trans_del+0xba>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	68da      	ldr	r2, [r3, #12]
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	00db      	lsls	r3, r3, #3
 800f94e:	4413      	add	r3, r2
 800f950:	79db      	ldrb	r3, [r3, #7]
 800f952:	f003 0302 	and.w	r3, r3, #2
 800f956:	b2db      	uxtb	r3, r3
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d01b      	beq.n	800f994 <trans_del+0xb4>
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800f962:	d00b      	beq.n	800f97c <trans_del+0x9c>
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	68da      	ldr	r2, [r3, #12]
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	00db      	lsls	r3, r3, #3
 800f96c:	4413      	add	r3, r2
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800f974:	461a      	mov	r2, r3
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	4293      	cmp	r3, r2
 800f97a:	d10b      	bne.n	800f994 <trans_del+0xb4>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	68da      	ldr	r2, [r3, #12]
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	00db      	lsls	r3, r3, #3
 800f984:	4413      	add	r3, r2
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	889b      	ldrh	r3, [r3, #4]
 800f98c:	4619      	mov	r1, r3
 800f98e:	4610      	mov	r0, r2
 800f990:	f015 f924 	bl	8024bdc <lv_style_remove_prop>
            for(i = 0; i < obj->style_cnt; i++) {
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	3301      	adds	r3, #1
 800f998:	617b      	str	r3, [r7, #20]
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f99e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800f9a2:	b2db      	uxtb	r3, r3
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d3cc      	bcc.n	800f946 <trans_del+0x66>
                }
            }

            /*Free the transition descriptor too*/
            lv_anim_del(tr, NULL);
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	69f8      	ldr	r0, [r7, #28]
 800f9b0:	f012 fc02 	bl	80221b8 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800f9b4:	69f9      	ldr	r1, [r7, #28]
 800f9b6:	480a      	ldr	r0, [pc, #40]	; (800f9e0 <trans_del+0x100>)
 800f9b8:	f014 f880 	bl	8023abc <_lv_ll_remove>
            lv_mem_free(tr);
 800f9bc:	69f8      	ldr	r0, [r7, #28]
 800f9be:	f014 fac9 	bl	8023f54 <lv_mem_free>
            removed = true;
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	76fb      	strb	r3, [r7, #27]

        }
        tr = tr_prev;
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	61fb      	str	r3, [r7, #28]
    while(tr != NULL) {
 800f9ca:	69fb      	ldr	r3, [r7, #28]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d196      	bne.n	800f8fe <trans_del+0x1e>
 800f9d0:	e000      	b.n	800f9d4 <trans_del+0xf4>
        if(tr == tr_limit) break;
 800f9d2:	bf00      	nop
    }
    return removed;
 800f9d4:	7efb      	ldrb	r3, [r7, #27]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3720      	adds	r7, #32
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	20000910 	.word	0x20000910

0800f9e4 <trans_anim_cb>:

static void trans_anim_cb(void * _tr, int32_t v)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b088      	sub	sp, #32
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	6039      	str	r1, [r7, #0]
    trans_t * tr = _tr;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	617b      	str	r3, [r7, #20]
    lv_obj_t * obj = tr->obj;
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	613b      	str	r3, [r7, #16]

    uint32_t i;
    for(i = 0; i < obj->style_cnt; i++) {
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	61fb      	str	r3, [r7, #28]
 800f9fc:	e152      	b.n	800fca4 <trans_anim_cb+0x2c0>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	68da      	ldr	r2, [r3, #12]
 800fa02:	69fb      	ldr	r3, [r7, #28]
 800fa04:	00db      	lsls	r3, r3, #3
 800fa06:	4413      	add	r3, r2
 800fa08:	79db      	ldrb	r3, [r3, #7]
 800fa0a:	f003 0302 	and.w	r3, r3, #2
 800fa0e:	b2db      	uxtb	r3, r3
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d00c      	beq.n	800fa2e <trans_anim_cb+0x4a>
 800fa14:	693b      	ldr	r3, [r7, #16]
 800fa16:	68da      	ldr	r2, [r3, #12]
 800fa18:	69fb      	ldr	r3, [r7, #28]
 800fa1a:	00db      	lsls	r3, r3, #3
 800fa1c:	4413      	add	r3, r2
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800fa24:	461a      	mov	r2, r3
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	689b      	ldr	r3, [r3, #8]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d003      	beq.n	800fa36 <trans_anim_cb+0x52>
    for(i = 0; i < obj->style_cnt; i++) {
 800fa2e:	69fb      	ldr	r3, [r7, #28]
 800fa30:	3301      	adds	r3, #1
 800fa32:	61fb      	str	r3, [r7, #28]
 800fa34:	e136      	b.n	800fca4 <trans_anim_cb+0x2c0>

        lv_style_value_t value_final;
        switch(tr->prop) {
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	889b      	ldrh	r3, [r3, #4]
 800fa3a:	3b20      	subs	r3, #32
 800fa3c:	2b47      	cmp	r3, #71	; 0x47
 800fa3e:	f200 80dc 	bhi.w	800fbfa <trans_anim_cb+0x216>
 800fa42:	a201      	add	r2, pc, #4	; (adr r2, 800fa48 <trans_anim_cb+0x64>)
 800fa44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa48:	0800fbcb 	.word	0x0800fbcb
 800fa4c:	0800fbfb 	.word	0x0800fbfb
 800fa50:	0800fbfb 	.word	0x0800fbfb
 800fa54:	0800fbfb 	.word	0x0800fbfb
 800fa58:	0800fbfb 	.word	0x0800fbfb
 800fa5c:	0800fbfb 	.word	0x0800fbfb
 800fa60:	0800fbfb 	.word	0x0800fbfb
 800fa64:	0800fbfb 	.word	0x0800fbfb
 800fa68:	0800fbfb 	.word	0x0800fbfb
 800fa6c:	0800fbfb 	.word	0x0800fbfb
 800fa70:	0800fbfb 	.word	0x0800fbfb
 800fa74:	0800fbfb 	.word	0x0800fbfb
 800fa78:	0800fbfb 	.word	0x0800fbfb
 800fa7c:	0800fbfb 	.word	0x0800fbfb
 800fa80:	0800fbfb 	.word	0x0800fbfb
 800fa84:	0800fbfb 	.word	0x0800fbfb
 800fa88:	0800fbcb 	.word	0x0800fbcb
 800fa8c:	0800fbfb 	.word	0x0800fbfb
 800fa90:	0800fbfb 	.word	0x0800fbfb
 800fa94:	0800fb69 	.word	0x0800fb69
 800fa98:	0800fb69 	.word	0x0800fb69
 800fa9c:	0800fbfb 	.word	0x0800fbfb
 800faa0:	0800fbcb 	.word	0x0800fbcb
 800faa4:	0800fbfb 	.word	0x0800fbfb
 800faa8:	0800fbfb 	.word	0x0800fbfb
 800faac:	0800fbfb 	.word	0x0800fbfb
 800fab0:	0800fbfb 	.word	0x0800fbfb
 800fab4:	0800fbfb 	.word	0x0800fbfb
 800fab8:	0800fbfb 	.word	0x0800fbfb
 800fabc:	0800fbfb 	.word	0x0800fbfb
 800fac0:	0800fbfb 	.word	0x0800fbfb
 800fac4:	0800fbfb 	.word	0x0800fbfb
 800fac8:	0800fbfb 	.word	0x0800fbfb
 800facc:	0800fbfb 	.word	0x0800fbfb
 800fad0:	0800fbfb 	.word	0x0800fbfb
 800fad4:	0800fbfb 	.word	0x0800fbfb
 800fad8:	0800fbcb 	.word	0x0800fbcb
 800fadc:	0800fbfb 	.word	0x0800fbfb
 800fae0:	0800fbfb 	.word	0x0800fbfb
 800fae4:	0800fbcb 	.word	0x0800fbcb
 800fae8:	0800fbfb 	.word	0x0800fbfb
 800faec:	0800fbfb 	.word	0x0800fbfb
 800faf0:	0800fbfb 	.word	0x0800fbfb
 800faf4:	0800fbfb 	.word	0x0800fbfb
 800faf8:	0800fbfb 	.word	0x0800fbfb
 800fafc:	0800fbfb 	.word	0x0800fbfb
 800fb00:	0800fbfb 	.word	0x0800fbfb
 800fb04:	0800fbfb 	.word	0x0800fbfb
 800fb08:	0800fbfb 	.word	0x0800fbfb
 800fb0c:	0800fbfb 	.word	0x0800fbfb
 800fb10:	0800fbfb 	.word	0x0800fbfb
 800fb14:	0800fbfb 	.word	0x0800fbfb
 800fb18:	0800fbfb 	.word	0x0800fbfb
 800fb1c:	0800fbcb 	.word	0x0800fbcb
 800fb20:	0800fbfb 	.word	0x0800fbfb
 800fb24:	0800fb7f 	.word	0x0800fb7f
 800fb28:	0800fbfb 	.word	0x0800fbfb
 800fb2c:	0800fbfb 	.word	0x0800fbfb
 800fb30:	0800fbfb 	.word	0x0800fbfb
 800fb34:	0800fbfb 	.word	0x0800fbfb
 800fb38:	0800fbfb 	.word	0x0800fbfb
 800fb3c:	0800fbfb 	.word	0x0800fbfb
 800fb40:	0800fbfb 	.word	0x0800fbfb
 800fb44:	0800fbfb 	.word	0x0800fbfb
 800fb48:	0800fbfb 	.word	0x0800fbfb
 800fb4c:	0800fb95 	.word	0x0800fb95
 800fb50:	0800fbfb 	.word	0x0800fbfb
 800fb54:	0800fbfb 	.word	0x0800fbfb
 800fb58:	0800fbfb 	.word	0x0800fbfb
 800fb5c:	0800fbfb 	.word	0x0800fbfb
 800fb60:	0800fb7f 	.word	0x0800fb7f
 800fb64:	0800fb69 	.word	0x0800fb69

            case LV_STYLE_BORDER_SIDE:
            case LV_STYLE_BORDER_POST:
            case LV_STYLE_BLEND_MODE:
                if(v < 255) value_final.num = tr->start_value.num;
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	2bfe      	cmp	r3, #254	; 0xfe
 800fb6c:	dc03      	bgt.n	800fb76 <trans_anim_cb+0x192>
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	68db      	ldr	r3, [r3, #12]
 800fb72:	60fb      	str	r3, [r7, #12]
                else value_final.num = tr->end_value.num;
                break;
 800fb74:	e05d      	b.n	800fc32 <trans_anim_cb+0x24e>
                else value_final.num = tr->end_value.num;
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	691b      	ldr	r3, [r3, #16]
 800fb7a:	60fb      	str	r3, [r7, #12]
                break;
 800fb7c:	e059      	b.n	800fc32 <trans_anim_cb+0x24e>
            case LV_STYLE_TRANSITION:
            case LV_STYLE_TEXT_FONT:
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	2bfe      	cmp	r3, #254	; 0xfe
 800fb82:	dc03      	bgt.n	800fb8c <trans_anim_cb+0x1a8>
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	68db      	ldr	r3, [r3, #12]
 800fb88:	60fb      	str	r3, [r7, #12]
                else value_final.ptr = tr->end_value.ptr;
                break;
 800fb8a:	e052      	b.n	800fc32 <trans_anim_cb+0x24e>
                else value_final.ptr = tr->end_value.ptr;
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	691b      	ldr	r3, [r3, #16]
 800fb90:	60fb      	str	r3, [r7, #12]
                break;
 800fb92:	e04e      	b.n	800fc32 <trans_anim_cb+0x24e>
            case LV_STYLE_COLOR_FILTER_DSC:
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	68db      	ldr	r3, [r3, #12]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d103      	bne.n	800fba4 <trans_anim_cb+0x1c0>
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	691b      	ldr	r3, [r3, #16]
 800fba0:	60fb      	str	r3, [r7, #12]
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
                else value_final.ptr = tr->end_value.ptr;
                break;
 800fba2:	e046      	b.n	800fc32 <trans_anim_cb+0x24e>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	691b      	ldr	r3, [r3, #16]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d103      	bne.n	800fbb4 <trans_anim_cb+0x1d0>
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	68db      	ldr	r3, [r3, #12]
 800fbb0:	60fb      	str	r3, [r7, #12]
                break;
 800fbb2:	e03e      	b.n	800fc32 <trans_anim_cb+0x24e>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	2b7f      	cmp	r3, #127	; 0x7f
 800fbb8:	dc03      	bgt.n	800fbc2 <trans_anim_cb+0x1de>
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	68db      	ldr	r3, [r3, #12]
 800fbbe:	60fb      	str	r3, [r7, #12]
                break;
 800fbc0:	e037      	b.n	800fc32 <trans_anim_cb+0x24e>
                else value_final.ptr = tr->end_value.ptr;
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	691b      	ldr	r3, [r3, #16]
 800fbc6:	60fb      	str	r3, [r7, #12]
                break;
 800fbc8:	e033      	b.n	800fc32 <trans_anim_cb+0x24e>
            case LV_STYLE_BORDER_COLOR:
            case LV_STYLE_TEXT_COLOR:
            case LV_STYLE_SHADOW_COLOR:
            case LV_STYLE_OUTLINE_COLOR:
            case LV_STYLE_IMG_RECOLOR:
                if(v <= 0) value_final.color = tr->start_value.color;
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	dc03      	bgt.n	800fbd8 <trans_anim_cb+0x1f4>
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	7b1b      	ldrb	r3, [r3, #12]
 800fbd4:	733b      	strb	r3, [r7, #12]
                else if(v >= 255) value_final.color = tr->end_value.color;
                else value_final.color = lv_color_mix(tr->end_value.color, tr->start_value.color, v);
                break;
 800fbd6:	e02c      	b.n	800fc32 <trans_anim_cb+0x24e>
                else if(v >= 255) value_final.color = tr->end_value.color;
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	2bfe      	cmp	r3, #254	; 0xfe
 800fbdc:	dd03      	ble.n	800fbe6 <trans_anim_cb+0x202>
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	7c1b      	ldrb	r3, [r3, #16]
 800fbe2:	733b      	strb	r3, [r7, #12]
                break;
 800fbe4:	e025      	b.n	800fc32 <trans_anim_cb+0x24e>
                else value_final.color = lv_color_mix(tr->end_value.color, tr->start_value.color, v);
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	b2da      	uxtb	r2, r3
 800fbea:	6979      	ldr	r1, [r7, #20]
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	7b09      	ldrb	r1, [r1, #12]
 800fbf0:	7c18      	ldrb	r0, [r3, #16]
 800fbf2:	f7fe fb3b 	bl	800e26c <lv_color_mix>
 800fbf6:	7338      	strb	r0, [r7, #12]
                break;
 800fbf8:	e01b      	b.n	800fc32 <trans_anim_cb+0x24e>

            default:
                if(v == 0) value_final.num = tr->start_value.num;
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d103      	bne.n	800fc08 <trans_anim_cb+0x224>
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	60fb      	str	r3, [r7, #12]
                else if(v == 255) value_final.num = tr->end_value.num;
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
                break;
 800fc06:	e013      	b.n	800fc30 <trans_anim_cb+0x24c>
                else if(v == 255) value_final.num = tr->end_value.num;
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	2bff      	cmp	r3, #255	; 0xff
 800fc0c:	d103      	bne.n	800fc16 <trans_anim_cb+0x232>
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	691b      	ldr	r3, [r3, #16]
 800fc12:	60fb      	str	r3, [r7, #12]
                break;
 800fc14:	e00c      	b.n	800fc30 <trans_anim_cb+0x24c>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	68da      	ldr	r2, [r3, #12]
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	6919      	ldr	r1, [r3, #16]
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	1acb      	subs	r3, r1, r3
 800fc24:	6839      	ldr	r1, [r7, #0]
 800fc26:	fb01 f303 	mul.w	r3, r1, r3
 800fc2a:	121b      	asrs	r3, r3, #8
 800fc2c:	4413      	add	r3, r2
 800fc2e:	60fb      	str	r3, [r7, #12]
                break;
 800fc30:	bf00      	nop
        }

        lv_style_value_t old_value;
        bool refr = true;
 800fc32:	2301      	movs	r3, #1
 800fc34:	76fb      	strb	r3, [r7, #27]
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	68da      	ldr	r2, [r3, #12]
 800fc3a:	69fb      	ldr	r3, [r7, #28]
 800fc3c:	00db      	lsls	r3, r3, #3
 800fc3e:	4413      	add	r3, r2
 800fc40:	6818      	ldr	r0, [r3, #0]
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	889b      	ldrh	r3, [r3, #4]
 800fc46:	f107 0208 	add.w	r2, r7, #8
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	f015 f8ac 	bl	8024da8 <lv_style_get_prop>
 800fc50:	4603      	mov	r3, r0
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d00d      	beq.n	800fc72 <trans_anim_cb+0x28e>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 800fc56:	68fa      	ldr	r2, [r7, #12]
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d109      	bne.n	800fc72 <trans_anim_cb+0x28e>
 800fc5e:	7b3a      	ldrb	r2, [r7, #12]
 800fc60:	7a3b      	ldrb	r3, [r7, #8]
 800fc62:	429a      	cmp	r2, r3
 800fc64:	d105      	bne.n	800fc72 <trans_anim_cb+0x28e>
               value_final.num == old_value.num) {
 800fc66:	68fa      	ldr	r2, [r7, #12]
 800fc68:	68bb      	ldr	r3, [r7, #8]
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d101      	bne.n	800fc72 <trans_anim_cb+0x28e>
                refr = false;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	76fb      	strb	r3, [r7, #27]
            }
        }
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 800fc72:	693b      	ldr	r3, [r7, #16]
 800fc74:	68da      	ldr	r2, [r3, #12]
 800fc76:	69fb      	ldr	r3, [r7, #28]
 800fc78:	00db      	lsls	r3, r3, #3
 800fc7a:	4413      	add	r3, r2
 800fc7c:	6818      	ldr	r0, [r3, #0]
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	889b      	ldrh	r3, [r3, #4]
 800fc82:	68fa      	ldr	r2, [r7, #12]
 800fc84:	4619      	mov	r1, r3
 800fc86:	f015 f87b 	bl	8024d80 <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 800fc8a:	7efb      	ldrb	r3, [r7, #27]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d014      	beq.n	800fcba <trans_anim_cb+0x2d6>
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	6818      	ldr	r0, [r3, #0]
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	6899      	ldr	r1, [r3, #8]
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	889b      	ldrh	r3, [r3, #4]
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	f7fe fe01 	bl	800e8a4 <lv_obj_refresh_style>
        break;

    }

}
 800fca2:	e00b      	b.n	800fcbc <trans_anim_cb+0x2d8>
    for(i = 0; i < obj->style_cnt; i++) {
 800fca4:	693b      	ldr	r3, [r7, #16]
 800fca6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800fca8:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	461a      	mov	r2, r3
 800fcb0:	69fb      	ldr	r3, [r7, #28]
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	f4ff aea3 	bcc.w	800f9fe <trans_anim_cb+0x1a>
}
 800fcb8:	e000      	b.n	800fcbc <trans_anim_cb+0x2d8>
        break;
 800fcba:	bf00      	nop
}
 800fcbc:	bf00      	nop
 800fcbe:	3720      	adds	r7, #32
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <trans_anim_start_cb>:

static void trans_anim_start_cb(lv_anim_t * a)
{
 800fcc4:	b590      	push	{r4, r7, lr}
 800fcc6:	b087      	sub	sp, #28
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
    trans_t * tr = a->var;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	617b      	str	r3, [r7, #20]

    lv_part_t part = lv_obj_style_get_selector_part(tr->selector);
 800fcd2:	697b      	ldr	r3, [r7, #20]
 800fcd4:	689b      	ldr	r3, [r3, #8]
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7ff fb38 	bl	800f34c <lv_obj_style_get_selector_part>
 800fcdc:	6138      	str	r0, [r7, #16]
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	6818      	ldr	r0, [r3, #0]
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	889b      	ldrh	r3, [r3, #4]
 800fce6:	697c      	ldr	r4, [r7, #20]
 800fce8:	461a      	mov	r2, r3
 800fcea:	6939      	ldr	r1, [r7, #16]
 800fcec:	f7fe feb4 	bl	800ea58 <lv_obj_get_style_prop>
 800fcf0:	60e0      	str	r0, [r4, #12]

    /*Init prop to an invalid values to be sure `trans_del` won't delete this added `tr`*/
    lv_style_prop_t prop_tmp = tr->prop;
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	889b      	ldrh	r3, [r3, #4]
 800fcf6:	81fb      	strh	r3, [r7, #14]
    tr->prop = LV_STYLE_PROP_INV;
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	809a      	strh	r2, [r3, #4]

    /*Delete the related transitions if any*/
    trans_del(tr->obj, part, prop_tmp, tr);
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	6818      	ldr	r0, [r3, #0]
 800fd02:	89fa      	ldrh	r2, [r7, #14]
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	6939      	ldr	r1, [r7, #16]
 800fd08:	f7ff fdea 	bl	800f8e0 <trans_del>

    tr->prop = prop_tmp;
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	89fa      	ldrh	r2, [r7, #14]
 800fd10:	809a      	strh	r2, [r3, #4]

    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 800fd12:	697b      	ldr	r3, [r7, #20]
 800fd14:	681a      	ldr	r2, [r3, #0]
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	689b      	ldr	r3, [r3, #8]
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	4610      	mov	r0, r2
 800fd1e:	f7ff fc0c 	bl	800f53a <get_trans_style>
 800fd22:	60b8      	str	r0, [r7, #8]
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	6818      	ldr	r0, [r3, #0]
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	8899      	ldrh	r1, [r3, #4]
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	68da      	ldr	r2, [r3, #12]
 800fd30:	f015 f826 	bl	8024d80 <lv_style_set_prop>

}
 800fd34:	bf00      	nop
 800fd36:	371c      	adds	r7, #28
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd90      	pop	{r4, r7, pc}

0800fd3c <trans_anim_ready_cb>:

static void trans_anim_ready_cb(lv_anim_t * a)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b08a      	sub	sp, #40	; 0x28
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
    trans_t * tr = a->var;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	61bb      	str	r3, [r7, #24]
    lv_obj_t * obj = tr->obj;
 800fd4a:	69bb      	ldr	r3, [r7, #24]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	617b      	str	r3, [r7, #20]
    lv_style_prop_t prop = tr->prop;
 800fd50:	69bb      	ldr	r3, [r7, #24]
 800fd52:	889b      	ldrh	r3, [r3, #4]
 800fd54:	827b      	strh	r3, [r7, #18]

    /*Remove the transitioned property from trans. style
     *if there no more transitions for this property
     *It allows changing it by normal styles*/
    bool running = false;
 800fd56:	2300      	movs	r3, #0
 800fd58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    trans_t * tr_i;
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800fd5c:	4842      	ldr	r0, [pc, #264]	; (800fe68 <trans_anim_ready_cb+0x12c>)
 800fd5e:	f013 ff0a 	bl	8023b76 <_lv_ll_get_head>
 800fd62:	6238      	str	r0, [r7, #32]
 800fd64:	e01e      	b.n	800fda4 <trans_anim_ready_cb+0x68>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 800fd66:	6a3a      	ldr	r2, [r7, #32]
 800fd68:	69bb      	ldr	r3, [r7, #24]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d015      	beq.n	800fd9a <trans_anim_ready_cb+0x5e>
 800fd6e:	6a3b      	ldr	r3, [r7, #32]
 800fd70:	681a      	ldr	r2, [r3, #0]
 800fd72:	69bb      	ldr	r3, [r7, #24]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d10f      	bne.n	800fd9a <trans_anim_ready_cb+0x5e>
 800fd7a:	6a3b      	ldr	r3, [r7, #32]
 800fd7c:	689a      	ldr	r2, [r3, #8]
 800fd7e:	69bb      	ldr	r3, [r7, #24]
 800fd80:	689b      	ldr	r3, [r3, #8]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d109      	bne.n	800fd9a <trans_anim_ready_cb+0x5e>
 800fd86:	6a3b      	ldr	r3, [r7, #32]
 800fd88:	889a      	ldrh	r2, [r3, #4]
 800fd8a:	69bb      	ldr	r3, [r7, #24]
 800fd8c:	889b      	ldrh	r3, [r3, #4]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d103      	bne.n	800fd9a <trans_anim_ready_cb+0x5e>
            running = true;
 800fd92:	2301      	movs	r3, #1
 800fd94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fd98:	e007      	b.n	800fdaa <trans_anim_ready_cb+0x6e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800fd9a:	6a39      	ldr	r1, [r7, #32]
 800fd9c:	4832      	ldr	r0, [pc, #200]	; (800fe68 <trans_anim_ready_cb+0x12c>)
 800fd9e:	f013 ff0c 	bl	8023bba <_lv_ll_get_next>
 800fda2:	6238      	str	r0, [r7, #32]
 800fda4:	6a3b      	ldr	r3, [r7, #32]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d1dd      	bne.n	800fd66 <trans_anim_ready_cb+0x2a>
        }
    }

    if(!running) {
 800fdaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdae:	f083 0301 	eor.w	r3, r3, #1
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d053      	beq.n	800fe60 <trans_anim_ready_cb+0x124>
        uint32_t i;
        for(i = 0; i < obj->style_cnt; i++) {
 800fdb8:	2300      	movs	r3, #0
 800fdba:	61fb      	str	r3, [r7, #28]
 800fdbc:	e045      	b.n	800fe4a <trans_anim_ready_cb+0x10e>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	68da      	ldr	r2, [r3, #12]
 800fdc2:	69fb      	ldr	r3, [r7, #28]
 800fdc4:	00db      	lsls	r3, r3, #3
 800fdc6:	4413      	add	r3, r2
 800fdc8:	79db      	ldrb	r3, [r3, #7]
 800fdca:	f003 0302 	and.w	r3, r3, #2
 800fdce:	b2db      	uxtb	r3, r3
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d037      	beq.n	800fe44 <trans_anim_ready_cb+0x108>
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	68da      	ldr	r2, [r3, #12]
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	00db      	lsls	r3, r3, #3
 800fddc:	4413      	add	r3, r2
 800fdde:	685b      	ldr	r3, [r3, #4]
 800fde0:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800fde4:	461a      	mov	r2, r3
 800fde6:	69bb      	ldr	r3, [r7, #24]
 800fde8:	689b      	ldr	r3, [r3, #8]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d12a      	bne.n	800fe44 <trans_anim_ready_cb+0x108>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800fdee:	69b9      	ldr	r1, [r7, #24]
 800fdf0:	481d      	ldr	r0, [pc, #116]	; (800fe68 <trans_anim_ready_cb+0x12c>)
 800fdf2:	f013 fe63 	bl	8023abc <_lv_ll_remove>
                lv_mem_free(tr);
 800fdf6:	69b8      	ldr	r0, [r7, #24]
 800fdf8:	f014 f8ac 	bl	8023f54 <lv_mem_free>

                _lv_obj_style_t * obj_style = &obj->styles[i];
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	68da      	ldr	r2, [r3, #12]
 800fe00:	69fb      	ldr	r3, [r7, #28]
 800fe02:	00db      	lsls	r3, r3, #3
 800fe04:	4413      	add	r3, r2
 800fe06:	60fb      	str	r3, [r7, #12]
                lv_style_remove_prop(obj_style->style, prop);
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	8a7a      	ldrh	r2, [r7, #18]
 800fe0e:	4611      	mov	r1, r2
 800fe10:	4618      	mov	r0, r3
 800fe12:	f014 fee3 	bl	8024bdc <lv_style_remove_prop>

                if(lv_style_is_empty(obj->styles[i].style)) {
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	68da      	ldr	r2, [r3, #12]
 800fe1a:	69fb      	ldr	r3, [r7, #28]
 800fe1c:	00db      	lsls	r3, r3, #3
 800fe1e:	4413      	add	r3, r2
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	4618      	mov	r0, r3
 800fe24:	f015 f8dc 	bl	8024fe0 <lv_style_is_empty>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d017      	beq.n	800fe5e <trans_anim_ready_cb+0x122>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	6819      	ldr	r1, [r3, #0]
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	6978      	ldr	r0, [r7, #20]
 800fe3e:	f7fe fc3b 	bl	800e6b8 <lv_obj_remove_style>

                }
                break;
 800fe42:	e00c      	b.n	800fe5e <trans_anim_ready_cb+0x122>
        for(i = 0; i < obj->style_cnt; i++) {
 800fe44:	69fb      	ldr	r3, [r7, #28]
 800fe46:	3301      	adds	r3, #1
 800fe48:	61fb      	str	r3, [r7, #28]
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800fe4e:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	461a      	mov	r2, r3
 800fe56:	69fb      	ldr	r3, [r7, #28]
 800fe58:	4293      	cmp	r3, r2
 800fe5a:	d3b0      	bcc.n	800fdbe <trans_anim_ready_cb+0x82>
            }
        }
    }
}
 800fe5c:	e000      	b.n	800fe60 <trans_anim_ready_cb+0x124>
                break;
 800fe5e:	bf00      	nop
}
 800fe60:	bf00      	nop
 800fe62:	3728      	adds	r7, #40	; 0x28
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	20000910 	.word	0x20000910

0800fe6c <calculate_layer_type>:

static lv_layer_type_t calculate_layer_type(lv_obj_t * obj)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800fe74:	2100      	movs	r1, #0
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f7fe fafd 	bl	800e476 <lv_obj_get_style_transform_angle>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d001      	beq.n	800fe86 <calculate_layer_type+0x1a>
 800fe82:	2302      	movs	r3, #2
 800fe84:	e01c      	b.n	800fec0 <calculate_layer_type+0x54>
    if(lv_obj_get_style_transform_zoom(obj, 0) != 256) return LV_LAYER_TYPE_TRANSFORM;
 800fe86:	2100      	movs	r1, #0
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f7fe fae2 	bl	800e452 <lv_obj_get_style_transform_zoom>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe94:	d001      	beq.n	800fe9a <calculate_layer_type+0x2e>
 800fe96:	2302      	movs	r3, #2
 800fe98:	e012      	b.n	800fec0 <calculate_layer_type+0x54>
    if(lv_obj_get_style_opa(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 800fe9a:	2100      	movs	r1, #0
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f7fe fb0e 	bl	800e4be <lv_obj_get_style_opa>
 800fea2:	4603      	mov	r3, r0
 800fea4:	2bff      	cmp	r3, #255	; 0xff
 800fea6:	d001      	beq.n	800feac <calculate_layer_type+0x40>
 800fea8:	2301      	movs	r3, #1
 800feaa:	e009      	b.n	800fec0 <calculate_layer_type+0x54>

#if LV_DRAW_COMPLEX
    if(lv_obj_get_style_blend_mode(obj, 0) != LV_BLEND_MODE_NORMAL) return LV_LAYER_TYPE_SIMPLE;
 800feac:	2100      	movs	r1, #0
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f7fe fb3a 	bl	800e528 <lv_obj_get_style_blend_mode>
 800feb4:	4603      	mov	r3, r0
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d001      	beq.n	800febe <calculate_layer_type+0x52>
 800feba:	2301      	movs	r3, #1
 800febc:	e000      	b.n	800fec0 <calculate_layer_type+0x54>
#endif
    return LV_LAYER_TYPE_NONE;
 800febe:	2300      	movs	r3, #0
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <lv_obj_set_style_x>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_HEIGHT, v, selector);
}

void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b086      	sub	sp, #24
 800fecc:	af00      	add	r7, sp, #0
 800fece:	60f8      	str	r0, [r7, #12]
 800fed0:	460b      	mov	r3, r1
 800fed2:	607a      	str	r2, [r7, #4]
 800fed4:	817b      	strh	r3, [r7, #10]
    lv_style_value_t v = {
        .num = (int32_t)value
 800fed6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
    lv_style_value_t v = {
 800feda:	617b      	str	r3, [r7, #20]
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	697a      	ldr	r2, [r7, #20]
 800fee0:	2107      	movs	r1, #7
 800fee2:	68f8      	ldr	r0, [r7, #12]
 800fee4:	f7fe fe32 	bl	800eb4c <lv_obj_set_local_style_prop>
}
 800fee8:	bf00      	nop
 800feea:	3718      	adds	r7, #24
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}

0800fef0 <lv_obj_set_style_y>:

void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b086      	sub	sp, #24
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	60f8      	str	r0, [r7, #12]
 800fef8:	460b      	mov	r3, r1
 800fefa:	607a      	str	r2, [r7, #4]
 800fefc:	817b      	strh	r3, [r7, #10]
    lv_style_value_t v = {
        .num = (int32_t)value
 800fefe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
    lv_style_value_t v = {
 800ff02:	617b      	str	r3, [r7, #20]
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	697a      	ldr	r2, [r7, #20]
 800ff08:	2108      	movs	r1, #8
 800ff0a:	68f8      	ldr	r0, [r7, #12]
 800ff0c:	f7fe fe1e 	bl	800eb4c <lv_obj_set_local_style_prop>
}
 800ff10:	bf00      	nop
 800ff12:	3718      	adds	r7, #24
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}

0800ff18 <lv_obj_set_style_align>:

void lv_obj_set_style_align(struct _lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b086      	sub	sp, #24
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	60f8      	str	r0, [r7, #12]
 800ff20:	460b      	mov	r3, r1
 800ff22:	607a      	str	r2, [r7, #4]
 800ff24:	72fb      	strb	r3, [r7, #11]
    lv_style_value_t v = {
        .num = (int32_t)value
 800ff26:	7afb      	ldrb	r3, [r7, #11]
    lv_style_value_t v = {
 800ff28:	617b      	str	r3, [r7, #20]
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	697a      	ldr	r2, [r7, #20]
 800ff2e:	2109      	movs	r1, #9
 800ff30:	68f8      	ldr	r0, [r7, #12]
 800ff32:	f7fe fe0b 	bl	800eb4c <lv_obj_set_local_style_prop>
}
 800ff36:	bf00      	nop
 800ff38:	3718      	adds	r7, #24
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}

0800ff3e <lv_obj_set_style_opa>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_CLIP_CORNER, v, selector);
}

void lv_obj_set_style_opa(struct _lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
{
 800ff3e:	b580      	push	{r7, lr}
 800ff40:	b086      	sub	sp, #24
 800ff42:	af00      	add	r7, sp, #0
 800ff44:	60f8      	str	r0, [r7, #12]
 800ff46:	460b      	mov	r3, r1
 800ff48:	607a      	str	r2, [r7, #4]
 800ff4a:	72fb      	strb	r3, [r7, #11]
    lv_style_value_t v = {
        .num = (int32_t)value
 800ff4c:	7afb      	ldrb	r3, [r7, #11]
    lv_style_value_t v = {
 800ff4e:	617b      	str	r3, [r7, #20]
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_OPA, v, selector);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	697a      	ldr	r2, [r7, #20]
 800ff54:	2160      	movs	r1, #96	; 0x60
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	f7fe fdf8 	bl	800eb4c <lv_obj_set_local_style_prop>
}
 800ff5c:	bf00      	nop
 800ff5e:	3718      	adds	r7, #24
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <lv_obj_del>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_del(lv_obj_t * obj)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b086      	sub	sp, #24
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("begin (delete %p)", (void *)obj);
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_obj_invalidate(obj);
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f7fb fc2a 	bl	800b7c6 <lv_obj_invalidate>

    lv_obj_t * par = lv_obj_get_parent(obj);
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f000 f890 	bl	8010098 <lv_obj_get_parent>
 800ff78:	60f8      	str	r0, [r7, #12]
    if(par) {
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d002      	beq.n	800ff86 <lv_obj_del+0x22>
        lv_obj_scrollbar_invalidate(par);
 800ff80:	68f8      	ldr	r0, [r7, #12]
 800ff82:	f7fd fdbd 	bl	800db00 <lv_obj_scrollbar_invalidate>
    }

    lv_disp_t * disp = NULL;
 800ff86:	2300      	movs	r3, #0
 800ff88:	617b      	str	r3, [r7, #20]
    bool act_scr_del = false;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	74fb      	strb	r3, [r7, #19]
    if(par == NULL) {
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d10d      	bne.n	800ffb0 <lv_obj_del+0x4c>
        disp = lv_obj_get_disp(obj);
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f000 f845 	bl	8010024 <lv_obj_get_disp>
 800ff9a:	6178      	str	r0, [r7, #20]
        if(!disp) return;   /*Shouldn't happen*/
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d027      	beq.n	800fff2 <lv_obj_del+0x8e>
        if(disp->act_scr == obj) act_scr_del = true;
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	691b      	ldr	r3, [r3, #16]
 800ffa6:	687a      	ldr	r2, [r7, #4]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d101      	bne.n	800ffb0 <lv_obj_del+0x4c>
 800ffac:	2301      	movs	r3, #1
 800ffae:	74fb      	strb	r3, [r7, #19]
    }

    obj_del_core(obj);
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f000 f8f5 	bl	80101a0 <obj_del_core>

    /*Call the ancestor's event handler to the parent to notify it about the child delete*/
    if(par) {
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d013      	beq.n	800ffe4 <lv_obj_del+0x80>
        lv_obj_update_layout(par);
 800ffbc:	68f8      	ldr	r0, [r7, #12]
 800ffbe:	f7fa fddd 	bl	800ab7c <lv_obj_update_layout>
        lv_obj_readjust_scroll(par, LV_ANIM_OFF);
 800ffc2:	2100      	movs	r1, #0
 800ffc4:	68f8      	ldr	r0, [r7, #12]
 800ffc6:	f7fd fdd8 	bl	800db7a <lv_obj_readjust_scroll>
        lv_obj_scrollbar_invalidate(par);
 800ffca:	68f8      	ldr	r0, [r7, #12]
 800ffcc:	f7fd fd98 	bl	800db00 <lv_obj_scrollbar_invalidate>
        lv_event_send(par, LV_EVENT_CHILD_CHANGED, NULL);
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	2122      	movs	r1, #34	; 0x22
 800ffd4:	68f8      	ldr	r0, [r7, #12]
 800ffd6:	f7f6 fe21 	bl	8006c1c <lv_event_send>
        lv_event_send(par, LV_EVENT_CHILD_DELETED, NULL);
 800ffda:	2200      	movs	r2, #0
 800ffdc:	2124      	movs	r1, #36	; 0x24
 800ffde:	68f8      	ldr	r0, [r7, #12]
 800ffe0:	f7f6 fe1c 	bl	8006c1c <lv_event_send>
    }

    /*Handle if the active screen was deleted*/
    if(act_scr_del) {
 800ffe4:	7cfb      	ldrb	r3, [r7, #19]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d004      	beq.n	800fff4 <lv_obj_del+0x90>
        LV_LOG_WARN("the active screen was deleted");
        disp->act_scr = NULL;
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	2200      	movs	r2, #0
 800ffee:	611a      	str	r2, [r3, #16]
 800fff0:	e000      	b.n	800fff4 <lv_obj_del+0x90>
        if(!disp) return;   /*Shouldn't happen*/
 800fff2:	bf00      	nop
    }

    LV_ASSERT_MEM_INTEGRITY();
    LV_LOG_TRACE("finished (delete %p)", (void *)obj);
}
 800fff4:	3718      	adds	r7, #24
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}

0800fffa <lv_obj_get_screen>:
    }
    lv_group_swap_obj(obj1, obj2);
}

lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
 800fffa:	b580      	push	{r7, lr}
 800fffc:	b084      	sub	sp, #16
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * par = obj;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	60fb      	str	r3, [r7, #12]
    const lv_obj_t * act_par;

    do {
        act_par = par;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	60bb      	str	r3, [r7, #8]
        par = lv_obj_get_parent(act_par);
 801000a:	68b8      	ldr	r0, [r7, #8]
 801000c:	f000 f844 	bl	8010098 <lv_obj_get_parent>
 8010010:	60f8      	str	r0, [r7, #12]
    } while(par != NULL);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d1f6      	bne.n	8010006 <lv_obj_get_screen+0xc>

    return (lv_obj_t *)act_par;
 8010018:	68bb      	ldr	r3, [r7, #8]
}
 801001a:	4618      	mov	r0, r3
 801001c:	3710      	adds	r7, #16
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
	...

08010024 <lv_obj_get_disp>:

lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b086      	sub	sp, #24
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * scr;

    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d102      	bne.n	801003a <lv_obj_get_disp+0x16>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	617b      	str	r3, [r7, #20]
 8010038:	e003      	b.n	8010042 <lv_obj_get_disp+0x1e>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f7ff ffdd 	bl	800fffa <lv_obj_get_screen>
 8010040:	6178      	str	r0, [r7, #20]

    lv_disp_t * d;
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 8010042:	4814      	ldr	r0, [pc, #80]	; (8010094 <lv_obj_get_disp+0x70>)
 8010044:	f013 fd97 	bl	8023b76 <_lv_ll_get_head>
 8010048:	6138      	str	r0, [r7, #16]
 801004a:	e01a      	b.n	8010082 <lv_obj_get_disp+0x5e>
        uint32_t i;
        for(i = 0; i < d->screen_cnt; i++) {
 801004c:	2300      	movs	r3, #0
 801004e:	60fb      	str	r3, [r7, #12]
 8010050:	e00d      	b.n	801006e <lv_obj_get_disp+0x4a>
            if(d->screens[i] == scr) return d;
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	68da      	ldr	r2, [r3, #12]
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	4413      	add	r3, r2
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	697a      	ldr	r2, [r7, #20]
 8010060:	429a      	cmp	r2, r3
 8010062:	d101      	bne.n	8010068 <lv_obj_get_disp+0x44>
 8010064:	693b      	ldr	r3, [r7, #16]
 8010066:	e010      	b.n	801008a <lv_obj_get_disp+0x66>
        for(i = 0; i < d->screen_cnt; i++) {
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	3301      	adds	r3, #1
 801006c:	60fb      	str	r3, [r7, #12]
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010072:	68fa      	ldr	r2, [r7, #12]
 8010074:	429a      	cmp	r2, r3
 8010076:	d3ec      	bcc.n	8010052 <lv_obj_get_disp+0x2e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 8010078:	6939      	ldr	r1, [r7, #16]
 801007a:	4806      	ldr	r0, [pc, #24]	; (8010094 <lv_obj_get_disp+0x70>)
 801007c:	f013 fd9d 	bl	8023bba <_lv_ll_get_next>
 8010080:	6138      	str	r0, [r7, #16]
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d1e1      	bne.n	801004c <lv_obj_get_disp+0x28>
        }
    }

    LV_LOG_WARN("No screen found");
    return NULL;
 8010088:	2300      	movs	r3, #0
}
 801008a:	4618      	mov	r0, r3
 801008c:	3718      	adds	r7, #24
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}
 8010092:	bf00      	nop
 8010094:	200008c8 	.word	0x200008c8

08010098 <lv_obj_get_parent>:

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
 8010098:	b480      	push	{r7}
 801009a:	b083      	sub	sp, #12
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return NULL;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d101      	bne.n	80100aa <lv_obj_get_parent+0x12>
 80100a6:	2300      	movs	r3, #0
 80100a8:	e001      	b.n	80100ae <lv_obj_get_parent+0x16>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	685b      	ldr	r3, [r3, #4]
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	370c      	adds	r7, #12
 80100b2:	46bd      	mov	sp, r7
 80100b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b8:	4770      	bx	lr

080100ba <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
 80100ba:	b480      	push	{r7}
 80100bc:	b085      	sub	sp, #20
 80100be:	af00      	add	r7, sp, #0
 80100c0:	6078      	str	r0, [r7, #4]
 80100c2:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	689b      	ldr	r3, [r3, #8]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d101      	bne.n	80100d0 <lv_obj_get_child+0x16>
 80100cc:	2300      	movs	r3, #0
 80100ce:	e021      	b.n	8010114 <lv_obj_get_child+0x5a>

    uint32_t idu;
    if(id < 0) {
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	da0d      	bge.n	80100f2 <lv_obj_get_child+0x38>
        id = obj->spec_attr->child_cnt + id;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	689b      	ldr	r3, [r3, #8]
 80100da:	685a      	ldr	r2, [r3, #4]
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	4413      	add	r3, r2
 80100e0:	603b      	str	r3, [r7, #0]
        if(id < 0) return NULL;
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	da01      	bge.n	80100ec <lv_obj_get_child+0x32>
 80100e8:	2300      	movs	r3, #0
 80100ea:	e013      	b.n	8010114 <lv_obj_get_child+0x5a>
        idu = (uint32_t) id;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	60fb      	str	r3, [r7, #12]
 80100f0:	e001      	b.n	80100f6 <lv_obj_get_child+0x3c>
    }
    else {
        idu = id;
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	60fb      	str	r3, [r7, #12]
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	689b      	ldr	r3, [r3, #8]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	68fa      	ldr	r2, [r7, #12]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d301      	bcc.n	8010106 <lv_obj_get_child+0x4c>
 8010102:	2300      	movs	r3, #0
 8010104:	e006      	b.n	8010114 <lv_obj_get_child+0x5a>
    else return obj->spec_attr->children[id];
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	689b      	ldr	r3, [r3, #8]
 801010a:	681a      	ldr	r2, [r3, #0]
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	009b      	lsls	r3, r3, #2
 8010110:	4413      	add	r3, r2
 8010112:	681b      	ldr	r3, [r3, #0]
}
 8010114:	4618      	mov	r0, r3
 8010116:	3714      	adds	r7, #20
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr

08010120 <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
 8010120:	b480      	push	{r7}
 8010122:	b083      	sub	sp, #12
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	689b      	ldr	r3, [r3, #8]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d101      	bne.n	8010134 <lv_obj_get_child_cnt+0x14>
 8010130:	2300      	movs	r3, #0
 8010132:	e002      	b.n	801013a <lv_obj_get_child_cnt+0x1a>
    return obj->spec_attr->child_cnt;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	689b      	ldr	r3, [r3, #8]
 8010138:	685b      	ldr	r3, [r3, #4]
}
 801013a:	4618      	mov	r0, r3
 801013c:	370c      	adds	r7, #12
 801013e:	46bd      	mov	sp, r7
 8010140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010144:	4770      	bx	lr

08010146 <lv_obj_get_index>:

uint32_t lv_obj_get_index(const lv_obj_t * obj)
{
 8010146:	b580      	push	{r7, lr}
 8010148:	b084      	sub	sp, #16
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_t * parent = lv_obj_get_parent(obj);
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f7ff ffa2 	bl	8010098 <lv_obj_get_parent>
 8010154:	60b8      	str	r0, [r7, #8]
    if(parent == NULL) return 0;
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d101      	bne.n	8010160 <lv_obj_get_index+0x1a>
 801015c:	2300      	movs	r3, #0
 801015e:	e01b      	b.n	8010198 <lv_obj_get_index+0x52>

    uint32_t i = 0;
 8010160:	2300      	movs	r3, #0
 8010162:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 8010164:	2300      	movs	r3, #0
 8010166:	60fb      	str	r3, [r7, #12]
 8010168:	e00d      	b.n	8010186 <lv_obj_get_index+0x40>
        if(lv_obj_get_child(parent, i) == obj) return i;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	4619      	mov	r1, r3
 801016e:	68b8      	ldr	r0, [r7, #8]
 8010170:	f7ff ffa3 	bl	80100ba <lv_obj_get_child>
 8010174:	4602      	mov	r2, r0
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	4293      	cmp	r3, r2
 801017a:	d101      	bne.n	8010180 <lv_obj_get_index+0x3a>
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	e00b      	b.n	8010198 <lv_obj_get_index+0x52>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	3301      	adds	r3, #1
 8010184:	60fb      	str	r3, [r7, #12]
 8010186:	68b8      	ldr	r0, [r7, #8]
 8010188:	f7ff ffca 	bl	8010120 <lv_obj_get_child_cnt>
 801018c:	4602      	mov	r2, r0
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	4293      	cmp	r3, r2
 8010192:	d3ea      	bcc.n	801016a <lv_obj_get_index+0x24>
    }

    return 0xFFFFFFFF; /*Shouldn't happen*/
 8010194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010198:	4618      	mov	r0, r3
 801019a:	3710      	adds	r7, #16
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <obj_del_core>:

    lv_obj_del(obj);
}

static void obj_del_core(lv_obj_t * obj)
{
 80101a0:	b590      	push	{r4, r7, lr}
 80101a2:	b08d      	sub	sp, #52	; 0x34
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 80101a8:	2200      	movs	r2, #0
 80101aa:	2121      	movs	r1, #33	; 0x21
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f7f6 fd35 	bl	8006c1c <lv_event_send>
 80101b2:	4603      	mov	r3, r0
 80101b4:	77fb      	strb	r3, [r7, #31]
    if(res == LV_RES_INV) return;
 80101b6:	7ffb      	ldrb	r3, [r7, #31]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	f000 80d2 	beq.w	8010362 <obj_del_core+0x1c2>

    /*Recursively delete the children*/
    lv_obj_t * child = lv_obj_get_child(obj, 0);
 80101be:	2100      	movs	r1, #0
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f7ff ff7a 	bl	80100ba <lv_obj_get_child>
 80101c6:	62f8      	str	r0, [r7, #44]	; 0x2c
    while(child) {
 80101c8:	e007      	b.n	80101da <obj_del_core+0x3a>
        obj_del_core(child);
 80101ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101cc:	f7ff ffe8 	bl	80101a0 <obj_del_core>
        child = lv_obj_get_child(obj, 0);
 80101d0:	2100      	movs	r1, #0
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f7ff ff71 	bl	80100ba <lv_obj_get_child>
 80101d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    while(child) {
 80101da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d1f4      	bne.n	80101ca <obj_del_core+0x2a>
    }

    lv_group_t * group = lv_obj_get_group(obj);
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f7f7 ff29 	bl	8008038 <lv_obj_get_group>
 80101e6:	61b8      	str	r0, [r7, #24]

    /*Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80101e8:	2000      	movs	r0, #0
 80101ea:	f011 fec3 	bl	8021f74 <lv_indev_get_next>
 80101ee:	62b8      	str	r0, [r7, #40]	; 0x28
    while(indev) {
 80101f0:	e028      	b.n	8010244 <obj_del_core+0xa4>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 80101f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101f6:	687a      	ldr	r2, [r7, #4]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d004      	beq.n	8010206 <obj_del_core+0x66>
 80101fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	429a      	cmp	r2, r3
 8010204:	d103      	bne.n	801020e <obj_del_core+0x6e>
            lv_indev_reset(indev, obj);
 8010206:	6879      	ldr	r1, [r7, #4]
 8010208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801020a:	f7f7 faa5 	bl	8007758 <lv_indev_reset>
        }
        if(indev->proc.types.pointer.last_pressed == obj) {
 801020e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	429a      	cmp	r2, r3
 8010216:	d102      	bne.n	801021e <obj_del_core+0x7e>
            indev->proc.types.pointer.last_pressed = NULL;
 8010218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801021a:	2200      	movs	r2, #0
 801021c:	635a      	str	r2, [r3, #52]	; 0x34
        }

        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 801021e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010222:	69ba      	ldr	r2, [r7, #24]
 8010224:	429a      	cmp	r2, r3
 8010226:	d109      	bne.n	801023c <obj_del_core+0x9c>
 8010228:	f7f7 fb5c 	bl	80078e4 <lv_indev_get_obj_act>
 801022c:	4602      	mov	r2, r0
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	4293      	cmp	r3, r2
 8010232:	d103      	bne.n	801023c <obj_del_core+0x9c>
            lv_indev_reset(indev, obj);
 8010234:	6879      	ldr	r1, [r7, #4]
 8010236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010238:	f7f7 fa8e 	bl	8007758 <lv_indev_reset>
        }
        indev = lv_indev_get_next(indev);
 801023c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801023e:	f011 fe99 	bl	8021f74 <lv_indev_get_next>
 8010242:	62b8      	str	r0, [r7, #40]	; 0x28
    while(indev) {
 8010244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010246:	2b00      	cmp	r3, #0
 8010248:	d1d3      	bne.n	80101f2 <obj_del_core+0x52>
    }

    /*All children deleted. Now clean up the object specific data*/
    _lv_obj_destruct(obj);
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f7f9 f8d4 	bl	80093f8 <_lv_obj_destruct>

    /*Remove the screen for the screen list*/
    if(obj->parent == NULL) {
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	685b      	ldr	r3, [r3, #4]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d146      	bne.n	80102e6 <obj_del_core+0x146>
        lv_disp_t * disp = lv_obj_get_disp(obj);
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f7ff fee3 	bl	8010024 <lv_obj_get_disp>
 801025e:	6138      	str	r0, [r7, #16]
        uint32_t i;
        /*Find the screen in the list*/
        for(i = 0; i < disp->screen_cnt; i++) {
 8010260:	2300      	movs	r3, #0
 8010262:	627b      	str	r3, [r7, #36]	; 0x24
 8010264:	e00b      	b.n	801027e <obj_del_core+0xde>
            if(disp->screens[i] == obj) break;
 8010266:	693b      	ldr	r3, [r7, #16]
 8010268:	68da      	ldr	r2, [r3, #12]
 801026a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801026c:	009b      	lsls	r3, r3, #2
 801026e:	4413      	add	r3, r2
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	429a      	cmp	r2, r3
 8010276:	d008      	beq.n	801028a <obj_del_core+0xea>
        for(i = 0; i < disp->screen_cnt; i++) {
 8010278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027a:	3301      	adds	r3, #1
 801027c:	627b      	str	r3, [r7, #36]	; 0x24
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010284:	429a      	cmp	r2, r3
 8010286:	d3ee      	bcc.n	8010266 <obj_del_core+0xc6>
 8010288:	e000      	b.n	801028c <obj_del_core+0xec>
            if(disp->screens[i] == obj) break;
 801028a:	bf00      	nop
        }

        uint32_t id = i;
 801028c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028e:	60fb      	str	r3, [r7, #12]
        for(i = id; i < disp->screen_cnt - 1; i++) {
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	627b      	str	r3, [r7, #36]	; 0x24
 8010294:	e00f      	b.n	80102b6 <obj_del_core+0x116>
            disp->screens[i] = disp->screens[i + 1];
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	68da      	ldr	r2, [r3, #12]
 801029a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801029c:	3301      	adds	r3, #1
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	441a      	add	r2, r3
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	68d9      	ldr	r1, [r3, #12]
 80102a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a8:	009b      	lsls	r3, r3, #2
 80102aa:	440b      	add	r3, r1
 80102ac:	6812      	ldr	r2, [r2, #0]
 80102ae:	601a      	str	r2, [r3, #0]
        for(i = id; i < disp->screen_cnt - 1; i++) {
 80102b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b2:	3301      	adds	r3, #1
 80102b4:	627b      	str	r3, [r7, #36]	; 0x24
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ba:	3b01      	subs	r3, #1
 80102bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102be:	429a      	cmp	r2, r3
 80102c0:	d3e9      	bcc.n	8010296 <obj_del_core+0xf6>
        }
        disp->screen_cnt--;
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c6:	1e5a      	subs	r2, r3, #1
 80102c8:	693b      	ldr	r3, [r7, #16]
 80102ca:	625a      	str	r2, [r3, #36]	; 0x24
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	68da      	ldr	r2, [r3, #12]
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102d4:	009b      	lsls	r3, r3, #2
 80102d6:	4619      	mov	r1, r3
 80102d8:	4610      	mov	r0, r2
 80102da:	f013 fe69 	bl	8023fb0 <lv_mem_realloc>
 80102de:	4602      	mov	r2, r0
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	60da      	str	r2, [r3, #12]
 80102e4:	e039      	b.n	801035a <obj_del_core+0x1ba>
    }
    /*Remove the object from the child list of its parent*/
    else {
        uint32_t id = lv_obj_get_index(obj);
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f7ff ff2d 	bl	8010146 <lv_obj_get_index>
 80102ec:	6178      	str	r0, [r7, #20]
        uint32_t i;
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	623b      	str	r3, [r7, #32]
 80102f2:	e013      	b.n	801031c <obj_del_core+0x17c>
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	689b      	ldr	r3, [r3, #8]
 80102fa:	681a      	ldr	r2, [r3, #0]
 80102fc:	6a3b      	ldr	r3, [r7, #32]
 80102fe:	3301      	adds	r3, #1
 8010300:	009b      	lsls	r3, r3, #2
 8010302:	441a      	add	r2, r3
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	685b      	ldr	r3, [r3, #4]
 8010308:	689b      	ldr	r3, [r3, #8]
 801030a:	6819      	ldr	r1, [r3, #0]
 801030c:	6a3b      	ldr	r3, [r7, #32]
 801030e:	009b      	lsls	r3, r3, #2
 8010310:	440b      	add	r3, r1
 8010312:	6812      	ldr	r2, [r2, #0]
 8010314:	601a      	str	r2, [r3, #0]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 8010316:	6a3b      	ldr	r3, [r7, #32]
 8010318:	3301      	adds	r3, #1
 801031a:	623b      	str	r3, [r7, #32]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	689b      	ldr	r3, [r3, #8]
 8010322:	685b      	ldr	r3, [r3, #4]
 8010324:	3b01      	subs	r3, #1
 8010326:	6a3a      	ldr	r2, [r7, #32]
 8010328:	429a      	cmp	r2, r3
 801032a:	d3e3      	bcc.n	80102f4 <obj_del_core+0x154>
        }
        obj->parent->spec_attr->child_cnt--;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	685b      	ldr	r3, [r3, #4]
 8010330:	689b      	ldr	r3, [r3, #8]
 8010332:	685a      	ldr	r2, [r3, #4]
 8010334:	3a01      	subs	r2, #1
 8010336:	605a      	str	r2, [r3, #4]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	685b      	ldr	r3, [r3, #4]
 801033c:	689b      	ldr	r3, [r3, #8]
 801033e:	681a      	ldr	r2, [r3, #0]
                                                          obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	689b      	ldr	r3, [r3, #8]
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	0099      	lsls	r1, r3, #2
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	689c      	ldr	r4, [r3, #8]
 8010350:	4610      	mov	r0, r2
 8010352:	f013 fe2d 	bl	8023fb0 <lv_mem_realloc>
 8010356:	4603      	mov	r3, r0
 8010358:	6023      	str	r3, [r4, #0]
    }

    /*Free the object itself*/
    lv_mem_free(obj);
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f013 fdfa 	bl	8023f54 <lv_mem_free>
 8010360:	e000      	b.n	8010364 <obj_del_core+0x1c4>
    if(res == LV_RES_INV) return;
 8010362:	bf00      	nop
}
 8010364:	3734      	adds	r7, #52	; 0x34
 8010366:	46bd      	mov	sp, r7
 8010368:	bd90      	pop	{r4, r7, pc}

0801036a <lv_area_copy>:
{
 801036a:	b480      	push	{r7}
 801036c:	b083      	sub	sp, #12
 801036e:	af00      	add	r7, sp, #0
 8010370:	6078      	str	r0, [r7, #4]
 8010372:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	f9b3 2000 	ldrsh.w	r2, [r3]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	80da      	strh	r2, [r3, #6]
}
 801039c:	bf00      	nop
 801039e:	370c      	adds	r7, #12
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr

080103a8 <lv_area_get_width>:
{
 80103a8:	b480      	push	{r7}
 80103aa:	b083      	sub	sp, #12
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80103be:	b29b      	uxth	r3, r3
 80103c0:	1ad3      	subs	r3, r2, r3
 80103c2:	b29b      	uxth	r3, r3
 80103c4:	3301      	adds	r3, #1
 80103c6:	b29b      	uxth	r3, r3
 80103c8:	b21b      	sxth	r3, r3
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	370c      	adds	r7, #12
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr

080103d6 <lv_area_get_height>:
{
 80103d6:	b480      	push	{r7}
 80103d8:	b083      	sub	sp, #12
 80103da:	af00      	add	r7, sp, #0
 80103dc:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80103e4:	b29a      	uxth	r2, r3
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80103ec:	b29b      	uxth	r3, r3
 80103ee:	1ad3      	subs	r3, r2, r3
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	3301      	adds	r3, #1
 80103f4:	b29b      	uxth	r3, r3
 80103f6:	b21b      	sxth	r3, r3
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	370c      	adds	r7, #12
 80103fc:	46bd      	mov	sp, r7
 80103fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010402:	4770      	bx	lr

08010404 <lv_obj_get_style_transform_zoom>:
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b084      	sub	sp, #16
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801040e:	226c      	movs	r2, #108	; 0x6c
 8010410:	6839      	ldr	r1, [r7, #0]
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f7fe fb20 	bl	800ea58 <lv_obj_get_style_prop>
 8010418:	4603      	mov	r3, r0
 801041a:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	b21b      	sxth	r3, r3
}
 8010420:	4618      	mov	r0, r3
 8010422:	3710      	adds	r7, #16
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <lv_obj_get_style_transform_angle>:
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8010432:	226d      	movs	r2, #109	; 0x6d
 8010434:	6839      	ldr	r1, [r7, #0]
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f7fe fb0e 	bl	800ea58 <lv_obj_get_style_prop>
 801043c:	4603      	mov	r3, r0
 801043e:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	b21b      	sxth	r3, r3
}
 8010444:	4618      	mov	r0, r3
 8010446:	3710      	adds	r7, #16
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}

0801044c <lv_obj_get_style_transform_pivot_x>:
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b084      	sub	sp, #16
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 8010456:	226e      	movs	r2, #110	; 0x6e
 8010458:	6839      	ldr	r1, [r7, #0]
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f7fe fafc 	bl	800ea58 <lv_obj_get_style_prop>
 8010460:	4603      	mov	r3, r0
 8010462:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	b21b      	sxth	r3, r3
}
 8010468:	4618      	mov	r0, r3
 801046a:	3710      	adds	r7, #16
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <lv_obj_get_style_transform_pivot_y>:
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 801047a:	226f      	movs	r2, #111	; 0x6f
 801047c:	6839      	ldr	r1, [r7, #0]
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f7fe faea 	bl	800ea58 <lv_obj_get_style_prop>
 8010484:	4603      	mov	r3, r0
 8010486:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	b21b      	sxth	r3, r3
}
 801048c:	4618      	mov	r0, r3
 801048e:	3710      	adds	r7, #16
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <lv_obj_get_style_opa>:
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b084      	sub	sp, #16
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 801049e:	2260      	movs	r2, #96	; 0x60
 80104a0:	6839      	ldr	r1, [r7, #0]
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f7fe fad8 	bl	800ea58 <lv_obj_get_style_prop>
 80104a8:	4603      	mov	r3, r0
 80104aa:	60fb      	str	r3, [r7, #12]
    return (lv_opa_t)v.num;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	b2db      	uxtb	r3, r3
}
 80104b0:	4618      	mov	r0, r3
 80104b2:	3710      	adds	r7, #16
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}

080104b8 <lv_obj_get_style_blend_mode>:
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b084      	sub	sp, #16
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 80104c2:	2267      	movs	r2, #103	; 0x67
 80104c4:	6839      	ldr	r1, [r7, #0]
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f7fe fac6 	bl	800ea58 <lv_obj_get_style_prop>
 80104cc:	4603      	mov	r3, r0
 80104ce:	60fb      	str	r3, [r7, #12]
    return (lv_blend_mode_t)v.num;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	b2db      	uxtb	r3, r3
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3710      	adds	r7, #16
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}

080104dc <_lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void _lv_refr_init(void)
{
 80104dc:	b480      	push	{r7}
 80104de:	af00      	add	r7, sp, #0
    perf_monitor_init(&perf_monitor);
#endif
#if LV_USE_MEM_MONITOR
    mem_monitor_init(&mem_monitor);
#endif
}
 80104e0:	bf00      	nop
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr

080104ea <lv_obj_redraw>:
        }
    }
}

void lv_obj_redraw(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
{
 80104ea:	b580      	push	{r7, lr}
 80104ec:	b08e      	sub	sp, #56	; 0x38
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	6078      	str	r0, [r7, #4]
 80104f2:	6039      	str	r1, [r7, #0]
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	689b      	ldr	r3, [r3, #8]
 80104f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_area_t clip_coords_for_obj;

    /*Truncate the clip area to `obj size + ext size` area*/
    lv_area_t obj_coords_ext;
    lv_obj_get_coords(obj, &obj_coords_ext);
 80104fa:	f107 0310 	add.w	r3, r7, #16
 80104fe:	4619      	mov	r1, r3
 8010500:	6838      	ldr	r0, [r7, #0]
 8010502:	f7fa fb86 	bl	800ac12 <lv_obj_get_coords>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 8010506:	6838      	ldr	r0, [r7, #0]
 8010508:	f7f9 fe46 	bl	800a198 <_lv_obj_get_ext_draw_size>
 801050c:	4603      	mov	r3, r0
 801050e:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 8010510:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8010514:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8010518:	f107 0310 	add.w	r3, r7, #16
 801051c:	4618      	mov	r0, r3
 801051e:	f012 f95d 	bl	80227dc <lv_area_increase>
    bool com_clip_res = _lv_area_intersect(&clip_coords_for_obj, clip_area_ori, &obj_coords_ext);
 8010522:	f107 0210 	add.w	r2, r7, #16
 8010526:	f107 0318 	add.w	r3, r7, #24
 801052a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801052c:	4618      	mov	r0, r3
 801052e:	f012 f9c1 	bl	80228b4 <_lv_area_intersect>
 8010532:	4603      	mov	r3, r0
 8010534:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    /*If the object is visible on the current clip area OR has overflow visible draw it.
     *With overflow visible drawing should happen to apply the masks which might affect children */
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 8010538:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801053c:	2b00      	cmp	r3, #0
 801053e:	d107      	bne.n	8010550 <lv_obj_redraw+0x66>
 8010540:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010544:	6838      	ldr	r0, [r7, #0]
 8010546:	f7f7 fd42 	bl	8007fce <lv_obj_has_flag>
 801054a:	4603      	mov	r3, r0
 801054c:	2b00      	cmp	r3, #0
 801054e:	d001      	beq.n	8010554 <lv_obj_redraw+0x6a>
 8010550:	2301      	movs	r3, #1
 8010552:	e000      	b.n	8010556 <lv_obj_redraw+0x6c>
 8010554:	2300      	movs	r3, #0
 8010556:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 801055a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801055e:	f003 0301 	and.w	r3, r3, #1
 8010562:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if(should_draw) {
 8010566:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801056a:	2b00      	cmp	r3, #0
 801056c:	d012      	beq.n	8010594 <lv_obj_redraw+0xaa>
        draw_ctx->clip_area = &clip_coords_for_obj;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f107 0218 	add.w	r2, r7, #24
 8010574:	609a      	str	r2, [r3, #8]

        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 8010576:	687a      	ldr	r2, [r7, #4]
 8010578:	2114      	movs	r1, #20
 801057a:	6838      	ldr	r0, [r7, #0]
 801057c:	f7f6 fb4e 	bl	8006c1c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, draw_ctx);
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	2115      	movs	r1, #21
 8010584:	6838      	ldr	r0, [r7, #0]
 8010586:	f7f6 fb49 	bl	8006c1c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	2116      	movs	r1, #22
 801058e:	6838      	ldr	r0, [r7, #0]
 8010590:	f7f6 fb44 	bl	8006c1c <lv_event_send>
    }

    /*With overflow visible keep the previous clip area to let the children visible out of this object too
     *With not overflow visible limit the clip are to the object's coordinates to clip the children*/
    lv_area_t clip_coords_for_children;
    bool refr_children = true;
 8010594:	2301      	movs	r3, #1
 8010596:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 801059a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801059e:	6838      	ldr	r0, [r7, #0]
 80105a0:	f7f7 fd15 	bl	8007fce <lv_obj_has_flag>
 80105a4:	4603      	mov	r3, r0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d006      	beq.n	80105b8 <lv_obj_redraw+0xce>
        clip_coords_for_children  = *clip_area_ori;
 80105aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105ac:	f107 0308 	add.w	r3, r7, #8
 80105b0:	6810      	ldr	r0, [r2, #0]
 80105b2:	6851      	ldr	r1, [r2, #4]
 80105b4:	c303      	stmia	r3!, {r0, r1}
 80105b6:	e011      	b.n	80105dc <lv_obj_redraw+0xf2>
    }
    else {
        if(!_lv_area_intersect(&clip_coords_for_children, clip_area_ori, &obj->coords)) {
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	f103 0214 	add.w	r2, r3, #20
 80105be:	f107 0308 	add.w	r3, r7, #8
 80105c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105c4:	4618      	mov	r0, r3
 80105c6:	f012 f975 	bl	80228b4 <_lv_area_intersect>
 80105ca:	4603      	mov	r3, r0
 80105cc:	f083 0301 	eor.w	r3, r3, #1
 80105d0:	b2db      	uxtb	r3, r3
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d002      	beq.n	80105dc <lv_obj_redraw+0xf2>
            refr_children = false;
 80105d6:	2300      	movs	r3, #0
 80105d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if(refr_children) {
 80105dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d01d      	beq.n	8010620 <lv_obj_redraw+0x136>
        draw_ctx->clip_area = &clip_coords_for_children;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f107 0208 	add.w	r2, r7, #8
 80105ea:	609a      	str	r2, [r3, #8]
        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80105ec:	6838      	ldr	r0, [r7, #0]
 80105ee:	f7ff fd97 	bl	8010120 <lv_obj_get_child_cnt>
 80105f2:	6278      	str	r0, [r7, #36]	; 0x24
        for(i = 0; i < child_cnt; i++) {
 80105f4:	2300      	movs	r3, #0
 80105f6:	633b      	str	r3, [r7, #48]	; 0x30
 80105f8:	e00e      	b.n	8010618 <lv_obj_redraw+0x12e>
            lv_obj_t * child = obj->spec_attr->children[i];
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	689b      	ldr	r3, [r3, #8]
 80105fe:	681a      	ldr	r2, [r3, #0]
 8010600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	4413      	add	r3, r2
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	623b      	str	r3, [r7, #32]
            refr_obj(draw_ctx, child);
 801060a:	6a39      	ldr	r1, [r7, #32]
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f000 fef1 	bl	80113f4 <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 8010612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010614:	3301      	adds	r3, #1
 8010616:	633b      	str	r3, [r7, #48]	; 0x30
 8010618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061c:	429a      	cmp	r2, r3
 801061e:	d3ec      	bcc.n	80105fa <lv_obj_redraw+0x110>
        }
    }

    /*If the object was visible on the clip area call the post draw events too*/
    if(should_draw) {
 8010620:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010624:	2b00      	cmp	r3, #0
 8010626:	d012      	beq.n	801064e <lv_obj_redraw+0x164>
        draw_ctx->clip_area = &clip_coords_for_obj;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f107 0218 	add.w	r2, r7, #24
 801062e:	609a      	str	r2, [r3, #8]

        /*If all the children are redrawn make 'post draw' draw*/
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 8010630:	687a      	ldr	r2, [r7, #4]
 8010632:	2117      	movs	r1, #23
 8010634:	6838      	ldr	r0, [r7, #0]
 8010636:	f7f6 faf1 	bl	8006c1c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, draw_ctx);
 801063a:	687a      	ldr	r2, [r7, #4]
 801063c:	2118      	movs	r1, #24
 801063e:	6838      	ldr	r0, [r7, #0]
 8010640:	f7f6 faec 	bl	8006c1c <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, draw_ctx);
 8010644:	687a      	ldr	r2, [r7, #4]
 8010646:	2119      	movs	r1, #25
 8010648:	6838      	ldr	r0, [r7, #0]
 801064a:	f7f6 fae7 	bl	8006c1c <lv_event_send>
    }

    draw_ctx->clip_area = clip_area_ori;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010652:	609a      	str	r2, [r3, #8]
}
 8010654:	bf00      	nop
 8010656:	3738      	adds	r7, #56	; 0x38
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <_lv_inv_area>:
 * @param area_p pointer to area which should be invalidated (NULL: delete the invalidated areas)
 * @param disp pointer to display where the area should be invalidated (NULL can be used if there is
 * only one display)
 */
void _lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b088      	sub	sp, #32
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	6039      	str	r1, [r7, #0]
    if(!disp) disp = lv_disp_get_default();
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d102      	bne.n	8010672 <_lv_inv_area+0x16>
 801066c:	f011 fbf0 	bl	8021e50 <lv_disp_get_default>
 8010670:	6078      	str	r0, [r7, #4]
    if(!disp) return;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2b00      	cmp	r3, #0
 8010676:	f000 80be 	beq.w	80107f6 <_lv_inv_area+0x19a>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f7f6 f9c4 	bl	8006a08 <lv_disp_is_invalidation_enabled>
 8010680:	4603      	mov	r3, r0
 8010682:	f083 0301 	eor.w	r3, r3, #1
 8010686:	b2db      	uxtb	r3, r3
 8010688:	2b00      	cmp	r3, #0
 801068a:	f040 80b6 	bne.w	80107fa <_lv_inv_area+0x19e>

    if(disp->rendering_in_progress) {
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010694:	f003 0304 	and.w	r3, r3, #4
 8010698:	b2db      	uxtb	r3, r3
 801069a:	2b00      	cmp	r3, #0
 801069c:	f040 80af 	bne.w	80107fe <_lv_inv_area+0x1a2>
        LV_LOG_ERROR("detected modifying dirty areas in render");
        return;
    }

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d104      	bne.n	80106b0 <_lv_inv_area+0x54>
        disp->inv_p = 0;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2200      	movs	r2, #0
 80106aa:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        return;
 80106ae:	e0ad      	b.n	801080c <_lv_inv_area+0x1b0>
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
 80106b0:	2300      	movs	r3, #0
 80106b2:	82bb      	strh	r3, [r7, #20]
    scr_area.y1 = 0;
 80106b4:	2300      	movs	r3, #0
 80106b6:	82fb      	strh	r3, [r7, #22]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f011 fbd5 	bl	8021e68 <lv_disp_get_hor_res>
 80106be:	4603      	mov	r3, r0
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	3b01      	subs	r3, #1
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	b21b      	sxth	r3, r3
 80106c8:	833b      	strh	r3, [r7, #24]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f011 fbf2 	bl	8021eb4 <lv_disp_get_ver_res>
 80106d0:	4603      	mov	r3, r0
 80106d2:	b29b      	uxth	r3, r3
 80106d4:	3b01      	subs	r3, #1
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	b21b      	sxth	r3, r3
 80106da:	837b      	strh	r3, [r7, #26]

    lv_area_t com_area;
    bool suc;

    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 80106dc:	f107 0214 	add.w	r2, r7, #20
 80106e0:	f107 030c 	add.w	r3, r7, #12
 80106e4:	6839      	ldr	r1, [r7, #0]
 80106e6:	4618      	mov	r0, r3
 80106e8:	f012 f8e4 	bl	80228b4 <_lv_area_intersect>
 80106ec:	4603      	mov	r3, r0
 80106ee:	777b      	strb	r3, [r7, #29]
    if(suc == false)  return; /*Out of the screen*/
 80106f0:	7f7b      	ldrb	r3, [r7, #29]
 80106f2:	f083 0301 	eor.w	r3, r3, #1
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f040 8082 	bne.w	8010802 <_lv_inv_area+0x1a6>

    /*If there were at least 1 invalid area in full refresh mode, redraw the whole screen*/
    if(disp->driver->full_refresh) {
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	7c1b      	ldrb	r3, [r3, #16]
 8010704:	f003 0302 	and.w	r3, r3, #2
 8010708:	b2db      	uxtb	r3, r3
 801070a:	2b00      	cmp	r3, #0
 801070c:	d015      	beq.n	801073a <_lv_inv_area+0xde>
        disp->inv_areas[0] = scr_area;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	3330      	adds	r3, #48	; 0x30
 8010712:	f107 0214 	add.w	r2, r7, #20
 8010716:	e892 0003 	ldmia.w	r2, {r0, r1}
 801071a:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2201      	movs	r2, #1
 8010722:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	685b      	ldr	r3, [r3, #4]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d06b      	beq.n	8010806 <_lv_inv_area+0x1aa>
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	685b      	ldr	r3, [r3, #4]
 8010732:	4618      	mov	r0, r3
 8010734:	f014 ff33 	bl	802559e <lv_timer_resume>
        return;
 8010738:	e065      	b.n	8010806 <_lv_inv_area+0x1aa>
    }

    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	699b      	ldr	r3, [r3, #24]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d008      	beq.n	8010756 <_lv_inv_area+0xfa>
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	699b      	ldr	r3, [r3, #24]
 801074a:	687a      	ldr	r2, [r7, #4]
 801074c:	6812      	ldr	r2, [r2, #0]
 801074e:	f107 010c 	add.w	r1, r7, #12
 8010752:	4610      	mov	r0, r2
 8010754:	4798      	blx	r3

    /*Save only if this area is not in one of the saved areas*/
    uint16_t i;
    for(i = 0; i < disp->inv_p; i++) {
 8010756:	2300      	movs	r3, #0
 8010758:	83fb      	strh	r3, [r7, #30]
 801075a:	e010      	b.n	801077e <_lv_inv_area+0x122>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 801075c:	8bfb      	ldrh	r3, [r7, #30]
 801075e:	3306      	adds	r3, #6
 8010760:	00db      	lsls	r3, r3, #3
 8010762:	687a      	ldr	r2, [r7, #4]
 8010764:	18d1      	adds	r1, r2, r3
 8010766:	f107 030c 	add.w	r3, r7, #12
 801076a:	2200      	movs	r2, #0
 801076c:	4618      	mov	r0, r3
 801076e:	f012 fa85 	bl	8022c7c <_lv_area_is_in>
 8010772:	4603      	mov	r3, r0
 8010774:	2b00      	cmp	r3, #0
 8010776:	d148      	bne.n	801080a <_lv_inv_area+0x1ae>
    for(i = 0; i < disp->inv_p; i++) {
 8010778:	8bfb      	ldrh	r3, [r7, #30]
 801077a:	3301      	adds	r3, #1
 801077c:	83fb      	strh	r3, [r7, #30]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8010784:	8bfa      	ldrh	r2, [r7, #30]
 8010786:	429a      	cmp	r2, r3
 8010788:	d3e8      	bcc.n	801075c <_lv_inv_area+0x100>
    }

    /*Save the area*/
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8010790:	2b1f      	cmp	r3, #31
 8010792:	d80d      	bhi.n	80107b0 <_lv_inv_area+0x154>
        lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 801079a:	3306      	adds	r3, #6
 801079c:	00db      	lsls	r3, r3, #3
 801079e:	687a      	ldr	r2, [r7, #4]
 80107a0:	4413      	add	r3, r2
 80107a2:	f107 020c 	add.w	r2, r7, #12
 80107a6:	4611      	mov	r1, r2
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7ff fdde 	bl	801036a <lv_area_copy>
 80107ae:	e010      	b.n	80107d2 <_lv_inv_area+0x176>
    }
    else {   /*If no place for the area add the screen*/
        disp->inv_p = 0;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2200      	movs	r2, #0
 80107b4:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 80107be:	3306      	adds	r3, #6
 80107c0:	00db      	lsls	r3, r3, #3
 80107c2:	687a      	ldr	r2, [r7, #4]
 80107c4:	4413      	add	r3, r2
 80107c6:	f107 0214 	add.w	r2, r7, #20
 80107ca:	4611      	mov	r1, r2
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7ff fdcc 	bl	801036a <lv_area_copy>
    }
    disp->inv_p++;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 80107d8:	3301      	adds	r3, #1
 80107da:	b29a      	uxth	r2, r3
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	685b      	ldr	r3, [r3, #4]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d010      	beq.n	801080c <_lv_inv_area+0x1b0>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	685b      	ldr	r3, [r3, #4]
 80107ee:	4618      	mov	r0, r3
 80107f0:	f014 fed5 	bl	802559e <lv_timer_resume>
 80107f4:	e00a      	b.n	801080c <_lv_inv_area+0x1b0>
    if(!disp) return;
 80107f6:	bf00      	nop
 80107f8:	e008      	b.n	801080c <_lv_inv_area+0x1b0>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 80107fa:	bf00      	nop
 80107fc:	e006      	b.n	801080c <_lv_inv_area+0x1b0>
        return;
 80107fe:	bf00      	nop
 8010800:	e004      	b.n	801080c <_lv_inv_area+0x1b0>
    if(suc == false)  return; /*Out of the screen*/
 8010802:	bf00      	nop
 8010804:	e002      	b.n	801080c <_lv_inv_area+0x1b0>
        return;
 8010806:	bf00      	nop
 8010808:	e000      	b.n	801080c <_lv_inv_area+0x1b0>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 801080a:	bf00      	nop
}
 801080c:	3720      	adds	r7, #32
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
	...

08010814 <_lv_refr_get_disp_refreshing>:
/**
 * Get the display which is being refreshed
 * @return the display being refreshed
 */
lv_disp_t * _lv_refr_get_disp_refreshing(void)
{
 8010814:	b480      	push	{r7}
 8010816:	af00      	add	r7, sp, #0
    return disp_refr;
 8010818:	4b03      	ldr	r3, [pc, #12]	; (8010828 <_lv_refr_get_disp_refreshing+0x14>)
 801081a:	681b      	ldr	r3, [r3, #0]
}
 801081c:	4618      	mov	r0, r3
 801081e:	46bd      	mov	sp, r7
 8010820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010824:	4770      	bx	lr
 8010826:	bf00      	nop
 8010828:	20000780 	.word	0x20000780

0801082c <_lv_disp_refr_timer>:
/**
 * Called periodically to handle the refreshing
 * @param tmr pointer to the timer itself
 */
void _lv_disp_refr_timer(lv_timer_t * tmr)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
    REFR_TRACE("begin");

    uint32_t start = lv_tick_get();
 8010834:	f011 fbce 	bl	8021fd4 <lv_tick_get>
 8010838:	60f8      	str	r0, [r7, #12]
    volatile uint32_t elaps = 0;
 801083a:	2300      	movs	r3, #0
 801083c:	60bb      	str	r3, [r7, #8]

    if(tmr) {
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d007      	beq.n	8010854 <_lv_disp_refr_timer+0x28>
        disp_refr = tmr->user_data;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	68db      	ldr	r3, [r3, #12]
 8010848:	4a38      	ldr	r2, [pc, #224]	; (801092c <_lv_disp_refr_timer+0x100>)
 801084a:	6013      	str	r3, [r2, #0]
#if LV_USE_PERF_MONITOR == 0 && LV_USE_MEM_MONITOR == 0
        /**
         * Ensure the timer does not run again automatically.
         * This is done before refreshing in case refreshing invalidates something else.
         */
        lv_timer_pause(tmr);
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f014 fe97 	bl	8025580 <lv_timer_pause>
 8010852:	e004      	b.n	801085e <_lv_disp_refr_timer+0x32>
#endif
    }
    else {
        disp_refr = lv_disp_get_default();
 8010854:	f011 fafc 	bl	8021e50 <lv_disp_get_default>
 8010858:	4603      	mov	r3, r0
 801085a:	4a34      	ldr	r2, [pc, #208]	; (801092c <_lv_disp_refr_timer+0x100>)
 801085c:	6013      	str	r3, [r2, #0]
    }

    /*Refresh the screen's layout if required*/
    lv_obj_update_layout(disp_refr->act_scr);
 801085e:	4b33      	ldr	r3, [pc, #204]	; (801092c <_lv_disp_refr_timer+0x100>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	691b      	ldr	r3, [r3, #16]
 8010864:	4618      	mov	r0, r3
 8010866:	f7fa f989 	bl	800ab7c <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 801086a:	4b30      	ldr	r3, [pc, #192]	; (801092c <_lv_disp_refr_timer+0x100>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	695b      	ldr	r3, [r3, #20]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d005      	beq.n	8010880 <_lv_disp_refr_timer+0x54>
 8010874:	4b2d      	ldr	r3, [pc, #180]	; (801092c <_lv_disp_refr_timer+0x100>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	695b      	ldr	r3, [r3, #20]
 801087a:	4618      	mov	r0, r3
 801087c:	f7fa f97e 	bl	800ab7c <lv_obj_update_layout>

    lv_obj_update_layout(disp_refr->top_layer);
 8010880:	4b2a      	ldr	r3, [pc, #168]	; (801092c <_lv_disp_refr_timer+0x100>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	69db      	ldr	r3, [r3, #28]
 8010886:	4618      	mov	r0, r3
 8010888:	f7fa f978 	bl	800ab7c <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 801088c:	4b27      	ldr	r3, [pc, #156]	; (801092c <_lv_disp_refr_timer+0x100>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	6a1b      	ldr	r3, [r3, #32]
 8010892:	4618      	mov	r0, r3
 8010894:	f7fa f972 	bl	800ab7c <lv_obj_update_layout>

    /*Do nothing if there is no active screen*/
    if(disp_refr->act_scr == NULL) {
 8010898:	4b24      	ldr	r3, [pc, #144]	; (801092c <_lv_disp_refr_timer+0x100>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	691b      	ldr	r3, [r3, #16]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d105      	bne.n	80108ae <_lv_disp_refr_timer+0x82>
        disp_refr->inv_p = 0;
 80108a2:	4b22      	ldr	r3, [pc, #136]	; (801092c <_lv_disp_refr_timer+0x100>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	2200      	movs	r2, #0
 80108a8:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        LV_LOG_WARN("there is no active screen");
        REFR_TRACE("finished");
        return;
 80108ac:	e03a      	b.n	8010924 <_lv_disp_refr_timer+0xf8>
    }

    lv_refr_join_area();
 80108ae:	f000 f841 	bl	8010934 <lv_refr_join_area>

    refr_invalid_areas();
 80108b2:	f000 f8d7 	bl	8010a64 <refr_invalid_areas>

    /*If refresh happened ...*/
    if(disp_refr->inv_p != 0) {
 80108b6:	4b1d      	ldr	r3, [pc, #116]	; (801092c <_lv_disp_refr_timer+0x100>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d02a      	beq.n	8010918 <_lv_disp_refr_timer+0xec>

        /*Clean up*/
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 80108c2:	4b1a      	ldr	r3, [pc, #104]	; (801092c <_lv_disp_refr_timer+0x100>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	3330      	adds	r3, #48	; 0x30
 80108c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80108cc:	4618      	mov	r0, r3
 80108ce:	f013 ff45 	bl	802475c <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 80108d2:	4b16      	ldr	r3, [pc, #88]	; (801092c <_lv_disp_refr_timer+0x100>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80108da:	2120      	movs	r1, #32
 80108dc:	4618      	mov	r0, r3
 80108de:	f013 ff3d 	bl	802475c <lv_memset_00>
        disp_refr->inv_p = 0;
 80108e2:	4b12      	ldr	r3, [pc, #72]	; (801092c <_lv_disp_refr_timer+0x100>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	2200      	movs	r2, #0
 80108e8:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150

        elaps = lv_tick_elaps(start);
 80108ec:	68f8      	ldr	r0, [r7, #12]
 80108ee:	f011 fb8b 	bl	8022008 <lv_tick_elaps>
 80108f2:	4603      	mov	r3, r0
 80108f4:	60bb      	str	r3, [r7, #8]

        /*Call monitor cb if present*/
        if(disp_refr->driver->monitor_cb) {
 80108f6:	4b0d      	ldr	r3, [pc, #52]	; (801092c <_lv_disp_refr_timer+0x100>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d00a      	beq.n	8010918 <_lv_disp_refr_timer+0xec>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 8010902:	4b0a      	ldr	r3, [pc, #40]	; (801092c <_lv_disp_refr_timer+0x100>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801090a:	4a08      	ldr	r2, [pc, #32]	; (801092c <_lv_disp_refr_timer+0x100>)
 801090c:	6812      	ldr	r2, [r2, #0]
 801090e:	6810      	ldr	r0, [r2, #0]
 8010910:	68b9      	ldr	r1, [r7, #8]
 8010912:	4a07      	ldr	r2, [pc, #28]	; (8010930 <_lv_disp_refr_timer+0x104>)
 8010914:	6812      	ldr	r2, [r2, #0]
 8010916:	4798      	blx	r3
        }
    }

    lv_mem_buf_free_all();
 8010918:	f013 fc46 	bl	80241a8 <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 801091c:	f010 fed6 	bl	80216cc <_lv_font_clean_up_fmt_txt>

#if LV_DRAW_COMPLEX
    _lv_draw_mask_cleanup();
 8010920:	f003 f94e 	bl	8013bc0 <_lv_draw_mask_cleanup>
                              mon.frag_pct);
    }
#endif

    REFR_TRACE("finished");
}
 8010924:	3710      	adds	r7, #16
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
 801092a:	bf00      	nop
 801092c:	20000780 	.word	0x20000780
 8010930:	2000077c 	.word	0x2000077c

08010934 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
 8010934:	b5b0      	push	{r4, r5, r7, lr}
 8010936:	b084      	sub	sp, #16
 8010938:	af00      	add	r7, sp, #0
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 801093a:	2300      	movs	r3, #0
 801093c:	60bb      	str	r3, [r7, #8]
 801093e:	e080      	b.n	8010a42 <lv_refr_join_area+0x10e>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8010940:	4b47      	ldr	r3, [pc, #284]	; (8010a60 <lv_refr_join_area+0x12c>)
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	4413      	add	r3, r2
 8010948:	f503 7398 	add.w	r3, r3, #304	; 0x130
 801094c:	781b      	ldrb	r3, [r3, #0]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d173      	bne.n	8010a3a <lv_refr_join_area+0x106>

        /*Check all areas to join them in 'join_in'*/
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8010952:	2300      	movs	r3, #0
 8010954:	60fb      	str	r3, [r7, #12]
 8010956:	e067      	b.n	8010a28 <lv_refr_join_area+0xf4>
            /*Handle only unjoined areas and ignore itself*/
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 8010958:	4b41      	ldr	r3, [pc, #260]	; (8010a60 <lv_refr_join_area+0x12c>)
 801095a:	681a      	ldr	r2, [r3, #0]
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	4413      	add	r3, r2
 8010960:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d158      	bne.n	8010a1c <lv_refr_join_area+0xe8>
 801096a:	68ba      	ldr	r2, [r7, #8]
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	429a      	cmp	r2, r3
 8010970:	d054      	beq.n	8010a1c <lv_refr_join_area+0xe8>
                continue;
            }

            /*Check if the areas are on each other*/
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8010972:	4b3b      	ldr	r3, [pc, #236]	; (8010a60 <lv_refr_join_area+0x12c>)
 8010974:	681a      	ldr	r2, [r3, #0]
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	3306      	adds	r3, #6
 801097a:	00db      	lsls	r3, r3, #3
 801097c:	18d0      	adds	r0, r2, r3
 801097e:	4b38      	ldr	r3, [pc, #224]	; (8010a60 <lv_refr_join_area+0x12c>)
 8010980:	681a      	ldr	r2, [r3, #0]
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	3306      	adds	r3, #6
 8010986:	00db      	lsls	r3, r3, #3
 8010988:	4413      	add	r3, r2
 801098a:	4619      	mov	r1, r3
 801098c:	f012 f948 	bl	8022c20 <_lv_area_is_on>
 8010990:	4603      	mov	r3, r0
 8010992:	f083 0301 	eor.w	r3, r3, #1
 8010996:	b2db      	uxtb	r3, r3
 8010998:	2b00      	cmp	r3, #0
 801099a:	d141      	bne.n	8010a20 <lv_refr_join_area+0xec>
                continue;
            }

            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 801099c:	4b30      	ldr	r3, [pc, #192]	; (8010a60 <lv_refr_join_area+0x12c>)
 801099e:	681a      	ldr	r2, [r3, #0]
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	3306      	adds	r3, #6
 80109a4:	00db      	lsls	r3, r3, #3
 80109a6:	18d1      	adds	r1, r2, r3
 80109a8:	4b2d      	ldr	r3, [pc, #180]	; (8010a60 <lv_refr_join_area+0x12c>)
 80109aa:	681a      	ldr	r2, [r3, #0]
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	3306      	adds	r3, #6
 80109b0:	00db      	lsls	r3, r3, #3
 80109b2:	441a      	add	r2, r3
 80109b4:	463b      	mov	r3, r7
 80109b6:	4618      	mov	r0, r3
 80109b8:	f011 ffcd 	bl	8022956 <_lv_area_join>

            /*Join two area only if the joined area size is smaller*/
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80109bc:	463b      	mov	r3, r7
 80109be:	4618      	mov	r0, r3
 80109c0:	f011 feeb 	bl	802279a <lv_area_get_size>
 80109c4:	4604      	mov	r4, r0
 80109c6:	4b26      	ldr	r3, [pc, #152]	; (8010a60 <lv_refr_join_area+0x12c>)
 80109c8:	681a      	ldr	r2, [r3, #0]
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	3306      	adds	r3, #6
 80109ce:	00db      	lsls	r3, r3, #3
 80109d0:	4413      	add	r3, r2
 80109d2:	4618      	mov	r0, r3
 80109d4:	f011 fee1 	bl	802279a <lv_area_get_size>
 80109d8:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 80109da:	4b21      	ldr	r3, [pc, #132]	; (8010a60 <lv_refr_join_area+0x12c>)
 80109dc:	681a      	ldr	r2, [r3, #0]
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	3306      	adds	r3, #6
 80109e2:	00db      	lsls	r3, r3, #3
 80109e4:	4413      	add	r3, r2
 80109e6:	4618      	mov	r0, r3
 80109e8:	f011 fed7 	bl	802279a <lv_area_get_size>
 80109ec:	4603      	mov	r3, r0
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80109ee:	442b      	add	r3, r5
 80109f0:	429c      	cmp	r4, r3
 80109f2:	d216      	bcs.n	8010a22 <lv_refr_join_area+0xee>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 80109f4:	4b1a      	ldr	r3, [pc, #104]	; (8010a60 <lv_refr_join_area+0x12c>)
 80109f6:	681a      	ldr	r2, [r3, #0]
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	3306      	adds	r3, #6
 80109fc:	00db      	lsls	r3, r3, #3
 80109fe:	4413      	add	r3, r2
 8010a00:	463a      	mov	r2, r7
 8010a02:	4611      	mov	r1, r2
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7ff fcb0 	bl	801036a <lv_area_copy>

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
 8010a0a:	4b15      	ldr	r3, [pc, #84]	; (8010a60 <lv_refr_join_area+0x12c>)
 8010a0c:	681a      	ldr	r2, [r3, #0]
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	4413      	add	r3, r2
 8010a12:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8010a16:	2201      	movs	r2, #1
 8010a18:	701a      	strb	r2, [r3, #0]
 8010a1a:	e002      	b.n	8010a22 <lv_refr_join_area+0xee>
                continue;
 8010a1c:	bf00      	nop
 8010a1e:	e000      	b.n	8010a22 <lv_refr_join_area+0xee>
                continue;
 8010a20:	bf00      	nop
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	3301      	adds	r3, #1
 8010a26:	60fb      	str	r3, [r7, #12]
 8010a28:	4b0d      	ldr	r3, [pc, #52]	; (8010a60 <lv_refr_join_area+0x12c>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8010a30:	461a      	mov	r2, r3
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	4293      	cmp	r3, r2
 8010a36:	d38f      	bcc.n	8010958 <lv_refr_join_area+0x24>
 8010a38:	e000      	b.n	8010a3c <lv_refr_join_area+0x108>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8010a3a:	bf00      	nop
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	3301      	adds	r3, #1
 8010a40:	60bb      	str	r3, [r7, #8]
 8010a42:	4b07      	ldr	r3, [pc, #28]	; (8010a60 <lv_refr_join_area+0x12c>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8010a4a:	461a      	mov	r2, r3
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	4293      	cmp	r3, r2
 8010a50:	f4ff af76 	bcc.w	8010940 <lv_refr_join_area+0xc>
            }
        }
    }
}
 8010a54:	bf00      	nop
 8010a56:	bf00      	nop
 8010a58:	3710      	adds	r7, #16
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	20000780 	.word	0x20000780

08010a64 <refr_invalid_areas>:

/**
 * Refresh the joined areas
 */
static void refr_invalid_areas(void)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b082      	sub	sp, #8
 8010a68:	af00      	add	r7, sp, #0
    px_num = 0;
 8010a6a:	4b4e      	ldr	r3, [pc, #312]	; (8010ba4 <refr_invalid_areas+0x140>)
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	601a      	str	r2, [r3, #0]

    if(disp_refr->inv_p == 0) return;
 8010a70:	4b4d      	ldr	r3, [pc, #308]	; (8010ba8 <refr_invalid_areas+0x144>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	f000 808e 	beq.w	8010b9a <refr_invalid_areas+0x136>

    /*Find the last area which will be drawn*/
    int32_t i;
    int32_t last_i = 0;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	603b      	str	r3, [r7, #0]
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 8010a82:	4b49      	ldr	r3, [pc, #292]	; (8010ba8 <refr_invalid_areas+0x144>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8010a8a:	3b01      	subs	r3, #1
 8010a8c:	607b      	str	r3, [r7, #4]
 8010a8e:	e00e      	b.n	8010aae <refr_invalid_areas+0x4a>
        if(disp_refr->inv_area_joined[i] == 0) {
 8010a90:	4b45      	ldr	r3, [pc, #276]	; (8010ba8 <refr_invalid_areas+0x144>)
 8010a92:	681a      	ldr	r2, [r3, #0]
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	4413      	add	r3, r2
 8010a98:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d102      	bne.n	8010aa8 <refr_invalid_areas+0x44>
            last_i = i;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	603b      	str	r3, [r7, #0]
            break;
 8010aa6:	e005      	b.n	8010ab4 <refr_invalid_areas+0x50>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	3b01      	subs	r3, #1
 8010aac:	607b      	str	r3, [r7, #4]
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	daed      	bge.n	8010a90 <refr_invalid_areas+0x2c>
        }
    }

    /*Notify the display driven rendering has started*/
    if(disp_refr->driver->render_start_cb) {
 8010ab4:	4b3c      	ldr	r3, [pc, #240]	; (8010ba8 <refr_invalid_areas+0x144>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d008      	beq.n	8010ad2 <refr_invalid_areas+0x6e>
        disp_refr->driver->render_start_cb(disp_refr->driver);
 8010ac0:	4b39      	ldr	r3, [pc, #228]	; (8010ba8 <refr_invalid_areas+0x144>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ac8:	4a37      	ldr	r2, [pc, #220]	; (8010ba8 <refr_invalid_areas+0x144>)
 8010aca:	6812      	ldr	r2, [r2, #0]
 8010acc:	6812      	ldr	r2, [r2, #0]
 8010ace:	4610      	mov	r0, r2
 8010ad0:	4798      	blx	r3
    }

    disp_refr->driver->draw_buf->last_area = 0;
 8010ad2:	4b35      	ldr	r3, [pc, #212]	; (8010ba8 <refr_invalid_areas+0x144>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	68da      	ldr	r2, [r3, #12]
 8010ada:	7e13      	ldrb	r3, [r2, #24]
 8010adc:	f36f 0300 	bfc	r3, #0, #1
 8010ae0:	7613      	strb	r3, [r2, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 8010ae2:	4b31      	ldr	r3, [pc, #196]	; (8010ba8 <refr_invalid_areas+0x144>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	68da      	ldr	r2, [r3, #12]
 8010aea:	7e13      	ldrb	r3, [r2, #24]
 8010aec:	f36f 0341 	bfc	r3, #1, #1
 8010af0:	7613      	strb	r3, [r2, #24]
    disp_refr->rendering_in_progress = true;
 8010af2:	4b2d      	ldr	r3, [pc, #180]	; (8010ba8 <refr_invalid_areas+0x144>)
 8010af4:	681a      	ldr	r2, [r3, #0]
 8010af6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8010afa:	f043 0304 	orr.w	r3, r3, #4
 8010afe:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

    for(i = 0; i < disp_refr->inv_p; i++) {
 8010b02:	2300      	movs	r3, #0
 8010b04:	607b      	str	r3, [r7, #4]
 8010b06:	e037      	b.n	8010b78 <refr_invalid_areas+0x114>
        /*Refresh the unjoined areas*/
        if(disp_refr->inv_area_joined[i] == 0) {
 8010b08:	4b27      	ldr	r3, [pc, #156]	; (8010ba8 <refr_invalid_areas+0x144>)
 8010b0a:	681a      	ldr	r2, [r3, #0]
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	4413      	add	r3, r2
 8010b10:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d12b      	bne.n	8010b72 <refr_invalid_areas+0x10e>

            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d107      	bne.n	8010b32 <refr_invalid_areas+0xce>
 8010b22:	4b21      	ldr	r3, [pc, #132]	; (8010ba8 <refr_invalid_areas+0x144>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	68da      	ldr	r2, [r3, #12]
 8010b2a:	7e13      	ldrb	r3, [r2, #24]
 8010b2c:	f043 0301 	orr.w	r3, r3, #1
 8010b30:	7613      	strb	r3, [r2, #24]
            disp_refr->driver->draw_buf->last_part = 0;
 8010b32:	4b1d      	ldr	r3, [pc, #116]	; (8010ba8 <refr_invalid_areas+0x144>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	68da      	ldr	r2, [r3, #12]
 8010b3a:	7e13      	ldrb	r3, [r2, #24]
 8010b3c:	f36f 0341 	bfc	r3, #1, #1
 8010b40:	7613      	strb	r3, [r2, #24]
            refr_area(&disp_refr->inv_areas[i]);
 8010b42:	4b19      	ldr	r3, [pc, #100]	; (8010ba8 <refr_invalid_areas+0x144>)
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	3306      	adds	r3, #6
 8010b4a:	00db      	lsls	r3, r3, #3
 8010b4c:	4413      	add	r3, r2
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f000 f82c 	bl	8010bac <refr_area>

            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 8010b54:	4b14      	ldr	r3, [pc, #80]	; (8010ba8 <refr_invalid_areas+0x144>)
 8010b56:	681a      	ldr	r2, [r3, #0]
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	3306      	adds	r3, #6
 8010b5c:	00db      	lsls	r3, r3, #3
 8010b5e:	4413      	add	r3, r2
 8010b60:	4618      	mov	r0, r3
 8010b62:	f011 fe1a 	bl	802279a <lv_area_get_size>
 8010b66:	4602      	mov	r2, r0
 8010b68:	4b0e      	ldr	r3, [pc, #56]	; (8010ba4 <refr_invalid_areas+0x140>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	4413      	add	r3, r2
 8010b6e:	4a0d      	ldr	r2, [pc, #52]	; (8010ba4 <refr_invalid_areas+0x140>)
 8010b70:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	3301      	adds	r3, #1
 8010b76:	607b      	str	r3, [r7, #4]
 8010b78:	4b0b      	ldr	r3, [pc, #44]	; (8010ba8 <refr_invalid_areas+0x144>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 8010b80:	461a      	mov	r2, r3
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	4293      	cmp	r3, r2
 8010b86:	dbbf      	blt.n	8010b08 <refr_invalid_areas+0xa4>
        }
    }

    disp_refr->rendering_in_progress = false;
 8010b88:	4b07      	ldr	r3, [pc, #28]	; (8010ba8 <refr_invalid_areas+0x144>)
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8010b90:	f36f 0382 	bfc	r3, #2, #1
 8010b94:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8010b98:	e000      	b.n	8010b9c <refr_invalid_areas+0x138>
    if(disp_refr->inv_p == 0) return;
 8010b9a:	bf00      	nop
}
 8010b9c:	3708      	adds	r7, #8
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	2000077c 	.word	0x2000077c
 8010ba8:	20000780 	.word	0x20000780

08010bac <refr_area>:
/**
 * Refresh an area if there is Virtual Display Buffer
 * @param area_p  pointer to an area to refresh
 */
static void refr_area(const lv_area_t * area_p)
{
 8010bac:	b590      	push	{r4, r7, lr}
 8010bae:	b08f      	sub	sp, #60	; 0x3c
 8010bb0:	af02      	add	r7, sp, #8
 8010bb2:	6078      	str	r0, [r7, #4]
    lv_draw_ctx_t * draw_ctx = disp_refr->driver->draw_ctx;
 8010bb4:	4b8e      	ldr	r3, [pc, #568]	; (8010df0 <refr_area+0x244>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8010bbe:	4b8c      	ldr	r3, [pc, #560]	; (8010df0 <refr_area+0x244>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	68db      	ldr	r3, [r3, #12]
 8010bc6:	689a      	ldr	r2, [r3, #8]
 8010bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bca:	601a      	str	r2, [r3, #0]

    /*With full refresh just redraw directly into the buffer*/
    /*In direct mode draw directly on the absolute coordinates of the buffer*/
    if(disp_refr->driver->full_refresh || disp_refr->driver->direct_mode) {
 8010bcc:	4b88      	ldr	r3, [pc, #544]	; (8010df0 <refr_area+0x244>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	7c1b      	ldrb	r3, [r3, #16]
 8010bd4:	f003 0302 	and.w	r3, r3, #2
 8010bd8:	b2db      	uxtb	r3, r3
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d108      	bne.n	8010bf0 <refr_area+0x44>
 8010bde:	4b84      	ldr	r3, [pc, #528]	; (8010df0 <refr_area+0x244>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	7c1b      	ldrb	r3, [r3, #16]
 8010be6:	f003 0301 	and.w	r3, r3, #1
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d04f      	beq.n	8010c90 <refr_area+0xe4>
        lv_area_t disp_area;
        lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 8010bf0:	4b7f      	ldr	r3, [pc, #508]	; (8010df0 <refr_area+0x244>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f011 f937 	bl	8021e68 <lv_disp_get_hor_res>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	3b01      	subs	r3, #1
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	b21c      	sxth	r4, r3
 8010c04:	4b7a      	ldr	r3, [pc, #488]	; (8010df0 <refr_area+0x244>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f011 f953 	bl	8021eb4 <lv_disp_get_ver_res>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	3b01      	subs	r3, #1
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	b21b      	sxth	r3, r3
 8010c18:	f107 000c 	add.w	r0, r7, #12
 8010c1c:	9300      	str	r3, [sp, #0]
 8010c1e:	4623      	mov	r3, r4
 8010c20:	2200      	movs	r2, #0
 8010c22:	2100      	movs	r1, #0
 8010c24:	f011 fd82 	bl	802272c <lv_area_set>
        draw_ctx->buf_area = &disp_area;
 8010c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c2a:	f107 020c 	add.w	r2, r7, #12
 8010c2e:	605a      	str	r2, [r3, #4]

        if(disp_refr->driver->full_refresh) {
 8010c30:	4b6f      	ldr	r3, [pc, #444]	; (8010df0 <refr_area+0x244>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	7c1b      	ldrb	r3, [r3, #16]
 8010c38:	f003 0302 	and.w	r3, r3, #2
 8010c3c:	b2db      	uxtb	r3, r3
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d00f      	beq.n	8010c62 <refr_area+0xb6>
            disp_refr->driver->draw_buf->last_part = 1;
 8010c42:	4b6b      	ldr	r3, [pc, #428]	; (8010df0 <refr_area+0x244>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	68da      	ldr	r2, [r3, #12]
 8010c4a:	7e13      	ldrb	r3, [r2, #24]
 8010c4c:	f043 0302 	orr.w	r3, r3, #2
 8010c50:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = &disp_area;
 8010c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c54:	f107 020c 	add.w	r2, r7, #12
 8010c58:	609a      	str	r2, [r3, #8]
            refr_area_part(draw_ctx);
 8010c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c5c:	f000 f8ca 	bl	8010df4 <refr_area_part>
 8010c60:	e0c3      	b.n	8010dea <refr_area+0x23e>
        }
        else {
            disp_refr->driver->draw_buf->last_part = disp_refr->driver->draw_buf->last_area;
 8010c62:	4b63      	ldr	r3, [pc, #396]	; (8010df0 <refr_area+0x244>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	68db      	ldr	r3, [r3, #12]
 8010c6a:	4a61      	ldr	r2, [pc, #388]	; (8010df0 <refr_area+0x244>)
 8010c6c:	6812      	ldr	r2, [r2, #0]
 8010c6e:	6812      	ldr	r2, [r2, #0]
 8010c70:	68d2      	ldr	r2, [r2, #12]
 8010c72:	699b      	ldr	r3, [r3, #24]
 8010c74:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010c78:	b2d9      	uxtb	r1, r3
 8010c7a:	7e13      	ldrb	r3, [r2, #24]
 8010c7c:	f361 0341 	bfi	r3, r1, #1, #1
 8010c80:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = area_p;
 8010c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c84:	687a      	ldr	r2, [r7, #4]
 8010c86:	609a      	str	r2, [r3, #8]
            refr_area_part(draw_ctx);
 8010c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c8a:	f000 f8b3 	bl	8010df4 <refr_area_part>
 8010c8e:	e0ac      	b.n	8010dea <refr_area+0x23e>
        return;
    }

    /*Normal refresh: draw the area in parts*/
    /*Calculate the max row num*/
    lv_coord_t w = lv_area_get_width(area_p);
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f7ff fb89 	bl	80103a8 <lv_area_get_width>
 8010c96:	4603      	mov	r3, r0
 8010c98:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t h = lv_area_get_height(area_p);
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f7ff fb9b 	bl	80103d6 <lv_area_get_height>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	84bb      	strh	r3, [r7, #36]	; 0x24
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8010caa:	4b51      	ldr	r3, [pc, #324]	; (8010df0 <refr_area+0x244>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f011 f900 	bl	8021eb4 <lv_disp_get_ver_res>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	429c      	cmp	r4, r3
 8010cb8:	db0a      	blt.n	8010cd0 <refr_area+0x124>
                    lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8010cba:	4b4d      	ldr	r3, [pc, #308]	; (8010df0 <refr_area+0x244>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f011 f8f8 	bl	8021eb4 <lv_disp_get_ver_res>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	b29b      	uxth	r3, r3
 8010cc8:	3b01      	subs	r3, #1
 8010cca:	b29b      	uxth	r3, r3
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 8010ccc:	b21b      	sxth	r3, r3
 8010cce:	e002      	b.n	8010cd6 <refr_area+0x12a>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010cd6:	847b      	strh	r3, [r7, #34]	; 0x22

    int32_t max_row = get_max_row(disp_refr, w, h);
 8010cd8:	4b45      	ldr	r3, [pc, #276]	; (8010df0 <refr_area+0x244>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8010ce0:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f000 fd59 	bl	801179c <get_max_row>
 8010cea:	4603      	mov	r3, r0
 8010cec:	61fb      	str	r3, [r7, #28]

    lv_coord_t row;
    lv_coord_t row_last = 0;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    lv_area_t sub_area;
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	885b      	ldrh	r3, [r3, #2]
 8010cf6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010cf8:	e042      	b.n	8010d80 <refr_area+0x1d4>
        /*Calc. the next y coordinates of draw_buf*/
        sub_area.x1 = area_p->x1;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010d00:	82bb      	strh	r3, [r7, #20]
        sub_area.x2 = area_p->x2;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010d08:	833b      	strh	r3, [r7, #24]
        sub_area.y1 = row;
 8010d0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d0c:	82fb      	strh	r3, [r7, #22]
        sub_area.y2 = row + max_row - 1;
 8010d0e:	69fb      	ldr	r3, [r7, #28]
 8010d10:	b29a      	uxth	r2, r3
 8010d12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d14:	4413      	add	r3, r2
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	3b01      	subs	r3, #1
 8010d1a:	b29b      	uxth	r3, r3
 8010d1c:	b21b      	sxth	r3, r3
 8010d1e:	837b      	strh	r3, [r7, #26]
        draw_ctx->buf_area = &sub_area;
 8010d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d22:	f107 0214 	add.w	r2, r7, #20
 8010d26:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &sub_area;
 8010d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2a:	f107 0214 	add.w	r2, r7, #20
 8010d2e:	609a      	str	r2, [r3, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8010d30:	4b2f      	ldr	r3, [pc, #188]	; (8010df0 <refr_area+0x244>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	689a      	ldr	r2, [r3, #8]
 8010d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3c:	601a      	str	r2, [r3, #0]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 8010d3e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010d42:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8010d46:	429a      	cmp	r2, r3
 8010d48:	da01      	bge.n	8010d4e <refr_area+0x1a2>
 8010d4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d4c:	837b      	strh	r3, [r7, #26]
        row_last = sub_area.y2;
 8010d4e:	8b7b      	ldrh	r3, [r7, #26]
 8010d50:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 8010d52:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8010d56:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d107      	bne.n	8010d6e <refr_area+0x1c2>
 8010d5e:	4b24      	ldr	r3, [pc, #144]	; (8010df0 <refr_area+0x244>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	68da      	ldr	r2, [r3, #12]
 8010d66:	7e13      	ldrb	r3, [r2, #24]
 8010d68:	f043 0302 	orr.w	r3, r3, #2
 8010d6c:	7613      	strb	r3, [r2, #24]
        refr_area_part(draw_ctx);
 8010d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d70:	f000 f840 	bl	8010df4 <refr_area_part>
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	b29a      	uxth	r2, r3
 8010d78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d7a:	4413      	add	r3, r2
 8010d7c:	b29b      	uxth	r3, r3
 8010d7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010d80:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8010d84:	69fb      	ldr	r3, [r7, #28]
 8010d86:	4413      	add	r3, r2
 8010d88:	1e5a      	subs	r2, r3, #1
 8010d8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010d8e:	429a      	cmp	r2, r3
 8010d90:	ddb3      	ble.n	8010cfa <refr_area+0x14e>
    }

    /*If the last y coordinates are not handled yet ...*/
    if(y2 != row_last) {
 8010d92:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8010d96:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d025      	beq.n	8010dea <refr_area+0x23e>
        /*Calc. the next y coordinates of draw_buf*/
        sub_area.x1 = area_p->x1;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010da4:	82bb      	strh	r3, [r7, #20]
        sub_area.x2 = area_p->x2;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010dac:	833b      	strh	r3, [r7, #24]
        sub_area.y1 = row;
 8010dae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010db0:	82fb      	strh	r3, [r7, #22]
        sub_area.y2 = y2;
 8010db2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010db4:	837b      	strh	r3, [r7, #26]
        draw_ctx->buf_area = &sub_area;
 8010db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db8:	f107 0214 	add.w	r2, r7, #20
 8010dbc:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &sub_area;
 8010dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc0:	f107 0214 	add.w	r2, r7, #20
 8010dc4:	609a      	str	r2, [r3, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 8010dc6:	4b0a      	ldr	r3, [pc, #40]	; (8010df0 <refr_area+0x244>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	68db      	ldr	r3, [r3, #12]
 8010dce:	689a      	ldr	r2, [r3, #8]
 8010dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd2:	601a      	str	r2, [r3, #0]
        disp_refr->driver->draw_buf->last_part = 1;
 8010dd4:	4b06      	ldr	r3, [pc, #24]	; (8010df0 <refr_area+0x244>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	68da      	ldr	r2, [r3, #12]
 8010ddc:	7e13      	ldrb	r3, [r2, #24]
 8010dde:	f043 0302 	orr.w	r3, r3, #2
 8010de2:	7613      	strb	r3, [r2, #24]
        refr_area_part(draw_ctx);
 8010de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010de6:	f000 f805 	bl	8010df4 <refr_area_part>
    }
}
 8010dea:	3734      	adds	r7, #52	; 0x34
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd90      	pop	{r4, r7, pc}
 8010df0:	20000780 	.word	0x20000780

08010df4 <refr_area_part>:

static void refr_area_part(lv_draw_ctx_t * draw_ctx)
{
 8010df4:	b590      	push	{r4, r7, lr}
 8010df6:	b09d      	sub	sp, #116	; 0x74
 8010df8:	af02      	add	r7, sp, #8
 8010dfa:	6078      	str	r0, [r7, #4]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8010dfc:	4b89      	ldr	r3, [pc, #548]	; (8011024 <refr_area_part+0x230>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	4618      	mov	r0, r3
 8010e02:	f011 f8a9 	bl	8021f58 <lv_disp_get_draw_buf>
 8010e06:	65f8      	str	r0, [r7, #92]	; 0x5c

    /* Below the `area_p` area will be redrawn into the draw buffer.
     * In single buffered mode wait here until the buffer is freed.
     * In full double buffered mode wait here while the buffers are swapped and a buffer becomes available*/
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 8010e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e0a:	68da      	ldr	r2, [r3, #12]
 8010e0c:	4b85      	ldr	r3, [pc, #532]	; (8011024 <refr_area_part+0x230>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010e16:	4619      	mov	r1, r3
 8010e18:	4b82      	ldr	r3, [pc, #520]	; (8011024 <refr_area_part+0x230>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010e22:	fb01 f303 	mul.w	r3, r1, r3
 8010e26:	429a      	cmp	r2, r3
 8010e28:	bf0c      	ite	eq
 8010e2a:	2301      	moveq	r3, #1
 8010e2c:	2300      	movne	r3, #0
 8010e2e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 8010e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d003      	beq.n	8010e42 <refr_area_part+0x4e>
 8010e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d01b      	beq.n	8010e7a <refr_area_part+0x86>
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 8010e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e44:	681b      	ldr	r3, [r3, #0]
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d01b      	beq.n	8010e82 <refr_area_part+0x8e>
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 8010e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d017      	beq.n	8010e82 <refr_area_part+0x8e>
 8010e52:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d013      	beq.n	8010e82 <refr_area_part+0x8e>
        while(draw_buf->flushing) {
 8010e5a:	e00e      	b.n	8010e7a <refr_area_part+0x86>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8010e5c:	4b71      	ldr	r3, [pc, #452]	; (8011024 <refr_area_part+0x230>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d008      	beq.n	8010e7a <refr_area_part+0x86>
 8010e68:	4b6e      	ldr	r3, [pc, #440]	; (8011024 <refr_area_part+0x230>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e70:	4a6c      	ldr	r2, [pc, #432]	; (8011024 <refr_area_part+0x230>)
 8010e72:	6812      	ldr	r2, [r2, #0]
 8010e74:	6812      	ldr	r2, [r2, #0]
 8010e76:	4610      	mov	r0, r2
 8010e78:	4798      	blx	r3
        while(draw_buf->flushing) {
 8010e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e7c:	691b      	ldr	r3, [r3, #16]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d1ec      	bne.n	8010e5c <refr_area_part+0x68>
            }
        }
#endif
    }

    lv_obj_t * top_act_scr = NULL;
 8010e82:	2300      	movs	r3, #0
 8010e84:	667b      	str	r3, [r7, #100]	; 0x64
    lv_obj_t * top_prev_scr = NULL;
 8010e86:	2300      	movs	r3, #0
 8010e88:	663b      	str	r3, [r7, #96]	; 0x60

    /*Get the most top object which is not covered by others*/
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	685c      	ldr	r4, [r3, #4]
 8010e8e:	4b65      	ldr	r3, [pc, #404]	; (8011024 <refr_area_part+0x230>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7f5 fabe 	bl	8006414 <lv_disp_get_scr_act>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	f000 f8fd 	bl	801109c <lv_refr_get_top_obj>
 8010ea2:	6678      	str	r0, [r7, #100]	; 0x64
    if(disp_refr->prev_scr) {
 8010ea4:	4b5f      	ldr	r3, [pc, #380]	; (8011024 <refr_area_part+0x230>)
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	695b      	ldr	r3, [r3, #20]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d009      	beq.n	8010ec2 <refr_area_part+0xce>
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	685a      	ldr	r2, [r3, #4]
 8010eb2:	4b5c      	ldr	r3, [pc, #368]	; (8011024 <refr_area_part+0x230>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	695b      	ldr	r3, [r3, #20]
 8010eb8:	4619      	mov	r1, r3
 8010eba:	4610      	mov	r0, r2
 8010ebc:	f000 f8ee 	bl	801109c <lv_refr_get_top_obj>
 8010ec0:	6638      	str	r0, [r7, #96]	; 0x60
    }

    /*Draw a display background if there is no top object*/
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 8010ec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	f040 8087 	bne.w	8010fd8 <refr_area_part+0x1e4>
 8010eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	f040 8083 	bne.w	8010fd8 <refr_area_part+0x1e4>
        lv_area_t a;
        lv_area_set(&a, 0, 0,
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 8010ed2:	4b54      	ldr	r3, [pc, #336]	; (8011024 <refr_area_part+0x230>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f010 ffc6 	bl	8021e68 <lv_disp_get_hor_res>
 8010edc:	4603      	mov	r3, r0
 8010ede:	b29b      	uxth	r3, r3
 8010ee0:	3b01      	subs	r3, #1
 8010ee2:	b29b      	uxth	r3, r3
        lv_area_set(&a, 0, 0,
 8010ee4:	b21c      	sxth	r4, r3
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 8010ee6:	4b4f      	ldr	r3, [pc, #316]	; (8011024 <refr_area_part+0x230>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	4618      	mov	r0, r3
 8010eec:	f010 ffe2 	bl	8021eb4 <lv_disp_get_ver_res>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	3b01      	subs	r3, #1
 8010ef6:	b29b      	uxth	r3, r3
        lv_area_set(&a, 0, 0,
 8010ef8:	b21b      	sxth	r3, r3
 8010efa:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8010efe:	9300      	str	r3, [sp, #0]
 8010f00:	4623      	mov	r3, r4
 8010f02:	2200      	movs	r2, #0
 8010f04:	2100      	movs	r1, #0
 8010f06:	f011 fc11 	bl	802272c <lv_area_set>
        if(draw_ctx->draw_bg) {
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d020      	beq.n	8010f54 <refr_area_part+0x160>
            lv_draw_rect_dsc_t dsc;
            lv_draw_rect_dsc_init(&dsc);
 8010f12:	f107 0308 	add.w	r3, r7, #8
 8010f16:	4618      	mov	r0, r3
 8010f18:	f005 f91e 	bl	8016158 <lv_draw_rect_dsc_init>
            dsc.bg_img_src = disp_refr->bg_img;
 8010f1c:	4b41      	ldr	r3, [pc, #260]	; (8011024 <refr_area_part+0x230>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f22:	617b      	str	r3, [r7, #20]
            dsc.bg_img_opa = disp_refr->bg_opa;
 8010f24:	4b3f      	ldr	r3, [pc, #252]	; (8011024 <refr_area_part+0x230>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010f2c:	777b      	strb	r3, [r7, #29]
            dsc.bg_color = disp_refr->bg_color;
 8010f2e:	4b3d      	ldr	r3, [pc, #244]	; (8011024 <refr_area_part+0x230>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8010f36:	733b      	strb	r3, [r7, #12]
            dsc.bg_opa = disp_refr->bg_opa;
 8010f38:	4b3a      	ldr	r3, [pc, #232]	; (8011024 <refr_area_part+0x230>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010f40:	72fb      	strb	r3, [r7, #11]
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f46:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010f4a:	f107 0108 	add.w	r1, r7, #8
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	4798      	blx	r3
 8010f52:	e041      	b.n	8010fd8 <refr_area_part+0x1e4>
        }
        else if(disp_refr->bg_img) {
 8010f54:	4b33      	ldr	r3, [pc, #204]	; (8011024 <refr_area_part+0x230>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d025      	beq.n	8010faa <refr_area_part+0x1b6>
            lv_img_header_t header;
            lv_res_t res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 8010f5e:	4b31      	ldr	r3, [pc, #196]	; (8011024 <refr_area_part+0x230>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f64:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8010f68:	4611      	mov	r1, r2
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f005 fb00 	bl	8016570 <lv_img_decoder_get_info>
 8010f70:	4603      	mov	r3, r0
 8010f72:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
            if(res == LV_RES_OK) {
 8010f76:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8010f7a:	2b01      	cmp	r3, #1
 8010f7c:	d12c      	bne.n	8010fd8 <refr_area_part+0x1e4>
                lv_draw_img_dsc_t dsc;
                lv_draw_img_dsc_init(&dsc);
 8010f7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010f82:	4618      	mov	r0, r3
 8010f84:	f001 f997 	bl	80122b6 <lv_draw_img_dsc_init>
                dsc.opa = disp_refr->bg_opa;
 8010f88:	4b26      	ldr	r3, [pc, #152]	; (8011024 <refr_area_part+0x230>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010f90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 8010f94:	4b23      	ldr	r3, [pc, #140]	; (8011024 <refr_area_part+0x230>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f9a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010f9e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f001 f9a4 	bl	80122f0 <lv_draw_img>
 8010fa8:	e016      	b.n	8010fd8 <refr_area_part+0x1e4>
                LV_LOG_WARN("Can't draw the background image");
            }
        }
        else {
            lv_draw_rect_dsc_t dsc;
            lv_draw_rect_dsc_init(&dsc);
 8010faa:	f107 0308 	add.w	r3, r7, #8
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f005 f8d2 	bl	8016158 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 8010fb4:	4b1b      	ldr	r3, [pc, #108]	; (8011024 <refr_area_part+0x230>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8010fbc:	733b      	strb	r3, [r7, #12]
            dsc.bg_opa = disp_refr->bg_opa;
 8010fbe:	4b19      	ldr	r3, [pc, #100]	; (8011024 <refr_area_part+0x230>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010fc6:	72fb      	strb	r3, [r7, #11]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	685a      	ldr	r2, [r3, #4]
 8010fcc:	f107 0308 	add.w	r3, r7, #8
 8010fd0:	4619      	mov	r1, r3
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f005 f904 	bl	80161e0 <lv_draw_rect>
        }
    }

    if(disp_refr->draw_prev_over_act) {
 8010fd8:	4b12      	ldr	r3, [pc, #72]	; (8011024 <refr_area_part+0x230>)
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fe0:	f003 0301 	and.w	r3, r3, #1
 8010fe4:	b2db      	uxtb	r3, r3
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d01e      	beq.n	8011028 <refr_area_part+0x234>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 8010fea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d103      	bne.n	8010ff8 <refr_area_part+0x204>
 8010ff0:	4b0c      	ldr	r3, [pc, #48]	; (8011024 <refr_area_part+0x230>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	691b      	ldr	r3, [r3, #16]
 8010ff6:	667b      	str	r3, [r7, #100]	; 0x64
        refr_obj_and_children(draw_ctx, top_act_scr);
 8010ff8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f000 f8b4 	bl	8011168 <refr_obj_and_children>

        /*Refresh the previous screen if any*/
        if(disp_refr->prev_scr) {
 8011000:	4b08      	ldr	r3, [pc, #32]	; (8011024 <refr_area_part+0x230>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	695b      	ldr	r3, [r3, #20]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d029      	beq.n	801105e <refr_area_part+0x26a>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 801100a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801100c:	2b00      	cmp	r3, #0
 801100e:	d103      	bne.n	8011018 <refr_area_part+0x224>
 8011010:	4b04      	ldr	r3, [pc, #16]	; (8011024 <refr_area_part+0x230>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	695b      	ldr	r3, [r3, #20]
 8011016:	663b      	str	r3, [r7, #96]	; 0x60
            refr_obj_and_children(draw_ctx, top_prev_scr);
 8011018:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f000 f8a4 	bl	8011168 <refr_obj_and_children>
 8011020:	e01d      	b.n	801105e <refr_area_part+0x26a>
 8011022:	bf00      	nop
 8011024:	20000780 	.word	0x20000780
        }
    }
    else {
        /*Refresh the previous screen if any*/
        if(disp_refr->prev_scr) {
 8011028:	4b1b      	ldr	r3, [pc, #108]	; (8011098 <refr_area_part+0x2a4>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	695b      	ldr	r3, [r3, #20]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d00a      	beq.n	8011048 <refr_area_part+0x254>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 8011032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011034:	2b00      	cmp	r3, #0
 8011036:	d103      	bne.n	8011040 <refr_area_part+0x24c>
 8011038:	4b17      	ldr	r3, [pc, #92]	; (8011098 <refr_area_part+0x2a4>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	695b      	ldr	r3, [r3, #20]
 801103e:	663b      	str	r3, [r7, #96]	; 0x60
            refr_obj_and_children(draw_ctx, top_prev_scr);
 8011040:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f000 f890 	bl	8011168 <refr_obj_and_children>
        }

        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 8011048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801104a:	2b00      	cmp	r3, #0
 801104c:	d103      	bne.n	8011056 <refr_area_part+0x262>
 801104e:	4b12      	ldr	r3, [pc, #72]	; (8011098 <refr_area_part+0x2a4>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	691b      	ldr	r3, [r3, #16]
 8011054:	667b      	str	r3, [r7, #100]	; 0x64
        refr_obj_and_children(draw_ctx, top_act_scr);
 8011056:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f000 f885 	bl	8011168 <refr_obj_and_children>
    }

    /*Also refresh top and sys layer unconditionally*/
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 801105e:	4b0e      	ldr	r3, [pc, #56]	; (8011098 <refr_area_part+0x2a4>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	4618      	mov	r0, r3
 8011064:	f7f5 fa10 	bl	8006488 <lv_disp_get_layer_top>
 8011068:	4603      	mov	r3, r0
 801106a:	4619      	mov	r1, r3
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f000 f87b 	bl	8011168 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_sys(disp_refr));
 8011072:	4b09      	ldr	r3, [pc, #36]	; (8011098 <refr_area_part+0x2a4>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	4618      	mov	r0, r3
 8011078:	f7f5 fa1b 	bl	80064b2 <lv_disp_get_layer_sys>
 801107c:	4603      	mov	r3, r0
 801107e:	4619      	mov	r1, r3
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f000 f871 	bl	8011168 <refr_obj_and_children>

    draw_buf_flush(disp_refr);
 8011086:	4b04      	ldr	r3, [pc, #16]	; (8011098 <refr_area_part+0x2a4>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	4618      	mov	r0, r3
 801108c:	f000 ff22 	bl	8011ed4 <draw_buf_flush>
}
 8011090:	bf00      	nop
 8011092:	376c      	adds	r7, #108	; 0x6c
 8011094:	46bd      	mov	sp, r7
 8011096:	bd90      	pop	{r4, r7, pc}
 8011098:	20000780 	.word	0x20000780

0801109c <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b088      	sub	sp, #32
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 80110a6:	2300      	movs	r3, #0
 80110a8:	61fb      	str	r3, [r7, #28]

    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	3314      	adds	r3, #20
 80110ae:	2200      	movs	r2, #0
 80110b0:	4619      	mov	r1, r3
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f011 fde2 	bl	8022c7c <_lv_area_is_in>
 80110b8:	4603      	mov	r3, r0
 80110ba:	f083 0301 	eor.w	r3, r3, #1
 80110be:	b2db      	uxtb	r3, r3
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d001      	beq.n	80110c8 <lv_refr_get_top_obj+0x2c>
 80110c4:	2300      	movs	r3, #0
 80110c6:	e04a      	b.n	801115e <lv_refr_get_top_obj+0xc2>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 80110c8:	2101      	movs	r1, #1
 80110ca:	6838      	ldr	r0, [r7, #0]
 80110cc:	f7f6 ff7f 	bl	8007fce <lv_obj_has_flag>
 80110d0:	4603      	mov	r3, r0
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d001      	beq.n	80110da <lv_refr_get_top_obj+0x3e>
 80110d6:	2300      	movs	r3, #0
 80110d8:	e041      	b.n	801115e <lv_refr_get_top_obj+0xc2>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 80110da:	6838      	ldr	r0, [r7, #0]
 80110dc:	f7f9 f870 	bl	800a1c0 <_lv_obj_get_layer_type>
 80110e0:	4603      	mov	r3, r0
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d001      	beq.n	80110ea <lv_refr_get_top_obj+0x4e>
 80110e6:	2300      	movs	r3, #0
 80110e8:	e039      	b.n	801115e <lv_refr_get_top_obj+0xc2>

    /*If this object is fully cover the draw area then check the children too*/
    lv_cover_check_info_t info;
    info.res = LV_COVER_RES_COVER;
 80110ea:	2300      	movs	r3, #0
 80110ec:	723b      	strb	r3, [r7, #8]
    info.area = area_p;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	60fb      	str	r3, [r7, #12]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 80110f2:	f107 0308 	add.w	r3, r7, #8
 80110f6:	461a      	mov	r2, r3
 80110f8:	2112      	movs	r1, #18
 80110fa:	6838      	ldr	r0, [r7, #0]
 80110fc:	f7f5 fd8e 	bl	8006c1c <lv_event_send>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 8011100:	7a3b      	ldrb	r3, [r7, #8]
 8011102:	2b02      	cmp	r3, #2
 8011104:	d101      	bne.n	801110a <lv_refr_get_top_obj+0x6e>
 8011106:	2300      	movs	r3, #0
 8011108:	e029      	b.n	801115e <lv_refr_get_top_obj+0xc2>

    int32_t i;
    int32_t child_cnt = lv_obj_get_child_cnt(obj);
 801110a:	6838      	ldr	r0, [r7, #0]
 801110c:	f7ff f808 	bl	8010120 <lv_obj_get_child_cnt>
 8011110:	4603      	mov	r3, r0
 8011112:	617b      	str	r3, [r7, #20]
    for(i = child_cnt - 1; i >= 0; i--) {
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	3b01      	subs	r3, #1
 8011118:	61bb      	str	r3, [r7, #24]
 801111a:	e012      	b.n	8011142 <lv_refr_get_top_obj+0xa6>
        lv_obj_t * child = obj->spec_attr->children[i];
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	689b      	ldr	r3, [r3, #8]
 8011120:	681a      	ldr	r2, [r3, #0]
 8011122:	69bb      	ldr	r3, [r7, #24]
 8011124:	009b      	lsls	r3, r3, #2
 8011126:	4413      	add	r3, r2
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	613b      	str	r3, [r7, #16]
        found_p = lv_refr_get_top_obj(area_p, child);
 801112c:	6939      	ldr	r1, [r7, #16]
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f7ff ffb4 	bl	801109c <lv_refr_get_top_obj>
 8011134:	61f8      	str	r0, [r7, #28]

        /*If a children is ok then break*/
        if(found_p != NULL) {
 8011136:	69fb      	ldr	r3, [r7, #28]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d106      	bne.n	801114a <lv_refr_get_top_obj+0xae>
    for(i = child_cnt - 1; i >= 0; i--) {
 801113c:	69bb      	ldr	r3, [r7, #24]
 801113e:	3b01      	subs	r3, #1
 8011140:	61bb      	str	r3, [r7, #24]
 8011142:	69bb      	ldr	r3, [r7, #24]
 8011144:	2b00      	cmp	r3, #0
 8011146:	dae9      	bge.n	801111c <lv_refr_get_top_obj+0x80>
 8011148:	e000      	b.n	801114c <lv_refr_get_top_obj+0xb0>
            break;
 801114a:	bf00      	nop
        }
    }

    /*If no better children use this object*/
    if(found_p == NULL && info.res == LV_COVER_RES_COVER) {
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d104      	bne.n	801115c <lv_refr_get_top_obj+0xc0>
 8011152:	7a3b      	ldrb	r3, [r7, #8]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d101      	bne.n	801115c <lv_refr_get_top_obj+0xc0>
        found_p = obj;
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	61fb      	str	r3, [r7, #28]
    }

    return found_p;
 801115c:	69fb      	ldr	r3, [r7, #28]
}
 801115e:	4618      	mov	r0, r3
 8011160:	3720      	adds	r7, #32
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}
	...

08011168 <refr_obj_and_children>:
 * Make the refreshing from an object. Draw all its children and the youngers too.
 * @param top_p pointer to an objects. Start the drawing from it.
 * @param mask_p pointer to an area, the objects will be drawn only here
 */
static void refr_obj_and_children(lv_draw_ctx_t * draw_ctx, lv_obj_t * top_obj)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b088      	sub	sp, #32
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	6039      	str	r1, [r7, #0]
    /*Normally always will be a top_obj (at least the screen)
     *but in special cases (e.g. if the screen has alpha) it won't.
     *In this case use the screen directly*/
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d105      	bne.n	8011184 <refr_obj_and_children+0x1c>
 8011178:	4b2c      	ldr	r3, [pc, #176]	; (801122c <refr_obj_and_children+0xc4>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	4618      	mov	r0, r3
 801117e:	f7f5 f949 	bl	8006414 <lv_disp_get_scr_act>
 8011182:	6038      	str	r0, [r7, #0]
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d04c      	beq.n	8011224 <refr_obj_and_children+0xbc>

    /*Refresh the top object and its children*/
    refr_obj(draw_ctx, top_obj);
 801118a:	6839      	ldr	r1, [r7, #0]
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f000 f931 	bl	80113f4 <refr_obj>

    /*Draw the 'younger' sibling objects because they can be on top_obj*/
    lv_obj_t * parent;
    lv_obj_t * border_p = top_obj;
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	61bb      	str	r3, [r7, #24]

    parent = lv_obj_get_parent(top_obj);
 8011196:	6838      	ldr	r0, [r7, #0]
 8011198:	f7fe ff7e 	bl	8010098 <lv_obj_get_parent>
 801119c:	61f8      	str	r0, [r7, #28]

    /*Do until not reach the screen*/
    while(parent != NULL) {
 801119e:	e03d      	b.n	801121c <refr_obj_and_children+0xb4>
        bool go = false;
 80111a0:	2300      	movs	r3, #0
 80111a2:	75fb      	strb	r3, [r7, #23]
        uint32_t i;
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 80111a4:	69f8      	ldr	r0, [r7, #28]
 80111a6:	f7fe ffbb 	bl	8010120 <lv_obj_get_child_cnt>
 80111aa:	60f8      	str	r0, [r7, #12]
        for(i = 0; i < child_cnt; i++) {
 80111ac:	2300      	movs	r3, #0
 80111ae:	613b      	str	r3, [r7, #16]
 80111b0:	e01b      	b.n	80111ea <refr_obj_and_children+0x82>
            lv_obj_t * child = parent->spec_attr->children[i];
 80111b2:	69fb      	ldr	r3, [r7, #28]
 80111b4:	689b      	ldr	r3, [r3, #8]
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	009b      	lsls	r3, r3, #2
 80111bc:	4413      	add	r3, r2
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	60bb      	str	r3, [r7, #8]
            if(!go) {
 80111c2:	7dfb      	ldrb	r3, [r7, #23]
 80111c4:	f083 0301 	eor.w	r3, r3, #1
 80111c8:	b2db      	uxtb	r3, r3
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d006      	beq.n	80111dc <refr_obj_and_children+0x74>
                if(child == border_p) go = true;
 80111ce:	68ba      	ldr	r2, [r7, #8]
 80111d0:	69bb      	ldr	r3, [r7, #24]
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d106      	bne.n	80111e4 <refr_obj_and_children+0x7c>
 80111d6:	2301      	movs	r3, #1
 80111d8:	75fb      	strb	r3, [r7, #23]
 80111da:	e003      	b.n	80111e4 <refr_obj_and_children+0x7c>
            }
            else {
                /*Refresh the objects*/
                refr_obj(draw_ctx, child);
 80111dc:	68b9      	ldr	r1, [r7, #8]
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f000 f908 	bl	80113f4 <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	3301      	adds	r3, #1
 80111e8:	613b      	str	r3, [r7, #16]
 80111ea:	693a      	ldr	r2, [r7, #16]
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d3df      	bcc.n	80111b2 <refr_obj_and_children+0x4a>
            }
        }

        /*Call the post draw draw function of the parents of the to object*/
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 80111f2:	687a      	ldr	r2, [r7, #4]
 80111f4:	2117      	movs	r1, #23
 80111f6:	69f8      	ldr	r0, [r7, #28]
 80111f8:	f7f5 fd10 	bl	8006c1c <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 80111fc:	687a      	ldr	r2, [r7, #4]
 80111fe:	2118      	movs	r1, #24
 8011200:	69f8      	ldr	r0, [r7, #28]
 8011202:	f7f5 fd0b 	bl	8006c1c <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST_END, (void *)draw_ctx);
 8011206:	687a      	ldr	r2, [r7, #4]
 8011208:	2119      	movs	r1, #25
 801120a:	69f8      	ldr	r0, [r7, #28]
 801120c:	f7f5 fd06 	bl	8006c1c <lv_event_send>

        /*The new border will be the last parents,
         *so the 'younger' brothers of parent will be refreshed*/
        border_p = parent;
 8011210:	69fb      	ldr	r3, [r7, #28]
 8011212:	61bb      	str	r3, [r7, #24]
        /*Go a level deeper*/
        parent = lv_obj_get_parent(parent);
 8011214:	69f8      	ldr	r0, [r7, #28]
 8011216:	f7fe ff3f 	bl	8010098 <lv_obj_get_parent>
 801121a:	61f8      	str	r0, [r7, #28]
    while(parent != NULL) {
 801121c:	69fb      	ldr	r3, [r7, #28]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d1be      	bne.n	80111a0 <refr_obj_and_children+0x38>
 8011222:	e000      	b.n	8011226 <refr_obj_and_children+0xbe>
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 8011224:	bf00      	nop
    }
}
 8011226:	3720      	adds	r7, #32
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}
 801122c:	20000780 	.word	0x20000780

08011230 <layer_get_area>:


static lv_res_t layer_get_area(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj, lv_layer_type_t layer_type,
                               lv_area_t * layer_area_out)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b090      	sub	sp, #64	; 0x40
 8011234:	af00      	add	r7, sp, #0
 8011236:	60f8      	str	r0, [r7, #12]
 8011238:	60b9      	str	r1, [r7, #8]
 801123a:	603b      	str	r3, [r7, #0]
 801123c:	4613      	mov	r3, r2
 801123e:	71fb      	strb	r3, [r7, #7]
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 8011240:	68b8      	ldr	r0, [r7, #8]
 8011242:	f7f8 ffa9 	bl	800a198 <_lv_obj_get_ext_draw_size>
 8011246:	4603      	mov	r3, r0
 8011248:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_area_t obj_coords_ext;
    lv_obj_get_coords(obj, &obj_coords_ext);
 801124a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801124e:	4619      	mov	r1, r3
 8011250:	68b8      	ldr	r0, [r7, #8]
 8011252:	f7f9 fcde 	bl	800ac12 <lv_obj_get_coords>
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 8011256:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 801125a:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 801125e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011262:	4618      	mov	r0, r3
 8011264:	f011 faba 	bl	80227dc <lv_area_increase>

    if(layer_type == LV_LAYER_TYPE_TRANSFORM) {
 8011268:	79fb      	ldrb	r3, [r7, #7]
 801126a:	2b02      	cmp	r3, #2
 801126c:	d147      	bne.n	80112fe <layer_get_area+0xce>
        /*Get the transformed area and clip it to the current clip area.
         *This area needs to be updated on the screen.*/
        lv_area_t clip_coords_for_obj;
        lv_area_t tranf_coords = obj_coords_ext;
 801126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011272:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011276:	e892 0003 	ldmia.w	r2, {r0, r1}
 801127a:	e883 0003 	stmia.w	r3, {r0, r1}
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 801127e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8011282:	2300      	movs	r3, #0
 8011284:	2200      	movs	r2, #0
 8011286:	68b8      	ldr	r0, [r7, #8]
 8011288:	f7fa f9b8 	bl	800b5fc <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	6899      	ldr	r1, [r3, #8]
 8011290:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011294:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011298:	4618      	mov	r0, r3
 801129a:	f011 fb0b 	bl	80228b4 <_lv_area_intersect>
 801129e:	4603      	mov	r3, r0
 80112a0:	f083 0301 	eor.w	r3, r3, #1
 80112a4:	b2db      	uxtb	r3, r3
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d001      	beq.n	80112ae <layer_get_area+0x7e>
            return LV_RES_INV;
 80112aa:	2300      	movs	r3, #0
 80112ac:	e046      	b.n	801133c <layer_get_area+0x10c>
        }

        /*Transform back (inverse) the transformed area.
         *It will tell which area of the non-transformed widget needs to be redrawn
         *in order to cover transformed area after transformation.*/
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 80112ae:	f107 031c 	add.w	r3, r7, #28
 80112b2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80112b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80112ba:	e883 0003 	stmia.w	r3, {r0, r1}
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 80112be:	f107 011c 	add.w	r1, r7, #28
 80112c2:	2301      	movs	r3, #1
 80112c4:	2200      	movs	r2, #0
 80112c6:	68b8      	ldr	r0, [r7, #8]
 80112c8:	f7fa f998 	bl	800b5fc <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&inverse_clip_coords_for_obj, &inverse_clip_coords_for_obj, &obj_coords_ext)) {
 80112cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80112d0:	f107 011c 	add.w	r1, r7, #28
 80112d4:	f107 031c 	add.w	r3, r7, #28
 80112d8:	4618      	mov	r0, r3
 80112da:	f011 faeb 	bl	80228b4 <_lv_area_intersect>
 80112de:	4603      	mov	r3, r0
 80112e0:	f083 0301 	eor.w	r3, r3, #1
 80112e4:	b2db      	uxtb	r3, r3
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d001      	beq.n	80112ee <layer_get_area+0xbe>
            return LV_RES_INV;
 80112ea:	2300      	movs	r3, #0
 80112ec:	e026      	b.n	801133c <layer_get_area+0x10c>
        }

        *layer_area_out = inverse_clip_coords_for_obj;
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	461a      	mov	r2, r3
 80112f2:	f107 031c 	add.w	r3, r7, #28
 80112f6:	cb03      	ldmia	r3!, {r0, r1}
 80112f8:	6010      	str	r0, [r2, #0]
 80112fa:	6051      	str	r1, [r2, #4]
 80112fc:	e01d      	b.n	801133a <layer_get_area+0x10a>
    }
    else if(layer_type == LV_LAYER_TYPE_SIMPLE) {
 80112fe:	79fb      	ldrb	r3, [r7, #7]
 8011300:	2b01      	cmp	r3, #1
 8011302:	d118      	bne.n	8011336 <layer_get_area+0x106>
        lv_area_t clip_coords_for_obj;
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	6899      	ldr	r1, [r3, #8]
 8011308:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801130c:	f107 0314 	add.w	r3, r7, #20
 8011310:	4618      	mov	r0, r3
 8011312:	f011 facf 	bl	80228b4 <_lv_area_intersect>
 8011316:	4603      	mov	r3, r0
 8011318:	f083 0301 	eor.w	r3, r3, #1
 801131c:	b2db      	uxtb	r3, r3
 801131e:	2b00      	cmp	r3, #0
 8011320:	d001      	beq.n	8011326 <layer_get_area+0xf6>
            return LV_RES_INV;
 8011322:	2300      	movs	r3, #0
 8011324:	e00a      	b.n	801133c <layer_get_area+0x10c>
        }
        *layer_area_out = clip_coords_for_obj;
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	461a      	mov	r2, r3
 801132a:	f107 0314 	add.w	r3, r7, #20
 801132e:	cb03      	ldmia	r3!, {r0, r1}
 8011330:	6010      	str	r0, [r2, #0]
 8011332:	6051      	str	r1, [r2, #4]
 8011334:	e001      	b.n	801133a <layer_get_area+0x10a>
    }
    else {
        LV_LOG_WARN("Unhandled intermediate layer type");
        return LV_RES_INV;
 8011336:	2300      	movs	r3, #0
 8011338:	e000      	b.n	801133c <layer_get_area+0x10c>
    }

    return LV_RES_OK;
 801133a:	2301      	movs	r3, #1
}
 801133c:	4618      	mov	r0, r3
 801133e:	3740      	adds	r7, #64	; 0x40
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <layer_alpha_test>:

static void layer_alpha_test(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b088      	sub	sp, #32
 8011348:	af00      	add	r7, sp, #0
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	607a      	str	r2, [r7, #4]
 8011350:	70fb      	strb	r3, [r7, #3]
    bool has_alpha;
    /*If globally the layer has alpha maybe this smaller section has not (e.g. not on a rounded corner)
     *If turns out that this section has no alpha renderer can choose faster algorithms*/
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 8011352:	78fb      	ldrb	r3, [r7, #3]
 8011354:	f003 0301 	and.w	r3, r3, #1
 8011358:	2b00      	cmp	r3, #0
 801135a:	d031      	beq.n	80113c0 <layer_alpha_test+0x7c>
        /*Test for alpha by assuming there is no alpha. If it fails, fall back to rendering with alpha*/
        has_alpha = true;
 801135c:	2301      	movs	r3, #1
 801135e:	77fb      	strb	r3, [r7, #31]
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f103 0008 	add.w	r0, r3, #8
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	3314      	adds	r3, #20
 801136a:	2200      	movs	r2, #0
 801136c:	4619      	mov	r1, r3
 801136e:	f011 fc85 	bl	8022c7c <_lv_area_is_in>
 8011372:	4603      	mov	r3, r0
 8011374:	2b00      	cmp	r3, #0
 8011376:	d010      	beq.n	801139a <layer_alpha_test+0x56>
            lv_cover_check_info_t info;
            info.res = LV_COVER_RES_COVER;
 8011378:	2300      	movs	r3, #0
 801137a:	753b      	strb	r3, [r7, #20]
            info.area = &layer_ctx->area_act;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	3308      	adds	r3, #8
 8011380:	61bb      	str	r3, [r7, #24]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 8011382:	f107 0314 	add.w	r3, r7, #20
 8011386:	461a      	mov	r2, r3
 8011388:	2112      	movs	r1, #18
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	f7f5 fc46 	bl	8006c1c <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) has_alpha = false;
 8011390:	7d3b      	ldrb	r3, [r7, #20]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d101      	bne.n	801139a <layer_alpha_test+0x56>
 8011396:	2300      	movs	r3, #0
 8011398:	77fb      	strb	r3, [r7, #31]
        }

        if(has_alpha) {
 801139a:	7ffb      	ldrb	r3, [r7, #31]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d011      	beq.n	80113c4 <layer_alpha_test+0x80>
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_alpha - 1;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80113a6:	b29a      	uxth	r2, r3
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	4413      	add	r3, r2
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	3b01      	subs	r3, #1
 80113b6:	b29b      	uxth	r3, r3
 80113b8:	b21a      	sxth	r2, r3
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	81da      	strh	r2, [r3, #14]
 80113be:	e001      	b.n	80113c4 <layer_alpha_test+0x80>
        }
    }
    else {
        has_alpha = false;
 80113c0:	2300      	movs	r3, #0
 80113c2:	77fb      	strb	r3, [r7, #31]
    }

    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80113d0:	429a      	cmp	r2, r3
 80113d2:	dd04      	ble.n	80113de <layer_alpha_test+0x9a>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	81da      	strh	r2, [r3, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 80113de:	7ffb      	ldrb	r3, [r7, #31]
 80113e0:	461a      	mov	r2, r3
 80113e2:	6879      	ldr	r1, [r7, #4]
 80113e4:	68b8      	ldr	r0, [r7, #8]
 80113e6:	f002 f9ef 	bl	80137c8 <lv_draw_layer_adjust>
}
 80113ea:	bf00      	nop
 80113ec:	3720      	adds	r7, #32
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
	...

080113f4 <refr_obj>:


void refr_obj(lv_draw_ctx_t * draw_ctx, lv_obj_t * obj)
{
 80113f4:	b590      	push	{r4, r7, lr}
 80113f6:	b08f      	sub	sp, #60	; 0x3c
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	6039      	str	r1, [r7, #0]
    /*Do not refresh hidden objects*/
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 80113fe:	2101      	movs	r1, #1
 8011400:	6838      	ldr	r0, [r7, #0]
 8011402:	f7f6 fde4 	bl	8007fce <lv_obj_has_flag>
 8011406:	4603      	mov	r3, r0
 8011408:	2b00      	cmp	r3, #0
 801140a:	f040 81b8 	bne.w	801177e <refr_obj+0x38a>
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 801140e:	6838      	ldr	r0, [r7, #0]
 8011410:	f7f8 fed6 	bl	800a1c0 <_lv_obj_get_layer_type>
 8011414:	4603      	mov	r3, r0
 8011416:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    if(layer_type == LV_LAYER_TYPE_NONE) {
 801141a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801141e:	2b00      	cmp	r3, #0
 8011420:	d104      	bne.n	801142c <refr_obj+0x38>
        lv_obj_redraw(draw_ctx, obj);
 8011422:	6839      	ldr	r1, [r7, #0]
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f7ff f860 	bl	80104ea <lv_obj_redraw>
 801142a:	e1af      	b.n	801178c <refr_obj+0x398>
    }
    else {
        lv_opa_t opa = lv_obj_get_style_opa(obj, 0);
 801142c:	2100      	movs	r1, #0
 801142e:	6838      	ldr	r0, [r7, #0]
 8011430:	f7ff f830 	bl	8010494 <lv_obj_get_style_opa>
 8011434:	4603      	mov	r3, r0
 8011436:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if(opa < LV_OPA_MIN) return;
 801143a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801143e:	2b01      	cmp	r3, #1
 8011440:	f240 819f 	bls.w	8011782 <refr_obj+0x38e>

        lv_area_t layer_area_full;
        lv_res_t res = layer_get_area(draw_ctx, obj, layer_type, &layer_area_full);
 8011444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011448:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801144c:	6839      	ldr	r1, [r7, #0]
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f7ff feee 	bl	8011230 <layer_get_area>
 8011454:	4603      	mov	r3, r0
 8011456:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        if(res != LV_RES_OK) return;
 801145a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801145e:	2b01      	cmp	r3, #1
 8011460:	f040 8191 	bne.w	8011786 <refr_obj+0x392>

        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 8011464:	2301      	movs	r3, #1
 8011466:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	f103 0114 	add.w	r1, r3, #20
 8011470:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011474:	2200      	movs	r2, #0
 8011476:	4618      	mov	r0, r3
 8011478:	f011 fc00 	bl	8022c7c <_lv_area_is_in>
 801147c:	4603      	mov	r3, r0
 801147e:	2b00      	cmp	r3, #0
 8011480:	d014      	beq.n	80114ac <refr_obj+0xb8>
            lv_cover_check_info_t info;
            info.res = LV_COVER_RES_COVER;
 8011482:	2300      	movs	r3, #0
 8011484:	723b      	strb	r3, [r7, #8]
            info.area = &layer_area_full;
 8011486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801148a:	60fb      	str	r3, [r7, #12]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 801148c:	f107 0308 	add.w	r3, r7, #8
 8011490:	461a      	mov	r2, r3
 8011492:	2112      	movs	r1, #18
 8011494:	6838      	ldr	r0, [r7, #0]
 8011496:	f7f5 fbc1 	bl	8006c1c <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 801149a:	7a3b      	ldrb	r3, [r7, #8]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d105      	bne.n	80114ac <refr_obj+0xb8>
 80114a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80114a4:	f023 0301 	bic.w	r3, r3, #1
 80114a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }

        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 80114ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80114b0:	2b01      	cmp	r3, #1
 80114b2:	d105      	bne.n	80114c0 <refr_obj+0xcc>
 80114b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80114b8:	f043 0302 	orr.w	r3, r3, #2
 80114bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 80114c0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80114c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80114c8:	4619      	mov	r1, r3
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f002 f926 	bl	801371c <lv_draw_layer_create>
 80114d0:	6338      	str	r0, [r7, #48]	; 0x30
        if(layer_ctx == NULL) {
 80114d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	f000 8158 	beq.w	801178a <refr_obj+0x396>
            LV_LOG_WARN("Couldn't create a new layer context");
            return;
        }
        lv_point_t pivot = {
            .x = lv_obj_get_style_transform_pivot_x(obj, 0),
 80114da:	2100      	movs	r1, #0
 80114dc:	6838      	ldr	r0, [r7, #0]
 80114de:	f7fe ffb5 	bl	801044c <lv_obj_get_style_transform_pivot_x>
 80114e2:	4603      	mov	r3, r0
        lv_point_t pivot = {
 80114e4:	84bb      	strh	r3, [r7, #36]	; 0x24
            .y = lv_obj_get_style_transform_pivot_y(obj, 0)
 80114e6:	2100      	movs	r1, #0
 80114e8:	6838      	ldr	r0, [r7, #0]
 80114ea:	f7fe ffc1 	bl	8010470 <lv_obj_get_style_transform_pivot_y>
 80114ee:	4603      	mov	r3, r0
        lv_point_t pivot = {
 80114f0:	84fb      	strh	r3, [r7, #38]	; 0x26
        };

        if(LV_COORD_IS_PCT(pivot.x)) {
 80114f2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80114f6:	b29b      	uxth	r3, r3
 80114f8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80114fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011500:	d12d      	bne.n	801155e <refr_obj+0x16a>
 8011502:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011506:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 801150a:	b21b      	sxth	r3, r3
 801150c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8011510:	dc25      	bgt.n	801155e <refr_obj+0x16a>
            pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 8011512:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011516:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 801151a:	b21b      	sxth	r3, r3
 801151c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011520:	dd07      	ble.n	8011532 <refr_obj+0x13e>
 8011522:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011526:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 801152a:	b21b      	sxth	r3, r3
 801152c:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 8011530:	e005      	b.n	801153e <refr_obj+0x14a>
 8011532:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011536:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 801153a:	b21b      	sxth	r3, r3
 801153c:	461c      	mov	r4, r3
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	3314      	adds	r3, #20
 8011542:	4618      	mov	r0, r3
 8011544:	f7fe ff30 	bl	80103a8 <lv_area_get_width>
 8011548:	4603      	mov	r3, r0
 801154a:	fb04 f303 	mul.w	r3, r4, r3
 801154e:	4a91      	ldr	r2, [pc, #580]	; (8011794 <refr_obj+0x3a0>)
 8011550:	fb82 1203 	smull	r1, r2, r2, r3
 8011554:	1152      	asrs	r2, r2, #5
 8011556:	17db      	asrs	r3, r3, #31
 8011558:	1ad3      	subs	r3, r2, r3
 801155a:	b21b      	sxth	r3, r3
 801155c:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        if(LV_COORD_IS_PCT(pivot.y)) {
 801155e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011562:	b29b      	uxth	r3, r3
 8011564:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8011568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801156c:	d12d      	bne.n	80115ca <refr_obj+0x1d6>
 801156e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011572:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8011576:	b21b      	sxth	r3, r3
 8011578:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801157c:	dc25      	bgt.n	80115ca <refr_obj+0x1d6>
            pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 801157e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011582:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8011586:	b21b      	sxth	r3, r3
 8011588:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801158c:	dd07      	ble.n	801159e <refr_obj+0x1aa>
 801158e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011592:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8011596:	b21b      	sxth	r3, r3
 8011598:	f5c3 747a 	rsb	r4, r3, #1000	; 0x3e8
 801159c:	e005      	b.n	80115aa <refr_obj+0x1b6>
 801159e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80115a2:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80115a6:	b21b      	sxth	r3, r3
 80115a8:	461c      	mov	r4, r3
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	3314      	adds	r3, #20
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7fe ff11 	bl	80103d6 <lv_area_get_height>
 80115b4:	4603      	mov	r3, r0
 80115b6:	fb04 f303 	mul.w	r3, r4, r3
 80115ba:	4a76      	ldr	r2, [pc, #472]	; (8011794 <refr_obj+0x3a0>)
 80115bc:	fb82 1203 	smull	r1, r2, r2, r3
 80115c0:	1152      	asrs	r2, r2, #5
 80115c2:	17db      	asrs	r3, r3, #31
 80115c4:	1ad3      	subs	r3, r2, r3
 80115c6:	b21b      	sxth	r3, r3
 80115c8:	84fb      	strh	r3, [r7, #38]	; 0x26
        }

        lv_draw_img_dsc_t draw_dsc;
        lv_draw_img_dsc_init(&draw_dsc);
 80115ca:	f107 0310 	add.w	r3, r7, #16
 80115ce:	4618      	mov	r0, r3
 80115d0:	f000 fe71 	bl	80122b6 <lv_draw_img_dsc_init>
        draw_dsc.opa = opa;
 80115d4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80115d8:	76bb      	strb	r3, [r7, #26]
        draw_dsc.angle = lv_obj_get_style_transform_angle(obj, 0);
 80115da:	2100      	movs	r1, #0
 80115dc:	6838      	ldr	r0, [r7, #0]
 80115de:	f7fe ff23 	bl	8010428 <lv_obj_get_style_transform_angle>
 80115e2:	4603      	mov	r3, r0
 80115e4:	823b      	strh	r3, [r7, #16]
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 80115e6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80115ea:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80115ee:	dd08      	ble.n	8011602 <refr_obj+0x20e>
 80115f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80115f4:	b29b      	uxth	r3, r3
 80115f6:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80115fa:	b29b      	uxth	r3, r3
 80115fc:	b21b      	sxth	r3, r3
 80115fe:	823b      	strh	r3, [r7, #16]
 8011600:	e00b      	b.n	801161a <refr_obj+0x226>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 8011602:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011606:	2b00      	cmp	r3, #0
 8011608:	da07      	bge.n	801161a <refr_obj+0x226>
 801160a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801160e:	b29b      	uxth	r3, r3
 8011610:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8011614:	b29b      	uxth	r3, r3
 8011616:	b21b      	sxth	r3, r3
 8011618:	823b      	strh	r3, [r7, #16]

        draw_dsc.zoom = lv_obj_get_style_transform_zoom(obj, 0);
 801161a:	2100      	movs	r1, #0
 801161c:	6838      	ldr	r0, [r7, #0]
 801161e:	f7fe fef1 	bl	8010404 <lv_obj_get_style_transform_zoom>
 8011622:	4603      	mov	r3, r0
 8011624:	b29b      	uxth	r3, r3
 8011626:	827b      	strh	r3, [r7, #18]
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 8011628:	2100      	movs	r1, #0
 801162a:	6838      	ldr	r0, [r7, #0]
 801162c:	f7fe ff44 	bl	80104b8 <lv_obj_get_style_blend_mode>
 8011630:	4603      	mov	r3, r0
 8011632:	f003 030f 	and.w	r3, r3, #15
 8011636:	b2da      	uxtb	r2, r3
 8011638:	7efb      	ldrb	r3, [r7, #27]
 801163a:	f362 0303 	bfi	r3, r2, #0, #4
 801163e:	76fb      	strb	r3, [r7, #27]
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 8011640:	4b55      	ldr	r3, [pc, #340]	; (8011798 <refr_obj+0x3a4>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	7c1b      	ldrb	r3, [r3, #16]
 8011648:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801164c:	b2da      	uxtb	r2, r3
 801164e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011652:	f362 0300 	bfi	r3, r2, #0, #1
 8011656:	f887 3020 	strb.w	r3, [r7, #32]

        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 801165a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801165e:	f003 0302 	and.w	r3, r3, #2
 8011662:	2b00      	cmp	r3, #0
 8011664:	d07d      	beq.n	8011762 <refr_obj+0x36e>
            layer_ctx->area_act = layer_ctx->area_full;
 8011666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801166a:	3308      	adds	r3, #8
 801166c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011670:	e883 0003 	stmia.w	r3, {r0, r1}
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8011674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011676:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801167a:	b29a      	uxth	r2, r3
 801167c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801167e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8011682:	b29b      	uxth	r3, r3
 8011684:	4413      	add	r3, r2
 8011686:	b29b      	uxth	r3, r3
 8011688:	3b01      	subs	r3, #1
 801168a:	b29b      	uxth	r3, r3
 801168c:	b21a      	sxth	r2, r3
 801168e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011690:	81da      	strh	r2, [r3, #14]
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 8011692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011694:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8011698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801169e:	429a      	cmp	r2, r3
 80116a0:	dd5f      	ble.n	8011762 <refr_obj+0x36e>
 80116a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80116a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116aa:	81da      	strh	r2, [r3, #14]
        }

        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 80116ac:	e059      	b.n	8011762 <refr_obj+0x36e>
            if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 80116ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80116b2:	f003 0302 	and.w	r3, r3, #2
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d006      	beq.n	80116c8 <refr_obj+0x2d4>
                layer_alpha_test(obj, draw_ctx, layer_ctx, flags);
 80116ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80116be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116c0:	6879      	ldr	r1, [r7, #4]
 80116c2:	6838      	ldr	r0, [r7, #0]
 80116c4:	f7ff fe3e 	bl	8011344 <layer_alpha_test>
            }

            lv_obj_redraw(draw_ctx, obj);
 80116c8:	6839      	ldr	r1, [r7, #0]
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f7fe ff0d 	bl	80104ea <lv_obj_redraw>

            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80116d6:	b29a      	uxth	r2, r3
 80116d8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80116dc:	b29b      	uxth	r3, r3
 80116de:	4413      	add	r3, r2
 80116e0:	b29a      	uxth	r2, r3
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80116ea:	b29b      	uxth	r3, r3
 80116ec:	1ad3      	subs	r3, r2, r3
 80116ee:	b29b      	uxth	r3, r3
 80116f0:	b21b      	sxth	r3, r3
 80116f2:	82bb      	strh	r3, [r7, #20]
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011700:	b29b      	uxth	r3, r3
 8011702:	4413      	add	r3, r2
 8011704:	b29a      	uxth	r2, r3
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	685b      	ldr	r3, [r3, #4]
 801170a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801170e:	b29b      	uxth	r3, r3
 8011710:	1ad3      	subs	r3, r2, r3
 8011712:	b29b      	uxth	r3, r3
 8011714:	b21b      	sxth	r3, r3
 8011716:	82fb      	strh	r3, [r7, #22]

            /*With LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE it should also go the next chunk*/
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 8011718:	f107 0310 	add.w	r3, r7, #16
 801171c:	461a      	mov	r2, r3
 801171e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f002 f866 	bl	80137f2 <lv_draw_layer_blend>

            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 8011726:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801172a:	f003 0302 	and.w	r3, r3, #2
 801172e:	2b00      	cmp	r3, #0
 8011730:	d01f      	beq.n	8011772 <refr_obj+0x37e>

            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 8011732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011734:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011738:	b29b      	uxth	r3, r3
 801173a:	3301      	adds	r3, #1
 801173c:	b29b      	uxth	r3, r3
 801173e:	b21a      	sxth	r2, r3
 8011740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011742:	815a      	strh	r2, [r3, #10]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 8011744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011746:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801174a:	b29a      	uxth	r2, r3
 801174c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8011752:	b29b      	uxth	r3, r3
 8011754:	4413      	add	r3, r2
 8011756:	b29b      	uxth	r3, r3
 8011758:	3b01      	subs	r3, #1
 801175a:	b29b      	uxth	r3, r3
 801175c:	b21a      	sxth	r2, r3
 801175e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011760:	81da      	strh	r2, [r3, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 8011762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011764:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8011768:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801176c:	429a      	cmp	r2, r3
 801176e:	dd9e      	ble.n	80116ae <refr_obj+0x2ba>
 8011770:	e000      	b.n	8011774 <refr_obj+0x380>
            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 8011772:	bf00      	nop
        }

        lv_draw_layer_destroy(draw_ctx, layer_ctx);
 8011774:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f002 f84f 	bl	801381a <lv_draw_layer_destroy>
 801177c:	e006      	b.n	801178c <refr_obj+0x398>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 801177e:	bf00      	nop
 8011780:	e004      	b.n	801178c <refr_obj+0x398>
        if(opa < LV_OPA_MIN) return;
 8011782:	bf00      	nop
 8011784:	e002      	b.n	801178c <refr_obj+0x398>
        if(res != LV_RES_OK) return;
 8011786:	bf00      	nop
 8011788:	e000      	b.n	801178c <refr_obj+0x398>
            return;
 801178a:	bf00      	nop
    }
}
 801178c:	373c      	adds	r7, #60	; 0x3c
 801178e:	46bd      	mov	sp, r7
 8011790:	bd90      	pop	{r4, r7, pc}
 8011792:	bf00      	nop
 8011794:	51eb851f 	.word	0x51eb851f
 8011798:	20000780 	.word	0x20000780

0801179c <get_max_row>:


static uint32_t get_max_row(lv_disp_t * disp, lv_coord_t area_w, lv_coord_t area_h)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b086      	sub	sp, #24
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	460b      	mov	r3, r1
 80117a6:	807b      	strh	r3, [r7, #2]
 80117a8:	4613      	mov	r3, r2
 80117aa:	803b      	strh	r3, [r7, #0]
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	68db      	ldr	r3, [r3, #12]
 80117b2:	68da      	ldr	r2, [r3, #12]
 80117b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80117b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80117bc:	617b      	str	r3, [r7, #20]

    if(max_row > area_h) max_row = area_h;
 80117be:	f9b7 3000 	ldrsh.w	r3, [r7]
 80117c2:	697a      	ldr	r2, [r7, #20]
 80117c4:	429a      	cmp	r2, r3
 80117c6:	dd02      	ble.n	80117ce <get_max_row+0x32>
 80117c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80117cc:	617b      	str	r3, [r7, #20]

    /*Round down the lines of draw_buf if rounding is added*/
    if(disp_refr->driver->rounder_cb) {
 80117ce:	4b21      	ldr	r3, [pc, #132]	; (8011854 <get_max_row+0xb8>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	699b      	ldr	r3, [r3, #24]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d037      	beq.n	801184a <get_max_row+0xae>
        lv_area_t tmp;
        tmp.x1 = 0;
 80117da:	2300      	movs	r3, #0
 80117dc:	813b      	strh	r3, [r7, #8]
        tmp.x2 = 0;
 80117de:	2300      	movs	r3, #0
 80117e0:	81bb      	strh	r3, [r7, #12]
        tmp.y1 = 0;
 80117e2:	2300      	movs	r3, #0
 80117e4:	817b      	strh	r3, [r7, #10]

        lv_coord_t h_tmp = max_row;
 80117e6:	697b      	ldr	r3, [r7, #20]
 80117e8:	827b      	strh	r3, [r7, #18]
        do {
            tmp.y2 = h_tmp - 1;
 80117ea:	8a7b      	ldrh	r3, [r7, #18]
 80117ec:	3b01      	subs	r3, #1
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	b21b      	sxth	r3, r3
 80117f2:	81fb      	strh	r3, [r7, #14]
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 80117f4:	4b17      	ldr	r3, [pc, #92]	; (8011854 <get_max_row+0xb8>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	699b      	ldr	r3, [r3, #24]
 80117fc:	4a15      	ldr	r2, [pc, #84]	; (8011854 <get_max_row+0xb8>)
 80117fe:	6812      	ldr	r2, [r2, #0]
 8011800:	6812      	ldr	r2, [r2, #0]
 8011802:	f107 0108 	add.w	r1, r7, #8
 8011806:	4610      	mov	r0, r2
 8011808:	4798      	blx	r3

            /*If this height fits into `max_row` then fine*/
            if(lv_area_get_height(&tmp) <= max_row) break;
 801180a:	f107 0308 	add.w	r3, r7, #8
 801180e:	4618      	mov	r0, r3
 8011810:	f7fe fde1 	bl	80103d6 <lv_area_get_height>
 8011814:	4603      	mov	r3, r0
 8011816:	461a      	mov	r2, r3
 8011818:	697b      	ldr	r3, [r7, #20]
 801181a:	4293      	cmp	r3, r2
 801181c:	da0a      	bge.n	8011834 <get_max_row+0x98>

            /*Decrement the height of the area until it fits into `max_row` after rounding*/
            h_tmp--;
 801181e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011822:	b29b      	uxth	r3, r3
 8011824:	3b01      	subs	r3, #1
 8011826:	b29b      	uxth	r3, r3
 8011828:	827b      	strh	r3, [r7, #18]
        } while(h_tmp > 0);
 801182a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801182e:	2b00      	cmp	r3, #0
 8011830:	dcdb      	bgt.n	80117ea <get_max_row+0x4e>
 8011832:	e000      	b.n	8011836 <get_max_row+0x9a>
            if(lv_area_get_height(&tmp) <= max_row) break;
 8011834:	bf00      	nop

        if(h_tmp <= 0) {
 8011836:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801183a:	2b00      	cmp	r3, #0
 801183c:	dc01      	bgt.n	8011842 <get_max_row+0xa6>
            LV_LOG_WARN("Can't set draw_buf height using the round function. (Wrong round_cb or to "
                        "small draw_buf)");
            return 0;
 801183e:	2300      	movs	r3, #0
 8011840:	e004      	b.n	801184c <get_max_row+0xb0>
        }
        else {
            max_row = tmp.y2 + 1;
 8011842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011846:	3301      	adds	r3, #1
 8011848:	617b      	str	r3, [r7, #20]
        }
    }

    return max_row;
 801184a:	697b      	ldr	r3, [r7, #20]
}
 801184c:	4618      	mov	r0, r3
 801184e:	3718      	adds	r7, #24
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}
 8011854:	20000780 	.word	0x20000780

08011858 <draw_buf_rotate_180>:

static void draw_buf_rotate_180(lv_disp_drv_t * drv, lv_area_t * area, lv_color_t * color_p)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b08a      	sub	sp, #40	; 0x28
 801185c:	af00      	add	r7, sp, #0
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	607a      	str	r2, [r7, #4]
    lv_coord_t area_w = lv_area_get_width(area);
 8011864:	68b8      	ldr	r0, [r7, #8]
 8011866:	f7fe fd9f 	bl	80103a8 <lv_area_get_width>
 801186a:	4603      	mov	r3, r0
 801186c:	83fb      	strh	r3, [r7, #30]
    lv_coord_t area_h = lv_area_get_height(area);
 801186e:	68b8      	ldr	r0, [r7, #8]
 8011870:	f7fe fdb1 	bl	80103d6 <lv_area_get_height>
 8011874:	4603      	mov	r3, r0
 8011876:	83bb      	strh	r3, [r7, #28]
    uint32_t total = area_w * area_h;
 8011878:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801187c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8011880:	fb02 f303 	mul.w	r3, r2, r3
 8011884:	61bb      	str	r3, [r7, #24]
    /*Swap the beginning and end values*/
    lv_color_t tmp;
    uint32_t i = total - 1, j = 0;
 8011886:	69bb      	ldr	r3, [r7, #24]
 8011888:	3b01      	subs	r3, #1
 801188a:	627b      	str	r3, [r7, #36]	; 0x24
 801188c:	2300      	movs	r3, #0
 801188e:	623b      	str	r3, [r7, #32]
    while(i > j) {
 8011890:	e017      	b.n	80118c2 <draw_buf_rotate_180+0x6a>
        tmp = color_p[i];
 8011892:	687a      	ldr	r2, [r7, #4]
 8011894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011896:	4413      	add	r3, r2
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	753b      	strb	r3, [r7, #20]
        color_p[i] = color_p[j];
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	6a3b      	ldr	r3, [r7, #32]
 80118a0:	441a      	add	r2, r3
 80118a2:	6879      	ldr	r1, [r7, #4]
 80118a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a6:	440b      	add	r3, r1
 80118a8:	7812      	ldrb	r2, [r2, #0]
 80118aa:	701a      	strb	r2, [r3, #0]
        color_p[j] = tmp;
 80118ac:	687a      	ldr	r2, [r7, #4]
 80118ae:	6a3b      	ldr	r3, [r7, #32]
 80118b0:	4413      	add	r3, r2
 80118b2:	7d3a      	ldrb	r2, [r7, #20]
 80118b4:	701a      	strb	r2, [r3, #0]
        i--;
 80118b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b8:	3b01      	subs	r3, #1
 80118ba:	627b      	str	r3, [r7, #36]	; 0x24
        j++;
 80118bc:	6a3b      	ldr	r3, [r7, #32]
 80118be:	3301      	adds	r3, #1
 80118c0:	623b      	str	r3, [r7, #32]
    while(i > j) {
 80118c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118c4:	6a3b      	ldr	r3, [r7, #32]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d8e3      	bhi.n	8011892 <draw_buf_rotate_180+0x3a>
    }
    lv_coord_t tmp_coord;
    tmp_coord = area->y2;
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	88db      	ldrh	r3, [r3, #6]
 80118ce:	82fb      	strh	r3, [r7, #22]
    area->y2 = drv->ver_res - area->y1 - 1;
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80118d6:	b29a      	uxth	r2, r3
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80118de:	b29b      	uxth	r3, r3
 80118e0:	1ad3      	subs	r3, r2, r3
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	3b01      	subs	r3, #1
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	b21a      	sxth	r2, r3
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	80da      	strh	r2, [r3, #6]
    area->y1 = drv->ver_res - tmp_coord - 1;
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80118f4:	b29a      	uxth	r2, r3
 80118f6:	8afb      	ldrh	r3, [r7, #22]
 80118f8:	1ad3      	subs	r3, r2, r3
 80118fa:	b29b      	uxth	r3, r3
 80118fc:	3b01      	subs	r3, #1
 80118fe:	b29b      	uxth	r3, r3
 8011900:	b21a      	sxth	r2, r3
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	805a      	strh	r2, [r3, #2]
    tmp_coord = area->x2;
 8011906:	68bb      	ldr	r3, [r7, #8]
 8011908:	889b      	ldrh	r3, [r3, #4]
 801190a:	82fb      	strh	r3, [r7, #22]
    area->x2 = drv->hor_res - area->x1 - 1;
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011912:	b29a      	uxth	r2, r3
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	f9b3 3000 	ldrsh.w	r3, [r3]
 801191a:	b29b      	uxth	r3, r3
 801191c:	1ad3      	subs	r3, r2, r3
 801191e:	b29b      	uxth	r3, r3
 8011920:	3b01      	subs	r3, #1
 8011922:	b29b      	uxth	r3, r3
 8011924:	b21a      	sxth	r2, r3
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	809a      	strh	r2, [r3, #4]
    area->x1 = drv->hor_res - tmp_coord - 1;
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011930:	b29a      	uxth	r2, r3
 8011932:	8afb      	ldrh	r3, [r7, #22]
 8011934:	1ad3      	subs	r3, r2, r3
 8011936:	b29b      	uxth	r3, r3
 8011938:	3b01      	subs	r3, #1
 801193a:	b29b      	uxth	r3, r3
 801193c:	b21a      	sxth	r2, r3
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	801a      	strh	r2, [r3, #0]
}
 8011942:	bf00      	nop
 8011944:	3728      	adds	r7, #40	; 0x28
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}

0801194a <draw_buf_rotate_90>:

static LV_ATTRIBUTE_FAST_MEM void draw_buf_rotate_90(bool invert_i, lv_coord_t area_w, lv_coord_t area_h,
                                                     lv_color_t * orig_color_p, lv_color_t * rot_buf)
{
 801194a:	b480      	push	{r7}
 801194c:	b08b      	sub	sp, #44	; 0x2c
 801194e:	af00      	add	r7, sp, #0
 8011950:	607b      	str	r3, [r7, #4]
 8011952:	4603      	mov	r3, r0
 8011954:	73fb      	strb	r3, [r7, #15]
 8011956:	460b      	mov	r3, r1
 8011958:	81bb      	strh	r3, [r7, #12]
 801195a:	4613      	mov	r3, r2
 801195c:	817b      	strh	r3, [r7, #10]

    uint32_t invert = (area_w * area_h) - 1;
 801195e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011962:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011966:	fb02 f303 	mul.w	r3, r2, r3
 801196a:	3b01      	subs	r3, #1
 801196c:	61bb      	str	r3, [r7, #24]
    uint32_t initial_i = ((area_w - 1) * area_h);
 801196e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011972:	3b01      	subs	r3, #1
 8011974:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8011978:	fb02 f303 	mul.w	r3, r2, r3
 801197c:	617b      	str	r3, [r7, #20]
    for(lv_coord_t y = 0; y < area_h; y++) {
 801197e:	2300      	movs	r3, #0
 8011980:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011982:	e036      	b.n	80119f2 <draw_buf_rotate_90+0xa8>
        uint32_t i = initial_i + y;
 8011984:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011988:	697a      	ldr	r2, [r7, #20]
 801198a:	4413      	add	r3, r2
 801198c:	623b      	str	r3, [r7, #32]
        if(invert_i)
 801198e:	7bfb      	ldrb	r3, [r7, #15]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d003      	beq.n	801199c <draw_buf_rotate_90+0x52>
            i = invert - i;
 8011994:	69ba      	ldr	r2, [r7, #24]
 8011996:	6a3b      	ldr	r3, [r7, #32]
 8011998:	1ad3      	subs	r3, r2, r3
 801199a:	623b      	str	r3, [r7, #32]
        for(lv_coord_t x = 0; x < area_w; x++) {
 801199c:	2300      	movs	r3, #0
 801199e:	83fb      	strh	r3, [r7, #30]
 80119a0:	e01b      	b.n	80119da <draw_buf_rotate_90+0x90>
            rot_buf[i] = *(orig_color_p++);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	1c5a      	adds	r2, r3, #1
 80119a6:	607a      	str	r2, [r7, #4]
 80119a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80119aa:	6a3a      	ldr	r2, [r7, #32]
 80119ac:	440a      	add	r2, r1
 80119ae:	781b      	ldrb	r3, [r3, #0]
 80119b0:	7013      	strb	r3, [r2, #0]
            if(invert_i)
 80119b2:	7bfb      	ldrb	r3, [r7, #15]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d005      	beq.n	80119c4 <draw_buf_rotate_90+0x7a>
                i += area_h;
 80119b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80119bc:	6a3a      	ldr	r2, [r7, #32]
 80119be:	4413      	add	r3, r2
 80119c0:	623b      	str	r3, [r7, #32]
 80119c2:	e004      	b.n	80119ce <draw_buf_rotate_90+0x84>
            else
                i -= area_h;
 80119c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80119c8:	6a3a      	ldr	r2, [r7, #32]
 80119ca:	1ad3      	subs	r3, r2, r3
 80119cc:	623b      	str	r3, [r7, #32]
        for(lv_coord_t x = 0; x < area_w; x++) {
 80119ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	3301      	adds	r3, #1
 80119d6:	b29b      	uxth	r3, r3
 80119d8:	83fb      	strh	r3, [r7, #30]
 80119da:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80119de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80119e2:	429a      	cmp	r2, r3
 80119e4:	dbdd      	blt.n	80119a2 <draw_buf_rotate_90+0x58>
    for(lv_coord_t y = 0; y < area_h; y++) {
 80119e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	3301      	adds	r3, #1
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80119f2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80119f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80119fa:	429a      	cmp	r2, r3
 80119fc:	dbc2      	blt.n	8011984 <draw_buf_rotate_90+0x3a>
        }
    }
}
 80119fe:	bf00      	nop
 8011a00:	bf00      	nop
 8011a02:	372c      	adds	r7, #44	; 0x2c
 8011a04:	46bd      	mov	sp, r7
 8011a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0a:	4770      	bx	lr

08011a0c <draw_buf_rotate4>:

/**
 * Helper function for draw_buf_rotate_90_sqr. Given a list of four numbers, rotate the entire list to the left.
 */
static inline void draw_buf_rotate4(lv_color_t * a, lv_color_t * b, lv_color_t * c, lv_color_t * d)
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b087      	sub	sp, #28
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	60f8      	str	r0, [r7, #12]
 8011a14:	60b9      	str	r1, [r7, #8]
 8011a16:	607a      	str	r2, [r7, #4]
 8011a18:	603b      	str	r3, [r7, #0]
    lv_color_t tmp;
    tmp = *a;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	781b      	ldrb	r3, [r3, #0]
 8011a1e:	753b      	strb	r3, [r7, #20]
    *a = *b;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	68ba      	ldr	r2, [r7, #8]
 8011a24:	7812      	ldrb	r2, [r2, #0]
 8011a26:	701a      	strb	r2, [r3, #0]
    *b = *c;
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	687a      	ldr	r2, [r7, #4]
 8011a2c:	7812      	ldrb	r2, [r2, #0]
 8011a2e:	701a      	strb	r2, [r3, #0]
    *c = *d;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	683a      	ldr	r2, [r7, #0]
 8011a34:	7812      	ldrb	r2, [r2, #0]
 8011a36:	701a      	strb	r2, [r3, #0]
    *d = tmp;
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	7d3a      	ldrb	r2, [r7, #20]
 8011a3c:	701a      	strb	r2, [r3, #0]
}
 8011a3e:	bf00      	nop
 8011a40:	371c      	adds	r7, #28
 8011a42:	46bd      	mov	sp, r7
 8011a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a48:	4770      	bx	lr

08011a4a <draw_buf_rotate_90_sqr>:
/**
 * Rotate a square image 90/270 degrees in place.
 * @note inspired by https://stackoverflow.com/a/43694906
 */
static void draw_buf_rotate_90_sqr(bool is_270, lv_coord_t w, lv_color_t * color_p)
{
 8011a4a:	b590      	push	{r4, r7, lr}
 8011a4c:	b085      	sub	sp, #20
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	4603      	mov	r3, r0
 8011a52:	603a      	str	r2, [r7, #0]
 8011a54:	71fb      	strb	r3, [r7, #7]
 8011a56:	460b      	mov	r3, r1
 8011a58:	80bb      	strh	r3, [r7, #4]
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	81fb      	strh	r3, [r7, #14]
 8011a5e:	e092      	b.n	8011b86 <draw_buf_rotate_90_sqr+0x13c>
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 8011a60:	2300      	movs	r3, #0
 8011a62:	81bb      	strh	r3, [r7, #12]
 8011a64:	e07d      	b.n	8011b62 <draw_buf_rotate_90_sqr+0x118>
            lv_coord_t inv_i = (w - 1) - i;
 8011a66:	88ba      	ldrh	r2, [r7, #4]
 8011a68:	89fb      	ldrh	r3, [r7, #14]
 8011a6a:	1ad3      	subs	r3, r2, r3
 8011a6c:	b29b      	uxth	r3, r3
 8011a6e:	3b01      	subs	r3, #1
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	817b      	strh	r3, [r7, #10]
            lv_coord_t inv_j = (w - 1) - j;
 8011a74:	88ba      	ldrh	r2, [r7, #4]
 8011a76:	89bb      	ldrh	r3, [r7, #12]
 8011a78:	1ad3      	subs	r3, r2, r3
 8011a7a:	b29b      	uxth	r3, r3
 8011a7c:	3b01      	subs	r3, #1
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	813b      	strh	r3, [r7, #8]
            if(is_270) {
 8011a82:	79fb      	ldrb	r3, [r7, #7]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d033      	beq.n	8011af0 <draw_buf_rotate_90_sqr+0xa6>
                draw_buf_rotate4(
                    &color_p[i * w + j],
 8011a88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011a8c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011a90:	fb03 f202 	mul.w	r2, r3, r2
 8011a94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011a98:	4413      	add	r3, r2
 8011a9a:	461a      	mov	r2, r3
                draw_buf_rotate4(
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	1898      	adds	r0, r3, r2
                    &color_p[inv_j * w + i],
 8011aa0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011aa4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011aa8:	fb03 f202 	mul.w	r2, r3, r2
 8011aac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011ab0:	4413      	add	r3, r2
 8011ab2:	461a      	mov	r2, r3
                draw_buf_rotate4(
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	1899      	adds	r1, r3, r2
                    &color_p[inv_i * w + inv_j],
 8011ab8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011abc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011ac0:	fb03 f202 	mul.w	r2, r3, r2
 8011ac4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011ac8:	4413      	add	r3, r2
 8011aca:	461a      	mov	r2, r3
                draw_buf_rotate4(
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	189c      	adds	r4, r3, r2
                    &color_p[j * w + inv_i]
 8011ad0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011ad4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011ad8:	fb03 f202 	mul.w	r2, r3, r2
 8011adc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011ae0:	4413      	add	r3, r2
 8011ae2:	461a      	mov	r2, r3
                draw_buf_rotate4(
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	4413      	add	r3, r2
 8011ae8:	4622      	mov	r2, r4
 8011aea:	f7ff ff8f 	bl	8011a0c <draw_buf_rotate4>
 8011aee:	e032      	b.n	8011b56 <draw_buf_rotate_90_sqr+0x10c>
                );
            }
            else {
                draw_buf_rotate4(
                    &color_p[i * w + j],
 8011af0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011af4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011af8:	fb03 f202 	mul.w	r2, r3, r2
 8011afc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011b00:	4413      	add	r3, r2
 8011b02:	461a      	mov	r2, r3
                draw_buf_rotate4(
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	1898      	adds	r0, r3, r2
                    &color_p[j * w + inv_i],
 8011b08:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011b0c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011b10:	fb03 f202 	mul.w	r2, r3, r2
 8011b14:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011b18:	4413      	add	r3, r2
 8011b1a:	461a      	mov	r2, r3
                draw_buf_rotate4(
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	1899      	adds	r1, r3, r2
                    &color_p[inv_i * w + inv_j],
 8011b20:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011b24:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011b28:	fb03 f202 	mul.w	r2, r3, r2
 8011b2c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011b30:	4413      	add	r3, r2
 8011b32:	461a      	mov	r2, r3
                draw_buf_rotate4(
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	189c      	adds	r4, r3, r2
                    &color_p[inv_j * w + i]
 8011b38:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011b3c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011b40:	fb03 f202 	mul.w	r2, r3, r2
 8011b44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011b48:	4413      	add	r3, r2
 8011b4a:	461a      	mov	r2, r3
                draw_buf_rotate4(
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	4413      	add	r3, r2
 8011b50:	4622      	mov	r2, r4
 8011b52:	f7ff ff5b 	bl	8011a0c <draw_buf_rotate4>
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 8011b56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011b5a:	b29b      	uxth	r3, r3
 8011b5c:	3301      	adds	r3, #1
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	81bb      	strh	r3, [r7, #12]
 8011b62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011b66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011b6a:	3301      	adds	r3, #1
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	da00      	bge.n	8011b72 <draw_buf_rotate_90_sqr+0x128>
 8011b70:	3301      	adds	r3, #1
 8011b72:	105b      	asrs	r3, r3, #1
 8011b74:	429a      	cmp	r2, r3
 8011b76:	f6ff af76 	blt.w	8011a66 <draw_buf_rotate_90_sqr+0x1c>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 8011b7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011b7e:	b29b      	uxth	r3, r3
 8011b80:	3301      	adds	r3, #1
 8011b82:	b29b      	uxth	r3, r3
 8011b84:	81fb      	strh	r3, [r7, #14]
 8011b86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	da00      	bge.n	8011b90 <draw_buf_rotate_90_sqr+0x146>
 8011b8e:	3301      	adds	r3, #1
 8011b90:	105b      	asrs	r3, r3, #1
 8011b92:	b21b      	sxth	r3, r3
 8011b94:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	f6ff af61 	blt.w	8011a60 <draw_buf_rotate_90_sqr+0x16>
                );
            }

        }
    }
}
 8011b9e:	bf00      	nop
 8011ba0:	bf00      	nop
 8011ba2:	3714      	adds	r7, #20
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd90      	pop	{r4, r7, pc}

08011ba8 <draw_buf_rotate>:

/**
 * Rotate the draw_buf to the display's native orientation.
 */
static void draw_buf_rotate(lv_area_t * area, lv_color_t * color_p)
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b08a      	sub	sp, #40	; 0x28
 8011bac:	af02      	add	r7, sp, #8
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6039      	str	r1, [r7, #0]
    lv_disp_drv_t * drv = disp_refr->driver;
 8011bb2:	4b8e      	ldr	r3, [pc, #568]	; (8011dec <draw_buf_rotate+0x244>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	617b      	str	r3, [r7, #20]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 8011bba:	4b8c      	ldr	r3, [pc, #560]	; (8011dec <draw_buf_rotate+0x244>)
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	7c1b      	ldrb	r3, [r3, #16]
 8011bc2:	f003 0302 	and.w	r3, r3, #2
 8011bc6:	b2db      	uxtb	r3, r3
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d007      	beq.n	8011bdc <draw_buf_rotate+0x34>
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	7c1b      	ldrb	r3, [r3, #16]
 8011bd0:	f003 0304 	and.w	r3, r3, #4
 8011bd4:	b2db      	uxtb	r3, r3
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	f040 8178 	bne.w	8011ecc <draw_buf_rotate+0x324>
        LV_LOG_ERROR("cannot rotate a full refreshed display!");
        return;
    }
    if(drv->rotated == LV_DISP_ROT_180) {
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	7c1b      	ldrb	r3, [r3, #16]
 8011be0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011be4:	b2db      	uxtb	r3, r3
 8011be6:	2b20      	cmp	r3, #32
 8011be8:	d10a      	bne.n	8011c00 <draw_buf_rotate+0x58>
        draw_buf_rotate_180(drv, area, color_p);
 8011bea:	683a      	ldr	r2, [r7, #0]
 8011bec:	6879      	ldr	r1, [r7, #4]
 8011bee:	6978      	ldr	r0, [r7, #20]
 8011bf0:	f7ff fe32 	bl	8011858 <draw_buf_rotate_180>
        call_flush_cb(drv, area, color_p);
 8011bf4:	683a      	ldr	r2, [r7, #0]
 8011bf6:	6879      	ldr	r1, [r7, #4]
 8011bf8:	6978      	ldr	r0, [r7, #20]
 8011bfa:	f000 fa2b 	bl	8012054 <call_flush_cb>
 8011bfe:	e166      	b.n	8011ece <draw_buf_rotate+0x326>
    }
    else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	7c1b      	ldrb	r3, [r3, #16]
 8011c04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011c08:	b2db      	uxtb	r3, r3
 8011c0a:	2b10      	cmp	r3, #16
 8011c0c:	d007      	beq.n	8011c1e <draw_buf_rotate+0x76>
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	7c1b      	ldrb	r3, [r3, #16]
 8011c12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011c16:	b2db      	uxtb	r3, r3
 8011c18:	2b30      	cmp	r3, #48	; 0x30
 8011c1a:	f040 8158 	bne.w	8011ece <draw_buf_rotate+0x326>
        /*Allocate a temporary buffer to store rotated image*/
        lv_color_t * rot_buf = NULL;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	61fb      	str	r3, [r7, #28]
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8011c22:	4b72      	ldr	r3, [pc, #456]	; (8011dec <draw_buf_rotate+0x244>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	4618      	mov	r0, r3
 8011c28:	f010 f996 	bl	8021f58 <lv_disp_get_draw_buf>
 8011c2c:	6138      	str	r0, [r7, #16]
        lv_coord_t area_w = lv_area_get_width(area);
 8011c2e:	6878      	ldr	r0, [r7, #4]
 8011c30:	f7fe fbba 	bl	80103a8 <lv_area_get_width>
 8011c34:	4603      	mov	r3, r0
 8011c36:	81fb      	strh	r3, [r7, #14]
        lv_coord_t area_h = lv_area_get_height(area);
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f7fe fbcc 	bl	80103d6 <lv_area_get_height>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	81bb      	strh	r3, [r7, #12]
        /*Determine the maximum number of rows that can be rotated at a time*/
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF / sizeof(lv_color_t)) / area_w), area_h);
 8011c42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011c46:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8011c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c4e:	b21b      	sxth	r3, r3
 8011c50:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011c54:	4293      	cmp	r3, r2
 8011c56:	bfa8      	it	ge
 8011c58:	4613      	movge	r3, r2
 8011c5a:	817b      	strh	r3, [r7, #10]
        lv_coord_t init_y_off;
        init_y_off = area->y1;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	885b      	ldrh	r3, [r3, #2]
 8011c60:	813b      	strh	r3, [r7, #8]
        if(drv->rotated == LV_DISP_ROT_90) {
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	7c1b      	ldrb	r3, [r3, #16]
 8011c66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011c6a:	b2db      	uxtb	r3, r3
 8011c6c:	2b10      	cmp	r3, #16
 8011c6e:	d11b      	bne.n	8011ca8 <draw_buf_rotate+0x100>
            area->y2 = drv->ver_res - area->x1 - 1;
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011c76:	b29a      	uxth	r2, r3
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c7e:	b29b      	uxth	r3, r3
 8011c80:	1ad3      	subs	r3, r2, r3
 8011c82:	b29b      	uxth	r3, r3
 8011c84:	3b01      	subs	r3, #1
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	b21a      	sxth	r2, r3
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	80da      	strh	r2, [r3, #6]
            area->y1 = area->y2 - area_w + 1;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011c94:	b29a      	uxth	r2, r3
 8011c96:	89fb      	ldrh	r3, [r7, #14]
 8011c98:	1ad3      	subs	r3, r2, r3
 8011c9a:	b29b      	uxth	r3, r3
 8011c9c:	3301      	adds	r3, #1
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	b21a      	sxth	r2, r3
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	805a      	strh	r2, [r3, #2]
 8011ca6:	e010      	b.n	8011cca <draw_buf_rotate+0x122>
        }
        else {
            area->y1 = area->x1;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	805a      	strh	r2, [r3, #2]
            area->y2 = area->y1 + area_w - 1;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011cb8:	b29a      	uxth	r2, r3
 8011cba:	89fb      	ldrh	r3, [r7, #14]
 8011cbc:	4413      	add	r3, r2
 8011cbe:	b29b      	uxth	r3, r3
 8011cc0:	3b01      	subs	r3, #1
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	b21a      	sxth	r2, r3
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	80da      	strh	r2, [r3, #6]
        }

        /*Rotate the screen in chunks, flushing after each one*/
        lv_coord_t row = 0;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	837b      	strh	r3, [r7, #26]
        while(row < area_h) {
 8011cce:	e0ef      	b.n	8011eb0 <draw_buf_rotate+0x308>
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 8011cd0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011cd4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011cd8:	1ad2      	subs	r2, r2, r3
 8011cda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011cde:	4293      	cmp	r3, r2
 8011ce0:	bfa8      	it	ge
 8011ce2:	4613      	movge	r3, r2
 8011ce4:	833b      	strh	r3, [r7, #24]
            draw_buf->flushing = 1;
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	2201      	movs	r2, #1
 8011cea:	611a      	str	r2, [r3, #16]
            if((row == 0) && (area_h >= area_w)) {
 8011cec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d144      	bne.n	8011d7e <draw_buf_rotate+0x1d6>
 8011cf4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011cf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	db3e      	blt.n	8011d7e <draw_buf_rotate+0x1d6>
                /*Rotate the initial area as a square*/
                height = area_w;
 8011d00:	89fb      	ldrh	r3, [r7, #14]
 8011d02:	833b      	strh	r3, [r7, #24]
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	7c1b      	ldrb	r3, [r3, #16]
 8011d08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011d0c:	b2db      	uxtb	r3, r3
 8011d0e:	2b30      	cmp	r3, #48	; 0x30
 8011d10:	bf0c      	ite	eq
 8011d12:	2301      	moveq	r3, #1
 8011d14:	2300      	movne	r3, #0
 8011d16:	b2db      	uxtb	r3, r3
 8011d18:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8011d1c:	683a      	ldr	r2, [r7, #0]
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7ff fe93 	bl	8011a4a <draw_buf_rotate_90_sqr>
                if(drv->rotated == LV_DISP_ROT_90) {
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	7c1b      	ldrb	r3, [r3, #16]
 8011d28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011d2c:	b2db      	uxtb	r3, r3
 8011d2e:	2b10      	cmp	r3, #16
 8011d30:	d10c      	bne.n	8011d4c <draw_buf_rotate+0x1a4>
                    area->x1 = init_y_off;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	893a      	ldrh	r2, [r7, #8]
 8011d36:	801a      	strh	r2, [r3, #0]
                    area->x2 = init_y_off + area_w - 1;
 8011d38:	893a      	ldrh	r2, [r7, #8]
 8011d3a:	89fb      	ldrh	r3, [r7, #14]
 8011d3c:	4413      	add	r3, r2
 8011d3e:	b29b      	uxth	r3, r3
 8011d40:	3b01      	subs	r3, #1
 8011d42:	b29b      	uxth	r3, r3
 8011d44:	b21a      	sxth	r2, r3
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	809a      	strh	r2, [r3, #4]
                if(drv->rotated == LV_DISP_ROT_90) {
 8011d4a:	e06c      	b.n	8011e26 <draw_buf_rotate+0x27e>
                }
                else {
                    area->x2 = drv->hor_res - 1 - init_y_off;
 8011d4c:	697b      	ldr	r3, [r7, #20]
 8011d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d52:	b29a      	uxth	r2, r3
 8011d54:	893b      	ldrh	r3, [r7, #8]
 8011d56:	1ad3      	subs	r3, r2, r3
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	3b01      	subs	r3, #1
 8011d5c:	b29b      	uxth	r3, r3
 8011d5e:	b21a      	sxth	r2, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	809a      	strh	r2, [r3, #4]
                    area->x1 = area->x2 - area_w + 1;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011d6a:	b29a      	uxth	r2, r3
 8011d6c:	89fb      	ldrh	r3, [r7, #14]
 8011d6e:	1ad3      	subs	r3, r2, r3
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	3301      	adds	r3, #1
 8011d74:	b29b      	uxth	r3, r3
 8011d76:	b21a      	sxth	r2, r3
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	801a      	strh	r2, [r3, #0]
                if(drv->rotated == LV_DISP_ROT_90) {
 8011d7c:	e053      	b.n	8011e26 <draw_buf_rotate+0x27e>
                }
            }
            else {
                /*Rotate other areas using a maximum buffer size*/
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 8011d7e:	69fb      	ldr	r3, [r7, #28]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d104      	bne.n	8011d8e <draw_buf_rotate+0x1e6>
 8011d84:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8011d88:	f012 f93e 	bl	8024008 <lv_mem_buf_get>
 8011d8c:	61f8      	str	r0, [r7, #28]
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 8011d8e:	697b      	ldr	r3, [r7, #20]
 8011d90:	7c1b      	ldrb	r3, [r3, #16]
 8011d92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011d96:	b2db      	uxtb	r3, r3
 8011d98:	2b30      	cmp	r3, #48	; 0x30
 8011d9a:	bf0c      	ite	eq
 8011d9c:	2301      	moveq	r3, #1
 8011d9e:	2300      	movne	r3, #0
 8011da0:	b2d8      	uxtb	r0, r3
 8011da2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8011da6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8011daa:	69fb      	ldr	r3, [r7, #28]
 8011dac:	9300      	str	r3, [sp, #0]
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	f7ff fdcb 	bl	801194a <draw_buf_rotate_90>

                if(drv->rotated == LV_DISP_ROT_90) {
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	7c1b      	ldrb	r3, [r3, #16]
 8011db8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011dbc:	b2db      	uxtb	r3, r3
 8011dbe:	2b10      	cmp	r3, #16
 8011dc0:	d116      	bne.n	8011df0 <draw_buf_rotate+0x248>
                    area->x1 = init_y_off + row;
 8011dc2:	893a      	ldrh	r2, [r7, #8]
 8011dc4:	8b7b      	ldrh	r3, [r7, #26]
 8011dc6:	4413      	add	r3, r2
 8011dc8:	b29b      	uxth	r3, r3
 8011dca:	b21a      	sxth	r2, r3
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	801a      	strh	r2, [r3, #0]
                    area->x2 = init_y_off + row + height - 1;
 8011dd0:	893a      	ldrh	r2, [r7, #8]
 8011dd2:	8b7b      	ldrh	r3, [r7, #26]
 8011dd4:	4413      	add	r3, r2
 8011dd6:	b29a      	uxth	r2, r3
 8011dd8:	8b3b      	ldrh	r3, [r7, #24]
 8011dda:	4413      	add	r3, r2
 8011ddc:	b29b      	uxth	r3, r3
 8011dde:	3b01      	subs	r3, #1
 8011de0:	b29b      	uxth	r3, r3
 8011de2:	b21a      	sxth	r2, r3
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	809a      	strh	r2, [r3, #4]
 8011de8:	e01d      	b.n	8011e26 <draw_buf_rotate+0x27e>
 8011dea:	bf00      	nop
 8011dec:	20000780 	.word	0x20000780
                }
                else {
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 8011df0:	697b      	ldr	r3, [r7, #20]
 8011df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011df6:	b29a      	uxth	r2, r3
 8011df8:	893b      	ldrh	r3, [r7, #8]
 8011dfa:	1ad3      	subs	r3, r2, r3
 8011dfc:	b29a      	uxth	r2, r3
 8011dfe:	8b7b      	ldrh	r3, [r7, #26]
 8011e00:	1ad3      	subs	r3, r2, r3
 8011e02:	b29b      	uxth	r3, r3
 8011e04:	3b01      	subs	r3, #1
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	b21a      	sxth	r2, r3
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	809a      	strh	r2, [r3, #4]
                    area->x1 = area->x2 - height + 1;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011e14:	b29a      	uxth	r2, r3
 8011e16:	8b3b      	ldrh	r3, [r7, #24]
 8011e18:	1ad3      	subs	r3, r2, r3
 8011e1a:	b29b      	uxth	r3, r3
 8011e1c:	3301      	adds	r3, #1
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	b21a      	sxth	r2, r3
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	801a      	strh	r2, [r3, #0]
                }
            }

            /* The original part (chunk of the current area) were split into more parts here.
             * Set the original last_part flag on the last part of rotation. */
            if(row + height >= area_h && draw_buf->last_area && draw_buf->last_part) {
 8011e26:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8011e2a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8011e2e:	441a      	add	r2, r3
 8011e30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011e34:	429a      	cmp	r2, r3
 8011e36:	db11      	blt.n	8011e5c <draw_buf_rotate+0x2b4>
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	699b      	ldr	r3, [r3, #24]
 8011e3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8011e40:	b2db      	uxtb	r3, r3
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d00a      	beq.n	8011e5c <draw_buf_rotate+0x2b4>
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	699b      	ldr	r3, [r3, #24]
 8011e4a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011e4e:	b2db      	uxtb	r3, r3
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d003      	beq.n	8011e5c <draw_buf_rotate+0x2b4>
                draw_buf->flushing_last = 1;
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	2201      	movs	r2, #1
 8011e58:	615a      	str	r2, [r3, #20]
 8011e5a:	e002      	b.n	8011e62 <draw_buf_rotate+0x2ba>
            }
            else {
                draw_buf->flushing_last = 0;
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	615a      	str	r2, [r3, #20]
            }

            /*Flush the completed area to the display*/
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 8011e62:	69fb      	ldr	r3, [r7, #28]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d101      	bne.n	8011e6c <draw_buf_rotate+0x2c4>
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	e000      	b.n	8011e6e <draw_buf_rotate+0x2c6>
 8011e6c:	69fb      	ldr	r3, [r7, #28]
 8011e6e:	461a      	mov	r2, r3
 8011e70:	6879      	ldr	r1, [r7, #4]
 8011e72:	6978      	ldr	r0, [r7, #20]
 8011e74:	f000 f8ee 	bl	8012054 <call_flush_cb>
            /*FIXME: Rotation forces legacy behavior where rendering and flushing are done serially*/
            while(draw_buf->flushing) {
 8011e78:	e007      	b.n	8011e8a <draw_buf_rotate+0x2e2>
                if(drv->wait_cb) drv->wait_cb(drv);
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d003      	beq.n	8011e8a <draw_buf_rotate+0x2e2>
 8011e82:	697b      	ldr	r3, [r7, #20]
 8011e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e86:	6978      	ldr	r0, [r7, #20]
 8011e88:	4798      	blx	r3
            while(draw_buf->flushing) {
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	691b      	ldr	r3, [r3, #16]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d1f3      	bne.n	8011e7a <draw_buf_rotate+0x2d2>
            }
            color_p += area_w * height;
 8011e92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011e96:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8011e9a:	fb02 f303 	mul.w	r3, r2, r3
 8011e9e:	461a      	mov	r2, r3
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	4413      	add	r3, r2
 8011ea4:	603b      	str	r3, [r7, #0]
            row += height;
 8011ea6:	8b7a      	ldrh	r2, [r7, #26]
 8011ea8:	8b3b      	ldrh	r3, [r7, #24]
 8011eaa:	4413      	add	r3, r2
 8011eac:	b29b      	uxth	r3, r3
 8011eae:	837b      	strh	r3, [r7, #26]
        while(row < area_h) {
 8011eb0:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8011eb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	f6ff af09 	blt.w	8011cd0 <draw_buf_rotate+0x128>
        }
        /*Free the allocated buffer at the end if necessary*/
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 8011ebe:	69fb      	ldr	r3, [r7, #28]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d004      	beq.n	8011ece <draw_buf_rotate+0x326>
 8011ec4:	69f8      	ldr	r0, [r7, #28]
 8011ec6:	f012 f94b 	bl	8024160 <lv_mem_buf_release>
 8011eca:	e000      	b.n	8011ece <draw_buf_rotate+0x326>
        return;
 8011ecc:	bf00      	nop
    }
}
 8011ece:	3720      	adds	r7, #32
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}

08011ed4 <draw_buf_flush>:

/**
 * Flush the content of the draw buffer
 */
static void draw_buf_flush(lv_disp_t * disp)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b086      	sub	sp, #24
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 8011edc:	4b5c      	ldr	r3, [pc, #368]	; (8012050 <draw_buf_flush+0x17c>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f010 f839 	bl	8021f58 <lv_disp_get_draw_buf>
 8011ee6:	6178      	str	r0, [r7, #20]

    /*Flush the rendered content to the display*/
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011eee:	613b      	str	r3, [r7, #16]
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d003      	beq.n	8011f00 <draw_buf_flush+0x2c>
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011efc:	6938      	ldr	r0, [r7, #16]
 8011efe:	4798      	blx	r3

    /* In partial double buffered mode wait until the other buffer is freed
     * and driver is ready to receive the new buffer */
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	68da      	ldr	r2, [r3, #12]
 8011f04:	4b52      	ldr	r3, [pc, #328]	; (8012050 <draw_buf_flush+0x17c>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f0e:	4619      	mov	r1, r3
 8011f10:	4b4f      	ldr	r3, [pc, #316]	; (8012050 <draw_buf_flush+0x17c>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011f1a:	fb01 f303 	mul.w	r3, r1, r3
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	bf0c      	ite	eq
 8011f22:	2301      	moveq	r3, #1
 8011f24:	2300      	movne	r3, #0
 8011f26:	73fb      	strb	r3, [r7, #15]
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 8011f28:	697b      	ldr	r3, [r7, #20]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d01d      	beq.n	8011f6c <draw_buf_flush+0x98>
 8011f30:	697b      	ldr	r3, [r7, #20]
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d019      	beq.n	8011f6c <draw_buf_flush+0x98>
 8011f38:	7bfb      	ldrb	r3, [r7, #15]
 8011f3a:	f083 0301 	eor.w	r3, r3, #1
 8011f3e:	b2db      	uxtb	r3, r3
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d013      	beq.n	8011f6c <draw_buf_flush+0x98>
        while(draw_buf->flushing) {
 8011f44:	e00e      	b.n	8011f64 <draw_buf_flush+0x90>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 8011f46:	4b42      	ldr	r3, [pc, #264]	; (8012050 <draw_buf_flush+0x17c>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d008      	beq.n	8011f64 <draw_buf_flush+0x90>
 8011f52:	4b3f      	ldr	r3, [pc, #252]	; (8012050 <draw_buf_flush+0x17c>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f5a:	4a3d      	ldr	r2, [pc, #244]	; (8012050 <draw_buf_flush+0x17c>)
 8011f5c:	6812      	ldr	r2, [r2, #0]
 8011f5e:	6812      	ldr	r2, [r2, #0]
 8011f60:	4610      	mov	r0, r2
 8011f62:	4798      	blx	r3
        while(draw_buf->flushing) {
 8011f64:	697b      	ldr	r3, [r7, #20]
 8011f66:	691b      	ldr	r3, [r3, #16]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d1ec      	bne.n	8011f46 <draw_buf_flush+0x72>
        }
    }

    draw_buf->flushing = 1;
 8011f6c:	697b      	ldr	r3, [r7, #20]
 8011f6e:	2201      	movs	r2, #1
 8011f70:	611a      	str	r2, [r3, #16]

    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 8011f72:	4b37      	ldr	r3, [pc, #220]	; (8012050 <draw_buf_flush+0x17c>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	68db      	ldr	r3, [r3, #12]
 8011f7a:	699b      	ldr	r3, [r3, #24]
 8011f7c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d00d      	beq.n	8011fa2 <draw_buf_flush+0xce>
 8011f86:	4b32      	ldr	r3, [pc, #200]	; (8012050 <draw_buf_flush+0x17c>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	68db      	ldr	r3, [r3, #12]
 8011f8e:	699b      	ldr	r3, [r3, #24]
 8011f90:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d003      	beq.n	8011fa2 <draw_buf_flush+0xce>
 8011f9a:	697b      	ldr	r3, [r7, #20]
 8011f9c:	2201      	movs	r2, #1
 8011f9e:	615a      	str	r2, [r3, #20]
 8011fa0:	e002      	b.n	8011fa8 <draw_buf_flush+0xd4>
    else draw_buf->flushing_last = 0;
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	615a      	str	r2, [r3, #20]

    bool flushing_last = draw_buf->flushing_last;
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	695b      	ldr	r3, [r3, #20]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	bf14      	ite	ne
 8011fb0:	2301      	movne	r3, #1
 8011fb2:	2300      	moveq	r3, #0
 8011fb4:	73bb      	strb	r3, [r7, #14]

    if(disp->driver->flush_cb) {
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	695b      	ldr	r3, [r3, #20]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d021      	beq.n	8012004 <draw_buf_flush+0x130>
        /*Rotate the buffer to the display's native orientation if necessary*/
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	7c1b      	ldrb	r3, [r3, #16]
 8011fc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011fca:	b2db      	uxtb	r3, r3
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d010      	beq.n	8011ff2 <draw_buf_flush+0x11e>
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	7c1b      	ldrb	r3, [r3, #16]
 8011fd6:	f003 0304 	and.w	r3, r3, #4
 8011fda:	b2db      	uxtb	r3, r3
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d008      	beq.n	8011ff2 <draw_buf_flush+0x11e>
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 8011fe0:	693b      	ldr	r3, [r7, #16]
 8011fe2:	685a      	ldr	r2, [r3, #4]
 8011fe4:	693b      	ldr	r3, [r7, #16]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	4619      	mov	r1, r3
 8011fea:	4610      	mov	r0, r2
 8011fec:	f7ff fddc 	bl	8011ba8 <draw_buf_rotate>
 8011ff0:	e008      	b.n	8012004 <draw_buf_flush+0x130>
        }
        else {
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6818      	ldr	r0, [r3, #0]
 8011ff6:	693b      	ldr	r3, [r7, #16]
 8011ff8:	6859      	ldr	r1, [r3, #4]
 8011ffa:	693b      	ldr	r3, [r7, #16]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	461a      	mov	r2, r3
 8012000:	f000 f828 	bl	8012054 <call_flush_cb>
        }
    }

    /*If there are 2 buffers swap them. With direct mode swap only on the last area*/
    if(draw_buf->buf1 && draw_buf->buf2 && (!disp->driver->direct_mode || flushing_last)) {
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d01d      	beq.n	8012048 <draw_buf_flush+0x174>
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	685b      	ldr	r3, [r3, #4]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d019      	beq.n	8012048 <draw_buf_flush+0x174>
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	7c1b      	ldrb	r3, [r3, #16]
 801201a:	f003 0301 	and.w	r3, r3, #1
 801201e:	b2db      	uxtb	r3, r3
 8012020:	2b00      	cmp	r3, #0
 8012022:	d002      	beq.n	801202a <draw_buf_flush+0x156>
 8012024:	7bbb      	ldrb	r3, [r7, #14]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d00e      	beq.n	8012048 <draw_buf_flush+0x174>
        if(draw_buf->buf_act == draw_buf->buf1)
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	689a      	ldr	r2, [r3, #8]
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	429a      	cmp	r2, r3
 8012034:	d104      	bne.n	8012040 <draw_buf_flush+0x16c>
            draw_buf->buf_act = draw_buf->buf2;
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	685a      	ldr	r2, [r3, #4]
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	609a      	str	r2, [r3, #8]
        else
            draw_buf->buf_act = draw_buf->buf1;
    }
}
 801203e:	e003      	b.n	8012048 <draw_buf_flush+0x174>
            draw_buf->buf_act = draw_buf->buf1;
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	681a      	ldr	r2, [r3, #0]
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	609a      	str	r2, [r3, #8]
}
 8012048:	bf00      	nop
 801204a:	3718      	adds	r7, #24
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}
 8012050:	20000780 	.word	0x20000780

08012054 <call_flush_cb>:

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b086      	sub	sp, #24
 8012058:	af00      	add	r7, sp, #0
 801205a:	60f8      	str	r0, [r7, #12]
 801205c:	60b9      	str	r1, [r7, #8]
 801205e:	607a      	str	r2, [r7, #4]
    REFR_TRACE("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2,
               (void *)color_p);

    lv_area_t offset_area = {
        .x1 = area->x1 + drv->offset_x,
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012066:	b29a      	uxth	r2, r3
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801206e:	b29b      	uxth	r3, r3
 8012070:	4413      	add	r3, r2
 8012072:	b29b      	uxth	r3, r3
 8012074:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 8012076:	823b      	strh	r3, [r7, #16]
        .y1 = area->y1 + drv->offset_y,
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801207e:	b29a      	uxth	r2, r3
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8012086:	b29b      	uxth	r3, r3
 8012088:	4413      	add	r3, r2
 801208a:	b29b      	uxth	r3, r3
 801208c:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 801208e:	827b      	strh	r3, [r7, #18]
        .x2 = area->x2 + drv->offset_x,
 8012090:	68bb      	ldr	r3, [r7, #8]
 8012092:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012096:	b29a      	uxth	r2, r3
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801209e:	b29b      	uxth	r3, r3
 80120a0:	4413      	add	r3, r2
 80120a2:	b29b      	uxth	r3, r3
 80120a4:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 80120a6:	82bb      	strh	r3, [r7, #20]
        .y2 = area->y2 + drv->offset_y
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80120ae:	b29a      	uxth	r2, r3
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	4413      	add	r3, r2
 80120ba:	b29b      	uxth	r3, r3
 80120bc:	b21b      	sxth	r3, r3
    lv_area_t offset_area = {
 80120be:	82fb      	strh	r3, [r7, #22]
    };

    drv->flush_cb(drv, &offset_area, color_p);
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	695b      	ldr	r3, [r3, #20]
 80120c4:	f107 0110 	add.w	r1, r7, #16
 80120c8:	687a      	ldr	r2, [r7, #4]
 80120ca:	68f8      	ldr	r0, [r7, #12]
 80120cc:	4798      	blx	r3
}
 80120ce:	bf00      	nop
 80120d0:	3718      	adds	r7, #24
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
	...

080120d8 <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b082      	sub	sp, #8
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 80120e0:	4a04      	ldr	r2, [pc, #16]	; (80120f4 <lv_obj_remove_style_all+0x1c>)
 80120e2:	2100      	movs	r1, #0
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f7fc fae7 	bl	800e6b8 <lv_obj_remove_style>
}
 80120ea:	bf00      	nop
 80120ec:	3708      	adds	r7, #8
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}
 80120f2:	bf00      	nop
 80120f4:	000fffff 	.word	0x000fffff

080120f8 <lv_theme_get_from_obj>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_theme_t  * lv_theme_get_from_obj(lv_obj_t * obj)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b084      	sub	sp, #16
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d004      	beq.n	8012110 <lv_theme_get_from_obj+0x18>
 8012106:	6878      	ldr	r0, [r7, #4]
 8012108:	f7fd ff8c 	bl	8010024 <lv_obj_get_disp>
 801210c:	4603      	mov	r3, r0
 801210e:	e002      	b.n	8012116 <lv_theme_get_from_obj+0x1e>
 8012110:	f00f fe9e 	bl	8021e50 <lv_disp_get_default>
 8012114:	4603      	mov	r3, r0
 8012116:	60fb      	str	r3, [r7, #12]
    return lv_disp_get_theme(disp);
 8012118:	68f8      	ldr	r0, [r7, #12]
 801211a:	f7f4 f9df 	bl	80064dc <lv_disp_get_theme>
 801211e:	4603      	mov	r3, r0
}
 8012120:	4618      	mov	r0, r3
 8012122:	3710      	adds	r7, #16
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <lv_theme_apply>:
 * Apply the active theme on an object
 * @param obj pointer to an object
 * @param name the name of the theme element to apply. E.g. `LV_THEME_BTN`
 */
void lv_theme_apply(lv_obj_t * obj)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b084      	sub	sp, #16
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 8012130:	6878      	ldr	r0, [r7, #4]
 8012132:	f7ff ffe1 	bl	80120f8 <lv_theme_get_from_obj>
 8012136:	60f8      	str	r0, [r7, #12]
    if(th == NULL) return;
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d007      	beq.n	801214e <lv_theme_apply+0x26>

    lv_obj_remove_style_all(obj);
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f7ff ffca 	bl	80120d8 <lv_obj_remove_style_all>

    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 8012144:	6879      	ldr	r1, [r7, #4]
 8012146:	68f8      	ldr	r0, [r7, #12]
 8012148:	f000 f805 	bl	8012156 <apply_theme>
 801214c:	e000      	b.n	8012150 <lv_theme_apply+0x28>
    if(th == NULL) return;
 801214e:	bf00      	nop
}
 8012150:	3710      	adds	r7, #16
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}

08012156 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 8012156:	b580      	push	{r7, lr}
 8012158:	b082      	sub	sp, #8
 801215a:	af00      	add	r7, sp, #0
 801215c:	6078      	str	r0, [r7, #4]
 801215e:	6039      	str	r1, [r7, #0]
    if(th->parent) apply_theme(th->parent, obj);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	685b      	ldr	r3, [r3, #4]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d005      	beq.n	8012174 <apply_theme+0x1e>
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	685b      	ldr	r3, [r3, #4]
 801216c:	6839      	ldr	r1, [r7, #0]
 801216e:	4618      	mov	r0, r3
 8012170:	f7ff fff1 	bl	8012156 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d004      	beq.n	8012186 <apply_theme+0x30>
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	6839      	ldr	r1, [r7, #0]
 8012182:	6878      	ldr	r0, [r7, #4]
 8012184:	4798      	blx	r3
}
 8012186:	bf00      	nop
 8012188:	3708      	adds	r7, #8
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}

0801218e <lv_draw_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_init(void)
{
 801218e:	b480      	push	{r7}
 8012190:	af00      	add	r7, sp, #0
    /*Nothing to init now*/
}
 8012192:	bf00      	nop
 8012194:	46bd      	mov	sp, r7
 8012196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219a:	4770      	bx	lr

0801219c <lv_draw_wait_for_finish>:

void lv_draw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b082      	sub	sp, #8
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d003      	beq.n	80121b4 <lv_draw_wait_for_finish+0x18>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121b0:	6878      	ldr	r0, [r7, #4]
 80121b2:	4798      	blx	r3
}
 80121b4:	bf00      	nop
 80121b6:	3708      	adds	r7, #8
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}

080121bc <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 80121bc:	b480      	push	{r7}
 80121be:	b083      	sub	sp, #12
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	4603      	mov	r3, r0
 80121c4:	71fb      	strb	r3, [r7, #7]
 80121c6:	460b      	mov	r3, r1
 80121c8:	71bb      	strb	r3, [r7, #6]
 80121ca:	4613      	mov	r3, r2
 80121cc:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80121ce:	797b      	ldrb	r3, [r7, #5]
 80121d0:	09db      	lsrs	r3, r3, #7
 80121d2:	b2da      	uxtb	r2, r3
 80121d4:	79bb      	ldrb	r3, [r7, #6]
 80121d6:	09db      	lsrs	r3, r3, #7
 80121d8:	b2db      	uxtb	r3, r3
 80121da:	4313      	orrs	r3, r2
 80121dc:	b2da      	uxtb	r2, r3
 80121de:	79fb      	ldrb	r3, [r7, #7]
 80121e0:	09db      	lsrs	r3, r3, #7
 80121e2:	b2db      	uxtb	r3, r3
 80121e4:	4313      	orrs	r3, r2
 80121e6:	b2db      	uxtb	r3, r3
}
 80121e8:	4618      	mov	r0, r3
 80121ea:	370c      	adds	r7, #12
 80121ec:	46bd      	mov	sp, r7
 80121ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f2:	4770      	bx	lr

080121f4 <lv_color_white>:
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 80121f8:	22ff      	movs	r2, #255	; 0xff
 80121fa:	21ff      	movs	r1, #255	; 0xff
 80121fc:	20ff      	movs	r0, #255	; 0xff
 80121fe:	f7ff ffdd 	bl	80121bc <lv_color_make>
 8012202:	4603      	mov	r3, r0
}
 8012204:	4618      	mov	r0, r3
 8012206:	bd80      	pop	{r7, pc}

08012208 <lv_color_black>:
static inline lv_color_t lv_color_black(void)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 801220c:	2200      	movs	r2, #0
 801220e:	2100      	movs	r1, #0
 8012210:	2000      	movs	r0, #0
 8012212:	f7ff ffd3 	bl	80121bc <lv_color_make>
 8012216:	4603      	mov	r3, r0
}
 8012218:	4618      	mov	r0, r3
 801221a:	bd80      	pop	{r7, pc}

0801221c <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 801221c:	b480      	push	{r7}
 801221e:	b083      	sub	sp, #12
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
 8012224:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8012226:	683b      	ldr	r3, [r7, #0]
 8012228:	f9b3 2000 	ldrsh.w	r2, [r3]
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	80da      	strh	r2, [r3, #6]
}
 801224e:	bf00      	nop
 8012250:	370c      	adds	r7, #12
 8012252:	46bd      	mov	sp, r7
 8012254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012258:	4770      	bx	lr

0801225a <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801225a:	b480      	push	{r7}
 801225c:	b083      	sub	sp, #12
 801225e:	af00      	add	r7, sp, #0
 8012260:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012268:	b29a      	uxth	r2, r3
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012270:	b29b      	uxth	r3, r3
 8012272:	1ad3      	subs	r3, r2, r3
 8012274:	b29b      	uxth	r3, r3
 8012276:	3301      	adds	r3, #1
 8012278:	b29b      	uxth	r3, r3
 801227a:	b21b      	sxth	r3, r3
}
 801227c:	4618      	mov	r0, r3
 801227e:	370c      	adds	r7, #12
 8012280:	46bd      	mov	sp, r7
 8012282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012286:	4770      	bx	lr

08012288 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8012288:	b480      	push	{r7}
 801228a:	b083      	sub	sp, #12
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012296:	b29a      	uxth	r2, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801229e:	b29b      	uxth	r3, r3
 80122a0:	1ad3      	subs	r3, r2, r3
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	3301      	adds	r3, #1
 80122a6:	b29b      	uxth	r3, r3
 80122a8:	b21b      	sxth	r3, r3
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	370c      	adds	r7, #12
 80122ae:	46bd      	mov	sp, r7
 80122b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b4:	4770      	bx	lr

080122b6 <lv_draw_img_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_img_dsc_init(lv_draw_img_dsc_t * dsc)
{
 80122b6:	b590      	push	{r4, r7, lr}
 80122b8:	b083      	sub	sp, #12
 80122ba:	af00      	add	r7, sp, #0
 80122bc:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 80122be:	2114      	movs	r1, #20
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f012 fa4b 	bl	802475c <lv_memset_00>
    dsc->recolor = lv_color_black();
 80122c6:	687c      	ldr	r4, [r7, #4]
 80122c8:	f7ff ff9e 	bl	8012208 <lv_color_black>
 80122cc:	7220      	strb	r0, [r4, #8]
    dsc->opa = LV_OPA_COVER;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	22ff      	movs	r2, #255	; 0xff
 80122d2:	729a      	strb	r2, [r3, #10]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80122da:	805a      	strh	r2, [r3, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 80122dc:	687a      	ldr	r2, [r7, #4]
 80122de:	7c13      	ldrb	r3, [r2, #16]
 80122e0:	f36f 0300 	bfc	r3, #0, #1
 80122e4:	7413      	strb	r3, [r2, #16]
}
 80122e6:	bf00      	nop
 80122e8:	370c      	adds	r7, #12
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd90      	pop	{r4, r7, pc}
	...

080122f0 <lv_draw_img>:
 * @param mask the image will be drawn only in this area
 * @param src pointer to a lv_color_t array which contains the pixels of the image
 * @param dsc pointer to an initialized `lv_draw_img_dsc_t` variable
 */
void lv_draw_img(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * dsc, const lv_area_t * coords, const void * src)
{
 80122f0:	b590      	push	{r4, r7, lr}
 80122f2:	b087      	sub	sp, #28
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	60f8      	str	r0, [r7, #12]
 80122f8:	60b9      	str	r1, [r7, #8]
 80122fa:	607a      	str	r2, [r7, #4]
 80122fc:	603b      	str	r3, [r7, #0]
    if(src == NULL) {
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d105      	bne.n	8012310 <lv_draw_img+0x20>
        LV_LOG_WARN("Image draw: src is NULL");
        show_error(draw_ctx, coords, "No\ndata");
 8012304:	4a16      	ldr	r2, [pc, #88]	; (8012360 <lv_draw_img+0x70>)
 8012306:	6879      	ldr	r1, [r7, #4]
 8012308:	68f8      	ldr	r0, [r7, #12]
 801230a:	f000 fab3 	bl	8012874 <show_error>
        return;
 801230e:	e023      	b.n	8012358 <lv_draw_img+0x68>
    }

    if(dsc->opa <= LV_OPA_MIN) return;
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	7a9b      	ldrb	r3, [r3, #10]
 8012314:	2b02      	cmp	r3, #2
 8012316:	d91e      	bls.n	8012356 <lv_draw_img+0x66>

    lv_res_t res;
    if(draw_ctx->draw_img) {
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	699b      	ldr	r3, [r3, #24]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d009      	beq.n	8012334 <lv_draw_img+0x44>
        res = draw_ctx->draw_img(draw_ctx, dsc, coords, src);
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	699c      	ldr	r4, [r3, #24]
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	687a      	ldr	r2, [r7, #4]
 8012328:	68b9      	ldr	r1, [r7, #8]
 801232a:	68f8      	ldr	r0, [r7, #12]
 801232c:	47a0      	blx	r4
 801232e:	4603      	mov	r3, r0
 8012330:	75fb      	strb	r3, [r7, #23]
 8012332:	e007      	b.n	8012344 <lv_draw_img+0x54>
    }
    else {
        res = decode_and_draw(draw_ctx, dsc, coords, src);
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	687a      	ldr	r2, [r7, #4]
 8012338:	68b9      	ldr	r1, [r7, #8]
 801233a:	68f8      	ldr	r0, [r7, #12]
 801233c:	f000 f8e3 	bl	8012506 <decode_and_draw>
 8012340:	4603      	mov	r3, r0
 8012342:	75fb      	strb	r3, [r7, #23]
    }

    if(res == LV_RES_INV) {
 8012344:	7dfb      	ldrb	r3, [r7, #23]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d106      	bne.n	8012358 <lv_draw_img+0x68>
        LV_LOG_WARN("Image draw error");
        show_error(draw_ctx, coords, "No\ndata");
 801234a:	4a05      	ldr	r2, [pc, #20]	; (8012360 <lv_draw_img+0x70>)
 801234c:	6879      	ldr	r1, [r7, #4]
 801234e:	68f8      	ldr	r0, [r7, #12]
 8012350:	f000 fa90 	bl	8012874 <show_error>
        return;
 8012354:	e000      	b.n	8012358 <lv_draw_img+0x68>
    if(dsc->opa <= LV_OPA_MIN) return;
 8012356:	bf00      	nop
    }
}
 8012358:	371c      	adds	r7, #28
 801235a:	46bd      	mov	sp, r7
 801235c:	bd90      	pop	{r4, r7, pc}
 801235e:	bf00      	nop
 8012360:	080288e0 	.word	0x080288e0

08012364 <lv_img_cf_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_cf_get_px_size(lv_img_cf_t cf)
{
 8012364:	b480      	push	{r7}
 8012366:	b085      	sub	sp, #20
 8012368:	af00      	add	r7, sp, #0
 801236a:	4603      	mov	r3, r0
 801236c:	71fb      	strb	r3, [r7, #7]
    uint8_t px_size = 0;
 801236e:	2300      	movs	r3, #0
 8012370:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 8012372:	79fb      	ldrb	r3, [r7, #7]
 8012374:	2b0e      	cmp	r3, #14
 8012376:	d836      	bhi.n	80123e6 <lv_img_cf_get_px_size+0x82>
 8012378:	a201      	add	r2, pc, #4	; (adr r2, 8012380 <lv_img_cf_get_px_size+0x1c>)
 801237a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801237e:	bf00      	nop
 8012380:	080123bd 	.word	0x080123bd
 8012384:	080123bd 	.word	0x080123bd
 8012388:	080123e7 	.word	0x080123e7
 801238c:	080123e7 	.word	0x080123e7
 8012390:	080123c3 	.word	0x080123c3
 8012394:	080123c9 	.word	0x080123c9
 8012398:	080123c3 	.word	0x080123c3
 801239c:	080123cf 	.word	0x080123cf
 80123a0:	080123d5 	.word	0x080123d5
 80123a4:	080123db 	.word	0x080123db
 80123a8:	080123e1 	.word	0x080123e1
 80123ac:	080123cf 	.word	0x080123cf
 80123b0:	080123d5 	.word	0x080123d5
 80123b4:	080123db 	.word	0x080123db
 80123b8:	080123e1 	.word	0x080123e1
        case LV_IMG_CF_UNKNOWN:
        case LV_IMG_CF_RAW:
            px_size = 0;
 80123bc:	2300      	movs	r3, #0
 80123be:	73fb      	strb	r3, [r7, #15]
            break;
 80123c0:	e014      	b.n	80123ec <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR:
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
            px_size = LV_COLOR_SIZE;
 80123c2:	2308      	movs	r3, #8
 80123c4:	73fb      	strb	r3, [r7, #15]
            break;
 80123c6:	e011      	b.n	80123ec <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR_ALPHA:
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
 80123c8:	2310      	movs	r3, #16
 80123ca:	73fb      	strb	r3, [r7, #15]
            break;
 80123cc:	e00e      	b.n	80123ec <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_ALPHA_1BIT:
            px_size = 1;
 80123ce:	2301      	movs	r3, #1
 80123d0:	73fb      	strb	r3, [r7, #15]
            break;
 80123d2:	e00b      	b.n	80123ec <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_ALPHA_2BIT:
            px_size = 2;
 80123d4:	2302      	movs	r3, #2
 80123d6:	73fb      	strb	r3, [r7, #15]
            break;
 80123d8:	e008      	b.n	80123ec <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_ALPHA_4BIT:
            px_size = 4;
 80123da:	2304      	movs	r3, #4
 80123dc:	73fb      	strb	r3, [r7, #15]
            break;
 80123de:	e005      	b.n	80123ec <lv_img_cf_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            px_size = 8;
 80123e0:	2308      	movs	r3, #8
 80123e2:	73fb      	strb	r3, [r7, #15]
            break;
 80123e4:	e002      	b.n	80123ec <lv_img_cf_get_px_size+0x88>
        default:
            px_size = 0;
 80123e6:	2300      	movs	r3, #0
 80123e8:	73fb      	strb	r3, [r7, #15]
            break;
 80123ea:	bf00      	nop
    }

    return px_size;
 80123ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	3714      	adds	r7, #20
 80123f2:	46bd      	mov	sp, r7
 80123f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f8:	4770      	bx	lr
 80123fa:	bf00      	nop

080123fc <lv_img_cf_is_chroma_keyed>:
 * Check if a color format is chroma keyed or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: chroma keyed; false: not chroma keyed
 */
bool lv_img_cf_is_chroma_keyed(lv_img_cf_t cf)
{
 80123fc:	b480      	push	{r7}
 80123fe:	b085      	sub	sp, #20
 8012400:	af00      	add	r7, sp, #0
 8012402:	4603      	mov	r3, r0
 8012404:	71fb      	strb	r3, [r7, #7]
    bool is_chroma_keyed = false;
 8012406:	2300      	movs	r3, #0
 8012408:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 801240a:	79fb      	ldrb	r3, [r7, #7]
 801240c:	2b03      	cmp	r3, #3
 801240e:	d001      	beq.n	8012414 <lv_img_cf_is_chroma_keyed+0x18>
 8012410:	2b06      	cmp	r3, #6
 8012412:	d102      	bne.n	801241a <lv_img_cf_is_chroma_keyed+0x1e>
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
        case LV_IMG_CF_RAW_CHROMA_KEYED:
            is_chroma_keyed = true;
 8012414:	2301      	movs	r3, #1
 8012416:	73fb      	strb	r3, [r7, #15]
            break;
 8012418:	e002      	b.n	8012420 <lv_img_cf_is_chroma_keyed+0x24>

        default:
            is_chroma_keyed = false;
 801241a:	2300      	movs	r3, #0
 801241c:	73fb      	strb	r3, [r7, #15]
            break;
 801241e:	bf00      	nop
    }

    return is_chroma_keyed;
 8012420:	7bfb      	ldrb	r3, [r7, #15]
}
 8012422:	4618      	mov	r0, r3
 8012424:	3714      	adds	r7, #20
 8012426:	46bd      	mov	sp, r7
 8012428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242c:	4770      	bx	lr

0801242e <lv_img_cf_has_alpha>:
 * Check if a color format has alpha channel or not
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return true: has alpha channel; false: doesn't have alpha channel
 */
bool lv_img_cf_has_alpha(lv_img_cf_t cf)
{
 801242e:	b480      	push	{r7}
 8012430:	b085      	sub	sp, #20
 8012432:	af00      	add	r7, sp, #0
 8012434:	4603      	mov	r3, r0
 8012436:	71fb      	strb	r3, [r7, #7]
    bool has_alpha = false;
 8012438:	2300      	movs	r3, #0
 801243a:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 801243c:	79fb      	ldrb	r3, [r7, #7]
 801243e:	2b0e      	cmp	r3, #14
 8012440:	bf8c      	ite	hi
 8012442:	2201      	movhi	r2, #1
 8012444:	2200      	movls	r2, #0
 8012446:	b2d2      	uxtb	r2, r2
 8012448:	2a00      	cmp	r2, #0
 801244a:	d10e      	bne.n	801246a <lv_img_cf_has_alpha+0x3c>
 801244c:	2201      	movs	r2, #1
 801244e:	409a      	lsls	r2, r3
 8012450:	f647 73a4 	movw	r3, #32676	; 0x7fa4
 8012454:	4013      	ands	r3, r2
 8012456:	2b00      	cmp	r3, #0
 8012458:	bf14      	ite	ne
 801245a:	2301      	movne	r3, #1
 801245c:	2300      	moveq	r3, #0
 801245e:	b2db      	uxtb	r3, r3
 8012460:	2b00      	cmp	r3, #0
 8012462:	d002      	beq.n	801246a <lv_img_cf_has_alpha+0x3c>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_1BIT:
        case LV_IMG_CF_ALPHA_2BIT:
        case LV_IMG_CF_ALPHA_4BIT:
        case LV_IMG_CF_ALPHA_8BIT:
            has_alpha = true;
 8012464:	2301      	movs	r3, #1
 8012466:	73fb      	strb	r3, [r7, #15]
            break;
 8012468:	e002      	b.n	8012470 <lv_img_cf_has_alpha+0x42>
        default:
            has_alpha = false;
 801246a:	2300      	movs	r3, #0
 801246c:	73fb      	strb	r3, [r7, #15]
            break;
 801246e:	bf00      	nop
    }

    return has_alpha;
 8012470:	7bfb      	ldrb	r3, [r7, #15]
}
 8012472:	4618      	mov	r0, r3
 8012474:	3714      	adds	r7, #20
 8012476:	46bd      	mov	sp, r7
 8012478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247c:	4770      	bx	lr

0801247e <lv_img_src_get_type>:
 *  - a path to a file (e.g. "S:/folder/image.bin")
 *  - or a symbol (e.g. LV_SYMBOL_CLOSE)
 * @return type of the image source LV_IMG_SRC_VARIABLE/FILE/SYMBOL/UNKNOWN
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
 801247e:	b480      	push	{r7}
 8012480:	b085      	sub	sp, #20
 8012482:	af00      	add	r7, sp, #0
 8012484:	6078      	str	r0, [r7, #4]
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 8012486:	2303      	movs	r3, #3
 8012488:	73fb      	strb	r3, [r7, #15]

    if(src == NULL) return img_src_type;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d101      	bne.n	8012494 <lv_img_src_get_type+0x16>
 8012490:	7bfb      	ldrb	r3, [r7, #15]
 8012492:	e018      	b.n	80124c6 <lv_img_src_get_type+0x48>
    const uint8_t * u8_p = src;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	60bb      	str	r3, [r7, #8]

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	781b      	ldrb	r3, [r3, #0]
 801249c:	2b1f      	cmp	r3, #31
 801249e:	d907      	bls.n	80124b0 <lv_img_src_get_type+0x32>
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	b25b      	sxtb	r3, r3
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	db02      	blt.n	80124b0 <lv_img_src_get_type+0x32>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 80124aa:	2301      	movs	r3, #1
 80124ac:	73fb      	strb	r3, [r7, #15]
 80124ae:	e009      	b.n	80124c4 <lv_img_src_get_type+0x46>
    }
    else if(u8_p[0] >= 0x80) {
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	781b      	ldrb	r3, [r3, #0]
 80124b4:	b25b      	sxtb	r3, r3
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	da02      	bge.n	80124c0 <lv_img_src_get_type+0x42>
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 80124ba:	2302      	movs	r3, #2
 80124bc:	73fb      	strb	r3, [r7, #15]
 80124be:	e001      	b.n	80124c4 <lv_img_src_get_type+0x46>
    }
    else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 80124c0:	2300      	movs	r3, #0
 80124c2:	73fb      	strb	r3, [r7, #15]

    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
 80124c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3714      	adds	r7, #20
 80124ca:	46bd      	mov	sp, r7
 80124cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d0:	4770      	bx	lr

080124d2 <lv_draw_img_decoded>:

void lv_draw_img_decoded(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * dsc,
                         const lv_area_t * coords, const uint8_t * map_p, lv_img_cf_t color_format)
{
 80124d2:	b590      	push	{r4, r7, lr}
 80124d4:	b087      	sub	sp, #28
 80124d6:	af02      	add	r7, sp, #8
 80124d8:	60f8      	str	r0, [r7, #12]
 80124da:	60b9      	str	r1, [r7, #8]
 80124dc:	607a      	str	r2, [r7, #4]
 80124de:	603b      	str	r3, [r7, #0]
    if(draw_ctx->draw_img_decoded == NULL) return;
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	695b      	ldr	r3, [r3, #20]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d00a      	beq.n	80124fe <lv_draw_img_decoded+0x2c>

    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	695c      	ldr	r4, [r3, #20]
 80124ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80124f0:	9300      	str	r3, [sp, #0]
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	687a      	ldr	r2, [r7, #4]
 80124f6:	68b9      	ldr	r1, [r7, #8]
 80124f8:	68f8      	ldr	r0, [r7, #12]
 80124fa:	47a0      	blx	r4
 80124fc:	e000      	b.n	8012500 <lv_draw_img_decoded+0x2e>
    if(draw_ctx->draw_img_decoded == NULL) return;
 80124fe:	bf00      	nop
}
 8012500:	3714      	adds	r7, #20
 8012502:	46bd      	mov	sp, r7
 8012504:	bd90      	pop	{r4, r7, pc}

08012506 <decode_and_draw>:
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_res_t decode_and_draw(lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                      const lv_area_t * coords, const void * src)
{
 8012506:	b5b0      	push	{r4, r5, r7, lr}
 8012508:	b09e      	sub	sp, #120	; 0x78
 801250a:	af02      	add	r7, sp, #8
 801250c:	60f8      	str	r0, [r7, #12]
 801250e:	60b9      	str	r1, [r7, #8]
 8012510:	607a      	str	r2, [r7, #4]
 8012512:	603b      	str	r3, [r7, #0]
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	7a9b      	ldrb	r3, [r3, #10]
 8012518:	2b02      	cmp	r3, #2
 801251a:	d801      	bhi.n	8012520 <decode_and_draw+0x1a>
 801251c:	2301      	movs	r3, #1
 801251e:	e1a5      	b.n	801286c <decode_and_draw+0x366>

    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 8012520:	68bb      	ldr	r3, [r7, #8]
 8012522:	68da      	ldr	r2, [r3, #12]
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	7a19      	ldrb	r1, [r3, #8]
 8012528:	6838      	ldr	r0, [r7, #0]
 801252a:	f003 ff6b 	bl	8016404 <_lv_img_cache_open>
 801252e:	6638      	str	r0, [r7, #96]	; 0x60

    if(cdsc == NULL) return LV_RES_INV;
 8012530:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012532:	2b00      	cmp	r3, #0
 8012534:	d101      	bne.n	801253a <decode_and_draw+0x34>
 8012536:	2300      	movs	r3, #0
 8012538:	e198      	b.n	801286c <decode_and_draw+0x366>

    lv_img_cf_t cf;
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 801253a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801253c:	7d1b      	ldrb	r3, [r3, #20]
 801253e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8012542:	b2db      	uxtb	r3, r3
 8012544:	4618      	mov	r0, r3
 8012546:	f7ff ff59 	bl	80123fc <lv_img_cf_is_chroma_keyed>
 801254a:	4603      	mov	r3, r0
 801254c:	2b00      	cmp	r3, #0
 801254e:	d003      	beq.n	8012558 <decode_and_draw+0x52>
 8012550:	2306      	movs	r3, #6
 8012552:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8012556:	e027      	b.n	80125a8 <decode_and_draw+0xa2>
    else if(LV_IMG_CF_ALPHA_8BIT == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_ALPHA_8BIT;
 8012558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801255a:	7d1b      	ldrb	r3, [r3, #20]
 801255c:	f003 031f 	and.w	r3, r3, #31
 8012560:	b2db      	uxtb	r3, r3
 8012562:	2b0e      	cmp	r3, #14
 8012564:	d103      	bne.n	801256e <decode_and_draw+0x68>
 8012566:	230e      	movs	r3, #14
 8012568:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 801256c:	e01c      	b.n	80125a8 <decode_and_draw+0xa2>
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 801256e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012570:	7d1b      	ldrb	r3, [r3, #20]
 8012572:	f003 031f 	and.w	r3, r3, #31
 8012576:	b2db      	uxtb	r3, r3
 8012578:	2b14      	cmp	r3, #20
 801257a:	d103      	bne.n	8012584 <decode_and_draw+0x7e>
 801257c:	2314      	movs	r3, #20
 801257e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8012582:	e011      	b.n	80125a8 <decode_and_draw+0xa2>
    else if(lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 8012584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012586:	7d1b      	ldrb	r3, [r3, #20]
 8012588:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801258c:	b2db      	uxtb	r3, r3
 801258e:	4618      	mov	r0, r3
 8012590:	f7ff ff4d 	bl	801242e <lv_img_cf_has_alpha>
 8012594:	4603      	mov	r3, r0
 8012596:	2b00      	cmp	r3, #0
 8012598:	d003      	beq.n	80125a2 <decode_and_draw+0x9c>
 801259a:	2305      	movs	r3, #5
 801259c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80125a0:	e002      	b.n	80125a8 <decode_and_draw+0xa2>
    else cf = LV_IMG_CF_TRUE_COLOR;
 80125a2:	2304      	movs	r3, #4
 80125a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    if(cf == LV_IMG_CF_ALPHA_8BIT) {
 80125a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80125ac:	2b0e      	cmp	r3, #14
 80125ae:	d10f      	bne.n	80125d0 <decode_and_draw+0xca>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d104      	bne.n	80125c4 <decode_and_draw+0xbe>
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	885b      	ldrh	r3, [r3, #2]
 80125be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125c2:	d005      	beq.n	80125d0 <decode_and_draw+0xca>
            /* resume normal method */
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 80125c4:	2305      	movs	r3, #5
 80125c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            cdsc->dec_dsc.img_data = NULL;
 80125ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125cc:	2200      	movs	r2, #0
 80125ce:	619a      	str	r2, [r3, #24]
        }
    }

    if(cdsc->dec_dsc.error_msg != NULL) {
 80125d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125d2:	6a1b      	ldr	r3, [r3, #32]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d007      	beq.n	80125e8 <decode_and_draw+0xe2>
        LV_LOG_WARN("Image draw error");

        show_error(draw_ctx, coords, cdsc->dec_dsc.error_msg);
 80125d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125da:	6a1b      	ldr	r3, [r3, #32]
 80125dc:	461a      	mov	r2, r3
 80125de:	6879      	ldr	r1, [r7, #4]
 80125e0:	68f8      	ldr	r0, [r7, #12]
 80125e2:	f000 f947 	bl	8012874 <show_error>
 80125e6:	e13d      	b.n	8012864 <decode_and_draw+0x35e>
    }
    /*The decoder could open the image and gave the entire uncompressed image.
     *Just draw it!*/
    else if(cdsc->dec_dsc.img_data) {
 80125e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80125ea:	699b      	ldr	r3, [r3, #24]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	f000 8087 	beq.w	8012700 <decode_and_draw+0x1fa>
        lv_area_t map_area_rot;
        lv_area_copy(&map_area_rot, coords);
 80125f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80125f6:	6879      	ldr	r1, [r7, #4]
 80125f8:	4618      	mov	r0, r3
 80125fa:	f7ff fe0f 	bl	801221c <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d104      	bne.n	8012612 <decode_and_draw+0x10c>
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	885b      	ldrh	r3, [r3, #2]
 801260c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012610:	d048      	beq.n	80126a4 <decode_and_draw+0x19e>
            int32_t w = lv_area_get_width(coords);
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f7ff fe21 	bl	801225a <lv_area_get_width>
 8012618:	4603      	mov	r3, r0
 801261a:	647b      	str	r3, [r7, #68]	; 0x44
            int32_t h = lv_area_get_height(coords);
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f7ff fe33 	bl	8012288 <lv_area_get_height>
 8012622:	4603      	mov	r3, r0
 8012624:	643b      	str	r3, [r7, #64]	; 0x40

            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 8012626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012628:	b219      	sxth	r1, r3
 801262a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801262c:	b21c      	sxth	r4, r3
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	885b      	ldrh	r3, [r3, #2]
 8012638:	68ba      	ldr	r2, [r7, #8]
 801263a:	3204      	adds	r2, #4
 801263c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8012640:	9201      	str	r2, [sp, #4]
 8012642:	9300      	str	r3, [sp, #0]
 8012644:	462b      	mov	r3, r5
 8012646:	4622      	mov	r2, r4
 8012648:	f003 fe13 	bl	8016272 <_lv_img_buf_get_transformed_area>

            map_area_rot.x1 += coords->x1;
 801264c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8012650:	b29a      	uxth	r2, r3
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012658:	b29b      	uxth	r3, r3
 801265a:	4413      	add	r3, r2
 801265c:	b29b      	uxth	r3, r3
 801265e:	b21b      	sxth	r3, r3
 8012660:	863b      	strh	r3, [r7, #48]	; 0x30
            map_area_rot.y1 += coords->y1;
 8012662:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8012666:	b29a      	uxth	r2, r3
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801266e:	b29b      	uxth	r3, r3
 8012670:	4413      	add	r3, r2
 8012672:	b29b      	uxth	r3, r3
 8012674:	b21b      	sxth	r3, r3
 8012676:	867b      	strh	r3, [r7, #50]	; 0x32
            map_area_rot.x2 += coords->x1;
 8012678:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801267c:	b29a      	uxth	r2, r3
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012684:	b29b      	uxth	r3, r3
 8012686:	4413      	add	r3, r2
 8012688:	b29b      	uxth	r3, r3
 801268a:	b21b      	sxth	r3, r3
 801268c:	86bb      	strh	r3, [r7, #52]	; 0x34
            map_area_rot.y2 += coords->y1;
 801268e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8012692:	b29a      	uxth	r2, r3
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801269a:	b29b      	uxth	r3, r3
 801269c:	4413      	add	r3, r2
 801269e:	b29b      	uxth	r3, r3
 80126a0:	b21b      	sxth	r3, r3
 80126a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        }

        lv_area_t clip_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&clip_com, draw_ctx->clip_area, &map_area_rot);
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	6899      	ldr	r1, [r3, #8]
 80126a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80126ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80126b0:	4618      	mov	r0, r3
 80126b2:	f010 f8ff 	bl	80228b4 <_lv_area_intersect>
 80126b6:	4603      	mov	r3, r0
 80126b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 80126bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80126c0:	f083 0301 	eor.w	r3, r3, #1
 80126c4:	b2db      	uxtb	r3, r3
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d004      	beq.n	80126d4 <decode_and_draw+0x1ce>
            draw_cleanup(cdsc);
 80126ca:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80126cc:	f000 f8fa 	bl	80128c4 <draw_cleanup>
            return LV_RES_OK;
 80126d0:	2301      	movs	r3, #1
 80126d2:	e0cb      	b.n	801286c <decode_and_draw+0x366>
        }

        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	689b      	ldr	r3, [r3, #8]
 80126d8:	63bb      	str	r3, [r7, #56]	; 0x38
        draw_ctx->clip_area = &clip_com;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80126e0:	609a      	str	r2, [r3, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 80126e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80126e4:	699a      	ldr	r2, [r3, #24]
 80126e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80126ea:	9300      	str	r3, [sp, #0]
 80126ec:	4613      	mov	r3, r2
 80126ee:	687a      	ldr	r2, [r7, #4]
 80126f0:	68b9      	ldr	r1, [r7, #8]
 80126f2:	68f8      	ldr	r0, [r7, #12]
 80126f4:	f7ff feed 	bl	80124d2 <lv_draw_img_decoded>
        draw_ctx->clip_area = clip_area_ori;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126fc:	609a      	str	r2, [r3, #8]
 80126fe:	e0b1      	b.n	8012864 <decode_and_draw+0x35e>
    }
    /*The whole uncompressed image is not available. Try to read it line-by-line*/
    else {
        lv_area_t mask_com; /*Common area of mask and coords*/
        bool union_ok;
        union_ok = _lv_area_intersect(&mask_com, draw_ctx->clip_area, coords);
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	6899      	ldr	r1, [r3, #8]
 8012704:	f107 0320 	add.w	r3, r7, #32
 8012708:	687a      	ldr	r2, [r7, #4]
 801270a:	4618      	mov	r0, r3
 801270c:	f010 f8d2 	bl	80228b4 <_lv_area_intersect>
 8012710:	4603      	mov	r3, r0
 8012712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        /*Out of mask. There is nothing to draw so the image is drawn successfully.*/
        if(union_ok == false) {
 8012716:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801271a:	f083 0301 	eor.w	r3, r3, #1
 801271e:	b2db      	uxtb	r3, r3
 8012720:	2b00      	cmp	r3, #0
 8012722:	d004      	beq.n	801272e <decode_and_draw+0x228>
            draw_cleanup(cdsc);
 8012724:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8012726:	f000 f8cd 	bl	80128c4 <draw_cleanup>
            return LV_RES_OK;
 801272a:	2301      	movs	r3, #1
 801272c:	e09e      	b.n	801286c <decode_and_draw+0x366>
        }

        int32_t width = lv_area_get_width(&mask_com);
 801272e:	f107 0320 	add.w	r3, r7, #32
 8012732:	4618      	mov	r0, r3
 8012734:	f7ff fd91 	bl	801225a <lv_area_get_width>
 8012738:	4603      	mov	r3, r0
 801273a:	65bb      	str	r3, [r7, #88]	; 0x58

        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 801273c:	f107 0320 	add.w	r3, r7, #32
 8012740:	4618      	mov	r0, r3
 8012742:	f7ff fd8a 	bl	801225a <lv_area_get_width>
 8012746:	4603      	mov	r3, r0
 8012748:	005b      	lsls	r3, r3, #1
 801274a:	4618      	mov	r0, r3
 801274c:	f011 fc5c 	bl	8024008 <lv_mem_buf_get>
 8012750:	6578      	str	r0, [r7, #84]	; 0x54
                                        LV_IMG_PX_SIZE_ALPHA_BYTE);  /*+1 because of the possible alpha byte*/

        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	689b      	ldr	r3, [r3, #8]
 8012756:	653b      	str	r3, [r7, #80]	; 0x50
        lv_area_t line;
        lv_area_copy(&line, &mask_com);
 8012758:	f107 0220 	add.w	r2, r7, #32
 801275c:	f107 0318 	add.w	r3, r7, #24
 8012760:	4611      	mov	r1, r2
 8012762:	4618      	mov	r0, r3
 8012764:	f7ff fd5a 	bl	801221c <lv_area_copy>
        lv_area_set_height(&line, 1);
 8012768:	f107 0318 	add.w	r3, r7, #24
 801276c:	2101      	movs	r1, #1
 801276e:	4618      	mov	r0, r3
 8012770:	f00f fffb 	bl	802276a <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 8012774:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012778:	461a      	mov	r2, r3
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012780:	1ad3      	subs	r3, r2, r3
 8012782:	64fb      	str	r3, [r7, #76]	; 0x4c
        int32_t y = mask_com.y1 - coords->y1;
 8012784:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012788:	461a      	mov	r2, r3
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012790:	1ad3      	subs	r3, r2, r3
 8012792:	66bb      	str	r3, [r7, #104]	; 0x68
        int32_t row;
        lv_res_t read_res;
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8012794:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012798:	667b      	str	r3, [r7, #100]	; 0x64
 801279a:	e057      	b.n	801284c <decode_and_draw+0x346>
            lv_area_t mask_line;
            union_ok = _lv_area_intersect(&mask_line, clip_area_ori, &line);
 801279c:	f107 0218 	add.w	r2, r7, #24
 80127a0:	f107 0310 	add.w	r3, r7, #16
 80127a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80127a6:	4618      	mov	r0, r3
 80127a8:	f010 f884 	bl	80228b4 <_lv_area_intersect>
 80127ac:	4603      	mov	r3, r0
 80127ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if(union_ok == false) continue;
 80127b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80127b6:	f083 0301 	eor.w	r3, r3, #1
 80127ba:	b2db      	uxtb	r3, r3
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d141      	bne.n	8012844 <decode_and_draw+0x33e>

            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 80127c0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80127c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127c4:	b219      	sxth	r1, r3
 80127c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80127c8:	b21a      	sxth	r2, r3
 80127ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80127cc:	b21c      	sxth	r4, r3
 80127ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127d0:	9300      	str	r3, [sp, #0]
 80127d2:	4623      	mov	r3, r4
 80127d4:	f003 ffc0 	bl	8016758 <lv_img_decoder_read_line>
 80127d8:	4603      	mov	r3, r0
 80127da:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if(read_res != LV_RES_OK) {
 80127de:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80127e2:	2b01      	cmp	r3, #1
 80127e4:	d00e      	beq.n	8012804 <decode_and_draw+0x2fe>
                lv_img_decoder_close(&cdsc->dec_dsc);
 80127e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80127e8:	4618      	mov	r0, r3
 80127ea:	f003 ffe1 	bl	80167b0 <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
                lv_mem_buf_release(buf);
 80127ee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80127f0:	f011 fcb6 	bl	8024160 <lv_mem_buf_release>
                draw_cleanup(cdsc);
 80127f4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80127f6:	f000 f865 	bl	80128c4 <draw_cleanup>
                draw_ctx->clip_area = clip_area_ori;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80127fe:	609a      	str	r2, [r3, #8]
                return LV_RES_INV;
 8012800:	2300      	movs	r3, #0
            return LV_RES_OK;
 8012802:	e033      	b.n	801286c <decode_and_draw+0x366>
            }

            draw_ctx->clip_area = &mask_line;
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	f107 0210 	add.w	r2, r7, #16
 801280a:	609a      	str	r2, [r3, #8]
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 801280c:	f107 0218 	add.w	r2, r7, #24
 8012810:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8012814:	9300      	str	r3, [sp, #0]
 8012816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012818:	68b9      	ldr	r1, [r7, #8]
 801281a:	68f8      	ldr	r0, [r7, #12]
 801281c:	f7ff fe59 	bl	80124d2 <lv_draw_img_decoded>
            line.y1++;
 8012820:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012824:	b29b      	uxth	r3, r3
 8012826:	3301      	adds	r3, #1
 8012828:	b29b      	uxth	r3, r3
 801282a:	b21b      	sxth	r3, r3
 801282c:	837b      	strh	r3, [r7, #26]
            line.y2++;
 801282e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012832:	b29b      	uxth	r3, r3
 8012834:	3301      	adds	r3, #1
 8012836:	b29b      	uxth	r3, r3
 8012838:	b21b      	sxth	r3, r3
 801283a:	83fb      	strh	r3, [r7, #30]
            y++;
 801283c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801283e:	3301      	adds	r3, #1
 8012840:	66bb      	str	r3, [r7, #104]	; 0x68
 8012842:	e000      	b.n	8012846 <decode_and_draw+0x340>
            if(union_ok == false) continue;
 8012844:	bf00      	nop
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8012846:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012848:	3301      	adds	r3, #1
 801284a:	667b      	str	r3, [r7, #100]	; 0x64
 801284c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012850:	461a      	mov	r2, r3
 8012852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012854:	4293      	cmp	r3, r2
 8012856:	dda1      	ble.n	801279c <decode_and_draw+0x296>
        }
        draw_ctx->clip_area = clip_area_ori;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801285c:	609a      	str	r2, [r3, #8]
        lv_mem_buf_release(buf);
 801285e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012860:	f011 fc7e 	bl	8024160 <lv_mem_buf_release>
    }

    draw_cleanup(cdsc);
 8012864:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8012866:	f000 f82d 	bl	80128c4 <draw_cleanup>
    return LV_RES_OK;
 801286a:	2301      	movs	r3, #1
}
 801286c:	4618      	mov	r0, r3
 801286e:	3770      	adds	r7, #112	; 0x70
 8012870:	46bd      	mov	sp, r7
 8012872:	bdb0      	pop	{r4, r5, r7, pc}

08012874 <show_error>:


static void show_error(lv_draw_ctx_t * draw_ctx, const lv_area_t * coords, const char * msg)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b09a      	sub	sp, #104	; 0x68
 8012878:	af02      	add	r7, sp, #8
 801287a:	60f8      	str	r0, [r7, #12]
 801287c:	60b9      	str	r1, [r7, #8]
 801287e:	607a      	str	r2, [r7, #4]
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 8012880:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012884:	4618      	mov	r0, r3
 8012886:	f003 fc67 	bl	8016158 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 801288a:	f7ff fcb3 	bl	80121f4 <lv_color_white>
 801288e:	f887 0034 	strb.w	r0, [r7, #52]	; 0x34
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 8012892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012896:	68ba      	ldr	r2, [r7, #8]
 8012898:	4619      	mov	r1, r3
 801289a:	68f8      	ldr	r0, [r7, #12]
 801289c:	f003 fca0 	bl	80161e0 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 80128a0:	f107 0310 	add.w	r3, r7, #16
 80128a4:	4618      	mov	r0, r3
 80128a6:	f000 f899 	bl	80129dc <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 80128aa:	f107 0110 	add.w	r1, r7, #16
 80128ae:	2300      	movs	r3, #0
 80128b0:	9300      	str	r3, [sp, #0]
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	68ba      	ldr	r2, [r7, #8]
 80128b6:	68f8      	ldr	r0, [r7, #12]
 80128b8:	f000 f8bc 	bl	8012a34 <lv_draw_label>
}
 80128bc:	bf00      	nop
 80128be:	3760      	adds	r7, #96	; 0x60
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}

080128c4 <draw_cleanup>:

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b082      	sub	sp, #8
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	4618      	mov	r0, r3
 80128d0:	f003 ff6e 	bl	80167b0 <lv_img_decoder_close>
#else
    LV_UNUSED(cache);
#endif
}
 80128d4:	bf00      	nop
 80128d6:	3708      	adds	r7, #8
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80128dc:	b480      	push	{r7}
 80128de:	b083      	sub	sp, #12
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80128ea:	b29a      	uxth	r2, r3
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80128f2:	b29b      	uxth	r3, r3
 80128f4:	1ad3      	subs	r3, r2, r3
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	3301      	adds	r3, #1
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	b21b      	sxth	r3, r3
}
 80128fe:	4618      	mov	r0, r3
 8012900:	370c      	adds	r7, #12
 8012902:	46bd      	mov	sp, r7
 8012904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012908:	4770      	bx	lr

0801290a <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 801290a:	b480      	push	{r7}
 801290c:	b083      	sub	sp, #12
 801290e:	af00      	add	r7, sp, #0
 8012910:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 8012918:	4618      	mov	r0, r3
 801291a:	370c      	adds	r7, #12
 801291c:	46bd      	mov	sp, r7
 801291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012922:	4770      	bx	lr

08012924 <lv_memcpy_small>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
 8012924:	b480      	push	{r7}
 8012926:	b087      	sub	sp, #28
 8012928:	af00      	add	r7, sp, #0
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	613b      	str	r3, [r7, #16]

    while(len) {
 8012938:	e00c      	b.n	8012954 <lv_memcpy_small+0x30>
        *d8 = *s8;
 801293a:	693b      	ldr	r3, [r7, #16]
 801293c:	781a      	ldrb	r2, [r3, #0]
 801293e:	697b      	ldr	r3, [r7, #20]
 8012940:	701a      	strb	r2, [r3, #0]
        d8++;
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	3301      	adds	r3, #1
 8012946:	617b      	str	r3, [r7, #20]
        s8++;
 8012948:	693b      	ldr	r3, [r7, #16]
 801294a:	3301      	adds	r3, #1
 801294c:	613b      	str	r3, [r7, #16]
        len--;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	3b01      	subs	r3, #1
 8012952:	607b      	str	r3, [r7, #4]
    while(len) {
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d1ef      	bne.n	801293a <lv_memcpy_small+0x16>
    }

    return dst;
 801295a:	68fb      	ldr	r3, [r7, #12]
}
 801295c:	4618      	mov	r0, r3
 801295e:	371c      	adds	r7, #28
 8012960:	46bd      	mov	sp, r7
 8012962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012966:	4770      	bx	lr

08012968 <lv_color_make>:
{
 8012968:	b480      	push	{r7}
 801296a:	b083      	sub	sp, #12
 801296c:	af00      	add	r7, sp, #0
 801296e:	4603      	mov	r3, r0
 8012970:	71fb      	strb	r3, [r7, #7]
 8012972:	460b      	mov	r3, r1
 8012974:	71bb      	strb	r3, [r7, #6]
 8012976:	4613      	mov	r3, r2
 8012978:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801297a:	797b      	ldrb	r3, [r7, #5]
 801297c:	09db      	lsrs	r3, r3, #7
 801297e:	b2da      	uxtb	r2, r3
 8012980:	79bb      	ldrb	r3, [r7, #6]
 8012982:	09db      	lsrs	r3, r3, #7
 8012984:	b2db      	uxtb	r3, r3
 8012986:	4313      	orrs	r3, r2
 8012988:	b2da      	uxtb	r2, r3
 801298a:	79fb      	ldrb	r3, [r7, #7]
 801298c:	09db      	lsrs	r3, r3, #7
 801298e:	b2db      	uxtb	r3, r3
 8012990:	4313      	orrs	r3, r2
 8012992:	b2db      	uxtb	r3, r3
}
 8012994:	4618      	mov	r0, r3
 8012996:	370c      	adds	r7, #12
 8012998:	46bd      	mov	sp, r7
 801299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299e:	4770      	bx	lr

080129a0 <lv_color_black>:
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 80129a4:	2200      	movs	r2, #0
 80129a6:	2100      	movs	r1, #0
 80129a8:	2000      	movs	r0, #0
 80129aa:	f7ff ffdd 	bl	8012968 <lv_color_make>
 80129ae:	4603      	mov	r3, r0
}
 80129b0:	4618      	mov	r0, r3
 80129b2:	bd80      	pop	{r7, pc}

080129b4 <lv_bidi_calculate_align>:
 * @param align     For LV_TEXT_ALIGN_AUTO give LV_TEXT_ALIGN_LEFT else leave unchanged, write back the calculated align here
 * @param base_dir  Unused
 * @param txt       Unused
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
 80129b4:	b480      	push	{r7}
 80129b6:	b085      	sub	sp, #20
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	60f8      	str	r0, [r7, #12]
 80129bc:	60b9      	str	r1, [r7, #8]
 80129be:	607a      	str	r2, [r7, #4]
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	781b      	ldrb	r3, [r3, #0]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d102      	bne.n	80129ce <lv_bidi_calculate_align+0x1a>
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	2201      	movs	r2, #1
 80129cc:	701a      	strb	r2, [r3, #0]
}
 80129ce:	bf00      	nop
 80129d0:	3714      	adds	r7, #20
 80129d2:	46bd      	mov	sp, r7
 80129d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d8:	4770      	bx	lr
	...

080129dc <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
 80129dc:	b590      	push	{r4, r7, lr}
 80129de:	b083      	sub	sp, #12
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 80129e4:	2120      	movs	r1, #32
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f011 feb8 	bl	802475c <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	22ff      	movs	r2, #255	; 0xff
 80129f0:	761a      	strb	r2, [r3, #24]
    dsc->color = lv_color_black();
 80129f2:	687c      	ldr	r4, [r7, #4]
 80129f4:	f7ff ffd4 	bl	80129a0 <lv_color_black>
 80129f8:	7320      	strb	r0, [r4, #12]
    dsc->font = LV_FONT_DEFAULT;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	4a0c      	ldr	r2, [pc, #48]	; (8012a30 <lv_draw_label_dsc_init+0x54>)
 80129fe:	601a      	str	r2, [r3, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a06:	605a      	str	r2, [r3, #4]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a0e:	609a      	str	r2, [r3, #8]
    dsc->sel_color = lv_color_black();
 8012a10:	687c      	ldr	r4, [r7, #4]
 8012a12:	f7ff ffc5 	bl	80129a0 <lv_color_black>
 8012a16:	7360      	strb	r0, [r4, #13]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 8012a18:	687c      	ldr	r4, [r7, #4]
 8012a1a:	2005      	movs	r0, #5
 8012a1c:	f010 fc98 	bl	8023350 <lv_palette_main>
 8012a20:	73a0      	strb	r0, [r4, #14]
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	2200      	movs	r2, #0
 8012a26:	765a      	strb	r2, [r3, #25]
}
 8012a28:	bf00      	nop
 8012a2a:	370c      	adds	r7, #12
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd90      	pop	{r4, r7, pc}
 8012a30:	0802faa0 	.word	0x0802faa0

08012a34 <lv_draw_label>:
 * @param hint pointer to a `lv_draw_label_hint_t` variable.
 * It is managed by the draw to speed up the drawing of very long texts (thousands of lines).
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                         const lv_area_t * coords, const char * txt, lv_draw_label_hint_t * hint)
{
 8012a34:	b5b0      	push	{r4, r5, r7, lr}
 8012a36:	b0c8      	sub	sp, #288	; 0x120
 8012a38:	af04      	add	r7, sp, #16
 8012a3a:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8012a3e:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8012a42:	6020      	str	r0, [r4, #0]
 8012a44:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8012a48:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8012a4c:	6001      	str	r1, [r0, #0]
 8012a4e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8012a52:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8012a56:	600a      	str	r2, [r1, #0]
 8012a58:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8012a5c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8012a60:	6013      	str	r3, [r2, #0]
    if(dsc->opa <= LV_OPA_MIN) return;
 8012a62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	7e1b      	ldrb	r3, [r3, #24]
 8012a6e:	2b02      	cmp	r3, #2
 8012a70:	f240 85ea 	bls.w	8013648 <lv_draw_label+0xc14>
    if(dsc->font == NULL) {
 8012a74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	f000 85e3 	beq.w	801364c <lv_draw_label+0xc18>
        LV_LOG_WARN("dsc->font == NULL");
        return;
    }

    if(draw_ctx->draw_letter == NULL) {
 8012a86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	69db      	ldr	r3, [r3, #28]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	f000 85dc 	beq.w	8013650 <lv_draw_label+0xc1c>
        LV_LOG_WARN("draw->draw_letter == NULL (there is no function to draw letters)");
        return;
    }

    lv_draw_label_dsc_t dsc_mod = *dsc;
 8012a98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8012aa6:	461d      	mov	r5, r3
 8012aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012aac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012ab0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    const lv_font_t * font = dsc->font;
 8012ab4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt == NULL || txt[0] == '\0')
 8012ac4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012ac8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	f000 85c0 	beq.w	8013654 <lv_draw_label+0xc20>
 8012ad4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012ad8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	f000 85b7 	beq.w	8013654 <lv_draw_label+0xc20>
        return;

    lv_area_t clipped_area;
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_ctx->clip_area);
 8012ae6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012aea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	689a      	ldr	r2, [r3, #8]
 8012af2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012af6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012afa:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8012afe:	6819      	ldr	r1, [r3, #0]
 8012b00:	f00f fed8 	bl	80228b4 <_lv_area_intersect>
 8012b04:	4603      	mov	r3, r0
 8012b06:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
    if(!clip_ok) return;
 8012b0a:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8012b0e:	f083 0301 	eor.w	r3, r3, #1
 8012b12:	b2db      	uxtb	r3, r3
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	f040 859f 	bne.w	8013658 <lv_draw_label+0xc24>

    lv_text_align_t align = dsc->align;
 8012b1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	7e9b      	ldrb	r3, [r3, #26]
 8012b26:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    lv_base_dir_t base_dir = dsc->bidi_dir;
 8012b2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	7e5b      	ldrb	r3, [r3, #25]
 8012b36:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    lv_bidi_calculate_align(&align, &base_dir, txt);
 8012b3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b3e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012b42:	f107 018a 	add.w	r1, r7, #138	; 0x8a
 8012b46:	f107 008b 	add.w	r0, r7, #139	; 0x8b
 8012b4a:	681a      	ldr	r2, [r3, #0]
 8012b4c:	f7ff ff32 	bl	80129b4 <lv_bidi_calculate_align>

    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 8012b50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	7edb      	ldrb	r3, [r3, #27]
 8012b5c:	f003 0302 	and.w	r3, r3, #2
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d10a      	bne.n	8012b7a <lv_draw_label+0x146>
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 8012b64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012b6c:	6818      	ldr	r0, [r3, #0]
 8012b6e:	f7ff feb5 	bl	80128dc <lv_area_get_width>
 8012b72:	4603      	mov	r3, r0
 8012b74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8012b78:	e02d      	b.n	8012bd6 <lv_draw_label+0x1a2>
    }
    else {
        /*If EXPAND is enabled then not limit the text's width to the object's width*/
        lv_point_t p;
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 8012b7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	681c      	ldr	r4, [r3, #0]
 8012b86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 8012b94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012ba2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8012ba6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8012baa:	6812      	ldr	r2, [r2, #0]
 8012bac:	7ed2      	ldrb	r2, [r2, #27]
 8012bae:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8012bb2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8012bb6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8012bba:	9202      	str	r2, [sp, #8]
 8012bbc:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8012bc0:	9201      	str	r2, [sp, #4]
 8012bc2:	9300      	str	r3, [sp, #0]
 8012bc4:	462b      	mov	r3, r5
 8012bc6:	4622      	mov	r2, r4
 8012bc8:	6809      	ldr	r1, [r1, #0]
 8012bca:	f013 fc05 	bl	80263d8 <lv_txt_get_size>
                        dsc->flag);
        w = p.x;
 8012bce:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8012bd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    int32_t line_height_font = lv_font_get_line_height(font);
 8012bd6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8012bda:	f7ff fe96 	bl	801290a <lv_font_get_line_height>
 8012bde:	4603      	mov	r3, r0
 8012be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    int32_t line_height = line_height_font + dsc->line_space;
 8012be4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8012bf2:	461a      	mov	r2, r3
 8012bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012bf8:	4413      	add	r3, r2
 8012bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    /*Init variables for the first line*/
    int32_t line_width = 0;
 8012bfe:	2300      	movs	r3, #0
 8012c00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    lv_point_t pos;
    pos.x = coords->x1;
 8012c04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c12:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    pos.y = coords->y1;
 8012c16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012c24:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    int32_t x_ofs = 0;
 8012c28:	2300      	movs	r3, #0
 8012c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    int32_t y_ofs = 0;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    x_ofs = dsc->ofs_x;
 8012c34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8012c42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    y_ofs = dsc->ofs_y;
 8012c46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8012c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    pos.y += y_ofs;
 8012c58:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8012c5c:	b29a      	uxth	r2, r3
 8012c5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8012c62:	b29b      	uxth	r3, r3
 8012c64:	4413      	add	r3, r2
 8012c66:	b29b      	uxth	r3, r3
 8012c68:	b21b      	sxth	r3, r3
 8012c6a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    uint32_t line_start     = 0;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    int32_t last_line_start = -1;
 8012c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 8012c7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d02c      	beq.n	8012cde <lv_draw_label+0x2aa>
 8012c84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d128      	bne.n	8012cde <lv_draw_label+0x2aa>
 8012c8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012c90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	da1f      	bge.n	8012cde <lv_draw_label+0x2aa>
        /*If the label changed too much recalculate the hint.*/
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 8012c9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8012ca2:	689b      	ldr	r3, [r3, #8]
 8012ca4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8012ca8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8012cac:	6812      	ldr	r2, [r2, #0]
 8012cae:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8012cb2:	1a9b      	subs	r3, r3, r2
 8012cb4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8012cb8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8012cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012cc0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012cc4:	005b      	lsls	r3, r3, #1
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	dd04      	ble.n	8012cd4 <lv_draw_label+0x2a0>
            hint->line_start = -1;
 8012cca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8012cce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012cd2:	601a      	str	r2, [r3, #0]
        }
        last_line_start = hint->line_start;
 8012cd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
 8012cde:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d013      	beq.n	8012d0e <lv_draw_label+0x2da>
 8012ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	db0f      	blt.n	8012d0e <lv_draw_label+0x2da>
        line_start = last_line_start;
 8012cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012cf2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        pos.y += hint->y;
 8012cf6:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8012cfa:	b29a      	uxth	r2, r3
 8012cfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	b29b      	uxth	r3, r3
 8012d04:	4413      	add	r3, r2
 8012d06:	b29b      	uxth	r3, r3
 8012d08:	b21b      	sxth	r3, r3
 8012d0a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    }

    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8012d0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012d12:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012d16:	681a      	ldr	r2, [r3, #0]
 8012d18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012d1c:	18d0      	adds	r0, r2, r3
 8012d1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8012d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d30:	b219      	sxth	r1, r3
 8012d32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	7edb      	ldrb	r3, [r3, #27]
 8012d3e:	9301      	str	r3, [sp, #4]
 8012d40:	2300      	movs	r3, #0
 8012d42:	9300      	str	r3, [sp, #0]
 8012d44:	460b      	mov	r3, r1
 8012d46:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8012d4a:	f013 fce1 	bl	8026710 <_lv_txt_get_next_line>
 8012d4e:	4602      	mov	r2, r0
 8012d50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012d54:	4413      	add	r3, r2
 8012d56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    /*Go the first visible line*/
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8012d5a:	e06c      	b.n	8012e36 <lv_draw_label+0x402>
        /*Go to next line*/
        line_start = line_end;
 8012d5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8012d60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8012d64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012d68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012d6c:	681a      	ldr	r2, [r3, #0]
 8012d6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012d72:	18d0      	adds	r0, r2, r3
 8012d74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8012d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012d86:	b219      	sxth	r1, r3
 8012d88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	7edb      	ldrb	r3, [r3, #27]
 8012d94:	9301      	str	r3, [sp, #4]
 8012d96:	2300      	movs	r3, #0
 8012d98:	9300      	str	r3, [sp, #0]
 8012d9a:	460b      	mov	r3, r1
 8012d9c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8012da0:	f013 fcb6 	bl	8026710 <_lv_txt_get_next_line>
 8012da4:	4602      	mov	r2, r0
 8012da6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8012daa:	4413      	add	r3, r2
 8012dac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        pos.y += line_height;
 8012db0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8012db4:	b29a      	uxth	r2, r3
 8012db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012dba:	b29b      	uxth	r3, r3
 8012dbc:	4413      	add	r3, r2
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	b21b      	sxth	r3, r3
 8012dc2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        /*Save at the threshold coordinate*/
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8012dc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d027      	beq.n	8012e1e <lv_draw_label+0x3ea>
 8012dce:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8012dd2:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8012dd6:	db22      	blt.n	8012e1e <lv_draw_label+0x3ea>
 8012dd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	da1d      	bge.n	8012e1e <lv_draw_label+0x3ea>
            hint->line_start = line_start;
 8012de2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8012de6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8012dea:	601a      	str	r2, [r3, #0]
            hint->y          = pos.y - coords->y1;
 8012dec:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8012df0:	461a      	mov	r2, r3
 8012df2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012df6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012e00:	1ad2      	subs	r2, r2, r3
 8012e02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8012e06:	605a      	str	r2, [r3, #4]
            hint->coord_y    = coords->y1;
 8012e08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012e0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012e16:	461a      	mov	r2, r3
 8012e18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8012e1c:	609a      	str	r2, [r3, #8]
        }

        if(txt[line_start] == '\0') return;
 8012e1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012e22:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012e26:	681a      	ldr	r2, [r3, #0]
 8012e28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012e2c:	4413      	add	r3, r2
 8012e2e:	781b      	ldrb	r3, [r3, #0]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	f000 8413 	beq.w	801365c <lv_draw_label+0xc28>
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8012e36:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012e40:	4413      	add	r3, r2
 8012e42:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8012e46:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8012e4a:	6812      	ldr	r2, [r2, #0]
 8012e4c:	6892      	ldr	r2, [r2, #8]
 8012e4e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8012e52:	4293      	cmp	r3, r2
 8012e54:	db82      	blt.n	8012d5c <lv_draw_label+0x328>
    }

    /*Align to middle*/
    if(align == LV_TEXT_ALIGN_CENTER) {
 8012e56:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8012e5a:	2b02      	cmp	r3, #2
 8012e5c:	d13d      	bne.n	8012eda <lv_draw_label+0x4a6>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8012e5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012e62:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012e66:	681a      	ldr	r2, [r3, #0]
 8012e68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012e6c:	18d0      	adds	r0, r2, r3
 8012e6e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8012e72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012e76:	1ad1      	subs	r1, r2, r3
 8012e78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8012e86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	7edb      	ldrb	r3, [r3, #27]
 8012e92:	9300      	str	r3, [sp, #0]
 8012e94:	4613      	mov	r3, r2
 8012e96:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8012e9a:	f013 fd17 	bl	80268cc <lv_txt_get_width>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8012ea4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012ea8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012eac:	6818      	ldr	r0, [r3, #0]
 8012eae:	f7ff fd15 	bl	80128dc <lv_area_get_width>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	461a      	mov	r2, r3
 8012eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012eba:	1ad3      	subs	r3, r2, r3
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	da00      	bge.n	8012ec2 <lv_draw_label+0x48e>
 8012ec0:	3301      	adds	r3, #1
 8012ec2:	105b      	asrs	r3, r3, #1
 8012ec4:	4619      	mov	r1, r3
 8012ec6:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8012eca:	b29a      	uxth	r2, r3
 8012ecc:	b28b      	uxth	r3, r1
 8012ece:	4413      	add	r3, r2
 8012ed0:	b29b      	uxth	r3, r3
 8012ed2:	b21b      	sxth	r3, r3
 8012ed4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8012ed8:	e03b      	b.n	8012f52 <lv_draw_label+0x51e>

    }
    /*Align to the right*/
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8012eda:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8012ede:	2b03      	cmp	r3, #3
 8012ee0:	d137      	bne.n	8012f52 <lv_draw_label+0x51e>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8012ee2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012ee6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8012eea:	681a      	ldr	r2, [r3, #0]
 8012eec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012ef0:	18d0      	adds	r0, r2, r3
 8012ef2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8012ef6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012efa:	1ad1      	subs	r1, r2, r3
 8012efc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8012f0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	7edb      	ldrb	r3, [r3, #27]
 8012f16:	9300      	str	r3, [sp, #0]
 8012f18:	4613      	mov	r3, r2
 8012f1a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8012f1e:	f013 fcd5 	bl	80268cc <lv_txt_get_width>
 8012f22:	4603      	mov	r3, r0
 8012f24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
        pos.x += lv_area_get_width(coords) - line_width;
 8012f28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012f2c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012f30:	6818      	ldr	r0, [r3, #0]
 8012f32:	f7ff fcd3 	bl	80128dc <lv_area_get_width>
 8012f36:	4603      	mov	r3, r0
 8012f38:	461a      	mov	r2, r3
 8012f3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012f3e:	1ad3      	subs	r3, r2, r3
 8012f40:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8012f44:	b292      	uxth	r2, r2
 8012f46:	b29b      	uxth	r3, r3
 8012f48:	4413      	add	r3, r2
 8012f4a:	b29b      	uxth	r3, r3
 8012f4c:	b21b      	sxth	r3, r3
 8012f4e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    }
    uint32_t sel_start = dsc->sel_start;
 8012f52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	685b      	ldr	r3, [r3, #4]
 8012f5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    uint32_t sel_end = dsc->sel_end;
 8012f62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	689b      	ldr	r3, [r3, #8]
 8012f6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    if(sel_start > sel_end) {
 8012f72:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8012f76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	d90b      	bls.n	8012f96 <lv_draw_label+0x562>
        uint32_t tmp = sel_start;
 8012f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012f82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        sel_start = sel_end;
 8012f86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012f8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
        sel_end = tmp;
 8012f8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012f92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    }
    lv_draw_line_dsc_t line_dsc;

    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 8012f96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	7f1b      	ldrb	r3, [r3, #28]
 8012fa2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012fa6:	b2db      	uxtb	r3, r3
 8012fa8:	f003 0301 	and.w	r3, r3, #1
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d10c      	bne.n	8012fca <lv_draw_label+0x596>
 8012fb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	7f1b      	ldrb	r3, [r3, #28]
 8012fbc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012fc0:	b2db      	uxtb	r3, r3
 8012fc2:	f003 0302 	and.w	r3, r3, #2
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d035      	beq.n	8013036 <lv_draw_label+0x602>
        lv_draw_line_dsc_init(&line_dsc);
 8012fca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f000 fc79 	bl	80138c6 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 8012fd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	7b1b      	ldrb	r3, [r3, #12]
 8012fe0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 8012fe4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012fe8:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d005      	beq.n	8012ffc <lv_draw_label+0x5c8>
 8012ff0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012ff4:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8012ff8:	b21b      	sxth	r3, r3
 8012ffa:	e000      	b.n	8012ffe <lv_draw_label+0x5ca>
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        line_dsc.opa = dsc->opa;
 8013002:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	7e1b      	ldrb	r3, [r3, #24]
 801300e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        line_dsc.blend_mode = dsc->blend_mode;
 8013012:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	7f1b      	ldrb	r3, [r3, #28]
 801301e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8013022:	b2db      	uxtb	r3, r3
 8013024:	f003 0303 	and.w	r3, r3, #3
 8013028:	b2da      	uxtb	r2, r3
 801302a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801302e:	f362 0301 	bfi	r3, r2, #0, #2
 8013032:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    }

    cmd_state_t cmd_state = CMD_STATE_WAIT;
 8013036:	2300      	movs	r3, #0
 8013038:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
    uint32_t i;
    uint32_t par_start = 0;
 801303c:	2300      	movs	r3, #0
 801303e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    lv_color_t recolor  = lv_color_black();
 8013042:	f7ff fcad 	bl	80129a0 <lv_color_black>
 8013046:	4603      	mov	r3, r0
 8013048:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
    lv_color_t color = lv_color_black();
 801304c:	f7ff fca8 	bl	80129a0 <lv_color_black>
 8013050:	4603      	mov	r3, r0
 8013052:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    int32_t letter_w;

    lv_draw_rect_dsc_t draw_dsc_sel;
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 8013056:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801305a:	4618      	mov	r0, r3
 801305c:	f003 f87c 	bl	8016158 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 8013060:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	7b9b      	ldrb	r3, [r3, #14]
 801306c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

    int32_t pos_x_start = pos.x;
 8013070:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8013074:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    /*Write out all lines*/
    while(txt[line_start] != '\0') {
 8013078:	e2d9      	b.n	801362e <lv_draw_label+0xbfa>
        pos.x += x_ofs;
 801307a:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801307e:	b29a      	uxth	r2, r3
 8013080:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013084:	b29b      	uxth	r3, r3
 8013086:	4413      	add	r3, r2
 8013088:	b29b      	uxth	r3, r3
 801308a:	b21b      	sxth	r3, r3
 801308c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

        /*Write all letter of a line*/
        cmd_state = CMD_STATE_WAIT;
 8013090:	2300      	movs	r3, #0
 8013092:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
        i         = 0;
 8013096:	2300      	movs	r3, #0
 8013098:	677b      	str	r3, [r7, #116]	; 0x74
#if LV_USE_BIDI
        char * bidi_txt = lv_mem_buf_get(line_end - line_start + 1);
        _lv_bidi_process_paragraph(txt + line_start, bidi_txt, line_end - line_start, base_dir, NULL, 0);
#else
        const char * bidi_txt = txt + line_start;
 801309a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801309e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80130a2:	681a      	ldr	r2, [r3, #0]
 80130a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80130a8:	4413      	add	r3, r2
 80130aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
#endif

        while(i < line_end - line_start) {
 80130ae:	e154      	b.n	801335a <lv_draw_label+0x926>
            uint32_t logical_char_pos = 0;
 80130b0:	2300      	movs	r3, #0
 80130b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 80130b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80130ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130be:	4293      	cmp	r3, r2
 80130c0:	d013      	beq.n	80130ea <lv_draw_label+0x6b6>
 80130c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80130c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130ca:	4293      	cmp	r3, r2
 80130cc:	d00d      	beq.n	80130ea <lv_draw_label+0x6b6>
#if LV_USE_BIDI
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start);
                uint32_t t = _lv_txt_encoded_get_char_id(bidi_txt, i);
                logical_char_pos += _lv_bidi_get_logical_pos(bidi_txt, NULL, line_end - line_start, base_dir, t, NULL);
#else
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 80130ce:	4ba1      	ldr	r3, [pc, #644]	; (8013354 <lv_draw_label+0x920>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80130d4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80130d8:	4411      	add	r1, r2
 80130da:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80130de:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80130e2:	6810      	ldr	r0, [r2, #0]
 80130e4:	4798      	blx	r3
 80130e6:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
#endif
            }

            uint32_t letter;
            uint32_t letter_next;
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 80130ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80130ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80130f2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80130f6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80130fa:	f013 fc85 	bl	8026a08 <_lv_txt_encoded_letter_next_2>
            /*Handle the re-color command*/
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80130fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	7edb      	ldrb	r3, [r3, #27]
 801310a:	f003 0301 	and.w	r3, r3, #1
 801310e:	2b00      	cmp	r3, #0
 8013110:	f000 8088 	beq.w	8013224 <lv_draw_label+0x7f0>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8013114:	2323      	movs	r3, #35	; 0x23
 8013116:	461a      	mov	r2, r3
 8013118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801311a:	429a      	cmp	r2, r3
 801311c:	d11a      	bne.n	8013154 <lv_draw_label+0x720>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 801311e:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8013122:	2b00      	cmp	r3, #0
 8013124:	d106      	bne.n	8013134 <lv_draw_label+0x700>
                        par_start = i;
 8013126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013128:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                        cmd_state = CMD_STATE_PAR;
 801312c:	2301      	movs	r3, #1
 801312e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                        continue;
 8013132:	e112      	b.n	801335a <lv_draw_label+0x926>
                    }
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 8013134:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8013138:	2b01      	cmp	r3, #1
 801313a:	d103      	bne.n	8013144 <lv_draw_label+0x710>
                        cmd_state = CMD_STATE_WAIT;
 801313c:	2300      	movs	r3, #0
 801313e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
 8013142:	e007      	b.n	8013154 <lv_draw_label+0x720>
                    }
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 8013144:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8013148:	2b02      	cmp	r3, #2
 801314a:	d103      	bne.n	8013154 <lv_draw_label+0x720>
                        cmd_state = CMD_STATE_WAIT;
 801314c:	2300      	movs	r3, #0
 801314e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                        continue;
 8013152:	e102      	b.n	801335a <lv_draw_label+0x926>
                    }
                }

                /*Skip the color parameter and wait the space after it*/
                if(cmd_state == CMD_STATE_PAR) {
 8013154:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8013158:	2b01      	cmp	r3, #1
 801315a:	d163      	bne.n	8013224 <lv_draw_label+0x7f0>
                    if(letter == ' ') {
 801315c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801315e:	2b20      	cmp	r3, #32
 8013160:	f040 80fa 	bne.w	8013358 <lv_draw_label+0x924>
                        /*Get the parameter*/
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 8013164:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013166:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801316a:	1ad3      	subs	r3, r2, r3
 801316c:	2b07      	cmp	r3, #7
 801316e:	d14d      	bne.n	801320c <lv_draw_label+0x7d8>
                            char buf[LABEL_RECOLOR_PAR_LENGTH + 1];
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 8013170:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013174:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8013178:	18d1      	adds	r1, r2, r3
 801317a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801317e:	2206      	movs	r2, #6
 8013180:	4618      	mov	r0, r3
 8013182:	f7ff fbcf 	bl	8012924 <lv_memcpy_small>
                            buf[LABEL_RECOLOR_PAR_LENGTH] = '\0';
 8013186:	2300      	movs	r3, #0
 8013188:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                            int r, g, b;
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 801318c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013190:	4618      	mov	r0, r3
 8013192:	f000 fa7d 	bl	8013690 <hex_char_to_num>
 8013196:	4603      	mov	r3, r0
 8013198:	011c      	lsls	r4, r3, #4
 801319a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801319e:	4618      	mov	r0, r3
 80131a0:	f000 fa76 	bl	8013690 <hex_char_to_num>
 80131a4:	4603      	mov	r3, r0
 80131a6:	4423      	add	r3, r4
 80131a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 80131ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80131b0:	4618      	mov	r0, r3
 80131b2:	f000 fa6d 	bl	8013690 <hex_char_to_num>
 80131b6:	4603      	mov	r3, r0
 80131b8:	011c      	lsls	r4, r3, #4
 80131ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80131be:	4618      	mov	r0, r3
 80131c0:	f000 fa66 	bl	8013690 <hex_char_to_num>
 80131c4:	4603      	mov	r3, r0
 80131c6:	4423      	add	r3, r4
 80131c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 80131cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80131d0:	4618      	mov	r0, r3
 80131d2:	f000 fa5d 	bl	8013690 <hex_char_to_num>
 80131d6:	4603      	mov	r3, r0
 80131d8:	011c      	lsls	r4, r3, #4
 80131da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80131de:	4618      	mov	r0, r3
 80131e0:	f000 fa56 	bl	8013690 <hex_char_to_num>
 80131e4:	4603      	mov	r3, r0
 80131e6:	4423      	add	r3, r4
 80131e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                            recolor = lv_color_make(r, g, b);
 80131ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80131f0:	b2db      	uxtb	r3, r3
 80131f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80131f6:	b2d1      	uxtb	r1, r2
 80131f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80131fc:	b2d2      	uxtb	r2, r2
 80131fe:	4618      	mov	r0, r3
 8013200:	f7ff fbb2 	bl	8012968 <lv_color_make>
 8013204:	4603      	mov	r3, r0
 8013206:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 801320a:	e007      	b.n	801321c <lv_draw_label+0x7e8>
                        }
                        else {
                            recolor.full = dsc->color.full;
 801320c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	7b1b      	ldrb	r3, [r3, #12]
 8013218:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                        }
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 801321c:	2302      	movs	r3, #2
 801321e:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
                    }
                    continue;
 8013222:	e099      	b.n	8013358 <lv_draw_label+0x924>
                }
            }

            color = dsc->color;
 8013224:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	7b1b      	ldrb	r3, [r3, #12]
 8013230:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

            if(cmd_state == CMD_STATE_IN) color = recolor;
 8013234:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8013238:	2b02      	cmp	r3, #2
 801323a:	d103      	bne.n	8013244 <lv_draw_label+0x810>
 801323c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8013240:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8013244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013248:	4619      	mov	r1, r3
 801324a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801324e:	f00e f965 	bl	802151c <lv_font_get_glyph_width>
 8013252:	4603      	mov	r3, r0
 8013254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8013258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801325c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013260:	4293      	cmp	r3, r2
 8013262:	d04c      	beq.n	80132fe <lv_draw_label+0x8ca>
 8013264:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801326c:	4293      	cmp	r3, r2
 801326e:	d046      	beq.n	80132fe <lv_draw_label+0x8ca>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 8013270:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013278:	429a      	cmp	r2, r3
 801327a:	d340      	bcc.n	80132fe <lv_draw_label+0x8ca>
 801327c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8013280:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013284:	429a      	cmp	r2, r3
 8013286:	d23a      	bcs.n	80132fe <lv_draw_label+0x8ca>
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
 8013288:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801328c:	843b      	strh	r3, [r7, #32]
                    sel_coords.y1 = pos.y;
 801328e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8013292:	847b      	strh	r3, [r7, #34]	; 0x22
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 8013294:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8013298:	b29a      	uxth	r2, r3
 801329a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801329e:	b29b      	uxth	r3, r3
 80132a0:	4413      	add	r3, r2
 80132a2:	b29a      	uxth	r2, r3
 80132a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80132a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80132b2:	b29b      	uxth	r3, r3
 80132b4:	4413      	add	r3, r2
 80132b6:	b29b      	uxth	r3, r3
 80132b8:	3b01      	subs	r3, #1
 80132ba:	b29b      	uxth	r3, r3
 80132bc:	b21b      	sxth	r3, r3
 80132be:	84bb      	strh	r3, [r7, #36]	; 0x24
                    sel_coords.y2 = pos.y + line_height - 1;
 80132c0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80132c4:	b29a      	uxth	r2, r3
 80132c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80132ca:	b29b      	uxth	r3, r3
 80132cc:	4413      	add	r3, r2
 80132ce:	b29b      	uxth	r3, r3
 80132d0:	3b01      	subs	r3, #1
 80132d2:	b29b      	uxth	r3, r3
 80132d4:	b21b      	sxth	r3, r3
 80132d6:	84fb      	strh	r3, [r7, #38]	; 0x26
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 80132d8:	f107 0220 	add.w	r2, r7, #32
 80132dc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80132e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80132e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80132e8:	6818      	ldr	r0, [r3, #0]
 80132ea:	f002 ff79 	bl	80161e0 <lv_draw_rect>
                    color = dsc->sel_color;
 80132ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80132f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	7b5b      	ldrb	r3, [r3, #13]
 80132fa:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                }
            }

            dsc_mod.color = color;
 80132fe:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8013302:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 8013306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013308:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801330c:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8013310:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8013314:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013318:	6800      	ldr	r0, [r0, #0]
 801331a:	f000 f9a7 	bl	801366c <lv_draw_letter>

            if(letter_w > 0) {
 801331e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013322:	2b00      	cmp	r3, #0
 8013324:	dd19      	ble.n	801335a <lv_draw_label+0x926>
                pos.x += letter_w + dsc->letter_space;
 8013326:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801332a:	b29a      	uxth	r2, r3
 801332c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801333a:	b299      	uxth	r1, r3
 801333c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013340:	b29b      	uxth	r3, r3
 8013342:	440b      	add	r3, r1
 8013344:	b29b      	uxth	r3, r3
 8013346:	4413      	add	r3, r2
 8013348:	b29b      	uxth	r3, r3
 801334a:	b21b      	sxth	r3, r3
 801334c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8013350:	e003      	b.n	801335a <lv_draw_label+0x926>
 8013352:	bf00      	nop
 8013354:	20000028 	.word	0x20000028
                    continue;
 8013358:	bf00      	nop
        while(i < line_end - line_start) {
 801335a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801335e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8013362:	1ad2      	subs	r2, r2, r3
 8013364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013366:	429a      	cmp	r2, r3
 8013368:	f63f aea2 	bhi.w	80130b0 <lv_draw_label+0x67c>
            }
        }

        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 801336c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	7f1b      	ldrb	r3, [r3, #28]
 8013378:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801337c:	b2db      	uxtb	r3, r3
 801337e:	f003 0302 	and.w	r3, r3, #2
 8013382:	2b00      	cmp	r3, #0
 8013384:	d039      	beq.n	80133fa <lv_draw_label+0x9c6>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 8013386:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801338a:	b21b      	sxth	r3, r3
 801338c:	83bb      	strh	r3, [r7, #28]
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 801338e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8013392:	b29a      	uxth	r2, r3
 8013394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	da00      	bge.n	80133aa <lv_draw_label+0x976>
 80133a8:	3301      	adds	r3, #1
 80133aa:	105b      	asrs	r3, r3, #1
 80133ac:	b21b      	sxth	r3, r3
 80133ae:	b29b      	uxth	r3, r3
 80133b0:	4413      	add	r3, r2
 80133b2:	b29a      	uxth	r2, r3
 80133b4:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	da00      	bge.n	80133be <lv_draw_label+0x98a>
 80133bc:	3301      	adds	r3, #1
 80133be:	105b      	asrs	r3, r3, #1
 80133c0:	b21b      	sxth	r3, r3
 80133c2:	b29b      	uxth	r3, r3
 80133c4:	4413      	add	r3, r2
 80133c6:	b29b      	uxth	r3, r3
 80133c8:	b21b      	sxth	r3, r3
 80133ca:	83fb      	strh	r3, [r7, #30]
            p2.x = pos.x;
 80133cc:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 80133d0:	833b      	strh	r3, [r7, #24]
            p2.y = p1.y;
 80133d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80133d6:	837b      	strh	r3, [r7, #26]
            line_dsc.color = color;
 80133d8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80133dc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 80133e0:	f107 0318 	add.w	r3, r7, #24
 80133e4:	f107 021c 	add.w	r2, r7, #28
 80133e8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80133ec:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80133f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80133f4:	6800      	ldr	r0, [r0, #0]
 80133f6:	f000 fa7c 	bl	80138f2 <lv_draw_line>
        }

        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 80133fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80133fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	7f1b      	ldrb	r3, [r3, #28]
 8013406:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801340a:	b2db      	uxtb	r3, r3
 801340c:	f003 0301 	and.w	r3, r3, #1
 8013410:	2b00      	cmp	r3, #0
 8013412:	d044      	beq.n	801349e <lv_draw_label+0xa6a>
            lv_point_t p1;
            lv_point_t p2;
            p1.x = pos_x_start;
 8013414:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013418:	b21b      	sxth	r3, r3
 801341a:	82bb      	strh	r3, [r7, #20]
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 801341c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8013420:	b29a      	uxth	r2, r3
 8013422:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013432:	b29b      	uxth	r3, r3
 8013434:	4413      	add	r3, r2
 8013436:	b29a      	uxth	r2, r3
 8013438:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801343c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013448:	b29b      	uxth	r3, r3
 801344a:	1ad3      	subs	r3, r2, r3
 801344c:	b29a      	uxth	r2, r3
 801344e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013452:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8013456:	b29b      	uxth	r3, r3
 8013458:	1ad3      	subs	r3, r2, r3
 801345a:	b29b      	uxth	r3, r3
 801345c:	b21b      	sxth	r3, r3
 801345e:	82fb      	strh	r3, [r7, #22]
            p2.x = pos.x;
 8013460:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8013464:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013468:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801346c:	801a      	strh	r2, [r3, #0]
            p2.y = p1.y;
 801346e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013472:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013476:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801347a:	805a      	strh	r2, [r3, #2]
            line_dsc.color = color;
 801347c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8013480:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8013484:	f107 0310 	add.w	r3, r7, #16
 8013488:	f107 0214 	add.w	r2, r7, #20
 801348c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8013490:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8013494:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013498:	6800      	ldr	r0, [r0, #0]
 801349a:	f000 fa2a 	bl	80138f2 <lv_draw_line>
#if LV_USE_BIDI
        lv_mem_buf_release(bidi_txt);
        bidi_txt = NULL;
#endif
        /*Go to next line*/
        line_start = line_end;
 801349e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80134a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 80134a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80134aa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80134ae:	681a      	ldr	r2, [r3, #0]
 80134b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80134b4:	18d0      	adds	r0, r2, r3
 80134b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80134ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80134c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80134c8:	b219      	sxth	r1, r3
 80134ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80134ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	7edb      	ldrb	r3, [r3, #27]
 80134d6:	9301      	str	r3, [sp, #4]
 80134d8:	2300      	movs	r3, #0
 80134da:	9300      	str	r3, [sp, #0]
 80134dc:	460b      	mov	r3, r1
 80134de:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80134e2:	f013 f915 	bl	8026710 <_lv_txt_get_next_line>
 80134e6:	4602      	mov	r2, r0
 80134e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80134ec:	4413      	add	r3, r2
 80134ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

        pos.x = coords->x1;
 80134f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80134f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013500:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        /*Align to middle*/
        if(align == LV_TEXT_ALIGN_CENTER) {
 8013504:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8013508:	2b02      	cmp	r3, #2
 801350a:	d13d      	bne.n	8013588 <lv_draw_label+0xb54>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 801350c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013510:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013514:	681a      	ldr	r2, [r3, #0]
 8013516:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801351a:	18d0      	adds	r0, r2, r3
 801351c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8013520:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8013524:	1ad1      	subs	r1, r2, r3
 8013526:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801352a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8013534:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	7edb      	ldrb	r3, [r3, #27]
 8013540:	9300      	str	r3, [sp, #0]
 8013542:	4613      	mov	r3, r2
 8013544:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8013548:	f013 f9c0 	bl	80268cc <lv_txt_get_width>
 801354c:	4603      	mov	r3, r0
            line_width =
 801354e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8013552:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013556:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801355a:	6818      	ldr	r0, [r3, #0]
 801355c:	f7ff f9be 	bl	80128dc <lv_area_get_width>
 8013560:	4603      	mov	r3, r0
 8013562:	461a      	mov	r2, r3
 8013564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013568:	1ad3      	subs	r3, r2, r3
 801356a:	2b00      	cmp	r3, #0
 801356c:	da00      	bge.n	8013570 <lv_draw_label+0xb3c>
 801356e:	3301      	adds	r3, #1
 8013570:	105b      	asrs	r3, r3, #1
 8013572:	4619      	mov	r1, r3
 8013574:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8013578:	b29a      	uxth	r2, r3
 801357a:	b28b      	uxth	r3, r1
 801357c:	4413      	add	r3, r2
 801357e:	b29b      	uxth	r3, r3
 8013580:	b21b      	sxth	r3, r3
 8013582:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8013586:	e03b      	b.n	8013600 <lv_draw_label+0xbcc>

        }
        /*Align to the right*/
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 8013588:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801358c:	2b03      	cmp	r3, #3
 801358e:	d137      	bne.n	8013600 <lv_draw_label+0xbcc>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8013590:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013594:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013598:	681a      	ldr	r2, [r3, #0]
 801359a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801359e:	18d0      	adds	r0, r2, r3
 80135a0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80135a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80135a8:	1ad1      	subs	r1, r2, r3
 80135aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80135ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80135b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80135bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	7edb      	ldrb	r3, [r3, #27]
 80135c4:	9300      	str	r3, [sp, #0]
 80135c6:	4613      	mov	r3, r2
 80135c8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80135cc:	f013 f97e 	bl	80268cc <lv_txt_get_width>
 80135d0:	4603      	mov	r3, r0
            line_width =
 80135d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            pos.x += lv_area_get_width(coords) - line_width;
 80135d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80135da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80135de:	6818      	ldr	r0, [r3, #0]
 80135e0:	f7ff f97c 	bl	80128dc <lv_area_get_width>
 80135e4:	4603      	mov	r3, r0
 80135e6:	461a      	mov	r2, r3
 80135e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80135ec:	1ad3      	subs	r3, r2, r3
 80135ee:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 80135f2:	b292      	uxth	r2, r2
 80135f4:	b29b      	uxth	r3, r3
 80135f6:	4413      	add	r3, r2
 80135f8:	b29b      	uxth	r3, r3
 80135fa:	b21b      	sxth	r3, r3
 80135fc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        }

        /*Go the next line position*/
        pos.y += line_height;
 8013600:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8013604:	b29a      	uxth	r2, r3
 8013606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801360a:	b29b      	uxth	r3, r3
 801360c:	4413      	add	r3, r2
 801360e:	b29b      	uxth	r3, r3
 8013610:	b21b      	sxth	r3, r3
 8013612:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

        if(pos.y > draw_ctx->clip_area->y2) return;
 8013616:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801361a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801361e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	689b      	ldr	r3, [r3, #8]
 8013626:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801362a:	429a      	cmp	r2, r3
 801362c:	dc18      	bgt.n	8013660 <lv_draw_label+0xc2c>
    while(txt[line_start] != '\0') {
 801362e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013632:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013636:	681a      	ldr	r2, [r3, #0]
 8013638:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801363c:	4413      	add	r3, r2
 801363e:	781b      	ldrb	r3, [r3, #0]
 8013640:	2b00      	cmp	r3, #0
 8013642:	f47f ad1a 	bne.w	801307a <lv_draw_label+0x646>
 8013646:	e00c      	b.n	8013662 <lv_draw_label+0xc2e>
    if(dsc->opa <= LV_OPA_MIN) return;
 8013648:	bf00      	nop
 801364a:	e00a      	b.n	8013662 <lv_draw_label+0xc2e>
        return;
 801364c:	bf00      	nop
 801364e:	e008      	b.n	8013662 <lv_draw_label+0xc2e>
        return;
 8013650:	bf00      	nop
 8013652:	e006      	b.n	8013662 <lv_draw_label+0xc2e>
        return;
 8013654:	bf00      	nop
 8013656:	e004      	b.n	8013662 <lv_draw_label+0xc2e>
    if(!clip_ok) return;
 8013658:	bf00      	nop
 801365a:	e002      	b.n	8013662 <lv_draw_label+0xc2e>
        if(txt[line_start] == '\0') return;
 801365c:	bf00      	nop
 801365e:	e000      	b.n	8013662 <lv_draw_label+0xc2e>
        if(pos.y > draw_ctx->clip_area->y2) return;
 8013660:	bf00      	nop
    }

    LV_ASSERT_MEM_INTEGRITY();
}
 8013662:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8013666:	46bd      	mov	sp, r7
 8013668:	bdb0      	pop	{r4, r5, r7, pc}
 801366a:	bf00      	nop

0801366c <lv_draw_letter>:

void lv_draw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                    uint32_t letter)
{
 801366c:	b590      	push	{r4, r7, lr}
 801366e:	b085      	sub	sp, #20
 8013670:	af00      	add	r7, sp, #0
 8013672:	60f8      	str	r0, [r7, #12]
 8013674:	60b9      	str	r1, [r7, #8]
 8013676:	607a      	str	r2, [r7, #4]
 8013678:	603b      	str	r3, [r7, #0]
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	69dc      	ldr	r4, [r3, #28]
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	687a      	ldr	r2, [r7, #4]
 8013682:	68b9      	ldr	r1, [r7, #8]
 8013684:	68f8      	ldr	r0, [r7, #12]
 8013686:	47a0      	blx	r4
}
 8013688:	bf00      	nop
 801368a:	3714      	adds	r7, #20
 801368c:	46bd      	mov	sp, r7
 801368e:	bd90      	pop	{r4, r7, pc}

08013690 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 8013690:	b480      	push	{r7}
 8013692:	b085      	sub	sp, #20
 8013694:	af00      	add	r7, sp, #0
 8013696:	4603      	mov	r3, r0
 8013698:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 801369a:	2300      	movs	r3, #0
 801369c:	73fb      	strb	r3, [r7, #15]

    if(hex >= '0' && hex <= '9') {
 801369e:	79fb      	ldrb	r3, [r7, #7]
 80136a0:	2b2f      	cmp	r3, #47	; 0x2f
 80136a2:	d906      	bls.n	80136b2 <hex_char_to_num+0x22>
 80136a4:	79fb      	ldrb	r3, [r7, #7]
 80136a6:	2b39      	cmp	r3, #57	; 0x39
 80136a8:	d803      	bhi.n	80136b2 <hex_char_to_num+0x22>
        result = hex - '0';
 80136aa:	79fb      	ldrb	r3, [r7, #7]
 80136ac:	3b30      	subs	r3, #48	; 0x30
 80136ae:	73fb      	strb	r3, [r7, #15]
 80136b0:	e02d      	b.n	801370e <hex_char_to_num+0x7e>
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 80136b2:	79fb      	ldrb	r3, [r7, #7]
 80136b4:	2b60      	cmp	r3, #96	; 0x60
 80136b6:	d902      	bls.n	80136be <hex_char_to_num+0x2e>
 80136b8:	79fb      	ldrb	r3, [r7, #7]
 80136ba:	3b20      	subs	r3, #32
 80136bc:	71fb      	strb	r3, [r7, #7]

        switch(hex) {
 80136be:	79fb      	ldrb	r3, [r7, #7]
 80136c0:	3b41      	subs	r3, #65	; 0x41
 80136c2:	2b05      	cmp	r3, #5
 80136c4:	d820      	bhi.n	8013708 <hex_char_to_num+0x78>
 80136c6:	a201      	add	r2, pc, #4	; (adr r2, 80136cc <hex_char_to_num+0x3c>)
 80136c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136cc:	080136e5 	.word	0x080136e5
 80136d0:	080136eb 	.word	0x080136eb
 80136d4:	080136f1 	.word	0x080136f1
 80136d8:	080136f7 	.word	0x080136f7
 80136dc:	080136fd 	.word	0x080136fd
 80136e0:	08013703 	.word	0x08013703
            case 'A':
                result = 10;
 80136e4:	230a      	movs	r3, #10
 80136e6:	73fb      	strb	r3, [r7, #15]
                break;
 80136e8:	e011      	b.n	801370e <hex_char_to_num+0x7e>
            case 'B':
                result = 11;
 80136ea:	230b      	movs	r3, #11
 80136ec:	73fb      	strb	r3, [r7, #15]
                break;
 80136ee:	e00e      	b.n	801370e <hex_char_to_num+0x7e>
            case 'C':
                result = 12;
 80136f0:	230c      	movs	r3, #12
 80136f2:	73fb      	strb	r3, [r7, #15]
                break;
 80136f4:	e00b      	b.n	801370e <hex_char_to_num+0x7e>
            case 'D':
                result = 13;
 80136f6:	230d      	movs	r3, #13
 80136f8:	73fb      	strb	r3, [r7, #15]
                break;
 80136fa:	e008      	b.n	801370e <hex_char_to_num+0x7e>
            case 'E':
                result = 14;
 80136fc:	230e      	movs	r3, #14
 80136fe:	73fb      	strb	r3, [r7, #15]
                break;
 8013700:	e005      	b.n	801370e <hex_char_to_num+0x7e>
            case 'F':
                result = 15;
 8013702:	230f      	movs	r3, #15
 8013704:	73fb      	strb	r3, [r7, #15]
                break;
 8013706:	e002      	b.n	801370e <hex_char_to_num+0x7e>
            default:
                result = 0;
 8013708:	2300      	movs	r3, #0
 801370a:	73fb      	strb	r3, [r7, #15]
                break;
 801370c:	bf00      	nop
        }
    }

    return result;
 801370e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013710:	4618      	mov	r0, r3
 8013712:	3714      	adds	r7, #20
 8013714:	46bd      	mov	sp, r7
 8013716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371a:	4770      	bx	lr

0801371c <lv_draw_layer_create>:
 *   GLOBAL FUNCTIONS
 **********************/

lv_draw_layer_ctx_t * lv_draw_layer_create(lv_draw_ctx_t * draw_ctx, const lv_area_t * layer_area,
                                           lv_draw_layer_flags_t flags)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b088      	sub	sp, #32
 8013720:	af00      	add	r7, sp, #0
 8013722:	60f8      	str	r0, [r7, #12]
 8013724:	60b9      	str	r1, [r7, #8]
 8013726:	4613      	mov	r3, r2
 8013728:	71fb      	strb	r3, [r7, #7]
    if(draw_ctx->layer_init == NULL) return NULL;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801372e:	2b00      	cmp	r3, #0
 8013730:	d101      	bne.n	8013736 <lv_draw_layer_create+0x1a>
 8013732:	2300      	movs	r3, #0
 8013734:	e044      	b.n	80137c0 <lv_draw_layer_create+0xa4>

    lv_draw_layer_ctx_t * layer_ctx = lv_mem_alloc(draw_ctx->layer_instance_size);
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801373a:	4618      	mov	r0, r3
 801373c:	f010 fbda 	bl	8023ef4 <lv_mem_alloc>
 8013740:	61f8      	str	r0, [r7, #28]
    LV_ASSERT_MALLOC(layer_ctx);
 8013742:	69fb      	ldr	r3, [r7, #28]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d100      	bne.n	801374a <lv_draw_layer_create+0x2e>
 8013748:	e7fe      	b.n	8013748 <lv_draw_layer_create+0x2c>
    if(layer_ctx == NULL) {
 801374a:	69fb      	ldr	r3, [r7, #28]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d101      	bne.n	8013754 <lv_draw_layer_create+0x38>
        LV_LOG_WARN("Couldn't allocate a new layer context");
        return NULL;
 8013750:	2300      	movs	r3, #0
 8013752:	e035      	b.n	80137c0 <lv_draw_layer_create+0xa4>
    }

    lv_memset_00(layer_ctx, draw_ctx->layer_instance_size);
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013758:	4619      	mov	r1, r3
 801375a:	69f8      	ldr	r0, [r7, #28]
 801375c:	f010 fffe 	bl	802475c <lv_memset_00>

    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8013760:	f7fd f858 	bl	8010814 <_lv_refr_get_disp_refreshing>
 8013764:	61b8      	str	r0, [r7, #24]
    layer_ctx->original.buf = draw_ctx->buf;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	681a      	ldr	r2, [r3, #0]
 801376a:	69fb      	ldr	r3, [r7, #28]
 801376c:	621a      	str	r2, [r3, #32]
    layer_ctx->original.buf_area = draw_ctx->buf_area;
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	685a      	ldr	r2, [r3, #4]
 8013772:	69fb      	ldr	r3, [r7, #28]
 8013774:	61da      	str	r2, [r3, #28]
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	689a      	ldr	r2, [r3, #8]
 801377a:	69fb      	ldr	r3, [r7, #28]
 801377c:	619a      	str	r2, [r3, #24]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 801377e:	69bb      	ldr	r3, [r7, #24]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	7c1b      	ldrb	r3, [r3, #16]
 8013784:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8013788:	b2db      	uxtb	r3, r3
 801378a:	2b00      	cmp	r3, #0
 801378c:	bf14      	ite	ne
 801378e:	2301      	movne	r3, #1
 8013790:	2300      	moveq	r3, #0
 8013792:	b2da      	uxtb	r2, r3
 8013794:	69fb      	ldr	r3, [r7, #28]
 8013796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    layer_ctx->area_full = *layer_area;
 801379a:	69fb      	ldr	r3, [r7, #28]
 801379c:	68ba      	ldr	r2, [r7, #8]
 801379e:	6810      	ldr	r0, [r2, #0]
 80137a0:	6851      	ldr	r1, [r2, #4]
 80137a2:	c303      	stmia	r3!, {r0, r1}

    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137a8:	79fa      	ldrb	r2, [r7, #7]
 80137aa:	69f9      	ldr	r1, [r7, #28]
 80137ac:	68f8      	ldr	r0, [r7, #12]
 80137ae:	4798      	blx	r3
 80137b0:	6178      	str	r0, [r7, #20]
    if(NULL == init_layer_ctx) {
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d102      	bne.n	80137be <lv_draw_layer_create+0xa2>
        lv_mem_free(layer_ctx);
 80137b8:	69f8      	ldr	r0, [r7, #28]
 80137ba:	f010 fbcb 	bl	8023f54 <lv_mem_free>
    }
    return init_layer_ctx;
 80137be:	697b      	ldr	r3, [r7, #20]
}
 80137c0:	4618      	mov	r0, r3
 80137c2:	3720      	adds	r7, #32
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}

080137c8 <lv_draw_layer_adjust>:

void lv_draw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                          lv_draw_layer_flags_t flags)
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b084      	sub	sp, #16
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	60f8      	str	r0, [r7, #12]
 80137d0:	60b9      	str	r1, [r7, #8]
 80137d2:	4613      	mov	r3, r2
 80137d4:	71fb      	strb	r3, [r7, #7]
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d005      	beq.n	80137ea <lv_draw_layer_adjust+0x22>
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137e2:	79fa      	ldrb	r2, [r7, #7]
 80137e4:	68b9      	ldr	r1, [r7, #8]
 80137e6:	68f8      	ldr	r0, [r7, #12]
 80137e8:	4798      	blx	r3
}
 80137ea:	bf00      	nop
 80137ec:	3710      	adds	r7, #16
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}

080137f2 <lv_draw_layer_blend>:

void lv_draw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                         lv_draw_img_dsc_t * draw_dsc)
{
 80137f2:	b580      	push	{r7, lr}
 80137f4:	b084      	sub	sp, #16
 80137f6:	af00      	add	r7, sp, #0
 80137f8:	60f8      	str	r0, [r7, #12]
 80137fa:	60b9      	str	r1, [r7, #8]
 80137fc:	607a      	str	r2, [r7, #4]
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013802:	2b00      	cmp	r3, #0
 8013804:	d005      	beq.n	8013812 <lv_draw_layer_blend+0x20>
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801380a:	687a      	ldr	r2, [r7, #4]
 801380c:	68b9      	ldr	r1, [r7, #8]
 801380e:	68f8      	ldr	r0, [r7, #12]
 8013810:	4798      	blx	r3
}
 8013812:	bf00      	nop
 8013814:	3710      	adds	r7, #16
 8013816:	46bd      	mov	sp, r7
 8013818:	bd80      	pop	{r7, pc}

0801381a <lv_draw_layer_destroy>:

void lv_draw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 801381a:	b580      	push	{r7, lr}
 801381c:	b084      	sub	sp, #16
 801381e:	af00      	add	r7, sp, #0
 8013820:	6078      	str	r0, [r7, #4]
 8013822:	6039      	str	r1, [r7, #0]

    lv_draw_wait_for_finish(draw_ctx);
 8013824:	6878      	ldr	r0, [r7, #4]
 8013826:	f7fe fcb9 	bl	801219c <lv_draw_wait_for_finish>
    draw_ctx->buf = layer_ctx->original.buf;
 801382a:	683b      	ldr	r3, [r7, #0]
 801382c:	6a1a      	ldr	r2, [r3, #32]
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	69da      	ldr	r2, [r3, #28]
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	699a      	ldr	r2, [r3, #24]
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	609a      	str	r2, [r3, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8013842:	f7fc ffe7 	bl	8010814 <_lv_refr_get_disp_refreshing>
 8013846:	60f8      	str	r0, [r7, #12]
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	681a      	ldr	r2, [r3, #0]
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8013852:	7c13      	ldrb	r3, [r2, #16]
 8013854:	f361 1386 	bfi	r3, r1, #6, #1
 8013858:	7413      	strb	r3, [r2, #16]

    if(draw_ctx->layer_destroy) draw_ctx->layer_destroy(draw_ctx, layer_ctx);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801385e:	2b00      	cmp	r3, #0
 8013860:	d004      	beq.n	801386c <lv_draw_layer_destroy+0x52>
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013866:	6839      	ldr	r1, [r7, #0]
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	4798      	blx	r3
    lv_mem_free(layer_ctx);
 801386c:	6838      	ldr	r0, [r7, #0]
 801386e:	f010 fb71 	bl	8023f54 <lv_mem_free>
}
 8013872:	bf00      	nop
 8013874:	3710      	adds	r7, #16
 8013876:	46bd      	mov	sp, r7
 8013878:	bd80      	pop	{r7, pc}

0801387a <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 801387a:	b480      	push	{r7}
 801387c:	b083      	sub	sp, #12
 801387e:	af00      	add	r7, sp, #0
 8013880:	4603      	mov	r3, r0
 8013882:	71fb      	strb	r3, [r7, #7]
 8013884:	460b      	mov	r3, r1
 8013886:	71bb      	strb	r3, [r7, #6]
 8013888:	4613      	mov	r3, r2
 801388a:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801388c:	797b      	ldrb	r3, [r7, #5]
 801388e:	09db      	lsrs	r3, r3, #7
 8013890:	b2da      	uxtb	r2, r3
 8013892:	79bb      	ldrb	r3, [r7, #6]
 8013894:	09db      	lsrs	r3, r3, #7
 8013896:	b2db      	uxtb	r3, r3
 8013898:	4313      	orrs	r3, r2
 801389a:	b2da      	uxtb	r2, r3
 801389c:	79fb      	ldrb	r3, [r7, #7]
 801389e:	09db      	lsrs	r3, r3, #7
 80138a0:	b2db      	uxtb	r3, r3
 80138a2:	4313      	orrs	r3, r2
 80138a4:	b2db      	uxtb	r3, r3
}
 80138a6:	4618      	mov	r0, r3
 80138a8:	370c      	adds	r7, #12
 80138aa:	46bd      	mov	sp, r7
 80138ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b0:	4770      	bx	lr

080138b2 <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 80138b2:	b580      	push	{r7, lr}
 80138b4:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 80138b6:	2200      	movs	r2, #0
 80138b8:	2100      	movs	r1, #0
 80138ba:	2000      	movs	r0, #0
 80138bc:	f7ff ffdd 	bl	801387a <lv_color_make>
 80138c0:	4603      	mov	r3, r0
}
 80138c2:	4618      	mov	r0, r3
 80138c4:	bd80      	pop	{r7, pc}

080138c6 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 80138c6:	b590      	push	{r4, r7, lr}
 80138c8:	b083      	sub	sp, #12
 80138ca:	af00      	add	r7, sp, #0
 80138cc:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 80138ce:	210a      	movs	r1, #10
 80138d0:	6878      	ldr	r0, [r7, #4]
 80138d2:	f010 ff43 	bl	802475c <lv_memset_00>
    dsc->width = 1;
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	2201      	movs	r2, #1
 80138da:	805a      	strh	r2, [r3, #2]
    dsc->opa = LV_OPA_COVER;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	22ff      	movs	r2, #255	; 0xff
 80138e0:	721a      	strb	r2, [r3, #8]
    dsc->color = lv_color_black();
 80138e2:	687c      	ldr	r4, [r7, #4]
 80138e4:	f7ff ffe5 	bl	80138b2 <lv_color_black>
 80138e8:	7020      	strb	r0, [r4, #0]
}
 80138ea:	bf00      	nop
 80138ec:	370c      	adds	r7, #12
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd90      	pop	{r4, r7, pc}

080138f2 <lv_draw_line>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                        const lv_point_t * point1, const lv_point_t * point2)
{
 80138f2:	b590      	push	{r4, r7, lr}
 80138f4:	b085      	sub	sp, #20
 80138f6:	af00      	add	r7, sp, #0
 80138f8:	60f8      	str	r0, [r7, #12]
 80138fa:	60b9      	str	r1, [r7, #8]
 80138fc:	607a      	str	r2, [r7, #4]
 80138fe:	603b      	str	r3, [r7, #0]
    if(dsc->width == 0) return;
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d00b      	beq.n	8013922 <lv_draw_line+0x30>
    if(dsc->opa <= LV_OPA_MIN) return;
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	7a1b      	ldrb	r3, [r3, #8]
 801390e:	2b02      	cmp	r3, #2
 8013910:	d909      	bls.n	8013926 <lv_draw_line+0x34>

    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	6a1c      	ldr	r4, [r3, #32]
 8013916:	683b      	ldr	r3, [r7, #0]
 8013918:	687a      	ldr	r2, [r7, #4]
 801391a:	68b9      	ldr	r1, [r7, #8]
 801391c:	68f8      	ldr	r0, [r7, #12]
 801391e:	47a0      	blx	r4
 8013920:	e002      	b.n	8013928 <lv_draw_line+0x36>
    if(dsc->width == 0) return;
 8013922:	bf00      	nop
 8013924:	e000      	b.n	8013928 <lv_draw_line+0x36>
    if(dsc->opa <= LV_OPA_MIN) return;
 8013926:	bf00      	nop
}
 8013928:	3714      	adds	r7, #20
 801392a:	46bd      	mov	sp, r7
 801392c:	bd90      	pop	{r4, r7, pc}

0801392e <lv_area_copy>:
{
 801392e:	b480      	push	{r7}
 8013930:	b083      	sub	sp, #12
 8013932:	af00      	add	r7, sp, #0
 8013934:	6078      	str	r0, [r7, #4]
 8013936:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8013956:	683b      	ldr	r3, [r7, #0]
 8013958:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	80da      	strh	r2, [r3, #6]
}
 8013960:	bf00      	nop
 8013962:	370c      	adds	r7, #12
 8013964:	46bd      	mov	sp, r7
 8013966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396a:	4770      	bx	lr

0801396c <lv_area_get_width>:
{
 801396c:	b480      	push	{r7}
 801396e:	b083      	sub	sp, #12
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801397a:	b29a      	uxth	r2, r3
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013982:	b29b      	uxth	r3, r3
 8013984:	1ad3      	subs	r3, r2, r3
 8013986:	b29b      	uxth	r3, r3
 8013988:	3301      	adds	r3, #1
 801398a:	b29b      	uxth	r3, r3
 801398c:	b21b      	sxth	r3, r3
}
 801398e:	4618      	mov	r0, r3
 8013990:	370c      	adds	r7, #12
 8013992:	46bd      	mov	sp, r7
 8013994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013998:	4770      	bx	lr

0801399a <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 801399a:	b480      	push	{r7}
 801399c:	b083      	sub	sp, #12
 801399e:	af00      	add	r7, sp, #0
 80139a0:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80139a8:	b29a      	uxth	r2, r3
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80139b0:	b29b      	uxth	r3, r3
 80139b2:	1ad3      	subs	r3, r2, r3
 80139b4:	b29b      	uxth	r3, r3
 80139b6:	3301      	adds	r3, #1
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	b21b      	sxth	r3, r3
}
 80139bc:	4618      	mov	r0, r3
 80139be:	370c      	adds	r7, #12
 80139c0:	46bd      	mov	sp, r7
 80139c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c6:	4770      	bx	lr

080139c8 <lv_draw_mask_add>:
 * @param param an initialized mask parameter. Only the pointer is saved.
 * @param custom_id a custom pointer to identify the mask. Used in `lv_draw_mask_remove_custom`.
 * @return the an integer, the ID of the mask. Can be used in `lv_draw_mask_remove_id`.
 */
int16_t lv_draw_mask_add(void * param, void * custom_id)
{
 80139c8:	b480      	push	{r7}
 80139ca:	b085      	sub	sp, #20
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
 80139d0:	6039      	str	r1, [r7, #0]
    /*Look for a free entry*/
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80139d2:	2300      	movs	r3, #0
 80139d4:	73fb      	strb	r3, [r7, #15]
 80139d6:	e008      	b.n	80139ea <lv_draw_mask_add+0x22>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 80139d8:	7bfb      	ldrb	r3, [r7, #15]
 80139da:	4a13      	ldr	r2, [pc, #76]	; (8013a28 <lv_draw_mask_add+0x60>)
 80139dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d006      	beq.n	80139f2 <lv_draw_mask_add+0x2a>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80139e4:	7bfb      	ldrb	r3, [r7, #15]
 80139e6:	3301      	adds	r3, #1
 80139e8:	73fb      	strb	r3, [r7, #15]
 80139ea:	7bfb      	ldrb	r3, [r7, #15]
 80139ec:	2b0f      	cmp	r3, #15
 80139ee:	d9f3      	bls.n	80139d8 <lv_draw_mask_add+0x10>
 80139f0:	e000      	b.n	80139f4 <lv_draw_mask_add+0x2c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 80139f2:	bf00      	nop
    }

    if(i >= _LV_MASK_MAX_NUM) {
 80139f4:	7bfb      	ldrb	r3, [r7, #15]
 80139f6:	2b0f      	cmp	r3, #15
 80139f8:	d902      	bls.n	8013a00 <lv_draw_mask_add+0x38>
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
        return LV_MASK_ID_INV;
 80139fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80139fe:	e00c      	b.n	8013a1a <lv_draw_mask_add+0x52>
    }

    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 8013a00:	7bfb      	ldrb	r3, [r7, #15]
 8013a02:	4909      	ldr	r1, [pc, #36]	; (8013a28 <lv_draw_mask_add+0x60>)
 8013a04:	687a      	ldr	r2, [r7, #4]
 8013a06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 8013a0a:	7bfb      	ldrb	r3, [r7, #15]
 8013a0c:	4a06      	ldr	r2, [pc, #24]	; (8013a28 <lv_draw_mask_add+0x60>)
 8013a0e:	00db      	lsls	r3, r3, #3
 8013a10:	4413      	add	r3, r2
 8013a12:	683a      	ldr	r2, [r7, #0]
 8013a14:	605a      	str	r2, [r3, #4]

    return i;
 8013a16:	7bfb      	ldrb	r3, [r7, #15]
 8013a18:	b21b      	sxth	r3, r3
}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3714      	adds	r7, #20
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a24:	4770      	bx	lr
 8013a26:	bf00      	nop
 8013a28:	20000a40 	.word	0x20000a40

08013a2c <lv_draw_mask_apply>:
 * - `LV_DRAW_MASK_RES_FULL_COVER`: the whole line is fully visible. `mask_buf` is unchanged
 * - `LV_DRAW_MASK_RES_CHANGED`: `mask_buf` has changed, it shows the desired opacity of each pixel in the given line
 */
LV_ATTRIBUTE_FAST_MEM lv_draw_mask_res_t lv_draw_mask_apply(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                            lv_coord_t len)
{
 8013a2c:	b590      	push	{r4, r7, lr}
 8013a2e:	b08b      	sub	sp, #44	; 0x2c
 8013a30:	af02      	add	r7, sp, #8
 8013a32:	60f8      	str	r0, [r7, #12]
 8013a34:	4608      	mov	r0, r1
 8013a36:	4611      	mov	r1, r2
 8013a38:	461a      	mov	r2, r3
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	817b      	strh	r3, [r7, #10]
 8013a3e:	460b      	mov	r3, r1
 8013a40:	813b      	strh	r3, [r7, #8]
 8013a42:	4613      	mov	r3, r2
 8013a44:	80fb      	strh	r3, [r7, #6]
    bool changed = false;
 8013a46:	2300      	movs	r3, #0
 8013a48:	77fb      	strb	r3, [r7, #31]
    _lv_draw_mask_common_dsc_t * dsc;

    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 8013a4a:	4b19      	ldr	r3, [pc, #100]	; (8013ab0 <lv_draw_mask_apply+0x84>)
 8013a4c:	61bb      	str	r3, [r7, #24]

    while(m->param) {
 8013a4e:	e021      	b.n	8013a94 <lv_draw_mask_apply+0x68>
        dsc = m->param;
 8013a50:	69bb      	ldr	r3, [r7, #24]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	617b      	str	r3, [r7, #20]
        lv_draw_mask_res_t res = LV_DRAW_MASK_RES_FULL_COVER;
 8013a56:	2301      	movs	r3, #1
 8013a58:	74fb      	strb	r3, [r7, #19]
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 8013a5a:	697b      	ldr	r3, [r7, #20]
 8013a5c:	681c      	ldr	r4, [r3, #0]
 8013a5e:	69bb      	ldr	r3, [r7, #24]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8013a66:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013a6a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8013a6e:	9300      	str	r3, [sp, #0]
 8013a70:	4603      	mov	r3, r0
 8013a72:	68f8      	ldr	r0, [r7, #12]
 8013a74:	47a0      	blx	r4
 8013a76:	4603      	mov	r3, r0
 8013a78:	74fb      	strb	r3, [r7, #19]
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 8013a7a:	7cfb      	ldrb	r3, [r7, #19]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d101      	bne.n	8013a84 <lv_draw_mask_apply+0x58>
 8013a80:	2300      	movs	r3, #0
 8013a82:	e011      	b.n	8013aa8 <lv_draw_mask_apply+0x7c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 8013a84:	7cfb      	ldrb	r3, [r7, #19]
 8013a86:	2b02      	cmp	r3, #2
 8013a88:	d101      	bne.n	8013a8e <lv_draw_mask_apply+0x62>
 8013a8a:	2301      	movs	r3, #1
 8013a8c:	77fb      	strb	r3, [r7, #31]

        m++;
 8013a8e:	69bb      	ldr	r3, [r7, #24]
 8013a90:	3308      	adds	r3, #8
 8013a92:	61bb      	str	r3, [r7, #24]
    while(m->param) {
 8013a94:	69bb      	ldr	r3, [r7, #24]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d1d9      	bne.n	8013a50 <lv_draw_mask_apply+0x24>
    }

    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 8013a9c:	7ffb      	ldrb	r3, [r7, #31]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d001      	beq.n	8013aa6 <lv_draw_mask_apply+0x7a>
 8013aa2:	2302      	movs	r3, #2
 8013aa4:	e000      	b.n	8013aa8 <lv_draw_mask_apply+0x7c>
 8013aa6:	2301      	movs	r3, #1
}
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	3724      	adds	r7, #36	; 0x24
 8013aac:	46bd      	mov	sp, r7
 8013aae:	bd90      	pop	{r4, r7, pc}
 8013ab0:	20000a40 	.word	0x20000a40

08013ab4 <lv_draw_mask_remove_id>:
 * @param id the ID of the mask.  Returned by `lv_draw_mask_add`
 * @return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_id(int16_t id)
{
 8013ab4:	b480      	push	{r7}
 8013ab6:	b085      	sub	sp, #20
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	4603      	mov	r3, r0
 8013abc:	80fb      	strh	r3, [r7, #6]
    _lv_draw_mask_common_dsc_t * p = NULL;
 8013abe:	2300      	movs	r3, #0
 8013ac0:	60fb      	str	r3, [r7, #12]

    if(id != LV_MASK_ID_INV) {
 8013ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013aca:	d012      	beq.n	8013af2 <lv_draw_mask_remove_id+0x3e>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 8013acc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013ad0:	4a0b      	ldr	r2, [pc, #44]	; (8013b00 <lv_draw_mask_remove_id+0x4c>)
 8013ad2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013ad6:	60fb      	str	r3, [r7, #12]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 8013ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013adc:	4a08      	ldr	r2, [pc, #32]	; (8013b00 <lv_draw_mask_remove_id+0x4c>)
 8013ade:	2100      	movs	r1, #0
 8013ae0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 8013ae4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013ae8:	4a05      	ldr	r2, [pc, #20]	; (8013b00 <lv_draw_mask_remove_id+0x4c>)
 8013aea:	00db      	lsls	r3, r3, #3
 8013aec:	4413      	add	r3, r2
 8013aee:	2200      	movs	r2, #0
 8013af0:	605a      	str	r2, [r3, #4]
    }

    return p;
 8013af2:	68fb      	ldr	r3, [r7, #12]
}
 8013af4:	4618      	mov	r0, r3
 8013af6:	3714      	adds	r7, #20
 8013af8:	46bd      	mov	sp, r7
 8013afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afe:	4770      	bx	lr
 8013b00:	20000a40 	.word	0x20000a40

08013b04 <lv_draw_mask_remove_custom>:
 * @param custom_id a pointer used in `lv_draw_mask_add`
 * @return return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_custom(void * custom_id)
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b084      	sub	sp, #16
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
    _lv_draw_mask_common_dsc_t * p = NULL;
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	60fb      	str	r3, [r7, #12]
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8013b10:	2300      	movs	r3, #0
 8013b12:	72fb      	strb	r3, [r7, #11]
 8013b14:	e014      	b.n	8013b40 <lv_draw_mask_remove_custom+0x3c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 8013b16:	7afb      	ldrb	r3, [r7, #11]
 8013b18:	4a0d      	ldr	r2, [pc, #52]	; (8013b50 <lv_draw_mask_remove_custom+0x4c>)
 8013b1a:	00db      	lsls	r3, r3, #3
 8013b1c:	4413      	add	r3, r2
 8013b1e:	685b      	ldr	r3, [r3, #4]
 8013b20:	687a      	ldr	r2, [r7, #4]
 8013b22:	429a      	cmp	r2, r3
 8013b24:	d109      	bne.n	8013b3a <lv_draw_mask_remove_custom+0x36>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8013b26:	7afb      	ldrb	r3, [r7, #11]
 8013b28:	4a09      	ldr	r2, [pc, #36]	; (8013b50 <lv_draw_mask_remove_custom+0x4c>)
 8013b2a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013b2e:	60fb      	str	r3, [r7, #12]
            lv_draw_mask_remove_id(i);
 8013b30:	7afb      	ldrb	r3, [r7, #11]
 8013b32:	b21b      	sxth	r3, r3
 8013b34:	4618      	mov	r0, r3
 8013b36:	f7ff ffbd 	bl	8013ab4 <lv_draw_mask_remove_id>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8013b3a:	7afb      	ldrb	r3, [r7, #11]
 8013b3c:	3301      	adds	r3, #1
 8013b3e:	72fb      	strb	r3, [r7, #11]
 8013b40:	7afb      	ldrb	r3, [r7, #11]
 8013b42:	2b0f      	cmp	r3, #15
 8013b44:	d9e7      	bls.n	8013b16 <lv_draw_mask_remove_custom+0x12>
        }
    }
    return p;
 8013b46:	68fb      	ldr	r3, [r7, #12]
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3710      	adds	r7, #16
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	20000a40 	.word	0x20000a40

08013b54 <lv_draw_mask_free_param>:
 * Needs to be called only in special cases when the mask is not added by `lv_draw_mask_add`
 * and not removed by `lv_draw_mask_remove_id` or `lv_draw_mask_remove_custom`
 * @param p pointer to a mask parameter
 */
void lv_draw_mask_free_param(void * p)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b086      	sub	sp, #24
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
    _lv_draw_mask_common_dsc_t * pdsc = p;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	617b      	str	r3, [r7, #20]
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 8013b60:	697b      	ldr	r3, [r7, #20]
 8013b62:	791b      	ldrb	r3, [r3, #4]
 8013b64:	2b02      	cmp	r3, #2
 8013b66:	d11c      	bne.n	8013ba2 <lv_draw_mask_free_param+0x4e>
        lv_draw_mask_radius_param_t * radius_p = (lv_draw_mask_radius_param_t *) p;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	60fb      	str	r3, [r7, #12]
        if(radius_p->circle) {
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	695b      	ldr	r3, [r3, #20]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d021      	beq.n	8013bb8 <lv_draw_mask_free_param+0x64>
            if(radius_p->circle->life < 0) {
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	695b      	ldr	r3, [r3, #20]
 8013b78:	691b      	ldr	r3, [r3, #16]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	da0b      	bge.n	8013b96 <lv_draw_mask_free_param+0x42>
                lv_mem_free(radius_p->circle->cir_opa);
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	695b      	ldr	r3, [r3, #20]
 8013b82:	685b      	ldr	r3, [r3, #4]
 8013b84:	4618      	mov	r0, r3
 8013b86:	f010 f9e5 	bl	8023f54 <lv_mem_free>
                lv_mem_free(radius_p->circle);
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	695b      	ldr	r3, [r3, #20]
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f010 f9e0 	bl	8023f54 <lv_mem_free>
    }
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
        lv_draw_mask_polygon_param_t * poly_p = (lv_draw_mask_polygon_param_t *) p;
        lv_mem_free(poly_p->cfg.points);
    }
}
 8013b94:	e010      	b.n	8013bb8 <lv_draw_mask_free_param+0x64>
                radius_p->circle->used_cnt--;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	695b      	ldr	r3, [r3, #20]
 8013b9a:	695a      	ldr	r2, [r3, #20]
 8013b9c:	3a01      	subs	r2, #1
 8013b9e:	615a      	str	r2, [r3, #20]
}
 8013ba0:	e00a      	b.n	8013bb8 <lv_draw_mask_free_param+0x64>
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	791b      	ldrb	r3, [r3, #4]
 8013ba6:	2b05      	cmp	r3, #5
 8013ba8:	d106      	bne.n	8013bb8 <lv_draw_mask_free_param+0x64>
        lv_draw_mask_polygon_param_t * poly_p = (lv_draw_mask_polygon_param_t *) p;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	613b      	str	r3, [r7, #16]
        lv_mem_free(poly_p->cfg.points);
 8013bae:	693b      	ldr	r3, [r7, #16]
 8013bb0:	689b      	ldr	r3, [r3, #8]
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f010 f9ce 	bl	8023f54 <lv_mem_free>
}
 8013bb8:	bf00      	nop
 8013bba:	3718      	adds	r7, #24
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd80      	pop	{r7, pc}

08013bc0 <_lv_draw_mask_cleanup>:

void _lv_draw_mask_cleanup(void)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b082      	sub	sp, #8
 8013bc4:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	71fb      	strb	r3, [r7, #7]
 8013bca:	e022      	b.n	8013c12 <_lv_draw_mask_cleanup+0x52>
        if(LV_GC_ROOT(_lv_circle_cache[i]).buf) {
 8013bcc:	79fa      	ldrb	r2, [r7, #7]
 8013bce:	4915      	ldr	r1, [pc, #84]	; (8013c24 <_lv_draw_mask_cleanup+0x64>)
 8013bd0:	4613      	mov	r3, r2
 8013bd2:	00db      	lsls	r3, r3, #3
 8013bd4:	1a9b      	subs	r3, r3, r2
 8013bd6:	009b      	lsls	r3, r3, #2
 8013bd8:	440b      	add	r3, r1
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d00a      	beq.n	8013bf6 <_lv_draw_mask_cleanup+0x36>
            lv_mem_free(LV_GC_ROOT(_lv_circle_cache[i]).buf);
 8013be0:	79fa      	ldrb	r2, [r7, #7]
 8013be2:	4910      	ldr	r1, [pc, #64]	; (8013c24 <_lv_draw_mask_cleanup+0x64>)
 8013be4:	4613      	mov	r3, r2
 8013be6:	00db      	lsls	r3, r3, #3
 8013be8:	1a9b      	subs	r3, r3, r2
 8013bea:	009b      	lsls	r3, r3, #2
 8013bec:	440b      	add	r3, r1
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f010 f9af 	bl	8023f54 <lv_mem_free>
        }
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 8013bf6:	79fa      	ldrb	r2, [r7, #7]
 8013bf8:	4613      	mov	r3, r2
 8013bfa:	00db      	lsls	r3, r3, #3
 8013bfc:	1a9b      	subs	r3, r3, r2
 8013bfe:	009b      	lsls	r3, r3, #2
 8013c00:	4a08      	ldr	r2, [pc, #32]	; (8013c24 <_lv_draw_mask_cleanup+0x64>)
 8013c02:	4413      	add	r3, r2
 8013c04:	211c      	movs	r1, #28
 8013c06:	4618      	mov	r0, r3
 8013c08:	f010 fda8 	bl	802475c <lv_memset_00>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8013c0c:	79fb      	ldrb	r3, [r7, #7]
 8013c0e:	3301      	adds	r3, #1
 8013c10:	71fb      	strb	r3, [r7, #7]
 8013c12:	79fb      	ldrb	r3, [r7, #7]
 8013c14:	2b03      	cmp	r3, #3
 8013c16:	d9d9      	bls.n	8013bcc <_lv_draw_mask_cleanup+0xc>
    }
}
 8013c18:	bf00      	nop
 8013c1a:	bf00      	nop
 8013c1c:	3708      	adds	r7, #8
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}
 8013c22:	bf00      	nop
 8013c24:	200009d0 	.word	0x200009d0

08013c28 <lv_draw_mask_is_any>:
    }
    return cnt;
}

bool lv_draw_mask_is_any(const lv_area_t * a)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b086      	sub	sp, #24
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d107      	bne.n	8013c46 <lv_draw_mask_is_any+0x1e>
 8013c36:	4b2a      	ldr	r3, [pc, #168]	; (8013ce0 <lv_draw_mask_is_any+0xb8>)
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	bf14      	ite	ne
 8013c3e:	2301      	movne	r3, #1
 8013c40:	2300      	moveq	r3, #0
 8013c42:	b2db      	uxtb	r3, r3
 8013c44:	e048      	b.n	8013cd8 <lv_draw_mask_is_any+0xb0>

    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8013c46:	2300      	movs	r3, #0
 8013c48:	75fb      	strb	r3, [r7, #23]
 8013c4a:	e041      	b.n	8013cd0 <lv_draw_mask_is_any+0xa8>
        _lv_draw_mask_common_dsc_t * comm_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8013c4c:	7dfb      	ldrb	r3, [r7, #23]
 8013c4e:	4a24      	ldr	r2, [pc, #144]	; (8013ce0 <lv_draw_mask_is_any+0xb8>)
 8013c50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013c54:	613b      	str	r3, [r7, #16]
        if(comm_param == NULL) continue;
 8013c56:	693b      	ldr	r3, [r7, #16]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d035      	beq.n	8013cc8 <lv_draw_mask_is_any+0xa0>
        if(comm_param->type == LV_DRAW_MASK_TYPE_RADIUS) {
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	791b      	ldrb	r3, [r3, #4]
 8013c60:	2b02      	cmp	r3, #2
 8013c62:	d12f      	bne.n	8013cc4 <lv_draw_mask_is_any+0x9c>
            lv_draw_mask_radius_param_t * radius_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8013c64:	7dfb      	ldrb	r3, [r7, #23]
 8013c66:	4a1e      	ldr	r2, [pc, #120]	; (8013ce0 <lv_draw_mask_is_any+0xb8>)
 8013c68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013c6c:	60fb      	str	r3, [r7, #12]
            if(radius_param->cfg.outer) {
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	7c9b      	ldrb	r3, [r3, #18]
 8013c72:	f003 0301 	and.w	r3, r3, #1
 8013c76:	b2db      	uxtb	r3, r3
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d011      	beq.n	8013ca0 <lv_draw_mask_is_any+0x78>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	f103 0108 	add.w	r1, r3, #8
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013c88:	461a      	mov	r2, r3
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f00f f894 	bl	8022db8 <_lv_area_is_out>
 8013c90:	4603      	mov	r3, r0
 8013c92:	f083 0301 	eor.w	r3, r3, #1
 8013c96:	b2db      	uxtb	r3, r3
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d016      	beq.n	8013cca <lv_draw_mask_is_any+0xa2>
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	e01b      	b.n	8013cd8 <lv_draw_mask_is_any+0xb0>
            }
            else {
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	f103 0108 	add.w	r1, r3, #8
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8013cac:	461a      	mov	r2, r3
 8013cae:	6878      	ldr	r0, [r7, #4]
 8013cb0:	f00e ffe4 	bl	8022c7c <_lv_area_is_in>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	f083 0301 	eor.w	r3, r3, #1
 8013cba:	b2db      	uxtb	r3, r3
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d004      	beq.n	8013cca <lv_draw_mask_is_any+0xa2>
 8013cc0:	2301      	movs	r3, #1
 8013cc2:	e009      	b.n	8013cd8 <lv_draw_mask_is_any+0xb0>
            }
        }
        else {
            return true;
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	e007      	b.n	8013cd8 <lv_draw_mask_is_any+0xb0>
        if(comm_param == NULL) continue;
 8013cc8:	bf00      	nop
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8013cca:	7dfb      	ldrb	r3, [r7, #23]
 8013ccc:	3301      	adds	r3, #1
 8013cce:	75fb      	strb	r3, [r7, #23]
 8013cd0:	7dfb      	ldrb	r3, [r7, #23]
 8013cd2:	2b0f      	cmp	r3, #15
 8013cd4:	d9ba      	bls.n	8013c4c <lv_draw_mask_is_any+0x24>
        }
    }

    return false;
 8013cd6:	2300      	movs	r3, #0

}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	3718      	adds	r7, #24
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}
 8013ce0:	20000a40 	.word	0x20000a40

08013ce4 <lv_draw_mask_line_points_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_points_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t p1y, lv_coord_t p2x,
                                   lv_coord_t p2y, lv_draw_mask_line_side_t side)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b08a      	sub	sp, #40	; 0x28
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	60f8      	str	r0, [r7, #12]
 8013cec:	4608      	mov	r0, r1
 8013cee:	4611      	mov	r1, r2
 8013cf0:	461a      	mov	r2, r3
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	817b      	strh	r3, [r7, #10]
 8013cf6:	460b      	mov	r3, r1
 8013cf8:	813b      	strh	r3, [r7, #8]
 8013cfa:	4613      	mov	r3, r2
 8013cfc:	80fb      	strh	r3, [r7, #6]
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 8013cfe:	212c      	movs	r1, #44	; 0x2c
 8013d00:	68f8      	ldr	r0, [r7, #12]
 8013d02:	f010 fd2b 	bl	802475c <lv_memset_00>

    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 8013d06:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013d0a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	d10f      	bne.n	8013d32 <lv_draw_mask_line_points_init+0x4e>
 8013d12:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013d16:	2b03      	cmp	r3, #3
 8013d18:	d10b      	bne.n	8013d32 <lv_draw_mask_line_points_init+0x4e>
        p1y--;
 8013d1a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013d1e:	b29b      	uxth	r3, r3
 8013d20:	3b01      	subs	r3, #1
 8013d22:	b29b      	uxth	r3, r3
 8013d24:	813b      	strh	r3, [r7, #8]
        p2y--;
 8013d26:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8013d2a:	b29b      	uxth	r3, r3
 8013d2c:	3b01      	subs	r3, #1
 8013d2e:	b29b      	uxth	r3, r3
 8013d30:	863b      	strh	r3, [r7, #48]	; 0x30
    }

    if(p1y > p2y) {
 8013d32:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8013d36:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	dd0b      	ble.n	8013d56 <lv_draw_mask_line_points_init+0x72>
        lv_coord_t t;
        t = p2x;
 8013d3e:	88fb      	ldrh	r3, [r7, #6]
 8013d40:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2x = p1x;
 8013d42:	897b      	ldrh	r3, [r7, #10]
 8013d44:	80fb      	strh	r3, [r7, #6]
        p1x = t;
 8013d46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013d48:	817b      	strh	r3, [r7, #10]

        t = p2y;
 8013d4a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013d4c:	84fb      	strh	r3, [r7, #38]	; 0x26
        p2y = p1y;
 8013d4e:	893b      	ldrh	r3, [r7, #8]
 8013d50:	863b      	strh	r3, [r7, #48]	; 0x30
        p1y = t;
 8013d52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013d54:	813b      	strh	r3, [r7, #8]
    }

    param->cfg.p1.x = p1x;
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	897a      	ldrh	r2, [r7, #10]
 8013d5a:	811a      	strh	r2, [r3, #8]
    param->cfg.p1.y = p1y;
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	893a      	ldrh	r2, [r7, #8]
 8013d60:	815a      	strh	r2, [r3, #10]
    param->cfg.p2.x = p2x;
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	88fa      	ldrh	r2, [r7, #6]
 8013d66:	819a      	strh	r2, [r3, #12]
    param->cfg.p2.y = p2y;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8013d6c:	81da      	strh	r2, [r3, #14]
    param->cfg.side = side;
 8013d6e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013d72:	f003 0303 	and.w	r3, r3, #3
 8013d76:	b2d9      	uxtb	r1, r3
 8013d78:	68fa      	ldr	r2, [r7, #12]
 8013d7a:	7c13      	ldrb	r3, [r2, #16]
 8013d7c:	f361 0301 	bfi	r3, r1, #0, #2
 8013d80:	7413      	strb	r3, [r2, #16]

    param->origo.x = p1x;
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	897a      	ldrh	r2, [r7, #10]
 8013d86:	825a      	strh	r2, [r3, #18]
    param->origo.y = p1y;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	893a      	ldrh	r2, [r7, #8]
 8013d8c:	829a      	strh	r2, [r3, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 8013d8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013d92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013d96:	1ad3      	subs	r3, r2, r3
 8013d98:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8013d9c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8013da0:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 8013da4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013da8:	1acb      	subs	r3, r1, r3
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	bfb8      	it	lt
 8013dae:	425b      	neglt	r3, r3
 8013db0:	429a      	cmp	r2, r3
 8013db2:	bfcc      	ite	gt
 8013db4:	2301      	movgt	r3, #1
 8013db6:	2300      	movle	r3, #0
 8013db8:	b2d9      	uxtb	r1, r3
 8013dba:	68fa      	ldr	r2, [r7, #12]
 8013dbc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8013dc0:	f361 0300 	bfi	r3, r1, #0, #1
 8013dc4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    param->yx_steep = 0;
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	2200      	movs	r2, #0
 8013dcc:	61da      	str	r2, [r3, #28]
    param->xy_steep = 0;
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	619a      	str	r2, [r3, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	4a63      	ldr	r2, [pc, #396]	; (8013f64 <lv_draw_mask_line_points_init+0x280>)
 8013dd8:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	2200      	movs	r2, #0
 8013dde:	711a      	strb	r2, [r3, #4]

    int32_t dx = p2x - p1x;
 8013de0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013de4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013de8:	1ad3      	subs	r3, r2, r3
 8013dea:	623b      	str	r3, [r7, #32]
    int32_t dy = p2y - p1y;
 8013dec:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8013df0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013df4:	1ad3      	subs	r3, r2, r3
 8013df6:	61fb      	str	r3, [r7, #28]

    if(param->flat) {
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013dfe:	f003 0301 	and.w	r3, r3, #1
 8013e02:	b2db      	uxtb	r3, r3
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d024      	beq.n	8013e52 <lv_draw_mask_line_points_init+0x16e>
        /*Normalize the steep. Delta x should be relative to delta x = 1024*/
        int32_t m;

        if(dx) {
 8013e08:	6a3b      	ldr	r3, [r7, #32]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d00c      	beq.n	8013e28 <lv_draw_mask_line_points_init+0x144>
            m = (1L << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 8013e0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8013e12:	6a3b      	ldr	r3, [r7, #32]
 8013e14:	fb92 f3f3 	sdiv	r3, r2, r3
 8013e18:	617b      	str	r3, [r7, #20]
            param->yx_steep = (m * dy) >> 10;
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	69fa      	ldr	r2, [r7, #28]
 8013e1e:	fb02 f303 	mul.w	r3, r2, r3
 8013e22:	129a      	asrs	r2, r3, #10
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	61da      	str	r2, [r3, #28]
        }

        if(dy) {
 8013e28:	69fb      	ldr	r3, [r7, #28]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d00c      	beq.n	8013e48 <lv_draw_mask_line_points_init+0x164>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8013e2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8013e32:	69fb      	ldr	r3, [r7, #28]
 8013e34:	fb92 f3f3 	sdiv	r3, r2, r3
 8013e38:	617b      	str	r3, [r7, #20]
            param->xy_steep = (m * dx) >> 10;
 8013e3a:	697b      	ldr	r3, [r7, #20]
 8013e3c:	6a3a      	ldr	r2, [r7, #32]
 8013e3e:	fb02 f303 	mul.w	r3, r2, r3
 8013e42:	129a      	asrs	r2, r3, #10
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	619a      	str	r2, [r3, #24]
        }
        param->steep = param->yx_steep;
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	69da      	ldr	r2, [r3, #28]
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	621a      	str	r2, [r3, #32]
 8013e50:	e023      	b.n	8013e9a <lv_draw_mask_line_points_init+0x1b6>
    }
    else {
        /*Normalize the steep. Delta y should be relative to delta x = 1024*/
        int32_t m;

        if(dy) {
 8013e52:	69fb      	ldr	r3, [r7, #28]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d00c      	beq.n	8013e72 <lv_draw_mask_line_points_init+0x18e>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8013e58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8013e62:	61bb      	str	r3, [r7, #24]
            param->xy_steep = (m * dx) >> 10;
 8013e64:	69bb      	ldr	r3, [r7, #24]
 8013e66:	6a3a      	ldr	r2, [r7, #32]
 8013e68:	fb02 f303 	mul.w	r3, r2, r3
 8013e6c:	129a      	asrs	r2, r3, #10
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	619a      	str	r2, [r3, #24]
        }

        if(dx) {
 8013e72:	6a3b      	ldr	r3, [r7, #32]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d00c      	beq.n	8013e92 <lv_draw_mask_line_points_init+0x1ae>
            m = (1L << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8013e78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8013e7c:	6a3b      	ldr	r3, [r7, #32]
 8013e7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8013e82:	61bb      	str	r3, [r7, #24]
            param->yx_steep = (m * dy) >> 10;
 8013e84:	69bb      	ldr	r3, [r7, #24]
 8013e86:	69fa      	ldr	r2, [r7, #28]
 8013e88:	fb02 f303 	mul.w	r3, r2, r3
 8013e8c:	129a      	asrs	r2, r3, #10
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	61da      	str	r2, [r3, #28]
        }
        param->steep = param->xy_steep;
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	699a      	ldr	r2, [r3, #24]
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	621a      	str	r2, [r3, #32]
    }

    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	7c1b      	ldrb	r3, [r3, #16]
 8013e9e:	f003 0303 	and.w	r3, r3, #3
 8013ea2:	b2db      	uxtb	r3, r3
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d107      	bne.n	8013eb8 <lv_draw_mask_line_points_init+0x1d4>
 8013ea8:	68fa      	ldr	r2, [r7, #12]
 8013eaa:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8013eae:	f36f 0341 	bfc	r3, #1, #1
 8013eb2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8013eb6:	e043      	b.n	8013f40 <lv_draw_mask_line_points_init+0x25c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	7c1b      	ldrb	r3, [r3, #16]
 8013ebc:	f003 0303 	and.w	r3, r3, #3
 8013ec0:	b2db      	uxtb	r3, r3
 8013ec2:	2b01      	cmp	r3, #1
 8013ec4:	d107      	bne.n	8013ed6 <lv_draw_mask_line_points_init+0x1f2>
 8013ec6:	68fa      	ldr	r2, [r7, #12]
 8013ec8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8013ecc:	f043 0302 	orr.w	r3, r3, #2
 8013ed0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8013ed4:	e034      	b.n	8013f40 <lv_draw_mask_line_points_init+0x25c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	7c1b      	ldrb	r3, [r3, #16]
 8013eda:	f003 0303 	and.w	r3, r3, #3
 8013ede:	b2db      	uxtb	r3, r3
 8013ee0:	2b02      	cmp	r3, #2
 8013ee2:	d113      	bne.n	8013f0c <lv_draw_mask_line_points_init+0x228>
        if(param->steep > 0) param->inv = 1;
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	6a1b      	ldr	r3, [r3, #32]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	dd07      	ble.n	8013efc <lv_draw_mask_line_points_init+0x218>
 8013eec:	68fa      	ldr	r2, [r7, #12]
 8013eee:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8013ef2:	f043 0302 	orr.w	r3, r3, #2
 8013ef6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8013efa:	e021      	b.n	8013f40 <lv_draw_mask_line_points_init+0x25c>
        else param->inv = 0;
 8013efc:	68fa      	ldr	r2, [r7, #12]
 8013efe:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8013f02:	f36f 0341 	bfc	r3, #1, #1
 8013f06:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8013f0a:	e019      	b.n	8013f40 <lv_draw_mask_line_points_init+0x25c>
    }
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	7c1b      	ldrb	r3, [r3, #16]
 8013f10:	f003 0303 	and.w	r3, r3, #3
 8013f14:	b2db      	uxtb	r3, r3
 8013f16:	2b03      	cmp	r3, #3
 8013f18:	d112      	bne.n	8013f40 <lv_draw_mask_line_points_init+0x25c>
        if(param->steep > 0) param->inv = 0;
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	6a1b      	ldr	r3, [r3, #32]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	dd07      	ble.n	8013f32 <lv_draw_mask_line_points_init+0x24e>
 8013f22:	68fa      	ldr	r2, [r7, #12]
 8013f24:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8013f28:	f36f 0341 	bfc	r3, #1, #1
 8013f2c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8013f30:	e006      	b.n	8013f40 <lv_draw_mask_line_points_init+0x25c>
        else param->inv = 1;
 8013f32:	68fa      	ldr	r2, [r7, #12]
 8013f34:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8013f38:	f043 0302 	orr.w	r3, r3, #2
 8013f3c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    }

    param->spx = param->steep >> 2;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	6a1b      	ldr	r3, [r3, #32]
 8013f44:	109a      	asrs	r2, r3, #2
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	625a      	str	r2, [r3, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	6a1b      	ldr	r3, [r3, #32]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	da04      	bge.n	8013f5c <lv_draw_mask_line_points_init+0x278>
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f56:	425a      	negs	r2, r3
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013f5c:	bf00      	nop
 8013f5e:	3728      	adds	r7, #40	; 0x28
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd80      	pop	{r7, pc}
 8013f64:	08014399 	.word	0x08014399

08013f68 <lv_draw_mask_line_angle_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_angle_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t py, int16_t angle,
                                  lv_draw_mask_line_side_t side)
{
 8013f68:	b590      	push	{r4, r7, lr}
 8013f6a:	b089      	sub	sp, #36	; 0x24
 8013f6c:	af02      	add	r7, sp, #8
 8013f6e:	60f8      	str	r0, [r7, #12]
 8013f70:	4608      	mov	r0, r1
 8013f72:	4611      	mov	r1, r2
 8013f74:	461a      	mov	r2, r3
 8013f76:	4603      	mov	r3, r0
 8013f78:	817b      	strh	r3, [r7, #10]
 8013f7a:	460b      	mov	r3, r1
 8013f7c:	813b      	strh	r3, [r7, #8]
 8013f7e:	4613      	mov	r3, r2
 8013f80:	80fb      	strh	r3, [r7, #6]
    /*Find an optimal degree.
     *lv_mask_line_points_init will swap the points to keep the smaller y in p1
     *Theoretically a line with `angle` or `angle+180` is the same only the points are swapped
     *Find the degree which keeps the origo in place*/
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 8013f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013f86:	2bb4      	cmp	r3, #180	; 0xb4
 8013f88:	dd03      	ble.n	8013f92 <lv_draw_mask_line_angle_init+0x2a>
 8013f8a:	88fb      	ldrh	r3, [r7, #6]
 8013f8c:	3bb4      	subs	r3, #180	; 0xb4
 8013f8e:	b29b      	uxth	r3, r3
 8013f90:	80fb      	strh	r3, [r7, #6]

    int32_t p2x;
    int32_t p2y;

    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 8013f92:	88fb      	ldrh	r3, [r7, #6]
 8013f94:	335a      	adds	r3, #90	; 0x5a
 8013f96:	b29b      	uxth	r3, r3
 8013f98:	b21b      	sxth	r3, r3
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f00f fe90 	bl	8023cc0 <lv_trigo_sin>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	115b      	asrs	r3, r3, #5
 8013fa4:	b21b      	sxth	r3, r3
 8013fa6:	461a      	mov	r2, r3
 8013fa8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013fac:	4413      	add	r3, r2
 8013fae:	617b      	str	r3, [r7, #20]
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 8013fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f00f fe83 	bl	8023cc0 <lv_trigo_sin>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	115b      	asrs	r3, r3, #5
 8013fbe:	b21b      	sxth	r3, r3
 8013fc0:	461a      	mov	r2, r3
 8013fc2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013fc6:	4413      	add	r3, r2
 8013fc8:	613b      	str	r3, [r7, #16]

    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 8013fca:	697b      	ldr	r3, [r7, #20]
 8013fcc:	b21c      	sxth	r4, r3
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	b21b      	sxth	r3, r3
 8013fd2:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8013fd6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8013fda:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013fde:	9201      	str	r2, [sp, #4]
 8013fe0:	9300      	str	r3, [sp, #0]
 8013fe2:	4623      	mov	r3, r4
 8013fe4:	4602      	mov	r2, r0
 8013fe6:	68f8      	ldr	r0, [r7, #12]
 8013fe8:	f7ff fe7c 	bl	8013ce4 <lv_draw_mask_line_points_init>
}
 8013fec:	bf00      	nop
 8013fee:	371c      	adds	r7, #28
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd90      	pop	{r4, r7, pc}

08013ff4 <lv_draw_mask_angle_init>:
 * @param start_angle start angle in degrees. 0 deg on the right, 90 deg, on the bottom
 * @param end_angle end angle
 */
void lv_draw_mask_angle_init(lv_draw_mask_angle_param_t * param, lv_coord_t vertex_x, lv_coord_t vertex_y,
                             lv_coord_t start_angle, lv_coord_t end_angle)
{
 8013ff4:	b590      	push	{r4, r7, lr}
 8013ff6:	b089      	sub	sp, #36	; 0x24
 8013ff8:	af02      	add	r7, sp, #8
 8013ffa:	60f8      	str	r0, [r7, #12]
 8013ffc:	4608      	mov	r0, r1
 8013ffe:	4611      	mov	r1, r2
 8014000:	461a      	mov	r2, r3
 8014002:	4603      	mov	r3, r0
 8014004:	817b      	strh	r3, [r7, #10]
 8014006:	460b      	mov	r3, r1
 8014008:	813b      	strh	r3, [r7, #8]
 801400a:	4613      	mov	r3, r2
 801400c:	80fb      	strh	r3, [r7, #6]
    lv_draw_mask_line_side_t start_side;
    lv_draw_mask_line_side_t end_side;

    /*Constrain the input angles*/
    if(start_angle < 0)
 801400e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014012:	2b00      	cmp	r3, #0
 8014014:	da02      	bge.n	801401c <lv_draw_mask_angle_init+0x28>
        start_angle = 0;
 8014016:	2300      	movs	r3, #0
 8014018:	80fb      	strh	r3, [r7, #6]
 801401a:	e007      	b.n	801402c <lv_draw_mask_angle_init+0x38>
    else if(start_angle > 359)
 801401c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014020:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8014024:	db02      	blt.n	801402c <lv_draw_mask_angle_init+0x38>
        start_angle = 359;
 8014026:	f240 1367 	movw	r3, #359	; 0x167
 801402a:	80fb      	strh	r3, [r7, #6]

    if(end_angle < 0)
 801402c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8014030:	2b00      	cmp	r3, #0
 8014032:	da02      	bge.n	801403a <lv_draw_mask_angle_init+0x46>
        end_angle = 0;
 8014034:	2300      	movs	r3, #0
 8014036:	853b      	strh	r3, [r7, #40]	; 0x28
 8014038:	e007      	b.n	801404a <lv_draw_mask_angle_init+0x56>
    else if(end_angle > 359)
 801403a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801403e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8014042:	db02      	blt.n	801404a <lv_draw_mask_angle_init+0x56>
        end_angle = 359;
 8014044:	f240 1367 	movw	r3, #359	; 0x167
 8014048:	853b      	strh	r3, [r7, #40]	; 0x28

    if(end_angle < start_angle) {
 801404a:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 801404e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014052:	429a      	cmp	r2, r3
 8014054:	da0a      	bge.n	801406c <lv_draw_mask_angle_init+0x78>
        param->delta_deg = 360 - start_angle + end_angle;
 8014056:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8014058:	88fb      	ldrh	r3, [r7, #6]
 801405a:	1ad3      	subs	r3, r2, r3
 801405c:	b29b      	uxth	r3, r3
 801405e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8014062:	b29a      	uxth	r2, r3
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801406a:	e00b      	b.n	8014084 <lv_draw_mask_angle_init+0x90>
    }
    else {
        param->delta_deg = LV_ABS(end_angle - start_angle);
 801406c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8014070:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014074:	1ad3      	subs	r3, r2, r3
 8014076:	2b00      	cmp	r3, #0
 8014078:	bfb8      	it	lt
 801407a:	425b      	neglt	r3, r3
 801407c:	b29a      	uxth	r2, r3
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    }

    param->cfg.start_angle = start_angle;
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	88fa      	ldrh	r2, [r7, #6]
 8014088:	819a      	strh	r2, [r3, #12]
    param->cfg.end_angle = end_angle;
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801408e:	81da      	strh	r2, [r3, #14]
    param->cfg.vertex_p.x = vertex_x;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	897a      	ldrh	r2, [r7, #10]
 8014094:	811a      	strh	r2, [r3, #8]
    param->cfg.vertex_p.y = vertex_y;
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	893a      	ldrh	r2, [r7, #8]
 801409a:	815a      	strh	r2, [r3, #10]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	4a2f      	ldr	r2, [pc, #188]	; (801415c <lv_draw_mask_angle_init+0x168>)
 80140a0:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	2201      	movs	r2, #1
 80140a6:	711a      	strb	r2, [r3, #4]

    LV_ASSERT_MSG(start_angle >= 0 && start_angle <= 360, "Unexpected start angle");
 80140a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	db04      	blt.n	80140ba <lv_draw_mask_angle_init+0xc6>
 80140b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80140b4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80140b8:	dd00      	ble.n	80140bc <lv_draw_mask_angle_init+0xc8>
 80140ba:	e7fe      	b.n	80140ba <lv_draw_mask_angle_init+0xc6>

    if(start_angle >= 0 && start_angle < 180) {
 80140bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	db06      	blt.n	80140d2 <lv_draw_mask_angle_init+0xde>
 80140c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80140c8:	2bb3      	cmp	r3, #179	; 0xb3
 80140ca:	dc02      	bgt.n	80140d2 <lv_draw_mask_angle_init+0xde>
        start_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
 80140cc:	2300      	movs	r3, #0
 80140ce:	75fb      	strb	r3, [r7, #23]
 80140d0:	e001      	b.n	80140d6 <lv_draw_mask_angle_init+0xe2>
    }
    else
        start_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/
 80140d2:	2301      	movs	r3, #1
 80140d4:	75fb      	strb	r3, [r7, #23]

    LV_ASSERT_MSG(end_angle >= 0 && start_angle <= 360, "Unexpected end angle");
 80140d6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80140da:	2b00      	cmp	r3, #0
 80140dc:	db04      	blt.n	80140e8 <lv_draw_mask_angle_init+0xf4>
 80140de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80140e2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80140e6:	dd00      	ble.n	80140ea <lv_draw_mask_angle_init+0xf6>
 80140e8:	e7fe      	b.n	80140e8 <lv_draw_mask_angle_init+0xf4>

    if(end_angle >= 0 && end_angle < 180) {
 80140ea:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	db06      	blt.n	8014100 <lv_draw_mask_angle_init+0x10c>
 80140f2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80140f6:	2bb3      	cmp	r3, #179	; 0xb3
 80140f8:	dc02      	bgt.n	8014100 <lv_draw_mask_angle_init+0x10c>
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT;
 80140fa:	2301      	movs	r3, #1
 80140fc:	75bb      	strb	r3, [r7, #22]
 80140fe:	e00d      	b.n	801411c <lv_draw_mask_angle_init+0x128>
    }
    else if(end_angle >= 180 && end_angle < 360) {
 8014100:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8014104:	2bb3      	cmp	r3, #179	; 0xb3
 8014106:	dd07      	ble.n	8014118 <lv_draw_mask_angle_init+0x124>
 8014108:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801410c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8014110:	da02      	bge.n	8014118 <lv_draw_mask_angle_init+0x124>
        end_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
 8014112:	2300      	movs	r3, #0
 8014114:	75bb      	strb	r3, [r7, #22]
 8014116:	e001      	b.n	801411c <lv_draw_mask_angle_init+0x128>
    }
    else
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/
 8014118:	2301      	movs	r3, #1
 801411a:	75bb      	strb	r3, [r7, #22]

    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	f103 0010 	add.w	r0, r3, #16
 8014122:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8014126:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801412a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801412e:	7dfb      	ldrb	r3, [r7, #23]
 8014130:	9300      	str	r3, [sp, #0]
 8014132:	4623      	mov	r3, r4
 8014134:	f7ff ff18 	bl	8013f68 <lv_draw_mask_line_angle_init>
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801413e:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 8014142:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014146:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801414a:	7dbb      	ldrb	r3, [r7, #22]
 801414c:	9300      	str	r3, [sp, #0]
 801414e:	4623      	mov	r3, r4
 8014150:	f7ff ff0a 	bl	8013f68 <lv_draw_mask_line_angle_init>
}
 8014154:	bf00      	nop
 8014156:	371c      	adds	r7, #28
 8014158:	46bd      	mov	sp, r7
 801415a:	bd90      	pop	{r4, r7, pc}
 801415c:	08014d19 	.word	0x08014d19

08014160 <lv_draw_mask_radius_init>:
 * @param rect coordinates of the rectangle to affect (absolute coordinates)
 * @param radius radius of the rectangle
 * @param inv true: keep the pixels inside the rectangle; keep the pixels outside of the rectangle
 */
void lv_draw_mask_radius_init(lv_draw_mask_radius_param_t * param, const lv_area_t * rect, lv_coord_t radius, bool inv)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b088      	sub	sp, #32
 8014164:	af00      	add	r7, sp, #0
 8014166:	60f8      	str	r0, [r7, #12]
 8014168:	60b9      	str	r1, [r7, #8]
 801416a:	4611      	mov	r1, r2
 801416c:	461a      	mov	r2, r3
 801416e:	460b      	mov	r3, r1
 8014170:	80fb      	strh	r3, [r7, #6]
 8014172:	4613      	mov	r3, r2
 8014174:	717b      	strb	r3, [r7, #5]
    lv_coord_t w = lv_area_get_width(rect);
 8014176:	68b8      	ldr	r0, [r7, #8]
 8014178:	f7ff fbf8 	bl	801396c <lv_area_get_width>
 801417c:	4603      	mov	r3, r0
 801417e:	82fb      	strh	r3, [r7, #22]
    lv_coord_t h = lv_area_get_height(rect);
 8014180:	68b8      	ldr	r0, [r7, #8]
 8014182:	f7ff fc0a 	bl	801399a <lv_area_get_height>
 8014186:	4603      	mov	r3, r0
 8014188:	82bb      	strh	r3, [r7, #20]
    int32_t short_side = LV_MIN(w, h);
 801418a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801418e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014192:	4293      	cmp	r3, r2
 8014194:	bfa8      	it	ge
 8014196:	4613      	movge	r3, r2
 8014198:	b21b      	sxth	r3, r3
 801419a:	613b      	str	r3, [r7, #16]
    if(radius > short_side >> 1) radius = short_side >> 1;
 801419c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80141a0:	693b      	ldr	r3, [r7, #16]
 80141a2:	105b      	asrs	r3, r3, #1
 80141a4:	429a      	cmp	r2, r3
 80141a6:	dd02      	ble.n	80141ae <lv_draw_mask_radius_init+0x4e>
 80141a8:	693b      	ldr	r3, [r7, #16]
 80141aa:	105b      	asrs	r3, r3, #1
 80141ac:	80fb      	strh	r3, [r7, #6]
    if(radius < 0) radius = 0;
 80141ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	da01      	bge.n	80141ba <lv_draw_mask_radius_init+0x5a>
 80141b6:	2300      	movs	r3, #0
 80141b8:	80fb      	strh	r3, [r7, #6]

    lv_area_copy(&param->cfg.rect, rect);
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	3308      	adds	r3, #8
 80141be:	68b9      	ldr	r1, [r7, #8]
 80141c0:	4618      	mov	r0, r3
 80141c2:	f7ff fbb4 	bl	801392e <lv_area_copy>
    param->cfg.radius = radius;
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	88fa      	ldrh	r2, [r7, #6]
 80141ca:	821a      	strh	r2, [r3, #16]
    param->cfg.outer = inv ? 1 : 0;
 80141cc:	7979      	ldrb	r1, [r7, #5]
 80141ce:	68fa      	ldr	r2, [r7, #12]
 80141d0:	7c93      	ldrb	r3, [r2, #18]
 80141d2:	f361 0300 	bfi	r3, r1, #0, #1
 80141d6:	7493      	strb	r3, [r2, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	4a6d      	ldr	r2, [pc, #436]	; (8014390 <lv_draw_mask_radius_init+0x230>)
 80141dc:	601a      	str	r2, [r3, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	2202      	movs	r2, #2
 80141e2:	711a      	strb	r2, [r3, #4]

    if(radius == 0) {
 80141e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d103      	bne.n	80141f4 <lv_draw_mask_radius_init+0x94>
        param->circle = NULL;
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	2200      	movs	r2, #0
 80141f0:	615a      	str	r2, [r3, #20]
        return;
 80141f2:	e0c9      	b.n	8014388 <lv_draw_mask_radius_init+0x228>
    }

    uint32_t i;

    /*Try to reuse a circle cache entry*/
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 80141f4:	2300      	movs	r3, #0
 80141f6:	61fb      	str	r3, [r7, #28]
 80141f8:	e050      	b.n	801429c <lv_draw_mask_radius_init+0x13c>
        if(LV_GC_ROOT(_lv_circle_cache[i]).radius == radius) {
 80141fa:	4966      	ldr	r1, [pc, #408]	; (8014394 <lv_draw_mask_radius_init+0x234>)
 80141fc:	69fa      	ldr	r2, [r7, #28]
 80141fe:	4613      	mov	r3, r2
 8014200:	00db      	lsls	r3, r3, #3
 8014202:	1a9b      	subs	r3, r3, r2
 8014204:	009b      	lsls	r3, r3, #2
 8014206:	440b      	add	r3, r1
 8014208:	3318      	adds	r3, #24
 801420a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801420e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014212:	429a      	cmp	r2, r3
 8014214:	d13f      	bne.n	8014296 <lv_draw_mask_radius_init+0x136>
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 8014216:	495f      	ldr	r1, [pc, #380]	; (8014394 <lv_draw_mask_radius_init+0x234>)
 8014218:	69fa      	ldr	r2, [r7, #28]
 801421a:	4613      	mov	r3, r2
 801421c:	00db      	lsls	r3, r3, #3
 801421e:	1a9b      	subs	r3, r3, r2
 8014220:	009b      	lsls	r3, r3, #2
 8014222:	440b      	add	r3, r1
 8014224:	3314      	adds	r3, #20
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	1c59      	adds	r1, r3, #1
 801422a:	485a      	ldr	r0, [pc, #360]	; (8014394 <lv_draw_mask_radius_init+0x234>)
 801422c:	69fa      	ldr	r2, [r7, #28]
 801422e:	4613      	mov	r3, r2
 8014230:	00db      	lsls	r3, r3, #3
 8014232:	1a9b      	subs	r3, r3, r2
 8014234:	009b      	lsls	r3, r3, #2
 8014236:	4403      	add	r3, r0
 8014238:	3314      	adds	r3, #20
 801423a:	6019      	str	r1, [r3, #0]
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 801423c:	4955      	ldr	r1, [pc, #340]	; (8014394 <lv_draw_mask_radius_init+0x234>)
 801423e:	69fa      	ldr	r2, [r7, #28]
 8014240:	4613      	mov	r3, r2
 8014242:	00db      	lsls	r3, r3, #3
 8014244:	1a9b      	subs	r3, r3, r2
 8014246:	009b      	lsls	r3, r3, #2
 8014248:	440b      	add	r3, r1
 801424a:	3310      	adds	r3, #16
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014252:	2a0f      	cmp	r2, #15
 8014254:	dd04      	ble.n	8014260 <lv_draw_mask_radius_init+0x100>
 8014256:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801425a:	1112      	asrs	r2, r2, #4
 801425c:	b212      	sxth	r2, r2
 801425e:	e000      	b.n	8014262 <lv_draw_mask_radius_init+0x102>
 8014260:	2201      	movs	r2, #1
 8014262:	4413      	add	r3, r2
 8014264:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014268:	bfa8      	it	ge
 801426a:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 801426e:	4619      	mov	r1, r3
 8014270:	4848      	ldr	r0, [pc, #288]	; (8014394 <lv_draw_mask_radius_init+0x234>)
 8014272:	69fa      	ldr	r2, [r7, #28]
 8014274:	4613      	mov	r3, r2
 8014276:	00db      	lsls	r3, r3, #3
 8014278:	1a9b      	subs	r3, r3, r2
 801427a:	009b      	lsls	r3, r3, #2
 801427c:	4403      	add	r3, r0
 801427e:	3310      	adds	r3, #16
 8014280:	6019      	str	r1, [r3, #0]
            param->circle = &LV_GC_ROOT(_lv_circle_cache[i]);
 8014282:	69fa      	ldr	r2, [r7, #28]
 8014284:	4613      	mov	r3, r2
 8014286:	00db      	lsls	r3, r3, #3
 8014288:	1a9b      	subs	r3, r3, r2
 801428a:	009b      	lsls	r3, r3, #2
 801428c:	4a41      	ldr	r2, [pc, #260]	; (8014394 <lv_draw_mask_radius_init+0x234>)
 801428e:	441a      	add	r2, r3
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	615a      	str	r2, [r3, #20]
            return;
 8014294:	e078      	b.n	8014388 <lv_draw_mask_radius_init+0x228>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8014296:	69fb      	ldr	r3, [r7, #28]
 8014298:	3301      	adds	r3, #1
 801429a:	61fb      	str	r3, [r7, #28]
 801429c:	69fb      	ldr	r3, [r7, #28]
 801429e:	2b03      	cmp	r3, #3
 80142a0:	d9ab      	bls.n	80141fa <lv_draw_mask_radius_init+0x9a>
        }
    }

    /*If not found find a free entry with lowest life*/
    _lv_draw_mask_radius_circle_dsc_t * entry = NULL;
 80142a2:	2300      	movs	r3, #0
 80142a4:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 80142a6:	2300      	movs	r3, #0
 80142a8:	61fb      	str	r3, [r7, #28]
 80142aa:	e02e      	b.n	801430a <lv_draw_mask_radius_init+0x1aa>
        if(LV_GC_ROOT(_lv_circle_cache[i]).used_cnt == 0) {
 80142ac:	4939      	ldr	r1, [pc, #228]	; (8014394 <lv_draw_mask_radius_init+0x234>)
 80142ae:	69fa      	ldr	r2, [r7, #28]
 80142b0:	4613      	mov	r3, r2
 80142b2:	00db      	lsls	r3, r3, #3
 80142b4:	1a9b      	subs	r3, r3, r2
 80142b6:	009b      	lsls	r3, r3, #2
 80142b8:	440b      	add	r3, r1
 80142ba:	3314      	adds	r3, #20
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d120      	bne.n	8014304 <lv_draw_mask_radius_init+0x1a4>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 80142c2:	69bb      	ldr	r3, [r7, #24]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d108      	bne.n	80142da <lv_draw_mask_radius_init+0x17a>
 80142c8:	69fa      	ldr	r2, [r7, #28]
 80142ca:	4613      	mov	r3, r2
 80142cc:	00db      	lsls	r3, r3, #3
 80142ce:	1a9b      	subs	r3, r3, r2
 80142d0:	009b      	lsls	r3, r3, #2
 80142d2:	4a30      	ldr	r2, [pc, #192]	; (8014394 <lv_draw_mask_radius_init+0x234>)
 80142d4:	4413      	add	r3, r2
 80142d6:	61bb      	str	r3, [r7, #24]
 80142d8:	e014      	b.n	8014304 <lv_draw_mask_radius_init+0x1a4>
            else if(LV_GC_ROOT(_lv_circle_cache[i]).life < entry->life) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 80142da:	492e      	ldr	r1, [pc, #184]	; (8014394 <lv_draw_mask_radius_init+0x234>)
 80142dc:	69fa      	ldr	r2, [r7, #28]
 80142de:	4613      	mov	r3, r2
 80142e0:	00db      	lsls	r3, r3, #3
 80142e2:	1a9b      	subs	r3, r3, r2
 80142e4:	009b      	lsls	r3, r3, #2
 80142e6:	440b      	add	r3, r1
 80142e8:	3310      	adds	r3, #16
 80142ea:	681a      	ldr	r2, [r3, #0]
 80142ec:	69bb      	ldr	r3, [r7, #24]
 80142ee:	691b      	ldr	r3, [r3, #16]
 80142f0:	429a      	cmp	r2, r3
 80142f2:	da07      	bge.n	8014304 <lv_draw_mask_radius_init+0x1a4>
 80142f4:	69fa      	ldr	r2, [r7, #28]
 80142f6:	4613      	mov	r3, r2
 80142f8:	00db      	lsls	r3, r3, #3
 80142fa:	1a9b      	subs	r3, r3, r2
 80142fc:	009b      	lsls	r3, r3, #2
 80142fe:	4a25      	ldr	r2, [pc, #148]	; (8014394 <lv_draw_mask_radius_init+0x234>)
 8014300:	4413      	add	r3, r2
 8014302:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8014304:	69fb      	ldr	r3, [r7, #28]
 8014306:	3301      	adds	r3, #1
 8014308:	61fb      	str	r3, [r7, #28]
 801430a:	69fb      	ldr	r3, [r7, #28]
 801430c:	2b03      	cmp	r3, #3
 801430e:	d9cd      	bls.n	80142ac <lv_draw_mask_radius_init+0x14c>
        }
    }

    if(!entry) {
 8014310:	69bb      	ldr	r3, [r7, #24]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d110      	bne.n	8014338 <lv_draw_mask_radius_init+0x1d8>
        entry = lv_mem_alloc(sizeof(_lv_draw_mask_radius_circle_dsc_t));
 8014316:	201c      	movs	r0, #28
 8014318:	f00f fdec 	bl	8023ef4 <lv_mem_alloc>
 801431c:	61b8      	str	r0, [r7, #24]
        LV_ASSERT_MALLOC(entry);
 801431e:	69bb      	ldr	r3, [r7, #24]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d100      	bne.n	8014326 <lv_draw_mask_radius_init+0x1c6>
 8014324:	e7fe      	b.n	8014324 <lv_draw_mask_radius_init+0x1c4>
        lv_memset_00(entry, sizeof(_lv_draw_mask_radius_circle_dsc_t));
 8014326:	211c      	movs	r1, #28
 8014328:	69b8      	ldr	r0, [r7, #24]
 801432a:	f010 fa17 	bl	802475c <lv_memset_00>
        entry->life = -1;
 801432e:	69bb      	ldr	r3, [r7, #24]
 8014330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014334:	611a      	str	r2, [r3, #16]
 8014336:	e01c      	b.n	8014372 <lv_draw_mask_radius_init+0x212>
    }
    else {
        entry->used_cnt++;
 8014338:	69bb      	ldr	r3, [r7, #24]
 801433a:	695b      	ldr	r3, [r3, #20]
 801433c:	1c5a      	adds	r2, r3, #1
 801433e:	69bb      	ldr	r3, [r7, #24]
 8014340:	615a      	str	r2, [r3, #20]
        entry->life = 0;
 8014342:	69bb      	ldr	r3, [r7, #24]
 8014344:	2200      	movs	r2, #0
 8014346:	611a      	str	r2, [r3, #16]
        CIRCLE_CACHE_AGING(entry->life, radius);
 8014348:	69bb      	ldr	r3, [r7, #24]
 801434a:	691b      	ldr	r3, [r3, #16]
 801434c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014350:	2a0f      	cmp	r2, #15
 8014352:	dd04      	ble.n	801435e <lv_draw_mask_radius_init+0x1fe>
 8014354:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014358:	1112      	asrs	r2, r2, #4
 801435a:	b212      	sxth	r2, r2
 801435c:	e000      	b.n	8014360 <lv_draw_mask_radius_init+0x200>
 801435e:	2201      	movs	r2, #1
 8014360:	4413      	add	r3, r2
 8014362:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014366:	bfa8      	it	ge
 8014368:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 801436c:	461a      	mov	r2, r3
 801436e:	69bb      	ldr	r3, [r7, #24]
 8014370:	611a      	str	r2, [r3, #16]
    }

    param->circle = entry;
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	69ba      	ldr	r2, [r7, #24]
 8014376:	615a      	str	r2, [r3, #20]

    circ_calc_aa4(param->circle, radius);
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	695b      	ldr	r3, [r3, #20]
 801437c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014380:	4611      	mov	r1, r2
 8014382:	4618      	mov	r0, r3
 8014384:	f001 fae6 	bl	8015954 <circ_calc_aa4>
}
 8014388:	3720      	adds	r7, #32
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}
 801438e:	bf00      	nop
 8014390:	08015319 	.word	0x08015319
 8014394:	200009d0 	.word	0x200009d0

08014398 <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b08a      	sub	sp, #40	; 0x28
 801439c:	af02      	add	r7, sp, #8
 801439e:	60f8      	str	r0, [r7, #12]
 80143a0:	4608      	mov	r0, r1
 80143a2:	4611      	mov	r1, r2
 80143a4:	461a      	mov	r2, r3
 80143a6:	4603      	mov	r3, r0
 80143a8:	817b      	strh	r3, [r7, #10]
 80143aa:	460b      	mov	r3, r1
 80143ac:	813b      	strh	r3, [r7, #8]
 80143ae:	4613      	mov	r3, r2
 80143b0:	80fb      	strh	r3, [r7, #6]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
 80143b2:	893a      	ldrh	r2, [r7, #8]
 80143b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143b6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80143ba:	b29b      	uxth	r3, r3
 80143bc:	1ad3      	subs	r3, r2, r3
 80143be:	b29b      	uxth	r3, r3
 80143c0:	813b      	strh	r3, [r7, #8]
    abs_x -= p->origo.x;
 80143c2:	897a      	ldrh	r2, [r7, #10]
 80143c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80143ca:	b29b      	uxth	r3, r3
 80143cc:	1ad3      	subs	r3, r2, r3
 80143ce:	b29b      	uxth	r3, r3
 80143d0:	817b      	strh	r3, [r7, #10]

    /*Handle special cases*/
    if(p->steep == 0) {
 80143d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143d4:	6a1b      	ldr	r3, [r3, #32]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	f040 80a7 	bne.w	801452a <lv_draw_mask_line+0x192>
        /*Horizontal*/
        if(p->flat) {
 80143dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80143e2:	f003 0301 	and.w	r3, r3, #1
 80143e6:	b2db      	uxtb	r3, r3
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d02c      	beq.n	8014446 <lv_draw_mask_line+0xae>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 80143ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143ee:	7c1b      	ldrb	r3, [r3, #16]
 80143f0:	f003 0303 	and.w	r3, r3, #3
 80143f4:	b2db      	uxtb	r3, r3
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d006      	beq.n	8014408 <lv_draw_mask_line+0x70>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 80143fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143fc:	7c1b      	ldrb	r3, [r3, #16]
 80143fe:	f003 0303 	and.w	r3, r3, #3
 8014402:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 8014404:	2b01      	cmp	r3, #1
 8014406:	d101      	bne.n	801440c <lv_draw_mask_line+0x74>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8014408:	2301      	movs	r3, #1
 801440a:	e0b4      	b.n	8014576 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801440e:	7c1b      	ldrb	r3, [r3, #16]
 8014410:	f003 0303 	and.w	r3, r3, #3
 8014414:	b2db      	uxtb	r3, r3
 8014416:	2b02      	cmp	r3, #2
 8014418:	d106      	bne.n	8014428 <lv_draw_mask_line+0x90>
 801441a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801441e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014422:	da01      	bge.n	8014428 <lv_draw_mask_line+0x90>
 8014424:	2301      	movs	r3, #1
 8014426:	e0a6      	b.n	8014576 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8014428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801442a:	7c1b      	ldrb	r3, [r3, #16]
 801442c:	f003 0303 	and.w	r3, r3, #3
 8014430:	b2db      	uxtb	r3, r3
 8014432:	2b03      	cmp	r3, #3
 8014434:	d105      	bne.n	8014442 <lv_draw_mask_line+0xaa>
 8014436:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801443a:	2b00      	cmp	r3, #0
 801443c:	dd01      	ble.n	8014442 <lv_draw_mask_line+0xaa>
 801443e:	2301      	movs	r3, #1
 8014440:	e099      	b.n	8014576 <lv_draw_mask_line+0x1de>
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 8014442:	2300      	movs	r3, #0
 8014444:	e097      	b.n	8014576 <lv_draw_mask_line+0x1de>
            }
        }
        /*Vertical*/
        else {
            /*Non sense: Can't be on the top/bottom of a vertical line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 8014446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014448:	7c1b      	ldrb	r3, [r3, #16]
 801444a:	f003 0303 	and.w	r3, r3, #3
 801444e:	b2db      	uxtb	r3, r3
 8014450:	2b02      	cmp	r3, #2
 8014452:	d006      	beq.n	8014462 <lv_draw_mask_line+0xca>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 8014454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014456:	7c1b      	ldrb	r3, [r3, #16]
 8014458:	f003 0303 	and.w	r3, r3, #3
 801445c:	b2db      	uxtb	r3, r3
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 801445e:	2b03      	cmp	r3, #3
 8014460:	d101      	bne.n	8014466 <lv_draw_mask_line+0xce>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 8014462:	2301      	movs	r3, #1
 8014464:	e087      	b.n	8014576 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8014466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014468:	7c1b      	ldrb	r3, [r3, #16]
 801446a:	f003 0303 	and.w	r3, r3, #3
 801446e:	b2db      	uxtb	r3, r3
 8014470:	2b01      	cmp	r3, #1
 8014472:	d105      	bne.n	8014480 <lv_draw_mask_line+0xe8>
 8014474:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014478:	2b00      	cmp	r3, #0
 801447a:	dd01      	ble.n	8014480 <lv_draw_mask_line+0xe8>
 801447c:	2301      	movs	r3, #1
 801447e:	e07a      	b.n	8014576 <lv_draw_mask_line+0x1de>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 8014480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014482:	7c1b      	ldrb	r3, [r3, #16]
 8014484:	f003 0303 	and.w	r3, r3, #3
 8014488:	b2db      	uxtb	r3, r3
 801448a:	2b00      	cmp	r3, #0
 801448c:	d125      	bne.n	80144da <lv_draw_mask_line+0x142>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 801448e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014496:	4413      	add	r3, r2
 8014498:	2b00      	cmp	r3, #0
 801449a:	da01      	bge.n	80144a0 <lv_draw_mask_line+0x108>
 801449c:	2301      	movs	r3, #1
 801449e:	e06a      	b.n	8014576 <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 80144a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80144a4:	425b      	negs	r3, r3
 80144a6:	617b      	str	r3, [r7, #20]
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 80144a8:	697b      	ldr	r3, [r7, #20]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	da01      	bge.n	80144b2 <lv_draw_mask_line+0x11a>
 80144ae:	2300      	movs	r3, #0
 80144b0:	e061      	b.n	8014576 <lv_draw_mask_line+0x1de>
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 80144b2:	697b      	ldr	r3, [r7, #20]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	db0e      	blt.n	80144d6 <lv_draw_mask_line+0x13e>
 80144b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80144bc:	697a      	ldr	r2, [r7, #20]
 80144be:	429a      	cmp	r2, r3
 80144c0:	da09      	bge.n	80144d6 <lv_draw_mask_line+0x13e>
 80144c2:	697b      	ldr	r3, [r7, #20]
 80144c4:	68fa      	ldr	r2, [r7, #12]
 80144c6:	18d0      	adds	r0, r2, r3
 80144c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80144cc:	697b      	ldr	r3, [r7, #20]
 80144ce:	1ad3      	subs	r3, r2, r3
 80144d0:	4619      	mov	r1, r3
 80144d2:	f010 f943 	bl	802475c <lv_memset_00>
                    return  LV_DRAW_MASK_RES_CHANGED;
 80144d6:	2302      	movs	r3, #2
 80144d8:	e04d      	b.n	8014576 <lv_draw_mask_line+0x1de>
                }
            }
            else {
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 80144da:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80144de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80144e2:	4413      	add	r3, r2
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	da01      	bge.n	80144ec <lv_draw_mask_line+0x154>
 80144e8:	2300      	movs	r3, #0
 80144ea:	e044      	b.n	8014576 <lv_draw_mask_line+0x1de>
                else {
                    int32_t k = - abs_x;
 80144ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80144f0:	425b      	negs	r3, r3
 80144f2:	61fb      	str	r3, [r7, #28]
                    if(k < 0) k = 0;
 80144f4:	69fb      	ldr	r3, [r7, #28]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	da01      	bge.n	80144fe <lv_draw_mask_line+0x166>
 80144fa:	2300      	movs	r3, #0
 80144fc:	61fb      	str	r3, [r7, #28]
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 80144fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014502:	69fa      	ldr	r2, [r7, #28]
 8014504:	429a      	cmp	r2, r3
 8014506:	db01      	blt.n	801450c <lv_draw_mask_line+0x174>
 8014508:	2300      	movs	r3, #0
 801450a:	e034      	b.n	8014576 <lv_draw_mask_line+0x1de>
                    else if(k >= 0 && k < len) lv_memset_00(&mask_buf[0], k);
 801450c:	69fb      	ldr	r3, [r7, #28]
 801450e:	2b00      	cmp	r3, #0
 8014510:	db09      	blt.n	8014526 <lv_draw_mask_line+0x18e>
 8014512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014516:	69fa      	ldr	r2, [r7, #28]
 8014518:	429a      	cmp	r2, r3
 801451a:	da04      	bge.n	8014526 <lv_draw_mask_line+0x18e>
 801451c:	69fb      	ldr	r3, [r7, #28]
 801451e:	4619      	mov	r1, r3
 8014520:	68f8      	ldr	r0, [r7, #12]
 8014522:	f010 f91b 	bl	802475c <lv_memset_00>
                    return  LV_DRAW_MASK_RES_CHANGED;
 8014526:	2302      	movs	r3, #2
 8014528:	e025      	b.n	8014576 <lv_draw_mask_line+0x1de>
            }
        }
    }

    lv_draw_mask_res_t res;
    if(p->flat) {
 801452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801452c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014530:	f003 0301 	and.w	r3, r3, #1
 8014534:	b2db      	uxtb	r3, r3
 8014536:	2b00      	cmp	r3, #0
 8014538:	d00e      	beq.n	8014558 <lv_draw_mask_line+0x1c0>
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
 801453a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801453e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014542:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8014546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014548:	9300      	str	r3, [sp, #0]
 801454a:	4603      	mov	r3, r0
 801454c:	68f8      	ldr	r0, [r7, #12]
 801454e:	f000 f816 	bl	801457e <line_mask_flat>
 8014552:	4603      	mov	r3, r0
 8014554:	76fb      	strb	r3, [r7, #27]
 8014556:	e00d      	b.n	8014574 <lv_draw_mask_line+0x1dc>
    }
    else {
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
 8014558:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801455c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014560:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8014564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014566:	9300      	str	r3, [sp, #0]
 8014568:	4603      	mov	r3, r0
 801456a:	68f8      	ldr	r0, [r7, #12]
 801456c:	f000 f991 	bl	8014892 <line_mask_steep>
 8014570:	4603      	mov	r3, r0
 8014572:	76fb      	strb	r3, [r7, #27]
    }

    return res;
 8014574:	7efb      	ldrb	r3, [r7, #27]
}
 8014576:	4618      	mov	r0, r3
 8014578:	3720      	adds	r7, #32
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}

0801457e <line_mask_flat>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_flat(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                               lv_coord_t len,
                                                               lv_draw_mask_line_param_t * p)
{
 801457e:	b590      	push	{r4, r7, lr}
 8014580:	b08d      	sub	sp, #52	; 0x34
 8014582:	af00      	add	r7, sp, #0
 8014584:	60f8      	str	r0, [r7, #12]
 8014586:	4608      	mov	r0, r1
 8014588:	4611      	mov	r1, r2
 801458a:	461a      	mov	r2, r3
 801458c:	4603      	mov	r3, r0
 801458e:	817b      	strh	r3, [r7, #10]
 8014590:	460b      	mov	r3, r1
 8014592:	813b      	strh	r3, [r7, #8]
 8014594:	4613      	mov	r3, r2
 8014596:	80fb      	strh	r3, [r7, #6]

    int32_t y_at_x;
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 8014598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801459a:	69db      	ldr	r3, [r3, #28]
 801459c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80145a0:	fb02 f303 	mul.w	r3, r2, r3
 80145a4:	129b      	asrs	r3, r3, #10
 80145a6:	61fb      	str	r3, [r7, #28]

    if(p->yx_steep > 0) {
 80145a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145aa:	69db      	ldr	r3, [r3, #28]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	dd10      	ble.n	80145d2 <line_mask_flat+0x54>
        if(y_at_x > abs_y) {
 80145b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80145b4:	69fa      	ldr	r2, [r7, #28]
 80145b6:	429a      	cmp	r2, r3
 80145b8:	dd1c      	ble.n	80145f4 <line_mask_flat+0x76>
            if(p->inv) {
 80145ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80145c0:	f003 0302 	and.w	r3, r3, #2
 80145c4:	b2db      	uxtb	r3, r3
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d001      	beq.n	80145ce <line_mask_flat+0x50>
                return LV_DRAW_MASK_RES_FULL_COVER;
 80145ca:	2301      	movs	r3, #1
 80145cc:	e15d      	b.n	801488a <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 80145ce:	2300      	movs	r3, #0
 80145d0:	e15b      	b.n	801488a <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x < abs_y) {
 80145d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80145d6:	69fa      	ldr	r2, [r7, #28]
 80145d8:	429a      	cmp	r2, r3
 80145da:	da0b      	bge.n	80145f4 <line_mask_flat+0x76>
            if(p->inv) {
 80145dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80145e2:	f003 0302 	and.w	r3, r3, #2
 80145e6:	b2db      	uxtb	r3, r3
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d001      	beq.n	80145f0 <line_mask_flat+0x72>
                return LV_DRAW_MASK_RES_FULL_COVER;
 80145ec:	2301      	movs	r3, #1
 80145ee:	e14c      	b.n	801488a <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_TRANSP;
 80145f0:	2300      	movs	r3, #0
 80145f2:	e14a      	b.n	801488a <line_mask_flat+0x30c>
        }
    }

    /*At the end of the mask if the limit line is smaller than the mask's y.
     *Then the mask is in the "good" area*/
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 80145f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145f6:	69db      	ldr	r3, [r3, #28]
 80145f8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80145fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014600:	440a      	add	r2, r1
 8014602:	fb02 f303 	mul.w	r3, r2, r3
 8014606:	129b      	asrs	r3, r3, #10
 8014608:	61fb      	str	r3, [r7, #28]
    if(p->yx_steep > 0) {
 801460a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801460c:	69db      	ldr	r3, [r3, #28]
 801460e:	2b00      	cmp	r3, #0
 8014610:	dd10      	ble.n	8014634 <line_mask_flat+0xb6>
        if(y_at_x < abs_y) {
 8014612:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014616:	69fa      	ldr	r2, [r7, #28]
 8014618:	429a      	cmp	r2, r3
 801461a:	da1c      	bge.n	8014656 <line_mask_flat+0xd8>
            if(p->inv) {
 801461c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801461e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014622:	f003 0302 	and.w	r3, r3, #2
 8014626:	b2db      	uxtb	r3, r3
 8014628:	2b00      	cmp	r3, #0
 801462a:	d001      	beq.n	8014630 <line_mask_flat+0xb2>
                return LV_DRAW_MASK_RES_TRANSP;
 801462c:	2300      	movs	r3, #0
 801462e:	e12c      	b.n	801488a <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 8014630:	2301      	movs	r3, #1
 8014632:	e12a      	b.n	801488a <line_mask_flat+0x30c>
            }
        }
    }
    else {
        if(y_at_x > abs_y) {
 8014634:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014638:	69fa      	ldr	r2, [r7, #28]
 801463a:	429a      	cmp	r2, r3
 801463c:	dd0b      	ble.n	8014656 <line_mask_flat+0xd8>
            if(p->inv) {
 801463e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014644:	f003 0302 	and.w	r3, r3, #2
 8014648:	b2db      	uxtb	r3, r3
 801464a:	2b00      	cmp	r3, #0
 801464c:	d001      	beq.n	8014652 <line_mask_flat+0xd4>
                return LV_DRAW_MASK_RES_TRANSP;
 801464e:	2300      	movs	r3, #0
 8014650:	e11b      	b.n	801488a <line_mask_flat+0x30c>
            }
            else {
                return LV_DRAW_MASK_RES_FULL_COVER;
 8014652:	2301      	movs	r3, #1
 8014654:	e119      	b.n	801488a <line_mask_flat+0x30c>
            }
        }
    }

    int32_t xe;
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 8014656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014658:	69db      	ldr	r3, [r3, #28]
 801465a:	2b00      	cmp	r3, #0
 801465c:	dd09      	ble.n	8014672 <line_mask_flat+0xf4>
 801465e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014662:	021b      	lsls	r3, r3, #8
 8014664:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014666:	6992      	ldr	r2, [r2, #24]
 8014668:	fb02 f303 	mul.w	r3, r2, r3
 801466c:	129b      	asrs	r3, r3, #10
 801466e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014670:	e009      	b.n	8014686 <line_mask_flat+0x108>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 8014672:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014676:	3301      	adds	r3, #1
 8014678:	021b      	lsls	r3, r3, #8
 801467a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801467c:	6992      	ldr	r2, [r2, #24]
 801467e:	fb02 f303 	mul.w	r3, r2, r3
 8014682:	129b      	asrs	r3, r3, #10
 8014684:	62fb      	str	r3, [r7, #44]	; 0x2c

    int32_t xei = xe >> 8;
 8014686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014688:	121b      	asrs	r3, r3, #8
 801468a:	61bb      	str	r3, [r7, #24]
    int32_t xef = xe & 0xFF;
 801468c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801468e:	b2db      	uxtb	r3, r3
 8014690:	617b      	str	r3, [r7, #20]

    int32_t px_h;
    if(xef == 0) px_h = 255;
 8014692:	697b      	ldr	r3, [r7, #20]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d102      	bne.n	801469e <line_mask_flat+0x120>
 8014698:	23ff      	movs	r3, #255	; 0xff
 801469a:	62bb      	str	r3, [r7, #40]	; 0x28
 801469c:	e00a      	b.n	80146b4 <line_mask_flat+0x136>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 801469e:	697b      	ldr	r3, [r7, #20]
 80146a0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80146a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80146a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80146a8:	fb02 f303 	mul.w	r3, r2, r3
 80146ac:	121b      	asrs	r3, r3, #8
 80146ae:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80146b2:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t k = xei - abs_x;
 80146b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80146b8:	69ba      	ldr	r2, [r7, #24]
 80146ba:	1ad3      	subs	r3, r2, r3
 80146bc:	627b      	str	r3, [r7, #36]	; 0x24
    lv_opa_t m;

    if(xef) {
 80146be:	697b      	ldr	r3, [r7, #20]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d06c      	beq.n	801479e <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 80146c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	db2c      	blt.n	8014724 <line_mask_flat+0x1a6>
 80146ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80146ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146d0:	429a      	cmp	r2, r3
 80146d2:	da27      	bge.n	8014724 <line_mask_flat+0x1a6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 80146d4:	697b      	ldr	r3, [r7, #20]
 80146d6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80146da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146dc:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80146e0:	fb02 f303 	mul.w	r3, r2, r3
 80146e4:	125b      	asrs	r3, r3, #9
 80146e6:	b2db      	uxtb	r3, r3
 80146e8:	43db      	mvns	r3, r3
 80146ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 80146ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80146f4:	f003 0302 	and.w	r3, r3, #2
 80146f8:	b2db      	uxtb	r3, r3
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d004      	beq.n	8014708 <line_mask_flat+0x18a>
 80146fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014702:	43db      	mvns	r3, r3
 8014704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8014708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801470a:	68fa      	ldr	r2, [r7, #12]
 801470c:	4413      	add	r3, r2
 801470e:	7818      	ldrb	r0, [r3, #0]
 8014710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014712:	68fa      	ldr	r2, [r7, #12]
 8014714:	18d4      	adds	r4, r2, r3
 8014716:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801471a:	4619      	mov	r1, r3
 801471c:	f001 fc9a 	bl	8016054 <mask_mix>
 8014720:	4603      	mov	r3, r0
 8014722:	7023      	strb	r3, [r4, #0]
        }
        k++;
 8014724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014726:	3301      	adds	r3, #1
 8014728:	627b      	str	r3, [r7, #36]	; 0x24
    }

    while(px_h > p->spx) {
 801472a:	e038      	b.n	801479e <line_mask_flat+0x220>
        if(k >= 0 && k < len) {
 801472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801472e:	2b00      	cmp	r3, #0
 8014730:	db28      	blt.n	8014784 <line_mask_flat+0x206>
 8014732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014738:	429a      	cmp	r2, r3
 801473a:	da23      	bge.n	8014784 <line_mask_flat+0x206>
            m = px_h - (p->spx >> 1);
 801473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801473e:	b2da      	uxtb	r2, r3
 8014740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014744:	105b      	asrs	r3, r3, #1
 8014746:	b2db      	uxtb	r3, r3
 8014748:	1ad3      	subs	r3, r2, r3
 801474a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if(p->inv) m = 255 - m;
 801474e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014754:	f003 0302 	and.w	r3, r3, #2
 8014758:	b2db      	uxtb	r3, r3
 801475a:	2b00      	cmp	r3, #0
 801475c:	d004      	beq.n	8014768 <line_mask_flat+0x1ea>
 801475e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014762:	43db      	mvns	r3, r3
 8014764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8014768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801476a:	68fa      	ldr	r2, [r7, #12]
 801476c:	4413      	add	r3, r2
 801476e:	7818      	ldrb	r0, [r3, #0]
 8014770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014772:	68fa      	ldr	r2, [r7, #12]
 8014774:	18d4      	adds	r4, r2, r3
 8014776:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801477a:	4619      	mov	r1, r3
 801477c:	f001 fc6a 	bl	8016054 <mask_mix>
 8014780:	4603      	mov	r3, r0
 8014782:	7023      	strb	r3, [r4, #0]
        }
        px_h -= p->spx;
 8014784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801478a:	1ad3      	subs	r3, r2, r3
 801478c:	62bb      	str	r3, [r7, #40]	; 0x28
        k++;
 801478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014790:	3301      	adds	r3, #1
 8014792:	627b      	str	r3, [r7, #36]	; 0x24
        if(k >= len) break;
 8014794:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801479a:	429a      	cmp	r2, r3
 801479c:	da05      	bge.n	80147aa <line_mask_flat+0x22c>
    while(px_h > p->spx) {
 801479e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147a4:	429a      	cmp	r2, r3
 80147a6:	dcc1      	bgt.n	801472c <line_mask_flat+0x1ae>
 80147a8:	e000      	b.n	80147ac <line_mask_flat+0x22e>
        if(k >= len) break;
 80147aa:	bf00      	nop
    }

    if(k < len && k >= 0) {
 80147ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80147b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147b2:	429a      	cmp	r2, r3
 80147b4:	da34      	bge.n	8014820 <line_mask_flat+0x2a2>
 80147b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	db31      	blt.n	8014820 <line_mask_flat+0x2a2>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 80147bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147be:	699b      	ldr	r3, [r3, #24]
 80147c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147c2:	fb02 f303 	mul.w	r3, r2, r3
 80147c6:	129b      	asrs	r3, r3, #10
 80147c8:	613b      	str	r3, [r7, #16]
        m = (x_inters * px_h) >> 9;
 80147ca:	693b      	ldr	r3, [r7, #16]
 80147cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147ce:	fb02 f303 	mul.w	r3, r2, r3
 80147d2:	125b      	asrs	r3, r3, #9
 80147d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->yx_steep < 0) m = 255 - m;
 80147d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147da:	69db      	ldr	r3, [r3, #28]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	da04      	bge.n	80147ea <line_mask_flat+0x26c>
 80147e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147e4:	43db      	mvns	r3, r3
 80147e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(p->inv) m = 255 - m;
 80147ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80147f0:	f003 0302 	and.w	r3, r3, #2
 80147f4:	b2db      	uxtb	r3, r3
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d004      	beq.n	8014804 <line_mask_flat+0x286>
 80147fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147fe:	43db      	mvns	r3, r3
 8014800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        mask_buf[k] = mask_mix(mask_buf[k], m);
 8014804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014806:	68fa      	ldr	r2, [r7, #12]
 8014808:	4413      	add	r3, r2
 801480a:	7818      	ldrb	r0, [r3, #0]
 801480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801480e:	68fa      	ldr	r2, [r7, #12]
 8014810:	18d4      	adds	r4, r2, r3
 8014812:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014816:	4619      	mov	r1, r3
 8014818:	f001 fc1c 	bl	8016054 <mask_mix>
 801481c:	4603      	mov	r3, r0
 801481e:	7023      	strb	r3, [r4, #0]
    }

    if(p->inv) {
 8014820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014822:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014826:	f003 0302 	and.w	r3, r3, #2
 801482a:	b2db      	uxtb	r3, r3
 801482c:	2b00      	cmp	r3, #0
 801482e:	d014      	beq.n	801485a <line_mask_flat+0x2dc>
        k = xei - abs_x;
 8014830:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014834:	69ba      	ldr	r2, [r7, #24]
 8014836:	1ad3      	subs	r3, r2, r3
 8014838:	627b      	str	r3, [r7, #36]	; 0x24
        if(k > len) {
 801483a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801483e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014840:	429a      	cmp	r2, r3
 8014842:	dd01      	ble.n	8014848 <line_mask_flat+0x2ca>
            return LV_DRAW_MASK_RES_TRANSP;
 8014844:	2300      	movs	r3, #0
 8014846:	e020      	b.n	801488a <line_mask_flat+0x30c>
        }
        if(k >= 0) {
 8014848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801484a:	2b00      	cmp	r3, #0
 801484c:	db1c      	blt.n	8014888 <line_mask_flat+0x30a>
            lv_memset_00(&mask_buf[0], k);
 801484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014850:	4619      	mov	r1, r3
 8014852:	68f8      	ldr	r0, [r7, #12]
 8014854:	f00f ff82 	bl	802475c <lv_memset_00>
 8014858:	e016      	b.n	8014888 <line_mask_flat+0x30a>
        }
    }
    else {
        k++;
 801485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801485c:	3301      	adds	r3, #1
 801485e:	627b      	str	r3, [r7, #36]	; 0x24
        if(k < 0) {
 8014860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014862:	2b00      	cmp	r3, #0
 8014864:	da01      	bge.n	801486a <line_mask_flat+0x2ec>
            return LV_DRAW_MASK_RES_TRANSP;
 8014866:	2300      	movs	r3, #0
 8014868:	e00f      	b.n	801488a <line_mask_flat+0x30c>
        }
        if(k <= len) {
 801486a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801486e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014870:	429a      	cmp	r2, r3
 8014872:	dc09      	bgt.n	8014888 <line_mask_flat+0x30a>
            lv_memset_00(&mask_buf[k], len - k);
 8014874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014876:	68fa      	ldr	r2, [r7, #12]
 8014878:	18d0      	adds	r0, r2, r3
 801487a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014880:	1ad3      	subs	r3, r2, r3
 8014882:	4619      	mov	r1, r3
 8014884:	f00f ff6a 	bl	802475c <lv_memset_00>
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8014888:	2302      	movs	r3, #2
}
 801488a:	4618      	mov	r0, r3
 801488c:	3734      	adds	r7, #52	; 0x34
 801488e:	46bd      	mov	sp, r7
 8014890:	bd90      	pop	{r4, r7, pc}

08014892 <line_mask_steep>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_steep(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                                lv_coord_t len,
                                                                lv_draw_mask_line_param_t * p)
{
 8014892:	b590      	push	{r4, r7, lr}
 8014894:	b091      	sub	sp, #68	; 0x44
 8014896:	af00      	add	r7, sp, #0
 8014898:	60f8      	str	r0, [r7, #12]
 801489a:	4608      	mov	r0, r1
 801489c:	4611      	mov	r1, r2
 801489e:	461a      	mov	r2, r3
 80148a0:	4603      	mov	r3, r0
 80148a2:	817b      	strh	r3, [r7, #10]
 80148a4:	460b      	mov	r3, r1
 80148a6:	813b      	strh	r3, [r7, #8]
 80148a8:	4613      	mov	r3, r2
 80148aa:	80fb      	strh	r3, [r7, #6]
    int32_t k;
    int32_t x_at_y;
    /*At the beginning of the mask if the limit line is greater than the mask's y.
     *Then the mask is in the "wrong" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 80148ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148ae:	699b      	ldr	r3, [r3, #24]
 80148b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80148b4:	fb02 f303 	mul.w	r3, r2, r3
 80148b8:	129b      	asrs	r3, r3, #10
 80148ba:	63bb      	str	r3, [r7, #56]	; 0x38
    if(p->xy_steep > 0) x_at_y++;
 80148bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148be:	699b      	ldr	r3, [r3, #24]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	dd02      	ble.n	80148ca <line_mask_steep+0x38>
 80148c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148c6:	3301      	adds	r3, #1
 80148c8:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y < abs_x) {
 80148ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80148ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80148d0:	429a      	cmp	r2, r3
 80148d2:	da0b      	bge.n	80148ec <line_mask_steep+0x5a>
        if(p->inv) {
 80148d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148da:	f003 0302 	and.w	r3, r3, #2
 80148de:	b2db      	uxtb	r3, r3
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d001      	beq.n	80148e8 <line_mask_steep+0x56>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80148e4:	2301      	movs	r3, #1
 80148e6:	e213      	b.n	8014d10 <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_TRANSP;
 80148e8:	2300      	movs	r3, #0
 80148ea:	e211      	b.n	8014d10 <line_mask_steep+0x47e>
        }
    }

    /*At the end of the mask if the limit line is smaller than the mask's y.
     *Then the mask is in the "good" area*/
    x_at_y = (int32_t)((int32_t)p->xy_steep * (abs_y)) >> 10;
 80148ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148ee:	699b      	ldr	r3, [r3, #24]
 80148f0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80148f4:	fb02 f303 	mul.w	r3, r2, r3
 80148f8:	129b      	asrs	r3, r3, #10
 80148fa:	63bb      	str	r3, [r7, #56]	; 0x38
    if(x_at_y > abs_x + len) {
 80148fc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8014900:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014904:	4413      	add	r3, r2
 8014906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014908:	429a      	cmp	r2, r3
 801490a:	dd0b      	ble.n	8014924 <line_mask_steep+0x92>
        if(p->inv) {
 801490c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801490e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014912:	f003 0302 	and.w	r3, r3, #2
 8014916:	b2db      	uxtb	r3, r3
 8014918:	2b00      	cmp	r3, #0
 801491a:	d001      	beq.n	8014920 <line_mask_steep+0x8e>
            return LV_DRAW_MASK_RES_TRANSP;
 801491c:	2300      	movs	r3, #0
 801491e:	e1f7      	b.n	8014d10 <line_mask_steep+0x47e>
        }
        else {
            return LV_DRAW_MASK_RES_FULL_COVER;
 8014920:	2301      	movs	r3, #1
 8014922:	e1f5      	b.n	8014d10 <line_mask_steep+0x47e>
        }
    }

    /*X start*/
    int32_t xs = ((abs_y * 256) * p->xy_steep) >> 10;
 8014924:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014928:	021b      	lsls	r3, r3, #8
 801492a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801492c:	6992      	ldr	r2, [r2, #24]
 801492e:	fb02 f303 	mul.w	r3, r2, r3
 8014932:	129b      	asrs	r3, r3, #10
 8014934:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t xsi = xs >> 8;
 8014936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014938:	121b      	asrs	r3, r3, #8
 801493a:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t xsf = xs & 0xFF;
 801493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493e:	b2db      	uxtb	r3, r3
 8014940:	633b      	str	r3, [r7, #48]	; 0x30

    /*X end*/
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 8014942:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014946:	3301      	adds	r3, #1
 8014948:	021b      	lsls	r3, r3, #8
 801494a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801494c:	6992      	ldr	r2, [r2, #24]
 801494e:	fb02 f303 	mul.w	r3, r2, r3
 8014952:	129b      	asrs	r3, r3, #10
 8014954:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t xei = xe >> 8;
 8014956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014958:	121b      	asrs	r3, r3, #8
 801495a:	623b      	str	r3, [r7, #32]
    int32_t xef = xe & 0xFF;
 801495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801495e:	b2db      	uxtb	r3, r3
 8014960:	61fb      	str	r3, [r7, #28]

    lv_opa_t m;

    k = xsi - abs_x;
 8014962:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014968:	1ad3      	subs	r3, r2, r3
 801496a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 801496c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801496e:	6a3b      	ldr	r3, [r7, #32]
 8014970:	429a      	cmp	r2, r3
 8014972:	d00d      	beq.n	8014990 <line_mask_steep+0xfe>
 8014974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014976:	699b      	ldr	r3, [r3, #24]
 8014978:	2b00      	cmp	r3, #0
 801497a:	da09      	bge.n	8014990 <line_mask_steep+0xfe>
 801497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801497e:	2b00      	cmp	r3, #0
 8014980:	d106      	bne.n	8014990 <line_mask_steep+0xfe>
        xsf = 0xFF;
 8014982:	23ff      	movs	r3, #255	; 0xff
 8014984:	633b      	str	r3, [r7, #48]	; 0x30
        xsi = xei;
 8014986:	6a3b      	ldr	r3, [r7, #32]
 8014988:	637b      	str	r3, [r7, #52]	; 0x34
        k--;
 801498a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801498c:	3b01      	subs	r3, #1
 801498e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    if(xsi == xei) {
 8014990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014992:	6a3b      	ldr	r3, [r7, #32]
 8014994:	429a      	cmp	r2, r3
 8014996:	d165      	bne.n	8014a64 <line_mask_steep+0x1d2>
        if(k >= 0 && k < len) {
 8014998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801499a:	2b00      	cmp	r3, #0
 801499c:	db25      	blt.n	80149ea <line_mask_steep+0x158>
 801499e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80149a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80149a4:	429a      	cmp	r2, r3
 80149a6:	da20      	bge.n	80149ea <line_mask_steep+0x158>
            m = (xsf + xef) >> 1;
 80149a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149aa:	69fb      	ldr	r3, [r7, #28]
 80149ac:	4413      	add	r3, r2
 80149ae:	105b      	asrs	r3, r3, #1
 80149b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            if(p->inv) m = 255 - m;
 80149b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149ba:	f003 0302 	and.w	r3, r3, #2
 80149be:	b2db      	uxtb	r3, r3
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d004      	beq.n	80149ce <line_mask_steep+0x13c>
 80149c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149c8:	43db      	mvns	r3, r3
 80149ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            mask_buf[k] = mask_mix(mask_buf[k], m);
 80149ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149d0:	68fa      	ldr	r2, [r7, #12]
 80149d2:	4413      	add	r3, r2
 80149d4:	7818      	ldrb	r0, [r3, #0]
 80149d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149d8:	68fa      	ldr	r2, [r7, #12]
 80149da:	18d4      	adds	r4, r2, r3
 80149dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149e0:	4619      	mov	r1, r3
 80149e2:	f001 fb37 	bl	8016054 <mask_mix>
 80149e6:	4603      	mov	r3, r0
 80149e8:	7023      	strb	r3, [r4, #0]
        }
        k++;
 80149ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80149ec:	3301      	adds	r3, #1
 80149ee:	63fb      	str	r3, [r7, #60]	; 0x3c

        if(p->inv) {
 80149f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149f6:	f003 0302 	and.w	r3, r3, #2
 80149fa:	b2db      	uxtb	r3, r3
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d015      	beq.n	8014a2c <line_mask_steep+0x19a>
            k = xsi - abs_x;
 8014a00:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a06:	1ad3      	subs	r3, r2, r3
 8014a08:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k >= len) {
 8014a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014a0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014a10:	429a      	cmp	r2, r3
 8014a12:	db01      	blt.n	8014a18 <line_mask_steep+0x186>
                return LV_DRAW_MASK_RES_TRANSP;
 8014a14:	2300      	movs	r3, #0
 8014a16:	e17b      	b.n	8014d10 <line_mask_steep+0x47e>
            }
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 8014a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	f2c0 8177 	blt.w	8014d0e <line_mask_steep+0x47c>
 8014a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a22:	4619      	mov	r1, r3
 8014a24:	68f8      	ldr	r0, [r7, #12]
 8014a26:	f00f fe99 	bl	802475c <lv_memset_00>
 8014a2a:	e170      	b.n	8014d0e <line_mask_steep+0x47c>

        }
        else {
            if(k > len) k = len;
 8014a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014a30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014a32:	429a      	cmp	r2, r3
 8014a34:	dd02      	ble.n	8014a3c <line_mask_steep+0x1aa>
 8014a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 8014a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d101      	bne.n	8014a46 <line_mask_steep+0x1b4>
 8014a42:	2300      	movs	r3, #0
 8014a44:	e164      	b.n	8014d10 <line_mask_steep+0x47e>
            else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 8014a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	f340 8160 	ble.w	8014d0e <line_mask_steep+0x47c>
 8014a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a50:	68fa      	ldr	r2, [r7, #12]
 8014a52:	18d0      	adds	r0, r2, r3
 8014a54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a5a:	1ad3      	subs	r3, r2, r3
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	f00f fe7d 	bl	802475c <lv_memset_00>
 8014a62:	e154      	b.n	8014d0e <line_mask_steep+0x47c>
        }

    }
    else {
        int32_t y_inters;
        if(p->xy_steep < 0) {
 8014a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a66:	699b      	ldr	r3, [r3, #24]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	f280 80a7 	bge.w	8014bbc <line_mask_steep+0x32a>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 8014a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a70:	69db      	ldr	r3, [r3, #28]
 8014a72:	425b      	negs	r3, r3
 8014a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a76:	fb02 f303 	mul.w	r3, r2, r3
 8014a7a:	129b      	asrs	r3, r3, #10
 8014a7c:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 8014a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	db26      	blt.n	8014ad2 <line_mask_steep+0x240>
 8014a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014a88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	da21      	bge.n	8014ad2 <line_mask_steep+0x240>
                m = (y_inters * xsf) >> 9;
 8014a8e:	69bb      	ldr	r3, [r7, #24]
 8014a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a92:	fb02 f303 	mul.w	r3, r2, r3
 8014a96:	125b      	asrs	r3, r3, #9
 8014a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8014a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014aa2:	f003 0302 	and.w	r3, r3, #2
 8014aa6:	b2db      	uxtb	r3, r3
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d004      	beq.n	8014ab6 <line_mask_steep+0x224>
 8014aac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ab0:	43db      	mvns	r3, r3
 8014ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8014ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ab8:	68fa      	ldr	r2, [r7, #12]
 8014aba:	4413      	add	r3, r2
 8014abc:	7818      	ldrb	r0, [r3, #0]
 8014abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ac0:	68fa      	ldr	r2, [r7, #12]
 8014ac2:	18d4      	adds	r4, r2, r3
 8014ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ac8:	4619      	mov	r1, r3
 8014aca:	f001 fac3 	bl	8016054 <mask_mix>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	7023      	strb	r3, [r4, #0]
            }
            k--;
 8014ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ad4:	3b01      	subs	r3, #1
 8014ad6:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 8014ad8:	69bb      	ldr	r3, [r7, #24]
 8014ada:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8014ade:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014ae0:	6992      	ldr	r2, [r2, #24]
 8014ae2:	4252      	negs	r2, r2
 8014ae4:	fb02 f303 	mul.w	r3, r2, r3
 8014ae8:	129b      	asrs	r3, r3, #10
 8014aea:	613b      	str	r3, [r7, #16]

            if(k >= 0 && k < len) {
 8014aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	db2a      	blt.n	8014b48 <line_mask_steep+0x2b6>
 8014af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014af6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014af8:	429a      	cmp	r2, r3
 8014afa:	da25      	bge.n	8014b48 <line_mask_steep+0x2b6>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 8014afc:	69bb      	ldr	r3, [r7, #24]
 8014afe:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8014b02:	693a      	ldr	r2, [r7, #16]
 8014b04:	fb02 f303 	mul.w	r3, r2, r3
 8014b08:	125b      	asrs	r3, r3, #9
 8014b0a:	b2db      	uxtb	r3, r3
 8014b0c:	43db      	mvns	r3, r3
 8014b0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8014b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b18:	f003 0302 	and.w	r3, r3, #2
 8014b1c:	b2db      	uxtb	r3, r3
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d004      	beq.n	8014b2c <line_mask_steep+0x29a>
 8014b22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b26:	43db      	mvns	r3, r3
 8014b28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8014b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b2e:	68fa      	ldr	r2, [r7, #12]
 8014b30:	4413      	add	r3, r2
 8014b32:	7818      	ldrb	r0, [r3, #0]
 8014b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b36:	68fa      	ldr	r2, [r7, #12]
 8014b38:	18d4      	adds	r4, r2, r3
 8014b3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b3e:	4619      	mov	r1, r3
 8014b40:	f001 fa88 	bl	8016054 <mask_mix>
 8014b44:	4603      	mov	r3, r0
 8014b46:	7023      	strb	r3, [r4, #0]
            }

            k += 2;
 8014b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b4a:	3302      	adds	r3, #2
 8014b4c:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 8014b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014b54:	f003 0302 	and.w	r3, r3, #2
 8014b58:	b2db      	uxtb	r3, r3
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d018      	beq.n	8014b90 <line_mask_steep+0x2fe>
                k = xsi - abs_x - 1;
 8014b5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b64:	1ad3      	subs	r3, r2, r3
 8014b66:	3b01      	subs	r3, #1
 8014b68:	63fb      	str	r3, [r7, #60]	; 0x3c

                if(k > len) k = len;
 8014b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014b6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014b70:	429a      	cmp	r2, r3
 8014b72:	dd03      	ble.n	8014b7c <line_mask_steep+0x2ea>
 8014b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014b7a:	e0c8      	b.n	8014d0e <line_mask_steep+0x47c>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 8014b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	f340 80c5 	ble.w	8014d0e <line_mask_steep+0x47c>
 8014b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b86:	4619      	mov	r1, r3
 8014b88:	68f8      	ldr	r0, [r7, #12]
 8014b8a:	f00f fde7 	bl	802475c <lv_memset_00>
 8014b8e:	e0be      	b.n	8014d0e <line_mask_steep+0x47c>

            }
            else {
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 8014b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014b94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014b96:	429a      	cmp	r2, r3
 8014b98:	dd01      	ble.n	8014b9e <line_mask_steep+0x30c>
 8014b9a:	2301      	movs	r3, #1
 8014b9c:	e0b8      	b.n	8014d10 <line_mask_steep+0x47e>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 8014b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	f2c0 80b4 	blt.w	8014d0e <line_mask_steep+0x47c>
 8014ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ba8:	68fa      	ldr	r2, [r7, #12]
 8014baa:	18d0      	adds	r0, r2, r3
 8014bac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bb2:	1ad3      	subs	r3, r2, r3
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	f00f fdd1 	bl	802475c <lv_memset_00>
 8014bba:	e0a8      	b.n	8014d0e <line_mask_steep+0x47c>
            }

        }
        else {
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 8014bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bbe:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8014bc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014bc4:	69d2      	ldr	r2, [r2, #28]
 8014bc6:	fb02 f303 	mul.w	r3, r2, r3
 8014bca:	129b      	asrs	r3, r3, #10
 8014bcc:	61bb      	str	r3, [r7, #24]
            if(k >= 0 && k < len) {
 8014bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	db2a      	blt.n	8014c2a <line_mask_steep+0x398>
 8014bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014bd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014bda:	429a      	cmp	r2, r3
 8014bdc:	da25      	bge.n	8014c2a <line_mask_steep+0x398>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 8014bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014be0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8014be4:	69ba      	ldr	r2, [r7, #24]
 8014be6:	fb02 f303 	mul.w	r3, r2, r3
 8014bea:	125b      	asrs	r3, r3, #9
 8014bec:	b2db      	uxtb	r3, r3
 8014bee:	43db      	mvns	r3, r3
 8014bf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8014bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014bfa:	f003 0302 	and.w	r3, r3, #2
 8014bfe:	b2db      	uxtb	r3, r3
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d004      	beq.n	8014c0e <line_mask_steep+0x37c>
 8014c04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c08:	43db      	mvns	r3, r3
 8014c0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8014c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c10:	68fa      	ldr	r2, [r7, #12]
 8014c12:	4413      	add	r3, r2
 8014c14:	7818      	ldrb	r0, [r3, #0]
 8014c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c18:	68fa      	ldr	r2, [r7, #12]
 8014c1a:	18d4      	adds	r4, r2, r3
 8014c1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c20:	4619      	mov	r1, r3
 8014c22:	f001 fa17 	bl	8016054 <mask_mix>
 8014c26:	4603      	mov	r3, r0
 8014c28:	7023      	strb	r3, [r4, #0]
            }

            k++;
 8014c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c2c:	3301      	adds	r3, #1
 8014c2e:	63fb      	str	r3, [r7, #60]	; 0x3c

            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 8014c30:	69bb      	ldr	r3, [r7, #24]
 8014c32:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8014c36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014c38:	6992      	ldr	r2, [r2, #24]
 8014c3a:	fb02 f303 	mul.w	r3, r2, r3
 8014c3e:	129b      	asrs	r3, r3, #10
 8014c40:	617b      	str	r3, [r7, #20]
            if(k >= 0 && k < len) {
 8014c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	db28      	blt.n	8014c9a <line_mask_steep+0x408>
 8014c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014c4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014c4e:	429a      	cmp	r2, r3
 8014c50:	da23      	bge.n	8014c9a <line_mask_steep+0x408>
                m = ((255 - y_inters) * x_inters) >> 9;
 8014c52:	69bb      	ldr	r3, [r7, #24]
 8014c54:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8014c58:	697a      	ldr	r2, [r7, #20]
 8014c5a:	fb02 f303 	mul.w	r3, r2, r3
 8014c5e:	125b      	asrs	r3, r3, #9
 8014c60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if(p->inv) m = 255 - m;
 8014c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c6a:	f003 0302 	and.w	r3, r3, #2
 8014c6e:	b2db      	uxtb	r3, r3
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d004      	beq.n	8014c7e <line_mask_steep+0x3ec>
 8014c74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c78:	43db      	mvns	r3, r3
 8014c7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8014c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c80:	68fa      	ldr	r2, [r7, #12]
 8014c82:	4413      	add	r3, r2
 8014c84:	7818      	ldrb	r0, [r3, #0]
 8014c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c88:	68fa      	ldr	r2, [r7, #12]
 8014c8a:	18d4      	adds	r4, r2, r3
 8014c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c90:	4619      	mov	r1, r3
 8014c92:	f001 f9df 	bl	8016054 <mask_mix>
 8014c96:	4603      	mov	r3, r0
 8014c98:	7023      	strb	r3, [r4, #0]
            }
            k++;
 8014c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c9c:	3301      	adds	r3, #1
 8014c9e:	63fb      	str	r3, [r7, #60]	; 0x3c

            if(p->inv) {
 8014ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ca6:	f003 0302 	and.w	r3, r3, #2
 8014caa:	b2db      	uxtb	r3, r3
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d014      	beq.n	8014cda <line_mask_steep+0x448>
                k = xsi - abs_x;
 8014cb0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014cb6:	1ad3      	subs	r3, r2, r3
 8014cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 8014cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014cc0:	429a      	cmp	r2, r3
 8014cc2:	dd01      	ble.n	8014cc8 <line_mask_steep+0x436>
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	e023      	b.n	8014d10 <line_mask_steep+0x47e>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 8014cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	db1f      	blt.n	8014d0e <line_mask_steep+0x47c>
 8014cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cd0:	4619      	mov	r1, r3
 8014cd2:	68f8      	ldr	r0, [r7, #12]
 8014cd4:	f00f fd42 	bl	802475c <lv_memset_00>
 8014cd8:	e019      	b.n	8014d0e <line_mask_steep+0x47c>

            }
            else {
                if(k > len) k = len;
 8014cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014cde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014ce0:	429a      	cmp	r2, r3
 8014ce2:	dd02      	ble.n	8014cea <line_mask_steep+0x458>
 8014ce4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 8014cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d101      	bne.n	8014cf4 <line_mask_steep+0x462>
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	e00d      	b.n	8014d10 <line_mask_steep+0x47e>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 8014cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	dd09      	ble.n	8014d0e <line_mask_steep+0x47c>
 8014cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cfc:	68fa      	ldr	r2, [r7, #12]
 8014cfe:	18d0      	adds	r0, r2, r3
 8014d00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d06:	1ad3      	subs	r3, r2, r3
 8014d08:	4619      	mov	r1, r3
 8014d0a:	f00f fd27 	bl	802475c <lv_memset_00>
            }
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8014d0e:	2302      	movs	r3, #2
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	3744      	adds	r7, #68	; 0x44
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd90      	pop	{r4, r7, pc}

08014d18 <lv_draw_mask_angle>:

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_angle(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                   lv_coord_t abs_y, lv_coord_t len,
                                                                   lv_draw_mask_angle_param_t * p)
{
 8014d18:	b590      	push	{r4, r7, lr}
 8014d1a:	b097      	sub	sp, #92	; 0x5c
 8014d1c:	af02      	add	r7, sp, #8
 8014d1e:	60f8      	str	r0, [r7, #12]
 8014d20:	4608      	mov	r0, r1
 8014d22:	4611      	mov	r1, r2
 8014d24:	461a      	mov	r2, r3
 8014d26:	4603      	mov	r3, r0
 8014d28:	817b      	strh	r3, [r7, #10]
 8014d2a:	460b      	mov	r3, r1
 8014d2c:	813b      	strh	r3, [r7, #8]
 8014d2e:	4613      	mov	r3, r2
 8014d30:	80fb      	strh	r3, [r7, #6]
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 8014d32:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8014d36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014d38:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8014d3c:	1a9b      	subs	r3, r3, r2
 8014d3e:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 8014d40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014d44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014d46:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8014d4a:	1a9b      	subs	r3, r3, r2
 8014d4c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 8014d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014d50:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014d54:	2bb3      	cmp	r3, #179	; 0xb3
 8014d56:	f300 810c 	bgt.w	8014f72 <lv_draw_mask_angle+0x25a>
 8014d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014d5c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014d60:	2bb3      	cmp	r3, #179	; 0xb3
 8014d62:	f300 8106 	bgt.w	8014f72 <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8014d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014d68:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	f000 8100 	beq.w	8014f72 <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8014d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014d74:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	f000 80fa 	beq.w	8014f72 <lv_draw_mask_angle+0x25a>
       p->cfg.start_angle > p->cfg.end_angle) {
 8014d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014d80:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8014d84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014d86:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	f340 80f1 	ble.w	8014f72 <lv_draw_mask_angle+0x25a>

        if(abs_y < p->cfg.vertex_p.y) {
 8014d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014d92:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8014d96:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014d9a:	429a      	cmp	r2, r3
 8014d9c:	da01      	bge.n	8014da2 <lv_draw_mask_angle+0x8a>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8014d9e:	2301      	movs	r3, #1
 8014da0:	e2b6      	b.n	8015310 <lv_draw_mask_angle+0x5f8>
        }

        /*Start angle mask can work only from the end of end angle mask*/
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 8014da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014da8:	fb02 f303 	mul.w	r3, r2, r3
 8014dac:	129b      	asrs	r3, r3, #10
 8014dae:	62bb      	str	r3, [r7, #40]	; 0x28
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 8014db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014db2:	3301      	adds	r3, #1
 8014db4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014db6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8014db8:	fb02 f303 	mul.w	r3, r2, r3
 8014dbc:	129b      	asrs	r3, r3, #10
 8014dbe:	64fb      	str	r3, [r7, #76]	; 0x4c

        /*Do not let the line end cross the vertex else it will affect the opposite part*/
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8014dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014dc2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014dc6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014dca:	dd0b      	ble.n	8014de4 <lv_draw_mask_angle+0xcc>
 8014dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014dce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014dd2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8014dd6:	da05      	bge.n	8014de4 <lv_draw_mask_angle+0xcc>
 8014dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	da02      	bge.n	8014de4 <lv_draw_mask_angle+0xcc>
 8014dde:	2300      	movs	r3, #0
 8014de0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014de2:	e01f      	b.n	8014e24 <lv_draw_mask_angle+0x10c>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8014de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014de6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	dd0a      	ble.n	8014e04 <lv_draw_mask_angle+0xec>
 8014dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014df0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014df4:	2b5a      	cmp	r3, #90	; 0x5a
 8014df6:	dc05      	bgt.n	8014e04 <lv_draw_mask_angle+0xec>
 8014df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	da02      	bge.n	8014e04 <lv_draw_mask_angle+0xec>
 8014dfe:	2300      	movs	r3, #0
 8014e00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e02:	e00f      	b.n	8014e24 <lv_draw_mask_angle+0x10c>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8014e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e06:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014e0a:	2b5a      	cmp	r3, #90	; 0x5a
 8014e0c:	dd0a      	ble.n	8014e24 <lv_draw_mask_angle+0x10c>
 8014e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e10:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014e14:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014e18:	da04      	bge.n	8014e24 <lv_draw_mask_angle+0x10c>
 8014e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	dd01      	ble.n	8014e24 <lv_draw_mask_angle+0x10c>
 8014e20:	2300      	movs	r3, #0
 8014e22:	64fb      	str	r3, [r7, #76]	; 0x4c

        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8014e24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e26:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014e2a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014e2e:	dd0b      	ble.n	8014e48 <lv_draw_mask_angle+0x130>
 8014e30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e32:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014e36:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8014e3a:	da05      	bge.n	8014e48 <lv_draw_mask_angle+0x130>
 8014e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	da02      	bge.n	8014e48 <lv_draw_mask_angle+0x130>
 8014e42:	2300      	movs	r3, #0
 8014e44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e46:	e01f      	b.n	8014e88 <lv_draw_mask_angle+0x170>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8014e48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e4a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	dd0a      	ble.n	8014e68 <lv_draw_mask_angle+0x150>
 8014e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e54:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014e58:	2b5a      	cmp	r3, #90	; 0x5a
 8014e5a:	dc05      	bgt.n	8014e68 <lv_draw_mask_angle+0x150>
 8014e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	da02      	bge.n	8014e68 <lv_draw_mask_angle+0x150>
 8014e62:	2300      	movs	r3, #0
 8014e64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e66:	e00f      	b.n	8014e88 <lv_draw_mask_angle+0x170>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8014e68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e6a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014e6e:	2b5a      	cmp	r3, #90	; 0x5a
 8014e70:	dd0a      	ble.n	8014e88 <lv_draw_mask_angle+0x170>
 8014e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014e74:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014e78:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014e7c:	da04      	bge.n	8014e88 <lv_draw_mask_angle+0x170>
 8014e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	dd01      	ble.n	8014e88 <lv_draw_mask_angle+0x170>
 8014e84:	2300      	movs	r3, #0
 8014e86:	64fb      	str	r3, [r7, #76]	; 0x4c

        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 8014e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e8c:	1ad3      	subs	r3, r2, r3
 8014e8e:	105b      	asrs	r3, r3, #1
 8014e90:	627b      	str	r3, [r7, #36]	; 0x24

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8014e92:	2301      	movs	r3, #1
 8014e94:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8014e98:	2301      	movs	r3, #1
 8014e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        int32_t tmp = start_angle_last + dist - rel_x;
 8014e9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea2:	441a      	add	r2, r3
 8014ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ea6:	1ad3      	subs	r3, r2, r3
 8014ea8:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp > len) tmp = len;
 8014eaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014eae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014eb0:	429a      	cmp	r2, r3
 8014eb2:	dd02      	ble.n	8014eba <lv_draw_mask_angle+0x1a2>
 8014eb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014eb8:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp > 0) {
 8014eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	dd18      	ble.n	8014ef2 <lv_draw_mask_angle+0x1da>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 8014ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ec2:	b218      	sxth	r0, r3
 8014ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014ec6:	3310      	adds	r3, #16
 8014ec8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014ecc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8014ed0:	9300      	str	r3, [sp, #0]
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	68f8      	ldr	r0, [r7, #12]
 8014ed6:	f7ff fa5f 	bl	8014398 <lv_draw_mask_line>
 8014eda:	4603      	mov	r3, r0
 8014edc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 8014ee0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d104      	bne.n	8014ef2 <lv_draw_mask_angle+0x1da>
                lv_memset_00(&mask_buf[0], tmp);
 8014ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014eea:	4619      	mov	r1, r3
 8014eec:	68f8      	ldr	r0, [r7, #12]
 8014eee:	f00f fc35 	bl	802475c <lv_memset_00>
            }
        }

        if(tmp > len) tmp = len;
 8014ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014ef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014ef8:	429a      	cmp	r2, r3
 8014efa:	dd02      	ble.n	8014f02 <lv_draw_mask_angle+0x1ea>
 8014efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014f00:	647b      	str	r3, [r7, #68]	; 0x44
        if(tmp < 0) tmp = 0;
 8014f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	da01      	bge.n	8014f0c <lv_draw_mask_angle+0x1f4>
 8014f08:	2300      	movs	r3, #0
 8014f0a:	647b      	str	r3, [r7, #68]	; 0x44
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 8014f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f0e:	68fa      	ldr	r2, [r7, #12]
 8014f10:	18d0      	adds	r0, r2, r3
 8014f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f14:	b29a      	uxth	r2, r3
 8014f16:	897b      	ldrh	r3, [r7, #10]
 8014f18:	4413      	add	r3, r2
 8014f1a:	b29b      	uxth	r3, r3
 8014f1c:	b219      	sxth	r1, r3
 8014f1e:	88fa      	ldrh	r2, [r7, #6]
 8014f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f22:	b29b      	uxth	r3, r3
 8014f24:	1ad3      	subs	r3, r2, r3
 8014f26:	b29b      	uxth	r3, r3
 8014f28:	b21c      	sxth	r4, r3
 8014f2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014f2c:	333c      	adds	r3, #60	; 0x3c
 8014f2e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014f32:	9300      	str	r3, [sp, #0]
 8014f34:	4623      	mov	r3, r4
 8014f36:	f7ff fa2f 	bl	8014398 <lv_draw_mask_line>
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 8014f40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d109      	bne.n	8014f5c <lv_draw_mask_angle+0x244>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 8014f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f4a:	68fa      	ldr	r2, [r7, #12]
 8014f4c:	18d0      	adds	r0, r2, r3
 8014f4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f54:	1ad3      	subs	r3, r2, r3
 8014f56:	4619      	mov	r1, r3
 8014f58:	f00f fc00 	bl	802475c <lv_memset_00>
        }
        if(res1 == res2) return res1;
 8014f5c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8014f60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014f64:	429a      	cmp	r2, r3
 8014f66:	d102      	bne.n	8014f6e <lv_draw_mask_angle+0x256>
 8014f68:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8014f6c:	e1d0      	b.n	8015310 <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 8014f6e:	2302      	movs	r3, #2
 8014f70:	e1ce      	b.n	8015310 <lv_draw_mask_angle+0x5f8>
    }
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 8014f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014f74:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014f78:	2bb4      	cmp	r3, #180	; 0xb4
 8014f7a:	f340 80fc 	ble.w	8015176 <lv_draw_mask_angle+0x45e>
 8014f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014f80:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014f84:	2bb4      	cmp	r3, #180	; 0xb4
 8014f86:	f340 80f6 	ble.w	8015176 <lv_draw_mask_angle+0x45e>
 8014f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014f8c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8014f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014f92:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014f96:	429a      	cmp	r2, r3
 8014f98:	f340 80ed 	ble.w	8015176 <lv_draw_mask_angle+0x45e>

        if(abs_y > p->cfg.vertex_p.y) {
 8014f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014f9e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8014fa2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	dd01      	ble.n	8014fae <lv_draw_mask_angle+0x296>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8014faa:	2301      	movs	r3, #1
 8014fac:	e1b0      	b.n	8015310 <lv_draw_mask_angle+0x5f8>
        }

        /*Start angle mask can work only from the end of end angle mask*/
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 8014fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014fb4:	fb02 f303 	mul.w	r3, r2, r3
 8014fb8:	129b      	asrs	r3, r3, #10
 8014fba:	61fb      	str	r3, [r7, #28]
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 8014fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fbe:	3301      	adds	r3, #1
 8014fc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014fc2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8014fc4:	fb02 f303 	mul.w	r3, r2, r3
 8014fc8:	129b      	asrs	r3, r3, #10
 8014fca:	643b      	str	r3, [r7, #64]	; 0x40

        /*Do not let the line end cross the vertex else it will affect the opposite part*/
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8014fcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014fce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014fd2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014fd6:	dd0b      	ble.n	8014ff0 <lv_draw_mask_angle+0x2d8>
 8014fd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014fda:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014fde:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8014fe2:	da05      	bge.n	8014ff0 <lv_draw_mask_angle+0x2d8>
 8014fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	da02      	bge.n	8014ff0 <lv_draw_mask_angle+0x2d8>
 8014fea:	2300      	movs	r3, #0
 8014fec:	643b      	str	r3, [r7, #64]	; 0x40
 8014fee:	e01f      	b.n	8015030 <lv_draw_mask_angle+0x318>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8014ff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014ff2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	dd0a      	ble.n	8015010 <lv_draw_mask_angle+0x2f8>
 8014ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014ffc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8015000:	2b5a      	cmp	r3, #90	; 0x5a
 8015002:	dc05      	bgt.n	8015010 <lv_draw_mask_angle+0x2f8>
 8015004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015006:	2b00      	cmp	r3, #0
 8015008:	da02      	bge.n	8015010 <lv_draw_mask_angle+0x2f8>
 801500a:	2300      	movs	r3, #0
 801500c:	643b      	str	r3, [r7, #64]	; 0x40
 801500e:	e00f      	b.n	8015030 <lv_draw_mask_angle+0x318>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8015010:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015012:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8015016:	2b5a      	cmp	r3, #90	; 0x5a
 8015018:	dd0a      	ble.n	8015030 <lv_draw_mask_angle+0x318>
 801501a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801501c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8015020:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015024:	da04      	bge.n	8015030 <lv_draw_mask_angle+0x318>
 8015026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015028:	2b00      	cmp	r3, #0
 801502a:	dd01      	ble.n	8015030 <lv_draw_mask_angle+0x318>
 801502c:	2300      	movs	r3, #0
 801502e:	643b      	str	r3, [r7, #64]	; 0x40

        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8015030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015032:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015036:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801503a:	dd0b      	ble.n	8015054 <lv_draw_mask_angle+0x33c>
 801503c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801503e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015042:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8015046:	da05      	bge.n	8015054 <lv_draw_mask_angle+0x33c>
 8015048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801504a:	2b00      	cmp	r3, #0
 801504c:	da02      	bge.n	8015054 <lv_draw_mask_angle+0x33c>
 801504e:	2300      	movs	r3, #0
 8015050:	643b      	str	r3, [r7, #64]	; 0x40
 8015052:	e01f      	b.n	8015094 <lv_draw_mask_angle+0x37c>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8015054:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015056:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801505a:	2b00      	cmp	r3, #0
 801505c:	dd0a      	ble.n	8015074 <lv_draw_mask_angle+0x35c>
 801505e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015060:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015064:	2b5a      	cmp	r3, #90	; 0x5a
 8015066:	dc05      	bgt.n	8015074 <lv_draw_mask_angle+0x35c>
 8015068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801506a:	2b00      	cmp	r3, #0
 801506c:	da02      	bge.n	8015074 <lv_draw_mask_angle+0x35c>
 801506e:	2300      	movs	r3, #0
 8015070:	643b      	str	r3, [r7, #64]	; 0x40
 8015072:	e00f      	b.n	8015094 <lv_draw_mask_angle+0x37c>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8015074:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015076:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801507a:	2b5a      	cmp	r3, #90	; 0x5a
 801507c:	dd0a      	ble.n	8015094 <lv_draw_mask_angle+0x37c>
 801507e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015080:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015084:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015088:	da04      	bge.n	8015094 <lv_draw_mask_angle+0x37c>
 801508a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801508c:	2b00      	cmp	r3, #0
 801508e:	dd01      	ble.n	8015094 <lv_draw_mask_angle+0x37c>
 8015090:	2300      	movs	r3, #0
 8015092:	643b      	str	r3, [r7, #64]	; 0x40

        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 8015094:	69fa      	ldr	r2, [r7, #28]
 8015096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015098:	1ad3      	subs	r3, r2, r3
 801509a:	105b      	asrs	r3, r3, #1
 801509c:	61bb      	str	r3, [r7, #24]

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801509e:	2301      	movs	r3, #1
 80150a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 80150a4:	2301      	movs	r3, #1
 80150a6:	75fb      	strb	r3, [r7, #23]

        int32_t tmp = start_angle_last + dist - rel_x;
 80150a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80150aa:	69bb      	ldr	r3, [r7, #24]
 80150ac:	441a      	add	r2, r3
 80150ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150b0:	1ad3      	subs	r3, r2, r3
 80150b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp > len) tmp = len;
 80150b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80150b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80150ba:	429a      	cmp	r2, r3
 80150bc:	dd02      	ble.n	80150c4 <lv_draw_mask_angle+0x3ac>
 80150be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80150c2:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp > 0) {
 80150c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	dd18      	ble.n	80150fc <lv_draw_mask_angle+0x3e4>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
 80150ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150cc:	b218      	sxth	r0, r3
 80150ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80150d0:	333c      	adds	r3, #60	; 0x3c
 80150d2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80150d6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80150da:	9300      	str	r3, [sp, #0]
 80150dc:	4603      	mov	r3, r0
 80150de:	68f8      	ldr	r0, [r7, #12]
 80150e0:	f7ff f95a 	bl	8014398 <lv_draw_mask_line>
 80150e4:	4603      	mov	r3, r0
 80150e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 80150ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d104      	bne.n	80150fc <lv_draw_mask_angle+0x3e4>
                lv_memset_00(&mask_buf[0], tmp);
 80150f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150f4:	4619      	mov	r1, r3
 80150f6:	68f8      	ldr	r0, [r7, #12]
 80150f8:	f00f fb30 	bl	802475c <lv_memset_00>
            }
        }

        if(tmp > len) tmp = len;
 80150fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015102:	429a      	cmp	r2, r3
 8015104:	dd02      	ble.n	801510c <lv_draw_mask_angle+0x3f4>
 8015106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801510a:	63bb      	str	r3, [r7, #56]	; 0x38
        if(tmp < 0) tmp = 0;
 801510c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801510e:	2b00      	cmp	r3, #0
 8015110:	da01      	bge.n	8015116 <lv_draw_mask_angle+0x3fe>
 8015112:	2300      	movs	r3, #0
 8015114:	63bb      	str	r3, [r7, #56]	; 0x38
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 8015116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015118:	68fa      	ldr	r2, [r7, #12]
 801511a:	18d0      	adds	r0, r2, r3
 801511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801511e:	b29a      	uxth	r2, r3
 8015120:	897b      	ldrh	r3, [r7, #10]
 8015122:	4413      	add	r3, r2
 8015124:	b29b      	uxth	r3, r3
 8015126:	b219      	sxth	r1, r3
 8015128:	88fa      	ldrh	r2, [r7, #6]
 801512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801512c:	b29b      	uxth	r3, r3
 801512e:	1ad3      	subs	r3, r2, r3
 8015130:	b29b      	uxth	r3, r3
 8015132:	b21c      	sxth	r4, r3
 8015134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015136:	3310      	adds	r3, #16
 8015138:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801513c:	9300      	str	r3, [sp, #0]
 801513e:	4623      	mov	r3, r4
 8015140:	f7ff f92a 	bl	8014398 <lv_draw_mask_line>
 8015144:	4603      	mov	r3, r0
 8015146:	75fb      	strb	r3, [r7, #23]
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 8015148:	7dfb      	ldrb	r3, [r7, #23]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d109      	bne.n	8015162 <lv_draw_mask_angle+0x44a>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 801514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015150:	68fa      	ldr	r2, [r7, #12]
 8015152:	18d0      	adds	r0, r2, r3
 8015154:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801515a:	1ad3      	subs	r3, r2, r3
 801515c:	4619      	mov	r1, r3
 801515e:	f00f fafd 	bl	802475c <lv_memset_00>
        }
        if(res1 == res2) return res1;
 8015162:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8015166:	7dfb      	ldrb	r3, [r7, #23]
 8015168:	429a      	cmp	r2, r3
 801516a:	d102      	bne.n	8015172 <lv_draw_mask_angle+0x45a>
 801516c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015170:	e0ce      	b.n	8015310 <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 8015172:	2302      	movs	r3, #2
 8015174:	e0cc      	b.n	8015310 <lv_draw_mask_angle+0x5f8>
    }
    else  {

        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8015176:	2301      	movs	r3, #1
 8015178:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        lv_draw_mask_res_t res2 = LV_DRAW_MASK_RES_FULL_COVER;
 801517c:	2301      	movs	r3, #1
 801517e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        if(p->cfg.start_angle == 180) {
 8015182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015184:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8015188:	2bb4      	cmp	r3, #180	; 0xb4
 801518a:	d10e      	bne.n	80151aa <lv_draw_mask_angle+0x492>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_FULL_COVER;
 801518c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801518e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015192:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015196:	429a      	cmp	r2, r3
 8015198:	da03      	bge.n	80151a2 <lv_draw_mask_angle+0x48a>
 801519a:	2301      	movs	r3, #1
 801519c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80151a0:	e043      	b.n	801522a <lv_draw_mask_angle+0x512>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 80151a2:	2303      	movs	r3, #3
 80151a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80151a8:	e03f      	b.n	801522a <lv_draw_mask_angle+0x512>
        }
        else if(p->cfg.start_angle == 0) {
 80151aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80151ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d10e      	bne.n	80151d2 <lv_draw_mask_angle+0x4ba>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_UNKNOWN;
 80151b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80151b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80151ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80151be:	429a      	cmp	r2, r3
 80151c0:	da03      	bge.n	80151ca <lv_draw_mask_angle+0x4b2>
 80151c2:	2303      	movs	r3, #3
 80151c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80151c8:	e02f      	b.n	801522a <lv_draw_mask_angle+0x512>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
 80151ca:	2301      	movs	r3, #1
 80151cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80151d0:	e02b      	b.n	801522a <lv_draw_mask_angle+0x512>
        }
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 80151d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80151d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80151d8:	2bb3      	cmp	r3, #179	; 0xb3
 80151da:	dc06      	bgt.n	80151ea <lv_draw_mask_angle+0x4d2>
 80151dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80151de:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80151e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80151e6:	429a      	cmp	r2, r3
 80151e8:	db0b      	blt.n	8015202 <lv_draw_mask_angle+0x4ea>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 80151ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80151ec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 80151f0:	2bb4      	cmp	r3, #180	; 0xb4
 80151f2:	dd0a      	ble.n	801520a <lv_draw_mask_angle+0x4f2>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 80151f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80151f6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80151fa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80151fe:	429a      	cmp	r2, r3
 8015200:	db03      	blt.n	801520a <lv_draw_mask_angle+0x4f2>
            res1 = LV_DRAW_MASK_RES_UNKNOWN;
 8015202:	2303      	movs	r3, #3
 8015204:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015208:	e00f      	b.n	801522a <lv_draw_mask_angle+0x512>
        }
        else  {
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 801520a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801520c:	3310      	adds	r3, #16
 801520e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8015212:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015216:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801521a:	9300      	str	r3, [sp, #0]
 801521c:	4603      	mov	r3, r0
 801521e:	68f8      	ldr	r0, [r7, #12]
 8015220:	f7ff f8ba 	bl	8014398 <lv_draw_mask_line>
 8015224:	4603      	mov	r3, r0
 8015226:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }

        if(p->cfg.end_angle == 180) {
 801522a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801522c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015230:	2bb4      	cmp	r3, #180	; 0xb4
 8015232:	d10e      	bne.n	8015252 <lv_draw_mask_angle+0x53a>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 8015234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015236:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801523a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801523e:	429a      	cmp	r2, r3
 8015240:	da03      	bge.n	801524a <lv_draw_mask_angle+0x532>
 8015242:	2303      	movs	r3, #3
 8015244:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8015248:	e043      	b.n	80152d2 <lv_draw_mask_angle+0x5ba>
            else res2 = LV_DRAW_MASK_RES_FULL_COVER;
 801524a:	2301      	movs	r3, #1
 801524c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8015250:	e03f      	b.n	80152d2 <lv_draw_mask_angle+0x5ba>
        }
        else if(p->cfg.end_angle == 0) {
 8015252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015254:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d10e      	bne.n	801527a <lv_draw_mask_angle+0x562>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 801525c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801525e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015262:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015266:	429a      	cmp	r2, r3
 8015268:	da03      	bge.n	8015272 <lv_draw_mask_angle+0x55a>
 801526a:	2301      	movs	r3, #1
 801526c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8015270:	e02f      	b.n	80152d2 <lv_draw_mask_angle+0x5ba>
            else res2 = LV_DRAW_MASK_RES_UNKNOWN;
 8015272:	2303      	movs	r3, #3
 8015274:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8015278:	e02b      	b.n	80152d2 <lv_draw_mask_angle+0x5ba>
        }
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 801527a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801527c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8015280:	2bb3      	cmp	r3, #179	; 0xb3
 8015282:	dc06      	bgt.n	8015292 <lv_draw_mask_angle+0x57a>
 8015284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015286:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801528a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801528e:	429a      	cmp	r2, r3
 8015290:	db0b      	blt.n	80152aa <lv_draw_mask_angle+0x592>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8015292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015294:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8015298:	2bb4      	cmp	r3, #180	; 0xb4
 801529a:	dd0a      	ble.n	80152b2 <lv_draw_mask_angle+0x59a>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 801529c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801529e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80152a2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80152a6:	429a      	cmp	r2, r3
 80152a8:	db03      	blt.n	80152b2 <lv_draw_mask_angle+0x59a>
            res2 = LV_DRAW_MASK_RES_UNKNOWN;
 80152aa:	2303      	movs	r3, #3
 80152ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80152b0:	e00f      	b.n	80152d2 <lv_draw_mask_angle+0x5ba>
        }
        else {
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 80152b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80152b4:	333c      	adds	r3, #60	; 0x3c
 80152b6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80152ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80152be:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80152c2:	9300      	str	r3, [sp, #0]
 80152c4:	4603      	mov	r3, r0
 80152c6:	68f8      	ldr	r0, [r7, #12]
 80152c8:	f7ff f866 	bl	8014398 <lv_draw_mask_line>
 80152cc:	4603      	mov	r3, r0
 80152ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        }

        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 80152d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d003      	beq.n	80152e2 <lv_draw_mask_angle+0x5ca>
 80152da:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d101      	bne.n	80152e6 <lv_draw_mask_angle+0x5ce>
 80152e2:	2300      	movs	r3, #0
 80152e4:	e014      	b.n	8015310 <lv_draw_mask_angle+0x5f8>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 80152e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80152ea:	2b03      	cmp	r3, #3
 80152ec:	d105      	bne.n	80152fa <lv_draw_mask_angle+0x5e2>
 80152ee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80152f2:	2b03      	cmp	r3, #3
 80152f4:	d101      	bne.n	80152fa <lv_draw_mask_angle+0x5e2>
 80152f6:	2300      	movs	r3, #0
 80152f8:	e00a      	b.n	8015310 <lv_draw_mask_angle+0x5f8>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 80152fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80152fe:	2b01      	cmp	r3, #1
 8015300:	d105      	bne.n	801530e <lv_draw_mask_angle+0x5f6>
 8015302:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8015306:	2b01      	cmp	r3, #1
 8015308:	d101      	bne.n	801530e <lv_draw_mask_angle+0x5f6>
 801530a:	2301      	movs	r3, #1
 801530c:	e000      	b.n	8015310 <lv_draw_mask_angle+0x5f8>
        else return LV_DRAW_MASK_RES_CHANGED;
 801530e:	2302      	movs	r3, #2
    }
}
 8015310:	4618      	mov	r0, r3
 8015312:	3754      	adds	r7, #84	; 0x54
 8015314:	46bd      	mov	sp, r7
 8015316:	bd90      	pop	{r4, r7, pc}

08015318 <lv_draw_mask_radius>:


LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_radius(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                    lv_coord_t abs_y, lv_coord_t len,
                                                                    lv_draw_mask_radius_param_t * p)
{
 8015318:	b590      	push	{r4, r7, lr}
 801531a:	b097      	sub	sp, #92	; 0x5c
 801531c:	af00      	add	r7, sp, #0
 801531e:	60f8      	str	r0, [r7, #12]
 8015320:	4608      	mov	r0, r1
 8015322:	4611      	mov	r1, r2
 8015324:	461a      	mov	r2, r3
 8015326:	4603      	mov	r3, r0
 8015328:	817b      	strh	r3, [r7, #10]
 801532a:	460b      	mov	r3, r1
 801532c:	813b      	strh	r3, [r7, #8]
 801532e:	4613      	mov	r3, r2
 8015330:	80fb      	strh	r3, [r7, #6]
    bool outer = p->cfg.outer;
 8015332:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015334:	7c9b      	ldrb	r3, [r3, #18]
 8015336:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801533a:	b2db      	uxtb	r3, r3
 801533c:	2b00      	cmp	r3, #0
 801533e:	bf14      	ite	ne
 8015340:	2301      	movne	r3, #1
 8015342:	2300      	moveq	r3, #0
 8015344:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    int32_t radius = p->cfg.radius;
 8015348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801534a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801534e:	647b      	str	r3, [r7, #68]	; 0x44
    lv_area_t rect;
    lv_area_copy(&rect, &p->cfg.rect);
 8015350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015352:	f103 0208 	add.w	r2, r3, #8
 8015356:	f107 0318 	add.w	r3, r7, #24
 801535a:	4611      	mov	r1, r2
 801535c:	4618      	mov	r0, r3
 801535e:	f7fe fae6 	bl	801392e <lv_area_copy>

    if(outer == false) {
 8015362:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8015366:	f083 0301 	eor.w	r3, r3, #1
 801536a:	b2db      	uxtb	r3, r3
 801536c:	2b00      	cmp	r3, #0
 801536e:	d00d      	beq.n	801538c <lv_draw_mask_radius+0x74>
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 8015370:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015374:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015378:	429a      	cmp	r2, r3
 801537a:	db05      	blt.n	8015388 <lv_draw_mask_radius+0x70>
 801537c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015380:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015384:	429a      	cmp	r2, r3
 8015386:	dd0f      	ble.n	80153a8 <lv_draw_mask_radius+0x90>
            return LV_DRAW_MASK_RES_TRANSP;
 8015388:	2300      	movs	r3, #0
 801538a:	e266      	b.n	801585a <lv_draw_mask_radius+0x542>
        }
    }
    else {
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 801538c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015390:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8015394:	429a      	cmp	r2, r3
 8015396:	db05      	blt.n	80153a4 <lv_draw_mask_radius+0x8c>
 8015398:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801539c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80153a0:	429a      	cmp	r2, r3
 80153a2:	dd01      	ble.n	80153a8 <lv_draw_mask_radius+0x90>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80153a4:	2301      	movs	r3, #1
 80153a6:	e258      	b.n	801585a <lv_draw_mask_radius+0x542>
        }
    }

    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 80153a8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80153ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80153b0:	4619      	mov	r1, r3
 80153b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153b4:	440b      	add	r3, r1
 80153b6:	429a      	cmp	r2, r3
 80153b8:	db0b      	blt.n	80153d2 <lv_draw_mask_radius+0xba>
 80153ba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80153be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80153c2:	441a      	add	r2, r3
 80153c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80153c8:	4619      	mov	r1, r3
 80153ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153cc:	1acb      	subs	r3, r1, r3
 80153ce:	429a      	cmp	r2, r3
 80153d0:	dd12      	ble.n	80153f8 <lv_draw_mask_radius+0xe0>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 80153d2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80153d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80153da:	4619      	mov	r1, r3
 80153dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153de:	440b      	add	r3, r1
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 80153e0:	429a      	cmp	r2, r3
 80153e2:	f2c0 8082 	blt.w	80154ea <lv_draw_mask_radius+0x1d2>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 80153e6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80153ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80153ee:	4619      	mov	r1, r3
 80153f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153f2:	1acb      	subs	r3, r1, r3
 80153f4:	429a      	cmp	r2, r3
 80153f6:	dc78      	bgt.n	80154ea <lv_draw_mask_radius+0x1d2>
        if(outer == false) {
 80153f8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80153fc:	f083 0301 	eor.w	r3, r3, #1
 8015400:	b2db      	uxtb	r3, r3
 8015402:	2b00      	cmp	r3, #0
 8015404:	d03d      	beq.n	8015482 <lv_draw_mask_radius+0x16a>
            /*Remove the edges*/
            int32_t last = rect.x1 - abs_x;
 8015406:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801540a:	461a      	mov	r2, r3
 801540c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015410:	1ad3      	subs	r3, r2, r3
 8015412:	627b      	str	r3, [r7, #36]	; 0x24
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 8015414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801541a:	429a      	cmp	r2, r3
 801541c:	dd01      	ble.n	8015422 <lv_draw_mask_radius+0x10a>
 801541e:	2300      	movs	r3, #0
 8015420:	e21b      	b.n	801585a <lv_draw_mask_radius+0x542>
            if(last >= 0) {
 8015422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015424:	2b00      	cmp	r3, #0
 8015426:	db04      	blt.n	8015432 <lv_draw_mask_radius+0x11a>
                lv_memset_00(&mask_buf[0], last);
 8015428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801542a:	4619      	mov	r1, r3
 801542c:	68f8      	ldr	r0, [r7, #12]
 801542e:	f00f f995 	bl	802475c <lv_memset_00>
            }

            int32_t first = rect.x2 - abs_x + 1;
 8015432:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8015436:	461a      	mov	r2, r3
 8015438:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801543c:	1ad3      	subs	r3, r2, r3
 801543e:	3301      	adds	r3, #1
 8015440:	623b      	str	r3, [r7, #32]
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 8015442:	6a3b      	ldr	r3, [r7, #32]
 8015444:	2b00      	cmp	r3, #0
 8015446:	dc01      	bgt.n	801544c <lv_draw_mask_radius+0x134>
 8015448:	2300      	movs	r3, #0
 801544a:	e206      	b.n	801585a <lv_draw_mask_radius+0x542>
            else if(first < len) {
 801544c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015450:	6a3a      	ldr	r2, [r7, #32]
 8015452:	429a      	cmp	r2, r3
 8015454:	da09      	bge.n	801546a <lv_draw_mask_radius+0x152>
                lv_memset_00(&mask_buf[first], len - first);
 8015456:	6a3b      	ldr	r3, [r7, #32]
 8015458:	68fa      	ldr	r2, [r7, #12]
 801545a:	18d0      	adds	r0, r2, r3
 801545c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015460:	6a3b      	ldr	r3, [r7, #32]
 8015462:	1ad3      	subs	r3, r2, r3
 8015464:	4619      	mov	r1, r3
 8015466:	f00f f979 	bl	802475c <lv_memset_00>
            }
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 801546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801546c:	2b00      	cmp	r3, #0
 801546e:	d106      	bne.n	801547e <lv_draw_mask_radius+0x166>
 8015470:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015474:	6a3a      	ldr	r2, [r7, #32]
 8015476:	429a      	cmp	r2, r3
 8015478:	d101      	bne.n	801547e <lv_draw_mask_radius+0x166>
 801547a:	2301      	movs	r3, #1
 801547c:	e1ed      	b.n	801585a <lv_draw_mask_radius+0x542>
            else return LV_DRAW_MASK_RES_CHANGED;
 801547e:	2302      	movs	r3, #2
 8015480:	e1eb      	b.n	801585a <lv_draw_mask_radius+0x542>
        }
        else {
            int32_t first = rect.x1 - abs_x;
 8015482:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8015486:	461a      	mov	r2, r3
 8015488:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801548c:	1ad3      	subs	r3, r2, r3
 801548e:	657b      	str	r3, [r7, #84]	; 0x54
            if(first < 0) first = 0;
 8015490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015492:	2b00      	cmp	r3, #0
 8015494:	da01      	bge.n	801549a <lv_draw_mask_radius+0x182>
 8015496:	2300      	movs	r3, #0
 8015498:	657b      	str	r3, [r7, #84]	; 0x54
            if(first <= len) {
 801549a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801549e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80154a0:	429a      	cmp	r2, r3
 80154a2:	dc20      	bgt.n	80154e6 <lv_draw_mask_radius+0x1ce>
                int32_t last = rect.x2 - abs_x - first + 1;
 80154a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80154a8:	461a      	mov	r2, r3
 80154aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80154ae:	1ad2      	subs	r2, r2, r3
 80154b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154b2:	1ad3      	subs	r3, r2, r3
 80154b4:	3301      	adds	r3, #1
 80154b6:	653b      	str	r3, [r7, #80]	; 0x50
                if(first + last > len) last = len - first;
 80154b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80154ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154bc:	441a      	add	r2, r3
 80154be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80154c2:	429a      	cmp	r2, r3
 80154c4:	dd04      	ble.n	80154d0 <lv_draw_mask_radius+0x1b8>
 80154c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80154ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154cc:	1ad3      	subs	r3, r2, r3
 80154ce:	653b      	str	r3, [r7, #80]	; 0x50
                if(last >= 0) {
 80154d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	db07      	blt.n	80154e6 <lv_draw_mask_radius+0x1ce>
                    lv_memset_00(&mask_buf[first], last);
 80154d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154d8:	68fa      	ldr	r2, [r7, #12]
 80154da:	4413      	add	r3, r2
 80154dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80154de:	4611      	mov	r1, r2
 80154e0:	4618      	mov	r0, r3
 80154e2:	f00f f93b 	bl	802475c <lv_memset_00>
                }
            }
        }
        return LV_DRAW_MASK_RES_CHANGED;
 80154e6:	2302      	movs	r3, #2
 80154e8:	e1b7      	b.n	801585a <lv_draw_mask_radius+0x542>
    //    if( abs_x == 276 && abs_x + len - 1 == 479 && abs_y == 63 && p->cfg.radius == 5 && p->cfg.outer == 1) {
    //        char x = 0;
    //    }
    //exec: x:276.. 479, y:63: r:5, inv)

    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 80154ea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80154ee:	461a      	mov	r2, r3
 80154f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80154f4:	1ad3      	subs	r3, r2, r3
 80154f6:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t w = lv_area_get_width(&rect);
 80154f8:	f107 0318 	add.w	r3, r7, #24
 80154fc:	4618      	mov	r0, r3
 80154fe:	f7fe fa35 	bl	801396c <lv_area_get_width>
 8015502:	4603      	mov	r3, r0
 8015504:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t h = lv_area_get_height(&rect);
 8015506:	f107 0318 	add.w	r3, r7, #24
 801550a:	4618      	mov	r0, r3
 801550c:	f7fe fa45 	bl	801399a <lv_area_get_height>
 8015510:	4603      	mov	r3, r0
 8015512:	63bb      	str	r3, [r7, #56]	; 0x38
    abs_x -= rect.x1;
 8015514:	897a      	ldrh	r2, [r7, #10]
 8015516:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801551a:	b29b      	uxth	r3, r3
 801551c:	1ad3      	subs	r3, r2, r3
 801551e:	b29b      	uxth	r3, r3
 8015520:	817b      	strh	r3, [r7, #10]
    abs_y -= rect.y1;
 8015522:	893a      	ldrh	r2, [r7, #8]
 8015524:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015528:	b29b      	uxth	r3, r3
 801552a:	1ad3      	subs	r3, r2, r3
 801552c:	b29b      	uxth	r3, r3
 801552e:	813b      	strh	r3, [r7, #8]

    lv_coord_t aa_len;
    lv_coord_t x_start;
    lv_coord_t cir_y;
    if(abs_y < radius) {
 8015530:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015536:	429a      	cmp	r2, r3
 8015538:	dd09      	ble.n	801554e <lv_draw_mask_radius+0x236>
        cir_y = radius - abs_y - 1;
 801553a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801553c:	b29a      	uxth	r2, r3
 801553e:	893b      	ldrh	r3, [r7, #8]
 8015540:	1ad3      	subs	r3, r2, r3
 8015542:	b29b      	uxth	r3, r3
 8015544:	3b01      	subs	r3, #1
 8015546:	b29b      	uxth	r3, r3
 8015548:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 801554c:	e00a      	b.n	8015564 <lv_draw_mask_radius+0x24c>
    }
    else {
        cir_y = abs_y - (h - radius);
 801554e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015550:	b29a      	uxth	r2, r3
 8015552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015554:	b29b      	uxth	r3, r3
 8015556:	1ad3      	subs	r3, r2, r3
 8015558:	b29a      	uxth	r2, r3
 801555a:	893b      	ldrh	r3, [r7, #8]
 801555c:	4413      	add	r3, r2
 801555e:	b29b      	uxth	r3, r3
 8015560:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }
    lv_opa_t * aa_opa = get_next_line(p->circle, cir_y, &aa_len, &x_start);
 8015564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015566:	6958      	ldr	r0, [r3, #20]
 8015568:	f107 0314 	add.w	r3, r7, #20
 801556c:	f107 0216 	add.w	r2, r7, #22
 8015570:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	; 0x4e
 8015574:	f000 fd38 	bl	8015fe8 <get_next_line>
 8015578:	6378      	str	r0, [r7, #52]	; 0x34
    lv_coord_t cir_x_right = k + w - radius + x_start;
 801557a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801557c:	b29a      	uxth	r2, r3
 801557e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015580:	b29b      	uxth	r3, r3
 8015582:	4413      	add	r3, r2
 8015584:	b29a      	uxth	r2, r3
 8015586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015588:	b29b      	uxth	r3, r3
 801558a:	1ad3      	subs	r3, r2, r3
 801558c:	b29a      	uxth	r2, r3
 801558e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8015592:	b29b      	uxth	r3, r3
 8015594:	4413      	add	r3, r2
 8015596:	b29b      	uxth	r3, r3
 8015598:	867b      	strh	r3, [r7, #50]	; 0x32
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 801559a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801559c:	b29a      	uxth	r2, r3
 801559e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155a0:	b29b      	uxth	r3, r3
 80155a2:	4413      	add	r3, r2
 80155a4:	b29a      	uxth	r2, r3
 80155a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80155aa:	b29b      	uxth	r3, r3
 80155ac:	1ad3      	subs	r3, r2, r3
 80155ae:	b29b      	uxth	r3, r3
 80155b0:	3b01      	subs	r3, #1
 80155b2:	b29b      	uxth	r3, r3
 80155b4:	863b      	strh	r3, [r7, #48]	; 0x30
    lv_coord_t i;

    if(outer == false) {
 80155b6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80155ba:	f083 0301 	eor.w	r3, r3, #1
 80155be:	b2db      	uxtb	r3, r3
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	f000 809b 	beq.w	80156fc <lv_draw_mask_radius+0x3e4>
        for(i = 0; i < aa_len; i++) {
 80155c6:	2300      	movs	r3, #0
 80155c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80155cc:	e062      	b.n	8015694 <lv_draw_mask_radius+0x37c>
            lv_opa_t opa = aa_opa[aa_len - i - 1];
 80155ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80155d2:	461a      	mov	r2, r3
 80155d4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80155d8:	1ad3      	subs	r3, r2, r3
 80155da:	3b01      	subs	r3, #1
 80155dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80155de:	4413      	add	r3, r2
 80155e0:	781b      	ldrb	r3, [r3, #0]
 80155e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 80155e6:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80155ea:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80155ee:	4413      	add	r3, r2
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	db20      	blt.n	8015636 <lv_draw_mask_radius+0x31e>
 80155f4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80155f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80155fc:	441a      	add	r2, r3
 80155fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015602:	429a      	cmp	r2, r3
 8015604:	da17      	bge.n	8015636 <lv_draw_mask_radius+0x31e>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8015606:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801560a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801560e:	4413      	add	r3, r2
 8015610:	461a      	mov	r2, r3
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	4413      	add	r3, r2
 8015616:	7819      	ldrb	r1, [r3, #0]
 8015618:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 801561c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015620:	4413      	add	r3, r2
 8015622:	461a      	mov	r2, r3
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	189c      	adds	r4, r3, r2
 8015628:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801562c:	4618      	mov	r0, r3
 801562e:	f000 fd11 	bl	8016054 <mask_mix>
 8015632:	4603      	mov	r3, r0
 8015634:	7023      	strb	r3, [r4, #0]
            }
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 8015636:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801563a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801563e:	1ad3      	subs	r3, r2, r3
 8015640:	2b00      	cmp	r3, #0
 8015642:	db20      	blt.n	8015686 <lv_draw_mask_radius+0x36e>
 8015644:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8015648:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801564c:	1ad2      	subs	r2, r2, r3
 801564e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015652:	429a      	cmp	r2, r3
 8015654:	da17      	bge.n	8015686 <lv_draw_mask_radius+0x36e>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 8015656:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801565a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801565e:	1ad3      	subs	r3, r2, r3
 8015660:	461a      	mov	r2, r3
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	4413      	add	r3, r2
 8015666:	7819      	ldrb	r1, [r3, #0]
 8015668:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 801566c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015670:	1ad3      	subs	r3, r2, r3
 8015672:	461a      	mov	r2, r3
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	189c      	adds	r4, r3, r2
 8015678:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801567c:	4618      	mov	r0, r3
 801567e:	f000 fce9 	bl	8016054 <mask_mix>
 8015682:	4603      	mov	r3, r0
 8015684:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < aa_len; i++) {
 8015686:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801568a:	b29b      	uxth	r3, r3
 801568c:	3301      	adds	r3, #1
 801568e:	b29b      	uxth	r3, r3
 8015690:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8015694:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015698:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 801569c:	429a      	cmp	r2, r3
 801569e:	db96      	blt.n	80155ce <lv_draw_mask_radius+0x2b6>
            }
        }

        /*Clean the right side*/
        cir_x_right = LV_CLAMP(0, cir_x_right + i, len);
 80156a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80156a4:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80156a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80156ac:	440b      	add	r3, r1
 80156ae:	4293      	cmp	r3, r2
 80156b0:	bfa8      	it	ge
 80156b2:	4613      	movge	r3, r2
 80156b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80156b8:	867b      	strh	r3, [r7, #50]	; 0x32
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
 80156ba:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80156be:	68fa      	ldr	r2, [r7, #12]
 80156c0:	18d0      	adds	r0, r2, r3
 80156c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80156c6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80156ca:	1ad3      	subs	r3, r2, r3
 80156cc:	4619      	mov	r1, r3
 80156ce:	f00f f845 	bl	802475c <lv_memset_00>

        /*Clean the left side*/
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 80156d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80156d6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80156da:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80156de:	1a5b      	subs	r3, r3, r1
 80156e0:	3301      	adds	r3, #1
 80156e2:	4293      	cmp	r3, r2
 80156e4:	bfa8      	it	ge
 80156e6:	4613      	movge	r3, r2
 80156e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80156ec:	863b      	strh	r3, [r7, #48]	; 0x30
        lv_memset_00(&mask_buf[0], cir_x_left);
 80156ee:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80156f2:	4619      	mov	r1, r3
 80156f4:	68f8      	ldr	r0, [r7, #12]
 80156f6:	f00f f831 	bl	802475c <lv_memset_00>
 80156fa:	e0ad      	b.n	8015858 <lv_draw_mask_radius+0x540>
    }
    else {
        for(i = 0; i < aa_len; i++) {
 80156fc:	2300      	movs	r3, #0
 80156fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8015702:	e063      	b.n	80157cc <lv_draw_mask_radius+0x4b4>
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 8015704:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015708:	1e5a      	subs	r2, r3, #1
 801570a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801570e:	1ad3      	subs	r3, r2, r3
 8015710:	461a      	mov	r2, r3
 8015712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015714:	4413      	add	r3, r2
 8015716:	781b      	ldrb	r3, [r3, #0]
 8015718:	43db      	mvns	r3, r3
 801571a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 801571e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8015722:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015726:	4413      	add	r3, r2
 8015728:	2b00      	cmp	r3, #0
 801572a:	db20      	blt.n	801576e <lv_draw_mask_radius+0x456>
 801572c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8015730:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015734:	441a      	add	r2, r3
 8015736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801573a:	429a      	cmp	r2, r3
 801573c:	da17      	bge.n	801576e <lv_draw_mask_radius+0x456>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 801573e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8015742:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015746:	4413      	add	r3, r2
 8015748:	461a      	mov	r2, r3
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	4413      	add	r3, r2
 801574e:	7819      	ldrb	r1, [r3, #0]
 8015750:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8015754:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015758:	4413      	add	r3, r2
 801575a:	461a      	mov	r2, r3
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	189c      	adds	r4, r3, r2
 8015760:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015764:	4618      	mov	r0, r3
 8015766:	f000 fc75 	bl	8016054 <mask_mix>
 801576a:	4603      	mov	r3, r0
 801576c:	7023      	strb	r3, [r4, #0]
            }
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 801576e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8015772:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015776:	1ad3      	subs	r3, r2, r3
 8015778:	2b00      	cmp	r3, #0
 801577a:	db20      	blt.n	80157be <lv_draw_mask_radius+0x4a6>
 801577c:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8015780:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015784:	1ad2      	subs	r2, r2, r3
 8015786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801578a:	429a      	cmp	r2, r3
 801578c:	da17      	bge.n	80157be <lv_draw_mask_radius+0x4a6>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 801578e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8015792:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8015796:	1ad3      	subs	r3, r2, r3
 8015798:	461a      	mov	r2, r3
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	4413      	add	r3, r2
 801579e:	7819      	ldrb	r1, [r3, #0]
 80157a0:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80157a4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80157a8:	1ad3      	subs	r3, r2, r3
 80157aa:	461a      	mov	r2, r3
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	189c      	adds	r4, r3, r2
 80157b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80157b4:	4618      	mov	r0, r3
 80157b6:	f000 fc4d 	bl	8016054 <mask_mix>
 80157ba:	4603      	mov	r3, r0
 80157bc:	7023      	strb	r3, [r4, #0]
        for(i = 0; i < aa_len; i++) {
 80157be:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80157c2:	b29b      	uxth	r3, r3
 80157c4:	3301      	adds	r3, #1
 80157c6:	b29b      	uxth	r3, r3
 80157c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80157cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80157d0:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 80157d4:	429a      	cmp	r2, r3
 80157d6:	db95      	blt.n	8015704 <lv_draw_mask_radius+0x3ec>
            }
        }

        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 80157d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80157dc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80157e0:	3301      	adds	r3, #1
 80157e2:	4293      	cmp	r3, r2
 80157e4:	bfa8      	it	ge
 80157e6:	4613      	movge	r3, r2
 80157e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80157ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 80157ee:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80157f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80157f6:	429a      	cmp	r2, r3
 80157f8:	da07      	bge.n	801580a <lv_draw_mask_radius+0x4f2>
 80157fa:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80157fe:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8015802:	1ad3      	subs	r3, r2, r3
 8015804:	0fdb      	lsrs	r3, r3, #31
 8015806:	b2db      	uxtb	r3, r3
 8015808:	e006      	b.n	8015818 <lv_draw_mask_radius+0x500>
 801580a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801580e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8015812:	1ad3      	subs	r3, r2, r3
 8015814:	0fdb      	lsrs	r3, r3, #31
 8015816:	b2db      	uxtb	r3, r3
 8015818:	2b00      	cmp	r3, #0
 801581a:	d001      	beq.n	8015820 <lv_draw_mask_radius+0x508>
 801581c:	2300      	movs	r3, #0
 801581e:	e010      	b.n	8015842 <lv_draw_mask_radius+0x52a>
 8015820:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8015824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015828:	429a      	cmp	r2, r3
 801582a:	da05      	bge.n	8015838 <lv_draw_mask_radius+0x520>
 801582c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801582e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015830:	1ad3      	subs	r3, r2, r3
 8015832:	b29b      	uxth	r3, r3
 8015834:	b21b      	sxth	r3, r3
 8015836:	e004      	b.n	8015842 <lv_draw_mask_radius+0x52a>
 8015838:	88fa      	ldrh	r2, [r7, #6]
 801583a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801583c:	1ad3      	subs	r3, r2, r3
 801583e:	b29b      	uxth	r3, r3
 8015840:	b21b      	sxth	r3, r3
 8015842:	85bb      	strh	r3, [r7, #44]	; 0x2c
        lv_memset_00(&mask_buf[clr_start], clr_len);
 8015844:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8015848:	68fa      	ldr	r2, [r7, #12]
 801584a:	4413      	add	r3, r2
 801584c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8015850:	4611      	mov	r1, r2
 8015852:	4618      	mov	r0, r3
 8015854:	f00e ff82 	bl	802475c <lv_memset_00>
    }

    return LV_DRAW_MASK_RES_CHANGED;
 8015858:	2302      	movs	r3, #2
}
 801585a:	4618      	mov	r0, r3
 801585c:	375c      	adds	r7, #92	; 0x5c
 801585e:	46bd      	mov	sp, r7
 8015860:	bd90      	pop	{r4, r7, pc}

08015862 <circ_init>:
 * @param c pointer to a point. The coordinates will be calculated here
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
static void circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
 8015862:	b480      	push	{r7}
 8015864:	b085      	sub	sp, #20
 8015866:	af00      	add	r7, sp, #0
 8015868:	60f8      	str	r0, [r7, #12]
 801586a:	60b9      	str	r1, [r7, #8]
 801586c:	4613      	mov	r3, r2
 801586e:	80fb      	strh	r3, [r7, #6]
    c->x = radius;
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	88fa      	ldrh	r2, [r7, #6]
 8015874:	801a      	strh	r2, [r3, #0]
    c->y = 0;
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	2200      	movs	r2, #0
 801587a:	805a      	strh	r2, [r3, #2]
    *tmp = 1 - radius;
 801587c:	88fb      	ldrh	r3, [r7, #6]
 801587e:	f1c3 0301 	rsb	r3, r3, #1
 8015882:	b29b      	uxth	r3, r3
 8015884:	b21a      	sxth	r2, r3
 8015886:	68bb      	ldr	r3, [r7, #8]
 8015888:	801a      	strh	r2, [r3, #0]
}
 801588a:	bf00      	nop
 801588c:	3714      	adds	r7, #20
 801588e:	46bd      	mov	sp, r7
 8015890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015894:	4770      	bx	lr

08015896 <circ_cont>:
 * Test the circle drawing is ready or not
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
static bool circ_cont(lv_point_t * c)
{
 8015896:	b480      	push	{r7}
 8015898:	b083      	sub	sp, #12
 801589a:	af00      	add	r7, sp, #0
 801589c:	6078      	str	r0, [r7, #4]
    return c->y <= c->x ? true : false;
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80158aa:	429a      	cmp	r2, r3
 80158ac:	bfd4      	ite	le
 80158ae:	2301      	movle	r3, #1
 80158b0:	2300      	movgt	r3, #0
 80158b2:	b2db      	uxtb	r3, r3
}
 80158b4:	4618      	mov	r0, r3
 80158b6:	370c      	adds	r7, #12
 80158b8:	46bd      	mov	sp, r7
 80158ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158be:	4770      	bx	lr

080158c0 <circ_next>:
 * Get the next point from the circle
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
static void circ_next(lv_point_t * c, lv_coord_t * tmp)
{
 80158c0:	b480      	push	{r7}
 80158c2:	b083      	sub	sp, #12
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
 80158c8:	6039      	str	r1, [r7, #0]

    if(*tmp <= 0) {
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	dc11      	bgt.n	80158f8 <circ_next+0x38>
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 80158d4:	683b      	ldr	r3, [r7, #0]
 80158d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80158da:	b29a      	uxth	r2, r3
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80158e2:	b29b      	uxth	r3, r3
 80158e4:	005b      	lsls	r3, r3, #1
 80158e6:	b29b      	uxth	r3, r3
 80158e8:	4413      	add	r3, r2
 80158ea:	b29b      	uxth	r3, r3
 80158ec:	3303      	adds	r3, #3
 80158ee:	b29b      	uxth	r3, r3
 80158f0:	b21a      	sxth	r2, r3
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	801a      	strh	r2, [r3, #0]
 80158f6:	e01e      	b.n	8015936 <circ_next+0x76>
    }
    else {
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80158fe:	b29a      	uxth	r2, r3
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015906:	4619      	mov	r1, r3
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801590e:	1acb      	subs	r3, r1, r3
 8015910:	b29b      	uxth	r3, r3
 8015912:	005b      	lsls	r3, r3, #1
 8015914:	b29b      	uxth	r3, r3
 8015916:	4413      	add	r3, r2
 8015918:	b29b      	uxth	r3, r3
 801591a:	3305      	adds	r3, #5
 801591c:	b29b      	uxth	r3, r3
 801591e:	b21a      	sxth	r2, r3
 8015920:	683b      	ldr	r3, [r7, #0]
 8015922:	801a      	strh	r2, [r3, #0]
        c->x--;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f9b3 3000 	ldrsh.w	r3, [r3]
 801592a:	b29b      	uxth	r3, r3
 801592c:	3b01      	subs	r3, #1
 801592e:	b29b      	uxth	r3, r3
 8015930:	b21a      	sxth	r2, r3
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	801a      	strh	r2, [r3, #0]
    }
    c->y++;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801593c:	b29b      	uxth	r3, r3
 801593e:	3301      	adds	r3, #1
 8015940:	b29b      	uxth	r3, r3
 8015942:	b21a      	sxth	r2, r3
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	805a      	strh	r2, [r3, #2]
}
 8015948:	bf00      	nop
 801594a:	370c      	adds	r7, #12
 801594c:	46bd      	mov	sp, r7
 801594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015952:	4770      	bx	lr

08015954 <circ_calc_aa4>:

static void circ_calc_aa4(_lv_draw_mask_radius_circle_dsc_t * c, lv_coord_t radius)
{
 8015954:	b580      	push	{r7, lr}
 8015956:	b096      	sub	sp, #88	; 0x58
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]
 801595c:	460b      	mov	r3, r1
 801595e:	807b      	strh	r3, [r7, #2]
    if(radius == 0) return;
 8015960:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015964:	2b00      	cmp	r3, #0
 8015966:	f000 833b 	beq.w	8015fe0 <circ_calc_aa4+0x68c>
    c->radius = radius;
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	887a      	ldrh	r2, [r7, #2]
 801596e:	831a      	strh	r2, [r3, #24]

    /*Allocate buffers*/
    if(c->buf) lv_mem_free(c->buf);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d004      	beq.n	8015982 <circ_calc_aa4+0x2e>
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	4618      	mov	r0, r3
 801597e:	f00e fae9 	bl	8023f54 <lv_mem_free>

    c->buf = lv_mem_alloc(radius * 6 + 6);  /*Use uint16_t for opa_start_on_y and x_start_on_y*/
 8015982:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015986:	1c5a      	adds	r2, r3, #1
 8015988:	4613      	mov	r3, r2
 801598a:	005b      	lsls	r3, r3, #1
 801598c:	4413      	add	r3, r2
 801598e:	005b      	lsls	r3, r3, #1
 8015990:	4618      	mov	r0, r3
 8015992:	f00e faaf 	bl	8023ef4 <lv_mem_alloc>
 8015996:	4602      	mov	r2, r0
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	601a      	str	r2, [r3, #0]
    LV_ASSERT_MALLOC(c->buf);
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d100      	bne.n	80159a6 <circ_calc_aa4+0x52>
 80159a4:	e7fe      	b.n	80159a4 <circ_calc_aa4+0x50>
    c->cir_opa = c->buf;
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	681a      	ldr	r2, [r3, #0]
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	605a      	str	r2, [r3, #4]
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	681a      	ldr	r2, [r3, #0]
 80159b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80159b6:	005b      	lsls	r3, r3, #1
 80159b8:	3302      	adds	r3, #2
 80159ba:	441a      	add	r2, r3
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	60da      	str	r2, [r3, #12]
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	681a      	ldr	r2, [r3, #0]
 80159c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80159c8:	009b      	lsls	r3, r3, #2
 80159ca:	3304      	adds	r3, #4
 80159cc:	441a      	add	r2, r3
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	609a      	str	r2, [r3, #8]

    /*Special case, handle manually*/
    if(radius == 1) {
 80159d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80159d6:	2b01      	cmp	r3, #1
 80159d8:	d111      	bne.n	80159fe <circ_calc_aa4+0xaa>
        c->cir_opa[0] = 180;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	685b      	ldr	r3, [r3, #4]
 80159de:	22b4      	movs	r2, #180	; 0xb4
 80159e0:	701a      	strb	r2, [r3, #0]
        c->opa_start_on_y[0] = 0;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	2200      	movs	r2, #0
 80159e8:	801a      	strh	r2, [r3, #0]
        c->opa_start_on_y[1] = 1;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	68db      	ldr	r3, [r3, #12]
 80159ee:	3302      	adds	r3, #2
 80159f0:	2201      	movs	r2, #1
 80159f2:	801a      	strh	r2, [r3, #0]
        c->x_start_on_y[0] = 0;
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	689b      	ldr	r3, [r3, #8]
 80159f8:	2200      	movs	r2, #0
 80159fa:	801a      	strh	r2, [r3, #0]
        return;
 80159fc:	e2f1      	b.n	8015fe2 <circ_calc_aa4+0x68e>
    }

    lv_coord_t * cir_x = lv_mem_buf_get((radius + 1) * 2 * 2 * sizeof(lv_coord_t));
 80159fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015a02:	3301      	adds	r3, #1
 8015a04:	00db      	lsls	r3, r3, #3
 8015a06:	4618      	mov	r0, r3
 8015a08:	f00e fafe 	bl	8024008 <lv_mem_buf_get>
 8015a0c:	6438      	str	r0, [r7, #64]	; 0x40
    lv_coord_t * cir_y = &cir_x[(radius + 1) * 2];
 8015a0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015a12:	3301      	adds	r3, #1
 8015a14:	009b      	lsls	r3, r3, #2
 8015a16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015a18:	4413      	add	r3, r2
 8015a1a:	63fb      	str	r3, [r7, #60]	; 0x3c

    uint32_t y_8th_cnt = 0;
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	657b      	str	r3, [r7, #84]	; 0x54
    lv_point_t cp;
    lv_coord_t tmp;
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 8015a20:	887b      	ldrh	r3, [r7, #2]
 8015a22:	009b      	lsls	r3, r3, #2
 8015a24:	b29b      	uxth	r3, r3
 8015a26:	b21a      	sxth	r2, r3
 8015a28:	f107 012e 	add.w	r1, r7, #46	; 0x2e
 8015a2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015a30:	4618      	mov	r0, r3
 8015a32:	f7ff ff16 	bl	8015862 <circ_init>
    int32_t i;

    uint32_t x_int[4];
    uint32_t x_fract[4];
    lv_coord_t cir_size = 0;
 8015a36:	2300      	movs	r3, #0
 8015a38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    x_int[0] = cp.x >> 2;
 8015a3c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8015a40:	109b      	asrs	r3, r3, #2
 8015a42:	b21b      	sxth	r3, r3
 8015a44:	61fb      	str	r3, [r7, #28]
    x_fract[0] = 0;
 8015a46:	2300      	movs	r3, #0
 8015a48:	60fb      	str	r3, [r7, #12]

    /*Calculate an 1/8 circle*/
    while(circ_cont(&cp)) {
 8015a4a:	e1b7      	b.n	8015dbc <circ_calc_aa4+0x468>
        /*Calculate 4 point of the circle */
        for(i = 0; i < 4; i++) {
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8015a50:	e02b      	b.n	8015aaa <circ_calc_aa4+0x156>
            circ_next(&cp, &tmp);
 8015a52:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8015a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015a5a:	4611      	mov	r1, r2
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f7ff ff2f 	bl	80158c0 <circ_next>
            if(circ_cont(&cp) == false) break;
 8015a62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015a66:	4618      	mov	r0, r3
 8015a68:	f7ff ff15 	bl	8015896 <circ_cont>
 8015a6c:	4603      	mov	r3, r0
 8015a6e:	f083 0301 	eor.w	r3, r3, #1
 8015a72:	b2db      	uxtb	r3, r3
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d11c      	bne.n	8015ab2 <circ_calc_aa4+0x15e>
            x_int[i] = cp.x >> 2;
 8015a78:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8015a7c:	109b      	asrs	r3, r3, #2
 8015a7e:	b21b      	sxth	r3, r3
 8015a80:	461a      	mov	r2, r3
 8015a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a84:	009b      	lsls	r3, r3, #2
 8015a86:	3358      	adds	r3, #88	; 0x58
 8015a88:	443b      	add	r3, r7
 8015a8a:	f843 2c3c 	str.w	r2, [r3, #-60]
            x_fract[i] = cp.x & 0x3;
 8015a8e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8015a92:	b29b      	uxth	r3, r3
 8015a94:	f003 0203 	and.w	r2, r3, #3
 8015a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a9a:	009b      	lsls	r3, r3, #2
 8015a9c:	3358      	adds	r3, #88	; 0x58
 8015a9e:	443b      	add	r3, r7
 8015aa0:	f843 2c4c 	str.w	r2, [r3, #-76]
        for(i = 0; i < 4; i++) {
 8015aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015aa6:	3301      	adds	r3, #1
 8015aa8:	653b      	str	r3, [r7, #80]	; 0x50
 8015aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015aac:	2b03      	cmp	r3, #3
 8015aae:	ddd0      	ble.n	8015a52 <circ_calc_aa4+0xfe>
 8015ab0:	e000      	b.n	8015ab4 <circ_calc_aa4+0x160>
            if(circ_cont(&cp) == false) break;
 8015ab2:	bf00      	nop
        }
        if(i != 4) break;
 8015ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ab6:	2b04      	cmp	r3, #4
 8015ab8:	f040 818a 	bne.w	8015dd0 <circ_calc_aa4+0x47c>

        /*All lines on the same x when downscaled*/
        if(x_int[0] == x_int[3]) {
 8015abc:	69fa      	ldr	r2, [r7, #28]
 8015abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ac0:	429a      	cmp	r2, r3
 8015ac2:	d139      	bne.n	8015b38 <circ_calc_aa4+0x1e4>
            cir_x[cir_size] = x_int[0];
 8015ac4:	69f9      	ldr	r1, [r7, #28]
 8015ac6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015aca:	005b      	lsls	r3, r3, #1
 8015acc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015ace:	4413      	add	r3, r2
 8015ad0:	b20a      	sxth	r2, r1
 8015ad2:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8015ad4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015ad8:	005b      	lsls	r3, r3, #1
 8015ada:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015adc:	4413      	add	r3, r2
 8015ade:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015ae0:	b212      	sxth	r2, r2
 8015ae2:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	b2da      	uxtb	r2, r3
 8015ae8:	693b      	ldr	r3, [r7, #16]
 8015aea:	b2db      	uxtb	r3, r3
 8015aec:	4413      	add	r3, r2
 8015aee:	b2da      	uxtb	r2, r3
 8015af0:	697b      	ldr	r3, [r7, #20]
 8015af2:	b2db      	uxtb	r3, r3
 8015af4:	4413      	add	r3, r2
 8015af6:	b2d9      	uxtb	r1, r3
 8015af8:	69bb      	ldr	r3, [r7, #24]
 8015afa:	b2da      	uxtb	r2, r3
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	6858      	ldr	r0, [r3, #4]
 8015b00:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015b04:	4403      	add	r3, r0
 8015b06:	440a      	add	r2, r1
 8015b08:	b2d2      	uxtb	r2, r2
 8015b0a:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	685a      	ldr	r2, [r3, #4]
 8015b10:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015b14:	4413      	add	r3, r2
 8015b16:	781a      	ldrb	r2, [r3, #0]
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	6859      	ldr	r1, [r3, #4]
 8015b1c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015b20:	440b      	add	r3, r1
 8015b22:	0112      	lsls	r2, r2, #4
 8015b24:	b2d2      	uxtb	r2, r2
 8015b26:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8015b28:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015b2c:	b29b      	uxth	r3, r3
 8015b2e:	3301      	adds	r3, #1
 8015b30:	b29b      	uxth	r3, r3
 8015b32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8015b36:	e13e      	b.n	8015db6 <circ_calc_aa4+0x462>
        }
        /*Second line on new x when downscaled*/
        else if(x_int[0] != x_int[1]) {
 8015b38:	69fa      	ldr	r2, [r7, #28]
 8015b3a:	6a3b      	ldr	r3, [r7, #32]
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	d067      	beq.n	8015c10 <circ_calc_aa4+0x2bc>
            cir_x[cir_size] = x_int[0];
 8015b40:	69f9      	ldr	r1, [r7, #28]
 8015b42:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015b46:	005b      	lsls	r3, r3, #1
 8015b48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015b4a:	4413      	add	r3, r2
 8015b4c:	b20a      	sxth	r2, r1
 8015b4e:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8015b50:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015b54:	005b      	lsls	r3, r3, #1
 8015b56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015b58:	4413      	add	r3, r2
 8015b5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015b5c:	b212      	sxth	r2, r2
 8015b5e:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0];
 8015b60:	68f9      	ldr	r1, [r7, #12]
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	685a      	ldr	r2, [r3, #4]
 8015b66:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015b6a:	4413      	add	r3, r2
 8015b6c:	b2ca      	uxtb	r2, r1
 8015b6e:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	685a      	ldr	r2, [r3, #4]
 8015b74:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015b78:	4413      	add	r3, r2
 8015b7a:	781a      	ldrb	r2, [r3, #0]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	6859      	ldr	r1, [r3, #4]
 8015b80:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015b84:	440b      	add	r3, r1
 8015b86:	0112      	lsls	r2, r2, #4
 8015b88:	b2d2      	uxtb	r2, r2
 8015b8a:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8015b8c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015b90:	b29b      	uxth	r3, r3
 8015b92:	3301      	adds	r3, #1
 8015b94:	b29b      	uxth	r3, r3
 8015b96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 8015b9a:	69fb      	ldr	r3, [r7, #28]
 8015b9c:	b29b      	uxth	r3, r3
 8015b9e:	3b01      	subs	r3, #1
 8015ba0:	b299      	uxth	r1, r3
 8015ba2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015ba6:	005b      	lsls	r3, r3, #1
 8015ba8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015baa:	4413      	add	r3, r2
 8015bac:	b20a      	sxth	r2, r1
 8015bae:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8015bb0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015bb4:	005b      	lsls	r3, r3, #1
 8015bb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015bb8:	4413      	add	r3, r2
 8015bba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015bbc:	b212      	sxth	r2, r2
 8015bbe:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 8015bc0:	693b      	ldr	r3, [r7, #16]
 8015bc2:	b2da      	uxtb	r2, r3
 8015bc4:	697b      	ldr	r3, [r7, #20]
 8015bc6:	b2db      	uxtb	r3, r3
 8015bc8:	4413      	add	r3, r2
 8015bca:	b2da      	uxtb	r2, r3
 8015bcc:	69bb      	ldr	r3, [r7, #24]
 8015bce:	b2db      	uxtb	r3, r3
 8015bd0:	4413      	add	r3, r2
 8015bd2:	b2da      	uxtb	r2, r3
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	6859      	ldr	r1, [r3, #4]
 8015bd8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015bdc:	440b      	add	r3, r1
 8015bde:	3204      	adds	r2, #4
 8015be0:	b2d2      	uxtb	r2, r2
 8015be2:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	685a      	ldr	r2, [r3, #4]
 8015be8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015bec:	4413      	add	r3, r2
 8015bee:	781a      	ldrb	r2, [r3, #0]
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	6859      	ldr	r1, [r3, #4]
 8015bf4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015bf8:	440b      	add	r3, r1
 8015bfa:	0112      	lsls	r2, r2, #4
 8015bfc:	b2d2      	uxtb	r2, r2
 8015bfe:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8015c00:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015c04:	b29b      	uxth	r3, r3
 8015c06:	3301      	adds	r3, #1
 8015c08:	b29b      	uxth	r3, r3
 8015c0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8015c0e:	e0d2      	b.n	8015db6 <circ_calc_aa4+0x462>
        }
        /*Third line on new x when downscaled*/
        else if(x_int[0] != x_int[2]) {
 8015c10:	69fa      	ldr	r2, [r7, #28]
 8015c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c14:	429a      	cmp	r2, r3
 8015c16:	d067      	beq.n	8015ce8 <circ_calc_aa4+0x394>
            cir_x[cir_size] = x_int[0];
 8015c18:	69f9      	ldr	r1, [r7, #28]
 8015c1a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015c1e:	005b      	lsls	r3, r3, #1
 8015c20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c22:	4413      	add	r3, r2
 8015c24:	b20a      	sxth	r2, r1
 8015c26:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8015c28:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015c2c:	005b      	lsls	r3, r3, #1
 8015c2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015c30:	4413      	add	r3, r2
 8015c32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015c34:	b212      	sxth	r2, r2
 8015c36:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1];
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	b2d9      	uxtb	r1, r3
 8015c3c:	693b      	ldr	r3, [r7, #16]
 8015c3e:	b2da      	uxtb	r2, r3
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	6858      	ldr	r0, [r3, #4]
 8015c44:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015c48:	4403      	add	r3, r0
 8015c4a:	440a      	add	r2, r1
 8015c4c:	b2d2      	uxtb	r2, r2
 8015c4e:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	685a      	ldr	r2, [r3, #4]
 8015c54:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015c58:	4413      	add	r3, r2
 8015c5a:	781a      	ldrb	r2, [r3, #0]
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	6859      	ldr	r1, [r3, #4]
 8015c60:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015c64:	440b      	add	r3, r1
 8015c66:	0112      	lsls	r2, r2, #4
 8015c68:	b2d2      	uxtb	r2, r2
 8015c6a:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8015c6c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015c70:	b29b      	uxth	r3, r3
 8015c72:	3301      	adds	r3, #1
 8015c74:	b29b      	uxth	r3, r3
 8015c76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 8015c7a:	69fb      	ldr	r3, [r7, #28]
 8015c7c:	b29b      	uxth	r3, r3
 8015c7e:	3b01      	subs	r3, #1
 8015c80:	b299      	uxth	r1, r3
 8015c82:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015c86:	005b      	lsls	r3, r3, #1
 8015c88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c8a:	4413      	add	r3, r2
 8015c8c:	b20a      	sxth	r2, r1
 8015c8e:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8015c90:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015c94:	005b      	lsls	r3, r3, #1
 8015c96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015c98:	4413      	add	r3, r2
 8015c9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015c9c:	b212      	sxth	r2, r2
 8015c9e:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 8015ca0:	697b      	ldr	r3, [r7, #20]
 8015ca2:	b2da      	uxtb	r2, r3
 8015ca4:	69bb      	ldr	r3, [r7, #24]
 8015ca6:	b2db      	uxtb	r3, r3
 8015ca8:	4413      	add	r3, r2
 8015caa:	b2da      	uxtb	r2, r3
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	6859      	ldr	r1, [r3, #4]
 8015cb0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015cb4:	440b      	add	r3, r1
 8015cb6:	3208      	adds	r2, #8
 8015cb8:	b2d2      	uxtb	r2, r2
 8015cba:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	685a      	ldr	r2, [r3, #4]
 8015cc0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015cc4:	4413      	add	r3, r2
 8015cc6:	781a      	ldrb	r2, [r3, #0]
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	6859      	ldr	r1, [r3, #4]
 8015ccc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015cd0:	440b      	add	r3, r1
 8015cd2:	0112      	lsls	r2, r2, #4
 8015cd4:	b2d2      	uxtb	r2, r2
 8015cd6:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8015cd8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015cdc:	b29b      	uxth	r3, r3
 8015cde:	3301      	adds	r3, #1
 8015ce0:	b29b      	uxth	r3, r3
 8015ce2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8015ce6:	e066      	b.n	8015db6 <circ_calc_aa4+0x462>
        }
        /*Forth line on new x when downscaled*/
        else {
            cir_x[cir_size] = x_int[0];
 8015ce8:	69f9      	ldr	r1, [r7, #28]
 8015cea:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015cee:	005b      	lsls	r3, r3, #1
 8015cf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015cf2:	4413      	add	r3, r2
 8015cf4:	b20a      	sxth	r2, r1
 8015cf6:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8015cf8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015cfc:	005b      	lsls	r3, r3, #1
 8015cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015d00:	4413      	add	r3, r2
 8015d02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015d04:	b212      	sxth	r2, r2
 8015d06:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2];
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	b2da      	uxtb	r2, r3
 8015d0c:	693b      	ldr	r3, [r7, #16]
 8015d0e:	b2db      	uxtb	r3, r3
 8015d10:	4413      	add	r3, r2
 8015d12:	b2d9      	uxtb	r1, r3
 8015d14:	697b      	ldr	r3, [r7, #20]
 8015d16:	b2da      	uxtb	r2, r3
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	6858      	ldr	r0, [r3, #4]
 8015d1c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015d20:	4403      	add	r3, r0
 8015d22:	440a      	add	r2, r1
 8015d24:	b2d2      	uxtb	r2, r2
 8015d26:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	685a      	ldr	r2, [r3, #4]
 8015d2c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015d30:	4413      	add	r3, r2
 8015d32:	781a      	ldrb	r2, [r3, #0]
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	6859      	ldr	r1, [r3, #4]
 8015d38:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015d3c:	440b      	add	r3, r1
 8015d3e:	0112      	lsls	r2, r2, #4
 8015d40:	b2d2      	uxtb	r2, r2
 8015d42:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8015d44:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015d48:	b29b      	uxth	r3, r3
 8015d4a:	3301      	adds	r3, #1
 8015d4c:	b29b      	uxth	r3, r3
 8015d4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

            cir_x[cir_size] = x_int[0] - 1;
 8015d52:	69fb      	ldr	r3, [r7, #28]
 8015d54:	b29b      	uxth	r3, r3
 8015d56:	3b01      	subs	r3, #1
 8015d58:	b299      	uxth	r1, r3
 8015d5a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015d5e:	005b      	lsls	r3, r3, #1
 8015d60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015d62:	4413      	add	r3, r2
 8015d64:	b20a      	sxth	r2, r1
 8015d66:	801a      	strh	r2, [r3, #0]
            cir_y[cir_size] = y_8th_cnt;
 8015d68:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015d6c:	005b      	lsls	r3, r3, #1
 8015d6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015d70:	4413      	add	r3, r2
 8015d72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015d74:	b212      	sxth	r2, r2
 8015d76:	801a      	strh	r2, [r3, #0]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 8015d78:	69bb      	ldr	r3, [r7, #24]
 8015d7a:	b2da      	uxtb	r2, r3
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	6859      	ldr	r1, [r3, #4]
 8015d80:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015d84:	440b      	add	r3, r1
 8015d86:	320c      	adds	r2, #12
 8015d88:	b2d2      	uxtb	r2, r2
 8015d8a:	701a      	strb	r2, [r3, #0]
            c->cir_opa[cir_size] *= 16;
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	685a      	ldr	r2, [r3, #4]
 8015d90:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015d94:	4413      	add	r3, r2
 8015d96:	781a      	ldrb	r2, [r3, #0]
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	6859      	ldr	r1, [r3, #4]
 8015d9c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015da0:	440b      	add	r3, r1
 8015da2:	0112      	lsls	r2, r2, #4
 8015da4:	b2d2      	uxtb	r2, r2
 8015da6:	701a      	strb	r2, [r3, #0]
            cir_size++;
 8015da8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015dac:	b29b      	uxth	r3, r3
 8015dae:	3301      	adds	r3, #1
 8015db0:	b29b      	uxth	r3, r3
 8015db2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }

        y_8th_cnt++;
 8015db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015db8:	3301      	adds	r3, #1
 8015dba:	657b      	str	r3, [r7, #84]	; 0x54
    while(circ_cont(&cp)) {
 8015dbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	f7ff fd68 	bl	8015896 <circ_cont>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	f47f ae3f 	bne.w	8015a4c <circ_calc_aa4+0xf8>
 8015dce:	e000      	b.n	8015dd2 <circ_calc_aa4+0x47e>
        if(i != 4) break;
 8015dd0:	bf00      	nop
    }

    /*The point on the 1/8 circle is special, calculate it manually*/
    int32_t mid = radius * 723;
 8015dd2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015dd6:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015dda:	fb02 f303 	mul.w	r3, r2, r3
 8015dde:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t mid_int = mid >> 10;
 8015de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015de2:	129b      	asrs	r3, r3, #10
 8015de4:	637b      	str	r3, [r7, #52]	; 0x34
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 8015de6:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015dea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015dee:	4413      	add	r3, r2
 8015df0:	005b      	lsls	r3, r3, #1
 8015df2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015df4:	4413      	add	r3, r2
 8015df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015dfa:	461a      	mov	r2, r3
 8015dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015dfe:	4293      	cmp	r3, r2
 8015e00:	d10d      	bne.n	8015e1e <circ_calc_aa4+0x4ca>
 8015e02:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015e06:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015e0a:	4413      	add	r3, r2
 8015e0c:	005b      	lsls	r3, r3, #1
 8015e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015e10:	4413      	add	r3, r2
 8015e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e16:	461a      	mov	r2, r3
 8015e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e1a:	4293      	cmp	r3, r2
 8015e1c:	d04e      	beq.n	8015ebc <circ_calc_aa4+0x568>
        int32_t tmp_val = mid - (mid_int << 10);
 8015e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e20:	029b      	lsls	r3, r3, #10
 8015e22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015e24:	1ad3      	subs	r3, r2, r3
 8015e26:	64bb      	str	r3, [r7, #72]	; 0x48
        if(tmp_val <= 512) {
 8015e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015e2e:	dc08      	bgt.n	8015e42 <circ_calc_aa4+0x4ee>
            tmp_val = tmp_val * tmp_val * 2;
 8015e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e32:	fb03 f303 	mul.w	r3, r3, r3
 8015e36:	005b      	lsls	r3, r3, #1
 8015e38:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val >> (10 + 6);
 8015e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e3c:	141b      	asrs	r3, r3, #16
 8015e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8015e40:	e00f      	b.n	8015e62 <circ_calc_aa4+0x50e>
        }
        else {
            tmp_val = 1024 - tmp_val;
 8015e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e44:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8015e48:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val * tmp_val * 2;
 8015e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e4c:	fb03 f303 	mul.w	r3, r3, r3
 8015e50:	005b      	lsls	r3, r3, #1
 8015e52:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = tmp_val >> (10 + 6);
 8015e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e56:	141b      	asrs	r3, r3, #16
 8015e58:	64bb      	str	r3, [r7, #72]	; 0x48
            tmp_val = 15 - tmp_val;
 8015e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e5c:	f1c3 030f 	rsb	r3, r3, #15
 8015e60:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        cir_x[cir_size] = mid_int;
 8015e62:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015e66:	005b      	lsls	r3, r3, #1
 8015e68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015e6a:	4413      	add	r3, r2
 8015e6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e6e:	b212      	sxth	r2, r2
 8015e70:	801a      	strh	r2, [r3, #0]
        cir_y[cir_size] = mid_int;
 8015e72:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015e76:	005b      	lsls	r3, r3, #1
 8015e78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015e7a:	4413      	add	r3, r2
 8015e7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e7e:	b212      	sxth	r2, r2
 8015e80:	801a      	strh	r2, [r3, #0]
        c->cir_opa[cir_size] = tmp_val;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	685a      	ldr	r2, [r3, #4]
 8015e86:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015e8a:	4413      	add	r3, r2
 8015e8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015e8e:	b2d2      	uxtb	r2, r2
 8015e90:	701a      	strb	r2, [r3, #0]
        c->cir_opa[cir_size] *= 16;
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	685a      	ldr	r2, [r3, #4]
 8015e96:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015e9a:	4413      	add	r3, r2
 8015e9c:	781a      	ldrb	r2, [r3, #0]
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	6859      	ldr	r1, [r3, #4]
 8015ea2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015ea6:	440b      	add	r3, r1
 8015ea8:	0112      	lsls	r2, r2, #4
 8015eaa:	b2d2      	uxtb	r2, r2
 8015eac:	701a      	strb	r2, [r3, #0]
        cir_size++;
 8015eae:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015eb2:	b29b      	uxth	r3, r3
 8015eb4:	3301      	adds	r3, #1
 8015eb6:	b29b      	uxth	r3, r3
 8015eb8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    /*Build the second octet by mirroring the first*/
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 8015ebc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015ec0:	3b02      	subs	r3, #2
 8015ec2:	653b      	str	r3, [r7, #80]	; 0x50
 8015ec4:	e02c      	b.n	8015f20 <circ_calc_aa4+0x5cc>
        cir_x[cir_size] = cir_y[i];
 8015ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ec8:	005b      	lsls	r3, r3, #1
 8015eca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015ecc:	441a      	add	r2, r3
 8015ece:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015ed2:	005b      	lsls	r3, r3, #1
 8015ed4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015ed6:	440b      	add	r3, r1
 8015ed8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015edc:	801a      	strh	r2, [r3, #0]
        cir_y[cir_size] = cir_x[i];
 8015ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ee0:	005b      	lsls	r3, r3, #1
 8015ee2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015ee4:	441a      	add	r2, r3
 8015ee6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015eea:	005b      	lsls	r3, r3, #1
 8015eec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015eee:	440b      	add	r3, r1
 8015ef0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ef4:	801a      	strh	r2, [r3, #0]
        c->cir_opa[cir_size] = c->cir_opa[i];
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	685a      	ldr	r2, [r3, #4]
 8015efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015efc:	441a      	add	r2, r3
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	6859      	ldr	r1, [r3, #4]
 8015f02:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015f06:	440b      	add	r3, r1
 8015f08:	7812      	ldrb	r2, [r2, #0]
 8015f0a:	701a      	strb	r2, [r3, #0]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 8015f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f0e:	3b01      	subs	r3, #1
 8015f10:	653b      	str	r3, [r7, #80]	; 0x50
 8015f12:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015f16:	b29b      	uxth	r3, r3
 8015f18:	3301      	adds	r3, #1
 8015f1a:	b29b      	uxth	r3, r3
 8015f1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8015f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	dacf      	bge.n	8015ec6 <circ_calc_aa4+0x572>
    }

    lv_coord_t y = 0;
 8015f26:	2300      	movs	r3, #0
 8015f28:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    i = 0;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	653b      	str	r3, [r7, #80]	; 0x50
    c->opa_start_on_y[0] = 0;
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	68db      	ldr	r3, [r3, #12]
 8015f34:	2200      	movs	r2, #0
 8015f36:	801a      	strh	r2, [r3, #0]
    while(i < cir_size) {
 8015f38:	e049      	b.n	8015fce <circ_calc_aa4+0x67a>
        c->opa_start_on_y[y] = i;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	68da      	ldr	r2, [r3, #12]
 8015f3e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8015f42:	005b      	lsls	r3, r3, #1
 8015f44:	4413      	add	r3, r2
 8015f46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015f48:	b292      	uxth	r2, r2
 8015f4a:	801a      	strh	r2, [r3, #0]
        c->x_start_on_y[y] = cir_x[i];
 8015f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f4e:	005b      	lsls	r3, r3, #1
 8015f50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015f52:	4413      	add	r3, r2
 8015f54:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	689a      	ldr	r2, [r3, #8]
 8015f5c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8015f60:	005b      	lsls	r3, r3, #1
 8015f62:	4413      	add	r3, r2
 8015f64:	b28a      	uxth	r2, r1
 8015f66:	801a      	strh	r2, [r3, #0]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8015f68:	e01b      	b.n	8015fa2 <circ_calc_aa4+0x64e>
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 8015f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f6c:	005b      	lsls	r3, r3, #1
 8015f6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015f70:	4413      	add	r3, r2
 8015f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f76:	4619      	mov	r1, r3
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	689a      	ldr	r2, [r3, #8]
 8015f7c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8015f80:	005b      	lsls	r3, r3, #1
 8015f82:	4413      	add	r3, r2
 8015f84:	881b      	ldrh	r3, [r3, #0]
 8015f86:	4299      	cmp	r1, r3
 8015f88:	bfa8      	it	ge
 8015f8a:	4619      	movge	r1, r3
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	689a      	ldr	r2, [r3, #8]
 8015f90:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8015f94:	005b      	lsls	r3, r3, #1
 8015f96:	4413      	add	r3, r2
 8015f98:	b28a      	uxth	r2, r1
 8015f9a:	801a      	strh	r2, [r3, #0]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 8015f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f9e:	3301      	adds	r3, #1
 8015fa0:	653b      	str	r3, [r7, #80]	; 0x50
 8015fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fa4:	005b      	lsls	r3, r3, #1
 8015fa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015fa8:	4413      	add	r3, r2
 8015faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015fae:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8015fb2:	429a      	cmp	r2, r3
 8015fb4:	d104      	bne.n	8015fc0 <circ_calc_aa4+0x66c>
 8015fb6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015fba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015fbc:	429a      	cmp	r2, r3
 8015fbe:	dbd4      	blt.n	8015f6a <circ_calc_aa4+0x616>
        }
        y++;
 8015fc0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8015fc4:	b29b      	uxth	r3, r3
 8015fc6:	3301      	adds	r3, #1
 8015fc8:	b29b      	uxth	r3, r3
 8015fca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    while(i < cir_size) {
 8015fce:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015fd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015fd4:	429a      	cmp	r2, r3
 8015fd6:	dbb0      	blt.n	8015f3a <circ_calc_aa4+0x5e6>
    }

    lv_mem_buf_release(cir_x);
 8015fd8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8015fda:	f00e f8c1 	bl	8024160 <lv_mem_buf_release>
 8015fde:	e000      	b.n	8015fe2 <circ_calc_aa4+0x68e>
    if(radius == 0) return;
 8015fe0:	bf00      	nop
}
 8015fe2:	3758      	adds	r7, #88	; 0x58
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	bd80      	pop	{r7, pc}

08015fe8 <get_next_line>:

static lv_opa_t * get_next_line(_lv_draw_mask_radius_circle_dsc_t * c, lv_coord_t y, lv_coord_t * len,
                                lv_coord_t * x_start)
{
 8015fe8:	b480      	push	{r7}
 8015fea:	b085      	sub	sp, #20
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	60f8      	str	r0, [r7, #12]
 8015ff0:	607a      	str	r2, [r7, #4]
 8015ff2:	603b      	str	r3, [r7, #0]
 8015ff4:	460b      	mov	r3, r1
 8015ff6:	817b      	strh	r3, [r7, #10]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	68da      	ldr	r2, [r3, #12]
 8015ffc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016000:	3301      	adds	r3, #1
 8016002:	005b      	lsls	r3, r3, #1
 8016004:	4413      	add	r3, r2
 8016006:	881a      	ldrh	r2, [r3, #0]
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	68d9      	ldr	r1, [r3, #12]
 801600c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016010:	005b      	lsls	r3, r3, #1
 8016012:	440b      	add	r3, r1
 8016014:	881b      	ldrh	r3, [r3, #0]
 8016016:	1ad3      	subs	r3, r2, r3
 8016018:	b29b      	uxth	r3, r3
 801601a:	b21a      	sxth	r2, r3
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	801a      	strh	r2, [r3, #0]
    *x_start = c->x_start_on_y[y];
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	689a      	ldr	r2, [r3, #8]
 8016024:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016028:	005b      	lsls	r3, r3, #1
 801602a:	4413      	add	r3, r2
 801602c:	881b      	ldrh	r3, [r3, #0]
 801602e:	b21a      	sxth	r2, r3
 8016030:	683b      	ldr	r3, [r7, #0]
 8016032:	801a      	strh	r2, [r3, #0]
    return &c->cir_opa[c->opa_start_on_y[y]];
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	685b      	ldr	r3, [r3, #4]
 8016038:	68fa      	ldr	r2, [r7, #12]
 801603a:	68d1      	ldr	r1, [r2, #12]
 801603c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8016040:	0052      	lsls	r2, r2, #1
 8016042:	440a      	add	r2, r1
 8016044:	8812      	ldrh	r2, [r2, #0]
 8016046:	4413      	add	r3, r2
}
 8016048:	4618      	mov	r0, r3
 801604a:	3714      	adds	r7, #20
 801604c:	46bd      	mov	sp, r7
 801604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016052:	4770      	bx	lr

08016054 <mask_mix>:


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
 8016054:	b480      	push	{r7}
 8016056:	b083      	sub	sp, #12
 8016058:	af00      	add	r7, sp, #0
 801605a:	4603      	mov	r3, r0
 801605c:	460a      	mov	r2, r1
 801605e:	71fb      	strb	r3, [r7, #7]
 8016060:	4613      	mov	r3, r2
 8016062:	71bb      	strb	r3, [r7, #6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8016064:	79bb      	ldrb	r3, [r7, #6]
 8016066:	2bfc      	cmp	r3, #252	; 0xfc
 8016068:	d901      	bls.n	801606e <mask_mix+0x1a>
 801606a:	79fb      	ldrb	r3, [r7, #7]
 801606c:	e010      	b.n	8016090 <mask_mix+0x3c>
    if(mask_new <= LV_OPA_MIN) return 0;
 801606e:	79bb      	ldrb	r3, [r7, #6]
 8016070:	2b02      	cmp	r3, #2
 8016072:	d801      	bhi.n	8016078 <mask_mix+0x24>
 8016074:	2300      	movs	r3, #0
 8016076:	e00b      	b.n	8016090 <mask_mix+0x3c>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8016078:	79fb      	ldrb	r3, [r7, #7]
 801607a:	79ba      	ldrb	r2, [r7, #6]
 801607c:	fb02 f303 	mul.w	r3, r2, r3
 8016080:	461a      	mov	r2, r3
 8016082:	4613      	mov	r3, r2
 8016084:	021b      	lsls	r3, r3, #8
 8016086:	4413      	add	r3, r2
 8016088:	01db      	lsls	r3, r3, #7
 801608a:	4413      	add	r3, r2
 801608c:	0ddb      	lsrs	r3, r3, #23
 801608e:	b2db      	uxtb	r3, r3
}
 8016090:	4618      	mov	r0, r3
 8016092:	370c      	adds	r7, #12
 8016094:	46bd      	mov	sp, r7
 8016096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801609a:	4770      	bx	lr

0801609c <lv_area_get_width>:
{
 801609c:	b480      	push	{r7}
 801609e:	b083      	sub	sp, #12
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80160aa:	b29a      	uxth	r2, r3
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80160b2:	b29b      	uxth	r3, r3
 80160b4:	1ad3      	subs	r3, r2, r3
 80160b6:	b29b      	uxth	r3, r3
 80160b8:	3301      	adds	r3, #1
 80160ba:	b29b      	uxth	r3, r3
 80160bc:	b21b      	sxth	r3, r3
}
 80160be:	4618      	mov	r0, r3
 80160c0:	370c      	adds	r7, #12
 80160c2:	46bd      	mov	sp, r7
 80160c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c8:	4770      	bx	lr

080160ca <lv_area_get_height>:
{
 80160ca:	b480      	push	{r7}
 80160cc:	b083      	sub	sp, #12
 80160ce:	af00      	add	r7, sp, #0
 80160d0:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80160d8:	b29a      	uxth	r2, r3
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80160e0:	b29b      	uxth	r3, r3
 80160e2:	1ad3      	subs	r3, r2, r3
 80160e4:	b29b      	uxth	r3, r3
 80160e6:	3301      	adds	r3, #1
 80160e8:	b29b      	uxth	r3, r3
 80160ea:	b21b      	sxth	r3, r3
}
 80160ec:	4618      	mov	r0, r3
 80160ee:	370c      	adds	r7, #12
 80160f0:	46bd      	mov	sp, r7
 80160f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f6:	4770      	bx	lr

080160f8 <lv_color_make>:
{
 80160f8:	b480      	push	{r7}
 80160fa:	b083      	sub	sp, #12
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	4603      	mov	r3, r0
 8016100:	71fb      	strb	r3, [r7, #7]
 8016102:	460b      	mov	r3, r1
 8016104:	71bb      	strb	r3, [r7, #6]
 8016106:	4613      	mov	r3, r2
 8016108:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801610a:	797b      	ldrb	r3, [r7, #5]
 801610c:	09db      	lsrs	r3, r3, #7
 801610e:	b2da      	uxtb	r2, r3
 8016110:	79bb      	ldrb	r3, [r7, #6]
 8016112:	09db      	lsrs	r3, r3, #7
 8016114:	b2db      	uxtb	r3, r3
 8016116:	4313      	orrs	r3, r2
 8016118:	b2da      	uxtb	r2, r3
 801611a:	79fb      	ldrb	r3, [r7, #7]
 801611c:	09db      	lsrs	r3, r3, #7
 801611e:	b2db      	uxtb	r3, r3
 8016120:	4313      	orrs	r3, r2
 8016122:	b2db      	uxtb	r3, r3
}
 8016124:	4618      	mov	r0, r3
 8016126:	370c      	adds	r7, #12
 8016128:	46bd      	mov	sp, r7
 801612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612e:	4770      	bx	lr

08016130 <lv_color_white>:
{
 8016130:	b580      	push	{r7, lr}
 8016132:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 8016134:	22ff      	movs	r2, #255	; 0xff
 8016136:	21ff      	movs	r1, #255	; 0xff
 8016138:	20ff      	movs	r0, #255	; 0xff
 801613a:	f7ff ffdd 	bl	80160f8 <lv_color_make>
 801613e:	4603      	mov	r3, r0
}
 8016140:	4618      	mov	r0, r3
 8016142:	bd80      	pop	{r7, pc}

08016144 <lv_color_black>:
{
 8016144:	b580      	push	{r7, lr}
 8016146:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 8016148:	2200      	movs	r2, #0
 801614a:	2100      	movs	r1, #0
 801614c:	2000      	movs	r0, #0
 801614e:	f7ff ffd3 	bl	80160f8 <lv_color_make>
 8016152:	4603      	mov	r3, r0
}
 8016154:	4618      	mov	r0, r3
 8016156:	bd80      	pop	{r7, pc}

08016158 <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 8016158:	b590      	push	{r4, r7, lr}
 801615a:	b083      	sub	sp, #12
 801615c:	af00      	add	r7, sp, #0
 801615e:	6078      	str	r0, [r7, #4]
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 8016160:	2130      	movs	r1, #48	; 0x30
 8016162:	6878      	ldr	r0, [r7, #4]
 8016164:	f00e fafa 	bl	802475c <lv_memset_00>
    dsc->bg_color = lv_color_white();
 8016168:	687c      	ldr	r4, [r7, #4]
 801616a:	f7ff ffe1 	bl	8016130 <lv_color_white>
 801616e:	7120      	strb	r0, [r4, #4]
    dsc->bg_grad.stops[0].color = lv_color_white();
 8016170:	687c      	ldr	r4, [r7, #4]
 8016172:	f7ff ffdd 	bl	8016130 <lv_color_white>
 8016176:	7160      	strb	r0, [r4, #5]
    dsc->bg_grad.stops[1].color = lv_color_black();
 8016178:	687c      	ldr	r4, [r7, #4]
 801617a:	f7ff ffe3 	bl	8016144 <lv_color_black>
 801617e:	71e0      	strb	r0, [r4, #7]
    dsc->bg_grad.stops[1].frac = 0xFF;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	22ff      	movs	r2, #255	; 0xff
 8016184:	721a      	strb	r2, [r3, #8]
    dsc->bg_grad.stops_count = 2;
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	2202      	movs	r2, #2
 801618a:	725a      	strb	r2, [r3, #9]
    dsc->border_color = lv_color_black();
 801618c:	687c      	ldr	r4, [r7, #4]
 801618e:	f7ff ffd9 	bl	8016144 <lv_color_black>
 8016192:	7620      	strb	r0, [r4, #24]
    dsc->shadow_color = lv_color_black();
 8016194:	687c      	ldr	r4, [r7, #4]
 8016196:	f7ff ffd5 	bl	8016144 <lv_color_black>
 801619a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	4a0e      	ldr	r2, [pc, #56]	; (80161dc <lv_draw_rect_dsc_init+0x84>)
 80161a2:	611a      	str	r2, [r3, #16]
    dsc->bg_opa = LV_OPA_COVER;
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	22ff      	movs	r2, #255	; 0xff
 80161a8:	70da      	strb	r2, [r3, #3]
    dsc->bg_img_opa = LV_OPA_COVER;
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	22ff      	movs	r2, #255	; 0xff
 80161ae:	755a      	strb	r2, [r3, #21]
    dsc->outline_opa = LV_OPA_COVER;
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	22ff      	movs	r2, #255	; 0xff
 80161b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    dsc->border_opa = LV_OPA_COVER;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	22ff      	movs	r2, #255	; 0xff
 80161bc:	771a      	strb	r2, [r3, #28]
    dsc->shadow_opa = LV_OPA_COVER;
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	22ff      	movs	r2, #255	; 0xff
 80161c2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    dsc->border_side = LV_BORDER_SIDE_FULL;
 80161c6:	687a      	ldr	r2, [r7, #4]
 80161c8:	7f53      	ldrb	r3, [r2, #29]
 80161ca:	210f      	movs	r1, #15
 80161cc:	f361 0345 	bfi	r3, r1, #1, #5
 80161d0:	7753      	strb	r3, [r2, #29]
}
 80161d2:	bf00      	nop
 80161d4:	370c      	adds	r7, #12
 80161d6:	46bd      	mov	sp, r7
 80161d8:	bd90      	pop	{r4, r7, pc}
 80161da:	bf00      	nop
 80161dc:	0802faa0 	.word	0x0802faa0

080161e0 <lv_draw_rect>:
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b084      	sub	sp, #16
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	60f8      	str	r0, [r7, #12]
 80161e8:	60b9      	str	r1, [r7, #8]
 80161ea:	607a      	str	r2, [r7, #4]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 80161ec:	6878      	ldr	r0, [r7, #4]
 80161ee:	f7ff ff6c 	bl	80160ca <lv_area_get_height>
 80161f2:	4603      	mov	r3, r0
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	dd0c      	ble.n	8016212 <lv_draw_rect+0x32>
 80161f8:	6878      	ldr	r0, [r7, #4]
 80161fa:	f7ff ff4f 	bl	801609c <lv_area_get_width>
 80161fe:	4603      	mov	r3, r0
 8016200:	2b00      	cmp	r3, #0
 8016202:	dd06      	ble.n	8016212 <lv_draw_rect+0x32>

    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	68db      	ldr	r3, [r3, #12]
 8016208:	687a      	ldr	r2, [r7, #4]
 801620a:	68b9      	ldr	r1, [r7, #8]
 801620c:	68f8      	ldr	r0, [r7, #12]
 801620e:	4798      	blx	r3
 8016210:	e000      	b.n	8016214 <lv_draw_rect+0x34>
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8016212:	bf00      	nop

    LV_ASSERT_MEM_INTEGRITY();
}
 8016214:	3710      	adds	r7, #16
 8016216:	46bd      	mov	sp, r7
 8016218:	bd80      	pop	{r7, pc}

0801621a <lv_draw_transform>:
 *   GLOBAL FUNCTIONS
 **********************/
void lv_draw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w,
                       lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 801621a:	b590      	push	{r4, r7, lr}
 801621c:	b08b      	sub	sp, #44	; 0x2c
 801621e:	af06      	add	r7, sp, #24
 8016220:	60f8      	str	r0, [r7, #12]
 8016222:	60b9      	str	r1, [r7, #8]
 8016224:	607a      	str	r2, [r7, #4]
 8016226:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_NULL(draw_ctx);
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d100      	bne.n	8016230 <lv_draw_transform+0x16>
 801622e:	e7fe      	b.n	801622e <lv_draw_transform+0x14>
    if(draw_ctx->draw_transform == NULL) {
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016234:	2b00      	cmp	r3, #0
 8016236:	d018      	beq.n	801626a <lv_draw_transform+0x50>
        LV_LOG_WARN("draw_ctx->draw_transform == NULL");
        return;
    }

    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801623c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016242:	9305      	str	r3, [sp, #20]
 8016244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016246:	9304      	str	r3, [sp, #16]
 8016248:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801624c:	9303      	str	r3, [sp, #12]
 801624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016250:	9302      	str	r3, [sp, #8]
 8016252:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016256:	9301      	str	r3, [sp, #4]
 8016258:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801625c:	9300      	str	r3, [sp, #0]
 801625e:	4613      	mov	r3, r2
 8016260:	687a      	ldr	r2, [r7, #4]
 8016262:	68b9      	ldr	r1, [r7, #8]
 8016264:	68f8      	ldr	r0, [r7, #12]
 8016266:	47a0      	blx	r4
 8016268:	e000      	b.n	801626c <lv_draw_transform+0x52>
        return;
 801626a:	bf00      	nop

}
 801626c:	3714      	adds	r7, #20
 801626e:	46bd      	mov	sp, r7
 8016270:	bd90      	pop	{r4, r7, pc}

08016272 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 8016272:	b580      	push	{r7, lr}
 8016274:	b088      	sub	sp, #32
 8016276:	af00      	add	r7, sp, #0
 8016278:	60f8      	str	r0, [r7, #12]
 801627a:	4608      	mov	r0, r1
 801627c:	4611      	mov	r1, r2
 801627e:	461a      	mov	r2, r3
 8016280:	4603      	mov	r3, r0
 8016282:	817b      	strh	r3, [r7, #10]
 8016284:	460b      	mov	r3, r1
 8016286:	813b      	strh	r3, [r7, #8]
 8016288:	4613      	mov	r3, r2
 801628a:	80fb      	strh	r3, [r7, #6]
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 801628c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d116      	bne.n	80162c2 <_lv_img_buf_get_transformed_area+0x50>
 8016294:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801629a:	d112      	bne.n	80162c2 <_lv_img_buf_get_transformed_area+0x50>
        res->x1 = 0;
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	2200      	movs	r2, #0
 80162a0:	801a      	strh	r2, [r3, #0]
        res->y1 = 0;
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	2200      	movs	r2, #0
 80162a6:	805a      	strh	r2, [r3, #2]
        res->x2 = w - 1;
 80162a8:	897b      	ldrh	r3, [r7, #10]
 80162aa:	3b01      	subs	r3, #1
 80162ac:	b29b      	uxth	r3, r3
 80162ae:	b21a      	sxth	r2, r3
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	809a      	strh	r2, [r3, #4]
        res->y2 = h - 1;
 80162b4:	893b      	ldrh	r3, [r7, #8]
 80162b6:	3b01      	subs	r3, #1
 80162b8:	b29b      	uxth	r3, r3
 80162ba:	b21a      	sxth	r2, r3
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	80da      	strh	r2, [r3, #6]
 80162c0:	e09c      	b.n	80163fc <_lv_img_buf_get_transformed_area+0x18a>
        return;
    }

    lv_point_t p[4] = {
 80162c2:	2300      	movs	r3, #0
 80162c4:	823b      	strh	r3, [r7, #16]
 80162c6:	2300      	movs	r3, #0
 80162c8:	827b      	strh	r3, [r7, #18]
 80162ca:	897b      	ldrh	r3, [r7, #10]
 80162cc:	82bb      	strh	r3, [r7, #20]
 80162ce:	2300      	movs	r3, #0
 80162d0:	82fb      	strh	r3, [r7, #22]
 80162d2:	2300      	movs	r3, #0
 80162d4:	833b      	strh	r3, [r7, #24]
 80162d6:	893b      	ldrh	r3, [r7, #8]
 80162d8:	837b      	strh	r3, [r7, #26]
 80162da:	897b      	ldrh	r3, [r7, #10]
 80162dc:	83bb      	strh	r3, [r7, #28]
 80162de:	893b      	ldrh	r3, [r7, #8]
 80162e0:	83fb      	strh	r3, [r7, #30]
        {0, 0},
        {w, 0},
        {0, h},
        {w, h},
    };
    lv_point_transform(&p[0], angle, zoom, pivot);
 80162e2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80162e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80162e8:	f107 0010 	add.w	r0, r7, #16
 80162ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ee:	f00c fdeb 	bl	8022ec8 <lv_point_transform>
    lv_point_transform(&p[1], angle, zoom, pivot);
 80162f2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80162f6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80162f8:	f107 0310 	add.w	r3, r7, #16
 80162fc:	1d18      	adds	r0, r3, #4
 80162fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016300:	f00c fde2 	bl	8022ec8 <lv_point_transform>
    lv_point_transform(&p[2], angle, zoom, pivot);
 8016304:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8016308:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801630a:	f107 0310 	add.w	r3, r7, #16
 801630e:	f103 0008 	add.w	r0, r3, #8
 8016312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016314:	f00c fdd8 	bl	8022ec8 <lv_point_transform>
    lv_point_transform(&p[3], angle, zoom, pivot);
 8016318:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801631c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801631e:	f107 0310 	add.w	r3, r7, #16
 8016322:	f103 000c 	add.w	r0, r3, #12
 8016326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016328:	f00c fdce 	bl	8022ec8 <lv_point_transform>
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 801632c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8016330:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8016334:	4293      	cmp	r3, r2
 8016336:	bfa8      	it	ge
 8016338:	4613      	movge	r3, r2
 801633a:	b21a      	sxth	r2, r3
 801633c:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8016340:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016344:	428b      	cmp	r3, r1
 8016346:	bfa8      	it	ge
 8016348:	460b      	movge	r3, r1
 801634a:	b21b      	sxth	r3, r3
 801634c:	4293      	cmp	r3, r2
 801634e:	bfa8      	it	ge
 8016350:	4613      	movge	r3, r2
 8016352:	b21b      	sxth	r3, r3
 8016354:	b29b      	uxth	r3, r3
 8016356:	3b02      	subs	r3, #2
 8016358:	b29b      	uxth	r3, r3
 801635a:	b21a      	sxth	r2, r3
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	801a      	strh	r2, [r3, #0]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 8016360:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8016364:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8016368:	4293      	cmp	r3, r2
 801636a:	bfb8      	it	lt
 801636c:	4613      	movlt	r3, r2
 801636e:	b21a      	sxth	r2, r3
 8016370:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8016374:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016378:	428b      	cmp	r3, r1
 801637a:	bfb8      	it	lt
 801637c:	460b      	movlt	r3, r1
 801637e:	b21b      	sxth	r3, r3
 8016380:	4293      	cmp	r3, r2
 8016382:	bfb8      	it	lt
 8016384:	4613      	movlt	r3, r2
 8016386:	b21b      	sxth	r3, r3
 8016388:	b29b      	uxth	r3, r3
 801638a:	3302      	adds	r3, #2
 801638c:	b29b      	uxth	r3, r3
 801638e:	b21a      	sxth	r2, r3
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	809a      	strh	r2, [r3, #4]
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 8016394:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8016398:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801639c:	4293      	cmp	r3, r2
 801639e:	bfa8      	it	ge
 80163a0:	4613      	movge	r3, r2
 80163a2:	b21a      	sxth	r2, r3
 80163a4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80163a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80163ac:	428b      	cmp	r3, r1
 80163ae:	bfa8      	it	ge
 80163b0:	460b      	movge	r3, r1
 80163b2:	b21b      	sxth	r3, r3
 80163b4:	4293      	cmp	r3, r2
 80163b6:	bfa8      	it	ge
 80163b8:	4613      	movge	r3, r2
 80163ba:	b21b      	sxth	r3, r3
 80163bc:	b29b      	uxth	r3, r3
 80163be:	3b02      	subs	r3, #2
 80163c0:	b29b      	uxth	r3, r3
 80163c2:	b21a      	sxth	r2, r3
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	805a      	strh	r2, [r3, #2]
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 80163c8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80163cc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80163d0:	4293      	cmp	r3, r2
 80163d2:	bfb8      	it	lt
 80163d4:	4613      	movlt	r3, r2
 80163d6:	b21a      	sxth	r2, r3
 80163d8:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80163dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80163e0:	428b      	cmp	r3, r1
 80163e2:	bfb8      	it	lt
 80163e4:	460b      	movlt	r3, r1
 80163e6:	b21b      	sxth	r3, r3
 80163e8:	4293      	cmp	r3, r2
 80163ea:	bfb8      	it	lt
 80163ec:	4613      	movlt	r3, r2
 80163ee:	b21b      	sxth	r3, r3
 80163f0:	b29b      	uxth	r3, r3
 80163f2:	3302      	adds	r3, #2
 80163f4:	b29b      	uxth	r3, r3
 80163f6:	b21a      	sxth	r2, r3
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	80da      	strh	r2, [r3, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 80163fc:	3720      	adds	r7, #32
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}
	...

08016404 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b088      	sub	sp, #32
 8016408:	af00      	add	r7, sp, #0
 801640a:	60f8      	str	r0, [r7, #12]
 801640c:	7239      	strb	r1, [r7, #8]
 801640e:	607a      	str	r2, [r7, #4]
    /*Is the image cached?*/
    _lv_img_cache_entry_t * cached_src = NULL;
 8016410:	2300      	movs	r3, #0
 8016412:	61fb      	str	r3, [r7, #28]
    }
    else {
        LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
    }
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
 8016414:	4b19      	ldr	r3, [pc, #100]	; (801647c <_lv_img_cache_open+0x78>)
 8016416:	61fb      	str	r3, [r7, #28]
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
 8016418:	f00b fddc 	bl	8021fd4 <lv_tick_get>
 801641c:	61b8      	str	r0, [r7, #24]
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 801641e:	69f8      	ldr	r0, [r7, #28]
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	7a3a      	ldrb	r2, [r7, #8]
 8016424:	68f9      	ldr	r1, [r7, #12]
 8016426:	f000 f8e9 	bl	80165fc <lv_img_decoder_open>
 801642a:	4603      	mov	r3, r0
 801642c:	75fb      	strb	r3, [r7, #23]
    if(open_res == LV_RES_INV) {
 801642e:	7dfb      	ldrb	r3, [r7, #23]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d109      	bne.n	8016448 <_lv_img_cache_open+0x44>
        LV_LOG_WARN("Image draw cannot open the image resource");
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 8016434:	212c      	movs	r1, #44	; 0x2c
 8016436:	69f8      	ldr	r0, [r7, #28]
 8016438:	f00e f990 	bl	802475c <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 801643c:	69fb      	ldr	r3, [r7, #28]
 801643e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016442:	629a      	str	r2, [r3, #40]	; 0x28
        return NULL;
 8016444:	2300      	movs	r3, #0
 8016446:	e014      	b.n	8016472 <_lv_img_cache_open+0x6e>
    }

    cached_src->life = 0;
 8016448:	69fb      	ldr	r3, [r7, #28]
 801644a:	2200      	movs	r2, #0
 801644c:	629a      	str	r2, [r3, #40]	; 0x28

    /*If `time_to_open` was not set in the open function set it here*/
    if(cached_src->dec_dsc.time_to_open == 0) {
 801644e:	69fb      	ldr	r3, [r7, #28]
 8016450:	69db      	ldr	r3, [r3, #28]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d105      	bne.n	8016462 <_lv_img_cache_open+0x5e>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8016456:	69b8      	ldr	r0, [r7, #24]
 8016458:	f00b fdd6 	bl	8022008 <lv_tick_elaps>
 801645c:	4602      	mov	r2, r0
 801645e:	69fb      	ldr	r3, [r7, #28]
 8016460:	61da      	str	r2, [r3, #28]
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8016462:	69fb      	ldr	r3, [r7, #28]
 8016464:	69db      	ldr	r3, [r3, #28]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d102      	bne.n	8016470 <_lv_img_cache_open+0x6c>
 801646a:	69fb      	ldr	r3, [r7, #28]
 801646c:	2201      	movs	r2, #1
 801646e:	61da      	str	r2, [r3, #28]

    return cached_src;
 8016470:	69fb      	ldr	r3, [r7, #28]
}
 8016472:	4618      	mov	r0, r3
 8016474:	3720      	adds	r7, #32
 8016476:	46bd      	mov	sp, r7
 8016478:	bd80      	pop	{r7, pc}
 801647a:	bf00      	nop
 801647c:	20000920 	.word	0x20000920

08016480 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 8016480:	b480      	push	{r7}
 8016482:	b083      	sub	sp, #12
 8016484:	af00      	add	r7, sp, #0
 8016486:	6078      	str	r0, [r7, #4]

            lv_memset_00(&cache[i], sizeof(_lv_img_cache_entry_t));
        }
    }
#endif
}
 8016488:	bf00      	nop
 801648a:	370c      	adds	r7, #12
 801648c:	46bd      	mov	sp, r7
 801648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016492:	4770      	bx	lr

08016494 <lv_memcpy_small>:
{
 8016494:	b480      	push	{r7}
 8016496:	b087      	sub	sp, #28
 8016498:	af00      	add	r7, sp, #0
 801649a:	60f8      	str	r0, [r7, #12]
 801649c:	60b9      	str	r1, [r7, #8]
 801649e:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = (uint8_t *)dst;
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	617b      	str	r3, [r7, #20]
    const uint8_t * s8 = (const uint8_t *)src;
 80164a4:	68bb      	ldr	r3, [r7, #8]
 80164a6:	613b      	str	r3, [r7, #16]
    while(len) {
 80164a8:	e00c      	b.n	80164c4 <lv_memcpy_small+0x30>
        *d8 = *s8;
 80164aa:	693b      	ldr	r3, [r7, #16]
 80164ac:	781a      	ldrb	r2, [r3, #0]
 80164ae:	697b      	ldr	r3, [r7, #20]
 80164b0:	701a      	strb	r2, [r3, #0]
        d8++;
 80164b2:	697b      	ldr	r3, [r7, #20]
 80164b4:	3301      	adds	r3, #1
 80164b6:	617b      	str	r3, [r7, #20]
        s8++;
 80164b8:	693b      	ldr	r3, [r7, #16]
 80164ba:	3301      	adds	r3, #1
 80164bc:	613b      	str	r3, [r7, #16]
        len--;
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	3b01      	subs	r3, #1
 80164c2:	607b      	str	r3, [r7, #4]
    while(len) {
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d1ef      	bne.n	80164aa <lv_memcpy_small+0x16>
    return dst;
 80164ca:	68fb      	ldr	r3, [r7, #12]
}
 80164cc:	4618      	mov	r0, r3
 80164ce:	371c      	adds	r7, #28
 80164d0:	46bd      	mov	sp, r7
 80164d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d6:	4770      	bx	lr

080164d8 <lv_color_make>:
{
 80164d8:	b480      	push	{r7}
 80164da:	b083      	sub	sp, #12
 80164dc:	af00      	add	r7, sp, #0
 80164de:	4603      	mov	r3, r0
 80164e0:	71fb      	strb	r3, [r7, #7]
 80164e2:	460b      	mov	r3, r1
 80164e4:	71bb      	strb	r3, [r7, #6]
 80164e6:	4613      	mov	r3, r2
 80164e8:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80164ea:	797b      	ldrb	r3, [r7, #5]
 80164ec:	09db      	lsrs	r3, r3, #7
 80164ee:	b2da      	uxtb	r2, r3
 80164f0:	79bb      	ldrb	r3, [r7, #6]
 80164f2:	09db      	lsrs	r3, r3, #7
 80164f4:	b2db      	uxtb	r3, r3
 80164f6:	4313      	orrs	r3, r2
 80164f8:	b2da      	uxtb	r2, r3
 80164fa:	79fb      	ldrb	r3, [r7, #7]
 80164fc:	09db      	lsrs	r3, r3, #7
 80164fe:	b2db      	uxtb	r3, r3
 8016500:	4313      	orrs	r3, r2
 8016502:	b2db      	uxtb	r3, r3
}
 8016504:	4618      	mov	r0, r3
 8016506:	370c      	adds	r7, #12
 8016508:	46bd      	mov	sp, r7
 801650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650e:	4770      	bx	lr

08016510 <_lv_img_decoder_init>:

/**
 * Initialize the image decoder module
 */
void _lv_img_decoder_init(void)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b082      	sub	sp, #8
 8016514:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 8016516:	2114      	movs	r1, #20
 8016518:	4810      	ldr	r0, [pc, #64]	; (801655c <_lv_img_decoder_init+0x4c>)
 801651a:	f00d fa4e 	bl	80239ba <_lv_ll_init>

    lv_img_decoder_t * decoder;

    /*Create a decoder for the built in color format*/
    decoder = lv_img_decoder_create();
 801651e:	f000 f96d 	bl	80167fc <lv_img_decoder_create>
 8016522:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MALLOC(decoder);
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d100      	bne.n	801652c <_lv_img_decoder_init+0x1c>
 801652a:	e7fe      	b.n	801652a <_lv_img_decoder_init+0x1a>
    if(decoder == NULL) {
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	2b00      	cmp	r3, #0
 8016530:	d010      	beq.n	8016554 <_lv_img_decoder_init+0x44>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
        return;
    }

    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 8016532:	490b      	ldr	r1, [pc, #44]	; (8016560 <_lv_img_decoder_init+0x50>)
 8016534:	6878      	ldr	r0, [r7, #4]
 8016536:	f000 f97d 	bl	8016834 <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 801653a:	490a      	ldr	r1, [pc, #40]	; (8016564 <_lv_img_decoder_init+0x54>)
 801653c:	6878      	ldr	r0, [r7, #4]
 801653e:	f000 f987 	bl	8016850 <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 8016542:	4909      	ldr	r1, [pc, #36]	; (8016568 <_lv_img_decoder_init+0x58>)
 8016544:	6878      	ldr	r0, [r7, #4]
 8016546:	f000 f991 	bl	801686c <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 801654a:	4908      	ldr	r1, [pc, #32]	; (801656c <_lv_img_decoder_init+0x5c>)
 801654c:	6878      	ldr	r0, [r7, #4]
 801654e:	f000 f99b 	bl	8016888 <lv_img_decoder_set_close_cb>
 8016552:	e000      	b.n	8016556 <_lv_img_decoder_init+0x46>
        return;
 8016554:	bf00      	nop
}
 8016556:	3708      	adds	r7, #8
 8016558:	46bd      	mov	sp, r7
 801655a:	bd80      	pop	{r7, pc}
 801655c:	20000904 	.word	0x20000904
 8016560:	080168a5 	.word	0x080168a5
 8016564:	080169f5 	.word	0x080169f5
 8016568:	08016cb9 	.word	0x08016cb9
 801656c:	08016ddd 	.word	0x08016ddd

08016570 <lv_img_decoder_get_info>:
 * @param src the image source. E.g. file name or variable.
 * @param header the image info will be stored here
 * @return LV_RES_OK: success; LV_RES_INV: wasn't able to get info about the image
 */
lv_res_t lv_img_decoder_get_info(const void * src, lv_img_header_t * header)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b086      	sub	sp, #24
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	6039      	str	r1, [r7, #0]
    lv_memset_00(header, sizeof(lv_img_header_t));
 801657a:	2104      	movs	r1, #4
 801657c:	6838      	ldr	r0, [r7, #0]
 801657e:	f00e f8ed 	bl	802475c <lv_memset_00>

    if(src == NULL) return LV_RES_INV;
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d101      	bne.n	801658c <lv_img_decoder_get_info+0x1c>
 8016588:	2300      	movs	r3, #0
 801658a:	e030      	b.n	80165ee <lv_img_decoder_get_info+0x7e>

    lv_img_src_t src_type = lv_img_src_get_type(src);
 801658c:	6878      	ldr	r0, [r7, #4]
 801658e:	f7fb ff76 	bl	801247e <lv_img_src_get_type>
 8016592:	4603      	mov	r3, r0
 8016594:	73fb      	strb	r3, [r7, #15]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8016596:	7bfb      	ldrb	r3, [r7, #15]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d107      	bne.n	80165ac <lv_img_decoder_get_info+0x3c>
        const lv_img_dsc_t * img_dsc = src;
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	60bb      	str	r3, [r7, #8]
        if(img_dsc->data == NULL) return LV_RES_INV;
 80165a0:	68bb      	ldr	r3, [r7, #8]
 80165a2:	689b      	ldr	r3, [r3, #8]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d101      	bne.n	80165ac <lv_img_decoder_get_info+0x3c>
 80165a8:	2300      	movs	r3, #0
 80165aa:	e020      	b.n	80165ee <lv_img_decoder_get_info+0x7e>
    }

    lv_res_t res = LV_RES_INV;
 80165ac:	2300      	movs	r3, #0
 80165ae:	75fb      	strb	r3, [r7, #23]
    lv_img_decoder_t * d;
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 80165b0:	4811      	ldr	r0, [pc, #68]	; (80165f8 <lv_img_decoder_get_info+0x88>)
 80165b2:	f00d fae0 	bl	8023b76 <_lv_ll_get_head>
 80165b6:	6138      	str	r0, [r7, #16]
 80165b8:	e013      	b.n	80165e2 <lv_img_decoder_get_info+0x72>
        if(d->info_cb) {
 80165ba:	693b      	ldr	r3, [r7, #16]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d00a      	beq.n	80165d8 <lv_img_decoder_get_info+0x68>
            res = d->info_cb(d, src, header);
 80165c2:	693b      	ldr	r3, [r7, #16]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	683a      	ldr	r2, [r7, #0]
 80165c8:	6879      	ldr	r1, [r7, #4]
 80165ca:	6938      	ldr	r0, [r7, #16]
 80165cc:	4798      	blx	r3
 80165ce:	4603      	mov	r3, r0
 80165d0:	75fb      	strb	r3, [r7, #23]
            if(res == LV_RES_OK) break;
 80165d2:	7dfb      	ldrb	r3, [r7, #23]
 80165d4:	2b01      	cmp	r3, #1
 80165d6:	d008      	beq.n	80165ea <lv_img_decoder_get_info+0x7a>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 80165d8:	6939      	ldr	r1, [r7, #16]
 80165da:	4807      	ldr	r0, [pc, #28]	; (80165f8 <lv_img_decoder_get_info+0x88>)
 80165dc:	f00d faed 	bl	8023bba <_lv_ll_get_next>
 80165e0:	6138      	str	r0, [r7, #16]
 80165e2:	693b      	ldr	r3, [r7, #16]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d1e8      	bne.n	80165ba <lv_img_decoder_get_info+0x4a>
 80165e8:	e000      	b.n	80165ec <lv_img_decoder_get_info+0x7c>
            if(res == LV_RES_OK) break;
 80165ea:	bf00      	nop
        }
    }

    return res;
 80165ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80165ee:	4618      	mov	r0, r3
 80165f0:	3718      	adds	r7, #24
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}
 80165f6:	bf00      	nop
 80165f8:	20000904 	.word	0x20000904

080165fc <lv_img_decoder_open>:

lv_res_t lv_img_decoder_open(lv_img_decoder_dsc_t * dsc, const void * src, lv_color_t color, int32_t frame_id)
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	b08a      	sub	sp, #40	; 0x28
 8016600:	af00      	add	r7, sp, #0
 8016602:	60f8      	str	r0, [r7, #12]
 8016604:	60b9      	str	r1, [r7, #8]
 8016606:	713a      	strb	r2, [r7, #4]
 8016608:	603b      	str	r3, [r7, #0]
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 801660a:	2128      	movs	r1, #40	; 0x28
 801660c:	68f8      	ldr	r0, [r7, #12]
 801660e:	f00e f8a5 	bl	802475c <lv_memset_00>

    if(src == NULL) return LV_RES_INV;
 8016612:	68bb      	ldr	r3, [r7, #8]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d101      	bne.n	801661c <lv_img_decoder_open+0x20>
 8016618:	2300      	movs	r3, #0
 801661a:	e096      	b.n	801674a <lv_img_decoder_open+0x14e>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 801661c:	68b8      	ldr	r0, [r7, #8]
 801661e:	f7fb ff2e 	bl	801247e <lv_img_src_get_type>
 8016622:	4603      	mov	r3, r0
 8016624:	77fb      	strb	r3, [r7, #31]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8016626:	7ffb      	ldrb	r3, [r7, #31]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d107      	bne.n	801663c <lv_img_decoder_open+0x40>
        const lv_img_dsc_t * img_dsc = src;
 801662c:	68bb      	ldr	r3, [r7, #8]
 801662e:	61bb      	str	r3, [r7, #24]
        if(img_dsc->data == NULL) return LV_RES_INV;
 8016630:	69bb      	ldr	r3, [r7, #24]
 8016632:	689b      	ldr	r3, [r3, #8]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d101      	bne.n	801663c <lv_img_decoder_open+0x40>
 8016638:	2300      	movs	r3, #0
 801663a:	e086      	b.n	801674a <lv_img_decoder_open+0x14e>
    }

    dsc->color    = color;
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	793a      	ldrb	r2, [r7, #4]
 8016640:	721a      	strb	r2, [r3, #8]
    dsc->src_type = src_type;
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	7ffa      	ldrb	r2, [r7, #31]
 8016646:	741a      	strb	r2, [r3, #16]
    dsc->frame_id = frame_id;
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	683a      	ldr	r2, [r7, #0]
 801664c:	60da      	str	r2, [r3, #12]

    if(dsc->src_type == LV_IMG_SRC_FILE) {
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	7c1b      	ldrb	r3, [r3, #16]
 8016652:	2b01      	cmp	r3, #1
 8016654:	d11d      	bne.n	8016692 <lv_img_decoder_open+0x96>
        size_t fnlen = strlen(src);
 8016656:	68b8      	ldr	r0, [r7, #8]
 8016658:	f7e9 fdf8 	bl	800024c <strlen>
 801665c:	6178      	str	r0, [r7, #20]
        dsc->src = lv_mem_alloc(fnlen + 1);
 801665e:	697b      	ldr	r3, [r7, #20]
 8016660:	3301      	adds	r3, #1
 8016662:	4618      	mov	r0, r3
 8016664:	f00d fc46 	bl	8023ef4 <lv_mem_alloc>
 8016668:	4602      	mov	r2, r0
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	605a      	str	r2, [r3, #4]
        LV_ASSERT_MALLOC(dsc->src);
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	685b      	ldr	r3, [r3, #4]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d100      	bne.n	8016678 <lv_img_decoder_open+0x7c>
 8016676:	e7fe      	b.n	8016676 <lv_img_decoder_open+0x7a>
        if(dsc->src == NULL) {
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	685b      	ldr	r3, [r3, #4]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d101      	bne.n	8016684 <lv_img_decoder_open+0x88>
            LV_LOG_WARN("lv_img_decoder_open: out of memory");
            return LV_RES_INV;
 8016680:	2300      	movs	r3, #0
 8016682:	e062      	b.n	801674a <lv_img_decoder_open+0x14e>
        }
        strcpy((char *)dsc->src, src);
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	685b      	ldr	r3, [r3, #4]
 8016688:	68b9      	ldr	r1, [r7, #8]
 801668a:	4618      	mov	r0, r3
 801668c:	f012 f910 	bl	80288b0 <strcpy>
 8016690:	e002      	b.n	8016698 <lv_img_decoder_open+0x9c>
    }
    else {
        dsc->src = src;
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	68ba      	ldr	r2, [r7, #8]
 8016696:	605a      	str	r2, [r3, #4]
    }

    lv_res_t res = LV_RES_INV;
 8016698:	2300      	movs	r3, #0
 801669a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    lv_img_decoder_t * decoder;
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 801669e:	482d      	ldr	r0, [pc, #180]	; (8016754 <lv_img_decoder_open+0x158>)
 80166a0:	f00d fa69 	bl	8023b76 <_lv_ll_get_head>
 80166a4:	6238      	str	r0, [r7, #32]
 80166a6:	e042      	b.n	801672e <lv_img_decoder_open+0x132>
        /*Info and Open callbacks are required*/
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 80166a8:	6a3b      	ldr	r3, [r7, #32]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d036      	beq.n	801671e <lv_img_decoder_open+0x122>
 80166b0:	6a3b      	ldr	r3, [r7, #32]
 80166b2:	685b      	ldr	r3, [r3, #4]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d032      	beq.n	801671e <lv_img_decoder_open+0x122>

        res = decoder->info_cb(decoder, src, &dsc->header);
 80166b8:	6a3b      	ldr	r3, [r7, #32]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	68fa      	ldr	r2, [r7, #12]
 80166be:	3214      	adds	r2, #20
 80166c0:	68b9      	ldr	r1, [r7, #8]
 80166c2:	6a38      	ldr	r0, [r7, #32]
 80166c4:	4798      	blx	r3
 80166c6:	4603      	mov	r3, r0
 80166c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(res != LV_RES_OK) continue;
 80166cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166d0:	2b01      	cmp	r3, #1
 80166d2:	d126      	bne.n	8016722 <lv_img_decoder_open+0x126>

        dsc->decoder = decoder;
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	6a3a      	ldr	r2, [r7, #32]
 80166d8:	601a      	str	r2, [r3, #0]
        res = decoder->open_cb(decoder, dsc);
 80166da:	6a3b      	ldr	r3, [r7, #32]
 80166dc:	685b      	ldr	r3, [r3, #4]
 80166de:	68f9      	ldr	r1, [r7, #12]
 80166e0:	6a38      	ldr	r0, [r7, #32]
 80166e2:	4798      	blx	r3
 80166e4:	4603      	mov	r3, r0
 80166e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /*Opened successfully. It is a good decoder for this image source*/
        if(res == LV_RES_OK) return res;
 80166ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166ee:	2b01      	cmp	r3, #1
 80166f0:	d102      	bne.n	80166f8 <lv_img_decoder_open+0xfc>
 80166f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166f6:	e028      	b.n	801674a <lv_img_decoder_open+0x14e>

        /*Prepare for the next loop*/
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	3314      	adds	r3, #20
 80166fc:	2104      	movs	r1, #4
 80166fe:	4618      	mov	r0, r3
 8016700:	f00e f82c 	bl	802475c <lv_memset_00>

        dsc->error_msg = NULL;
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	2200      	movs	r2, #0
 8016708:	621a      	str	r2, [r3, #32]
        dsc->img_data  = NULL;
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	2200      	movs	r2, #0
 801670e:	619a      	str	r2, [r3, #24]
        dsc->user_data = NULL;
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	2200      	movs	r2, #0
 8016714:	625a      	str	r2, [r3, #36]	; 0x24
        dsc->time_to_open = 0;
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	2200      	movs	r2, #0
 801671a:	61da      	str	r2, [r3, #28]
 801671c:	e002      	b.n	8016724 <lv_img_decoder_open+0x128>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 801671e:	bf00      	nop
 8016720:	e000      	b.n	8016724 <lv_img_decoder_open+0x128>
        if(res != LV_RES_OK) continue;
 8016722:	bf00      	nop
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8016724:	6a39      	ldr	r1, [r7, #32]
 8016726:	480b      	ldr	r0, [pc, #44]	; (8016754 <lv_img_decoder_open+0x158>)
 8016728:	f00d fa47 	bl	8023bba <_lv_ll_get_next>
 801672c:	6238      	str	r0, [r7, #32]
 801672e:	6a3b      	ldr	r3, [r7, #32]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d1b9      	bne.n	80166a8 <lv_img_decoder_open+0xac>
    }

    if(dsc->src_type == LV_IMG_SRC_FILE)
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	7c1b      	ldrb	r3, [r3, #16]
 8016738:	2b01      	cmp	r3, #1
 801673a:	d104      	bne.n	8016746 <lv_img_decoder_open+0x14a>
        lv_mem_free((void *)dsc->src);
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	685b      	ldr	r3, [r3, #4]
 8016740:	4618      	mov	r0, r3
 8016742:	f00d fc07 	bl	8023f54 <lv_mem_free>

    return res;
 8016746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801674a:	4618      	mov	r0, r3
 801674c:	3728      	adds	r7, #40	; 0x28
 801674e:	46bd      	mov	sp, r7
 8016750:	bd80      	pop	{r7, pc}
 8016752:	bf00      	nop
 8016754:	20000904 	.word	0x20000904

08016758 <lv_img_decoder_read_line>:
 * @param len number of pixels to read
 * @param buf store the data here
 * @return LV_RES_OK: success; LV_RES_INV: an error occurred
 */
lv_res_t lv_img_decoder_read_line(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8016758:	b590      	push	{r4, r7, lr}
 801675a:	b089      	sub	sp, #36	; 0x24
 801675c:	af02      	add	r7, sp, #8
 801675e:	60f8      	str	r0, [r7, #12]
 8016760:	4608      	mov	r0, r1
 8016762:	4611      	mov	r1, r2
 8016764:	461a      	mov	r2, r3
 8016766:	4603      	mov	r3, r0
 8016768:	817b      	strh	r3, [r7, #10]
 801676a:	460b      	mov	r3, r1
 801676c:	813b      	strh	r3, [r7, #8]
 801676e:	4613      	mov	r3, r2
 8016770:	80fb      	strh	r3, [r7, #6]
    lv_res_t res = LV_RES_INV;
 8016772:	2300      	movs	r3, #0
 8016774:	75fb      	strb	r3, [r7, #23]
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	689b      	ldr	r3, [r3, #8]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d012      	beq.n	80167a6 <lv_img_decoder_read_line+0x4e>
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	689c      	ldr	r4, [r3, #8]
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	6818      	ldr	r0, [r3, #0]
 801678a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 801678e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8016792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016794:	9301      	str	r3, [sp, #4]
 8016796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801679a:	9300      	str	r3, [sp, #0]
 801679c:	460b      	mov	r3, r1
 801679e:	68f9      	ldr	r1, [r7, #12]
 80167a0:	47a0      	blx	r4
 80167a2:	4603      	mov	r3, r0
 80167a4:	75fb      	strb	r3, [r7, #23]

    return res;
 80167a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80167a8:	4618      	mov	r0, r3
 80167aa:	371c      	adds	r7, #28
 80167ac:	46bd      	mov	sp, r7
 80167ae:	bd90      	pop	{r4, r7, pc}

080167b0 <lv_img_decoder_close>:
/**
 * Close a decoding session
 * @param dsc pointer to `lv_img_decoder_dsc_t` used in `lv_img_decoder_open`
 */
void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc)
{
 80167b0:	b580      	push	{r7, lr}
 80167b2:	b082      	sub	sp, #8
 80167b4:	af00      	add	r7, sp, #0
 80167b6:	6078      	str	r0, [r7, #4]
    if(dsc->decoder) {
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d018      	beq.n	80167f2 <lv_img_decoder_close+0x42>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	68db      	ldr	r3, [r3, #12]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d007      	beq.n	80167da <lv_img_decoder_close+0x2a>
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	68db      	ldr	r3, [r3, #12]
 80167d0:	687a      	ldr	r2, [r7, #4]
 80167d2:	6812      	ldr	r2, [r2, #0]
 80167d4:	6879      	ldr	r1, [r7, #4]
 80167d6:	4610      	mov	r0, r2
 80167d8:	4798      	blx	r3

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	7c1b      	ldrb	r3, [r3, #16]
 80167de:	2b01      	cmp	r3, #1
 80167e0:	d107      	bne.n	80167f2 <lv_img_decoder_close+0x42>
            lv_mem_free((void *)dsc->src);
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	685b      	ldr	r3, [r3, #4]
 80167e6:	4618      	mov	r0, r3
 80167e8:	f00d fbb4 	bl	8023f54 <lv_mem_free>
            dsc->src = NULL;
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	2200      	movs	r2, #0
 80167f0:	605a      	str	r2, [r3, #4]
        }
    }
}
 80167f2:	bf00      	nop
 80167f4:	3708      	adds	r7, #8
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd80      	pop	{r7, pc}
	...

080167fc <lv_img_decoder_create>:
/**
 * Create a new image decoder
 * @return pointer to the new image decoder
 */
lv_img_decoder_t * lv_img_decoder_create(void)
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b082      	sub	sp, #8
 8016800:	af00      	add	r7, sp, #0
    lv_img_decoder_t * decoder;
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 8016802:	480b      	ldr	r0, [pc, #44]	; (8016830 <lv_img_decoder_create+0x34>)
 8016804:	f00d f8f2 	bl	80239ec <_lv_ll_ins_head>
 8016808:	6078      	str	r0, [r7, #4]
    LV_ASSERT_MALLOC(decoder);
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	2b00      	cmp	r3, #0
 801680e:	d100      	bne.n	8016812 <lv_img_decoder_create+0x16>
 8016810:	e7fe      	b.n	8016810 <lv_img_decoder_create+0x14>
    if(decoder == NULL) return NULL;
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d101      	bne.n	801681c <lv_img_decoder_create+0x20>
 8016818:	2300      	movs	r3, #0
 801681a:	e004      	b.n	8016826 <lv_img_decoder_create+0x2a>

    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 801681c:	2114      	movs	r1, #20
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f00d ff9c 	bl	802475c <lv_memset_00>

    return decoder;
 8016824:	687b      	ldr	r3, [r7, #4]
}
 8016826:	4618      	mov	r0, r3
 8016828:	3708      	adds	r7, #8
 801682a:	46bd      	mov	sp, r7
 801682c:	bd80      	pop	{r7, pc}
 801682e:	bf00      	nop
 8016830:	20000904 	.word	0x20000904

08016834 <lv_img_decoder_set_info_cb>:
 * Set a callback to get information about the image
 * @param decoder pointer to an image decoder
 * @param info_cb a function to collect info about an image (fill an `lv_img_header_t` struct)
 */
void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb)
{
 8016834:	b480      	push	{r7}
 8016836:	b083      	sub	sp, #12
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
 801683c:	6039      	str	r1, [r7, #0]
    decoder->info_cb = info_cb;
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	683a      	ldr	r2, [r7, #0]
 8016842:	601a      	str	r2, [r3, #0]
}
 8016844:	bf00      	nop
 8016846:	370c      	adds	r7, #12
 8016848:	46bd      	mov	sp, r7
 801684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801684e:	4770      	bx	lr

08016850 <lv_img_decoder_set_open_cb>:
 * Set a callback to open an image
 * @param decoder pointer to an image decoder
 * @param open_cb a function to open an image
 */
void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb)
{
 8016850:	b480      	push	{r7}
 8016852:	b083      	sub	sp, #12
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
 8016858:	6039      	str	r1, [r7, #0]
    decoder->open_cb = open_cb;
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	683a      	ldr	r2, [r7, #0]
 801685e:	605a      	str	r2, [r3, #4]
}
 8016860:	bf00      	nop
 8016862:	370c      	adds	r7, #12
 8016864:	46bd      	mov	sp, r7
 8016866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686a:	4770      	bx	lr

0801686c <lv_img_decoder_set_read_line_cb>:
 * Set a callback to a decoded line of an image
 * @param decoder pointer to an image decoder
 * @param read_line_cb a function to read a line of an image
 */
void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb)
{
 801686c:	b480      	push	{r7}
 801686e:	b083      	sub	sp, #12
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
 8016874:	6039      	str	r1, [r7, #0]
    decoder->read_line_cb = read_line_cb;
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	683a      	ldr	r2, [r7, #0]
 801687a:	609a      	str	r2, [r3, #8]
}
 801687c:	bf00      	nop
 801687e:	370c      	adds	r7, #12
 8016880:	46bd      	mov	sp, r7
 8016882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016886:	4770      	bx	lr

08016888 <lv_img_decoder_set_close_cb>:
 * Set a callback to close a decoding session. E.g. close files and free other resources.
 * @param decoder pointer to an image decoder
 * @param close_cb a function to close a decoding session
 */
void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb)
{
 8016888:	b480      	push	{r7}
 801688a:	b083      	sub	sp, #12
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
 8016890:	6039      	str	r1, [r7, #0]
    decoder->close_cb = close_cb;
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	683a      	ldr	r2, [r7, #0]
 8016896:	60da      	str	r2, [r3, #12]
}
 8016898:	bf00      	nop
 801689a:	370c      	adds	r7, #12
 801689c:	46bd      	mov	sp, r7
 801689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a2:	4770      	bx	lr

080168a4 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b08a      	sub	sp, #40	; 0x28
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	60f8      	str	r0, [r7, #12]
 80168ac:	60b9      	str	r1, [r7, #8]
 80168ae:	607a      	str	r2, [r7, #4]
    LV_UNUSED(decoder); /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 80168b0:	68b8      	ldr	r0, [r7, #8]
 80168b2:	f7fb fde4 	bl	801247e <lv_img_src_get_type>
 80168b6:	4603      	mov	r3, r0
 80168b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(src_type == LV_IMG_SRC_VARIABLE) {
 80168bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d12f      	bne.n	8016924 <lv_img_decoder_built_in_info+0x80>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 80168c4:	68bb      	ldr	r3, [r7, #8]
 80168c6:	781b      	ldrb	r3, [r3, #0]
 80168c8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80168cc:	b2db      	uxtb	r3, r3
 80168ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 80168d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80168d6:	2b03      	cmp	r3, #3
 80168d8:	d903      	bls.n	80168e2 <lv_img_decoder_built_in_info+0x3e>
 80168da:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80168de:	2b14      	cmp	r3, #20
 80168e0:	d901      	bls.n	80168e6 <lv_img_decoder_built_in_info+0x42>
 80168e2:	2300      	movs	r3, #0
 80168e4:	e080      	b.n	80169e8 <lv_img_decoder_built_in_info+0x144>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 80168e6:	68bb      	ldr	r3, [r7, #8]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80168ee:	b299      	uxth	r1, r3
 80168f0:	687a      	ldr	r2, [r7, #4]
 80168f2:	6813      	ldr	r3, [r2, #0]
 80168f4:	f361 2394 	bfi	r3, r1, #10, #11
 80168f8:	6013      	str	r3, [r2, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 80168fa:	68bb      	ldr	r3, [r7, #8]
 80168fc:	885b      	ldrh	r3, [r3, #2]
 80168fe:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8016902:	b299      	uxth	r1, r3
 8016904:	687a      	ldr	r2, [r7, #4]
 8016906:	8853      	ldrh	r3, [r2, #2]
 8016908:	f361 134f 	bfi	r3, r1, #5, #11
 801690c:	8053      	strh	r3, [r2, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 801690e:	68bb      	ldr	r3, [r7, #8]
 8016910:	781b      	ldrb	r3, [r3, #0]
 8016912:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8016916:	b2d9      	uxtb	r1, r3
 8016918:	687a      	ldr	r2, [r7, #4]
 801691a:	7813      	ldrb	r3, [r2, #0]
 801691c:	f361 0304 	bfi	r3, r1, #0, #5
 8016920:	7013      	strb	r3, [r2, #0]
 8016922:	e060      	b.n	80169e6 <lv_img_decoder_built_in_info+0x142>
    }
    else if(src_type == LV_IMG_SRC_FILE) {
 8016924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016928:	2b01      	cmp	r3, #1
 801692a:	d143      	bne.n	80169b4 <lv_img_decoder_built_in_info+0x110>
        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 801692c:	68b8      	ldr	r0, [r7, #8]
 801692e:	f00c ffff 	bl	8023930 <lv_fs_get_ext>
 8016932:	4603      	mov	r3, r0
 8016934:	492e      	ldr	r1, [pc, #184]	; (80169f0 <lv_img_decoder_built_in_info+0x14c>)
 8016936:	4618      	mov	r0, r3
 8016938:	f7e9 fc7e 	bl	8000238 <strcmp>
 801693c:	4603      	mov	r3, r0
 801693e:	2b00      	cmp	r3, #0
 8016940:	d001      	beq.n	8016946 <lv_img_decoder_built_in_info+0xa2>
 8016942:	2300      	movs	r3, #0
 8016944:	e050      	b.n	80169e8 <lv_img_decoder_built_in_info+0x144>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 8016946:	f107 0318 	add.w	r3, r7, #24
 801694a:	2202      	movs	r2, #2
 801694c:	68b9      	ldr	r1, [r7, #8]
 801694e:	4618      	mov	r0, r3
 8016950:	f00c fd1e 	bl	8023390 <lv_fs_open>
 8016954:	4603      	mov	r3, r0
 8016956:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        if(res == LV_FS_RES_OK) {
 801695a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801695e:	2b00      	cmp	r3, #0
 8016960:	d118      	bne.n	8016994 <lv_img_decoder_built_in_info+0xf0>
            uint32_t rn;
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 8016962:	f107 0314 	add.w	r3, r7, #20
 8016966:	f107 0018 	add.w	r0, r7, #24
 801696a:	2204      	movs	r2, #4
 801696c:	6879      	ldr	r1, [r7, #4]
 801696e:	f00c fecd 	bl	802370c <lv_fs_read>
 8016972:	4603      	mov	r3, r0
 8016974:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            lv_fs_close(&f);
 8016978:	f107 0318 	add.w	r3, r7, #24
 801697c:	4618      	mov	r0, r3
 801697e:	f00c fd74 	bl	802346a <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 8016982:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016986:	2b00      	cmp	r3, #0
 8016988:	d102      	bne.n	8016990 <lv_img_decoder_built_in_info+0xec>
 801698a:	697b      	ldr	r3, [r7, #20]
 801698c:	2b04      	cmp	r3, #4
 801698e:	d001      	beq.n	8016994 <lv_img_decoder_built_in_info+0xf0>
                LV_LOG_WARN("Image get info get read file header");
                return LV_RES_INV;
 8016990:	2300      	movs	r3, #0
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8016992:	e029      	b.n	80169e8 <lv_img_decoder_built_in_info+0x144>
            }
        }

        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	781b      	ldrb	r3, [r3, #0]
 8016998:	f3c3 0304 	ubfx	r3, r3, #0, #5
 801699c:	b2db      	uxtb	r3, r3
 801699e:	2b03      	cmp	r3, #3
 80169a0:	d906      	bls.n	80169b0 <lv_img_decoder_built_in_info+0x10c>
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	781b      	ldrb	r3, [r3, #0]
 80169a6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80169aa:	b2db      	uxtb	r3, r3
 80169ac:	2b14      	cmp	r3, #20
 80169ae:	d91a      	bls.n	80169e6 <lv_img_decoder_built_in_info+0x142>
 80169b0:	2300      	movs	r3, #0
 80169b2:	e019      	b.n	80169e8 <lv_img_decoder_built_in_info+0x144>
    }
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 80169b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169b8:	2b02      	cmp	r3, #2
 80169ba:	d112      	bne.n	80169e2 <lv_img_decoder_built_in_info+0x13e>
        /*The size depend on the font but it is unknown here. It should be handled outside of the
         *function*/
        header->w = 1;
 80169bc:	687a      	ldr	r2, [r7, #4]
 80169be:	6813      	ldr	r3, [r2, #0]
 80169c0:	2101      	movs	r1, #1
 80169c2:	f361 2394 	bfi	r3, r1, #10, #11
 80169c6:	6013      	str	r3, [r2, #0]
        header->h = 1;
 80169c8:	687a      	ldr	r2, [r7, #4]
 80169ca:	8853      	ldrh	r3, [r2, #2]
 80169cc:	2101      	movs	r1, #1
 80169ce:	f361 134f 	bfi	r3, r1, #5, #11
 80169d2:	8053      	strh	r3, [r2, #2]
        /*Symbols always have transparent parts. Important because of cover check in the draw
         *function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 80169d4:	687a      	ldr	r2, [r7, #4]
 80169d6:	7813      	ldrb	r3, [r2, #0]
 80169d8:	210b      	movs	r1, #11
 80169da:	f361 0304 	bfi	r3, r1, #0, #5
 80169de:	7013      	strb	r3, [r2, #0]
 80169e0:	e001      	b.n	80169e6 <lv_img_decoder_built_in_info+0x142>
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
 80169e2:	2300      	movs	r3, #0
 80169e4:	e000      	b.n	80169e8 <lv_img_decoder_built_in_info+0x144>
    }
    return LV_RES_OK;
 80169e6:	2301      	movs	r3, #1
}
 80169e8:	4618      	mov	r0, r3
 80169ea:	3728      	adds	r7, #40	; 0x28
 80169ec:	46bd      	mov	sp, r7
 80169ee:	bd80      	pop	{r7, pc}
 80169f0:	080288e8 	.word	0x080288e8

080169f4 <lv_img_decoder_built_in_open>:
 * @param decoder the decoder where this function belongs
 * @param dsc pointer to decoder descriptor. `src`, `color` are already initialized in it.
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 80169f4:	b5b0      	push	{r4, r5, r7, lr}
 80169f6:	b08e      	sub	sp, #56	; 0x38
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
 80169fc:	6039      	str	r1, [r7, #0]
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 80169fe:	683b      	ldr	r3, [r7, #0]
 8016a00:	7c1b      	ldrb	r3, [r3, #16]
 8016a02:	2b01      	cmp	r3, #1
 8016a04:	d14a      	bne.n	8016a9c <lv_img_decoder_built_in_open+0xa8>
        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 8016a06:	683b      	ldr	r3, [r7, #0]
 8016a08:	685b      	ldr	r3, [r3, #4]
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	f00c ff90 	bl	8023930 <lv_fs_get_ext>
 8016a10:	4603      	mov	r3, r0
 8016a12:	499c      	ldr	r1, [pc, #624]	; (8016c84 <lv_img_decoder_built_in_open+0x290>)
 8016a14:	4618      	mov	r0, r3
 8016a16:	f7e9 fc0f 	bl	8000238 <strcmp>
 8016a1a:	4603      	mov	r3, r0
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d001      	beq.n	8016a24 <lv_img_decoder_built_in_open+0x30>
 8016a20:	2300      	movs	r3, #0
 8016a22:	e144      	b.n	8016cae <lv_img_decoder_built_in_open+0x2ba>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 8016a24:	683b      	ldr	r3, [r7, #0]
 8016a26:	6859      	ldr	r1, [r3, #4]
 8016a28:	f107 030c 	add.w	r3, r7, #12
 8016a2c:	2202      	movs	r2, #2
 8016a2e:	4618      	mov	r0, r3
 8016a30:	f00c fcae 	bl	8023390 <lv_fs_open>
 8016a34:	4603      	mov	r3, r0
 8016a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(res != LV_FS_RES_OK) {
 8016a3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d001      	beq.n	8016a46 <lv_img_decoder_built_in_open+0x52>
            LV_LOG_WARN("Built-in image decoder can't open the file");
            return LV_RES_INV;
 8016a42:	2300      	movs	r3, #0
 8016a44:	e133      	b.n	8016cae <lv_img_decoder_built_in_open+0x2ba>
        }

        /*If the file was open successfully save the file descriptor*/
        if(dsc->user_data == NULL) {
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d11b      	bne.n	8016a86 <lv_img_decoder_built_in_open+0x92>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8016a4e:	2014      	movs	r0, #20
 8016a50:	f00d fa50 	bl	8023ef4 <lv_mem_alloc>
 8016a54:	4602      	mov	r2, r0
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	625a      	str	r2, [r3, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8016a5a:	683b      	ldr	r3, [r7, #0]
 8016a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d100      	bne.n	8016a64 <lv_img_decoder_built_in_open+0x70>
 8016a62:	e7fe      	b.n	8016a62 <lv_img_decoder_built_in_open+0x6e>
            if(dsc->user_data == NULL) {
 8016a64:	683b      	ldr	r3, [r7, #0]
 8016a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d106      	bne.n	8016a7a <lv_img_decoder_built_in_open+0x86>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_fs_close(&f);
 8016a6c:	f107 030c 	add.w	r3, r7, #12
 8016a70:	4618      	mov	r0, r3
 8016a72:	f00c fcfa 	bl	802346a <lv_fs_close>
                return LV_RES_INV;
 8016a76:	2300      	movs	r3, #0
 8016a78:	e119      	b.n	8016cae <lv_img_decoder_built_in_open+0x2ba>
            }
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 8016a7a:	683b      	ldr	r3, [r7, #0]
 8016a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a7e:	2114      	movs	r1, #20
 8016a80:	4618      	mov	r0, r3
 8016a82:	f00d fe6b 	bl	802475c <lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8016a86:	683b      	ldr	r3, [r7, #0]
 8016a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a8a:	62bb      	str	r3, [r7, #40]	; 0x28
        lv_memcpy_small(&user_data->f, &f, sizeof(f));
 8016a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a8e:	f107 010c 	add.w	r1, r7, #12
 8016a92:	220c      	movs	r2, #12
 8016a94:	4618      	mov	r0, r3
 8016a96:	f7ff fcfd 	bl	8016494 <lv_memcpy_small>
 8016a9a:	e00a      	b.n	8016ab2 <lv_img_decoder_built_in_open+0xbe>
    }
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8016a9c:	683b      	ldr	r3, [r7, #0]
 8016a9e:	7c1b      	ldrb	r3, [r3, #16]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d106      	bne.n	8016ab2 <lv_img_decoder_built_in_open+0xbe>
        /*The variables should have valid data*/
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 8016aa4:	683b      	ldr	r3, [r7, #0]
 8016aa6:	685b      	ldr	r3, [r3, #4]
 8016aa8:	689b      	ldr	r3, [r3, #8]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d101      	bne.n	8016ab2 <lv_img_decoder_built_in_open+0xbe>
            return LV_RES_INV;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	e0fd      	b.n	8016cae <lv_img_decoder_built_in_open+0x2ba>
        }
    }

    lv_img_cf_t cf = dsc->header.cf;
 8016ab2:	683b      	ldr	r3, [r7, #0]
 8016ab4:	7d1b      	ldrb	r3, [r3, #20]
 8016ab6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8016aba:	b2db      	uxtb	r3, r3
 8016abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /*Process true color formats*/
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8016ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ac4:	2b04      	cmp	r3, #4
 8016ac6:	d00f      	beq.n	8016ae8 <lv_img_decoder_built_in_open+0xf4>
 8016ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016acc:	2b05      	cmp	r3, #5
 8016ace:	d00b      	beq.n	8016ae8 <lv_img_decoder_built_in_open+0xf4>
 8016ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ad4:	2b06      	cmp	r3, #6
 8016ad6:	d007      	beq.n	8016ae8 <lv_img_decoder_built_in_open+0xf4>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 8016ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016adc:	2b14      	cmp	r3, #20
 8016ade:	d003      	beq.n	8016ae8 <lv_img_decoder_built_in_open+0xf4>
 8016ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ae4:	2b0e      	cmp	r3, #14
 8016ae6:	d10c      	bne.n	8016b02 <lv_img_decoder_built_in_open+0x10e>
       cf == LV_IMG_CF_ALPHA_8BIT) {
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8016ae8:	683b      	ldr	r3, [r7, #0]
 8016aea:	7c1b      	ldrb	r3, [r3, #16]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d106      	bne.n	8016afe <lv_img_decoder_built_in_open+0x10a>
            /*In case of uncompressed formats the image stored in the ROM/RAM.
             *So simply give its pointer*/
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8016af0:	683b      	ldr	r3, [r7, #0]
 8016af2:	685b      	ldr	r3, [r3, #4]
 8016af4:	689a      	ldr	r2, [r3, #8]
 8016af6:	683b      	ldr	r3, [r7, #0]
 8016af8:	619a      	str	r2, [r3, #24]
            return LV_RES_OK;
 8016afa:	2301      	movs	r3, #1
 8016afc:	e0d7      	b.n	8016cae <lv_img_decoder_built_in_open+0x2ba>
        }
        else {
            /*If it's a file it need to be read line by line later*/
            return LV_RES_OK;
 8016afe:	2301      	movs	r3, #1
 8016b00:	e0d5      	b.n	8016cae <lv_img_decoder_built_in_open+0x2ba>
        }
    }
    /*Process indexed images. Build a palette*/
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 8016b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b06:	2b07      	cmp	r3, #7
 8016b08:	d00c      	beq.n	8016b24 <lv_img_decoder_built_in_open+0x130>
 8016b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b0e:	2b08      	cmp	r3, #8
 8016b10:	d008      	beq.n	8016b24 <lv_img_decoder_built_in_open+0x130>
 8016b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b16:	2b09      	cmp	r3, #9
 8016b18:	d004      	beq.n	8016b24 <lv_img_decoder_built_in_open+0x130>
 8016b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b1e:	2b0a      	cmp	r3, #10
 8016b20:	f040 80b2 	bne.w	8016c88 <lv_img_decoder_built_in_open+0x294>
            cf == LV_IMG_CF_INDEXED_8BIT) {
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 8016b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f7fb fc1b 	bl	8012364 <lv_img_cf_get_px_size>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        uint32_t palette_size = 1 << px_size;
 8016b34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016b38:	2201      	movs	r2, #1
 8016b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8016b3e:	623b      	str	r3, [r7, #32]

        /*Allocate the palette*/
        if(dsc->user_data == NULL) {
 8016b40:	683b      	ldr	r3, [r7, #0]
 8016b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d116      	bne.n	8016b76 <lv_img_decoder_built_in_open+0x182>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8016b48:	2014      	movs	r0, #20
 8016b4a:	f00d f9d3 	bl	8023ef4 <lv_mem_alloc>
 8016b4e:	4602      	mov	r2, r0
 8016b50:	683b      	ldr	r3, [r7, #0]
 8016b52:	625a      	str	r2, [r3, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 8016b54:	683b      	ldr	r3, [r7, #0]
 8016b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d100      	bne.n	8016b5e <lv_img_decoder_built_in_open+0x16a>
 8016b5c:	e7fe      	b.n	8016b5c <lv_img_decoder_built_in_open+0x168>
            if(dsc->user_data == NULL) {
 8016b5e:	683b      	ldr	r3, [r7, #0]
 8016b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d101      	bne.n	8016b6a <lv_img_decoder_built_in_open+0x176>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                return LV_RES_INV;
 8016b66:	2300      	movs	r3, #0
 8016b68:	e0a1      	b.n	8016cae <lv_img_decoder_built_in_open+0x2ba>
            }
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 8016b6a:	683b      	ldr	r3, [r7, #0]
 8016b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b6e:	2114      	movs	r1, #20
 8016b70:	4618      	mov	r0, r3
 8016b72:	f00d fdf3 	bl	802475c <lv_memset_00>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8016b76:	683b      	ldr	r3, [r7, #0]
 8016b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b7a:	61fb      	str	r3, [r7, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 8016b7c:	6a38      	ldr	r0, [r7, #32]
 8016b7e:	f00d f9b9 	bl	8023ef4 <lv_mem_alloc>
 8016b82:	4602      	mov	r2, r0
 8016b84:	69fb      	ldr	r3, [r7, #28]
 8016b86:	60da      	str	r2, [r3, #12]
        LV_ASSERT_MALLOC(user_data->palette);
 8016b88:	69fb      	ldr	r3, [r7, #28]
 8016b8a:	68db      	ldr	r3, [r3, #12]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d100      	bne.n	8016b92 <lv_img_decoder_built_in_open+0x19e>
 8016b90:	e7fe      	b.n	8016b90 <lv_img_decoder_built_in_open+0x19c>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 8016b92:	6a38      	ldr	r0, [r7, #32]
 8016b94:	f00d f9ae 	bl	8023ef4 <lv_mem_alloc>
 8016b98:	4602      	mov	r2, r0
 8016b9a:	69fb      	ldr	r3, [r7, #28]
 8016b9c:	611a      	str	r2, [r3, #16]
        LV_ASSERT_MALLOC(user_data->opa);
 8016b9e:	69fb      	ldr	r3, [r7, #28]
 8016ba0:	691b      	ldr	r3, [r3, #16]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d100      	bne.n	8016ba8 <lv_img_decoder_built_in_open+0x1b4>
 8016ba6:	e7fe      	b.n	8016ba6 <lv_img_decoder_built_in_open+0x1b2>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 8016ba8:	69fb      	ldr	r3, [r7, #28]
 8016baa:	68db      	ldr	r3, [r3, #12]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d003      	beq.n	8016bb8 <lv_img_decoder_built_in_open+0x1c4>
 8016bb0:	69fb      	ldr	r3, [r7, #28]
 8016bb2:	691b      	ldr	r3, [r3, #16]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d105      	bne.n	8016bc4 <lv_img_decoder_built_in_open+0x1d0>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_img_decoder_built_in_close(decoder, dsc);
 8016bb8:	6839      	ldr	r1, [r7, #0]
 8016bba:	6878      	ldr	r0, [r7, #4]
 8016bbc:	f000 f90e 	bl	8016ddc <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	e074      	b.n	8016cae <lv_img_decoder_built_in_open+0x2ba>
        }

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	7c1b      	ldrb	r3, [r3, #16]
 8016bc8:	2b01      	cmp	r3, #1
 8016bca:	d129      	bne.n	8016c20 <lv_img_decoder_built_in_open+0x22c>
            /*Read the palette from file*/
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 8016bcc:	69fb      	ldr	r3, [r7, #28]
 8016bce:	2200      	movs	r2, #0
 8016bd0:	2104      	movs	r1, #4
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	f00c fddf 	bl	8023796 <lv_fs_seek>
            lv_color32_t cur_color;
            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8016bd8:	2300      	movs	r3, #0
 8016bda:	637b      	str	r3, [r7, #52]	; 0x34
 8016bdc:	e01b      	b.n	8016c16 <lv_img_decoder_built_in_open+0x222>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 8016bde:	69f8      	ldr	r0, [r7, #28]
 8016be0:	f107 0108 	add.w	r1, r7, #8
 8016be4:	2300      	movs	r3, #0
 8016be6:	2204      	movs	r2, #4
 8016be8:	f00c fd90 	bl	802370c <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8016bec:	7ab8      	ldrb	r0, [r7, #10]
 8016bee:	7a79      	ldrb	r1, [r7, #9]
 8016bf0:	7a3d      	ldrb	r5, [r7, #8]
 8016bf2:	69fb      	ldr	r3, [r7, #28]
 8016bf4:	68da      	ldr	r2, [r3, #12]
 8016bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bf8:	18d4      	adds	r4, r2, r3
 8016bfa:	462a      	mov	r2, r5
 8016bfc:	f7ff fc6c 	bl	80164d8 <lv_color_make>
 8016c00:	4603      	mov	r3, r0
 8016c02:	7023      	strb	r3, [r4, #0]
                user_data->opa[i]     = cur_color.ch.alpha;
 8016c04:	69fb      	ldr	r3, [r7, #28]
 8016c06:	691a      	ldr	r2, [r3, #16]
 8016c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c0a:	4413      	add	r3, r2
 8016c0c:	7afa      	ldrb	r2, [r7, #11]
 8016c0e:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8016c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c12:	3301      	adds	r3, #1
 8016c14:	637b      	str	r3, [r7, #52]	; 0x34
 8016c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016c18:	6a3b      	ldr	r3, [r7, #32]
 8016c1a:	429a      	cmp	r2, r3
 8016c1c:	d3df      	bcc.n	8016bde <lv_img_decoder_built_in_open+0x1ea>
 8016c1e:	e02f      	b.n	8016c80 <lv_img_decoder_built_in_open+0x28c>
            }
        }
        else {
            /*The palette begins in the beginning of the image data. Just point to it.*/
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 8016c20:	683b      	ldr	r3, [r7, #0]
 8016c22:	685b      	ldr	r3, [r3, #4]
 8016c24:	689b      	ldr	r3, [r3, #8]
 8016c26:	61bb      	str	r3, [r7, #24]

            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 8016c28:	2300      	movs	r3, #0
 8016c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8016c2c:	e024      	b.n	8016c78 <lv_img_decoder_built_in_open+0x284>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8016c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c30:	009b      	lsls	r3, r3, #2
 8016c32:	69ba      	ldr	r2, [r7, #24]
 8016c34:	4413      	add	r3, r2
 8016c36:	7898      	ldrb	r0, [r3, #2]
 8016c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c3a:	009b      	lsls	r3, r3, #2
 8016c3c:	69ba      	ldr	r2, [r7, #24]
 8016c3e:	4413      	add	r3, r2
 8016c40:	7859      	ldrb	r1, [r3, #1]
 8016c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c44:	009b      	lsls	r3, r3, #2
 8016c46:	69ba      	ldr	r2, [r7, #24]
 8016c48:	4413      	add	r3, r2
 8016c4a:	781d      	ldrb	r5, [r3, #0]
 8016c4c:	69fb      	ldr	r3, [r7, #28]
 8016c4e:	68da      	ldr	r2, [r3, #12]
 8016c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c52:	18d4      	adds	r4, r2, r3
 8016c54:	462a      	mov	r2, r5
 8016c56:	f7ff fc3f 	bl	80164d8 <lv_color_make>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	7023      	strb	r3, [r4, #0]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 8016c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c60:	009b      	lsls	r3, r3, #2
 8016c62:	69ba      	ldr	r2, [r7, #24]
 8016c64:	441a      	add	r2, r3
 8016c66:	69fb      	ldr	r3, [r7, #28]
 8016c68:	6919      	ldr	r1, [r3, #16]
 8016c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c6c:	440b      	add	r3, r1
 8016c6e:	78d2      	ldrb	r2, [r2, #3]
 8016c70:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < palette_size; i++) {
 8016c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c74:	3301      	adds	r3, #1
 8016c76:	633b      	str	r3, [r7, #48]	; 0x30
 8016c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c7a:	6a3b      	ldr	r3, [r7, #32]
 8016c7c:	429a      	cmp	r2, r3
 8016c7e:	d3d6      	bcc.n	8016c2e <lv_img_decoder_built_in_open+0x23a>
            }
        }

        return LV_RES_OK;
 8016c80:	2301      	movs	r3, #1
 8016c82:	e014      	b.n	8016cae <lv_img_decoder_built_in_open+0x2ba>
 8016c84:	080288e8 	.word	0x080288e8
    }
    /*Alpha indexed images.*/
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT) {
 8016c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c8c:	2b0b      	cmp	r3, #11
 8016c8e:	d007      	beq.n	8016ca0 <lv_img_decoder_built_in_open+0x2ac>
 8016c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c94:	2b0c      	cmp	r3, #12
 8016c96:	d003      	beq.n	8016ca0 <lv_img_decoder_built_in_open+0x2ac>
 8016c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c9c:	2b0d      	cmp	r3, #13
 8016c9e:	d101      	bne.n	8016ca4 <lv_img_decoder_built_in_open+0x2b0>
        return LV_RES_OK; /*Nothing to process*/
 8016ca0:	2301      	movs	r3, #1
 8016ca2:	e004      	b.n	8016cae <lv_img_decoder_built_in_open+0x2ba>
    }
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);
 8016ca4:	6839      	ldr	r1, [r7, #0]
 8016ca6:	6878      	ldr	r0, [r7, #4]
 8016ca8:	f000 f898 	bl	8016ddc <lv_img_decoder_built_in_close>

        LV_LOG_WARN("Image decoder open: unknown color format");
        return LV_RES_INV;
 8016cac:	2300      	movs	r3, #0
    }
}
 8016cae:	4618      	mov	r0, r3
 8016cb0:	3738      	adds	r7, #56	; 0x38
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8016cb6:	bf00      	nop

08016cb8 <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                           lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b088      	sub	sp, #32
 8016cbc:	af02      	add	r7, sp, #8
 8016cbe:	60f8      	str	r0, [r7, #12]
 8016cc0:	60b9      	str	r1, [r7, #8]
 8016cc2:	4611      	mov	r1, r2
 8016cc4:	461a      	mov	r2, r3
 8016cc6:	460b      	mov	r3, r1
 8016cc8:	80fb      	strh	r3, [r7, #6]
 8016cca:	4613      	mov	r3, r2
 8016ccc:	80bb      	strh	r3, [r7, #4]
    LV_UNUSED(decoder); /*Unused*/

    lv_res_t res = LV_RES_INV;
 8016cce:	2300      	movs	r3, #0
 8016cd0:	75fb      	strb	r3, [r7, #23]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8016cd2:	68bb      	ldr	r3, [r7, #8]
 8016cd4:	7d1b      	ldrb	r3, [r3, #20]
 8016cd6:	f003 031f 	and.w	r3, r3, #31
 8016cda:	b2db      	uxtb	r3, r3
 8016cdc:	2b04      	cmp	r3, #4
 8016cde:	d00d      	beq.n	8016cfc <lv_img_decoder_built_in_read_line+0x44>
 8016ce0:	68bb      	ldr	r3, [r7, #8]
 8016ce2:	7d1b      	ldrb	r3, [r3, #20]
 8016ce4:	f003 031f 	and.w	r3, r3, #31
 8016ce8:	b2db      	uxtb	r3, r3
 8016cea:	2b05      	cmp	r3, #5
 8016cec:	d006      	beq.n	8016cfc <lv_img_decoder_built_in_read_line+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8016cee:	68bb      	ldr	r3, [r7, #8]
 8016cf0:	7d1b      	ldrb	r3, [r3, #20]
 8016cf2:	f003 031f 	and.w	r3, r3, #31
 8016cf6:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8016cf8:	2b06      	cmp	r3, #6
 8016cfa:	d112      	bne.n	8016d22 <lv_img_decoder_built_in_read_line+0x6a>
        /*For TRUE_COLOR images read line required only for files.
         *For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8016cfc:	68bb      	ldr	r3, [r7, #8]
 8016cfe:	7c1b      	ldrb	r3, [r3, #16]
 8016d00:	2b01      	cmp	r3, #1
 8016d02:	d166      	bne.n	8016dd2 <lv_img_decoder_built_in_read_line+0x11a>
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 8016d04:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8016d08:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8016d0c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8016d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d12:	9300      	str	r3, [sp, #0]
 8016d14:	4603      	mov	r3, r0
 8016d16:	68b8      	ldr	r0, [r7, #8]
 8016d18:	f000 f88f 	bl	8016e3a <lv_img_decoder_built_in_line_true_color>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	75fb      	strb	r3, [r7, #23]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8016d20:	e057      	b.n	8016dd2 <lv_img_decoder_built_in_read_line+0x11a>
        }
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8016d22:	68bb      	ldr	r3, [r7, #8]
 8016d24:	7d1b      	ldrb	r3, [r3, #20]
 8016d26:	f003 031f 	and.w	r3, r3, #31
 8016d2a:	b2db      	uxtb	r3, r3
 8016d2c:	2b0b      	cmp	r3, #11
 8016d2e:	d014      	beq.n	8016d5a <lv_img_decoder_built_in_read_line+0xa2>
 8016d30:	68bb      	ldr	r3, [r7, #8]
 8016d32:	7d1b      	ldrb	r3, [r3, #20]
 8016d34:	f003 031f 	and.w	r3, r3, #31
 8016d38:	b2db      	uxtb	r3, r3
 8016d3a:	2b0c      	cmp	r3, #12
 8016d3c:	d00d      	beq.n	8016d5a <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8016d3e:	68bb      	ldr	r3, [r7, #8]
 8016d40:	7d1b      	ldrb	r3, [r3, #20]
 8016d42:	f003 031f 	and.w	r3, r3, #31
 8016d46:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 8016d48:	2b0d      	cmp	r3, #13
 8016d4a:	d006      	beq.n	8016d5a <lv_img_decoder_built_in_read_line+0xa2>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8016d4c:	68bb      	ldr	r3, [r7, #8]
 8016d4e:	7d1b      	ldrb	r3, [r3, #20]
 8016d50:	f003 031f 	and.w	r3, r3, #31
 8016d54:	b2db      	uxtb	r3, r3
 8016d56:	2b0e      	cmp	r3, #14
 8016d58:	d10e      	bne.n	8016d78 <lv_img_decoder_built_in_read_line+0xc0>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 8016d5a:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8016d5e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8016d62:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8016d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d68:	9300      	str	r3, [sp, #0]
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	68b8      	ldr	r0, [r7, #8]
 8016d6e:	f000 f8c3 	bl	8016ef8 <lv_img_decoder_built_in_line_alpha>
 8016d72:	4603      	mov	r3, r0
 8016d74:	75fb      	strb	r3, [r7, #23]
 8016d76:	e02c      	b.n	8016dd2 <lv_img_decoder_built_in_read_line+0x11a>
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8016d78:	68bb      	ldr	r3, [r7, #8]
 8016d7a:	7d1b      	ldrb	r3, [r3, #20]
 8016d7c:	f003 031f 	and.w	r3, r3, #31
 8016d80:	b2db      	uxtb	r3, r3
 8016d82:	2b07      	cmp	r3, #7
 8016d84:	d014      	beq.n	8016db0 <lv_img_decoder_built_in_read_line+0xf8>
 8016d86:	68bb      	ldr	r3, [r7, #8]
 8016d88:	7d1b      	ldrb	r3, [r3, #20]
 8016d8a:	f003 031f 	and.w	r3, r3, #31
 8016d8e:	b2db      	uxtb	r3, r3
 8016d90:	2b08      	cmp	r3, #8
 8016d92:	d00d      	beq.n	8016db0 <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8016d94:	68bb      	ldr	r3, [r7, #8]
 8016d96:	7d1b      	ldrb	r3, [r3, #20]
 8016d98:	f003 031f 	and.w	r3, r3, #31
 8016d9c:	b2db      	uxtb	r3, r3
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 8016d9e:	2b09      	cmp	r3, #9
 8016da0:	d006      	beq.n	8016db0 <lv_img_decoder_built_in_read_line+0xf8>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8016da2:	68bb      	ldr	r3, [r7, #8]
 8016da4:	7d1b      	ldrb	r3, [r3, #20]
 8016da6:	f003 031f 	and.w	r3, r3, #31
 8016daa:	b2db      	uxtb	r3, r3
 8016dac:	2b0a      	cmp	r3, #10
 8016dae:	d10e      	bne.n	8016dce <lv_img_decoder_built_in_read_line+0x116>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 8016db0:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8016db4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8016db8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8016dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dbe:	9300      	str	r3, [sp, #0]
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	68b8      	ldr	r0, [r7, #8]
 8016dc4:	f000 fa0a 	bl	80171dc <lv_img_decoder_built_in_line_indexed>
 8016dc8:	4603      	mov	r3, r0
 8016dca:	75fb      	strb	r3, [r7, #23]
 8016dcc:	e001      	b.n	8016dd2 <lv_img_decoder_built_in_read_line+0x11a>
    }
    else {
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
 8016dce:	2300      	movs	r3, #0
 8016dd0:	e000      	b.n	8016dd4 <lv_img_decoder_built_in_read_line+0x11c>
    }

    return res;
 8016dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	3718      	adds	r7, #24
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	bd80      	pop	{r7, pc}

08016ddc <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b084      	sub	sp, #16
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
 8016de4:	6039      	str	r1, [r7, #0]
    LV_UNUSED(decoder); /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8016de6:	683b      	ldr	r3, [r7, #0]
 8016de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dea:	60fb      	str	r3, [r7, #12]
    if(user_data) {
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d01f      	beq.n	8016e32 <lv_img_decoder_built_in_close+0x56>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8016df2:	683b      	ldr	r3, [r7, #0]
 8016df4:	7c1b      	ldrb	r3, [r3, #16]
 8016df6:	2b01      	cmp	r3, #1
 8016df8:	d103      	bne.n	8016e02 <lv_img_decoder_built_in_close+0x26>
            lv_fs_close(&user_data->f);
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f00c fb34 	bl	802346a <lv_fs_close>
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	68db      	ldr	r3, [r3, #12]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d004      	beq.n	8016e14 <lv_img_decoder_built_in_close+0x38>
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	68db      	ldr	r3, [r3, #12]
 8016e0e:	4618      	mov	r0, r3
 8016e10:	f00d f8a0 	bl	8023f54 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	691b      	ldr	r3, [r3, #16]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d004      	beq.n	8016e26 <lv_img_decoder_built_in_close+0x4a>
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	691b      	ldr	r3, [r3, #16]
 8016e20:	4618      	mov	r0, r3
 8016e22:	f00d f897 	bl	8023f54 <lv_mem_free>

        lv_mem_free(user_data);
 8016e26:	68f8      	ldr	r0, [r7, #12]
 8016e28:	f00d f894 	bl	8023f54 <lv_mem_free>
        dsc->user_data = NULL;
 8016e2c:	683b      	ldr	r3, [r7, #0]
 8016e2e:	2200      	movs	r2, #0
 8016e30:	625a      	str	r2, [r3, #36]	; 0x24
    }
}
 8016e32:	bf00      	nop
 8016e34:	3710      	adds	r7, #16
 8016e36:	46bd      	mov	sp, r7
 8016e38:	bd80      	pop	{r7, pc}

08016e3a <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 8016e3a:	b580      	push	{r7, lr}
 8016e3c:	b08a      	sub	sp, #40	; 0x28
 8016e3e:	af00      	add	r7, sp, #0
 8016e40:	60f8      	str	r0, [r7, #12]
 8016e42:	4608      	mov	r0, r1
 8016e44:	4611      	mov	r1, r2
 8016e46:	461a      	mov	r2, r3
 8016e48:	4603      	mov	r3, r0
 8016e4a:	817b      	strh	r3, [r7, #10]
 8016e4c:	460b      	mov	r3, r1
 8016e4e:	813b      	strh	r3, [r7, #8]
 8016e50:	4613      	mov	r3, r2
 8016e52:	80fb      	strh	r3, [r7, #6]
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e58:	627b      	str	r3, [r7, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	7d1b      	ldrb	r3, [r3, #20]
 8016e5e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8016e62:	b2db      	uxtb	r3, r3
 8016e64:	4618      	mov	r0, r3
 8016e66:	f7fb fa7d 	bl	8012364 <lv_img_cf_get_px_size>
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 8016e70:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8016e74:	68fa      	ldr	r2, [r7, #12]
 8016e76:	6952      	ldr	r2, [r2, #20]
 8016e78:	f3c2 228a 	ubfx	r2, r2, #10, #11
 8016e7c:	b292      	uxth	r2, r2
 8016e7e:	fb03 f202 	mul.w	r2, r3, r2
 8016e82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016e86:	4413      	add	r3, r2
 8016e88:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8016e8c:	fb02 f303 	mul.w	r3, r2, r3
 8016e90:	10db      	asrs	r3, r3, #3
 8016e92:	61fb      	str	r3, [r7, #28]
    pos += 4; /*Skip the header*/
 8016e94:	69fb      	ldr	r3, [r7, #28]
 8016e96:	3304      	adds	r3, #4
 8016e98:	61fb      	str	r3, [r7, #28]
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 8016e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e9c:	2200      	movs	r2, #0
 8016e9e:	69f9      	ldr	r1, [r7, #28]
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f00c fc78 	bl	8023796 <lv_fs_seek>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK) {
 8016eaa:	7efb      	ldrb	r3, [r7, #27]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d001      	beq.n	8016eb4 <lv_img_decoder_built_in_line_true_color+0x7a>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	e01d      	b.n	8016ef0 <lv_img_decoder_built_in_line_true_color+0xb6>
    }
    uint32_t btr = len * (px_size >> 3);
 8016eb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016eb8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8016ebc:	08d2      	lsrs	r2, r2, #3
 8016ebe:	b2d2      	uxtb	r2, r2
 8016ec0:	fb02 f303 	mul.w	r3, r2, r3
 8016ec4:	617b      	str	r3, [r7, #20]
    uint32_t br  = 0;
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	613b      	str	r3, [r7, #16]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 8016eca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016ecc:	f107 0310 	add.w	r3, r7, #16
 8016ed0:	697a      	ldr	r2, [r7, #20]
 8016ed2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016ed4:	f00c fc1a 	bl	802370c <lv_fs_read>
 8016ed8:	4603      	mov	r3, r0
 8016eda:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK || btr != br) {
 8016edc:	7efb      	ldrb	r3, [r7, #27]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d103      	bne.n	8016eea <lv_img_decoder_built_in_line_true_color+0xb0>
 8016ee2:	693b      	ldr	r3, [r7, #16]
 8016ee4:	697a      	ldr	r2, [r7, #20]
 8016ee6:	429a      	cmp	r2, r3
 8016ee8:	d001      	beq.n	8016eee <lv_img_decoder_built_in_line_true_color+0xb4>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 8016eea:	2300      	movs	r3, #0
 8016eec:	e000      	b.n	8016ef0 <lv_img_decoder_built_in_line_true_color+0xb6>
    }

    return LV_RES_OK;
 8016eee:	2301      	movs	r3, #1
}
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	3728      	adds	r7, #40	; 0x28
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	bd80      	pop	{r7, pc}

08016ef8 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 8016ef8:	b590      	push	{r4, r7, lr}
 8016efa:	b097      	sub	sp, #92	; 0x5c
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	60f8      	str	r0, [r7, #12]
 8016f00:	4608      	mov	r0, r1
 8016f02:	4611      	mov	r1, r2
 8016f04:	461a      	mov	r2, r3
 8016f06:	4603      	mov	r3, r0
 8016f08:	817b      	strh	r3, [r7, #10]
 8016f0a:	460b      	mov	r3, r1
 8016f0c:	813b      	strh	r3, [r7, #8]
 8016f0e:	4613      	mov	r3, r2
 8016f10:	80fb      	strh	r3, [r7, #6]
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8016f12:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8016f16:	85bb      	strh	r3, [r7, #44]	; 0x2c
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8016f18:	4bae      	ldr	r3, [pc, #696]	; (80171d4 <lv_img_decoder_built_in_line_alpha+0x2dc>)
 8016f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8016f1c:	4bae      	ldr	r3, [pc, #696]	; (80171d8 <lv_img_decoder_built_in_line_alpha+0x2e0>)
 8016f1e:	f107 0418 	add.w	r4, r7, #24
 8016f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016f24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	7a1b      	ldrb	r3, [r3, #8]
 8016f2c:	753b      	strb	r3, [r7, #20]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8016f2e:	2300      	movs	r3, #0
 8016f30:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8016f34:	e00e      	b.n	8016f54 <lv_img_decoder_built_in_line_alpha+0x5c>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
 8016f36:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8016f3a:	005b      	lsls	r3, r3, #1
 8016f3c:	461a      	mov	r2, r3
 8016f3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016f40:	4413      	add	r3, r2
 8016f42:	7d3a      	ldrb	r2, [r7, #20]
 8016f44:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < len; i++) {
 8016f46:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8016f4a:	b29b      	uxth	r3, r3
 8016f4c:	3301      	adds	r3, #1
 8016f4e:	b29b      	uxth	r3, r3
 8016f50:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8016f54:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8016f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016f5c:	429a      	cmp	r2, r3
 8016f5e:	dbea      	blt.n	8016f36 <lv_img_decoder_built_in_line_alpha+0x3e>
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
 8016f60:	2300      	movs	r3, #0
 8016f62:	653b      	str	r3, [r7, #80]	; 0x50
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	7d1b      	ldrb	r3, [r3, #20]
 8016f68:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8016f6c:	b2db      	uxtb	r3, r3
 8016f6e:	4618      	mov	r0, r3
 8016f70:	f7fb f9f8 	bl	8012364 <lv_img_cf_get_px_size>
 8016f74:	4603      	mov	r3, r0
 8016f76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8016f7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016f7e:	2201      	movs	r2, #1
 8016f80:	fa02 f303 	lsl.w	r3, r2, r3
 8016f84:	b29b      	uxth	r3, r3
 8016f86:	3b01      	subs	r3, #1
 8016f88:	87bb      	strh	r3, [r7, #60]	; 0x3c

    lv_coord_t w = 0;
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    uint32_t ofs = 0;
 8016f90:	2300      	movs	r3, #0
 8016f92:	64bb      	str	r3, [r7, #72]	; 0x48
    int8_t pos   = 0;
 8016f94:	2300      	movs	r3, #0
 8016f96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    switch(dsc->header.cf) {
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	7d1b      	ldrb	r3, [r3, #20]
 8016f9e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8016fa2:	b2db      	uxtb	r3, r3
 8016fa4:	3b0b      	subs	r3, #11
 8016fa6:	2b03      	cmp	r3, #3
 8016fa8:	f200 8094 	bhi.w	80170d4 <lv_img_decoder_built_in_line_alpha+0x1dc>
 8016fac:	a201      	add	r2, pc, #4	; (adr r2, 8016fb4 <lv_img_decoder_built_in_line_alpha+0xbc>)
 8016fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fb2:	bf00      	nop
 8016fb4:	08016fc5 	.word	0x08016fc5
 8016fb8:	0801700d 	.word	0x0801700d
 8016fbc:	08017059 	.word	0x08017059
 8016fc0:	080170a5 	.word	0x080170a5
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	695b      	ldr	r3, [r3, #20]
 8016fc8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8016fcc:	b29b      	uxth	r3, r3
 8016fce:	3307      	adds	r3, #7
 8016fd0:	10db      	asrs	r3, r3, #3
 8016fd2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 3); /*First pixel*/
 8016fd6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016fda:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8016fde:	fb02 f303 	mul.w	r3, r2, r3
 8016fe2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8016fe6:	10d2      	asrs	r2, r2, #3
 8016fe8:	b212      	sxth	r2, r2
 8016fea:	4413      	add	r3, r2
 8016fec:	461a      	mov	r2, r3
 8016fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016ff0:	4413      	add	r3, r2
 8016ff2:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 7 - (x & 0x7);
 8016ff4:	897b      	ldrh	r3, [r7, #10]
 8016ff6:	b25b      	sxtb	r3, r3
 8016ff8:	43db      	mvns	r3, r3
 8016ffa:	b25b      	sxtb	r3, r3
 8016ffc:	f003 0307 	and.w	r3, r3, #7
 8017000:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha1_opa_table;
 8017004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017008:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 801700a:	e063      	b.n	80170d4 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_2BIT:
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	695b      	ldr	r3, [r3, #20]
 8017010:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8017014:	b29b      	uxth	r3, r3
 8017016:	3303      	adds	r3, #3
 8017018:	109b      	asrs	r3, r3, #2
 801701a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 2); /*First pixel*/
 801701e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017022:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8017026:	fb02 f303 	mul.w	r3, r2, r3
 801702a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801702e:	1092      	asrs	r2, r2, #2
 8017030:	b212      	sxth	r2, r2
 8017032:	4413      	add	r3, r2
 8017034:	461a      	mov	r2, r3
 8017036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017038:	4413      	add	r3, r2
 801703a:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 6 - (x & 0x3) * 2;
 801703c:	897b      	ldrh	r3, [r7, #10]
 801703e:	43db      	mvns	r3, r3
 8017040:	b2db      	uxtb	r3, r3
 8017042:	f003 0303 	and.w	r3, r3, #3
 8017046:	b2db      	uxtb	r3, r3
 8017048:	005b      	lsls	r3, r3, #1
 801704a:	b2db      	uxtb	r3, r3
 801704c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha2_opa_table;
 8017050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017054:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 8017056:	e03d      	b.n	80170d4 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_4BIT:
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	695b      	ldr	r3, [r3, #20]
 801705c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8017060:	b29b      	uxth	r3, r3
 8017062:	3301      	adds	r3, #1
 8017064:	105b      	asrs	r3, r3, #1
 8017066:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + (x >> 1); /*First pixel*/
 801706a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801706e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8017072:	fb02 f303 	mul.w	r3, r2, r3
 8017076:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801707a:	1052      	asrs	r2, r2, #1
 801707c:	b212      	sxth	r2, r2
 801707e:	4413      	add	r3, r2
 8017080:	461a      	mov	r2, r3
 8017082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017084:	4413      	add	r3, r2
 8017086:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 4 - (x & 0x1) * 4;
 8017088:	897b      	ldrh	r3, [r7, #10]
 801708a:	f003 0301 	and.w	r3, r3, #1
 801708e:	2b00      	cmp	r3, #0
 8017090:	d101      	bne.n	8017096 <lv_img_decoder_built_in_line_alpha+0x19e>
 8017092:	2304      	movs	r3, #4
 8017094:	e000      	b.n	8017098 <lv_img_decoder_built_in_line_alpha+0x1a0>
 8017096:	2300      	movs	r3, #0
 8017098:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            opa_table = alpha4_opa_table;
 801709c:	f107 0318 	add.w	r3, r7, #24
 80170a0:	653b      	str	r3, [r7, #80]	; 0x50
            break;
 80170a2:	e017      	b.n	80170d4 <lv_img_decoder_built_in_line_alpha+0x1dc>
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	695b      	ldr	r3, [r3, #20]
 80170a8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80170ac:	b29b      	uxth	r3, r3
 80170ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            ofs += w * y + x;  /*First pixel*/
 80170b2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80170b6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80170ba:	fb03 f202 	mul.w	r2, r3, r2
 80170be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80170c2:	4413      	add	r3, r2
 80170c4:	461a      	mov	r2, r3
 80170c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80170c8:	4413      	add	r3, r2
 80170ca:	64bb      	str	r3, [r7, #72]	; 0x48
            pos = 0;
 80170cc:	2300      	movs	r3, #0
 80170ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80170d2:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170d8:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t * fs_buf = lv_mem_buf_get(w);
 80170da:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80170de:	4618      	mov	r0, r3
 80170e0:	f00c ff92 	bl	8024008 <lv_mem_buf_get>
 80170e4:	6378      	str	r0, [r7, #52]	; 0x34
    if(fs_buf == NULL) return LV_RES_INV;
 80170e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d101      	bne.n	80170f0 <lv_img_decoder_built_in_line_alpha+0x1f8>
 80170ec:	2300      	movs	r3, #0
 80170ee:	e06d      	b.n	80171cc <lv_img_decoder_built_in_line_alpha+0x2d4>

    const uint8_t * data_tmp = NULL;
 80170f0:	2300      	movs	r3, #0
 80170f2:	643b      	str	r3, [r7, #64]	; 0x40
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	7c1b      	ldrb	r3, [r3, #16]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d108      	bne.n	801710e <lv_img_decoder_built_in_line_alpha+0x216>
        const lv_img_dsc_t * img_dsc = dsc->src;
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	685b      	ldr	r3, [r3, #4]
 8017100:	633b      	str	r3, [r7, #48]	; 0x30

        data_tmp = img_dsc->data + ofs;
 8017102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017104:	689a      	ldr	r2, [r3, #8]
 8017106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017108:	4413      	add	r3, r2
 801710a:	643b      	str	r3, [r7, #64]	; 0x40
 801710c:	e00f      	b.n	801712e <lv_img_decoder_built_in_line_alpha+0x236>
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 801710e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017112:	3304      	adds	r3, #4
 8017114:	2200      	movs	r2, #0
 8017116:	4619      	mov	r1, r3
 8017118:	f00c fb3d 	bl	8023796 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 801711c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801711e:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8017122:	2300      	movs	r3, #0
 8017124:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017126:	f00c faf1 	bl	802370c <lv_fs_read>
        data_tmp = fs_buf;
 801712a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801712c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    for(i = 0; i < len; i++) {
 801712e:	2300      	movs	r3, #0
 8017130:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8017134:	e040      	b.n	80171b8 <lv_img_decoder_built_in_line_alpha+0x2c0>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8017136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017138:	781b      	ldrb	r3, [r3, #0]
 801713a:	461a      	mov	r2, r3
 801713c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8017140:	fa42 f303 	asr.w	r3, r2, r3
 8017144:	b25a      	sxtb	r2, r3
 8017146:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017148:	b25b      	sxtb	r3, r3
 801714a:	4013      	ands	r3, r2
 801714c:	b25b      	sxtb	r3, r3
 801714e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	7d1b      	ldrb	r3, [r3, #20]
 8017156:	f003 031f 	and.w	r3, r3, #31
 801715a:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 801715c:	2b0e      	cmp	r3, #14
 801715e:	d005      	beq.n	801716c <lv_img_decoder_built_in_line_alpha+0x274>
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 8017160:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017164:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017166:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8017168:	781b      	ldrb	r3, [r3, #0]
 801716a:	e001      	b.n	8017170 <lv_img_decoder_built_in_line_alpha+0x278>
 801716c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017170:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8017174:	0052      	lsls	r2, r2, #1
 8017176:	3201      	adds	r2, #1
 8017178:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801717a:	440a      	add	r2, r1
 801717c:	7013      	strb	r3, [r2, #0]

        pos -= px_size;
 801717e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8017182:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017186:	1ad3      	subs	r3, r2, r3
 8017188:	b2db      	uxtb	r3, r3
 801718a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if(pos < 0) {
 801718e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8017192:	2b00      	cmp	r3, #0
 8017194:	da09      	bge.n	80171aa <lv_img_decoder_built_in_line_alpha+0x2b2>
            pos = 8 - px_size;
 8017196:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801719a:	f1c3 0308 	rsb	r3, r3, #8
 801719e:	b2db      	uxtb	r3, r3
 80171a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            data_tmp++;
 80171a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80171a6:	3301      	adds	r3, #1
 80171a8:	643b      	str	r3, [r7, #64]	; 0x40
    for(i = 0; i < len; i++) {
 80171aa:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80171ae:	b29b      	uxth	r3, r3
 80171b0:	3301      	adds	r3, #1
 80171b2:	b29b      	uxth	r3, r3
 80171b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80171b8:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 80171bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80171c0:	429a      	cmp	r2, r3
 80171c2:	dbb8      	blt.n	8017136 <lv_img_decoder_built_in_line_alpha+0x23e>
        }
    }
    lv_mem_buf_release(fs_buf);
 80171c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80171c6:	f00c ffcb 	bl	8024160 <lv_mem_buf_release>
    return LV_RES_OK;
 80171ca:	2301      	movs	r3, #1
}
 80171cc:	4618      	mov	r0, r3
 80171ce:	375c      	adds	r7, #92	; 0x5c
 80171d0:	46bd      	mov	sp, r7
 80171d2:	bd90      	pop	{r4, r7, pc}
 80171d4:	ffaa5500 	.word	0xffaa5500
 80171d8:	080288ec 	.word	0x080288ec

080171dc <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b08e      	sub	sp, #56	; 0x38
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	60f8      	str	r0, [r7, #12]
 80171e4:	4608      	mov	r0, r1
 80171e6:	4611      	mov	r1, r2
 80171e8:	461a      	mov	r2, r3
 80171ea:	4603      	mov	r3, r0
 80171ec:	817b      	strh	r3, [r7, #10]
 80171ee:	460b      	mov	r3, r1
 80171f0:	813b      	strh	r3, [r7, #8]
 80171f2:	4613      	mov	r3, r2
 80171f4:	80fb      	strh	r3, [r7, #6]
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	7d1b      	ldrb	r3, [r3, #20]
 80171fa:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80171fe:	b2db      	uxtb	r3, r3
 8017200:	4618      	mov	r0, r3
 8017202:	f7fb f8af 	bl	8012364 <lv_img_cf_get_px_size>
 8017206:	4603      	mov	r3, r0
 8017208:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 801720c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8017210:	2201      	movs	r2, #1
 8017212:	fa02 f303 	lsl.w	r3, r2, r3
 8017216:	b29b      	uxth	r3, r3
 8017218:	3b01      	subs	r3, #1
 801721a:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_coord_t w = 0;
 801721c:	2300      	movs	r3, #0
 801721e:	86fb      	strh	r3, [r7, #54]	; 0x36
    int8_t pos   = 0;
 8017220:	2300      	movs	r3, #0
 8017222:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint32_t ofs = 0;
 8017226:	2300      	movs	r3, #0
 8017228:	633b      	str	r3, [r7, #48]	; 0x30
    switch(dsc->header.cf) {
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	7d1b      	ldrb	r3, [r3, #20]
 801722e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8017232:	b2db      	uxtb	r3, r3
 8017234:	3b07      	subs	r3, #7
 8017236:	2b03      	cmp	r3, #3
 8017238:	f200 8094 	bhi.w	8017364 <lv_img_decoder_built_in_line_indexed+0x188>
 801723c:	a201      	add	r2, pc, #4	; (adr r2, 8017244 <lv_img_decoder_built_in_line_indexed+0x68>)
 801723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017242:	bf00      	nop
 8017244:	08017255 	.word	0x08017255
 8017248:	0801729b 	.word	0x0801729b
 801724c:	080172e5 	.word	0x080172e5
 8017250:	0801732f 	.word	0x0801732f
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	695b      	ldr	r3, [r3, #20]
 8017258:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801725c:	b29b      	uxth	r3, r3
 801725e:	3307      	adds	r3, #7
 8017260:	10db      	asrs	r3, r3, #3
 8017262:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 3); /*First pixel*/
 8017264:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8017268:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801726c:	fb02 f303 	mul.w	r3, r2, r3
 8017270:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8017274:	10d2      	asrs	r2, r2, #3
 8017276:	b212      	sxth	r2, r2
 8017278:	4413      	add	r3, r2
 801727a:	461a      	mov	r2, r3
 801727c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801727e:	4413      	add	r3, r2
 8017280:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 8;                /*Skip the palette*/
 8017282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017284:	3308      	adds	r3, #8
 8017286:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 7 - (x & 0x7);
 8017288:	897b      	ldrh	r3, [r7, #10]
 801728a:	b25b      	sxtb	r3, r3
 801728c:	43db      	mvns	r3, r3
 801728e:	b25b      	sxtb	r3, r3
 8017290:	f003 0307 	and.w	r3, r3, #7
 8017294:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8017298:	e064      	b.n	8017364 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	695b      	ldr	r3, [r3, #20]
 801729e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80172a2:	b29b      	uxth	r3, r3
 80172a4:	3303      	adds	r3, #3
 80172a6:	109b      	asrs	r3, r3, #2
 80172a8:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 2); /*First pixel*/
 80172aa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80172ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80172b2:	fb02 f303 	mul.w	r3, r2, r3
 80172b6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80172ba:	1092      	asrs	r2, r2, #2
 80172bc:	b212      	sxth	r2, r2
 80172be:	4413      	add	r3, r2
 80172c0:	461a      	mov	r2, r3
 80172c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172c4:	4413      	add	r3, r2
 80172c6:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 16;               /*Skip the palette*/
 80172c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ca:	3310      	adds	r3, #16
 80172cc:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 6 - (x & 0x3) * 2;
 80172ce:	897b      	ldrh	r3, [r7, #10]
 80172d0:	43db      	mvns	r3, r3
 80172d2:	b2db      	uxtb	r3, r3
 80172d4:	f003 0303 	and.w	r3, r3, #3
 80172d8:	b2db      	uxtb	r3, r3
 80172da:	005b      	lsls	r3, r3, #1
 80172dc:	b2db      	uxtb	r3, r3
 80172de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80172e2:	e03f      	b.n	8017364 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_4BIT:
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	695b      	ldr	r3, [r3, #20]
 80172e8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80172ec:	b29b      	uxth	r3, r3
 80172ee:	3301      	adds	r3, #1
 80172f0:	105b      	asrs	r3, r3, #1
 80172f2:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + (x >> 1); /*First pixel*/
 80172f4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80172f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80172fc:	fb02 f303 	mul.w	r3, r2, r3
 8017300:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8017304:	1052      	asrs	r2, r2, #1
 8017306:	b212      	sxth	r2, r2
 8017308:	4413      	add	r3, r2
 801730a:	461a      	mov	r2, r3
 801730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801730e:	4413      	add	r3, r2
 8017310:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 64;               /*Skip the palette*/
 8017312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017314:	3340      	adds	r3, #64	; 0x40
 8017316:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 4 - (x & 0x1) * 4;
 8017318:	897b      	ldrh	r3, [r7, #10]
 801731a:	f003 0301 	and.w	r3, r3, #1
 801731e:	2b00      	cmp	r3, #0
 8017320:	d101      	bne.n	8017326 <lv_img_decoder_built_in_line_indexed+0x14a>
 8017322:	2304      	movs	r3, #4
 8017324:	e000      	b.n	8017328 <lv_img_decoder_built_in_line_indexed+0x14c>
 8017326:	2300      	movs	r3, #0
 8017328:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801732c:	e01a      	b.n	8017364 <lv_img_decoder_built_in_line_indexed+0x188>
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	695b      	ldr	r3, [r3, #20]
 8017332:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8017336:	b29b      	uxth	r3, r3
 8017338:	86fb      	strh	r3, [r7, #54]	; 0x36
            ofs += w * y + x;  /*First pixel*/
 801733a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801733e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8017342:	fb03 f202 	mul.w	r2, r3, r2
 8017346:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801734a:	4413      	add	r3, r2
 801734c:	461a      	mov	r2, r3
 801734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017350:	4413      	add	r3, r2
 8017352:	633b      	str	r3, [r7, #48]	; 0x30
            ofs += 1024;       /*Skip the palette*/
 8017354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801735a:	633b      	str	r3, [r7, #48]	; 0x30
            pos = 0;
 801735c:	2300      	movs	r3, #0
 801735e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8017362:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017368:	623b      	str	r3, [r7, #32]

    uint8_t * fs_buf = lv_mem_buf_get(w);
 801736a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801736e:	4618      	mov	r0, r3
 8017370:	f00c fe4a 	bl	8024008 <lv_mem_buf_get>
 8017374:	61f8      	str	r0, [r7, #28]
    if(fs_buf == NULL) return LV_RES_INV;
 8017376:	69fb      	ldr	r3, [r7, #28]
 8017378:	2b00      	cmp	r3, #0
 801737a:	d101      	bne.n	8017380 <lv_img_decoder_built_in_line_indexed+0x1a4>
 801737c:	2300      	movs	r3, #0
 801737e:	e06e      	b.n	801745e <lv_img_decoder_built_in_line_indexed+0x282>
    const uint8_t * data_tmp = NULL;
 8017380:	2300      	movs	r3, #0
 8017382:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	7c1b      	ldrb	r3, [r3, #16]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d108      	bne.n	801739e <lv_img_decoder_built_in_line_indexed+0x1c2>
        const lv_img_dsc_t * img_dsc = dsc->src;
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	685b      	ldr	r3, [r3, #4]
 8017390:	61bb      	str	r3, [r7, #24]
        data_tmp                     = img_dsc->data + ofs;
 8017392:	69bb      	ldr	r3, [r7, #24]
 8017394:	689a      	ldr	r2, [r3, #8]
 8017396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017398:	4413      	add	r3, r2
 801739a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801739c:	e00f      	b.n	80173be <lv_img_decoder_built_in_line_indexed+0x1e2>
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 801739e:	6a38      	ldr	r0, [r7, #32]
 80173a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173a2:	3304      	adds	r3, #4
 80173a4:	2200      	movs	r2, #0
 80173a6:	4619      	mov	r1, r3
 80173a8:	f00c f9f5 	bl	8023796 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 80173ac:	6a38      	ldr	r0, [r7, #32]
 80173ae:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80173b2:	2300      	movs	r3, #0
 80173b4:	69f9      	ldr	r1, [r7, #28]
 80173b6:	f00c f9a9 	bl	802370c <lv_fs_read>
        data_tmp = fs_buf;
 80173ba:	69fb      	ldr	r3, [r7, #28]
 80173bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 80173be:	2300      	movs	r3, #0
 80173c0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80173c2:	e042      	b.n	801744a <lv_img_decoder_built_in_line_indexed+0x26e>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 80173c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173c6:	781b      	ldrb	r3, [r3, #0]
 80173c8:	461a      	mov	r2, r3
 80173ca:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 80173ce:	fa42 f303 	asr.w	r3, r2, r3
 80173d2:	b25a      	sxtb	r2, r3
 80173d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80173d6:	b25b      	sxtb	r3, r3
 80173d8:	4013      	ands	r3, r2
 80173da:	b25b      	sxtb	r3, r3
 80173dc:	75fb      	strb	r3, [r7, #23]

        lv_color_t color = user_data->palette[val_act];
 80173de:	6a3b      	ldr	r3, [r7, #32]
 80173e0:	68da      	ldr	r2, [r3, #12]
 80173e2:	7dfb      	ldrb	r3, [r7, #23]
 80173e4:	4413      	add	r3, r2
 80173e6:	781b      	ldrb	r3, [r3, #0]
 80173e8:	753b      	strb	r3, [r7, #20]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
 80173ea:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80173ee:	005b      	lsls	r3, r3, #1
 80173f0:	461a      	mov	r2, r3
 80173f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80173f4:	4413      	add	r3, r2
 80173f6:	7d3a      	ldrb	r2, [r7, #20]
 80173f8:	701a      	strb	r2, [r3, #0]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 80173fa:	6a3b      	ldr	r3, [r7, #32]
 80173fc:	691a      	ldr	r2, [r3, #16]
 80173fe:	7dfb      	ldrb	r3, [r7, #23]
 8017400:	441a      	add	r2, r3
 8017402:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8017406:	005b      	lsls	r3, r3, #1
 8017408:	3301      	adds	r3, #1
 801740a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801740c:	440b      	add	r3, r1
 801740e:	7812      	ldrb	r2, [r2, #0]
 8017410:	701a      	strb	r2, [r3, #0]

        pos -= px_size;
 8017412:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8017416:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801741a:	1ad3      	subs	r3, r2, r3
 801741c:	b2db      	uxtb	r3, r3
 801741e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        if(pos < 0) {
 8017422:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8017426:	2b00      	cmp	r3, #0
 8017428:	da09      	bge.n	801743e <lv_img_decoder_built_in_line_indexed+0x262>
            pos = 8 - px_size;
 801742a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801742e:	f1c3 0308 	rsb	r3, r3, #8
 8017432:	b2db      	uxtb	r3, r3
 8017434:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            data_tmp++;
 8017438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801743a:	3301      	adds	r3, #1
 801743c:	62fb      	str	r3, [r7, #44]	; 0x2c
    for(i = 0; i < len; i++) {
 801743e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8017442:	b29b      	uxth	r3, r3
 8017444:	3301      	adds	r3, #1
 8017446:	b29b      	uxth	r3, r3
 8017448:	857b      	strh	r3, [r7, #42]	; 0x2a
 801744a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801744e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017452:	429a      	cmp	r2, r3
 8017454:	dbb6      	blt.n	80173c4 <lv_img_decoder_built_in_line_indexed+0x1e8>
        }
    }
    lv_mem_buf_release(fs_buf);
 8017456:	69f8      	ldr	r0, [r7, #28]
 8017458:	f00c fe82 	bl	8024160 <lv_mem_buf_release>
    return LV_RES_OK;
 801745c:	2301      	movs	r3, #1
}
 801745e:	4618      	mov	r0, r3
 8017460:	3738      	adds	r7, #56	; 0x38
 8017462:	46bd      	mov	sp, r7
 8017464:	bd80      	pop	{r7, pc}
 8017466:	bf00      	nop

08017468 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8017468:	b480      	push	{r7}
 801746a:	b083      	sub	sp, #12
 801746c:	af00      	add	r7, sp, #0
 801746e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017476:	b29a      	uxth	r2, r3
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801747e:	b29b      	uxth	r3, r3
 8017480:	1ad3      	subs	r3, r2, r3
 8017482:	b29b      	uxth	r3, r3
 8017484:	3301      	adds	r3, #1
 8017486:	b29b      	uxth	r3, r3
 8017488:	b21b      	sxth	r3, r3
}
 801748a:	4618      	mov	r0, r3
 801748c:	370c      	adds	r7, #12
 801748e:	46bd      	mov	sp, r7
 8017490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017494:	4770      	bx	lr
	...

08017498 <lv_draw_sw_init_ctx>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_init_ctx(lv_disp_drv_t * drv, lv_draw_ctx_t * draw_ctx)
{
 8017498:	b580      	push	{r7, lr}
 801749a:	b084      	sub	sp, #16
 801749c:	af00      	add	r7, sp, #0
 801749e:	6078      	str	r0, [r7, #4]
 80174a0:	6039      	str	r1, [r7, #0]
    LV_UNUSED(drv);

    lv_draw_sw_ctx_t * draw_sw_ctx = (lv_draw_sw_ctx_t *) draw_ctx;
 80174a2:	683b      	ldr	r3, [r7, #0]
 80174a4:	60fb      	str	r3, [r7, #12]
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
 80174a6:	2154      	movs	r1, #84	; 0x54
 80174a8:	68f8      	ldr	r0, [r7, #12]
 80174aa:	f00d f957 	bl	802475c <lv_memset_00>

    draw_sw_ctx->base_draw.draw_arc = lv_draw_sw_arc;
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	4a19      	ldr	r2, [pc, #100]	; (8017518 <lv_draw_sw_init_ctx+0x80>)
 80174b2:	611a      	str	r2, [r3, #16]
    draw_sw_ctx->base_draw.draw_rect = lv_draw_sw_rect;
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	4a19      	ldr	r2, [pc, #100]	; (801751c <lv_draw_sw_init_ctx+0x84>)
 80174b8:	60da      	str	r2, [r3, #12]
    draw_sw_ctx->base_draw.draw_bg = lv_draw_sw_bg;
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	4a18      	ldr	r2, [pc, #96]	; (8017520 <lv_draw_sw_init_ctx+0x88>)
 80174be:	62da      	str	r2, [r3, #44]	; 0x2c
    draw_sw_ctx->base_draw.draw_letter = lv_draw_sw_letter;
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	4a18      	ldr	r2, [pc, #96]	; (8017524 <lv_draw_sw_init_ctx+0x8c>)
 80174c4:	61da      	str	r2, [r3, #28]
    draw_sw_ctx->base_draw.draw_img_decoded = lv_draw_sw_img_decoded;
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	4a17      	ldr	r2, [pc, #92]	; (8017528 <lv_draw_sw_init_ctx+0x90>)
 80174ca:	615a      	str	r2, [r3, #20]
    draw_sw_ctx->base_draw.draw_line = lv_draw_sw_line;
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	4a17      	ldr	r2, [pc, #92]	; (801752c <lv_draw_sw_init_ctx+0x94>)
 80174d0:	621a      	str	r2, [r3, #32]
    draw_sw_ctx->base_draw.draw_polygon = lv_draw_sw_polygon;
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	4a16      	ldr	r2, [pc, #88]	; (8017530 <lv_draw_sw_init_ctx+0x98>)
 80174d6:	625a      	str	r2, [r3, #36]	; 0x24
#if LV_DRAW_COMPLEX
    draw_sw_ctx->base_draw.draw_transform = lv_draw_sw_transform;
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	4a16      	ldr	r2, [pc, #88]	; (8017534 <lv_draw_sw_init_ctx+0x9c>)
 80174dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif
    draw_sw_ctx->base_draw.wait_for_finish = lv_draw_sw_wait_for_finish;
 80174de:	68fb      	ldr	r3, [r7, #12]
 80174e0:	4a15      	ldr	r2, [pc, #84]	; (8017538 <lv_draw_sw_init_ctx+0xa0>)
 80174e2:	631a      	str	r2, [r3, #48]	; 0x30
    draw_sw_ctx->base_draw.buffer_copy = lv_draw_sw_buffer_copy;
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	4a15      	ldr	r2, [pc, #84]	; (801753c <lv_draw_sw_init_ctx+0xa4>)
 80174e8:	635a      	str	r2, [r3, #52]	; 0x34
    draw_sw_ctx->base_draw.layer_init = lv_draw_sw_layer_create;
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	4a14      	ldr	r2, [pc, #80]	; (8017540 <lv_draw_sw_init_ctx+0xa8>)
 80174ee:	639a      	str	r2, [r3, #56]	; 0x38
    draw_sw_ctx->base_draw.layer_adjust = lv_draw_sw_layer_adjust;
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	4a14      	ldr	r2, [pc, #80]	; (8017544 <lv_draw_sw_init_ctx+0xac>)
 80174f4:	63da      	str	r2, [r3, #60]	; 0x3c
    draw_sw_ctx->base_draw.layer_blend = lv_draw_sw_layer_blend;
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	4a13      	ldr	r2, [pc, #76]	; (8017548 <lv_draw_sw_init_ctx+0xb0>)
 80174fa:	641a      	str	r2, [r3, #64]	; 0x40
    draw_sw_ctx->base_draw.layer_destroy = lv_draw_sw_layer_destroy;
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	4a13      	ldr	r2, [pc, #76]	; (801754c <lv_draw_sw_init_ctx+0xb4>)
 8017500:	645a      	str	r2, [r3, #68]	; 0x44
    draw_sw_ctx->blend = lv_draw_sw_blend_basic;
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	4a12      	ldr	r2, [pc, #72]	; (8017550 <lv_draw_sw_init_ctx+0xb8>)
 8017506:	651a      	str	r2, [r3, #80]	; 0x50
    draw_ctx->layer_instance_size = sizeof(lv_draw_sw_layer_ctx_t);
 8017508:	683b      	ldr	r3, [r7, #0]
 801750a:	222c      	movs	r2, #44	; 0x2c
 801750c:	649a      	str	r2, [r3, #72]	; 0x48
}
 801750e:	bf00      	nop
 8017510:	3710      	adds	r7, #16
 8017512:	46bd      	mov	sp, r7
 8017514:	bd80      	pop	{r7, pc}
 8017516:	bf00      	nop
 8017518:	080176b9 	.word	0x080176b9
 801751c:	0801d70b 	.word	0x0801d70b
 8017520:	0801d751 	.word	0x0801d751
 8017524:	0801b9ed 	.word	0x0801b9ed
 8017528:	0801ae91 	.word	0x0801ae91
 801752c:	0801c15b 	.word	0x0801c15b
 8017530:	0801d0f9 	.word	0x0801d0f9
 8017534:	08020955 	.word	0x08020955
 8017538:	08017555 	.word	0x08017555
 801753c:	08017569 	.word	0x08017569
 8017540:	0801b627 	.word	0x0801b627
 8017544:	0801b80b 	.word	0x0801b80b
 8017548:	0801b89b 	.word	0x0801b89b
 801754c:	0801b965 	.word	0x0801b965
 8017550:	08019221 	.word	0x08019221

08017554 <lv_draw_sw_wait_for_finish>:
    lv_draw_sw_ctx_t * draw_sw_ctx = (lv_draw_sw_ctx_t *) draw_ctx;
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
}

void lv_draw_sw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
 8017554:	b480      	push	{r7}
 8017556:	b083      	sub	sp, #12
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
    LV_UNUSED(draw_ctx);
    /*Nothing to wait for*/
}
 801755c:	bf00      	nop
 801755e:	370c      	adds	r7, #12
 8017560:	46bd      	mov	sp, r7
 8017562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017566:	4770      	bx	lr

08017568 <lv_draw_sw_buffer_copy>:

void lv_draw_sw_buffer_copy(lv_draw_ctx_t * draw_ctx,
                            void * dest_buf, lv_coord_t dest_stride, const lv_area_t * dest_area,
                            void * src_buf, lv_coord_t src_stride, const lv_area_t * src_area)
{
 8017568:	b580      	push	{r7, lr}
 801756a:	b088      	sub	sp, #32
 801756c:	af00      	add	r7, sp, #0
 801756e:	60f8      	str	r0, [r7, #12]
 8017570:	60b9      	str	r1, [r7, #8]
 8017572:	603b      	str	r3, [r7, #0]
 8017574:	4613      	mov	r3, r2
 8017576:	80fb      	strh	r3, [r7, #6]
    LV_UNUSED(draw_ctx);

    lv_color_t * dest_bufc =  dest_buf;
 8017578:	68bb      	ldr	r3, [r7, #8]
 801757a:	61fb      	str	r3, [r7, #28]
    lv_color_t * src_bufc =  src_buf;
 801757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801757e:	61bb      	str	r3, [r7, #24]

    /*Got the first pixel of each buffer*/
    dest_bufc += dest_stride * dest_area->y1;
 8017580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017584:	683a      	ldr	r2, [r7, #0]
 8017586:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801758a:	fb02 f303 	mul.w	r3, r2, r3
 801758e:	461a      	mov	r2, r3
 8017590:	69fb      	ldr	r3, [r7, #28]
 8017592:	4413      	add	r3, r2
 8017594:	61fb      	str	r3, [r7, #28]
    dest_bufc += dest_area->x1;
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	f9b3 3000 	ldrsh.w	r3, [r3]
 801759c:	461a      	mov	r2, r3
 801759e:	69fb      	ldr	r3, [r7, #28]
 80175a0:	4413      	add	r3, r2
 80175a2:	61fb      	str	r3, [r7, #28]

    src_bufc += src_stride * src_area->y1;
 80175a4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80175a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175aa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80175ae:	fb02 f303 	mul.w	r3, r2, r3
 80175b2:	461a      	mov	r2, r3
 80175b4:	69bb      	ldr	r3, [r7, #24]
 80175b6:	4413      	add	r3, r2
 80175b8:	61bb      	str	r3, [r7, #24]
    src_bufc += src_area->x1;
 80175ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175c0:	461a      	mov	r2, r3
 80175c2:	69bb      	ldr	r3, [r7, #24]
 80175c4:	4413      	add	r3, r2
 80175c6:	61bb      	str	r3, [r7, #24]

    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
 80175c8:	6838      	ldr	r0, [r7, #0]
 80175ca:	f7ff ff4d 	bl	8017468 <lv_area_get_width>
 80175ce:	4603      	mov	r3, r0
 80175d0:	613b      	str	r3, [r7, #16]
    lv_coord_t y;
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80175d2:	683b      	ldr	r3, [r7, #0]
 80175d4:	885b      	ldrh	r3, [r3, #2]
 80175d6:	82fb      	strh	r3, [r7, #22]
 80175d8:	e014      	b.n	8017604 <lv_draw_sw_buffer_copy+0x9c>
        lv_memcpy(dest_bufc, src_bufc, line_length);
 80175da:	693a      	ldr	r2, [r7, #16]
 80175dc:	69b9      	ldr	r1, [r7, #24]
 80175de:	69f8      	ldr	r0, [r7, #28]
 80175e0:	f00c fe16 	bl	8024210 <lv_memcpy>
        dest_bufc += dest_stride;
 80175e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80175e8:	69fa      	ldr	r2, [r7, #28]
 80175ea:	4413      	add	r3, r2
 80175ec:	61fb      	str	r3, [r7, #28]
        src_bufc += src_stride;
 80175ee:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80175f2:	69ba      	ldr	r2, [r7, #24]
 80175f4:	4413      	add	r3, r2
 80175f6:	61bb      	str	r3, [r7, #24]
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80175f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80175fc:	b29b      	uxth	r3, r3
 80175fe:	3301      	adds	r3, #1
 8017600:	b29b      	uxth	r3, r3
 8017602:	82fb      	strh	r3, [r7, #22]
 8017604:	683b      	ldr	r3, [r7, #0]
 8017606:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801760a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801760e:	429a      	cmp	r2, r3
 8017610:	dde3      	ble.n	80175da <lv_draw_sw_buffer_copy+0x72>
    }
}
 8017612:	bf00      	nop
 8017614:	bf00      	nop
 8017616:	3720      	adds	r7, #32
 8017618:	46bd      	mov	sp, r7
 801761a:	bd80      	pop	{r7, pc}

0801761c <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 801761c:	b480      	push	{r7}
 801761e:	b083      	sub	sp, #12
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
 8017624:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 8017626:	683b      	ldr	r3, [r7, #0]
 8017628:	f9b3 2000 	ldrsh.w	r2, [r3]
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 8017630:	683b      	ldr	r3, [r7, #0]
 8017632:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801763a:	683b      	ldr	r3, [r7, #0]
 801763c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 8017644:	683b      	ldr	r3, [r7, #0]
 8017646:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	80da      	strh	r2, [r3, #6]
}
 801764e:	bf00      	nop
 8017650:	370c      	adds	r7, #12
 8017652:	46bd      	mov	sp, r7
 8017654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017658:	4770      	bx	lr

0801765a <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 801765a:	b480      	push	{r7}
 801765c:	b083      	sub	sp, #12
 801765e:	af00      	add	r7, sp, #0
 8017660:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017668:	b29a      	uxth	r2, r3
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017670:	b29b      	uxth	r3, r3
 8017672:	1ad3      	subs	r3, r2, r3
 8017674:	b29b      	uxth	r3, r3
 8017676:	3301      	adds	r3, #1
 8017678:	b29b      	uxth	r3, r3
 801767a:	b21b      	sxth	r3, r3
}
 801767c:	4618      	mov	r0, r3
 801767e:	370c      	adds	r7, #12
 8017680:	46bd      	mov	sp, r7
 8017682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017686:	4770      	bx	lr

08017688 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8017688:	b480      	push	{r7}
 801768a:	b083      	sub	sp, #12
 801768c:	af00      	add	r7, sp, #0
 801768e:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017696:	b29a      	uxth	r2, r3
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801769e:	b29b      	uxth	r3, r3
 80176a0:	1ad3      	subs	r3, r2, r3
 80176a2:	b29b      	uxth	r3, r3
 80176a4:	3301      	adds	r3, #1
 80176a6:	b29b      	uxth	r3, r3
 80176a8:	b21b      	sxth	r3, r3
}
 80176aa:	4618      	mov	r0, r3
 80176ac:	370c      	adds	r7, #12
 80176ae:	46bd      	mov	sp, r7
 80176b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b4:	4770      	bx	lr
	...

080176b8 <lv_draw_sw_arc>:
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_arc(lv_draw_ctx_t * draw_ctx, const lv_draw_arc_dsc_t * dsc, const lv_point_t * center, uint16_t radius,
                    uint16_t start_angle, uint16_t end_angle)
{
 80176b8:	b590      	push	{r4, r7, lr}
 80176ba:	b0d5      	sub	sp, #340	; 0x154
 80176bc:	af02      	add	r7, sp, #8
 80176be:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 80176c2:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
 80176c6:	6020      	str	r0, [r4, #0]
 80176c8:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80176cc:	f5a0 70a0 	sub.w	r0, r0, #320	; 0x140
 80176d0:	6001      	str	r1, [r0, #0]
 80176d2:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80176d6:	f5a1 71a2 	sub.w	r1, r1, #324	; 0x144
 80176da:	600a      	str	r2, [r1, #0]
 80176dc:	461a      	mov	r2, r3
 80176de:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80176e2:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80176e6:	801a      	strh	r2, [r3, #0]
#if LV_DRAW_COMPLEX
    if(dsc->opa <= LV_OPA_MIN) return;
 80176e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80176ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	7b1b      	ldrb	r3, [r3, #12]
 80176f4:	2b02      	cmp	r3, #2
 80176f6:	f240 83e4 	bls.w	8017ec2 <lv_draw_sw_arc+0x80a>
    if(dsc->width == 0) return;
 80176fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80176fe:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017708:	2b00      	cmp	r3, #0
 801770a:	f000 83dc 	beq.w	8017ec6 <lv_draw_sw_arc+0x80e>
    if(start_angle == end_angle) return;
 801770e:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8017712:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8017716:	429a      	cmp	r2, r3
 8017718:	f000 83d7 	beq.w	8017eca <lv_draw_sw_arc+0x812>

    lv_coord_t width = dsc->width;
 801771c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017720:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	885b      	ldrh	r3, [r3, #2]
 8017728:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    if(width > radius) width = radius;
 801772c:	f9b7 2146 	ldrsh.w	r2, [r7, #326]	; 0x146
 8017730:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017734:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8017738:	881b      	ldrh	r3, [r3, #0]
 801773a:	429a      	cmp	r2, r3
 801773c:	dd06      	ble.n	801774c <lv_draw_sw_arc+0x94>
 801773e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017742:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8017746:	881b      	ldrh	r3, [r3, #0]
 8017748:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    lv_draw_rect_dsc_t cir_dsc;
    lv_draw_rect_dsc_init(&cir_dsc);
 801774c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8017750:	4618      	mov	r0, r3
 8017752:	f7fe fd01 	bl	8016158 <lv_draw_rect_dsc_init>
    cir_dsc.blend_mode = dsc->blend_mode;
 8017756:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801775a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	7b5b      	ldrb	r3, [r3, #13]
 8017762:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8017766:	b2db      	uxtb	r3, r3
 8017768:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
    if(dsc->img_src) {
 801776c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017770:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	689b      	ldr	r3, [r3, #8]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d013      	beq.n	80177a4 <lv_draw_sw_arc+0xec>
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 801777c:	2300      	movs	r3, #0
 801777e:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
        cir_dsc.bg_img_src = dsc->img_src;
 8017782:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017786:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	689b      	ldr	r3, [r3, #8]
 801778e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        cir_dsc.bg_img_opa = dsc->opa;
 8017792:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017796:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	7b1b      	ldrb	r3, [r3, #12]
 801779e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80177a2:	e00f      	b.n	80177c4 <lv_draw_sw_arc+0x10c>
    }
    else {
        cir_dsc.bg_opa = dsc->opa;
 80177a4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80177a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	7b1b      	ldrb	r3, [r3, #12]
 80177b0:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
        cir_dsc.bg_color = dsc->color;
 80177b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80177b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	781b      	ldrb	r3, [r3, #0]
 80177c0:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
    }

    lv_area_t area_out;
    area_out.x1 = center->x - radius;
 80177c4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80177c8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80177d2:	b29a      	uxth	r2, r3
 80177d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80177d8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80177dc:	881b      	ldrh	r3, [r3, #0]
 80177de:	1ad3      	subs	r3, r2, r3
 80177e0:	b29b      	uxth	r3, r3
 80177e2:	b21b      	sxth	r3, r3
 80177e4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
    area_out.y1 = center->y - radius;
 80177e8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80177ec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80177f6:	b29a      	uxth	r2, r3
 80177f8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80177fc:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8017800:	881b      	ldrh	r3, [r3, #0]
 8017802:	1ad3      	subs	r3, r2, r3
 8017804:	b29b      	uxth	r3, r3
 8017806:	b21b      	sxth	r3, r3
 8017808:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 801780c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017810:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	f9b3 3000 	ldrsh.w	r3, [r3]
 801781a:	b29a      	uxth	r2, r3
 801781c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017820:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8017824:	881b      	ldrh	r3, [r3, #0]
 8017826:	4413      	add	r3, r2
 8017828:	b29b      	uxth	r3, r3
 801782a:	3b01      	subs	r3, #1
 801782c:	b29b      	uxth	r3, r3
 801782e:	b21b      	sxth	r3, r3
 8017830:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
    area_out.y2 = center->y + radius - 1;
 8017834:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017838:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017842:	b29a      	uxth	r2, r3
 8017844:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017848:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 801784c:	881b      	ldrh	r3, [r3, #0]
 801784e:	4413      	add	r3, r2
 8017850:	b29b      	uxth	r3, r3
 8017852:	3b01      	subs	r3, #1
 8017854:	b29b      	uxth	r3, r3
 8017856:	b21b      	sxth	r3, r3
 8017858:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    lv_area_t area_in;
    lv_area_copy(&area_in, &area_out);
 801785c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8017860:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8017864:	4611      	mov	r1, r2
 8017866:	4618      	mov	r0, r3
 8017868:	f7ff fed8 	bl	801761c <lv_area_copy>
    area_in.x1 += dsc->width;
 801786c:	f9b7 30f0 	ldrsh.w	r3, [r7, #240]	; 0xf0
 8017870:	b29a      	uxth	r2, r3
 8017872:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017876:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017880:	b29b      	uxth	r3, r3
 8017882:	4413      	add	r3, r2
 8017884:	b29b      	uxth	r3, r3
 8017886:	b21b      	sxth	r3, r3
 8017888:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
    area_in.y1 += dsc->width;
 801788c:	f9b7 30f2 	ldrsh.w	r3, [r7, #242]	; 0xf2
 8017890:	b29a      	uxth	r2, r3
 8017892:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017896:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80178a0:	b29b      	uxth	r3, r3
 80178a2:	4413      	add	r3, r2
 80178a4:	b29b      	uxth	r3, r3
 80178a6:	b21b      	sxth	r3, r3
 80178a8:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
    area_in.x2 -= dsc->width;
 80178ac:	f9b7 30f4 	ldrsh.w	r3, [r7, #244]	; 0xf4
 80178b0:	b29a      	uxth	r2, r3
 80178b2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80178b6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80178c0:	b29b      	uxth	r3, r3
 80178c2:	1ad3      	subs	r3, r2, r3
 80178c4:	b29b      	uxth	r3, r3
 80178c6:	b21b      	sxth	r3, r3
 80178c8:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
    area_in.y2 -= dsc->width;
 80178cc:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80178d0:	b29a      	uxth	r2, r3
 80178d2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80178d6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80178e0:	b29b      	uxth	r3, r3
 80178e2:	1ad3      	subs	r3, r2, r3
 80178e4:	b29b      	uxth	r3, r3
 80178e6:	b21b      	sxth	r3, r3
 80178e8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

    /*Create inner the mask*/
    int16_t mask_in_id = LV_MASK_ID_INV;
 80178ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80178f0:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
    lv_draw_mask_radius_param_t mask_in_param;
    bool mask_in_param_valid = false;
 80178f4:	2300      	movs	r3, #0
 80178f6:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 80178fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80178fe:	4618      	mov	r0, r3
 8017900:	f7ff feab 	bl	801765a <lv_area_get_width>
 8017904:	4603      	mov	r3, r0
 8017906:	2b00      	cmp	r3, #0
 8017908:	dd1c      	ble.n	8017944 <lv_draw_sw_arc+0x28c>
 801790a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801790e:	4618      	mov	r0, r3
 8017910:	f7ff feba 	bl	8017688 <lv_area_get_height>
 8017914:	4603      	mov	r3, r0
 8017916:	2b00      	cmp	r3, #0
 8017918:	dd14      	ble.n	8017944 <lv_draw_sw_arc+0x28c>
        lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 801791a:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 801791e:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8017922:	2301      	movs	r3, #1
 8017924:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017928:	f7fc fc1a 	bl	8014160 <lv_draw_mask_radius_init>
        mask_in_param_valid = true;
 801792c:	2301      	movs	r3, #1
 801792e:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
        mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 8017932:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8017936:	2100      	movs	r1, #0
 8017938:	4618      	mov	r0, r3
 801793a:	f7fc f845 	bl	80139c8 <lv_draw_mask_add>
 801793e:	4603      	mov	r3, r0
 8017940:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
    }

    lv_draw_mask_radius_param_t mask_out_param;
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 8017944:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8017948:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 801794c:	2300      	movs	r3, #0
 801794e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017952:	f7fc fc05 	bl	8014160 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 8017956:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801795a:	2100      	movs	r1, #0
 801795c:	4618      	mov	r0, r3
 801795e:	f7fc f833 	bl	80139c8 <lv_draw_mask_add>
 8017962:	4603      	mov	r3, r0
 8017964:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a

    /*Draw a full ring*/
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 8017968:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 801796c:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8017970:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8017974:	429a      	cmp	r2, r3
 8017976:	d007      	beq.n	8017988 <lv_draw_sw_arc+0x2d0>
 8017978:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 801797c:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8017980:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8017984:	429a      	cmp	r2, r3
 8017986:	d133      	bne.n	80179f0 <lv_draw_sw_arc+0x338>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 8017988:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801798c:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8017990:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8017994:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8017998:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801799c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80179a0:	6818      	ldr	r0, [r3, #0]
 80179a2:	f7fe fc1d 	bl	80161e0 <lv_draw_rect>

        lv_draw_mask_remove_id(mask_out_id);
 80179a6:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	; 0x13a
 80179aa:	4618      	mov	r0, r3
 80179ac:	f7fc f882 	bl	8013ab4 <lv_draw_mask_remove_id>
        if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 80179b0:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 80179b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80179b8:	d004      	beq.n	80179c4 <lv_draw_sw_arc+0x30c>
 80179ba:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 80179be:	4618      	mov	r0, r3
 80179c0:	f7fc f878 	bl	8013ab4 <lv_draw_mask_remove_id>

        lv_draw_mask_free_param(&mask_out_param);
 80179c4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80179c8:	4618      	mov	r0, r3
 80179ca:	f7fc f8c3 	bl	8013b54 <lv_draw_mask_free_param>
        if(mask_in_param_valid) {
 80179ce:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	f000 827b 	beq.w	8017ece <lv_draw_sw_arc+0x816>
            lv_draw_mask_free_param(&mask_in_param);
 80179d8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80179dc:	4618      	mov	r0, r3
 80179de:	f7fc f8b9 	bl	8013b54 <lv_draw_mask_free_param>
        }

        return;
 80179e2:	e274      	b.n	8017ece <lv_draw_sw_arc+0x816>
    }

    while(start_angle >= 360) start_angle -= 360;
 80179e4:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 80179e8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80179ec:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
 80179f0:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 80179f4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80179f8:	d2f4      	bcs.n	80179e4 <lv_draw_sw_arc+0x32c>
    while(end_angle >= 360) end_angle -= 360;
 80179fa:	e005      	b.n	8017a08 <lv_draw_sw_arc+0x350>
 80179fc:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8017a00:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8017a04:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8017a08:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8017a0c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8017a10:	d2f4      	bcs.n	80179fc <lv_draw_sw_arc+0x344>

    lv_draw_mask_angle_param_t mask_angle_param;
    lv_draw_mask_angle_init(&mask_angle_param, center->x, center->y, start_angle, end_angle);
 8017a12:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017a16:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017a20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017a24:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017a2e:	f9b7 4158 	ldrsh.w	r4, [r7, #344]	; 0x158
 8017a32:	f9b7 315c 	ldrsh.w	r3, [r7, #348]	; 0x15c
 8017a36:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8017a3a:	9300      	str	r3, [sp, #0]
 8017a3c:	4623      	mov	r3, r4
 8017a3e:	f7fc fad9 	bl	8013ff4 <lv_draw_mask_angle_init>
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 8017a42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017a46:	2100      	movs	r1, #0
 8017a48:	4618      	mov	r0, r3
 8017a4a:	f7fb ffbd 	bl	80139c8 <lv_draw_mask_add>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138

    int32_t angle_gap;
    if(end_angle > start_angle) {
 8017a54:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8017a58:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8017a5c:	429a      	cmp	r2, r3
 8017a5e:	d909      	bls.n	8017a74 <lv_draw_sw_arc+0x3bc>
        angle_gap = 360 - (end_angle - start_angle);
 8017a60:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8017a64:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8017a68:	1ad3      	subs	r3, r2, r3
 8017a6a:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8017a6e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8017a72:	e006      	b.n	8017a82 <lv_draw_sw_arc+0x3ca>
    }
    else {
        angle_gap = start_angle - end_angle;
 8017a74:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8017a78:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8017a7c:	1ad3      	subs	r3, r2, r3
 8017a7e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8017a82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017a86:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	689b      	ldr	r3, [r3, #8]
 8017a8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 8017a92:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8017a96:	2b3c      	cmp	r3, #60	; 0x3c
 8017a98:	f340 8080 	ble.w	8017b9c <lv_draw_sw_arc+0x4e4>
 8017a9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017aa0:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8017aa4:	881b      	ldrh	r3, [r3, #0]
 8017aa6:	2b0a      	cmp	r3, #10
 8017aa8:	d978      	bls.n	8017b9c <lv_draw_sw_arc+0x4e4>
        /*Handle each quarter individually and skip which is empty*/
        quarter_draw_dsc_t q_dsc;
        q_dsc.center = center;
 8017aaa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017aae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017ab2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8017ab6:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8017aba:	6812      	ldr	r2, [r2, #0]
 8017abc:	601a      	str	r2, [r3, #0]
        q_dsc.radius = radius;
 8017abe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017ac2:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8017ac6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017aca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017ace:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017ad2:	809a      	strh	r2, [r3, #4]
        q_dsc.start_angle = start_angle;
 8017ad4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017ad8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017adc:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8017ae0:	80da      	strh	r2, [r3, #6]
        q_dsc.end_angle = end_angle;
 8017ae2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017ae6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017aea:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8017aee:	811a      	strh	r2, [r3, #8]
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 8017af0:	f8b7 3158 	ldrh.w	r3, [r7, #344]	; 0x158
 8017af4:	085b      	lsrs	r3, r3, #1
 8017af6:	4a28      	ldr	r2, [pc, #160]	; (8017b98 <lv_draw_sw_arc+0x4e0>)
 8017af8:	fba2 2303 	umull	r2, r3, r2, r3
 8017afc:	095b      	lsrs	r3, r3, #5
 8017afe:	b29b      	uxth	r3, r3
 8017b00:	f003 0303 	and.w	r3, r3, #3
 8017b04:	b29a      	uxth	r2, r3
 8017b06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017b0a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017b0e:	815a      	strh	r2, [r3, #10]
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 8017b10:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8017b14:	085b      	lsrs	r3, r3, #1
 8017b16:	4a20      	ldr	r2, [pc, #128]	; (8017b98 <lv_draw_sw_arc+0x4e0>)
 8017b18:	fba2 2303 	umull	r2, r3, r2, r3
 8017b1c:	095b      	lsrs	r3, r3, #5
 8017b1e:	b29b      	uxth	r3, r3
 8017b20:	f003 0303 	and.w	r3, r3, #3
 8017b24:	b29a      	uxth	r2, r3
 8017b26:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017b2a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017b2e:	819a      	strh	r2, [r3, #12]
        q_dsc.width = width;
 8017b30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017b34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017b38:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 8017b3c:	81da      	strh	r2, [r3, #14]
        q_dsc.draw_dsc = &cir_dsc;
 8017b3e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017b42:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017b46:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8017b4a:	611a      	str	r2, [r3, #16]
        q_dsc.draw_area = &area_out;
 8017b4c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017b50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017b54:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8017b58:	615a      	str	r2, [r3, #20]
        q_dsc.draw_ctx = draw_ctx;
 8017b5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017b5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017b62:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8017b66:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8017b6a:	6812      	ldr	r2, [r2, #0]
 8017b6c:	619a      	str	r2, [r3, #24]

        draw_quarter_0(&q_dsc);
 8017b6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017b72:	4618      	mov	r0, r3
 8017b74:	f000 f9b0 	bl	8017ed8 <draw_quarter_0>
        draw_quarter_1(&q_dsc);
 8017b78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017b7c:	4618      	mov	r0, r3
 8017b7e:	f000 fb9d 	bl	80182bc <draw_quarter_1>
        draw_quarter_2(&q_dsc);
 8017b82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017b86:	4618      	mov	r0, r3
 8017b88:	f000 fd92 	bl	80186b0 <draw_quarter_2>
        draw_quarter_3(&q_dsc);
 8017b8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017b90:	4618      	mov	r0, r3
 8017b92:	f000 ff90 	bl	8018ab6 <draw_quarter_3>
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 8017b96:	e00c      	b.n	8017bb2 <lv_draw_sw_arc+0x4fa>
 8017b98:	b60b60b7 	.word	0xb60b60b7
    }
    else {
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8017b9c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8017ba0:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8017ba4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017ba8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8017bac:	6818      	ldr	r0, [r3, #0]
 8017bae:	f7fe fb17 	bl	80161e0 <lv_draw_rect>
    }

    lv_draw_mask_free_param(&mask_angle_param);
 8017bb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	f7fb ffcc 	bl	8013b54 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_out_param);
 8017bbc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	f7fb ffc7 	bl	8013b54 <lv_draw_mask_free_param>
    if(mask_in_param_valid) {
 8017bc6:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d004      	beq.n	8017bd8 <lv_draw_sw_arc+0x520>
        lv_draw_mask_free_param(&mask_in_param);
 8017bce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8017bd2:	4618      	mov	r0, r3
 8017bd4:	f7fb ffbe 	bl	8013b54 <lv_draw_mask_free_param>
    }

    lv_draw_mask_remove_id(mask_angle_id);
 8017bd8:	f9b7 3138 	ldrsh.w	r3, [r7, #312]	; 0x138
 8017bdc:	4618      	mov	r0, r3
 8017bde:	f7fb ff69 	bl	8013ab4 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_out_id);
 8017be2:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	; 0x13a
 8017be6:	4618      	mov	r0, r3
 8017be8:	f7fb ff64 	bl	8013ab4 <lv_draw_mask_remove_id>
    if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 8017bec:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8017bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017bf4:	d004      	beq.n	8017c00 <lv_draw_sw_arc+0x548>
 8017bf6:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f7fb ff5a 	bl	8013ab4 <lv_draw_mask_remove_id>

    if(dsc->rounded) {
 8017c00:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017c04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	7b5b      	ldrb	r3, [r3, #13]
 8017c0c:	f003 0304 	and.w	r3, r3, #4
 8017c10:	b2db      	uxtb	r3, r3
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	f000 815c 	beq.w	8017ed0 <lv_draw_sw_arc+0x818>

        lv_draw_mask_radius_param_t mask_end_param;

        lv_area_t round_area;
        get_rounded_area(start_angle, radius, width, &round_area);
 8017c18:	f9b7 0158 	ldrsh.w	r0, [r7, #344]	; 0x158
 8017c1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017c20:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8017c24:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017c28:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8017c2c:	b2da      	uxtb	r2, r3
 8017c2e:	f107 0318 	add.w	r3, r7, #24
 8017c32:	f001 f93a 	bl	8018eaa <get_rounded_area>
        round_area.x1 += center->x;
 8017c36:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017c3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017c42:	b29a      	uxth	r2, r3
 8017c44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017c48:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017c52:	b29b      	uxth	r3, r3
 8017c54:	4413      	add	r3, r2
 8017c56:	b29b      	uxth	r3, r3
 8017c58:	b21a      	sxth	r2, r3
 8017c5a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017c62:	801a      	strh	r2, [r3, #0]
        round_area.x2 += center->x;
 8017c64:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017c6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017c70:	b29a      	uxth	r2, r3
 8017c72:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017c76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017c80:	b29b      	uxth	r3, r3
 8017c82:	4413      	add	r3, r2
 8017c84:	b29b      	uxth	r3, r3
 8017c86:	b21a      	sxth	r2, r3
 8017c88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017c8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017c90:	809a      	strh	r2, [r3, #4]
        round_area.y1 += center->y;
 8017c92:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017c9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017c9e:	b29a      	uxth	r2, r3
 8017ca0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017ca4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017cae:	b29b      	uxth	r3, r3
 8017cb0:	4413      	add	r3, r2
 8017cb2:	b29b      	uxth	r3, r3
 8017cb4:	b21a      	sxth	r2, r3
 8017cb6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017cbe:	805a      	strh	r2, [r3, #2]
        round_area.y2 += center->y;
 8017cc0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017cc8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017ccc:	b29a      	uxth	r2, r3
 8017cce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017cd2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017cdc:	b29b      	uxth	r3, r3
 8017cde:	4413      	add	r3, r2
 8017ce0:	b29b      	uxth	r3, r3
 8017ce2:	b21a      	sxth	r2, r3
 8017ce4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017cec:	80da      	strh	r2, [r3, #6]
        lv_area_t clip_area2;
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8017cee:	f107 0218 	add.w	r2, r7, #24
 8017cf2:	f107 0310 	add.w	r3, r7, #16
 8017cf6:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f00a fdda 	bl	80228b4 <_lv_area_intersect>
 8017d00:	4603      	mov	r3, r0
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d02e      	beq.n	8017d64 <lv_draw_sw_arc+0x6ac>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8017d06:	f107 0118 	add.w	r1, r7, #24
 8017d0a:	f107 0020 	add.w	r0, r7, #32
 8017d0e:	2300      	movs	r3, #0
 8017d10:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017d14:	f7fc fa24 	bl	8014160 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8017d18:	f107 0320 	add.w	r3, r7, #32
 8017d1c:	2100      	movs	r1, #0
 8017d1e:	4618      	mov	r0, r3
 8017d20:	f7fb fe52 	bl	80139c8 <lv_draw_mask_add>
 8017d24:	4603      	mov	r3, r0
 8017d26:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132

            draw_ctx->clip_area = &clip_area2;
 8017d2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017d2e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	f107 0210 	add.w	r2, r7, #16
 8017d38:	609a      	str	r2, [r3, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8017d3a:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8017d3e:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8017d42:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017d46:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8017d4a:	6818      	ldr	r0, [r3, #0]
 8017d4c:	f7fe fa48 	bl	80161e0 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8017d50:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 8017d54:	4618      	mov	r0, r3
 8017d56:	f7fb fead 	bl	8013ab4 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8017d5a:	f107 0320 	add.w	r3, r7, #32
 8017d5e:	4618      	mov	r0, r3
 8017d60:	f7fb fef8 	bl	8013b54 <lv_draw_mask_free_param>
        }

        get_rounded_area(end_angle, radius, width, &round_area);
 8017d64:	f9b7 015c 	ldrsh.w	r0, [r7, #348]	; 0x15c
 8017d68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017d6c:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8017d70:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017d74:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8017d78:	b2da      	uxtb	r2, r3
 8017d7a:	f107 0318 	add.w	r3, r7, #24
 8017d7e:	f001 f894 	bl	8018eaa <get_rounded_area>
        round_area.x1 += center->x;
 8017d82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d8e:	b29a      	uxth	r2, r3
 8017d90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017d94:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d9e:	b29b      	uxth	r3, r3
 8017da0:	4413      	add	r3, r2
 8017da2:	b29b      	uxth	r3, r3
 8017da4:	b21a      	sxth	r2, r3
 8017da6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017dae:	801a      	strh	r2, [r3, #0]
        round_area.x2 += center->x;
 8017db0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017db8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017dbc:	b29a      	uxth	r2, r3
 8017dbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017dc2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017dcc:	b29b      	uxth	r3, r3
 8017dce:	4413      	add	r3, r2
 8017dd0:	b29b      	uxth	r3, r3
 8017dd2:	b21a      	sxth	r2, r3
 8017dd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017ddc:	809a      	strh	r2, [r3, #4]
        round_area.y1 += center->y;
 8017dde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017de6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017dea:	b29a      	uxth	r2, r3
 8017dec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017df0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017dfa:	b29b      	uxth	r3, r3
 8017dfc:	4413      	add	r3, r2
 8017dfe:	b29b      	uxth	r3, r3
 8017e00:	b21a      	sxth	r2, r3
 8017e02:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017e0a:	805a      	strh	r2, [r3, #2]
        round_area.y2 += center->y;
 8017e0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017e10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017e14:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017e18:	b29a      	uxth	r2, r3
 8017e1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017e1e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017e28:	b29b      	uxth	r3, r3
 8017e2a:	4413      	add	r3, r2
 8017e2c:	b29b      	uxth	r3, r3
 8017e2e:	b21a      	sxth	r2, r3
 8017e30:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017e34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8017e38:	80da      	strh	r2, [r3, #6]
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8017e3a:	f107 0218 	add.w	r2, r7, #24
 8017e3e:	f107 0310 	add.w	r3, r7, #16
 8017e42:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8017e46:	4618      	mov	r0, r3
 8017e48:	f00a fd34 	bl	80228b4 <_lv_area_intersect>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d02e      	beq.n	8017eb0 <lv_draw_sw_arc+0x7f8>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8017e52:	f107 0118 	add.w	r1, r7, #24
 8017e56:	f107 0020 	add.w	r0, r7, #32
 8017e5a:	2300      	movs	r3, #0
 8017e5c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017e60:	f7fc f97e 	bl	8014160 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8017e64:	f107 0320 	add.w	r3, r7, #32
 8017e68:	2100      	movs	r1, #0
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	f7fb fdac 	bl	80139c8 <lv_draw_mask_add>
 8017e70:	4603      	mov	r3, r0
 8017e72:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

            draw_ctx->clip_area = &clip_area2;
 8017e76:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017e7a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	f107 0210 	add.w	r2, r7, #16
 8017e84:	609a      	str	r2, [r3, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8017e86:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8017e8a:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8017e8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017e92:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8017e96:	6818      	ldr	r0, [r3, #0]
 8017e98:	f7fe f9a2 	bl	80161e0 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8017e9c:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f7fb fe07 	bl	8013ab4 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8017ea6:	f107 0320 	add.w	r3, r7, #32
 8017eaa:	4618      	mov	r0, r3
 8017eac:	f7fb fe52 	bl	8013b54 <lv_draw_mask_free_param>
        }
        draw_ctx->clip_area = clip_area_ori;
 8017eb0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8017eb4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8017ebe:	609a      	str	r2, [r3, #8]
 8017ec0:	e006      	b.n	8017ed0 <lv_draw_sw_arc+0x818>
    if(dsc->opa <= LV_OPA_MIN) return;
 8017ec2:	bf00      	nop
 8017ec4:	e004      	b.n	8017ed0 <lv_draw_sw_arc+0x818>
    if(dsc->width == 0) return;
 8017ec6:	bf00      	nop
 8017ec8:	e002      	b.n	8017ed0 <lv_draw_sw_arc+0x818>
    if(start_angle == end_angle) return;
 8017eca:	bf00      	nop
 8017ecc:	e000      	b.n	8017ed0 <lv_draw_sw_arc+0x818>
        return;
 8017ece:	bf00      	nop
    LV_UNUSED(start_angle);
    LV_UNUSED(end_angle);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(dsc);
#endif /*LV_DRAW_COMPLEX*/
}
 8017ed0:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8017ed4:	46bd      	mov	sp, r7
 8017ed6:	bd90      	pop	{r4, r7, pc}

08017ed8 <draw_quarter_0>:
 *   STATIC FUNCTIONS
 **********************/

#if LV_DRAW_COMPLEX
static void draw_quarter_0(quarter_draw_dsc_t * q)
{
 8017ed8:	b590      	push	{r4, r7, lr}
 8017eda:	b087      	sub	sp, #28
 8017edc:	af00      	add	r7, sp, #0
 8017ede:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	699b      	ldr	r3, [r3, #24]
 8017ee4:	689b      	ldr	r3, [r3, #8]
 8017ee6:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	895b      	ldrh	r3, [r3, #10]
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	f040 8097 	bne.w	8018020 <draw_quarter_0+0x148>
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	899b      	ldrh	r3, [r3, #12]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	f040 8092 	bne.w	8018020 <draw_quarter_0+0x148>
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	88da      	ldrh	r2, [r3, #6]
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	891b      	ldrh	r3, [r3, #8]
 8017f04:	429a      	cmp	r2, r3
 8017f06:	f080 808b 	bcs.w	8018020 <draw_quarter_0+0x148>
        /*Small arc here*/
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017f12:	b29c      	uxth	r4, r3
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	88db      	ldrh	r3, [r3, #6]
 8017f18:	b21b      	sxth	r3, r3
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	f00b fed0 	bl	8023cc0 <lv_trigo_sin>
 8017f20:	4603      	mov	r3, r0
 8017f22:	461a      	mov	r2, r3
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017f2a:	4619      	mov	r1, r3
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8017f32:	1acb      	subs	r3, r1, r3
 8017f34:	fb02 f303 	mul.w	r3, r2, r3
 8017f38:	13db      	asrs	r3, r3, #15
 8017f3a:	b29b      	uxth	r3, r3
 8017f3c:	4423      	add	r3, r4
 8017f3e:	b29b      	uxth	r3, r3
 8017f40:	b21b      	sxth	r3, r3
 8017f42:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f4c:	b29c      	uxth	r4, r3
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	88db      	ldrh	r3, [r3, #6]
 8017f52:	335a      	adds	r3, #90	; 0x5a
 8017f54:	b29b      	uxth	r3, r3
 8017f56:	b21b      	sxth	r3, r3
 8017f58:	4618      	mov	r0, r3
 8017f5a:	f00b feb1 	bl	8023cc0 <lv_trigo_sin>
 8017f5e:	4603      	mov	r3, r0
 8017f60:	461a      	mov	r2, r3
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017f68:	fb02 f303 	mul.w	r3, r2, r3
 8017f6c:	13db      	asrs	r3, r3, #15
 8017f6e:	b29b      	uxth	r3, r3
 8017f70:	4423      	add	r3, r4
 8017f72:	b29b      	uxth	r3, r3
 8017f74:	b21b      	sxth	r3, r3
 8017f76:	81bb      	strh	r3, [r7, #12]

        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017f80:	b29c      	uxth	r4, r3
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	891b      	ldrh	r3, [r3, #8]
 8017f86:	b21b      	sxth	r3, r3
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f00b fe99 	bl	8023cc0 <lv_trigo_sin>
 8017f8e:	4603      	mov	r3, r0
 8017f90:	461a      	mov	r2, r3
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017f98:	fb02 f303 	mul.w	r3, r2, r3
 8017f9c:	13db      	asrs	r3, r3, #15
 8017f9e:	b29b      	uxth	r3, r3
 8017fa0:	4423      	add	r3, r4
 8017fa2:	b29b      	uxth	r3, r3
 8017fa4:	b21b      	sxth	r3, r3
 8017fa6:	81fb      	strh	r3, [r7, #14]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017fb0:	b29c      	uxth	r4, r3
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	891b      	ldrh	r3, [r3, #8]
 8017fb6:	335a      	adds	r3, #90	; 0x5a
 8017fb8:	b29b      	uxth	r3, r3
 8017fba:	b21b      	sxth	r3, r3
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	f00b fe7f 	bl	8023cc0 <lv_trigo_sin>
 8017fc2:	4603      	mov	r3, r0
 8017fc4:	461a      	mov	r2, r3
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017fcc:	4619      	mov	r1, r3
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8017fd4:	1acb      	subs	r3, r1, r3
 8017fd6:	fb02 f303 	mul.w	r3, r2, r3
 8017fda:	13db      	asrs	r3, r3, #15
 8017fdc:	b29b      	uxth	r3, r3
 8017fde:	4423      	add	r3, r4
 8017fe0:	b29b      	uxth	r3, r3
 8017fe2:	b21b      	sxth	r3, r3
 8017fe4:	813b      	strh	r3, [r7, #8]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8017fe6:	f107 0108 	add.w	r1, r7, #8
 8017fea:	f107 0308 	add.w	r3, r7, #8
 8017fee:	697a      	ldr	r2, [r7, #20]
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f00a fc5f 	bl	80228b4 <_lv_area_intersect>
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 8017ffa:	7cfb      	ldrb	r3, [r7, #19]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	f000 8152 	beq.w	80182a6 <draw_quarter_0+0x3ce>
            q->draw_ctx->clip_area = &quarter_area;
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	699b      	ldr	r3, [r3, #24]
 8018006:	f107 0208 	add.w	r2, r7, #8
 801800a:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	6998      	ldr	r0, [r3, #24]
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	6919      	ldr	r1, [r3, #16]
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	695b      	ldr	r3, [r3, #20]
 8018018:	461a      	mov	r2, r3
 801801a:	f7fe f8e1 	bl	80161e0 <lv_draw_rect>
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 801801e:	e142      	b.n	80182a6 <draw_quarter_0+0x3ce>
        }
    }
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	895b      	ldrh	r3, [r3, #10]
 8018024:	2b00      	cmp	r3, #0
 8018026:	d004      	beq.n	8018032 <draw_quarter_0+0x15a>
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	899b      	ldrh	r3, [r3, #12]
 801802c:	2b00      	cmp	r3, #0
 801802e:	f040 80d2 	bne.w	80181d6 <draw_quarter_0+0x2fe>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 0) {
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	895b      	ldrh	r3, [r3, #10]
 8018036:	2b00      	cmp	r3, #0
 8018038:	d163      	bne.n	8018102 <draw_quarter_0+0x22a>
            quarter_area.x1 = q->center->x;
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018042:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y + q->radius;
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801804c:	b29a      	uxth	r2, r3
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018054:	b29b      	uxth	r3, r3
 8018056:	4413      	add	r3, r2
 8018058:	b29b      	uxth	r3, r3
 801805a:	b21b      	sxth	r3, r3
 801805c:	81fb      	strh	r3, [r7, #14]

            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018066:	b29c      	uxth	r4, r3
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	88db      	ldrh	r3, [r3, #6]
 801806c:	b21b      	sxth	r3, r3
 801806e:	4618      	mov	r0, r3
 8018070:	f00b fe26 	bl	8023cc0 <lv_trigo_sin>
 8018074:	4603      	mov	r3, r0
 8018076:	461a      	mov	r2, r3
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801807e:	4619      	mov	r1, r3
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8018086:	1acb      	subs	r3, r1, r3
 8018088:	fb02 f303 	mul.w	r3, r2, r3
 801808c:	13db      	asrs	r3, r3, #15
 801808e:	b29b      	uxth	r3, r3
 8018090:	4423      	add	r3, r4
 8018092:	b29b      	uxth	r3, r3
 8018094:	b21b      	sxth	r3, r3
 8018096:	817b      	strh	r3, [r7, #10]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80180a0:	b29c      	uxth	r4, r3
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	88db      	ldrh	r3, [r3, #6]
 80180a6:	335a      	adds	r3, #90	; 0x5a
 80180a8:	b29b      	uxth	r3, r3
 80180aa:	b21b      	sxth	r3, r3
 80180ac:	4618      	mov	r0, r3
 80180ae:	f00b fe07 	bl	8023cc0 <lv_trigo_sin>
 80180b2:	4603      	mov	r3, r0
 80180b4:	461a      	mov	r2, r3
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80180bc:	fb02 f303 	mul.w	r3, r2, r3
 80180c0:	13db      	asrs	r3, r3, #15
 80180c2:	b29b      	uxth	r3, r3
 80180c4:	4423      	add	r3, r4
 80180c6:	b29b      	uxth	r3, r3
 80180c8:	b21b      	sxth	r3, r3
 80180ca:	81bb      	strh	r3, [r7, #12]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80180cc:	f107 0108 	add.w	r1, r7, #8
 80180d0:	f107 0308 	add.w	r3, r7, #8
 80180d4:	697a      	ldr	r2, [r7, #20]
 80180d6:	4618      	mov	r0, r3
 80180d8:	f00a fbec 	bl	80228b4 <_lv_area_intersect>
 80180dc:	4603      	mov	r3, r0
 80180de:	747b      	strb	r3, [r7, #17]
            if(ok) {
 80180e0:	7c7b      	ldrb	r3, [r7, #17]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d00d      	beq.n	8018102 <draw_quarter_0+0x22a>
                q->draw_ctx->clip_area = &quarter_area;
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	699b      	ldr	r3, [r3, #24]
 80180ea:	f107 0208 	add.w	r2, r7, #8
 80180ee:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	6998      	ldr	r0, [r3, #24]
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	6919      	ldr	r1, [r3, #16]
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	695b      	ldr	r3, [r3, #20]
 80180fc:	461a      	mov	r2, r3
 80180fe:	f7fe f86f 	bl	80161e0 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 0) {
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	899b      	ldrh	r3, [r3, #12]
 8018106:	2b00      	cmp	r3, #0
 8018108:	f040 80cf 	bne.w	80182aa <draw_quarter_0+0x3d2>
            quarter_area.x2 = q->center->x + q->radius;
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018114:	b29a      	uxth	r2, r3
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801811c:	b29b      	uxth	r3, r3
 801811e:	4413      	add	r3, r2
 8018120:	b29b      	uxth	r3, r3
 8018122:	b21b      	sxth	r3, r3
 8018124:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y;
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801812e:	817b      	strh	r3, [r7, #10]

            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018138:	b29c      	uxth	r4, r3
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	891b      	ldrh	r3, [r3, #8]
 801813e:	b21b      	sxth	r3, r3
 8018140:	4618      	mov	r0, r3
 8018142:	f00b fdbd 	bl	8023cc0 <lv_trigo_sin>
 8018146:	4603      	mov	r3, r0
 8018148:	461a      	mov	r2, r3
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018150:	fb02 f303 	mul.w	r3, r2, r3
 8018154:	13db      	asrs	r3, r3, #15
 8018156:	b29b      	uxth	r3, r3
 8018158:	4423      	add	r3, r4
 801815a:	b29b      	uxth	r3, r3
 801815c:	b21b      	sxth	r3, r3
 801815e:	81fb      	strh	r3, [r7, #14]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018168:	b29c      	uxth	r4, r3
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	891b      	ldrh	r3, [r3, #8]
 801816e:	335a      	adds	r3, #90	; 0x5a
 8018170:	b29b      	uxth	r3, r3
 8018172:	b21b      	sxth	r3, r3
 8018174:	4618      	mov	r0, r3
 8018176:	f00b fda3 	bl	8023cc0 <lv_trigo_sin>
 801817a:	4603      	mov	r3, r0
 801817c:	461a      	mov	r2, r3
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018184:	4619      	mov	r1, r3
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801818c:	1acb      	subs	r3, r1, r3
 801818e:	fb02 f303 	mul.w	r3, r2, r3
 8018192:	13db      	asrs	r3, r3, #15
 8018194:	b29b      	uxth	r3, r3
 8018196:	4423      	add	r3, r4
 8018198:	b29b      	uxth	r3, r3
 801819a:	b21b      	sxth	r3, r3
 801819c:	813b      	strh	r3, [r7, #8]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801819e:	f107 0108 	add.w	r1, r7, #8
 80181a2:	f107 0308 	add.w	r3, r7, #8
 80181a6:	697a      	ldr	r2, [r7, #20]
 80181a8:	4618      	mov	r0, r3
 80181aa:	f00a fb83 	bl	80228b4 <_lv_area_intersect>
 80181ae:	4603      	mov	r3, r0
 80181b0:	743b      	strb	r3, [r7, #16]
            if(ok) {
 80181b2:	7c3b      	ldrb	r3, [r7, #16]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d078      	beq.n	80182aa <draw_quarter_0+0x3d2>
                q->draw_ctx->clip_area = &quarter_area;
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	699b      	ldr	r3, [r3, #24]
 80181bc:	f107 0208 	add.w	r2, r7, #8
 80181c0:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	6998      	ldr	r0, [r3, #24]
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	6919      	ldr	r1, [r3, #16]
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	695b      	ldr	r3, [r3, #20]
 80181ce:	461a      	mov	r2, r3
 80181d0:	f7fe f806 	bl	80161e0 <lv_draw_rect>
        if(q->end_quarter == 0) {
 80181d4:	e069      	b.n	80182aa <draw_quarter_0+0x3d2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	895a      	ldrh	r2, [r3, #10]
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	899b      	ldrh	r3, [r3, #12]
 80181de:	429a      	cmp	r2, r3
 80181e0:	d109      	bne.n	80181f6 <draw_quarter_0+0x31e>
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	895b      	ldrh	r3, [r3, #10]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d005      	beq.n	80181f6 <draw_quarter_0+0x31e>
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	891a      	ldrh	r2, [r3, #8]
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	88db      	ldrh	r3, [r3, #6]
 80181f2:	429a      	cmp	r2, r3
 80181f4:	d317      	bcc.n	8018226 <draw_quarter_0+0x34e>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 80181fa:	2b02      	cmp	r3, #2
 80181fc:	d103      	bne.n	8018206 <draw_quarter_0+0x32e>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	899b      	ldrh	r3, [r3, #12]
 8018202:	2b01      	cmp	r3, #1
 8018204:	d00f      	beq.n	8018226 <draw_quarter_0+0x34e>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 801820a:	2b03      	cmp	r3, #3
 801820c:	d103      	bne.n	8018216 <draw_quarter_0+0x33e>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	899b      	ldrh	r3, [r3, #12]
 8018212:	2b02      	cmp	r3, #2
 8018214:	d007      	beq.n	8018226 <draw_quarter_0+0x34e>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 801821a:	2b03      	cmp	r3, #3
 801821c:	d146      	bne.n	80182ac <draw_quarter_0+0x3d4>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	899b      	ldrh	r3, [r3, #12]
 8018222:	2b01      	cmp	r3, #1
 8018224:	d142      	bne.n	80182ac <draw_quarter_0+0x3d4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x;
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801822e:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y;
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018238:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + q->radius;
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018242:	b29a      	uxth	r2, r3
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801824a:	b29b      	uxth	r3, r3
 801824c:	4413      	add	r3, r2
 801824e:	b29b      	uxth	r3, r3
 8018250:	b21b      	sxth	r3, r3
 8018252:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + q->radius;
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801825c:	b29a      	uxth	r2, r3
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018264:	b29b      	uxth	r3, r3
 8018266:	4413      	add	r3, r2
 8018268:	b29b      	uxth	r3, r3
 801826a:	b21b      	sxth	r3, r3
 801826c:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801826e:	f107 0108 	add.w	r1, r7, #8
 8018272:	f107 0308 	add.w	r3, r7, #8
 8018276:	697a      	ldr	r2, [r7, #20]
 8018278:	4618      	mov	r0, r3
 801827a:	f00a fb1b 	bl	80228b4 <_lv_area_intersect>
 801827e:	4603      	mov	r3, r0
 8018280:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8018282:	7cbb      	ldrb	r3, [r7, #18]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d011      	beq.n	80182ac <draw_quarter_0+0x3d4>
            q->draw_ctx->clip_area = &quarter_area;
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	699b      	ldr	r3, [r3, #24]
 801828c:	f107 0208 	add.w	r2, r7, #8
 8018290:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	6998      	ldr	r0, [r3, #24]
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	6919      	ldr	r1, [r3, #16]
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	695b      	ldr	r3, [r3, #20]
 801829e:	461a      	mov	r2, r3
 80182a0:	f7fd ff9e 	bl	80161e0 <lv_draw_rect>
 80182a4:	e002      	b.n	80182ac <draw_quarter_0+0x3d4>
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 80182a6:	bf00      	nop
 80182a8:	e000      	b.n	80182ac <draw_quarter_0+0x3d4>
        if(q->end_quarter == 0) {
 80182aa:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	699b      	ldr	r3, [r3, #24]
 80182b0:	697a      	ldr	r2, [r7, #20]
 80182b2:	609a      	str	r2, [r3, #8]
}
 80182b4:	bf00      	nop
 80182b6:	371c      	adds	r7, #28
 80182b8:	46bd      	mov	sp, r7
 80182ba:	bd90      	pop	{r4, r7, pc}

080182bc <draw_quarter_1>:

static void draw_quarter_1(quarter_draw_dsc_t * q)
{
 80182bc:	b590      	push	{r4, r7, lr}
 80182be:	b087      	sub	sp, #28
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	699b      	ldr	r3, [r3, #24]
 80182c8:	689b      	ldr	r3, [r3, #8]
 80182ca:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	895b      	ldrh	r3, [r3, #10]
 80182d0:	2b01      	cmp	r3, #1
 80182d2:	f040 8097 	bne.w	8018404 <draw_quarter_1+0x148>
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	899b      	ldrh	r3, [r3, #12]
 80182da:	2b01      	cmp	r3, #1
 80182dc:	f040 8092 	bne.w	8018404 <draw_quarter_1+0x148>
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	88da      	ldrh	r2, [r3, #6]
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	891b      	ldrh	r3, [r3, #8]
 80182e8:	429a      	cmp	r2, r3
 80182ea:	f080 808b 	bcs.w	8018404 <draw_quarter_1+0x148>
        /*Small arc here*/
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80182f6:	b29c      	uxth	r4, r3
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	88db      	ldrh	r3, [r3, #6]
 80182fc:	b21b      	sxth	r3, r3
 80182fe:	4618      	mov	r0, r3
 8018300:	f00b fcde 	bl	8023cc0 <lv_trigo_sin>
 8018304:	4603      	mov	r3, r0
 8018306:	461a      	mov	r2, r3
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801830e:	fb02 f303 	mul.w	r3, r2, r3
 8018312:	13db      	asrs	r3, r3, #15
 8018314:	b29b      	uxth	r3, r3
 8018316:	4423      	add	r3, r4
 8018318:	b29b      	uxth	r3, r3
 801831a:	b21b      	sxth	r3, r3
 801831c:	81fb      	strh	r3, [r7, #14]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018326:	b29c      	uxth	r4, r3
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	88db      	ldrh	r3, [r3, #6]
 801832c:	335a      	adds	r3, #90	; 0x5a
 801832e:	b29b      	uxth	r3, r3
 8018330:	b21b      	sxth	r3, r3
 8018332:	4618      	mov	r0, r3
 8018334:	f00b fcc4 	bl	8023cc0 <lv_trigo_sin>
 8018338:	4603      	mov	r3, r0
 801833a:	461a      	mov	r2, r3
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018342:	4619      	mov	r1, r3
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801834a:	1acb      	subs	r3, r1, r3
 801834c:	fb02 f303 	mul.w	r3, r2, r3
 8018350:	13db      	asrs	r3, r3, #15
 8018352:	b29b      	uxth	r3, r3
 8018354:	4423      	add	r3, r4
 8018356:	b29b      	uxth	r3, r3
 8018358:	b21b      	sxth	r3, r3
 801835a:	81bb      	strh	r3, [r7, #12]

        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018364:	b29c      	uxth	r4, r3
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	891b      	ldrh	r3, [r3, #8]
 801836a:	b21b      	sxth	r3, r3
 801836c:	4618      	mov	r0, r3
 801836e:	f00b fca7 	bl	8023cc0 <lv_trigo_sin>
 8018372:	4603      	mov	r3, r0
 8018374:	461a      	mov	r2, r3
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801837c:	4619      	mov	r1, r3
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8018384:	1acb      	subs	r3, r1, r3
 8018386:	fb02 f303 	mul.w	r3, r2, r3
 801838a:	13db      	asrs	r3, r3, #15
 801838c:	b29b      	uxth	r3, r3
 801838e:	4423      	add	r3, r4
 8018390:	b29b      	uxth	r3, r3
 8018392:	b21b      	sxth	r3, r3
 8018394:	817b      	strh	r3, [r7, #10]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801839e:	b29c      	uxth	r4, r3
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	891b      	ldrh	r3, [r3, #8]
 80183a4:	335a      	adds	r3, #90	; 0x5a
 80183a6:	b29b      	uxth	r3, r3
 80183a8:	b21b      	sxth	r3, r3
 80183aa:	4618      	mov	r0, r3
 80183ac:	f00b fc88 	bl	8023cc0 <lv_trigo_sin>
 80183b0:	4603      	mov	r3, r0
 80183b2:	461a      	mov	r2, r3
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80183ba:	fb02 f303 	mul.w	r3, r2, r3
 80183be:	13db      	asrs	r3, r3, #15
 80183c0:	b29b      	uxth	r3, r3
 80183c2:	4423      	add	r3, r4
 80183c4:	b29b      	uxth	r3, r3
 80183c6:	b21b      	sxth	r3, r3
 80183c8:	813b      	strh	r3, [r7, #8]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80183ca:	f107 0108 	add.w	r1, r7, #8
 80183ce:	f107 0308 	add.w	r3, r7, #8
 80183d2:	697a      	ldr	r2, [r7, #20]
 80183d4:	4618      	mov	r0, r3
 80183d6:	f00a fa6d 	bl	80228b4 <_lv_area_intersect>
 80183da:	4603      	mov	r3, r0
 80183dc:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 80183de:	7cfb      	ldrb	r3, [r7, #19]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	f000 815a 	beq.w	801869a <draw_quarter_1+0x3de>
            q->draw_ctx->clip_area = &quarter_area;
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	699b      	ldr	r3, [r3, #24]
 80183ea:	f107 0208 	add.w	r2, r7, #8
 80183ee:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	6998      	ldr	r0, [r3, #24]
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	6919      	ldr	r1, [r3, #16]
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	695b      	ldr	r3, [r3, #20]
 80183fc:	461a      	mov	r2, r3
 80183fe:	f7fd feef 	bl	80161e0 <lv_draw_rect>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 8018402:	e14a      	b.n	801869a <draw_quarter_1+0x3de>
        }
    }
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	895b      	ldrh	r3, [r3, #10]
 8018408:	2b01      	cmp	r3, #1
 801840a:	d004      	beq.n	8018416 <draw_quarter_1+0x15a>
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	899b      	ldrh	r3, [r3, #12]
 8018410:	2b01      	cmp	r3, #1
 8018412:	f040 80d6 	bne.w	80185c2 <draw_quarter_1+0x306>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 1) {
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	895b      	ldrh	r3, [r3, #10]
 801841a:	2b01      	cmp	r3, #1
 801841c:	d163      	bne.n	80184e6 <draw_quarter_1+0x22a>
            quarter_area.x1 = q->center->x - q->radius;
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018426:	b29a      	uxth	r2, r3
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801842e:	b29b      	uxth	r3, r3
 8018430:	1ad3      	subs	r3, r2, r3
 8018432:	b29b      	uxth	r3, r3
 8018434:	b21b      	sxth	r3, r3
 8018436:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y;
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018440:	817b      	strh	r3, [r7, #10]

            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801844a:	b29c      	uxth	r4, r3
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	88db      	ldrh	r3, [r3, #6]
 8018450:	b21b      	sxth	r3, r3
 8018452:	4618      	mov	r0, r3
 8018454:	f00b fc34 	bl	8023cc0 <lv_trigo_sin>
 8018458:	4603      	mov	r3, r0
 801845a:	461a      	mov	r2, r3
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018462:	fb02 f303 	mul.w	r3, r2, r3
 8018466:	13db      	asrs	r3, r3, #15
 8018468:	b29b      	uxth	r3, r3
 801846a:	4423      	add	r3, r4
 801846c:	b29b      	uxth	r3, r3
 801846e:	b21b      	sxth	r3, r3
 8018470:	81fb      	strh	r3, [r7, #14]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	f9b3 3000 	ldrsh.w	r3, [r3]
 801847a:	b29c      	uxth	r4, r3
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	88db      	ldrh	r3, [r3, #6]
 8018480:	335a      	adds	r3, #90	; 0x5a
 8018482:	b29b      	uxth	r3, r3
 8018484:	b21b      	sxth	r3, r3
 8018486:	4618      	mov	r0, r3
 8018488:	f00b fc1a 	bl	8023cc0 <lv_trigo_sin>
 801848c:	4603      	mov	r3, r0
 801848e:	461a      	mov	r2, r3
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018496:	4619      	mov	r1, r3
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801849e:	1acb      	subs	r3, r1, r3
 80184a0:	fb02 f303 	mul.w	r3, r2, r3
 80184a4:	13db      	asrs	r3, r3, #15
 80184a6:	b29b      	uxth	r3, r3
 80184a8:	4423      	add	r3, r4
 80184aa:	b29b      	uxth	r3, r3
 80184ac:	b21b      	sxth	r3, r3
 80184ae:	81bb      	strh	r3, [r7, #12]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80184b0:	f107 0108 	add.w	r1, r7, #8
 80184b4:	f107 0308 	add.w	r3, r7, #8
 80184b8:	697a      	ldr	r2, [r7, #20]
 80184ba:	4618      	mov	r0, r3
 80184bc:	f00a f9fa 	bl	80228b4 <_lv_area_intersect>
 80184c0:	4603      	mov	r3, r0
 80184c2:	747b      	strb	r3, [r7, #17]
            if(ok) {
 80184c4:	7c7b      	ldrb	r3, [r7, #17]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d00d      	beq.n	80184e6 <draw_quarter_1+0x22a>
                q->draw_ctx->clip_area = &quarter_area;
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	699b      	ldr	r3, [r3, #24]
 80184ce:	f107 0208 	add.w	r2, r7, #8
 80184d2:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	6998      	ldr	r0, [r3, #24]
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	6919      	ldr	r1, [r3, #16]
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	695b      	ldr	r3, [r3, #20]
 80184e0:	461a      	mov	r2, r3
 80184e2:	f7fd fe7d 	bl	80161e0 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 1) {
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	899b      	ldrh	r3, [r3, #12]
 80184ea:	2b01      	cmp	r3, #1
 80184ec:	f040 80d7 	bne.w	801869e <draw_quarter_1+0x3e2>
            quarter_area.x2 = q->center->x - 1;
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80184f8:	b29b      	uxth	r3, r3
 80184fa:	3b01      	subs	r3, #1
 80184fc:	b29b      	uxth	r3, r3
 80184fe:	b21b      	sxth	r3, r3
 8018500:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y + q->radius;
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801850a:	b29a      	uxth	r2, r3
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018512:	b29b      	uxth	r3, r3
 8018514:	4413      	add	r3, r2
 8018516:	b29b      	uxth	r3, r3
 8018518:	b21b      	sxth	r3, r3
 801851a:	81fb      	strh	r3, [r7, #14]

            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018524:	b29c      	uxth	r4, r3
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	891b      	ldrh	r3, [r3, #8]
 801852a:	b21b      	sxth	r3, r3
 801852c:	4618      	mov	r0, r3
 801852e:	f00b fbc7 	bl	8023cc0 <lv_trigo_sin>
 8018532:	4603      	mov	r3, r0
 8018534:	461a      	mov	r2, r3
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801853c:	4619      	mov	r1, r3
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8018544:	1acb      	subs	r3, r1, r3
 8018546:	fb02 f303 	mul.w	r3, r2, r3
 801854a:	13db      	asrs	r3, r3, #15
 801854c:	b29b      	uxth	r3, r3
 801854e:	4423      	add	r3, r4
 8018550:	b29b      	uxth	r3, r3
 8018552:	b21b      	sxth	r3, r3
 8018554:	817b      	strh	r3, [r7, #10]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801855e:	b29c      	uxth	r4, r3
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	891b      	ldrh	r3, [r3, #8]
 8018564:	335a      	adds	r3, #90	; 0x5a
 8018566:	b29b      	uxth	r3, r3
 8018568:	b21b      	sxth	r3, r3
 801856a:	4618      	mov	r0, r3
 801856c:	f00b fba8 	bl	8023cc0 <lv_trigo_sin>
 8018570:	4603      	mov	r3, r0
 8018572:	461a      	mov	r2, r3
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801857a:	fb02 f303 	mul.w	r3, r2, r3
 801857e:	13db      	asrs	r3, r3, #15
 8018580:	b29b      	uxth	r3, r3
 8018582:	4423      	add	r3, r4
 8018584:	b29b      	uxth	r3, r3
 8018586:	b21b      	sxth	r3, r3
 8018588:	813b      	strh	r3, [r7, #8]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801858a:	f107 0108 	add.w	r1, r7, #8
 801858e:	f107 0308 	add.w	r3, r7, #8
 8018592:	697a      	ldr	r2, [r7, #20]
 8018594:	4618      	mov	r0, r3
 8018596:	f00a f98d 	bl	80228b4 <_lv_area_intersect>
 801859a:	4603      	mov	r3, r0
 801859c:	743b      	strb	r3, [r7, #16]
            if(ok) {
 801859e:	7c3b      	ldrb	r3, [r7, #16]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d07c      	beq.n	801869e <draw_quarter_1+0x3e2>
                q->draw_ctx->clip_area = &quarter_area;
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	699b      	ldr	r3, [r3, #24]
 80185a8:	f107 0208 	add.w	r2, r7, #8
 80185ac:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	6998      	ldr	r0, [r3, #24]
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	6919      	ldr	r1, [r3, #16]
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	695b      	ldr	r3, [r3, #20]
 80185ba:	461a      	mov	r2, r3
 80185bc:	f7fd fe10 	bl	80161e0 <lv_draw_rect>
        if(q->end_quarter == 1) {
 80185c0:	e06d      	b.n	801869e <draw_quarter_1+0x3e2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	895a      	ldrh	r2, [r3, #10]
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	899b      	ldrh	r3, [r3, #12]
 80185ca:	429a      	cmp	r2, r3
 80185cc:	d109      	bne.n	80185e2 <draw_quarter_1+0x326>
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	895b      	ldrh	r3, [r3, #10]
 80185d2:	2b01      	cmp	r3, #1
 80185d4:	d005      	beq.n	80185e2 <draw_quarter_1+0x326>
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	891a      	ldrh	r2, [r3, #8]
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	88db      	ldrh	r3, [r3, #6]
 80185de:	429a      	cmp	r2, r3
 80185e0:	d317      	bcc.n	8018612 <draw_quarter_1+0x356>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d103      	bne.n	80185f2 <draw_quarter_1+0x336>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	899b      	ldrh	r3, [r3, #12]
 80185ee:	2b02      	cmp	r3, #2
 80185f0:	d00f      	beq.n	8018612 <draw_quarter_1+0x356>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d103      	bne.n	8018602 <draw_quarter_1+0x346>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	899b      	ldrh	r3, [r3, #12]
 80185fe:	2b03      	cmp	r3, #3
 8018600:	d007      	beq.n	8018612 <draw_quarter_1+0x356>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8018606:	2b03      	cmp	r3, #3
 8018608:	d14a      	bne.n	80186a0 <draw_quarter_1+0x3e4>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	899b      	ldrh	r3, [r3, #12]
 801860e:	2b02      	cmp	r3, #2
 8018610:	d146      	bne.n	80186a0 <draw_quarter_1+0x3e4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x - q->radius;
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	f9b3 3000 	ldrsh.w	r3, [r3]
 801861a:	b29a      	uxth	r2, r3
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018622:	b29b      	uxth	r3, r3
 8018624:	1ad3      	subs	r3, r2, r3
 8018626:	b29b      	uxth	r3, r3
 8018628:	b21b      	sxth	r3, r3
 801862a:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y;
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018634:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x - 1;
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801863e:	b29b      	uxth	r3, r3
 8018640:	3b01      	subs	r3, #1
 8018642:	b29b      	uxth	r3, r3
 8018644:	b21b      	sxth	r3, r3
 8018646:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + q->radius;
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018650:	b29a      	uxth	r2, r3
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018658:	b29b      	uxth	r3, r3
 801865a:	4413      	add	r3, r2
 801865c:	b29b      	uxth	r3, r3
 801865e:	b21b      	sxth	r3, r3
 8018660:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8018662:	f107 0108 	add.w	r1, r7, #8
 8018666:	f107 0308 	add.w	r3, r7, #8
 801866a:	697a      	ldr	r2, [r7, #20]
 801866c:	4618      	mov	r0, r3
 801866e:	f00a f921 	bl	80228b4 <_lv_area_intersect>
 8018672:	4603      	mov	r3, r0
 8018674:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8018676:	7cbb      	ldrb	r3, [r7, #18]
 8018678:	2b00      	cmp	r3, #0
 801867a:	d011      	beq.n	80186a0 <draw_quarter_1+0x3e4>
            q->draw_ctx->clip_area = &quarter_area;
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	699b      	ldr	r3, [r3, #24]
 8018680:	f107 0208 	add.w	r2, r7, #8
 8018684:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	6998      	ldr	r0, [r3, #24]
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	6919      	ldr	r1, [r3, #16]
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	695b      	ldr	r3, [r3, #20]
 8018692:	461a      	mov	r2, r3
 8018694:	f7fd fda4 	bl	80161e0 <lv_draw_rect>
 8018698:	e002      	b.n	80186a0 <draw_quarter_1+0x3e4>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801869a:	bf00      	nop
 801869c:	e000      	b.n	80186a0 <draw_quarter_1+0x3e4>
        if(q->end_quarter == 1) {
 801869e:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	699b      	ldr	r3, [r3, #24]
 80186a4:	697a      	ldr	r2, [r7, #20]
 80186a6:	609a      	str	r2, [r3, #8]
}
 80186a8:	bf00      	nop
 80186aa:	371c      	adds	r7, #28
 80186ac:	46bd      	mov	sp, r7
 80186ae:	bd90      	pop	{r4, r7, pc}

080186b0 <draw_quarter_2>:

static void draw_quarter_2(quarter_draw_dsc_t * q)
{
 80186b0:	b590      	push	{r4, r7, lr}
 80186b2:	b087      	sub	sp, #28
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	699b      	ldr	r3, [r3, #24]
 80186bc:	689b      	ldr	r3, [r3, #8]
 80186be:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	895b      	ldrh	r3, [r3, #10]
 80186c4:	2b02      	cmp	r3, #2
 80186c6:	f040 8097 	bne.w	80187f8 <draw_quarter_2+0x148>
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	899b      	ldrh	r3, [r3, #12]
 80186ce:	2b02      	cmp	r3, #2
 80186d0:	f040 8092 	bne.w	80187f8 <draw_quarter_2+0x148>
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	88da      	ldrh	r2, [r3, #6]
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	891b      	ldrh	r3, [r3, #8]
 80186dc:	429a      	cmp	r2, r3
 80186de:	f080 808b 	bcs.w	80187f8 <draw_quarter_2+0x148>
        /*Small arc here*/
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80186ea:	b29c      	uxth	r4, r3
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	88db      	ldrh	r3, [r3, #6]
 80186f0:	335a      	adds	r3, #90	; 0x5a
 80186f2:	b29b      	uxth	r3, r3
 80186f4:	b21b      	sxth	r3, r3
 80186f6:	4618      	mov	r0, r3
 80186f8:	f00b fae2 	bl	8023cc0 <lv_trigo_sin>
 80186fc:	4603      	mov	r3, r0
 80186fe:	461a      	mov	r2, r3
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018706:	fb02 f303 	mul.w	r3, r2, r3
 801870a:	13db      	asrs	r3, r3, #15
 801870c:	b29b      	uxth	r3, r3
 801870e:	4423      	add	r3, r4
 8018710:	b29b      	uxth	r3, r3
 8018712:	b21b      	sxth	r3, r3
 8018714:	813b      	strh	r3, [r7, #8]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801871e:	b29c      	uxth	r4, r3
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	88db      	ldrh	r3, [r3, #6]
 8018724:	b21b      	sxth	r3, r3
 8018726:	4618      	mov	r0, r3
 8018728:	f00b faca 	bl	8023cc0 <lv_trigo_sin>
 801872c:	4603      	mov	r3, r0
 801872e:	461a      	mov	r2, r3
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018736:	4619      	mov	r1, r3
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801873e:	1acb      	subs	r3, r1, r3
 8018740:	fb02 f303 	mul.w	r3, r2, r3
 8018744:	13db      	asrs	r3, r3, #15
 8018746:	b29b      	uxth	r3, r3
 8018748:	4423      	add	r3, r4
 801874a:	b29b      	uxth	r3, r3
 801874c:	b21b      	sxth	r3, r3
 801874e:	81fb      	strh	r3, [r7, #14]

        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018758:	b29c      	uxth	r4, r3
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	891b      	ldrh	r3, [r3, #8]
 801875e:	b21b      	sxth	r3, r3
 8018760:	4618      	mov	r0, r3
 8018762:	f00b faad 	bl	8023cc0 <lv_trigo_sin>
 8018766:	4603      	mov	r3, r0
 8018768:	461a      	mov	r2, r3
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018770:	fb02 f303 	mul.w	r3, r2, r3
 8018774:	13db      	asrs	r3, r3, #15
 8018776:	b29b      	uxth	r3, r3
 8018778:	4423      	add	r3, r4
 801877a:	b29b      	uxth	r3, r3
 801877c:	b21b      	sxth	r3, r3
 801877e:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018788:	b29c      	uxth	r4, r3
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	891b      	ldrh	r3, [r3, #8]
 801878e:	335a      	adds	r3, #90	; 0x5a
 8018790:	b29b      	uxth	r3, r3
 8018792:	b21b      	sxth	r3, r3
 8018794:	4618      	mov	r0, r3
 8018796:	f00b fa93 	bl	8023cc0 <lv_trigo_sin>
 801879a:	4603      	mov	r3, r0
 801879c:	461a      	mov	r2, r3
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80187a4:	4619      	mov	r1, r3
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80187ac:	1acb      	subs	r3, r1, r3
 80187ae:	fb02 f303 	mul.w	r3, r2, r3
 80187b2:	13db      	asrs	r3, r3, #15
 80187b4:	b29b      	uxth	r3, r3
 80187b6:	4423      	add	r3, r4
 80187b8:	b29b      	uxth	r3, r3
 80187ba:	b21b      	sxth	r3, r3
 80187bc:	81bb      	strh	r3, [r7, #12]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80187be:	f107 0108 	add.w	r1, r7, #8
 80187c2:	f107 0308 	add.w	r3, r7, #8
 80187c6:	697a      	ldr	r2, [r7, #20]
 80187c8:	4618      	mov	r0, r3
 80187ca:	f00a f873 	bl	80228b4 <_lv_area_intersect>
 80187ce:	4603      	mov	r3, r0
 80187d0:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 80187d2:	7cfb      	ldrb	r3, [r7, #19]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	f000 8163 	beq.w	8018aa0 <draw_quarter_2+0x3f0>
            q->draw_ctx->clip_area = &quarter_area;
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	699b      	ldr	r3, [r3, #24]
 80187de:	f107 0208 	add.w	r2, r7, #8
 80187e2:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	6998      	ldr	r0, [r3, #24]
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	6919      	ldr	r1, [r3, #16]
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	695b      	ldr	r3, [r3, #20]
 80187f0:	461a      	mov	r2, r3
 80187f2:	f7fd fcf5 	bl	80161e0 <lv_draw_rect>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 80187f6:	e153      	b.n	8018aa0 <draw_quarter_2+0x3f0>
        }
    }
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	895b      	ldrh	r3, [r3, #10]
 80187fc:	2b02      	cmp	r3, #2
 80187fe:	d004      	beq.n	801880a <draw_quarter_2+0x15a>
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	899b      	ldrh	r3, [r3, #12]
 8018804:	2b02      	cmp	r3, #2
 8018806:	f040 80db 	bne.w	80189c0 <draw_quarter_2+0x310>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 2) {
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	895b      	ldrh	r3, [r3, #10]
 801880e:	2b02      	cmp	r3, #2
 8018810:	d167      	bne.n	80188e2 <draw_quarter_2+0x232>
            quarter_area.x2 = q->center->x - 1;
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	f9b3 3000 	ldrsh.w	r3, [r3]
 801881a:	b29b      	uxth	r3, r3
 801881c:	3b01      	subs	r3, #1
 801881e:	b29b      	uxth	r3, r3
 8018820:	b21b      	sxth	r3, r3
 8018822:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y - q->radius;
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801882c:	b29a      	uxth	r2, r3
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018834:	b29b      	uxth	r3, r3
 8018836:	1ad3      	subs	r3, r2, r3
 8018838:	b29b      	uxth	r3, r3
 801883a:	b21b      	sxth	r3, r3
 801883c:	817b      	strh	r3, [r7, #10]

            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018846:	b29c      	uxth	r4, r3
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	88db      	ldrh	r3, [r3, #6]
 801884c:	335a      	adds	r3, #90	; 0x5a
 801884e:	b29b      	uxth	r3, r3
 8018850:	b21b      	sxth	r3, r3
 8018852:	4618      	mov	r0, r3
 8018854:	f00b fa34 	bl	8023cc0 <lv_trigo_sin>
 8018858:	4603      	mov	r3, r0
 801885a:	461a      	mov	r2, r3
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018862:	fb02 f303 	mul.w	r3, r2, r3
 8018866:	13db      	asrs	r3, r3, #15
 8018868:	b29b      	uxth	r3, r3
 801886a:	4423      	add	r3, r4
 801886c:	b29b      	uxth	r3, r3
 801886e:	b21b      	sxth	r3, r3
 8018870:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801887a:	b29c      	uxth	r4, r3
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	88db      	ldrh	r3, [r3, #6]
 8018880:	b21b      	sxth	r3, r3
 8018882:	4618      	mov	r0, r3
 8018884:	f00b fa1c 	bl	8023cc0 <lv_trigo_sin>
 8018888:	4603      	mov	r3, r0
 801888a:	461a      	mov	r2, r3
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018892:	4619      	mov	r1, r3
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801889a:	1acb      	subs	r3, r1, r3
 801889c:	fb02 f303 	mul.w	r3, r2, r3
 80188a0:	13db      	asrs	r3, r3, #15
 80188a2:	b29b      	uxth	r3, r3
 80188a4:	4423      	add	r3, r4
 80188a6:	b29b      	uxth	r3, r3
 80188a8:	b21b      	sxth	r3, r3
 80188aa:	81fb      	strh	r3, [r7, #14]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80188ac:	f107 0108 	add.w	r1, r7, #8
 80188b0:	f107 0308 	add.w	r3, r7, #8
 80188b4:	697a      	ldr	r2, [r7, #20]
 80188b6:	4618      	mov	r0, r3
 80188b8:	f009 fffc 	bl	80228b4 <_lv_area_intersect>
 80188bc:	4603      	mov	r3, r0
 80188be:	747b      	strb	r3, [r7, #17]
            if(ok) {
 80188c0:	7c7b      	ldrb	r3, [r7, #17]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d00d      	beq.n	80188e2 <draw_quarter_2+0x232>
                q->draw_ctx->clip_area = &quarter_area;
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	699b      	ldr	r3, [r3, #24]
 80188ca:	f107 0208 	add.w	r2, r7, #8
 80188ce:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	6998      	ldr	r0, [r3, #24]
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	6919      	ldr	r1, [r3, #16]
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	695b      	ldr	r3, [r3, #20]
 80188dc:	461a      	mov	r2, r3
 80188de:	f7fd fc7f 	bl	80161e0 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 2) {
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	899b      	ldrh	r3, [r3, #12]
 80188e6:	2b02      	cmp	r3, #2
 80188e8:	f040 80dc 	bne.w	8018aa4 <draw_quarter_2+0x3f4>
            quarter_area.x1 = q->center->x - q->radius;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80188f4:	b29a      	uxth	r2, r3
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80188fc:	b29b      	uxth	r3, r3
 80188fe:	1ad3      	subs	r3, r2, r3
 8018900:	b29b      	uxth	r3, r3
 8018902:	b21b      	sxth	r3, r3
 8018904:	813b      	strh	r3, [r7, #8]
            quarter_area.y2 = q->center->y - 1;
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801890e:	b29b      	uxth	r3, r3
 8018910:	3b01      	subs	r3, #1
 8018912:	b29b      	uxth	r3, r3
 8018914:	b21b      	sxth	r3, r3
 8018916:	81fb      	strh	r3, [r7, #14]

            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018920:	b29c      	uxth	r4, r3
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	891b      	ldrh	r3, [r3, #8]
 8018926:	335a      	adds	r3, #90	; 0x5a
 8018928:	b29b      	uxth	r3, r3
 801892a:	b21b      	sxth	r3, r3
 801892c:	4618      	mov	r0, r3
 801892e:	f00b f9c7 	bl	8023cc0 <lv_trigo_sin>
 8018932:	4603      	mov	r3, r0
 8018934:	461a      	mov	r2, r3
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801893c:	4619      	mov	r1, r3
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8018944:	1acb      	subs	r3, r1, r3
 8018946:	fb02 f303 	mul.w	r3, r2, r3
 801894a:	13db      	asrs	r3, r3, #15
 801894c:	b29b      	uxth	r3, r3
 801894e:	4423      	add	r3, r4
 8018950:	b29b      	uxth	r3, r3
 8018952:	b21b      	sxth	r3, r3
 8018954:	81bb      	strh	r3, [r7, #12]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801895e:	b29c      	uxth	r4, r3
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	891b      	ldrh	r3, [r3, #8]
 8018964:	b21b      	sxth	r3, r3
 8018966:	4618      	mov	r0, r3
 8018968:	f00b f9aa 	bl	8023cc0 <lv_trigo_sin>
 801896c:	4603      	mov	r3, r0
 801896e:	461a      	mov	r2, r3
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018976:	fb02 f303 	mul.w	r3, r2, r3
 801897a:	13db      	asrs	r3, r3, #15
 801897c:	b29b      	uxth	r3, r3
 801897e:	4423      	add	r3, r4
 8018980:	b29b      	uxth	r3, r3
 8018982:	b21b      	sxth	r3, r3
 8018984:	817b      	strh	r3, [r7, #10]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8018986:	f107 0108 	add.w	r1, r7, #8
 801898a:	f107 0308 	add.w	r3, r7, #8
 801898e:	697a      	ldr	r2, [r7, #20]
 8018990:	4618      	mov	r0, r3
 8018992:	f009 ff8f 	bl	80228b4 <_lv_area_intersect>
 8018996:	4603      	mov	r3, r0
 8018998:	743b      	strb	r3, [r7, #16]
            if(ok) {
 801899a:	7c3b      	ldrb	r3, [r7, #16]
 801899c:	2b00      	cmp	r3, #0
 801899e:	f000 8081 	beq.w	8018aa4 <draw_quarter_2+0x3f4>
                q->draw_ctx->clip_area = &quarter_area;
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	699b      	ldr	r3, [r3, #24]
 80189a6:	f107 0208 	add.w	r2, r7, #8
 80189aa:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	6998      	ldr	r0, [r3, #24]
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	6919      	ldr	r1, [r3, #16]
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	695b      	ldr	r3, [r3, #20]
 80189b8:	461a      	mov	r2, r3
 80189ba:	f7fd fc11 	bl	80161e0 <lv_draw_rect>
        if(q->end_quarter == 2) {
 80189be:	e071      	b.n	8018aa4 <draw_quarter_2+0x3f4>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	895a      	ldrh	r2, [r3, #10]
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	899b      	ldrh	r3, [r3, #12]
 80189c8:	429a      	cmp	r2, r3
 80189ca:	d109      	bne.n	80189e0 <draw_quarter_2+0x330>
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	895b      	ldrh	r3, [r3, #10]
 80189d0:	2b02      	cmp	r3, #2
 80189d2:	d005      	beq.n	80189e0 <draw_quarter_2+0x330>
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	891a      	ldrh	r2, [r3, #8]
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	88db      	ldrh	r3, [r3, #6]
 80189dc:	429a      	cmp	r2, r3
 80189de:	d317      	bcc.n	8018a10 <draw_quarter_2+0x360>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d103      	bne.n	80189f0 <draw_quarter_2+0x340>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	899b      	ldrh	r3, [r3, #12]
 80189ec:	2b03      	cmp	r3, #3
 80189ee:	d00f      	beq.n	8018a10 <draw_quarter_2+0x360>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80189f4:	2b01      	cmp	r3, #1
 80189f6:	d103      	bne.n	8018a00 <draw_quarter_2+0x350>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	899b      	ldrh	r3, [r3, #12]
 80189fc:	2b03      	cmp	r3, #3
 80189fe:	d007      	beq.n	8018a10 <draw_quarter_2+0x360>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 8018a04:	2b01      	cmp	r3, #1
 8018a06:	d14e      	bne.n	8018aa6 <draw_quarter_2+0x3f6>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	899b      	ldrh	r3, [r3, #12]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d14a      	bne.n	8018aa6 <draw_quarter_2+0x3f6>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x - q->radius;
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018a18:	b29a      	uxth	r2, r3
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018a20:	b29b      	uxth	r3, r3
 8018a22:	1ad3      	subs	r3, r2, r3
 8018a24:	b29b      	uxth	r3, r3
 8018a26:	b21b      	sxth	r3, r3
 8018a28:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y - q->radius;
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018a32:	b29a      	uxth	r2, r3
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018a3a:	b29b      	uxth	r3, r3
 8018a3c:	1ad3      	subs	r3, r2, r3
 8018a3e:	b29b      	uxth	r3, r3
 8018a40:	b21b      	sxth	r3, r3
 8018a42:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x - 1;
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018a4c:	b29b      	uxth	r3, r3
 8018a4e:	3b01      	subs	r3, #1
 8018a50:	b29b      	uxth	r3, r3
 8018a52:	b21b      	sxth	r3, r3
 8018a54:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y - 1;
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018a5e:	b29b      	uxth	r3, r3
 8018a60:	3b01      	subs	r3, #1
 8018a62:	b29b      	uxth	r3, r3
 8018a64:	b21b      	sxth	r3, r3
 8018a66:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8018a68:	f107 0108 	add.w	r1, r7, #8
 8018a6c:	f107 0308 	add.w	r3, r7, #8
 8018a70:	697a      	ldr	r2, [r7, #20]
 8018a72:	4618      	mov	r0, r3
 8018a74:	f009 ff1e 	bl	80228b4 <_lv_area_intersect>
 8018a78:	4603      	mov	r3, r0
 8018a7a:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8018a7c:	7cbb      	ldrb	r3, [r7, #18]
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	d011      	beq.n	8018aa6 <draw_quarter_2+0x3f6>
            q->draw_ctx->clip_area = &quarter_area;
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	699b      	ldr	r3, [r3, #24]
 8018a86:	f107 0208 	add.w	r2, r7, #8
 8018a8a:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	6998      	ldr	r0, [r3, #24]
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	6919      	ldr	r1, [r3, #16]
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	695b      	ldr	r3, [r3, #20]
 8018a98:	461a      	mov	r2, r3
 8018a9a:	f7fd fba1 	bl	80161e0 <lv_draw_rect>
 8018a9e:	e002      	b.n	8018aa6 <draw_quarter_2+0x3f6>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8018aa0:	bf00      	nop
 8018aa2:	e000      	b.n	8018aa6 <draw_quarter_2+0x3f6>
        if(q->end_quarter == 2) {
 8018aa4:	bf00      	nop
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	699b      	ldr	r3, [r3, #24]
 8018aaa:	697a      	ldr	r2, [r7, #20]
 8018aac:	609a      	str	r2, [r3, #8]
}
 8018aae:	bf00      	nop
 8018ab0:	371c      	adds	r7, #28
 8018ab2:	46bd      	mov	sp, r7
 8018ab4:	bd90      	pop	{r4, r7, pc}

08018ab6 <draw_quarter_3>:

static void draw_quarter_3(quarter_draw_dsc_t * q)
{
 8018ab6:	b590      	push	{r4, r7, lr}
 8018ab8:	b087      	sub	sp, #28
 8018aba:	af00      	add	r7, sp, #0
 8018abc:	6078      	str	r0, [r7, #4]
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	699b      	ldr	r3, [r3, #24]
 8018ac2:	689b      	ldr	r3, [r3, #8]
 8018ac4:	617b      	str	r3, [r7, #20]
    lv_area_t quarter_area;

    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	895b      	ldrh	r3, [r3, #10]
 8018aca:	2b03      	cmp	r3, #3
 8018acc:	f040 8097 	bne.w	8018bfe <draw_quarter_3+0x148>
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	899b      	ldrh	r3, [r3, #12]
 8018ad4:	2b03      	cmp	r3, #3
 8018ad6:	f040 8092 	bne.w	8018bfe <draw_quarter_3+0x148>
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	88da      	ldrh	r2, [r3, #6]
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	891b      	ldrh	r3, [r3, #8]
 8018ae2:	429a      	cmp	r2, r3
 8018ae4:	f080 808b 	bcs.w	8018bfe <draw_quarter_3+0x148>
        /*Small arc here*/
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018af0:	b29c      	uxth	r4, r3
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	88db      	ldrh	r3, [r3, #6]
 8018af6:	335a      	adds	r3, #90	; 0x5a
 8018af8:	b29b      	uxth	r3, r3
 8018afa:	b21b      	sxth	r3, r3
 8018afc:	4618      	mov	r0, r3
 8018afe:	f00b f8df 	bl	8023cc0 <lv_trigo_sin>
 8018b02:	4603      	mov	r3, r0
 8018b04:	461a      	mov	r2, r3
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018b0c:	4619      	mov	r1, r3
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8018b14:	1acb      	subs	r3, r1, r3
 8018b16:	fb02 f303 	mul.w	r3, r2, r3
 8018b1a:	13db      	asrs	r3, r3, #15
 8018b1c:	b29b      	uxth	r3, r3
 8018b1e:	4423      	add	r3, r4
 8018b20:	b29b      	uxth	r3, r3
 8018b22:	b21b      	sxth	r3, r3
 8018b24:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018b2e:	b29c      	uxth	r4, r3
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	88db      	ldrh	r3, [r3, #6]
 8018b34:	b21b      	sxth	r3, r3
 8018b36:	4618      	mov	r0, r3
 8018b38:	f00b f8c2 	bl	8023cc0 <lv_trigo_sin>
 8018b3c:	4603      	mov	r3, r0
 8018b3e:	461a      	mov	r2, r3
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018b46:	fb02 f303 	mul.w	r3, r2, r3
 8018b4a:	13db      	asrs	r3, r3, #15
 8018b4c:	b29b      	uxth	r3, r3
 8018b4e:	4423      	add	r3, r4
 8018b50:	b29b      	uxth	r3, r3
 8018b52:	b21b      	sxth	r3, r3
 8018b54:	817b      	strh	r3, [r7, #10]

        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b5e:	b29c      	uxth	r4, r3
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	891b      	ldrh	r3, [r3, #8]
 8018b64:	335a      	adds	r3, #90	; 0x5a
 8018b66:	b29b      	uxth	r3, r3
 8018b68:	b21b      	sxth	r3, r3
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	f00b f8a8 	bl	8023cc0 <lv_trigo_sin>
 8018b70:	4603      	mov	r3, r0
 8018b72:	461a      	mov	r2, r3
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018b7a:	fb02 f303 	mul.w	r3, r2, r3
 8018b7e:	13db      	asrs	r3, r3, #15
 8018b80:	b29b      	uxth	r3, r3
 8018b82:	4423      	add	r3, r4
 8018b84:	b29b      	uxth	r3, r3
 8018b86:	b21b      	sxth	r3, r3
 8018b88:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018b92:	b29c      	uxth	r4, r3
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	891b      	ldrh	r3, [r3, #8]
 8018b98:	b21b      	sxth	r3, r3
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	f00b f890 	bl	8023cc0 <lv_trigo_sin>
 8018ba0:	4603      	mov	r3, r0
 8018ba2:	461a      	mov	r2, r3
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018baa:	4619      	mov	r1, r3
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8018bb2:	1acb      	subs	r3, r1, r3
 8018bb4:	fb02 f303 	mul.w	r3, r2, r3
 8018bb8:	13db      	asrs	r3, r3, #15
 8018bba:	b29b      	uxth	r3, r3
 8018bbc:	4423      	add	r3, r4
 8018bbe:	b29b      	uxth	r3, r3
 8018bc0:	b21b      	sxth	r3, r3
 8018bc2:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8018bc4:	f107 0108 	add.w	r1, r7, #8
 8018bc8:	f107 0308 	add.w	r3, r7, #8
 8018bcc:	697a      	ldr	r2, [r7, #20]
 8018bce:	4618      	mov	r0, r3
 8018bd0:	f009 fe70 	bl	80228b4 <_lv_area_intersect>
 8018bd4:	4603      	mov	r3, r0
 8018bd6:	74fb      	strb	r3, [r7, #19]
        if(ok) {
 8018bd8:	7cfb      	ldrb	r3, [r7, #19]
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	f000 815a 	beq.w	8018e94 <draw_quarter_3+0x3de>
            q->draw_ctx->clip_area = &quarter_area;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	699b      	ldr	r3, [r3, #24]
 8018be4:	f107 0208 	add.w	r2, r7, #8
 8018be8:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	6998      	ldr	r0, [r3, #24]
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	6919      	ldr	r1, [r3, #16]
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	695b      	ldr	r3, [r3, #20]
 8018bf6:	461a      	mov	r2, r3
 8018bf8:	f7fd faf2 	bl	80161e0 <lv_draw_rect>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8018bfc:	e14a      	b.n	8018e94 <draw_quarter_3+0x3de>
        }
    }
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	895b      	ldrh	r3, [r3, #10]
 8018c02:	2b03      	cmp	r3, #3
 8018c04:	d004      	beq.n	8018c10 <draw_quarter_3+0x15a>
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	899b      	ldrh	r3, [r3, #12]
 8018c0a:	2b03      	cmp	r3, #3
 8018c0c:	f040 80d6 	bne.w	8018dbc <draw_quarter_3+0x306>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 3) {
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	895b      	ldrh	r3, [r3, #10]
 8018c14:	2b03      	cmp	r3, #3
 8018c16:	d167      	bne.n	8018ce8 <draw_quarter_3+0x232>
            quarter_area.x2 = q->center->x + q->radius;
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018c20:	b29a      	uxth	r2, r3
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018c28:	b29b      	uxth	r3, r3
 8018c2a:	4413      	add	r3, r2
 8018c2c:	b29b      	uxth	r3, r3
 8018c2e:	b21b      	sxth	r3, r3
 8018c30:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y - 1;
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018c3a:	b29b      	uxth	r3, r3
 8018c3c:	3b01      	subs	r3, #1
 8018c3e:	b29b      	uxth	r3, r3
 8018c40:	b21b      	sxth	r3, r3
 8018c42:	81fb      	strh	r3, [r7, #14]

            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018c4c:	b29c      	uxth	r4, r3
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	88db      	ldrh	r3, [r3, #6]
 8018c52:	335a      	adds	r3, #90	; 0x5a
 8018c54:	b29b      	uxth	r3, r3
 8018c56:	b21b      	sxth	r3, r3
 8018c58:	4618      	mov	r0, r3
 8018c5a:	f00b f831 	bl	8023cc0 <lv_trigo_sin>
 8018c5e:	4603      	mov	r3, r0
 8018c60:	461a      	mov	r2, r3
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018c68:	4619      	mov	r1, r3
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8018c70:	1acb      	subs	r3, r1, r3
 8018c72:	fb02 f303 	mul.w	r3, r2, r3
 8018c76:	13db      	asrs	r3, r3, #15
 8018c78:	b29b      	uxth	r3, r3
 8018c7a:	4423      	add	r3, r4
 8018c7c:	b29b      	uxth	r3, r3
 8018c7e:	b21b      	sxth	r3, r3
 8018c80:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018c8a:	b29c      	uxth	r4, r3
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	88db      	ldrh	r3, [r3, #6]
 8018c90:	b21b      	sxth	r3, r3
 8018c92:	4618      	mov	r0, r3
 8018c94:	f00b f814 	bl	8023cc0 <lv_trigo_sin>
 8018c98:	4603      	mov	r3, r0
 8018c9a:	461a      	mov	r2, r3
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018ca2:	fb02 f303 	mul.w	r3, r2, r3
 8018ca6:	13db      	asrs	r3, r3, #15
 8018ca8:	b29b      	uxth	r3, r3
 8018caa:	4423      	add	r3, r4
 8018cac:	b29b      	uxth	r3, r3
 8018cae:	b21b      	sxth	r3, r3
 8018cb0:	817b      	strh	r3, [r7, #10]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8018cb2:	f107 0108 	add.w	r1, r7, #8
 8018cb6:	f107 0308 	add.w	r3, r7, #8
 8018cba:	697a      	ldr	r2, [r7, #20]
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	f009 fdf9 	bl	80228b4 <_lv_area_intersect>
 8018cc2:	4603      	mov	r3, r0
 8018cc4:	747b      	strb	r3, [r7, #17]
            if(ok) {
 8018cc6:	7c7b      	ldrb	r3, [r7, #17]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d00d      	beq.n	8018ce8 <draw_quarter_3+0x232>
                q->draw_ctx->clip_area = &quarter_area;
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	699b      	ldr	r3, [r3, #24]
 8018cd0:	f107 0208 	add.w	r2, r7, #8
 8018cd4:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	6998      	ldr	r0, [r3, #24]
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	6919      	ldr	r1, [r3, #16]
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	695b      	ldr	r3, [r3, #20]
 8018ce2:	461a      	mov	r2, r3
 8018ce4:	f7fd fa7c 	bl	80161e0 <lv_draw_rect>
            }
        }
        if(q->end_quarter == 3) {
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	899b      	ldrh	r3, [r3, #12]
 8018cec:	2b03      	cmp	r3, #3
 8018cee:	f040 80d3 	bne.w	8018e98 <draw_quarter_3+0x3e2>
            quarter_area.x1 = q->center->x;
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018cfa:	813b      	strh	r3, [r7, #8]
            quarter_area.y1 = q->center->y - q->radius;
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018d04:	b29a      	uxth	r2, r3
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018d0c:	b29b      	uxth	r3, r3
 8018d0e:	1ad3      	subs	r3, r2, r3
 8018d10:	b29b      	uxth	r3, r3
 8018d12:	b21b      	sxth	r3, r3
 8018d14:	817b      	strh	r3, [r7, #10]

            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018d1e:	b29c      	uxth	r4, r3
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	891b      	ldrh	r3, [r3, #8]
 8018d24:	335a      	adds	r3, #90	; 0x5a
 8018d26:	b29b      	uxth	r3, r3
 8018d28:	b21b      	sxth	r3, r3
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	f00a ffc8 	bl	8023cc0 <lv_trigo_sin>
 8018d30:	4603      	mov	r3, r0
 8018d32:	461a      	mov	r2, r3
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018d3a:	fb02 f303 	mul.w	r3, r2, r3
 8018d3e:	13db      	asrs	r3, r3, #15
 8018d40:	b29b      	uxth	r3, r3
 8018d42:	4423      	add	r3, r4
 8018d44:	b29b      	uxth	r3, r3
 8018d46:	b21b      	sxth	r3, r3
 8018d48:	81bb      	strh	r3, [r7, #12]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018d52:	b29c      	uxth	r4, r3
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	891b      	ldrh	r3, [r3, #8]
 8018d58:	b21b      	sxth	r3, r3
 8018d5a:	4618      	mov	r0, r3
 8018d5c:	f00a ffb0 	bl	8023cc0 <lv_trigo_sin>
 8018d60:	4603      	mov	r3, r0
 8018d62:	461a      	mov	r2, r3
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018d6a:	4619      	mov	r1, r3
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8018d72:	1acb      	subs	r3, r1, r3
 8018d74:	fb02 f303 	mul.w	r3, r2, r3
 8018d78:	13db      	asrs	r3, r3, #15
 8018d7a:	b29b      	uxth	r3, r3
 8018d7c:	4423      	add	r3, r4
 8018d7e:	b29b      	uxth	r3, r3
 8018d80:	b21b      	sxth	r3, r3
 8018d82:	81fb      	strh	r3, [r7, #14]

            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8018d84:	f107 0108 	add.w	r1, r7, #8
 8018d88:	f107 0308 	add.w	r3, r7, #8
 8018d8c:	697a      	ldr	r2, [r7, #20]
 8018d8e:	4618      	mov	r0, r3
 8018d90:	f009 fd90 	bl	80228b4 <_lv_area_intersect>
 8018d94:	4603      	mov	r3, r0
 8018d96:	743b      	strb	r3, [r7, #16]
            if(ok) {
 8018d98:	7c3b      	ldrb	r3, [r7, #16]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d07c      	beq.n	8018e98 <draw_quarter_3+0x3e2>
                q->draw_ctx->clip_area = &quarter_area;
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	699b      	ldr	r3, [r3, #24]
 8018da2:	f107 0208 	add.w	r2, r7, #8
 8018da6:	609a      	str	r2, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	6998      	ldr	r0, [r3, #24]
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	6919      	ldr	r1, [r3, #16]
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	695b      	ldr	r3, [r3, #20]
 8018db4:	461a      	mov	r2, r3
 8018db6:	f7fd fa13 	bl	80161e0 <lv_draw_rect>
        if(q->end_quarter == 3) {
 8018dba:	e06d      	b.n	8018e98 <draw_quarter_3+0x3e2>
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	895a      	ldrh	r2, [r3, #10]
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	899b      	ldrh	r3, [r3, #12]
 8018dc4:	429a      	cmp	r2, r3
 8018dc6:	d109      	bne.n	8018ddc <draw_quarter_3+0x326>
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	895b      	ldrh	r3, [r3, #10]
 8018dcc:	2b03      	cmp	r3, #3
 8018dce:	d005      	beq.n	8018ddc <draw_quarter_3+0x326>
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	891a      	ldrh	r2, [r3, #8]
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	88db      	ldrh	r3, [r3, #6]
 8018dd8:	429a      	cmp	r2, r3
 8018dda:	d317      	bcc.n	8018e0c <draw_quarter_3+0x356>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	895b      	ldrh	r3, [r3, #10]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8018de0:	2b02      	cmp	r3, #2
 8018de2:	d103      	bne.n	8018dec <draw_quarter_3+0x336>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	899b      	ldrh	r3, [r3, #12]
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d00f      	beq.n	8018e0c <draw_quarter_3+0x356>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8018df0:	2b01      	cmp	r3, #1
 8018df2:	d103      	bne.n	8018dfc <draw_quarter_3+0x346>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	899b      	ldrh	r3, [r3, #12]
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d007      	beq.n	8018e0c <draw_quarter_3+0x356>
            (q->start_quarter == 2 && q->end_quarter == 1)) {
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	895b      	ldrh	r3, [r3, #10]
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8018e00:	2b02      	cmp	r3, #2
 8018e02:	d14a      	bne.n	8018e9a <draw_quarter_3+0x3e4>
            (q->start_quarter == 2 && q->end_quarter == 1)) {
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	899b      	ldrh	r3, [r3, #12]
 8018e08:	2b01      	cmp	r3, #1
 8018e0a:	d146      	bne.n	8018e9a <draw_quarter_3+0x3e4>
        /*Arc crosses here*/
        quarter_area.x1 = q->center->x;
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018e14:	813b      	strh	r3, [r7, #8]
        quarter_area.y1 = q->center->y - q->radius;
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018e1e:	b29a      	uxth	r2, r3
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018e26:	b29b      	uxth	r3, r3
 8018e28:	1ad3      	subs	r3, r2, r3
 8018e2a:	b29b      	uxth	r3, r3
 8018e2c:	b21b      	sxth	r3, r3
 8018e2e:	817b      	strh	r3, [r7, #10]
        quarter_area.x2 = q->center->x + q->radius;
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018e38:	b29a      	uxth	r2, r3
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018e40:	b29b      	uxth	r3, r3
 8018e42:	4413      	add	r3, r2
 8018e44:	b29b      	uxth	r3, r3
 8018e46:	b21b      	sxth	r3, r3
 8018e48:	81bb      	strh	r3, [r7, #12]
        quarter_area.y2 = q->center->y - 1;
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018e52:	b29b      	uxth	r3, r3
 8018e54:	3b01      	subs	r3, #1
 8018e56:	b29b      	uxth	r3, r3
 8018e58:	b21b      	sxth	r3, r3
 8018e5a:	81fb      	strh	r3, [r7, #14]

        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8018e5c:	f107 0108 	add.w	r1, r7, #8
 8018e60:	f107 0308 	add.w	r3, r7, #8
 8018e64:	697a      	ldr	r2, [r7, #20]
 8018e66:	4618      	mov	r0, r3
 8018e68:	f009 fd24 	bl	80228b4 <_lv_area_intersect>
 8018e6c:	4603      	mov	r3, r0
 8018e6e:	74bb      	strb	r3, [r7, #18]
        if(ok) {
 8018e70:	7cbb      	ldrb	r3, [r7, #18]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d011      	beq.n	8018e9a <draw_quarter_3+0x3e4>
            q->draw_ctx->clip_area = &quarter_area;
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	699b      	ldr	r3, [r3, #24]
 8018e7a:	f107 0208 	add.w	r2, r7, #8
 8018e7e:	609a      	str	r2, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	6998      	ldr	r0, [r3, #24]
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	6919      	ldr	r1, [r3, #16]
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	695b      	ldr	r3, [r3, #20]
 8018e8c:	461a      	mov	r2, r3
 8018e8e:	f7fd f9a7 	bl	80161e0 <lv_draw_rect>
 8018e92:	e002      	b.n	8018e9a <draw_quarter_3+0x3e4>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8018e94:	bf00      	nop
 8018e96:	e000      	b.n	8018e9a <draw_quarter_3+0x3e4>
        if(q->end_quarter == 3) {
 8018e98:	bf00      	nop
        }
    }

    q->draw_ctx->clip_area = clip_area_ori;
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	699b      	ldr	r3, [r3, #24]
 8018e9e:	697a      	ldr	r2, [r7, #20]
 8018ea0:	609a      	str	r2, [r3, #8]
}
 8018ea2:	bf00      	nop
 8018ea4:	371c      	adds	r7, #28
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	bd90      	pop	{r4, r7, pc}

08018eaa <get_rounded_area>:

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
 8018eaa:	b590      	push	{r4, r7, lr}
 8018eac:	b08b      	sub	sp, #44	; 0x2c
 8018eae:	af00      	add	r7, sp, #0
 8018eb0:	607b      	str	r3, [r7, #4]
 8018eb2:	4603      	mov	r3, r0
 8018eb4:	81fb      	strh	r3, [r7, #14]
 8018eb6:	460b      	mov	r3, r1
 8018eb8:	81bb      	strh	r3, [r7, #12]
 8018eba:	4613      	mov	r3, r2
 8018ebc:	72fb      	strb	r3, [r7, #11]
    const uint8_t ps = 8;
 8018ebe:	2308      	movs	r3, #8
 8018ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const uint8_t pa = 127;
 8018ec4:	237f      	movs	r3, #127	; 0x7f
 8018ec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    int32_t thick_half = thickness / 2;
 8018eca:	7afb      	ldrb	r3, [r7, #11]
 8018ecc:	085b      	lsrs	r3, r3, #1
 8018ece:	b2db      	uxtb	r3, r3
 8018ed0:	623b      	str	r3, [r7, #32]
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;
 8018ed2:	7afb      	ldrb	r3, [r7, #11]
 8018ed4:	f003 0301 	and.w	r3, r3, #1
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	bf0c      	ite	eq
 8018edc:	2301      	moveq	r3, #1
 8018ede:	2300      	movne	r3, #0
 8018ee0:	b2db      	uxtb	r3, r3
 8018ee2:	77fb      	strb	r3, [r7, #31]

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 8018ee4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8018ee8:	6a3b      	ldr	r3, [r7, #32]
 8018eea:	1ad4      	subs	r4, r2, r3
 8018eec:	89fb      	ldrh	r3, [r7, #14]
 8018eee:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8018ef2:	b29b      	uxth	r3, r3
 8018ef4:	b21b      	sxth	r3, r3
 8018ef6:	4618      	mov	r0, r3
 8018ef8:	f00a fee2 	bl	8023cc0 <lv_trigo_sin>
 8018efc:	4603      	mov	r3, r0
 8018efe:	fb03 f204 	mul.w	r2, r3, r4
 8018f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f06:	f1c3 030f 	rsb	r3, r3, #15
 8018f0a:	fa42 f303 	asr.w	r3, r2, r3
 8018f0e:	61bb      	str	r3, [r7, #24]
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 8018f10:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8018f14:	6a3b      	ldr	r3, [r7, #32]
 8018f16:	1ad4      	subs	r4, r2, r3
 8018f18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	f00a fecf 	bl	8023cc0 <lv_trigo_sin>
 8018f22:	4603      	mov	r3, r0
 8018f24:	fb03 f204 	mul.w	r2, r3, r4
 8018f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f2c:	f1c3 030f 	rsb	r3, r3, #15
 8018f30:	fa42 f303 	asr.w	r3, r2, r3
 8018f34:	617b      	str	r3, [r7, #20]

    /*Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
 8018f36:	69bb      	ldr	r3, [r7, #24]
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	dd1f      	ble.n	8018f7c <get_rounded_area+0xd2>
        cir_x = (cir_x - pa) >> ps;
 8018f3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f40:	69ba      	ldr	r2, [r7, #24]
 8018f42:	1ad2      	subs	r2, r2, r3
 8018f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f48:	fa42 f303 	asr.w	r3, r2, r3
 8018f4c:	61bb      	str	r3, [r7, #24]
        res_area->x1 = cir_x - thick_half + thick_corr;
 8018f4e:	69bb      	ldr	r3, [r7, #24]
 8018f50:	b29a      	uxth	r2, r3
 8018f52:	6a3b      	ldr	r3, [r7, #32]
 8018f54:	b29b      	uxth	r3, r3
 8018f56:	1ad3      	subs	r3, r2, r3
 8018f58:	b29a      	uxth	r2, r3
 8018f5a:	7ffb      	ldrb	r3, [r7, #31]
 8018f5c:	b29b      	uxth	r3, r3
 8018f5e:	4413      	add	r3, r2
 8018f60:	b29b      	uxth	r3, r3
 8018f62:	b21a      	sxth	r2, r3
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	801a      	strh	r2, [r3, #0]
        res_area->x2 = cir_x + thick_half;
 8018f68:	69bb      	ldr	r3, [r7, #24]
 8018f6a:	b29a      	uxth	r2, r3
 8018f6c:	6a3b      	ldr	r3, [r7, #32]
 8018f6e:	b29b      	uxth	r3, r3
 8018f70:	4413      	add	r3, r2
 8018f72:	b29b      	uxth	r3, r3
 8018f74:	b21a      	sxth	r2, r3
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	809a      	strh	r2, [r3, #4]
 8018f7a:	e01e      	b.n	8018fba <get_rounded_area+0x110>
    }
    else {
        cir_x = (cir_x + pa) >> ps;
 8018f7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8018f80:	69bb      	ldr	r3, [r7, #24]
 8018f82:	441a      	add	r2, r3
 8018f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f88:	fa42 f303 	asr.w	r3, r2, r3
 8018f8c:	61bb      	str	r3, [r7, #24]
        res_area->x1 = cir_x - thick_half;
 8018f8e:	69bb      	ldr	r3, [r7, #24]
 8018f90:	b29a      	uxth	r2, r3
 8018f92:	6a3b      	ldr	r3, [r7, #32]
 8018f94:	b29b      	uxth	r3, r3
 8018f96:	1ad3      	subs	r3, r2, r3
 8018f98:	b29b      	uxth	r3, r3
 8018f9a:	b21a      	sxth	r2, r3
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	801a      	strh	r2, [r3, #0]
        res_area->x2 = cir_x + thick_half - thick_corr;
 8018fa0:	69bb      	ldr	r3, [r7, #24]
 8018fa2:	b29a      	uxth	r2, r3
 8018fa4:	6a3b      	ldr	r3, [r7, #32]
 8018fa6:	b29b      	uxth	r3, r3
 8018fa8:	4413      	add	r3, r2
 8018faa:	b29a      	uxth	r2, r3
 8018fac:	7ffb      	ldrb	r3, [r7, #31]
 8018fae:	b29b      	uxth	r3, r3
 8018fb0:	1ad3      	subs	r3, r2, r3
 8018fb2:	b29b      	uxth	r3, r3
 8018fb4:	b21a      	sxth	r2, r3
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	809a      	strh	r2, [r3, #4]
    }

    if(cir_y > 0) {
 8018fba:	697b      	ldr	r3, [r7, #20]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	dd1f      	ble.n	8019000 <get_rounded_area+0x156>
        cir_y = (cir_y - pa) >> ps;
 8018fc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018fc4:	697a      	ldr	r2, [r7, #20]
 8018fc6:	1ad2      	subs	r2, r2, r3
 8018fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018fcc:	fa42 f303 	asr.w	r3, r2, r3
 8018fd0:	617b      	str	r3, [r7, #20]
        res_area->y1 = cir_y - thick_half + thick_corr;
 8018fd2:	697b      	ldr	r3, [r7, #20]
 8018fd4:	b29a      	uxth	r2, r3
 8018fd6:	6a3b      	ldr	r3, [r7, #32]
 8018fd8:	b29b      	uxth	r3, r3
 8018fda:	1ad3      	subs	r3, r2, r3
 8018fdc:	b29a      	uxth	r2, r3
 8018fde:	7ffb      	ldrb	r3, [r7, #31]
 8018fe0:	b29b      	uxth	r3, r3
 8018fe2:	4413      	add	r3, r2
 8018fe4:	b29b      	uxth	r3, r3
 8018fe6:	b21a      	sxth	r2, r3
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	805a      	strh	r2, [r3, #2]
        res_area->y2 = cir_y + thick_half;
 8018fec:	697b      	ldr	r3, [r7, #20]
 8018fee:	b29a      	uxth	r2, r3
 8018ff0:	6a3b      	ldr	r3, [r7, #32]
 8018ff2:	b29b      	uxth	r3, r3
 8018ff4:	4413      	add	r3, r2
 8018ff6:	b29b      	uxth	r3, r3
 8018ff8:	b21a      	sxth	r2, r3
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	80da      	strh	r2, [r3, #6]
    else {
        cir_y = (cir_y + pa) >> ps;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
    }
}
 8018ffe:	e01e      	b.n	801903e <get_rounded_area+0x194>
        cir_y = (cir_y + pa) >> ps;
 8019000:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8019004:	697b      	ldr	r3, [r7, #20]
 8019006:	441a      	add	r2, r3
 8019008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801900c:	fa42 f303 	asr.w	r3, r2, r3
 8019010:	617b      	str	r3, [r7, #20]
        res_area->y1 = cir_y - thick_half;
 8019012:	697b      	ldr	r3, [r7, #20]
 8019014:	b29a      	uxth	r2, r3
 8019016:	6a3b      	ldr	r3, [r7, #32]
 8019018:	b29b      	uxth	r3, r3
 801901a:	1ad3      	subs	r3, r2, r3
 801901c:	b29b      	uxth	r3, r3
 801901e:	b21a      	sxth	r2, r3
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	805a      	strh	r2, [r3, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
 8019024:	697b      	ldr	r3, [r7, #20]
 8019026:	b29a      	uxth	r2, r3
 8019028:	6a3b      	ldr	r3, [r7, #32]
 801902a:	b29b      	uxth	r3, r3
 801902c:	4413      	add	r3, r2
 801902e:	b29a      	uxth	r2, r3
 8019030:	7ffb      	ldrb	r3, [r7, #31]
 8019032:	b29b      	uxth	r3, r3
 8019034:	1ad3      	subs	r3, r2, r3
 8019036:	b29b      	uxth	r3, r3
 8019038:	b21a      	sxth	r2, r3
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	80da      	strh	r2, [r3, #6]
}
 801903e:	bf00      	nop
 8019040:	372c      	adds	r7, #44	; 0x2c
 8019042:	46bd      	mov	sp, r7
 8019044:	bd90      	pop	{r4, r7, pc}

08019046 <lv_color_mix>:
 * @param c2 the second color to mix (usually the background)
 * @param mix The ratio of the colors. 0: full `c2`, 255: full `c1`, 127: half `c1` and half`c2`
 * @return the mixed color
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8019046:	b480      	push	{r7}
 8019048:	b085      	sub	sp, #20
 801904a:	af00      	add	r7, sp, #0
 801904c:	7138      	strb	r0, [r7, #4]
 801904e:	7039      	strb	r1, [r7, #0]
 8019050:	4613      	mov	r3, r2
 8019052:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_B(ret, LV_UDIV255((uint16_t)LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
                                   (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 8019054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019058:	2b00      	cmp	r3, #0
 801905a:	da01      	bge.n	8019060 <lv_color_mix+0x1a>
 801905c:	793b      	ldrb	r3, [r7, #4]
 801905e:	e000      	b.n	8019062 <lv_color_mix+0x1c>
 8019060:	783b      	ldrb	r3, [r7, #0]
 8019062:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 8019064:	7b3b      	ldrb	r3, [r7, #12]
}
 8019066:	4618      	mov	r0, r3
 8019068:	3714      	adds	r7, #20
 801906a:	46bd      	mov	sp, r7
 801906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019070:	4770      	bx	lr

08019072 <lv_color_premult>:

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
 8019072:	b480      	push	{r7}
 8019074:	b083      	sub	sp, #12
 8019076:	af00      	add	r7, sp, #0
 8019078:	7138      	strb	r0, [r7, #4]
 801907a:	460b      	mov	r3, r1
 801907c:	603a      	str	r2, [r7, #0]
 801907e:	71fb      	strb	r3, [r7, #7]
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
#else
    (void) mix;
    /*Pre-multiplication can't be used with 1 bpp*/
    out[0] = LV_COLOR_GET_R(c);
 8019080:	793b      	ldrb	r3, [r7, #4]
 8019082:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019086:	b2db      	uxtb	r3, r3
 8019088:	b29a      	uxth	r2, r3
 801908a:	683b      	ldr	r3, [r7, #0]
 801908c:	801a      	strh	r2, [r3, #0]
    out[1] = LV_COLOR_GET_G(c);
 801908e:	793b      	ldrb	r3, [r7, #4]
 8019090:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019094:	b2da      	uxtb	r2, r3
 8019096:	683b      	ldr	r3, [r7, #0]
 8019098:	3302      	adds	r3, #2
 801909a:	b292      	uxth	r2, r2
 801909c:	801a      	strh	r2, [r3, #0]
    out[2] = LV_COLOR_GET_B(c);
 801909e:	793b      	ldrb	r3, [r7, #4]
 80190a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80190a4:	b2da      	uxtb	r2, r3
 80190a6:	683b      	ldr	r3, [r7, #0]
 80190a8:	3304      	adds	r3, #4
 80190aa:	b292      	uxth	r2, r2
 80190ac:	801a      	strh	r2, [r3, #0]
#endif

}
 80190ae:	bf00      	nop
 80190b0:	370c      	adds	r7, #12
 80190b2:	46bd      	mov	sp, r7
 80190b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b8:	4770      	bx	lr

080190ba <lv_color_mix_premult>:
 *            Should be modified like mix = `255 - mix`
 * @return the mixed color
 * @note 255 won't give clearly `c1`.
 */
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
 80190ba:	b480      	push	{r7}
 80190bc:	b085      	sub	sp, #20
 80190be:	af00      	add	r7, sp, #0
 80190c0:	6078      	str	r0, [r7, #4]
 80190c2:	7039      	strb	r1, [r7, #0]
 80190c4:	4613      	mov	r3, r2
 80190c6:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_A(ret, 0xFF);
#else
    /*LV_COLOR_DEPTH == 1*/
    /*Restore color1*/
    lv_color_t c1;
    LV_COLOR_SET_R(c1, premult_c1[0]);
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	881b      	ldrh	r3, [r3, #0]
 80190cc:	f003 0301 	and.w	r3, r3, #1
 80190d0:	b2da      	uxtb	r2, r3
 80190d2:	7a3b      	ldrb	r3, [r7, #8]
 80190d4:	f362 0300 	bfi	r3, r2, #0, #1
 80190d8:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_G(c1, premult_c1[1]);
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	3302      	adds	r3, #2
 80190de:	881b      	ldrh	r3, [r3, #0]
 80190e0:	f003 0301 	and.w	r3, r3, #1
 80190e4:	b2da      	uxtb	r2, r3
 80190e6:	7a3b      	ldrb	r3, [r7, #8]
 80190e8:	f362 0300 	bfi	r3, r2, #0, #1
 80190ec:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_B(c1, premult_c1[2]);
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	3304      	adds	r3, #4
 80190f2:	881b      	ldrh	r3, [r3, #0]
 80190f4:	f003 0301 	and.w	r3, r3, #1
 80190f8:	b2da      	uxtb	r2, r3
 80190fa:	7a3b      	ldrb	r3, [r7, #8]
 80190fc:	f362 0300 	bfi	r3, r2, #0, #1
 8019100:	723b      	strb	r3, [r7, #8]
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 8019102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019106:	2b00      	cmp	r3, #0
 8019108:	da01      	bge.n	801910e <lv_color_mix_premult+0x54>
 801910a:	783b      	ldrb	r3, [r7, #0]
 801910c:	e000      	b.n	8019110 <lv_color_mix_premult+0x56>
 801910e:	7a3b      	ldrb	r3, [r7, #8]
 8019110:	733b      	strb	r3, [r7, #12]
#endif

    return ret;
 8019112:	7b3b      	ldrb	r3, [r7, #12]
}
 8019114:	4618      	mov	r0, r3
 8019116:	3714      	adds	r7, #20
 8019118:	46bd      	mov	sp, r7
 801911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801911e:	4770      	bx	lr

08019120 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 8019120:	b480      	push	{r7}
 8019122:	b083      	sub	sp, #12
 8019124:	af00      	add	r7, sp, #0
 8019126:	4603      	mov	r3, r0
 8019128:	71fb      	strb	r3, [r7, #7]
 801912a:	460b      	mov	r3, r1
 801912c:	71bb      	strb	r3, [r7, #6]
 801912e:	4613      	mov	r3, r2
 8019130:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8019132:	797b      	ldrb	r3, [r7, #5]
 8019134:	09db      	lsrs	r3, r3, #7
 8019136:	b2da      	uxtb	r2, r3
 8019138:	79bb      	ldrb	r3, [r7, #6]
 801913a:	09db      	lsrs	r3, r3, #7
 801913c:	b2db      	uxtb	r3, r3
 801913e:	4313      	orrs	r3, r2
 8019140:	b2da      	uxtb	r2, r3
 8019142:	79fb      	ldrb	r3, [r7, #7]
 8019144:	09db      	lsrs	r3, r3, #7
 8019146:	b2db      	uxtb	r3, r3
 8019148:	4313      	orrs	r3, r2
 801914a:	b2db      	uxtb	r3, r3
}
 801914c:	4618      	mov	r0, r3
 801914e:	370c      	adds	r7, #12
 8019150:	46bd      	mov	sp, r7
 8019152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019156:	4770      	bx	lr

08019158 <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 8019158:	b580      	push	{r7, lr}
 801915a:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 801915c:	2200      	movs	r2, #0
 801915e:	2100      	movs	r1, #0
 8019160:	2000      	movs	r0, #0
 8019162:	f7ff ffdd 	bl	8019120 <lv_color_make>
 8019166:	4603      	mov	r3, r0
}
 8019168:	4618      	mov	r0, r3
 801916a:	bd80      	pop	{r7, pc}

0801916c <lv_area_get_width>:
{
 801916c:	b480      	push	{r7}
 801916e:	b083      	sub	sp, #12
 8019170:	af00      	add	r7, sp, #0
 8019172:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801917a:	b29a      	uxth	r2, r3
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019182:	b29b      	uxth	r3, r3
 8019184:	1ad3      	subs	r3, r2, r3
 8019186:	b29b      	uxth	r3, r3
 8019188:	3301      	adds	r3, #1
 801918a:	b29b      	uxth	r3, r3
 801918c:	b21b      	sxth	r3, r3
}
 801918e:	4618      	mov	r0, r3
 8019190:	370c      	adds	r7, #12
 8019192:	46bd      	mov	sp, r7
 8019194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019198:	4770      	bx	lr

0801919a <lv_area_get_height>:
{
 801919a:	b480      	push	{r7}
 801919c:	b083      	sub	sp, #12
 801919e:	af00      	add	r7, sp, #0
 80191a0:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80191a8:	b29a      	uxth	r2, r3
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80191b0:	b29b      	uxth	r3, r3
 80191b2:	1ad3      	subs	r3, r2, r3
 80191b4:	b29b      	uxth	r3, r3
 80191b6:	3301      	adds	r3, #1
 80191b8:	b29b      	uxth	r3, r3
 80191ba:	b21b      	sxth	r3, r3
}
 80191bc:	4618      	mov	r0, r3
 80191be:	370c      	adds	r7, #12
 80191c0:	46bd      	mov	sp, r7
 80191c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191c6:	4770      	bx	lr

080191c8 <lv_draw_sw_blend>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_blend(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 80191c8:	b580      	push	{r7, lr}
 80191ca:	b084      	sub	sp, #16
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	6078      	str	r0, [r7, #4]
 80191d0:	6039      	str	r1, [r7, #0]
    /*Do not draw transparent things*/
    if(dsc->opa <= LV_OPA_MIN) return;
 80191d2:	683b      	ldr	r3, [r7, #0]
 80191d4:	7e1b      	ldrb	r3, [r3, #24]
 80191d6:	2b02      	cmp	r3, #2
 80191d8:	d91c      	bls.n	8019214 <lv_draw_sw_blend+0x4c>

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 80191da:	683b      	ldr	r3, [r7, #0]
 80191dc:	6819      	ldr	r1, [r3, #0]
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	689a      	ldr	r2, [r3, #8]
 80191e2:	f107 0308 	add.w	r3, r7, #8
 80191e6:	4618      	mov	r0, r3
 80191e8:	f009 fb64 	bl	80228b4 <_lv_area_intersect>
 80191ec:	4603      	mov	r3, r0
 80191ee:	f083 0301 	eor.w	r3, r3, #1
 80191f2:	b2db      	uxtb	r3, r3
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d10f      	bne.n	8019218 <lv_draw_sw_blend+0x50>

    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	d003      	beq.n	8019208 <lv_draw_sw_blend+0x40>
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019204:	6878      	ldr	r0, [r7, #4]
 8019206:	4798      	blx	r3

    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801920c:	6839      	ldr	r1, [r7, #0]
 801920e:	6878      	ldr	r0, [r7, #4]
 8019210:	4798      	blx	r3
 8019212:	e002      	b.n	801921a <lv_draw_sw_blend+0x52>
    if(dsc->opa <= LV_OPA_MIN) return;
 8019214:	bf00      	nop
 8019216:	e000      	b.n	801921a <lv_draw_sw_blend+0x52>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 8019218:	bf00      	nop
}
 801921a:	3710      	adds	r7, #16
 801921c:	46bd      	mov	sp, r7
 801921e:	bd80      	pop	{r7, pc}

08019220 <lv_draw_sw_blend_basic>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_blend_basic(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
{
 8019220:	b590      	push	{r4, r7, lr}
 8019222:	b095      	sub	sp, #84	; 0x54
 8019224:	af06      	add	r7, sp, #24
 8019226:	6078      	str	r0, [r7, #4]
 8019228:	6039      	str	r1, [r7, #0]
    lv_opa_t * mask;
    if(dsc->mask_buf == NULL) mask = NULL;
 801922a:	683b      	ldr	r3, [r7, #0]
 801922c:	68db      	ldr	r3, [r3, #12]
 801922e:	2b00      	cmp	r3, #0
 8019230:	d101      	bne.n	8019236 <lv_draw_sw_blend_basic+0x16>
 8019232:	2300      	movs	r3, #0
 8019234:	637b      	str	r3, [r7, #52]	; 0x34
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 8019236:	683b      	ldr	r3, [r7, #0]
 8019238:	68db      	ldr	r3, [r3, #12]
 801923a:	2b00      	cmp	r3, #0
 801923c:	d004      	beq.n	8019248 <lv_draw_sw_blend_basic+0x28>
 801923e:	683b      	ldr	r3, [r7, #0]
 8019240:	7c1b      	ldrb	r3, [r3, #16]
 8019242:	2b00      	cmp	r3, #0
 8019244:	f000 8191 	beq.w	801956a <lv_draw_sw_blend_basic+0x34a>
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 8019248:	683b      	ldr	r3, [r7, #0]
 801924a:	7c1b      	ldrb	r3, [r3, #16]
 801924c:	2b01      	cmp	r3, #1
 801924e:	d102      	bne.n	8019256 <lv_draw_sw_blend_basic+0x36>
 8019250:	2300      	movs	r3, #0
 8019252:	637b      	str	r3, [r7, #52]	; 0x34
 8019254:	e002      	b.n	801925c <lv_draw_sw_blend_basic+0x3c>
    else mask = dsc->mask_buf;
 8019256:	683b      	ldr	r3, [r7, #0]
 8019258:	68db      	ldr	r3, [r3, #12]
 801925a:	637b      	str	r3, [r7, #52]	; 0x34

    lv_coord_t dest_stride = lv_area_get_width(draw_ctx->buf_area);
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	685b      	ldr	r3, [r3, #4]
 8019260:	4618      	mov	r0, r3
 8019262:	f7ff ff83 	bl	801916c <lv_area_get_width>
 8019266:	4603      	mov	r3, r0
 8019268:	847b      	strh	r3, [r7, #34]	; 0x22

    lv_area_t blend_area;
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 801926a:	683b      	ldr	r3, [r7, #0]
 801926c:	6819      	ldr	r1, [r3, #0]
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	689a      	ldr	r2, [r3, #8]
 8019272:	f107 030c 	add.w	r3, r7, #12
 8019276:	4618      	mov	r0, r3
 8019278:	f009 fb1c 	bl	80228b4 <_lv_area_intersect>
 801927c:	4603      	mov	r3, r0
 801927e:	f083 0301 	eor.w	r3, r3, #1
 8019282:	b2db      	uxtb	r3, r3
 8019284:	2b00      	cmp	r3, #0
 8019286:	f040 8172 	bne.w	801956e <lv_draw_sw_blend_basic+0x34e>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 801928a:	f7f7 fac3 	bl	8010814 <_lv_refr_get_disp_refreshing>
 801928e:	61f8      	str	r0, [r7, #28]
    lv_color_t * dest_buf = draw_ctx->buf;
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	633b      	str	r3, [r7, #48]	; 0x30
    if(disp->driver->set_px_cb == NULL) {
 8019296:	69fb      	ldr	r3, [r7, #28]
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	69db      	ldr	r3, [r3, #28]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d143      	bne.n	8019328 <lv_draw_sw_blend_basic+0x108>
        if(disp->driver->screen_transp == 0) {
 80192a0:	69fb      	ldr	r3, [r7, #28]
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	7c1b      	ldrb	r3, [r3, #16]
 80192a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80192aa:	b2db      	uxtb	r3, r3
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d119      	bne.n	80192e4 <lv_draw_sw_blend_basic+0xc4>
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 80192b0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80192b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80192b8:	4611      	mov	r1, r2
 80192ba:	687a      	ldr	r2, [r7, #4]
 80192bc:	6852      	ldr	r2, [r2, #4]
 80192be:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80192c2:	1a8a      	subs	r2, r1, r2
 80192c4:	fb03 f202 	mul.w	r2, r3, r2
 80192c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80192cc:	4619      	mov	r1, r3
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	685b      	ldr	r3, [r3, #4]
 80192d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80192d6:	1acb      	subs	r3, r1, r3
 80192d8:	4413      	add	r3, r2
 80192da:	461a      	mov	r2, r3
 80192dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192de:	4413      	add	r3, r2
 80192e0:	633b      	str	r3, [r7, #48]	; 0x30
 80192e2:	e021      	b.n	8019328 <lv_draw_sw_blend_basic+0x108>
        }
        else {
            /*With LV_COLOR_DEPTH 16 it means ARGB8565 (3 bytes format)*/
            uint8_t * dest_buf8 = (uint8_t *) dest_buf;
 80192e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192e6:	61bb      	str	r3, [r7, #24]
            dest_buf8 += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80192e8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80192ec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80192f0:	4611      	mov	r1, r2
 80192f2:	687a      	ldr	r2, [r7, #4]
 80192f4:	6852      	ldr	r2, [r2, #4]
 80192f6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80192fa:	1a8a      	subs	r2, r1, r2
 80192fc:	fb02 f303 	mul.w	r3, r2, r3
 8019300:	005b      	lsls	r3, r3, #1
 8019302:	461a      	mov	r2, r3
 8019304:	69bb      	ldr	r3, [r7, #24]
 8019306:	4413      	add	r3, r2
 8019308:	61bb      	str	r3, [r7, #24]
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 801930a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801930e:	461a      	mov	r2, r3
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	685b      	ldr	r3, [r3, #4]
 8019314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019318:	1ad3      	subs	r3, r2, r3
 801931a:	005b      	lsls	r3, r3, #1
 801931c:	461a      	mov	r2, r3
 801931e:	69bb      	ldr	r3, [r7, #24]
 8019320:	4413      	add	r3, r2
 8019322:	61bb      	str	r3, [r7, #24]
            dest_buf = (lv_color_t *)dest_buf8;
 8019324:	69bb      	ldr	r3, [r7, #24]
 8019326:	633b      	str	r3, [r7, #48]	; 0x30
        }
    }

    const lv_color_t * src_buf = dsc->src_buf;
 8019328:	683b      	ldr	r3, [r7, #0]
 801932a:	685b      	ldr	r3, [r3, #4]
 801932c:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_coord_t src_stride;
    if(src_buf) {
 801932e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019330:	2b00      	cmp	r3, #0
 8019332:	d020      	beq.n	8019376 <lv_draw_sw_blend_basic+0x156>
        src_stride = lv_area_get_width(dsc->blend_area);
 8019334:	683b      	ldr	r3, [r7, #0]
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	4618      	mov	r0, r3
 801933a:	f7ff ff17 	bl	801916c <lv_area_get_width>
 801933e:	4603      	mov	r3, r0
 8019340:	857b      	strh	r3, [r7, #42]	; 0x2a
        src_buf += src_stride * (blend_area.y1 - dsc->blend_area->y1) + (blend_area.x1 - dsc->blend_area->x1);
 8019342:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8019346:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801934a:	4611      	mov	r1, r2
 801934c:	683a      	ldr	r2, [r7, #0]
 801934e:	6812      	ldr	r2, [r2, #0]
 8019350:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8019354:	1a8a      	subs	r2, r1, r2
 8019356:	fb03 f202 	mul.w	r2, r3, r2
 801935a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801935e:	4619      	mov	r1, r3
 8019360:	683b      	ldr	r3, [r7, #0]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019368:	1acb      	subs	r3, r1, r3
 801936a:	4413      	add	r3, r2
 801936c:	461a      	mov	r2, r3
 801936e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019370:	4413      	add	r3, r2
 8019372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019374:	e001      	b.n	801937a <lv_draw_sw_blend_basic+0x15a>
    }
    else {
        src_stride = 0;
 8019376:	2300      	movs	r3, #0
 8019378:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    lv_coord_t mask_stride;
    if(mask) {
 801937a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801937c:	2b00      	cmp	r3, #0
 801937e:	d047      	beq.n	8019410 <lv_draw_sw_blend_basic+0x1f0>
        /*Round the values in the mask if anti-aliasing is disabled*/
        if(disp->driver->antialiasing == 0) {
 8019380:	69fb      	ldr	r3, [r7, #28]
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	7c1b      	ldrb	r3, [r3, #16]
 8019386:	f003 0308 	and.w	r3, r3, #8
 801938a:	b2db      	uxtb	r3, r3
 801938c:	2b00      	cmp	r3, #0
 801938e:	d11e      	bne.n	80193ce <lv_draw_sw_blend_basic+0x1ae>
            int32_t mask_size = lv_area_get_size(dsc->mask_area);
 8019390:	683b      	ldr	r3, [r7, #0]
 8019392:	695b      	ldr	r3, [r3, #20]
 8019394:	4618      	mov	r0, r3
 8019396:	f009 fa00 	bl	802279a <lv_area_get_size>
 801939a:	4603      	mov	r3, r0
 801939c:	617b      	str	r3, [r7, #20]
            int32_t i;
            for(i = 0; i < mask_size; i++) {
 801939e:	2300      	movs	r3, #0
 80193a0:	627b      	str	r3, [r7, #36]	; 0x24
 80193a2:	e010      	b.n	80193c6 <lv_draw_sw_blend_basic+0x1a6>
                mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 80193a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80193a8:	4413      	add	r3, r2
 80193aa:	781b      	ldrb	r3, [r3, #0]
 80193ac:	2b80      	cmp	r3, #128	; 0x80
 80193ae:	d901      	bls.n	80193b4 <lv_draw_sw_blend_basic+0x194>
 80193b0:	21ff      	movs	r1, #255	; 0xff
 80193b2:	e000      	b.n	80193b6 <lv_draw_sw_blend_basic+0x196>
 80193b4:	2100      	movs	r1, #0
 80193b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80193ba:	4413      	add	r3, r2
 80193bc:	460a      	mov	r2, r1
 80193be:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < mask_size; i++) {
 80193c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193c2:	3301      	adds	r3, #1
 80193c4:	627b      	str	r3, [r7, #36]	; 0x24
 80193c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80193c8:	697b      	ldr	r3, [r7, #20]
 80193ca:	429a      	cmp	r2, r3
 80193cc:	dbea      	blt.n	80193a4 <lv_draw_sw_blend_basic+0x184>
            }
        }

        mask_stride = lv_area_get_width(dsc->mask_area);
 80193ce:	683b      	ldr	r3, [r7, #0]
 80193d0:	695b      	ldr	r3, [r3, #20]
 80193d2:	4618      	mov	r0, r3
 80193d4:	f7ff feca 	bl	801916c <lv_area_get_width>
 80193d8:	4603      	mov	r3, r0
 80193da:	853b      	strh	r3, [r7, #40]	; 0x28
        mask += mask_stride * (blend_area.y1 - dsc->mask_area->y1) + (blend_area.x1 - dsc->mask_area->x1);
 80193dc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80193e0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80193e4:	4611      	mov	r1, r2
 80193e6:	683a      	ldr	r2, [r7, #0]
 80193e8:	6952      	ldr	r2, [r2, #20]
 80193ea:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80193ee:	1a8a      	subs	r2, r1, r2
 80193f0:	fb03 f202 	mul.w	r2, r3, r2
 80193f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80193f8:	4619      	mov	r1, r3
 80193fa:	683b      	ldr	r3, [r7, #0]
 80193fc:	695b      	ldr	r3, [r3, #20]
 80193fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019402:	1acb      	subs	r3, r1, r3
 8019404:	4413      	add	r3, r2
 8019406:	461a      	mov	r2, r3
 8019408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801940a:	4413      	add	r3, r2
 801940c:	637b      	str	r3, [r7, #52]	; 0x34
 801940e:	e001      	b.n	8019414 <lv_draw_sw_blend_basic+0x1f4>

    }
    else {
        mask_stride = 0;
 8019410:	2300      	movs	r3, #0
 8019412:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    lv_area_move(&blend_area, -draw_ctx->buf_area->x1, -draw_ctx->buf_area->y1);
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	685b      	ldr	r3, [r3, #4]
 8019418:	f9b3 3000 	ldrsh.w	r3, [r3]
 801941c:	b29b      	uxth	r3, r3
 801941e:	425b      	negs	r3, r3
 8019420:	b29b      	uxth	r3, r3
 8019422:	b219      	sxth	r1, r3
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	685b      	ldr	r3, [r3, #4]
 8019428:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801942c:	b29b      	uxth	r3, r3
 801942e:	425b      	negs	r3, r3
 8019430:	b29b      	uxth	r3, r3
 8019432:	b21a      	sxth	r2, r3
 8019434:	f107 030c 	add.w	r3, r7, #12
 8019438:	4618      	mov	r0, r3
 801943a:	f009 fa05 	bl	8022848 <lv_area_move>


    if(disp->driver->set_px_cb) {
 801943e:	69fb      	ldr	r3, [r7, #28]
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	69db      	ldr	r3, [r3, #28]
 8019444:	2b00      	cmp	r3, #0
 8019446:	d02c      	beq.n	80194a2 <lv_draw_sw_blend_basic+0x282>
        if(dsc->src_buf == NULL) {
 8019448:	683b      	ldr	r3, [r7, #0]
 801944a:	685b      	ldr	r3, [r3, #4]
 801944c:	2b00      	cmp	r3, #0
 801944e:	d113      	bne.n	8019478 <lv_draw_sw_blend_basic+0x258>
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 8019450:	683b      	ldr	r3, [r7, #0]
 8019452:	7e1a      	ldrb	r2, [r3, #24]
 8019454:	683b      	ldr	r3, [r7, #0]
 8019456:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 801945a:	f107 000c 	add.w	r0, r7, #12
 801945e:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8019462:	9102      	str	r1, [sp, #8]
 8019464:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019466:	9101      	str	r1, [sp, #4]
 8019468:	9200      	str	r2, [sp, #0]
 801946a:	7a1b      	ldrb	r3, [r3, #8]
 801946c:	4622      	mov	r2, r4
 801946e:	4601      	mov	r1, r0
 8019470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019472:	f000 f880 	bl	8019576 <fill_set_px>
 8019476:	e07b      	b.n	8019570 <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_set_px(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 8019478:	683b      	ldr	r3, [r7, #0]
 801947a:	7e1b      	ldrb	r3, [r3, #24]
 801947c:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 8019480:	f107 010c 	add.w	r1, r7, #12
 8019484:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8019488:	9203      	str	r2, [sp, #12]
 801948a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801948c:	9202      	str	r2, [sp, #8]
 801948e:	9301      	str	r3, [sp, #4]
 8019490:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8019494:	9300      	str	r3, [sp, #0]
 8019496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019498:	4602      	mov	r2, r0
 801949a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801949c:	f000 fc02 	bl	8019ca4 <map_set_px>
 80194a0:	e066      	b.n	8019570 <lv_draw_sw_blend_basic+0x350>
        else {
            map_argb(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
        }
    }
#endif
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 80194a2:	683b      	ldr	r3, [r7, #0]
 80194a4:	7e5b      	ldrb	r3, [r3, #25]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d12c      	bne.n	8019504 <lv_draw_sw_blend_basic+0x2e4>
        if(dsc->src_buf == NULL) {
 80194aa:	683b      	ldr	r3, [r7, #0]
 80194ac:	685b      	ldr	r3, [r3, #4]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d113      	bne.n	80194da <lv_draw_sw_blend_basic+0x2ba>
            fill_normal(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 80194b2:	683b      	ldr	r3, [r7, #0]
 80194b4:	7e1a      	ldrb	r2, [r3, #24]
 80194b6:	683b      	ldr	r3, [r7, #0]
 80194b8:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 80194bc:	f107 000c 	add.w	r0, r7, #12
 80194c0:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 80194c4:	9102      	str	r1, [sp, #8]
 80194c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80194c8:	9101      	str	r1, [sp, #4]
 80194ca:	9200      	str	r2, [sp, #0]
 80194cc:	7a1b      	ldrb	r3, [r3, #8]
 80194ce:	4622      	mov	r2, r4
 80194d0:	4601      	mov	r1, r0
 80194d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80194d4:	f000 f8ec 	bl	80196b0 <fill_normal>
 80194d8:	e04a      	b.n	8019570 <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_normal(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 80194da:	683b      	ldr	r3, [r7, #0]
 80194dc:	7e1b      	ldrb	r3, [r3, #24]
 80194de:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 80194e2:	f107 010c 	add.w	r1, r7, #12
 80194e6:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80194ea:	9203      	str	r2, [sp, #12]
 80194ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80194ee:	9202      	str	r2, [sp, #8]
 80194f0:	9301      	str	r3, [sp, #4]
 80194f2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80194f6:	9300      	str	r3, [sp, #0]
 80194f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194fa:	4602      	mov	r2, r0
 80194fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80194fe:	f000 fc83 	bl	8019e08 <map_normal>
 8019502:	e035      	b.n	8019570 <lv_draw_sw_blend_basic+0x350>
        }
    }
    else {
#if LV_DRAW_COMPLEX
        if(dsc->src_buf == NULL) {
 8019504:	683b      	ldr	r3, [r7, #0]
 8019506:	685b      	ldr	r3, [r3, #4]
 8019508:	2b00      	cmp	r3, #0
 801950a:	d116      	bne.n	801953a <lv_draw_sw_blend_basic+0x31a>
            fill_blended(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride, dsc->blend_mode);
 801950c:	683b      	ldr	r3, [r7, #0]
 801950e:	7e1a      	ldrb	r2, [r3, #24]
 8019510:	683b      	ldr	r3, [r7, #0]
 8019512:	7e59      	ldrb	r1, [r3, #25]
 8019514:	683b      	ldr	r3, [r7, #0]
 8019516:	f9b7 4022 	ldrsh.w	r4, [r7, #34]	; 0x22
 801951a:	f107 000c 	add.w	r0, r7, #12
 801951e:	9103      	str	r1, [sp, #12]
 8019520:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8019524:	9102      	str	r1, [sp, #8]
 8019526:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019528:	9101      	str	r1, [sp, #4]
 801952a:	9200      	str	r2, [sp, #0]
 801952c:	7a1b      	ldrb	r3, [r3, #8]
 801952e:	4622      	mov	r2, r4
 8019530:	4601      	mov	r1, r0
 8019532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019534:	f000 fabc 	bl	8019ab0 <fill_blended>
 8019538:	e01a      	b.n	8019570 <lv_draw_sw_blend_basic+0x350>
        }
        else {
            map_blended(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
 801953a:	683b      	ldr	r3, [r7, #0]
 801953c:	7e1b      	ldrb	r3, [r3, #24]
 801953e:	683a      	ldr	r2, [r7, #0]
 8019540:	7e52      	ldrb	r2, [r2, #25]
 8019542:	f9b7 0022 	ldrsh.w	r0, [r7, #34]	; 0x22
 8019546:	f107 010c 	add.w	r1, r7, #12
 801954a:	9204      	str	r2, [sp, #16]
 801954c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8019550:	9203      	str	r2, [sp, #12]
 8019552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019554:	9202      	str	r2, [sp, #8]
 8019556:	9301      	str	r3, [sp, #4]
 8019558:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801955c:	9300      	str	r3, [sp, #0]
 801955e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019560:	4602      	mov	r2, r0
 8019562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019564:	f000 fe78 	bl	801a258 <map_blended>
 8019568:	e002      	b.n	8019570 <lv_draw_sw_blend_basic+0x350>
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 801956a:	bf00      	nop
 801956c:	e000      	b.n	8019570 <lv_draw_sw_blend_basic+0x350>
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 801956e:	bf00      	nop
        }
#endif
    }
}
 8019570:	373c      	adds	r7, #60	; 0x3c
 8019572:	46bd      	mov	sp, r7
 8019574:	bd90      	pop	{r4, r7, pc}

08019576 <fill_set_px>:
 *   STATIC FUNCTIONS
 **********************/

static void fill_set_px(lv_color_t * dest_buf, const lv_area_t * blend_area, lv_coord_t dest_stride,
                        lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stide)
{
 8019576:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019578:	b08f      	sub	sp, #60	; 0x3c
 801957a:	af04      	add	r7, sp, #16
 801957c:	60f8      	str	r0, [r7, #12]
 801957e:	60b9      	str	r1, [r7, #8]
 8019580:	713b      	strb	r3, [r7, #4]
 8019582:	4613      	mov	r3, r2
 8019584:	80fb      	strh	r3, [r7, #6]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8019586:	f7f7 f945 	bl	8010814 <_lv_refr_get_disp_refreshing>
 801958a:	61f8      	str	r0, [r7, #28]

    int32_t x;
    int32_t y;

    if(mask == NULL) {
 801958c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801958e:	2b00      	cmp	r3, #0
 8019590:	d134      	bne.n	80195fc <fill_set_px+0x86>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 8019592:	68bb      	ldr	r3, [r7, #8]
 8019594:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019598:	623b      	str	r3, [r7, #32]
 801959a:	e027      	b.n	80195ec <fill_set_px+0x76>
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 801959c:	68bb      	ldr	r3, [r7, #8]
 801959e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80195a2:	627b      	str	r3, [r7, #36]	; 0x24
 80195a4:	e018      	b.n	80195d8 <fill_set_px+0x62>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 80195a6:	69fb      	ldr	r3, [r7, #28]
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	69dc      	ldr	r4, [r3, #28]
 80195ac:	69fb      	ldr	r3, [r7, #28]
 80195ae:	6818      	ldr	r0, [r3, #0]
 80195b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195b2:	b21d      	sxth	r5, r3
 80195b4:	6a3b      	ldr	r3, [r7, #32]
 80195b6:	b21b      	sxth	r3, r3
 80195b8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80195bc:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80195c0:	9202      	str	r2, [sp, #8]
 80195c2:	793a      	ldrb	r2, [r7, #4]
 80195c4:	f88d 2004 	strb.w	r2, [sp, #4]
 80195c8:	9300      	str	r3, [sp, #0]
 80195ca:	462b      	mov	r3, r5
 80195cc:	460a      	mov	r2, r1
 80195ce:	68f9      	ldr	r1, [r7, #12]
 80195d0:	47a0      	blx	r4
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 80195d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195d4:	3301      	adds	r3, #1
 80195d6:	627b      	str	r3, [r7, #36]	; 0x24
 80195d8:	68bb      	ldr	r3, [r7, #8]
 80195da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80195de:	461a      	mov	r2, r3
 80195e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195e2:	4293      	cmp	r3, r2
 80195e4:	dddf      	ble.n	80195a6 <fill_set_px+0x30>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 80195e6:	6a3b      	ldr	r3, [r7, #32]
 80195e8:	3301      	adds	r3, #1
 80195ea:	623b      	str	r3, [r7, #32]
 80195ec:	68bb      	ldr	r3, [r7, #8]
 80195ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80195f2:	461a      	mov	r2, r3
 80195f4:	6a3b      	ldr	r3, [r7, #32]
 80195f6:	4293      	cmp	r3, r2
 80195f8:	ddd0      	ble.n	801959c <fill_set_px+0x26>
                }
            }
            mask += mask_stide;
        }
    }
}
 80195fa:	e055      	b.n	80196a8 <fill_set_px+0x132>
        int32_t w = lv_area_get_width(blend_area);
 80195fc:	68b8      	ldr	r0, [r7, #8]
 80195fe:	f7ff fdb5 	bl	801916c <lv_area_get_width>
 8019602:	4603      	mov	r3, r0
 8019604:	61bb      	str	r3, [r7, #24]
        int32_t h = lv_area_get_height(blend_area);
 8019606:	68b8      	ldr	r0, [r7, #8]
 8019608:	f7ff fdc7 	bl	801919a <lv_area_get_height>
 801960c:	4603      	mov	r3, r0
 801960e:	617b      	str	r3, [r7, #20]
        for(y = 0; y < h; y++) {
 8019610:	2300      	movs	r3, #0
 8019612:	623b      	str	r3, [r7, #32]
 8019614:	e044      	b.n	80196a0 <fill_set_px+0x12a>
            for(x = 0; x < w; x++) {
 8019616:	2300      	movs	r3, #0
 8019618:	627b      	str	r3, [r7, #36]	; 0x24
 801961a:	e035      	b.n	8019688 <fill_set_px+0x112>
                if(mask[x]) {
 801961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801961e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019620:	4413      	add	r3, r2
 8019622:	781b      	ldrb	r3, [r3, #0]
 8019624:	2b00      	cmp	r3, #0
 8019626:	d02c      	beq.n	8019682 <fill_set_px+0x10c>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 8019628:	69fb      	ldr	r3, [r7, #28]
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	69dc      	ldr	r4, [r3, #28]
 801962e:	69fb      	ldr	r3, [r7, #28]
 8019630:	681d      	ldr	r5, [r3, #0]
 8019632:	68bb      	ldr	r3, [r7, #8]
 8019634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019638:	b29a      	uxth	r2, r3
 801963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801963c:	b29b      	uxth	r3, r3
 801963e:	4413      	add	r3, r2
 8019640:	b29b      	uxth	r3, r3
 8019642:	b21e      	sxth	r6, r3
 8019644:	68bb      	ldr	r3, [r7, #8]
 8019646:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801964a:	b29a      	uxth	r2, r3
 801964c:	6a3b      	ldr	r3, [r7, #32]
 801964e:	b29b      	uxth	r3, r3
 8019650:	4413      	add	r3, r2
 8019652:	b29b      	uxth	r3, r3
 8019654:	b21b      	sxth	r3, r3
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8019656:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 801965a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801965c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801965e:	4401      	add	r1, r0
 8019660:	7809      	ldrb	r1, [r1, #0]
 8019662:	fb01 f202 	mul.w	r2, r1, r2
 8019666:	0a12      	lsrs	r2, r2, #8
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 8019668:	b2d2      	uxtb	r2, r2
 801966a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801966e:	9202      	str	r2, [sp, #8]
 8019670:	793a      	ldrb	r2, [r7, #4]
 8019672:	f88d 2004 	strb.w	r2, [sp, #4]
 8019676:	9300      	str	r3, [sp, #0]
 8019678:	4633      	mov	r3, r6
 801967a:	460a      	mov	r2, r1
 801967c:	68f9      	ldr	r1, [r7, #12]
 801967e:	4628      	mov	r0, r5
 8019680:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 8019682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019684:	3301      	adds	r3, #1
 8019686:	627b      	str	r3, [r7, #36]	; 0x24
 8019688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801968a:	69bb      	ldr	r3, [r7, #24]
 801968c:	429a      	cmp	r2, r3
 801968e:	dbc5      	blt.n	801961c <fill_set_px+0xa6>
            mask += mask_stide;
 8019690:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8019694:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019696:	4413      	add	r3, r2
 8019698:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < h; y++) {
 801969a:	6a3b      	ldr	r3, [r7, #32]
 801969c:	3301      	adds	r3, #1
 801969e:	623b      	str	r3, [r7, #32]
 80196a0:	6a3a      	ldr	r2, [r7, #32]
 80196a2:	697b      	ldr	r3, [r7, #20]
 80196a4:	429a      	cmp	r2, r3
 80196a6:	dbb6      	blt.n	8019616 <fill_set_px+0xa0>
}
 80196a8:	bf00      	nop
 80196aa:	372c      	adds	r7, #44	; 0x2c
 80196ac:	46bd      	mov	sp, r7
 80196ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080196b0 <fill_normal>:

LV_ATTRIBUTE_FAST_MEM static void fill_normal(lv_color_t * dest_buf, const lv_area_t * dest_area,
                                              lv_coord_t dest_stride, lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)
{
 80196b0:	b580      	push	{r7, lr}
 80196b2:	b092      	sub	sp, #72	; 0x48
 80196b4:	af00      	add	r7, sp, #0
 80196b6:	60f8      	str	r0, [r7, #12]
 80196b8:	60b9      	str	r1, [r7, #8]
 80196ba:	713b      	strb	r3, [r7, #4]
 80196bc:	4613      	mov	r3, r2
 80196be:	80fb      	strh	r3, [r7, #6]
    int32_t w = lv_area_get_width(dest_area);
 80196c0:	68b8      	ldr	r0, [r7, #8]
 80196c2:	f7ff fd53 	bl	801916c <lv_area_get_width>
 80196c6:	4603      	mov	r3, r0
 80196c8:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t h = lv_area_get_height(dest_area);
 80196ca:	68b8      	ldr	r0, [r7, #8]
 80196cc:	f7ff fd65 	bl	801919a <lv_area_get_height>
 80196d0:	4603      	mov	r3, r0
 80196d2:	637b      	str	r3, [r7, #52]	; 0x34

    int32_t x;
    int32_t y;

    /*No mask*/
    if(mask == NULL) {
 80196d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	d171      	bne.n	80197be <fill_normal+0x10e>
        if(opa >= LV_OPA_MAX) {
 80196da:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80196de:	2bfc      	cmp	r3, #252	; 0xfc
 80196e0:	d915      	bls.n	801970e <fill_normal+0x5e>
            for(y = 0; y < h; y++) {
 80196e2:	2300      	movs	r3, #0
 80196e4:	643b      	str	r3, [r7, #64]	; 0x40
 80196e6:	e00d      	b.n	8019704 <fill_normal+0x54>
                lv_color_fill(dest_buf, color, w);
 80196e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196ea:	461a      	mov	r2, r3
 80196ec:	7939      	ldrb	r1, [r7, #4]
 80196ee:	68f8      	ldr	r0, [r7, #12]
 80196f0:	f009 fdac 	bl	802324c <lv_color_fill>
                dest_buf += dest_stride;
 80196f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80196f8:	68fa      	ldr	r2, [r7, #12]
 80196fa:	4413      	add	r3, r2
 80196fc:	60fb      	str	r3, [r7, #12]
            for(y = 0; y < h; y++) {
 80196fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019700:	3301      	adds	r3, #1
 8019702:	643b      	str	r3, [r7, #64]	; 0x40
 8019704:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019708:	429a      	cmp	r2, r3
 801970a:	dbed      	blt.n	80196e8 <fill_normal+0x38>
                dest_buf += dest_stride;
                mask += (mask_stride - w);
            }
        }
    }
}
 801970c:	e1cc      	b.n	8019aa8 <fill_normal+0x3f8>
            lv_color_t last_dest_color = lv_color_black();
 801970e:	f7ff fd23 	bl	8019158 <lv_color_black>
 8019712:	4603      	mov	r3, r0
 8019714:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 8019718:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801971c:	461a      	mov	r2, r3
 801971e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8019722:	7938      	ldrb	r0, [r7, #4]
 8019724:	f7ff fc8f 	bl	8019046 <lv_color_mix>
 8019728:	4603      	mov	r3, r0
 801972a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            lv_color_premult(color, opa, color_premult);
 801972e:	f107 021c 	add.w	r2, r7, #28
 8019732:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8019736:	4619      	mov	r1, r3
 8019738:	7938      	ldrb	r0, [r7, #4]
 801973a:	f7ff fc9a 	bl	8019072 <lv_color_premult>
            lv_opa_t opa_inv = 255 - opa;
 801973e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8019742:	43db      	mvns	r3, r3
 8019744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            for(y = 0; y < h; y++) {
 8019748:	2300      	movs	r3, #0
 801974a:	643b      	str	r3, [r7, #64]	; 0x40
 801974c:	e032      	b.n	80197b4 <fill_normal+0x104>
                for(x = 0; x < w; x++) {
 801974e:	2300      	movs	r3, #0
 8019750:	647b      	str	r3, [r7, #68]	; 0x44
 8019752:	e023      	b.n	801979c <fill_normal+0xec>
                    if(last_dest_color.full != dest_buf[x].full) {
 8019754:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801975a:	68f9      	ldr	r1, [r7, #12]
 801975c:	440b      	add	r3, r1
 801975e:	781b      	ldrb	r3, [r3, #0]
 8019760:	429a      	cmp	r2, r3
 8019762:	d012      	beq.n	801978a <fill_normal+0xda>
                        last_dest_color = dest_buf[x];
 8019764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019766:	68fa      	ldr	r2, [r7, #12]
 8019768:	4413      	add	r3, r2
 801976a:	781b      	ldrb	r3, [r3, #0]
 801976c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                        last_res_color = lv_color_mix_premult(color_premult, dest_buf[x], opa_inv);
 8019770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019772:	68fa      	ldr	r2, [r7, #12]
 8019774:	4413      	add	r3, r2
 8019776:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801977a:	f107 001c 	add.w	r0, r7, #28
 801977e:	7819      	ldrb	r1, [r3, #0]
 8019780:	f7ff fc9b 	bl	80190ba <lv_color_mix_premult>
 8019784:	4603      	mov	r3, r0
 8019786:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    dest_buf[x] = last_res_color;
 801978a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801978c:	68fa      	ldr	r2, [r7, #12]
 801978e:	4413      	add	r3, r2
 8019790:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8019794:	701a      	strb	r2, [r3, #0]
                for(x = 0; x < w; x++) {
 8019796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019798:	3301      	adds	r3, #1
 801979a:	647b      	str	r3, [r7, #68]	; 0x44
 801979c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801979e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197a0:	429a      	cmp	r2, r3
 80197a2:	dbd7      	blt.n	8019754 <fill_normal+0xa4>
                dest_buf += dest_stride;
 80197a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80197a8:	68fa      	ldr	r2, [r7, #12]
 80197aa:	4413      	add	r3, r2
 80197ac:	60fb      	str	r3, [r7, #12]
            for(y = 0; y < h; y++) {
 80197ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80197b0:	3301      	adds	r3, #1
 80197b2:	643b      	str	r3, [r7, #64]	; 0x40
 80197b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80197b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80197b8:	429a      	cmp	r2, r3
 80197ba:	dbc8      	blt.n	801974e <fill_normal+0x9e>
}
 80197bc:	e174      	b.n	8019aa8 <fill_normal+0x3f8>
        if(opa >= LV_OPA_MAX) {
 80197be:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80197c2:	2bfc      	cmp	r3, #252	; 0xfc
 80197c4:	f240 80f7 	bls.w	80199b6 <fill_normal+0x306>
            int32_t x_end4 = w - 4;
 80197c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197ca:	3b04      	subs	r3, #4
 80197cc:	633b      	str	r3, [r7, #48]	; 0x30
            for(y = 0; y < h; y++) {
 80197ce:	2300      	movs	r3, #0
 80197d0:	643b      	str	r3, [r7, #64]	; 0x40
 80197d2:	e0ea      	b.n	80199aa <fill_normal+0x2fa>
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 80197d4:	2300      	movs	r3, #0
 80197d6:	647b      	str	r3, [r7, #68]	; 0x44
 80197d8:	e01a      	b.n	8019810 <fill_normal+0x160>
                    FILL_NORMAL_MASK_PX(color)
 80197da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80197dc:	781b      	ldrb	r3, [r3, #0]
 80197de:	2bff      	cmp	r3, #255	; 0xff
 80197e0:	d103      	bne.n	80197ea <fill_normal+0x13a>
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	793a      	ldrb	r2, [r7, #4]
 80197e6:	701a      	strb	r2, [r3, #0]
 80197e8:	e009      	b.n	80197fe <fill_normal+0x14e>
 80197ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80197ec:	781a      	ldrb	r2, [r3, #0]
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	7819      	ldrb	r1, [r3, #0]
 80197f2:	7938      	ldrb	r0, [r7, #4]
 80197f4:	f7ff fc27 	bl	8019046 <lv_color_mix>
 80197f8:	4602      	mov	r2, r0
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	701a      	strb	r2, [r3, #0]
 80197fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019800:	3301      	adds	r3, #1
 8019802:	657b      	str	r3, [r7, #84]	; 0x54
 8019804:	68fb      	ldr	r3, [r7, #12]
 8019806:	3301      	adds	r3, #1
 8019808:	60fb      	str	r3, [r7, #12]
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 801980a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801980c:	3301      	adds	r3, #1
 801980e:	647b      	str	r3, [r7, #68]	; 0x44
 8019810:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019814:	429a      	cmp	r2, r3
 8019816:	f280 8090 	bge.w	801993a <fill_normal+0x28a>
 801981a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801981c:	f003 0303 	and.w	r3, r3, #3
 8019820:	2b00      	cmp	r3, #0
 8019822:	d1da      	bne.n	80197da <fill_normal+0x12a>
                for(; x <= x_end4; x += 4) {
 8019824:	e089      	b.n	801993a <fill_normal+0x28a>
                    uint32_t mask32 = *((uint32_t *)mask);
 8019826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if(mask32 == 0xFFFFFFFF) {
 801982c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801982e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019832:	d115      	bne.n	8019860 <fill_normal+0x1b0>
                        dest_buf[0] = color;
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	793a      	ldrb	r2, [r7, #4]
 8019838:	701a      	strb	r2, [r3, #0]
                        dest_buf[1] = color;
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	3301      	adds	r3, #1
 801983e:	793a      	ldrb	r2, [r7, #4]
 8019840:	701a      	strb	r2, [r3, #0]
                        dest_buf[2] = color;
 8019842:	68fb      	ldr	r3, [r7, #12]
 8019844:	3302      	adds	r3, #2
 8019846:	793a      	ldrb	r2, [r7, #4]
 8019848:	701a      	strb	r2, [r3, #0]
                        dest_buf[3] = color;
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	3303      	adds	r3, #3
 801984e:	793a      	ldrb	r2, [r7, #4]
 8019850:	701a      	strb	r2, [r3, #0]
                        dest_buf += 4;
 8019852:	68fb      	ldr	r3, [r7, #12]
 8019854:	3304      	adds	r3, #4
 8019856:	60fb      	str	r3, [r7, #12]
                        mask += 4;
 8019858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801985a:	3304      	adds	r3, #4
 801985c:	657b      	str	r3, [r7, #84]	; 0x54
 801985e:	e069      	b.n	8019934 <fill_normal+0x284>
                    else if(mask32) {
 8019860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019862:	2b00      	cmp	r3, #0
 8019864:	d060      	beq.n	8019928 <fill_normal+0x278>
                        FILL_NORMAL_MASK_PX(color)
 8019866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019868:	781b      	ldrb	r3, [r3, #0]
 801986a:	2bff      	cmp	r3, #255	; 0xff
 801986c:	d103      	bne.n	8019876 <fill_normal+0x1c6>
 801986e:	68fb      	ldr	r3, [r7, #12]
 8019870:	793a      	ldrb	r2, [r7, #4]
 8019872:	701a      	strb	r2, [r3, #0]
 8019874:	e009      	b.n	801988a <fill_normal+0x1da>
 8019876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019878:	781a      	ldrb	r2, [r3, #0]
 801987a:	68fb      	ldr	r3, [r7, #12]
 801987c:	7819      	ldrb	r1, [r3, #0]
 801987e:	7938      	ldrb	r0, [r7, #4]
 8019880:	f7ff fbe1 	bl	8019046 <lv_color_mix>
 8019884:	4602      	mov	r2, r0
 8019886:	68fb      	ldr	r3, [r7, #12]
 8019888:	701a      	strb	r2, [r3, #0]
 801988a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801988c:	3301      	adds	r3, #1
 801988e:	657b      	str	r3, [r7, #84]	; 0x54
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	3301      	adds	r3, #1
 8019894:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 8019896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019898:	781b      	ldrb	r3, [r3, #0]
 801989a:	2bff      	cmp	r3, #255	; 0xff
 801989c:	d103      	bne.n	80198a6 <fill_normal+0x1f6>
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	793a      	ldrb	r2, [r7, #4]
 80198a2:	701a      	strb	r2, [r3, #0]
 80198a4:	e009      	b.n	80198ba <fill_normal+0x20a>
 80198a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198a8:	781a      	ldrb	r2, [r3, #0]
 80198aa:	68fb      	ldr	r3, [r7, #12]
 80198ac:	7819      	ldrb	r1, [r3, #0]
 80198ae:	7938      	ldrb	r0, [r7, #4]
 80198b0:	f7ff fbc9 	bl	8019046 <lv_color_mix>
 80198b4:	4602      	mov	r2, r0
 80198b6:	68fb      	ldr	r3, [r7, #12]
 80198b8:	701a      	strb	r2, [r3, #0]
 80198ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198bc:	3301      	adds	r3, #1
 80198be:	657b      	str	r3, [r7, #84]	; 0x54
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	3301      	adds	r3, #1
 80198c4:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 80198c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198c8:	781b      	ldrb	r3, [r3, #0]
 80198ca:	2bff      	cmp	r3, #255	; 0xff
 80198cc:	d103      	bne.n	80198d6 <fill_normal+0x226>
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	793a      	ldrb	r2, [r7, #4]
 80198d2:	701a      	strb	r2, [r3, #0]
 80198d4:	e009      	b.n	80198ea <fill_normal+0x23a>
 80198d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198d8:	781a      	ldrb	r2, [r3, #0]
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	7819      	ldrb	r1, [r3, #0]
 80198de:	7938      	ldrb	r0, [r7, #4]
 80198e0:	f7ff fbb1 	bl	8019046 <lv_color_mix>
 80198e4:	4602      	mov	r2, r0
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	701a      	strb	r2, [r3, #0]
 80198ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198ec:	3301      	adds	r3, #1
 80198ee:	657b      	str	r3, [r7, #84]	; 0x54
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	3301      	adds	r3, #1
 80198f4:	60fb      	str	r3, [r7, #12]
                        FILL_NORMAL_MASK_PX(color)
 80198f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198f8:	781b      	ldrb	r3, [r3, #0]
 80198fa:	2bff      	cmp	r3, #255	; 0xff
 80198fc:	d103      	bne.n	8019906 <fill_normal+0x256>
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	793a      	ldrb	r2, [r7, #4]
 8019902:	701a      	strb	r2, [r3, #0]
 8019904:	e009      	b.n	801991a <fill_normal+0x26a>
 8019906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019908:	781a      	ldrb	r2, [r3, #0]
 801990a:	68fb      	ldr	r3, [r7, #12]
 801990c:	7819      	ldrb	r1, [r3, #0]
 801990e:	7938      	ldrb	r0, [r7, #4]
 8019910:	f7ff fb99 	bl	8019046 <lv_color_mix>
 8019914:	4602      	mov	r2, r0
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	701a      	strb	r2, [r3, #0]
 801991a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801991c:	3301      	adds	r3, #1
 801991e:	657b      	str	r3, [r7, #84]	; 0x54
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	3301      	adds	r3, #1
 8019924:	60fb      	str	r3, [r7, #12]
 8019926:	e005      	b.n	8019934 <fill_normal+0x284>
                        mask += 4;
 8019928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801992a:	3304      	adds	r3, #4
 801992c:	657b      	str	r3, [r7, #84]	; 0x54
                        dest_buf += 4;
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	3304      	adds	r3, #4
 8019932:	60fb      	str	r3, [r7, #12]
                for(; x <= x_end4; x += 4) {
 8019934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019936:	3304      	adds	r3, #4
 8019938:	647b      	str	r3, [r7, #68]	; 0x44
 801993a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801993e:	429a      	cmp	r2, r3
 8019940:	f77f af71 	ble.w	8019826 <fill_normal+0x176>
                for(; x < w ; x++) {
 8019944:	e01a      	b.n	801997c <fill_normal+0x2cc>
                    FILL_NORMAL_MASK_PX(color)
 8019946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019948:	781b      	ldrb	r3, [r3, #0]
 801994a:	2bff      	cmp	r3, #255	; 0xff
 801994c:	d103      	bne.n	8019956 <fill_normal+0x2a6>
 801994e:	68fb      	ldr	r3, [r7, #12]
 8019950:	793a      	ldrb	r2, [r7, #4]
 8019952:	701a      	strb	r2, [r3, #0]
 8019954:	e009      	b.n	801996a <fill_normal+0x2ba>
 8019956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019958:	781a      	ldrb	r2, [r3, #0]
 801995a:	68fb      	ldr	r3, [r7, #12]
 801995c:	7819      	ldrb	r1, [r3, #0]
 801995e:	7938      	ldrb	r0, [r7, #4]
 8019960:	f7ff fb71 	bl	8019046 <lv_color_mix>
 8019964:	4602      	mov	r2, r0
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	701a      	strb	r2, [r3, #0]
 801996a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801996c:	3301      	adds	r3, #1
 801996e:	657b      	str	r3, [r7, #84]	; 0x54
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	3301      	adds	r3, #1
 8019974:	60fb      	str	r3, [r7, #12]
                for(; x < w ; x++) {
 8019976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019978:	3301      	adds	r3, #1
 801997a:	647b      	str	r3, [r7, #68]	; 0x44
 801997c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801997e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019980:	429a      	cmp	r2, r3
 8019982:	dbe0      	blt.n	8019946 <fill_normal+0x296>
                dest_buf += (dest_stride - w);
 8019984:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8019988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801998a:	1ad3      	subs	r3, r2, r3
 801998c:	461a      	mov	r2, r3
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	4413      	add	r3, r2
 8019992:	60fb      	str	r3, [r7, #12]
                mask += (mask_stride - w);
 8019994:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8019998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801999a:	1ad3      	subs	r3, r2, r3
 801999c:	461a      	mov	r2, r3
 801999e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80199a0:	4413      	add	r3, r2
 80199a2:	657b      	str	r3, [r7, #84]	; 0x54
            for(y = 0; y < h; y++) {
 80199a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80199a6:	3301      	adds	r3, #1
 80199a8:	643b      	str	r3, [r7, #64]	; 0x40
 80199aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80199ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199ae:	429a      	cmp	r2, r3
 80199b0:	f6ff af10 	blt.w	80197d4 <fill_normal+0x124>
}
 80199b4:	e078      	b.n	8019aa8 <fill_normal+0x3f8>
            lv_opa_t last_mask = LV_OPA_TRANSP;
 80199b6:	2300      	movs	r3, #0
 80199b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            last_dest_color.full = dest_buf[0].full;
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	781b      	ldrb	r3, [r3, #0]
 80199c0:	763b      	strb	r3, [r7, #24]
            last_res_color.full = dest_buf[0].full;
 80199c2:	68fb      	ldr	r3, [r7, #12]
 80199c4:	781b      	ldrb	r3, [r3, #0]
 80199c6:	753b      	strb	r3, [r7, #20]
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 80199c8:	2300      	movs	r3, #0
 80199ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            for(y = 0; y < h; y++) {
 80199ce:	2300      	movs	r3, #0
 80199d0:	643b      	str	r3, [r7, #64]	; 0x40
 80199d2:	e065      	b.n	8019aa0 <fill_normal+0x3f0>
                for(x = 0; x < w; x++) {
 80199d4:	2300      	movs	r3, #0
 80199d6:	647b      	str	r3, [r7, #68]	; 0x44
 80199d8:	e04e      	b.n	8019a78 <fill_normal+0x3c8>
                    if(*mask) {
 80199da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80199dc:	781b      	ldrb	r3, [r3, #0]
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d044      	beq.n	8019a6c <fill_normal+0x3bc>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 80199e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80199e4:	781b      	ldrb	r3, [r3, #0]
 80199e6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80199ea:	429a      	cmp	r2, r3
 80199ec:	d011      	beq.n	8019a12 <fill_normal+0x362>
 80199ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80199f0:	781b      	ldrb	r3, [r3, #0]
 80199f2:	2bff      	cmp	r3, #255	; 0xff
 80199f4:	d009      	beq.n	8019a0a <fill_normal+0x35a>
                                                             (uint32_t)((uint32_t)(*mask) * opa) >> 8;
 80199f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80199f8:	781b      	ldrb	r3, [r3, #0]
 80199fa:	461a      	mov	r2, r3
 80199fc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8019a00:	fb02 f303 	mul.w	r3, r2, r3
 8019a04:	0a1b      	lsrs	r3, r3, #8
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 8019a06:	b2db      	uxtb	r3, r3
 8019a08:	e001      	b.n	8019a0e <fill_normal+0x35e>
 8019a0a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8019a0e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 8019a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a14:	781b      	ldrb	r3, [r3, #0]
 8019a16:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8019a1a:	429a      	cmp	r2, r3
 8019a1c:	d106      	bne.n	8019a2c <fill_normal+0x37c>
 8019a1e:	7e3a      	ldrb	r2, [r7, #24]
 8019a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a22:	68f9      	ldr	r1, [r7, #12]
 8019a24:	440b      	add	r3, r1
 8019a26:	781b      	ldrb	r3, [r3, #0]
 8019a28:	429a      	cmp	r2, r3
 8019a2a:	d01a      	beq.n	8019a62 <fill_normal+0x3b2>
                            if(opa_tmp == LV_OPA_COVER) last_res_color = color;
 8019a2c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8019a30:	2bff      	cmp	r3, #255	; 0xff
 8019a32:	d102      	bne.n	8019a3a <fill_normal+0x38a>
 8019a34:	793b      	ldrb	r3, [r7, #4]
 8019a36:	753b      	strb	r3, [r7, #20]
 8019a38:	e00a      	b.n	8019a50 <fill_normal+0x3a0>
                            else last_res_color = lv_color_mix(color, dest_buf[x], opa_tmp);
 8019a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a3c:	68fa      	ldr	r2, [r7, #12]
 8019a3e:	4413      	add	r3, r2
 8019a40:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8019a44:	7819      	ldrb	r1, [r3, #0]
 8019a46:	7938      	ldrb	r0, [r7, #4]
 8019a48:	f7ff fafd 	bl	8019046 <lv_color_mix>
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	753b      	strb	r3, [r7, #20]
                            last_mask = *mask;
 8019a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a52:	781b      	ldrb	r3, [r3, #0]
 8019a54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                            last_dest_color.full = dest_buf[x].full;
 8019a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a5a:	68fa      	ldr	r2, [r7, #12]
 8019a5c:	4413      	add	r3, r2
 8019a5e:	781b      	ldrb	r3, [r3, #0]
 8019a60:	763b      	strb	r3, [r7, #24]
                        dest_buf[x] = last_res_color;
 8019a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a64:	68fa      	ldr	r2, [r7, #12]
 8019a66:	4413      	add	r3, r2
 8019a68:	7d3a      	ldrb	r2, [r7, #20]
 8019a6a:	701a      	strb	r2, [r3, #0]
                    mask++;
 8019a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a6e:	3301      	adds	r3, #1
 8019a70:	657b      	str	r3, [r7, #84]	; 0x54
                for(x = 0; x < w; x++) {
 8019a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019a74:	3301      	adds	r3, #1
 8019a76:	647b      	str	r3, [r7, #68]	; 0x44
 8019a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a7c:	429a      	cmp	r2, r3
 8019a7e:	dbac      	blt.n	80199da <fill_normal+0x32a>
                dest_buf += dest_stride;
 8019a80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019a84:	68fa      	ldr	r2, [r7, #12]
 8019a86:	4413      	add	r3, r2
 8019a88:	60fb      	str	r3, [r7, #12]
                mask += (mask_stride - w);
 8019a8a:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8019a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a90:	1ad3      	subs	r3, r2, r3
 8019a92:	461a      	mov	r2, r3
 8019a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019a96:	4413      	add	r3, r2
 8019a98:	657b      	str	r3, [r7, #84]	; 0x54
            for(y = 0; y < h; y++) {
 8019a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a9c:	3301      	adds	r3, #1
 8019a9e:	643b      	str	r3, [r7, #64]	; 0x40
 8019aa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019aa4:	429a      	cmp	r2, r3
 8019aa6:	db95      	blt.n	80199d4 <fill_normal+0x324>
}
 8019aa8:	bf00      	nop
 8019aaa:	3748      	adds	r7, #72	; 0x48
 8019aac:	46bd      	mov	sp, r7
 8019aae:	bd80      	pop	{r7, pc}

08019ab0 <fill_blended>:

#if LV_DRAW_COMPLEX
static void fill_blended(lv_color_t * dest_buf, const lv_area_t * dest_area,
                         lv_coord_t dest_stride, lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride,
                         lv_blend_mode_t blend_mode)
{
 8019ab0:	b580      	push	{r7, lr}
 8019ab2:	b08e      	sub	sp, #56	; 0x38
 8019ab4:	af00      	add	r7, sp, #0
 8019ab6:	60f8      	str	r0, [r7, #12]
 8019ab8:	60b9      	str	r1, [r7, #8]
 8019aba:	713b      	strb	r3, [r7, #4]
 8019abc:	4613      	mov	r3, r2
 8019abe:	80fb      	strh	r3, [r7, #6]

    int32_t w = lv_area_get_width(dest_area);
 8019ac0:	68b8      	ldr	r0, [r7, #8]
 8019ac2:	f7ff fb53 	bl	801916c <lv_area_get_width>
 8019ac6:	4603      	mov	r3, r0
 8019ac8:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h = lv_area_get_height(dest_area);
 8019aca:	68b8      	ldr	r0, [r7, #8]
 8019acc:	f7ff fb65 	bl	801919a <lv_area_get_height>
 8019ad0:	4603      	mov	r3, r0
 8019ad2:	623b      	str	r3, [r7, #32]

    int32_t x;
    int32_t y;

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(blend_mode) {
 8019ad4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8019ad8:	2b03      	cmp	r3, #3
 8019ada:	d00d      	beq.n	8019af8 <fill_blended+0x48>
 8019adc:	2b03      	cmp	r3, #3
 8019ade:	f300 80d6 	bgt.w	8019c8e <fill_blended+0x1de>
 8019ae2:	2b01      	cmp	r3, #1
 8019ae4:	d002      	beq.n	8019aec <fill_blended+0x3c>
 8019ae6:	2b02      	cmp	r3, #2
 8019ae8:	d003      	beq.n	8019af2 <fill_blended+0x42>
        case LV_BLEND_MODE_MULTIPLY:
            blend_fp = color_blend_true_color_multiply;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 8019aea:	e0d0      	b.n	8019c8e <fill_blended+0x1de>
            blend_fp = color_blend_true_color_additive;
 8019aec:	4b6a      	ldr	r3, [pc, #424]	; (8019c98 <fill_blended+0x1e8>)
 8019aee:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8019af0:	e005      	b.n	8019afe <fill_blended+0x4e>
            blend_fp = color_blend_true_color_subtractive;
 8019af2:	4b6a      	ldr	r3, [pc, #424]	; (8019c9c <fill_blended+0x1ec>)
 8019af4:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8019af6:	e002      	b.n	8019afe <fill_blended+0x4e>
            blend_fp = color_blend_true_color_multiply;
 8019af8:	4b69      	ldr	r3, [pc, #420]	; (8019ca0 <fill_blended+0x1f0>)
 8019afa:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8019afc:	bf00      	nop
    }

    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 8019afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d141      	bne.n	8019b88 <fill_blended+0xd8>
        lv_color_t last_dest_color = dest_buf[0];
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	781b      	ldrb	r3, [r3, #0]
 8019b08:	773b      	strb	r3, [r7, #28]
        lv_color_t last_res_color = blend_fp(color, dest_buf[0], opa);
 8019b0a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8019b0e:	68f9      	ldr	r1, [r7, #12]
 8019b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b12:	7809      	ldrb	r1, [r1, #0]
 8019b14:	7938      	ldrb	r0, [r7, #4]
 8019b16:	4798      	blx	r3
 8019b18:	4603      	mov	r3, r0
 8019b1a:	763b      	strb	r3, [r7, #24]
        for(y = 0; y < h; y++) {
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8019b20:	e02d      	b.n	8019b7e <fill_blended+0xce>
            for(x = 0; x < w; x++) {
 8019b22:	2300      	movs	r3, #0
 8019b24:	637b      	str	r3, [r7, #52]	; 0x34
 8019b26:	e01e      	b.n	8019b66 <fill_blended+0xb6>
                if(last_dest_color.full != dest_buf[x].full) {
 8019b28:	7f3a      	ldrb	r2, [r7, #28]
 8019b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b2c:	68f9      	ldr	r1, [r7, #12]
 8019b2e:	440b      	add	r3, r1
 8019b30:	781b      	ldrb	r3, [r3, #0]
 8019b32:	429a      	cmp	r2, r3
 8019b34:	d00f      	beq.n	8019b56 <fill_blended+0xa6>
                    last_dest_color = dest_buf[x];
 8019b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b38:	68fa      	ldr	r2, [r7, #12]
 8019b3a:	4413      	add	r3, r2
 8019b3c:	781b      	ldrb	r3, [r3, #0]
 8019b3e:	773b      	strb	r3, [r7, #28]
                    last_res_color = blend_fp(color, dest_buf[x], opa);
 8019b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b42:	68fa      	ldr	r2, [r7, #12]
 8019b44:	18d1      	adds	r1, r2, r3
 8019b46:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8019b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b4c:	7809      	ldrb	r1, [r1, #0]
 8019b4e:	7938      	ldrb	r0, [r7, #4]
 8019b50:	4798      	blx	r3
 8019b52:	4603      	mov	r3, r0
 8019b54:	763b      	strb	r3, [r7, #24]
                }
                dest_buf[x] = last_res_color;
 8019b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b58:	68fa      	ldr	r2, [r7, #12]
 8019b5a:	4413      	add	r3, r2
 8019b5c:	7e3a      	ldrb	r2, [r7, #24]
 8019b5e:	701a      	strb	r2, [r3, #0]
            for(x = 0; x < w; x++) {
 8019b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b62:	3301      	adds	r3, #1
 8019b64:	637b      	str	r3, [r7, #52]	; 0x34
 8019b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b6a:	429a      	cmp	r2, r3
 8019b6c:	dbdc      	blt.n	8019b28 <fill_blended+0x78>
            }
            dest_buf += dest_stride;
 8019b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019b72:	68fa      	ldr	r2, [r7, #12]
 8019b74:	4413      	add	r3, r2
 8019b76:	60fb      	str	r3, [r7, #12]
        for(y = 0; y < h; y++) {
 8019b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b7a:	3301      	adds	r3, #1
 8019b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8019b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019b80:	6a3b      	ldr	r3, [r7, #32]
 8019b82:	429a      	cmp	r2, r3
 8019b84:	dbcd      	blt.n	8019b22 <fill_blended+0x72>
 8019b86:	e083      	b.n	8019c90 <fill_blended+0x1e0>
    /*Masked*/
    else {
        /*Buffer the result color to avoid recalculating the same color*/
        lv_color_t last_dest_color;
        lv_color_t last_res_color;
        lv_opa_t last_mask = LV_OPA_TRANSP;
 8019b88:	2300      	movs	r3, #0
 8019b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        last_dest_color = dest_buf[0];
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	781b      	ldrb	r3, [r3, #0]
 8019b92:	753b      	strb	r3, [r7, #20]
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 8019b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b96:	781b      	ldrb	r3, [r3, #0]
 8019b98:	2bfc      	cmp	r3, #252	; 0xfc
 8019b9a:	d809      	bhi.n	8019bb0 <fill_blended+0x100>
 8019b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019b9e:	781b      	ldrb	r3, [r3, #0]
 8019ba0:	461a      	mov	r2, r3
 8019ba2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8019ba6:	fb02 f303 	mul.w	r3, r2, r3
 8019baa:	0a1b      	lsrs	r3, r3, #8
 8019bac:	b2db      	uxtb	r3, r3
 8019bae:	e001      	b.n	8019bb4 <fill_blended+0x104>
 8019bb0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8019bb4:	77fb      	strb	r3, [r7, #31]
        last_res_color = blend_fp(color, last_dest_color, opa_tmp);
 8019bb6:	7ffa      	ldrb	r2, [r7, #31]
 8019bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bba:	7d39      	ldrb	r1, [r7, #20]
 8019bbc:	7938      	ldrb	r0, [r7, #4]
 8019bbe:	4798      	blx	r3
 8019bc0:	4603      	mov	r3, r0
 8019bc2:	743b      	strb	r3, [r7, #16]

        for(y = 0; y < h; y++) {
 8019bc4:	2300      	movs	r3, #0
 8019bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8019bc8:	e05c      	b.n	8019c84 <fill_blended+0x1d4>
            for(x = 0; x < w; x++) {
 8019bca:	2300      	movs	r3, #0
 8019bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8019bce:	e048      	b.n	8019c62 <fill_blended+0x1b2>
                if(mask[x] == 0) continue;
 8019bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019bd4:	4413      	add	r3, r2
 8019bd6:	781b      	ldrb	r3, [r3, #0]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d03e      	beq.n	8019c5a <fill_blended+0x1aa>
                if(mask[x] != last_mask || last_dest_color.full != dest_buf[x].full) {
 8019bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019bde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019be0:	4413      	add	r3, r2
 8019be2:	781b      	ldrb	r3, [r3, #0]
 8019be4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8019be8:	429a      	cmp	r2, r3
 8019bea:	d106      	bne.n	8019bfa <fill_blended+0x14a>
 8019bec:	7d3a      	ldrb	r2, [r7, #20]
 8019bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019bf0:	68f9      	ldr	r1, [r7, #12]
 8019bf2:	440b      	add	r3, r1
 8019bf4:	781b      	ldrb	r3, [r3, #0]
 8019bf6:	429a      	cmp	r2, r3
 8019bf8:	d029      	beq.n	8019c4e <fill_blended+0x19e>
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 8019bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019bfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019bfe:	4413      	add	r3, r2
 8019c00:	781b      	ldrb	r3, [r3, #0]
 8019c02:	2bfc      	cmp	r3, #252	; 0xfc
 8019c04:	d80b      	bhi.n	8019c1e <fill_blended+0x16e>
 8019c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019c0a:	4413      	add	r3, r2
 8019c0c:	781b      	ldrb	r3, [r3, #0]
 8019c0e:	461a      	mov	r2, r3
 8019c10:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8019c14:	fb02 f303 	mul.w	r3, r2, r3
 8019c18:	0a1b      	lsrs	r3, r3, #8
 8019c1a:	b2db      	uxtb	r3, r3
 8019c1c:	e001      	b.n	8019c22 <fill_blended+0x172>
 8019c1e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8019c22:	77fb      	strb	r3, [r7, #31]

                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 8019c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c26:	68fa      	ldr	r2, [r7, #12]
 8019c28:	18d1      	adds	r1, r2, r3
 8019c2a:	7ffa      	ldrb	r2, [r7, #31]
 8019c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c2e:	7809      	ldrb	r1, [r1, #0]
 8019c30:	7938      	ldrb	r0, [r7, #4]
 8019c32:	4798      	blx	r3
 8019c34:	4603      	mov	r3, r0
 8019c36:	743b      	strb	r3, [r7, #16]
                    last_mask = mask[x];
 8019c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019c3c:	4413      	add	r3, r2
 8019c3e:	781b      	ldrb	r3, [r3, #0]
 8019c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    last_dest_color.full = dest_buf[x].full;
 8019c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c46:	68fa      	ldr	r2, [r7, #12]
 8019c48:	4413      	add	r3, r2
 8019c4a:	781b      	ldrb	r3, [r3, #0]
 8019c4c:	753b      	strb	r3, [r7, #20]
                }
                dest_buf[x] = last_res_color;
 8019c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c50:	68fa      	ldr	r2, [r7, #12]
 8019c52:	4413      	add	r3, r2
 8019c54:	7c3a      	ldrb	r2, [r7, #16]
 8019c56:	701a      	strb	r2, [r3, #0]
 8019c58:	e000      	b.n	8019c5c <fill_blended+0x1ac>
                if(mask[x] == 0) continue;
 8019c5a:	bf00      	nop
            for(x = 0; x < w; x++) {
 8019c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c5e:	3301      	adds	r3, #1
 8019c60:	637b      	str	r3, [r7, #52]	; 0x34
 8019c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c66:	429a      	cmp	r2, r3
 8019c68:	dbb2      	blt.n	8019bd0 <fill_blended+0x120>
            }
            dest_buf += dest_stride;
 8019c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019c6e:	68fa      	ldr	r2, [r7, #12]
 8019c70:	4413      	add	r3, r2
 8019c72:	60fb      	str	r3, [r7, #12]
            mask += mask_stride;
 8019c74:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8019c78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019c7a:	4413      	add	r3, r2
 8019c7c:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < h; y++) {
 8019c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c80:	3301      	adds	r3, #1
 8019c82:	633b      	str	r3, [r7, #48]	; 0x30
 8019c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019c86:	6a3b      	ldr	r3, [r7, #32]
 8019c88:	429a      	cmp	r2, r3
 8019c8a:	db9e      	blt.n	8019bca <fill_blended+0x11a>
 8019c8c:	e000      	b.n	8019c90 <fill_blended+0x1e0>
            return;
 8019c8e:	bf00      	nop
        }
    }
}
 8019c90:	3738      	adds	r7, #56	; 0x38
 8019c92:	46bd      	mov	sp, r7
 8019c94:	bd80      	pop	{r7, pc}
 8019c96:	bf00      	nop
 8019c98:	0801a47d 	.word	0x0801a47d
 8019c9c:	0801a4cd 	.word	0x0801a4cd
 8019ca0:	0801a583 	.word	0x0801a583

08019ca4 <map_set_px>:
#endif

static void map_set_px(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                       const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
 8019ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ca6:	b08f      	sub	sp, #60	; 0x3c
 8019ca8:	af04      	add	r7, sp, #16
 8019caa:	60f8      	str	r0, [r7, #12]
 8019cac:	60b9      	str	r1, [r7, #8]
 8019cae:	603b      	str	r3, [r7, #0]
 8019cb0:	4613      	mov	r3, r2
 8019cb2:	80fb      	strh	r3, [r7, #6]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8019cb4:	f7f6 fdae 	bl	8010814 <_lv_refr_get_disp_refreshing>
 8019cb8:	61f8      	str	r0, [r7, #28]

    int32_t w = lv_area_get_width(dest_area);
 8019cba:	68b8      	ldr	r0, [r7, #8]
 8019cbc:	f7ff fa56 	bl	801916c <lv_area_get_width>
 8019cc0:	4603      	mov	r3, r0
 8019cc2:	61bb      	str	r3, [r7, #24]
    int32_t h = lv_area_get_height(dest_area);
 8019cc4:	68b8      	ldr	r0, [r7, #8]
 8019cc6:	f7ff fa68 	bl	801919a <lv_area_get_height>
 8019cca:	4603      	mov	r3, r0
 8019ccc:	617b      	str	r3, [r7, #20]

    int32_t x;
    int32_t y;

    if(mask == NULL) {
 8019cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d140      	bne.n	8019d56 <map_set_px+0xb2>
        for(y = 0; y < h; y++) {
 8019cd4:	2300      	movs	r3, #0
 8019cd6:	623b      	str	r3, [r7, #32]
 8019cd8:	e038      	b.n	8019d4c <map_set_px+0xa8>
            for(x = 0; x < w; x++) {
 8019cda:	2300      	movs	r3, #0
 8019cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8019cde:	e029      	b.n	8019d34 <map_set_px+0x90>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8019ce0:	69fb      	ldr	r3, [r7, #28]
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	69dc      	ldr	r4, [r3, #28]
 8019ce6:	69fb      	ldr	r3, [r7, #28]
 8019ce8:	6818      	ldr	r0, [r3, #0]
 8019cea:	68bb      	ldr	r3, [r7, #8]
 8019cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019cf0:	b29a      	uxth	r2, r3
 8019cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cf4:	b29b      	uxth	r3, r3
 8019cf6:	4413      	add	r3, r2
 8019cf8:	b29b      	uxth	r3, r3
 8019cfa:	b21e      	sxth	r6, r3
 8019cfc:	68bb      	ldr	r3, [r7, #8]
 8019cfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019d02:	b29a      	uxth	r2, r3
 8019d04:	6a3b      	ldr	r3, [r7, #32]
 8019d06:	b29b      	uxth	r3, r3
 8019d08:	4413      	add	r3, r2
 8019d0a:	b29b      	uxth	r3, r3
 8019d0c:	b21b      	sxth	r3, r3
 8019d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d10:	6839      	ldr	r1, [r7, #0]
 8019d12:	440a      	add	r2, r1
 8019d14:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 8019d18:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8019d1c:	9102      	str	r1, [sp, #8]
 8019d1e:	7812      	ldrb	r2, [r2, #0]
 8019d20:	f88d 2004 	strb.w	r2, [sp, #4]
 8019d24:	9300      	str	r3, [sp, #0]
 8019d26:	4633      	mov	r3, r6
 8019d28:	462a      	mov	r2, r5
 8019d2a:	68f9      	ldr	r1, [r7, #12]
 8019d2c:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 8019d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d30:	3301      	adds	r3, #1
 8019d32:	627b      	str	r3, [r7, #36]	; 0x24
 8019d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d36:	69bb      	ldr	r3, [r7, #24]
 8019d38:	429a      	cmp	r2, r3
 8019d3a:	dbd1      	blt.n	8019ce0 <map_set_px+0x3c>
                                        opa);
            }
            src_buf += src_stride;
 8019d3c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8019d40:	683a      	ldr	r2, [r7, #0]
 8019d42:	4413      	add	r3, r2
 8019d44:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 8019d46:	6a3b      	ldr	r3, [r7, #32]
 8019d48:	3301      	adds	r3, #1
 8019d4a:	623b      	str	r3, [r7, #32]
 8019d4c:	6a3a      	ldr	r2, [r7, #32]
 8019d4e:	697b      	ldr	r3, [r7, #20]
 8019d50:	429a      	cmp	r2, r3
 8019d52:	dbc2      	blt.n	8019cda <map_set_px+0x36>
            }
            mask += mask_stride;
            src_buf += src_stride;
        }
    }
}
 8019d54:	e054      	b.n	8019e00 <map_set_px+0x15c>
        for(y = 0; y < h; y++) {
 8019d56:	2300      	movs	r3, #0
 8019d58:	623b      	str	r3, [r7, #32]
 8019d5a:	e04d      	b.n	8019df8 <map_set_px+0x154>
            for(x = 0; x < w; x++) {
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8019d60:	e039      	b.n	8019dd6 <map_set_px+0x132>
                if(mask[x]) {
 8019d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019d66:	4413      	add	r3, r2
 8019d68:	781b      	ldrb	r3, [r3, #0]
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d030      	beq.n	8019dd0 <map_set_px+0x12c>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8019d6e:	69fb      	ldr	r3, [r7, #28]
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	69dc      	ldr	r4, [r3, #28]
 8019d74:	69fb      	ldr	r3, [r7, #28]
 8019d76:	681e      	ldr	r6, [r3, #0]
 8019d78:	68bb      	ldr	r3, [r7, #8]
 8019d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019d7e:	b29a      	uxth	r2, r3
 8019d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d82:	b29b      	uxth	r3, r3
 8019d84:	4413      	add	r3, r2
 8019d86:	b29b      	uxth	r3, r3
 8019d88:	fa0f fc83 	sxth.w	ip, r3
 8019d8c:	68bb      	ldr	r3, [r7, #8]
 8019d8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019d92:	b29a      	uxth	r2, r3
 8019d94:	6a3b      	ldr	r3, [r7, #32]
 8019d96:	b29b      	uxth	r3, r3
 8019d98:	4413      	add	r3, r2
 8019d9a:	b29b      	uxth	r3, r3
 8019d9c:	b21b      	sxth	r3, r3
 8019d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019da0:	6839      	ldr	r1, [r7, #0]
 8019da2:	440a      	add	r2, r1
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8019da4:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8019da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019daa:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8019dac:	4428      	add	r0, r5
 8019dae:	7800      	ldrb	r0, [r0, #0]
 8019db0:	fb00 f101 	mul.w	r1, r0, r1
 8019db4:	0a09      	lsrs	r1, r1, #8
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8019db6:	b2c9      	uxtb	r1, r1
 8019db8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8019dbc:	9102      	str	r1, [sp, #8]
 8019dbe:	7812      	ldrb	r2, [r2, #0]
 8019dc0:	f88d 2004 	strb.w	r2, [sp, #4]
 8019dc4:	9300      	str	r3, [sp, #0]
 8019dc6:	4663      	mov	r3, ip
 8019dc8:	4602      	mov	r2, r0
 8019dca:	68f9      	ldr	r1, [r7, #12]
 8019dcc:	4630      	mov	r0, r6
 8019dce:	47a0      	blx	r4
            for(x = 0; x < w; x++) {
 8019dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dd2:	3301      	adds	r3, #1
 8019dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8019dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019dd8:	69bb      	ldr	r3, [r7, #24]
 8019dda:	429a      	cmp	r2, r3
 8019ddc:	dbc1      	blt.n	8019d62 <map_set_px+0xbe>
            mask += mask_stride;
 8019dde:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8019de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019de4:	4413      	add	r3, r2
 8019de6:	64bb      	str	r3, [r7, #72]	; 0x48
            src_buf += src_stride;
 8019de8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8019dec:	683a      	ldr	r2, [r7, #0]
 8019dee:	4413      	add	r3, r2
 8019df0:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 8019df2:	6a3b      	ldr	r3, [r7, #32]
 8019df4:	3301      	adds	r3, #1
 8019df6:	623b      	str	r3, [r7, #32]
 8019df8:	6a3a      	ldr	r2, [r7, #32]
 8019dfa:	697b      	ldr	r3, [r7, #20]
 8019dfc:	429a      	cmp	r2, r3
 8019dfe:	dbad      	blt.n	8019d5c <map_set_px+0xb8>
}
 8019e00:	bf00      	nop
 8019e02:	372c      	adds	r7, #44	; 0x2c
 8019e04:	46bd      	mov	sp, r7
 8019e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019e08 <map_normal>:

LV_ATTRIBUTE_FAST_MEM static void map_normal(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                                             const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)

{
 8019e08:	b5b0      	push	{r4, r5, r7, lr}
 8019e0a:	b08c      	sub	sp, #48	; 0x30
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	60f8      	str	r0, [r7, #12]
 8019e10:	60b9      	str	r1, [r7, #8]
 8019e12:	603b      	str	r3, [r7, #0]
 8019e14:	4613      	mov	r3, r2
 8019e16:	80fb      	strh	r3, [r7, #6]
    int32_t w = lv_area_get_width(dest_area);
 8019e18:	68b8      	ldr	r0, [r7, #8]
 8019e1a:	f7ff f9a7 	bl	801916c <lv_area_get_width>
 8019e1e:	4603      	mov	r3, r0
 8019e20:	61fb      	str	r3, [r7, #28]
    int32_t h = lv_area_get_height(dest_area);
 8019e22:	68b8      	ldr	r0, [r7, #8]
 8019e24:	f7ff f9b9 	bl	801919a <lv_area_get_height>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	61bb      	str	r3, [r7, #24]

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 8019e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d14e      	bne.n	8019ed0 <map_normal+0xc8>
        if(opa >= LV_OPA_MAX) {
 8019e32:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019e36:	2bfc      	cmp	r3, #252	; 0xfc
 8019e38:	d91a      	bls.n	8019e70 <map_normal+0x68>
            for(y = 0; y < h; y++) {
 8019e3a:	2300      	movs	r3, #0
 8019e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8019e3e:	e012      	b.n	8019e66 <map_normal+0x5e>
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 8019e40:	69fb      	ldr	r3, [r7, #28]
 8019e42:	461a      	mov	r2, r3
 8019e44:	6839      	ldr	r1, [r7, #0]
 8019e46:	68f8      	ldr	r0, [r7, #12]
 8019e48:	f00a f9e2 	bl	8024210 <lv_memcpy>
                dest_buf += dest_stride;
 8019e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019e50:	68fa      	ldr	r2, [r7, #12]
 8019e52:	4413      	add	r3, r2
 8019e54:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8019e56:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8019e5a:	683a      	ldr	r2, [r7, #0]
 8019e5c:	4413      	add	r3, r2
 8019e5e:	603b      	str	r3, [r7, #0]
            for(y = 0; y < h; y++) {
 8019e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e62:	3301      	adds	r3, #1
 8019e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8019e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019e68:	69bb      	ldr	r3, [r7, #24]
 8019e6a:	429a      	cmp	r2, r3
 8019e6c:	dbe8      	blt.n	8019e40 <map_normal+0x38>
                src_buf += src_stride;
                mask += mask_stride;
            }
        }
    }
}
 8019e6e:	e1ee      	b.n	801a24e <map_normal+0x446>
            for(y = 0; y < h; y++) {
 8019e70:	2300      	movs	r3, #0
 8019e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8019e74:	e027      	b.n	8019ec6 <map_normal+0xbe>
                for(x = 0; x < w; x++) {
 8019e76:	2300      	movs	r3, #0
 8019e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019e7a:	e013      	b.n	8019ea4 <map_normal+0x9c>
                    dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa);
 8019e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e7e:	683a      	ldr	r2, [r7, #0]
 8019e80:	4413      	add	r3, r2
 8019e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019e84:	68f9      	ldr	r1, [r7, #12]
 8019e86:	4411      	add	r1, r2
 8019e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019e8a:	68f8      	ldr	r0, [r7, #12]
 8019e8c:	1884      	adds	r4, r0, r2
 8019e8e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8019e92:	7809      	ldrb	r1, [r1, #0]
 8019e94:	7818      	ldrb	r0, [r3, #0]
 8019e96:	f7ff f8d6 	bl	8019046 <lv_color_mix>
 8019e9a:	4603      	mov	r3, r0
 8019e9c:	7023      	strb	r3, [r4, #0]
                for(x = 0; x < w; x++) {
 8019e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ea0:	3301      	adds	r3, #1
 8019ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019ea6:	69fb      	ldr	r3, [r7, #28]
 8019ea8:	429a      	cmp	r2, r3
 8019eaa:	dbe7      	blt.n	8019e7c <map_normal+0x74>
                dest_buf += dest_stride;
 8019eac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019eb0:	68fa      	ldr	r2, [r7, #12]
 8019eb2:	4413      	add	r3, r2
 8019eb4:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 8019eb6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8019eba:	683a      	ldr	r2, [r7, #0]
 8019ebc:	4413      	add	r3, r2
 8019ebe:	603b      	str	r3, [r7, #0]
            for(y = 0; y < h; y++) {
 8019ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ec2:	3301      	adds	r3, #1
 8019ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8019ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ec8:	69bb      	ldr	r3, [r7, #24]
 8019eca:	429a      	cmp	r2, r3
 8019ecc:	dbd3      	blt.n	8019e76 <map_normal+0x6e>
}
 8019ece:	e1be      	b.n	801a24e <map_normal+0x446>
        if(opa > LV_OPA_MAX) {
 8019ed0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019ed4:	2bfd      	cmp	r3, #253	; 0xfd
 8019ed6:	f240 816d 	bls.w	801a1b4 <map_normal+0x3ac>
            int32_t x_end4 = w - 4;
 8019eda:	69fb      	ldr	r3, [r7, #28]
 8019edc:	3b04      	subs	r3, #4
 8019ede:	613b      	str	r3, [r7, #16]
            for(y = 0; y < h; y++) {
 8019ee0:	2300      	movs	r3, #0
 8019ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8019ee4:	e160      	b.n	801a1a8 <map_normal+0x3a0>
                const lv_opa_t * mask_tmp_x = mask;
 8019ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019ee8:	627b      	str	r3, [r7, #36]	; 0x24
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8019eea:	2300      	movs	r3, #0
 8019eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019eee:	e028      	b.n	8019f42 <map_normal+0x13a>
                    MAP_NORMAL_MASK_PX(x)
 8019ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ef2:	781b      	ldrb	r3, [r3, #0]
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d01e      	beq.n	8019f36 <map_normal+0x12e>
 8019ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019efa:	781b      	ldrb	r3, [r3, #0]
 8019efc:	2bff      	cmp	r3, #255	; 0xff
 8019efe:	d108      	bne.n	8019f12 <map_normal+0x10a>
 8019f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f02:	683a      	ldr	r2, [r7, #0]
 8019f04:	441a      	add	r2, r3
 8019f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f08:	68f9      	ldr	r1, [r7, #12]
 8019f0a:	440b      	add	r3, r1
 8019f0c:	7812      	ldrb	r2, [r2, #0]
 8019f0e:	701a      	strb	r2, [r3, #0]
 8019f10:	e011      	b.n	8019f36 <map_normal+0x12e>
 8019f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f14:	683a      	ldr	r2, [r7, #0]
 8019f16:	4413      	add	r3, r2
 8019f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f1a:	68f9      	ldr	r1, [r7, #12]
 8019f1c:	4411      	add	r1, r2
 8019f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f20:	7815      	ldrb	r5, [r2, #0]
 8019f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f24:	68f8      	ldr	r0, [r7, #12]
 8019f26:	1884      	adds	r4, r0, r2
 8019f28:	462a      	mov	r2, r5
 8019f2a:	7809      	ldrb	r1, [r1, #0]
 8019f2c:	7818      	ldrb	r0, [r3, #0]
 8019f2e:	f7ff f88a 	bl	8019046 <lv_color_mix>
 8019f32:	4603      	mov	r3, r0
 8019f34:	7023      	strb	r3, [r4, #0]
 8019f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f38:	3301      	adds	r3, #1
 8019f3a:	627b      	str	r3, [r7, #36]	; 0x24
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8019f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f3e:	3301      	adds	r3, #1
 8019f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f44:	69fb      	ldr	r3, [r7, #28]
 8019f46:	429a      	cmp	r2, r3
 8019f48:	da04      	bge.n	8019f54 <map_normal+0x14c>
 8019f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f4c:	f003 0303 	and.w	r3, r3, #3
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d1cd      	bne.n	8019ef0 <map_normal+0xe8>
                uint32_t * mask32 = (uint32_t *)mask_tmp_x;
 8019f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f56:	623b      	str	r3, [r7, #32]
                for(; x < x_end4; x += 4) {
 8019f58:	e0df      	b.n	801a11a <map_normal+0x312>
                    if(*mask32) {
 8019f5a:	6a3b      	ldr	r3, [r7, #32]
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	f000 80d5 	beq.w	801a10e <map_normal+0x306>
                        if((*mask32) == 0xFFFFFFFF) {
 8019f64:	6a3b      	ldr	r3, [r7, #32]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019f6c:	d126      	bne.n	8019fbc <map_normal+0x1b4>
                            dest_buf[x] = src_buf[x];
 8019f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f70:	683a      	ldr	r2, [r7, #0]
 8019f72:	441a      	add	r2, r3
 8019f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f76:	68f9      	ldr	r1, [r7, #12]
 8019f78:	440b      	add	r3, r1
 8019f7a:	7812      	ldrb	r2, [r2, #0]
 8019f7c:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 1] = src_buf[x + 1];
 8019f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f80:	3301      	adds	r3, #1
 8019f82:	683a      	ldr	r2, [r7, #0]
 8019f84:	441a      	add	r2, r3
 8019f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f88:	3301      	adds	r3, #1
 8019f8a:	68f9      	ldr	r1, [r7, #12]
 8019f8c:	440b      	add	r3, r1
 8019f8e:	7812      	ldrb	r2, [r2, #0]
 8019f90:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 2] = src_buf[x + 2];
 8019f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f94:	3302      	adds	r3, #2
 8019f96:	683a      	ldr	r2, [r7, #0]
 8019f98:	441a      	add	r2, r3
 8019f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f9c:	3302      	adds	r3, #2
 8019f9e:	68f9      	ldr	r1, [r7, #12]
 8019fa0:	440b      	add	r3, r1
 8019fa2:	7812      	ldrb	r2, [r2, #0]
 8019fa4:	701a      	strb	r2, [r3, #0]
                            dest_buf[x + 3] = src_buf[x + 3];
 8019fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fa8:	3303      	adds	r3, #3
 8019faa:	683a      	ldr	r2, [r7, #0]
 8019fac:	441a      	add	r2, r3
 8019fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fb0:	3303      	adds	r3, #3
 8019fb2:	68f9      	ldr	r1, [r7, #12]
 8019fb4:	440b      	add	r3, r1
 8019fb6:	7812      	ldrb	r2, [r2, #0]
 8019fb8:	701a      	strb	r2, [r3, #0]
 8019fba:	e0a8      	b.n	801a10e <map_normal+0x306>
                            mask_tmp_x = (const lv_opa_t *)mask32;
 8019fbc:	6a3b      	ldr	r3, [r7, #32]
 8019fbe:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x)
 8019fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fc2:	781b      	ldrb	r3, [r3, #0]
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d01e      	beq.n	801a006 <map_normal+0x1fe>
 8019fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fca:	781b      	ldrb	r3, [r3, #0]
 8019fcc:	2bff      	cmp	r3, #255	; 0xff
 8019fce:	d108      	bne.n	8019fe2 <map_normal+0x1da>
 8019fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fd2:	683a      	ldr	r2, [r7, #0]
 8019fd4:	441a      	add	r2, r3
 8019fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fd8:	68f9      	ldr	r1, [r7, #12]
 8019fda:	440b      	add	r3, r1
 8019fdc:	7812      	ldrb	r2, [r2, #0]
 8019fde:	701a      	strb	r2, [r3, #0]
 8019fe0:	e011      	b.n	801a006 <map_normal+0x1fe>
 8019fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fe4:	683a      	ldr	r2, [r7, #0]
 8019fe6:	4413      	add	r3, r2
 8019fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fea:	68f9      	ldr	r1, [r7, #12]
 8019fec:	4411      	add	r1, r2
 8019fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ff0:	7815      	ldrb	r5, [r2, #0]
 8019ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019ff4:	68f8      	ldr	r0, [r7, #12]
 8019ff6:	1884      	adds	r4, r0, r2
 8019ff8:	462a      	mov	r2, r5
 8019ffa:	7809      	ldrb	r1, [r1, #0]
 8019ffc:	7818      	ldrb	r0, [r3, #0]
 8019ffe:	f7ff f822 	bl	8019046 <lv_color_mix>
 801a002:	4603      	mov	r3, r0
 801a004:	7023      	strb	r3, [r4, #0]
 801a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a008:	3301      	adds	r3, #1
 801a00a:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 1)
 801a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a00e:	781b      	ldrb	r3, [r3, #0]
 801a010:	2b00      	cmp	r3, #0
 801a012:	d023      	beq.n	801a05c <map_normal+0x254>
 801a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a016:	781b      	ldrb	r3, [r3, #0]
 801a018:	2bff      	cmp	r3, #255	; 0xff
 801a01a:	d10a      	bne.n	801a032 <map_normal+0x22a>
 801a01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a01e:	3301      	adds	r3, #1
 801a020:	683a      	ldr	r2, [r7, #0]
 801a022:	441a      	add	r2, r3
 801a024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a026:	3301      	adds	r3, #1
 801a028:	68f9      	ldr	r1, [r7, #12]
 801a02a:	440b      	add	r3, r1
 801a02c:	7812      	ldrb	r2, [r2, #0]
 801a02e:	701a      	strb	r2, [r3, #0]
 801a030:	e014      	b.n	801a05c <map_normal+0x254>
 801a032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a034:	3301      	adds	r3, #1
 801a036:	683a      	ldr	r2, [r7, #0]
 801a038:	4413      	add	r3, r2
 801a03a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a03c:	3201      	adds	r2, #1
 801a03e:	68f9      	ldr	r1, [r7, #12]
 801a040:	4411      	add	r1, r2
 801a042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a044:	7815      	ldrb	r5, [r2, #0]
 801a046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a048:	3201      	adds	r2, #1
 801a04a:	68f8      	ldr	r0, [r7, #12]
 801a04c:	1884      	adds	r4, r0, r2
 801a04e:	462a      	mov	r2, r5
 801a050:	7809      	ldrb	r1, [r1, #0]
 801a052:	7818      	ldrb	r0, [r3, #0]
 801a054:	f7fe fff7 	bl	8019046 <lv_color_mix>
 801a058:	4603      	mov	r3, r0
 801a05a:	7023      	strb	r3, [r4, #0]
 801a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a05e:	3301      	adds	r3, #1
 801a060:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 2)
 801a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a064:	781b      	ldrb	r3, [r3, #0]
 801a066:	2b00      	cmp	r3, #0
 801a068:	d023      	beq.n	801a0b2 <map_normal+0x2aa>
 801a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a06c:	781b      	ldrb	r3, [r3, #0]
 801a06e:	2bff      	cmp	r3, #255	; 0xff
 801a070:	d10a      	bne.n	801a088 <map_normal+0x280>
 801a072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a074:	3302      	adds	r3, #2
 801a076:	683a      	ldr	r2, [r7, #0]
 801a078:	441a      	add	r2, r3
 801a07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a07c:	3302      	adds	r3, #2
 801a07e:	68f9      	ldr	r1, [r7, #12]
 801a080:	440b      	add	r3, r1
 801a082:	7812      	ldrb	r2, [r2, #0]
 801a084:	701a      	strb	r2, [r3, #0]
 801a086:	e014      	b.n	801a0b2 <map_normal+0x2aa>
 801a088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a08a:	3302      	adds	r3, #2
 801a08c:	683a      	ldr	r2, [r7, #0]
 801a08e:	4413      	add	r3, r2
 801a090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a092:	3202      	adds	r2, #2
 801a094:	68f9      	ldr	r1, [r7, #12]
 801a096:	4411      	add	r1, r2
 801a098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a09a:	7815      	ldrb	r5, [r2, #0]
 801a09c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a09e:	3202      	adds	r2, #2
 801a0a0:	68f8      	ldr	r0, [r7, #12]
 801a0a2:	1884      	adds	r4, r0, r2
 801a0a4:	462a      	mov	r2, r5
 801a0a6:	7809      	ldrb	r1, [r1, #0]
 801a0a8:	7818      	ldrb	r0, [r3, #0]
 801a0aa:	f7fe ffcc 	bl	8019046 <lv_color_mix>
 801a0ae:	4603      	mov	r3, r0
 801a0b0:	7023      	strb	r3, [r4, #0]
 801a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0b4:	3301      	adds	r3, #1
 801a0b6:	627b      	str	r3, [r7, #36]	; 0x24
                            MAP_NORMAL_MASK_PX(x + 3)
 801a0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0ba:	781b      	ldrb	r3, [r3, #0]
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d023      	beq.n	801a108 <map_normal+0x300>
 801a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0c2:	781b      	ldrb	r3, [r3, #0]
 801a0c4:	2bff      	cmp	r3, #255	; 0xff
 801a0c6:	d10a      	bne.n	801a0de <map_normal+0x2d6>
 801a0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0ca:	3303      	adds	r3, #3
 801a0cc:	683a      	ldr	r2, [r7, #0]
 801a0ce:	441a      	add	r2, r3
 801a0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0d2:	3303      	adds	r3, #3
 801a0d4:	68f9      	ldr	r1, [r7, #12]
 801a0d6:	440b      	add	r3, r1
 801a0d8:	7812      	ldrb	r2, [r2, #0]
 801a0da:	701a      	strb	r2, [r3, #0]
 801a0dc:	e014      	b.n	801a108 <map_normal+0x300>
 801a0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0e0:	3303      	adds	r3, #3
 801a0e2:	683a      	ldr	r2, [r7, #0]
 801a0e4:	4413      	add	r3, r2
 801a0e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a0e8:	3203      	adds	r2, #3
 801a0ea:	68f9      	ldr	r1, [r7, #12]
 801a0ec:	4411      	add	r1, r2
 801a0ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a0f0:	7815      	ldrb	r5, [r2, #0]
 801a0f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a0f4:	3203      	adds	r2, #3
 801a0f6:	68f8      	ldr	r0, [r7, #12]
 801a0f8:	1884      	adds	r4, r0, r2
 801a0fa:	462a      	mov	r2, r5
 801a0fc:	7809      	ldrb	r1, [r1, #0]
 801a0fe:	7818      	ldrb	r0, [r3, #0]
 801a100:	f7fe ffa1 	bl	8019046 <lv_color_mix>
 801a104:	4603      	mov	r3, r0
 801a106:	7023      	strb	r3, [r4, #0]
 801a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a10a:	3301      	adds	r3, #1
 801a10c:	627b      	str	r3, [r7, #36]	; 0x24
                    mask32++;
 801a10e:	6a3b      	ldr	r3, [r7, #32]
 801a110:	3304      	adds	r3, #4
 801a112:	623b      	str	r3, [r7, #32]
                for(; x < x_end4; x += 4) {
 801a114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a116:	3304      	adds	r3, #4
 801a118:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a11a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a11c:	693b      	ldr	r3, [r7, #16]
 801a11e:	429a      	cmp	r2, r3
 801a120:	f6ff af1b 	blt.w	8019f5a <map_normal+0x152>
                mask_tmp_x = (const lv_opa_t *)mask32;
 801a124:	6a3b      	ldr	r3, [r7, #32]
 801a126:	627b      	str	r3, [r7, #36]	; 0x24
                for(; x < w ; x++) {
 801a128:	e028      	b.n	801a17c <map_normal+0x374>
                    MAP_NORMAL_MASK_PX(x)
 801a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a12c:	781b      	ldrb	r3, [r3, #0]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d01e      	beq.n	801a170 <map_normal+0x368>
 801a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a134:	781b      	ldrb	r3, [r3, #0]
 801a136:	2bff      	cmp	r3, #255	; 0xff
 801a138:	d108      	bne.n	801a14c <map_normal+0x344>
 801a13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a13c:	683a      	ldr	r2, [r7, #0]
 801a13e:	441a      	add	r2, r3
 801a140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a142:	68f9      	ldr	r1, [r7, #12]
 801a144:	440b      	add	r3, r1
 801a146:	7812      	ldrb	r2, [r2, #0]
 801a148:	701a      	strb	r2, [r3, #0]
 801a14a:	e011      	b.n	801a170 <map_normal+0x368>
 801a14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a14e:	683a      	ldr	r2, [r7, #0]
 801a150:	4413      	add	r3, r2
 801a152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a154:	68f9      	ldr	r1, [r7, #12]
 801a156:	4411      	add	r1, r2
 801a158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a15a:	7815      	ldrb	r5, [r2, #0]
 801a15c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a15e:	68f8      	ldr	r0, [r7, #12]
 801a160:	1884      	adds	r4, r0, r2
 801a162:	462a      	mov	r2, r5
 801a164:	7809      	ldrb	r1, [r1, #0]
 801a166:	7818      	ldrb	r0, [r3, #0]
 801a168:	f7fe ff6d 	bl	8019046 <lv_color_mix>
 801a16c:	4603      	mov	r3, r0
 801a16e:	7023      	strb	r3, [r4, #0]
 801a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a172:	3301      	adds	r3, #1
 801a174:	627b      	str	r3, [r7, #36]	; 0x24
                for(; x < w ; x++) {
 801a176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a178:	3301      	adds	r3, #1
 801a17a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a17c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a17e:	69fb      	ldr	r3, [r7, #28]
 801a180:	429a      	cmp	r2, r3
 801a182:	dbd2      	blt.n	801a12a <map_normal+0x322>
                dest_buf += dest_stride;
 801a184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a188:	68fa      	ldr	r2, [r7, #12]
 801a18a:	4413      	add	r3, r2
 801a18c:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 801a18e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801a192:	683a      	ldr	r2, [r7, #0]
 801a194:	4413      	add	r3, r2
 801a196:	603b      	str	r3, [r7, #0]
                mask += mask_stride;
 801a198:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801a19c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a19e:	4413      	add	r3, r2
 801a1a0:	64bb      	str	r3, [r7, #72]	; 0x48
            for(y = 0; y < h; y++) {
 801a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1a4:	3301      	adds	r3, #1
 801a1a6:	62bb      	str	r3, [r7, #40]	; 0x28
 801a1a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a1aa:	69bb      	ldr	r3, [r7, #24]
 801a1ac:	429a      	cmp	r2, r3
 801a1ae:	f6ff ae9a 	blt.w	8019ee6 <map_normal+0xde>
}
 801a1b2:	e04c      	b.n	801a24e <map_normal+0x446>
            for(y = 0; y < h; y++) {
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	62bb      	str	r3, [r7, #40]	; 0x28
 801a1b8:	e045      	b.n	801a246 <map_normal+0x43e>
                for(x = 0; x < w; x++) {
 801a1ba:	2300      	movs	r3, #0
 801a1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a1be:	e02c      	b.n	801a21a <map_normal+0x412>
                    if(mask[x]) {
 801a1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a1c4:	4413      	add	r3, r2
 801a1c6:	781b      	ldrb	r3, [r3, #0]
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d023      	beq.n	801a214 <map_normal+0x40c>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 801a1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a1d0:	4413      	add	r3, r2
 801a1d2:	781b      	ldrb	r3, [r3, #0]
 801a1d4:	2bfc      	cmp	r3, #252	; 0xfc
 801a1d6:	d80a      	bhi.n	801a1ee <map_normal+0x3e6>
 801a1d8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801a1dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a1de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a1e0:	440a      	add	r2, r1
 801a1e2:	7812      	ldrb	r2, [r2, #0]
 801a1e4:	fb02 f303 	mul.w	r3, r2, r3
 801a1e8:	121b      	asrs	r3, r3, #8
 801a1ea:	b2db      	uxtb	r3, r3
 801a1ec:	e001      	b.n	801a1f2 <map_normal+0x3ea>
 801a1ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801a1f2:	75fb      	strb	r3, [r7, #23]
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 801a1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1f6:	683a      	ldr	r2, [r7, #0]
 801a1f8:	4413      	add	r3, r2
 801a1fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a1fc:	68f9      	ldr	r1, [r7, #12]
 801a1fe:	4411      	add	r1, r2
 801a200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a202:	68f8      	ldr	r0, [r7, #12]
 801a204:	1884      	adds	r4, r0, r2
 801a206:	7dfa      	ldrb	r2, [r7, #23]
 801a208:	7809      	ldrb	r1, [r1, #0]
 801a20a:	7818      	ldrb	r0, [r3, #0]
 801a20c:	f7fe ff1b 	bl	8019046 <lv_color_mix>
 801a210:	4603      	mov	r3, r0
 801a212:	7023      	strb	r3, [r4, #0]
                for(x = 0; x < w; x++) {
 801a214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a216:	3301      	adds	r3, #1
 801a218:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a21a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a21c:	69fb      	ldr	r3, [r7, #28]
 801a21e:	429a      	cmp	r2, r3
 801a220:	dbce      	blt.n	801a1c0 <map_normal+0x3b8>
                dest_buf += dest_stride;
 801a222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a226:	68fa      	ldr	r2, [r7, #12]
 801a228:	4413      	add	r3, r2
 801a22a:	60fb      	str	r3, [r7, #12]
                src_buf += src_stride;
 801a22c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801a230:	683a      	ldr	r2, [r7, #0]
 801a232:	4413      	add	r3, r2
 801a234:	603b      	str	r3, [r7, #0]
                mask += mask_stride;
 801a236:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801a23a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a23c:	4413      	add	r3, r2
 801a23e:	64bb      	str	r3, [r7, #72]	; 0x48
            for(y = 0; y < h; y++) {
 801a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a242:	3301      	adds	r3, #1
 801a244:	62bb      	str	r3, [r7, #40]	; 0x28
 801a246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a248:	69bb      	ldr	r3, [r7, #24]
 801a24a:	429a      	cmp	r2, r3
 801a24c:	dbb5      	blt.n	801a1ba <map_normal+0x3b2>
}
 801a24e:	bf00      	nop
 801a250:	3730      	adds	r7, #48	; 0x30
 801a252:	46bd      	mov	sp, r7
 801a254:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a258 <map_blended>:

#if LV_DRAW_COMPLEX
static void map_blended(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                        const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa,
                        const lv_opa_t * mask, lv_coord_t mask_stride, lv_blend_mode_t blend_mode)
{
 801a258:	b580      	push	{r7, lr}
 801a25a:	b08e      	sub	sp, #56	; 0x38
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	60f8      	str	r0, [r7, #12]
 801a260:	60b9      	str	r1, [r7, #8]
 801a262:	603b      	str	r3, [r7, #0]
 801a264:	4613      	mov	r3, r2
 801a266:	80fb      	strh	r3, [r7, #6]

    int32_t w = lv_area_get_width(dest_area);
 801a268:	68b8      	ldr	r0, [r7, #8]
 801a26a:	f7fe ff7f 	bl	801916c <lv_area_get_width>
 801a26e:	4603      	mov	r3, r0
 801a270:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h = lv_area_get_height(dest_area);
 801a272:	68b8      	ldr	r0, [r7, #8]
 801a274:	f7fe ff91 	bl	801919a <lv_area_get_height>
 801a278:	4603      	mov	r3, r0
 801a27a:	623b      	str	r3, [r7, #32]

    int32_t x;
    int32_t y;

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(blend_mode) {
 801a27c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801a280:	2b03      	cmp	r3, #3
 801a282:	d00d      	beq.n	801a2a0 <map_blended+0x48>
 801a284:	2b03      	cmp	r3, #3
 801a286:	f300 80ef 	bgt.w	801a468 <map_blended+0x210>
 801a28a:	2b01      	cmp	r3, #1
 801a28c:	d002      	beq.n	801a294 <map_blended+0x3c>
 801a28e:	2b02      	cmp	r3, #2
 801a290:	d003      	beq.n	801a29a <map_blended+0x42>
        case LV_BLEND_MODE_MULTIPLY:
            blend_fp = color_blend_true_color_multiply;
            break;
        default:
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
 801a292:	e0e9      	b.n	801a468 <map_blended+0x210>
            blend_fp = color_blend_true_color_additive;
 801a294:	4b76      	ldr	r3, [pc, #472]	; (801a470 <map_blended+0x218>)
 801a296:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 801a298:	e005      	b.n	801a2a6 <map_blended+0x4e>
            blend_fp = color_blend_true_color_subtractive;
 801a29a:	4b76      	ldr	r3, [pc, #472]	; (801a474 <map_blended+0x21c>)
 801a29c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 801a29e:	e002      	b.n	801a2a6 <map_blended+0x4e>
            blend_fp = color_blend_true_color_multiply;
 801a2a0:	4b75      	ldr	r3, [pc, #468]	; (801a478 <map_blended+0x220>)
 801a2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 801a2a4:	bf00      	nop
    }

    lv_color_t last_dest_color;
    lv_color_t last_src_color;
    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 801a2a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d151      	bne.n	801a350 <map_blended+0xf8>
        last_dest_color = dest_buf[0];
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	781b      	ldrb	r3, [r3, #0]
 801a2b0:	773b      	strb	r3, [r7, #28]
        last_src_color = src_buf[0];
 801a2b2:	683b      	ldr	r3, [r7, #0]
 801a2b4:	781b      	ldrb	r3, [r3, #0]
 801a2b6:	763b      	strb	r3, [r7, #24]
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 801a2b8:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801a2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2be:	7f39      	ldrb	r1, [r7, #28]
 801a2c0:	7e38      	ldrb	r0, [r7, #24]
 801a2c2:	4798      	blx	r3
 801a2c4:	4603      	mov	r3, r0
 801a2c6:	753b      	strb	r3, [r7, #20]
        for(y = 0; y < h; y++) {
 801a2c8:	2300      	movs	r3, #0
 801a2ca:	633b      	str	r3, [r7, #48]	; 0x30
 801a2cc:	e03b      	b.n	801a346 <map_blended+0xee>
            for(x = 0; x < w; x++) {
 801a2ce:	2300      	movs	r3, #0
 801a2d0:	637b      	str	r3, [r7, #52]	; 0x34
 801a2d2:	e027      	b.n	801a324 <map_blended+0xcc>
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full) {
 801a2d4:	7e3a      	ldrb	r2, [r7, #24]
 801a2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2d8:	6839      	ldr	r1, [r7, #0]
 801a2da:	440b      	add	r3, r1
 801a2dc:	781b      	ldrb	r3, [r3, #0]
 801a2de:	429a      	cmp	r2, r3
 801a2e0:	d106      	bne.n	801a2f0 <map_blended+0x98>
 801a2e2:	7f3a      	ldrb	r2, [r7, #28]
 801a2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2e6:	68f9      	ldr	r1, [r7, #12]
 801a2e8:	440b      	add	r3, r1
 801a2ea:	781b      	ldrb	r3, [r3, #0]
 801a2ec:	429a      	cmp	r2, r3
 801a2ee:	d011      	beq.n	801a314 <map_blended+0xbc>
                    last_dest_color = dest_buf[x];
 801a2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2f2:	68fa      	ldr	r2, [r7, #12]
 801a2f4:	4413      	add	r3, r2
 801a2f6:	781b      	ldrb	r3, [r3, #0]
 801a2f8:	773b      	strb	r3, [r7, #28]
                    last_src_color = src_buf[x];
 801a2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2fc:	683a      	ldr	r2, [r7, #0]
 801a2fe:	4413      	add	r3, r2
 801a300:	781b      	ldrb	r3, [r3, #0]
 801a302:	763b      	strb	r3, [r7, #24]
                    last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 801a304:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801a308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a30a:	7f39      	ldrb	r1, [r7, #28]
 801a30c:	7e38      	ldrb	r0, [r7, #24]
 801a30e:	4798      	blx	r3
 801a310:	4603      	mov	r3, r0
 801a312:	753b      	strb	r3, [r7, #20]
                }
                dest_buf[x] = last_res_color;
 801a314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a316:	68fa      	ldr	r2, [r7, #12]
 801a318:	4413      	add	r3, r2
 801a31a:	7d3a      	ldrb	r2, [r7, #20]
 801a31c:	701a      	strb	r2, [r3, #0]
            for(x = 0; x < w; x++) {
 801a31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a320:	3301      	adds	r3, #1
 801a322:	637b      	str	r3, [r7, #52]	; 0x34
 801a324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a328:	429a      	cmp	r2, r3
 801a32a:	dbd3      	blt.n	801a2d4 <map_blended+0x7c>
            }
            dest_buf += dest_stride;
 801a32c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a330:	68fa      	ldr	r2, [r7, #12]
 801a332:	4413      	add	r3, r2
 801a334:	60fb      	str	r3, [r7, #12]
            src_buf += src_stride;
 801a336:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801a33a:	683a      	ldr	r2, [r7, #0]
 801a33c:	4413      	add	r3, r2
 801a33e:	603b      	str	r3, [r7, #0]
        for(y = 0; y < h; y++) {
 801a340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a342:	3301      	adds	r3, #1
 801a344:	633b      	str	r3, [r7, #48]	; 0x30
 801a346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a348:	6a3b      	ldr	r3, [r7, #32]
 801a34a:	429a      	cmp	r2, r3
 801a34c:	dbbf      	blt.n	801a2ce <map_blended+0x76>
 801a34e:	e08c      	b.n	801a46a <map_blended+0x212>
        }
    }
    /*Masked*/
    else {
        last_dest_color = dest_buf[0];
 801a350:	68fb      	ldr	r3, [r7, #12]
 801a352:	781b      	ldrb	r3, [r3, #0]
 801a354:	773b      	strb	r3, [r7, #28]
        last_src_color = src_buf[0];
 801a356:	683b      	ldr	r3, [r7, #0]
 801a358:	781b      	ldrb	r3, [r3, #0]
 801a35a:	763b      	strb	r3, [r7, #24]
        lv_opa_t last_opa = mask[0] >= LV_OPA_MAX ? opa : ((opa * mask[0]) >> 8);
 801a35c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a35e:	781b      	ldrb	r3, [r3, #0]
 801a360:	2bfc      	cmp	r3, #252	; 0xfc
 801a362:	d808      	bhi.n	801a376 <map_blended+0x11e>
 801a364:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801a368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a36a:	7812      	ldrb	r2, [r2, #0]
 801a36c:	fb02 f303 	mul.w	r3, r2, r3
 801a370:	121b      	asrs	r3, r3, #8
 801a372:	b2db      	uxtb	r3, r3
 801a374:	e001      	b.n	801a37a <map_blended+0x122>
 801a376:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801a37a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 801a37e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801a382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a384:	7f39      	ldrb	r1, [r7, #28]
 801a386:	7e38      	ldrb	r0, [r7, #24]
 801a388:	4798      	blx	r3
 801a38a:	4603      	mov	r3, r0
 801a38c:	743b      	strb	r3, [r7, #16]
        for(y = 0; y < h; y++) {
 801a38e:	2300      	movs	r3, #0
 801a390:	633b      	str	r3, [r7, #48]	; 0x30
 801a392:	e064      	b.n	801a45e <map_blended+0x206>
            for(x = 0; x < w; x++) {
 801a394:	2300      	movs	r3, #0
 801a396:	637b      	str	r3, [r7, #52]	; 0x34
 801a398:	e04b      	b.n	801a432 <map_blended+0x1da>
                if(mask[x] == 0) continue;
 801a39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a39c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a39e:	4413      	add	r3, r2
 801a3a0:	781b      	ldrb	r3, [r3, #0]
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d041      	beq.n	801a42a <map_blended+0x1d2>
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 801a3a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a3aa:	4413      	add	r3, r2
 801a3ac:	781b      	ldrb	r3, [r3, #0]
 801a3ae:	2bfc      	cmp	r3, #252	; 0xfc
 801a3b0:	d80a      	bhi.n	801a3c8 <map_blended+0x170>
 801a3b2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801a3b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a3b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a3ba:	440a      	add	r2, r1
 801a3bc:	7812      	ldrb	r2, [r2, #0]
 801a3be:	fb02 f303 	mul.w	r3, r2, r3
 801a3c2:	121b      	asrs	r3, r3, #8
 801a3c4:	b2db      	uxtb	r3, r3
 801a3c6:	e001      	b.n	801a3cc <map_blended+0x174>
 801a3c8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801a3cc:	77fb      	strb	r3, [r7, #31]
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 801a3ce:	7e3a      	ldrb	r2, [r7, #24]
 801a3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3d2:	6839      	ldr	r1, [r7, #0]
 801a3d4:	440b      	add	r3, r1
 801a3d6:	781b      	ldrb	r3, [r3, #0]
 801a3d8:	429a      	cmp	r2, r3
 801a3da:	d10b      	bne.n	801a3f4 <map_blended+0x19c>
 801a3dc:	7f3a      	ldrb	r2, [r7, #28]
 801a3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3e0:	68f9      	ldr	r1, [r7, #12]
 801a3e2:	440b      	add	r3, r1
 801a3e4:	781b      	ldrb	r3, [r3, #0]
 801a3e6:	429a      	cmp	r2, r3
 801a3e8:	d104      	bne.n	801a3f4 <map_blended+0x19c>
 801a3ea:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801a3ee:	7ffb      	ldrb	r3, [r7, #31]
 801a3f0:	429a      	cmp	r2, r3
 801a3f2:	d014      	beq.n	801a41e <map_blended+0x1c6>
                    last_dest_color = dest_buf[x];
 801a3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3f6:	68fa      	ldr	r2, [r7, #12]
 801a3f8:	4413      	add	r3, r2
 801a3fa:	781b      	ldrb	r3, [r3, #0]
 801a3fc:	773b      	strb	r3, [r7, #28]
                    last_src_color = src_buf[x];
 801a3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a400:	683a      	ldr	r2, [r7, #0]
 801a402:	4413      	add	r3, r2
 801a404:	781b      	ldrb	r3, [r3, #0]
 801a406:	763b      	strb	r3, [r7, #24]
                    last_opa = opa_tmp;
 801a408:	7ffb      	ldrb	r3, [r7, #31]
 801a40a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 801a40e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801a412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a414:	7f39      	ldrb	r1, [r7, #28]
 801a416:	7e38      	ldrb	r0, [r7, #24]
 801a418:	4798      	blx	r3
 801a41a:	4603      	mov	r3, r0
 801a41c:	743b      	strb	r3, [r7, #16]
                }
                dest_buf[x] = last_res_color;
 801a41e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a420:	68fa      	ldr	r2, [r7, #12]
 801a422:	4413      	add	r3, r2
 801a424:	7c3a      	ldrb	r2, [r7, #16]
 801a426:	701a      	strb	r2, [r3, #0]
 801a428:	e000      	b.n	801a42c <map_blended+0x1d4>
                if(mask[x] == 0) continue;
 801a42a:	bf00      	nop
            for(x = 0; x < w; x++) {
 801a42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a42e:	3301      	adds	r3, #1
 801a430:	637b      	str	r3, [r7, #52]	; 0x34
 801a432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a436:	429a      	cmp	r2, r3
 801a438:	dbaf      	blt.n	801a39a <map_blended+0x142>
            }
            dest_buf += dest_stride;
 801a43a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a43e:	68fa      	ldr	r2, [r7, #12]
 801a440:	4413      	add	r3, r2
 801a442:	60fb      	str	r3, [r7, #12]
            src_buf += src_stride;
 801a444:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801a448:	683a      	ldr	r2, [r7, #0]
 801a44a:	4413      	add	r3, r2
 801a44c:	603b      	str	r3, [r7, #0]
            mask += mask_stride;
 801a44e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 801a452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a454:	4413      	add	r3, r2
 801a456:	64bb      	str	r3, [r7, #72]	; 0x48
        for(y = 0; y < h; y++) {
 801a458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a45a:	3301      	adds	r3, #1
 801a45c:	633b      	str	r3, [r7, #48]	; 0x30
 801a45e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a460:	6a3b      	ldr	r3, [r7, #32]
 801a462:	429a      	cmp	r2, r3
 801a464:	db96      	blt.n	801a394 <map_blended+0x13c>
 801a466:	e000      	b.n	801a46a <map_blended+0x212>
            return;
 801a468:	bf00      	nop
        }
    }
}
 801a46a:	3738      	adds	r7, #56	; 0x38
 801a46c:	46bd      	mov	sp, r7
 801a46e:	bd80      	pop	{r7, pc}
 801a470:	0801a47d 	.word	0x0801a47d
 801a474:	0801a4cd 	.word	0x0801a4cd
 801a478:	0801a583 	.word	0x0801a583

0801a47c <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 801a47c:	b580      	push	{r7, lr}
 801a47e:	b084      	sub	sp, #16
 801a480:	af00      	add	r7, sp, #0
 801a482:	7138      	strb	r0, [r7, #4]
 801a484:	7039      	strb	r1, [r7, #0]
 801a486:	4613      	mov	r3, r2
 801a488:	70fb      	strb	r3, [r7, #3]

    if(opa <= LV_OPA_MIN) return bg;
 801a48a:	78fb      	ldrb	r3, [r7, #3]
 801a48c:	2b02      	cmp	r3, #2
 801a48e:	d801      	bhi.n	801a494 <color_blend_true_color_additive+0x18>
 801a490:	783b      	ldrb	r3, [r7, #0]
 801a492:	e017      	b.n	801a4c4 <color_blend_true_color_additive+0x48>

    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
 801a494:	783b      	ldrb	r3, [r7, #0]
 801a496:	461a      	mov	r2, r3
 801a498:	793b      	ldrb	r3, [r7, #4]
 801a49a:	4413      	add	r3, r2
 801a49c:	60fb      	str	r3, [r7, #12]
    fg.full = LV_MIN(tmp, 1);
 801a49e:	68fb      	ldr	r3, [r7, #12]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	bf14      	ite	ne
 801a4a4:	2301      	movne	r3, #1
 801a4a6:	2300      	moveq	r3, #0
 801a4a8:	b2db      	uxtb	r3, r3
 801a4aa:	713b      	strb	r3, [r7, #4]
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
 801a4ac:	78fb      	ldrb	r3, [r7, #3]
 801a4ae:	2bff      	cmp	r3, #255	; 0xff
 801a4b0:	d101      	bne.n	801a4b6 <color_blend_true_color_additive+0x3a>
 801a4b2:	793b      	ldrb	r3, [r7, #4]
 801a4b4:	e006      	b.n	801a4c4 <color_blend_true_color_additive+0x48>

    return lv_color_mix(fg, bg, opa);
 801a4b6:	78fb      	ldrb	r3, [r7, #3]
 801a4b8:	461a      	mov	r2, r3
 801a4ba:	7839      	ldrb	r1, [r7, #0]
 801a4bc:	7938      	ldrb	r0, [r7, #4]
 801a4be:	f7fe fdc2 	bl	8019046 <lv_color_mix>
 801a4c2:	4603      	mov	r3, r0
}
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	3710      	adds	r7, #16
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	bd80      	pop	{r7, pc}

0801a4cc <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b084      	sub	sp, #16
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	7138      	strb	r0, [r7, #4]
 801a4d4:	7039      	strb	r1, [r7, #0]
 801a4d6:	4613      	mov	r3, r2
 801a4d8:	70fb      	strb	r3, [r7, #3]
    if(opa <= LV_OPA_MIN) return bg;
 801a4da:	78fb      	ldrb	r3, [r7, #3]
 801a4dc:	2b02      	cmp	r3, #2
 801a4de:	d801      	bhi.n	801a4e4 <color_blend_true_color_subtractive+0x18>
 801a4e0:	783b      	ldrb	r3, [r7, #0]
 801a4e2:	e04a      	b.n	801a57a <color_blend_true_color_subtractive+0xae>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
 801a4e4:	783b      	ldrb	r3, [r7, #0]
 801a4e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a4ea:	b2db      	uxtb	r3, r3
 801a4ec:	461a      	mov	r2, r3
 801a4ee:	793b      	ldrb	r3, [r7, #4]
 801a4f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a4f4:	b2db      	uxtb	r3, r3
 801a4f6:	1ad3      	subs	r3, r2, r3
 801a4f8:	60fb      	str	r3, [r7, #12]
    fg.ch.red = LV_MAX(tmp, 0);
 801a4fa:	68fb      	ldr	r3, [r7, #12]
 801a4fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a500:	f003 0301 	and.w	r3, r3, #1
 801a504:	b2da      	uxtb	r2, r3
 801a506:	793b      	ldrb	r3, [r7, #4]
 801a508:	f362 0300 	bfi	r3, r2, #0, #1
 801a50c:	713b      	strb	r3, [r7, #4]

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
 801a50e:	783b      	ldrb	r3, [r7, #0]
 801a510:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a514:	b2db      	uxtb	r3, r3
 801a516:	461a      	mov	r2, r3
 801a518:	793b      	ldrb	r3, [r7, #4]
 801a51a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a51e:	b2db      	uxtb	r3, r3
 801a520:	1ad3      	subs	r3, r2, r3
 801a522:	60fb      	str	r3, [r7, #12]
    fg.ch.green = LV_MAX(tmp, 0);
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a52a:	f003 0301 	and.w	r3, r3, #1
 801a52e:	b2da      	uxtb	r2, r3
 801a530:	793b      	ldrb	r3, [r7, #4]
 801a532:	f362 0300 	bfi	r3, r2, #0, #1
 801a536:	713b      	strb	r3, [r7, #4]
    tmp = LV_MAX(tmp, 0);
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

    tmp = bg.ch.blue - fg.ch.blue;
 801a538:	783b      	ldrb	r3, [r7, #0]
 801a53a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a53e:	b2db      	uxtb	r3, r3
 801a540:	461a      	mov	r2, r3
 801a542:	793b      	ldrb	r3, [r7, #4]
 801a544:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a548:	b2db      	uxtb	r3, r3
 801a54a:	1ad3      	subs	r3, r2, r3
 801a54c:	60fb      	str	r3, [r7, #12]
    fg.ch.blue = LV_MAX(tmp, 0);
 801a54e:	68fb      	ldr	r3, [r7, #12]
 801a550:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a554:	f003 0301 	and.w	r3, r3, #1
 801a558:	b2da      	uxtb	r2, r3
 801a55a:	793b      	ldrb	r3, [r7, #4]
 801a55c:	f362 0300 	bfi	r3, r2, #0, #1
 801a560:	713b      	strb	r3, [r7, #4]

    if(opa == LV_OPA_COVER) return fg;
 801a562:	78fb      	ldrb	r3, [r7, #3]
 801a564:	2bff      	cmp	r3, #255	; 0xff
 801a566:	d101      	bne.n	801a56c <color_blend_true_color_subtractive+0xa0>
 801a568:	793b      	ldrb	r3, [r7, #4]
 801a56a:	e006      	b.n	801a57a <color_blend_true_color_subtractive+0xae>

    return lv_color_mix(fg, bg, opa);
 801a56c:	78fb      	ldrb	r3, [r7, #3]
 801a56e:	461a      	mov	r2, r3
 801a570:	7839      	ldrb	r1, [r7, #0]
 801a572:	7938      	ldrb	r0, [r7, #4]
 801a574:	f7fe fd67 	bl	8019046 <lv_color_mix>
 801a578:	4603      	mov	r3, r0
}
 801a57a:	4618      	mov	r0, r3
 801a57c:	3710      	adds	r7, #16
 801a57e:	46bd      	mov	sp, r7
 801a580:	bd80      	pop	{r7, pc}

0801a582 <color_blend_true_color_multiply>:

static inline lv_color_t color_blend_true_color_multiply(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 801a582:	b580      	push	{r7, lr}
 801a584:	b082      	sub	sp, #8
 801a586:	af00      	add	r7, sp, #0
 801a588:	7138      	strb	r0, [r7, #4]
 801a58a:	7039      	strb	r1, [r7, #0]
 801a58c:	4613      	mov	r3, r2
 801a58e:	70fb      	strb	r3, [r7, #3]
    if(opa <= LV_OPA_MIN) return bg;
 801a590:	78fb      	ldrb	r3, [r7, #3]
 801a592:	2b02      	cmp	r3, #2
 801a594:	d801      	bhi.n	801a59a <color_blend_true_color_multiply+0x18>
 801a596:	783b      	ldrb	r3, [r7, #0]
 801a598:	e00b      	b.n	801a5b2 <color_blend_true_color_multiply+0x30>
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 3;
    fg.ch.green = (fg.ch.green * bg.ch.green) >> 3;
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 2;
#endif

    if(opa == LV_OPA_COVER) return fg;
 801a59a:	78fb      	ldrb	r3, [r7, #3]
 801a59c:	2bff      	cmp	r3, #255	; 0xff
 801a59e:	d101      	bne.n	801a5a4 <color_blend_true_color_multiply+0x22>
 801a5a0:	793b      	ldrb	r3, [r7, #4]
 801a5a2:	e006      	b.n	801a5b2 <color_blend_true_color_multiply+0x30>

    return lv_color_mix(fg, bg, opa);
 801a5a4:	78fb      	ldrb	r3, [r7, #3]
 801a5a6:	461a      	mov	r2, r3
 801a5a8:	7839      	ldrb	r1, [r7, #0]
 801a5aa:	7938      	ldrb	r0, [r7, #4]
 801a5ac:	f7fe fd4b 	bl	8019046 <lv_color_mix>
 801a5b0:	4603      	mov	r3, r0
}
 801a5b2:	4618      	mov	r0, r3
 801a5b4:	3708      	adds	r7, #8
 801a5b6:	46bd      	mov	sp, r7
 801a5b8:	bd80      	pop	{r7, pc}

0801a5ba <lv_color_to32>:
{
 801a5ba:	b480      	push	{r7}
 801a5bc:	b083      	sub	sp, #12
 801a5be:	af00      	add	r7, sp, #0
 801a5c0:	7138      	strb	r0, [r7, #4]
    if(color.full == 0)
 801a5c2:	793b      	ldrb	r3, [r7, #4]
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d102      	bne.n	801a5ce <lv_color_to32+0x14>
        return 0xFF000000;
 801a5c8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 801a5cc:	e001      	b.n	801a5d2 <lv_color_to32+0x18>
        return 0xFFFFFFFF;
 801a5ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a5d2:	4618      	mov	r0, r3
 801a5d4:	370c      	adds	r7, #12
 801a5d6:	46bd      	mov	sp, r7
 801a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5dc:	4770      	bx	lr

0801a5de <compute_key>:
    const void * ptr;
    const uint32_t value;
};

static uint32_t compute_key(const lv_grad_dsc_t * g, lv_coord_t size, lv_coord_t w)
{
 801a5de:	b480      	push	{r7}
 801a5e0:	b085      	sub	sp, #20
 801a5e2:	af00      	add	r7, sp, #0
 801a5e4:	6078      	str	r0, [r7, #4]
 801a5e6:	460b      	mov	r3, r1
 801a5e8:	807b      	strh	r3, [r7, #2]
 801a5ea:	4613      	mov	r3, r2
 801a5ec:	803b      	strh	r3, [r7, #0]
    union void_cast v;
    v.ptr = g;
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	60fb      	str	r3, [r7, #12]
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 801a5f2:	68fa      	ldr	r2, [r7, #12]
 801a5f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a5f8:	4053      	eors	r3, r2
 801a5fa:	f9b7 2000 	ldrsh.w	r2, [r7]
 801a5fe:	1052      	asrs	r2, r2, #1
 801a600:	b212      	sxth	r2, r2
 801a602:	4053      	eors	r3, r2
}
 801a604:	4618      	mov	r0, r3
 801a606:	3714      	adds	r7, #20
 801a608:	46bd      	mov	sp, r7
 801a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a60e:	4770      	bx	lr

0801a610 <get_cache_item_size>:

static size_t get_cache_item_size(lv_grad_t * c)
{
 801a610:	b480      	push	{r7}
 801a612:	b085      	sub	sp, #20
 801a614:	af00      	add	r7, sp, #0
 801a616:	6078      	str	r0, [r7, #4]
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801a61e:	3303      	adds	r3, #3
 801a620:	f023 0303 	bic.w	r3, r3, #3
 801a624:	3310      	adds	r3, #16
 801a626:	60fb      	str	r3, [r7, #12]
    s += ALIGN(c->size * sizeof(lv_color32_t));
#if LV_DITHER_ERROR_DIFFUSION == 1
    s += ALIGN(c->w * sizeof(lv_scolor24_t));
#endif
#endif
    return s;
 801a628:	68fb      	ldr	r3, [r7, #12]
}
 801a62a:	4618      	mov	r0, r3
 801a62c:	3714      	adds	r7, #20
 801a62e:	46bd      	mov	sp, r7
 801a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a634:	4770      	bx	lr
	...

0801a638 <next_in_cache>:

static lv_grad_t * next_in_cache(lv_grad_t * item)
{
 801a638:	b580      	push	{r7, lr}
 801a63a:	b084      	sub	sp, #16
 801a63c:	af00      	add	r7, sp, #0
 801a63e:	6078      	str	r0, [r7, #4]
    if(grad_cache_size == 0) return NULL;
 801a640:	4b0f      	ldr	r3, [pc, #60]	; (801a680 <next_in_cache+0x48>)
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	2b00      	cmp	r3, #0
 801a646:	d101      	bne.n	801a64c <next_in_cache+0x14>
 801a648:	2300      	movs	r3, #0
 801a64a:	e015      	b.n	801a678 <next_in_cache+0x40>

    if(item == NULL)
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	2b00      	cmp	r3, #0
 801a650:	d102      	bne.n	801a658 <next_in_cache+0x20>
        return (lv_grad_t *)LV_GC_ROOT(_lv_grad_cache_mem);
 801a652:	4b0c      	ldr	r3, [pc, #48]	; (801a684 <next_in_cache+0x4c>)
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	e00f      	b.n	801a678 <next_in_cache+0x40>

    size_t s = get_cache_item_size(item);
 801a658:	6878      	ldr	r0, [r7, #4]
 801a65a:	f7ff ffd9 	bl	801a610 <get_cache_item_size>
 801a65e:	60f8      	str	r0, [r7, #12]
    /*Compute the size for this cache item*/
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 801a660:	687a      	ldr	r2, [r7, #4]
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	441a      	add	r2, r3
 801a666:	4b08      	ldr	r3, [pc, #32]	; (801a688 <next_in_cache+0x50>)
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	429a      	cmp	r2, r3
 801a66c:	d301      	bcc.n	801a672 <next_in_cache+0x3a>
 801a66e:	2300      	movs	r3, #0
 801a670:	e002      	b.n	801a678 <next_in_cache+0x40>
    else return (lv_grad_t *)((uint8_t *)item + s);
 801a672:	687a      	ldr	r2, [r7, #4]
 801a674:	68fb      	ldr	r3, [r7, #12]
 801a676:	4413      	add	r3, r2
}
 801a678:	4618      	mov	r0, r3
 801a67a:	3710      	adds	r7, #16
 801a67c:	46bd      	mov	sp, r7
 801a67e:	bd80      	pop	{r7, pc}
 801a680:	20000784 	.word	0x20000784
 801a684:	20000ac0 	.word	0x20000ac0
 801a688:	20000788 	.word	0x20000788

0801a68c <iterate_cache>:

static lv_res_t iterate_cache(op_cache_t func, void * ctx, lv_grad_t ** out)
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b086      	sub	sp, #24
 801a690:	af00      	add	r7, sp, #0
 801a692:	60f8      	str	r0, [r7, #12]
 801a694:	60b9      	str	r1, [r7, #8]
 801a696:	607a      	str	r2, [r7, #4]
    lv_grad_t * first = next_in_cache(NULL);
 801a698:	2000      	movs	r0, #0
 801a69a:	f7ff ffcd 	bl	801a638 <next_in_cache>
 801a69e:	6178      	str	r0, [r7, #20]
    while(first != NULL && first->life) {
 801a6a0:	e012      	b.n	801a6c8 <iterate_cache+0x3c>
        if((*func)(first, ctx) == LV_RES_OK) {
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	68b9      	ldr	r1, [r7, #8]
 801a6a6:	6978      	ldr	r0, [r7, #20]
 801a6a8:	4798      	blx	r3
 801a6aa:	4603      	mov	r3, r0
 801a6ac:	2b01      	cmp	r3, #1
 801a6ae:	d107      	bne.n	801a6c0 <iterate_cache+0x34>
            if(out != NULL) *out = first;
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d002      	beq.n	801a6bc <iterate_cache+0x30>
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	697a      	ldr	r2, [r7, #20]
 801a6ba:	601a      	str	r2, [r3, #0]
            return LV_RES_OK;
 801a6bc:	2301      	movs	r3, #1
 801a6be:	e00d      	b.n	801a6dc <iterate_cache+0x50>
        }
        first = next_in_cache(first);
 801a6c0:	6978      	ldr	r0, [r7, #20]
 801a6c2:	f7ff ffb9 	bl	801a638 <next_in_cache>
 801a6c6:	6178      	str	r0, [r7, #20]
    while(first != NULL && first->life) {
 801a6c8:	697b      	ldr	r3, [r7, #20]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d005      	beq.n	801a6da <iterate_cache+0x4e>
 801a6ce:	697b      	ldr	r3, [r7, #20]
 801a6d0:	685b      	ldr	r3, [r3, #4]
 801a6d2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d1e3      	bne.n	801a6a2 <iterate_cache+0x16>
    }
    return LV_RES_INV;
 801a6da:	2300      	movs	r3, #0
}
 801a6dc:	4618      	mov	r0, r3
 801a6de:	3718      	adds	r7, #24
 801a6e0:	46bd      	mov	sp, r7
 801a6e2:	bd80      	pop	{r7, pc}

0801a6e4 <find_oldest_item_life>:

static lv_res_t find_oldest_item_life(lv_grad_t * c, void * ctx)
{
 801a6e4:	b480      	push	{r7}
 801a6e6:	b085      	sub	sp, #20
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	6078      	str	r0, [r7, #4]
 801a6ec:	6039      	str	r1, [r7, #0]
    uint32_t * min_life = (uint32_t *)ctx;
 801a6ee:	683b      	ldr	r3, [r7, #0]
 801a6f0:	60fb      	str	r3, [r7, #12]
    if(c->life < *min_life) *min_life = c->life;
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	685b      	ldr	r3, [r3, #4]
 801a6f6:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801a6fa:	461a      	mov	r2, r3
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	429a      	cmp	r2, r3
 801a702:	d206      	bcs.n	801a712 <find_oldest_item_life+0x2e>
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	685b      	ldr	r3, [r3, #4]
 801a708:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801a70c:	461a      	mov	r2, r3
 801a70e:	68fb      	ldr	r3, [r7, #12]
 801a710:	601a      	str	r2, [r3, #0]
    return LV_RES_INV;
 801a712:	2300      	movs	r3, #0
}
 801a714:	4618      	mov	r0, r3
 801a716:	3714      	adds	r7, #20
 801a718:	46bd      	mov	sp, r7
 801a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a71e:	4770      	bx	lr

0801a720 <free_item>:

static void free_item(lv_grad_t * c)
{
 801a720:	b580      	push	{r7, lr}
 801a722:	b086      	sub	sp, #24
 801a724:	af00      	add	r7, sp, #0
 801a726:	6078      	str	r0, [r7, #4]
    size_t size = get_cache_item_size(c);
 801a728:	6878      	ldr	r0, [r7, #4]
 801a72a:	f7ff ff71 	bl	801a610 <get_cache_item_size>
 801a72e:	6178      	str	r0, [r7, #20]
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 801a730:	4b1d      	ldr	r3, [pc, #116]	; (801a7a8 <free_item+0x88>)
 801a732:	681a      	ldr	r2, [r3, #0]
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	1ad3      	subs	r3, r2, r3
 801a738:	461a      	mov	r2, r3
 801a73a:	697b      	ldr	r3, [r7, #20]
 801a73c:	1ad3      	subs	r3, r2, r3
 801a73e:	613b      	str	r3, [r7, #16]
    grad_cache_end -= size;
 801a740:	4b19      	ldr	r3, [pc, #100]	; (801a7a8 <free_item+0x88>)
 801a742:	681a      	ldr	r2, [r3, #0]
 801a744:	697b      	ldr	r3, [r7, #20]
 801a746:	425b      	negs	r3, r3
 801a748:	4413      	add	r3, r2
 801a74a:	4a17      	ldr	r2, [pc, #92]	; (801a7a8 <free_item+0x88>)
 801a74c:	6013      	str	r3, [r2, #0]
    if(next_items_size) {
 801a74e:	693b      	ldr	r3, [r7, #16]
 801a750:	2b00      	cmp	r3, #0
 801a752:	d024      	beq.n	801a79e <free_item+0x7e>
        uint8_t * old = (uint8_t *)c;
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	60fb      	str	r3, [r7, #12]
        lv_memcpy(c, ((uint8_t *)c) + size, next_items_size);
 801a758:	687a      	ldr	r2, [r7, #4]
 801a75a:	697b      	ldr	r3, [r7, #20]
 801a75c:	4413      	add	r3, r2
 801a75e:	693a      	ldr	r2, [r7, #16]
 801a760:	4619      	mov	r1, r3
 801a762:	6878      	ldr	r0, [r7, #4]
 801a764:	f009 fd54 	bl	8024210 <lv_memcpy>
        /* Then need to fix all internal pointers too */
        while((uint8_t *)c != grad_cache_end) {
 801a768:	e00d      	b.n	801a786 <free_item+0x66>
            c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	689a      	ldr	r2, [r3, #8]
 801a76e:	697b      	ldr	r3, [r7, #20]
 801a770:	425b      	negs	r3, r3
 801a772:	441a      	add	r2, r3
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	609a      	str	r2, [r3, #8]
            c->hmap = (lv_color32_t *)(((uint8_t *)c->hmap) - size);
#if LV_DITHER_ERROR_DIFFUSION == 1
            c->error_acc = (lv_scolor24_t *)(((uint8_t *)c->error_acc) - size);
#endif
#endif
            c = (lv_grad_t *)(((uint8_t *)c) + get_cache_item_size(c));
 801a778:	6878      	ldr	r0, [r7, #4]
 801a77a:	f7ff ff49 	bl	801a610 <get_cache_item_size>
 801a77e:	4602      	mov	r2, r0
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	4413      	add	r3, r2
 801a784:	607b      	str	r3, [r7, #4]
        while((uint8_t *)c != grad_cache_end) {
 801a786:	4b08      	ldr	r3, [pc, #32]	; (801a7a8 <free_item+0x88>)
 801a788:	681b      	ldr	r3, [r3, #0]
 801a78a:	687a      	ldr	r2, [r7, #4]
 801a78c:	429a      	cmp	r2, r3
 801a78e:	d1ec      	bne.n	801a76a <free_item+0x4a>
        }
        lv_memset_00(old + next_items_size, size);
 801a790:	68fa      	ldr	r2, [r7, #12]
 801a792:	693b      	ldr	r3, [r7, #16]
 801a794:	4413      	add	r3, r2
 801a796:	6979      	ldr	r1, [r7, #20]
 801a798:	4618      	mov	r0, r3
 801a79a:	f009 ffdf 	bl	802475c <lv_memset_00>
    }
}
 801a79e:	bf00      	nop
 801a7a0:	3718      	adds	r7, #24
 801a7a2:	46bd      	mov	sp, r7
 801a7a4:	bd80      	pop	{r7, pc}
 801a7a6:	bf00      	nop
 801a7a8:	20000788 	.word	0x20000788

0801a7ac <kill_oldest_item>:

static lv_res_t kill_oldest_item(lv_grad_t * c, void * ctx)
{
 801a7ac:	b580      	push	{r7, lr}
 801a7ae:	b084      	sub	sp, #16
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	6078      	str	r0, [r7, #4]
 801a7b4:	6039      	str	r1, [r7, #0]
    uint32_t * min_life = (uint32_t *)ctx;
 801a7b6:	683b      	ldr	r3, [r7, #0]
 801a7b8:	60fb      	str	r3, [r7, #12]
    if(c->life == *min_life) {
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	685b      	ldr	r3, [r3, #4]
 801a7be:	f3c3 031d 	ubfx	r3, r3, #0, #30
 801a7c2:	461a      	mov	r2, r3
 801a7c4:	68fb      	ldr	r3, [r7, #12]
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	429a      	cmp	r2, r3
 801a7ca:	d104      	bne.n	801a7d6 <kill_oldest_item+0x2a>
        /*Found, let's kill it*/
        free_item(c);
 801a7cc:	6878      	ldr	r0, [r7, #4]
 801a7ce:	f7ff ffa7 	bl	801a720 <free_item>
        return LV_RES_OK;
 801a7d2:	2301      	movs	r3, #1
 801a7d4:	e000      	b.n	801a7d8 <kill_oldest_item+0x2c>
    }
    return LV_RES_INV;
 801a7d6:	2300      	movs	r3, #0
}
 801a7d8:	4618      	mov	r0, r3
 801a7da:	3710      	adds	r7, #16
 801a7dc:	46bd      	mov	sp, r7
 801a7de:	bd80      	pop	{r7, pc}

0801a7e0 <find_item>:

static lv_res_t find_item(lv_grad_t * c, void * ctx)
{
 801a7e0:	b480      	push	{r7}
 801a7e2:	b085      	sub	sp, #20
 801a7e4:	af00      	add	r7, sp, #0
 801a7e6:	6078      	str	r0, [r7, #4]
 801a7e8:	6039      	str	r1, [r7, #0]
    uint32_t * k = (uint32_t *)ctx;
 801a7ea:	683b      	ldr	r3, [r7, #0]
 801a7ec:	60fb      	str	r3, [r7, #12]
    if(c->key == *k) return LV_RES_OK;
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	681a      	ldr	r2, [r3, #0]
 801a7f2:	68fb      	ldr	r3, [r7, #12]
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	429a      	cmp	r2, r3
 801a7f8:	d101      	bne.n	801a7fe <find_item+0x1e>
 801a7fa:	2301      	movs	r3, #1
 801a7fc:	e000      	b.n	801a800 <find_item+0x20>
    return LV_RES_INV;
 801a7fe:	2300      	movs	r3, #0
}
 801a800:	4618      	mov	r0, r3
 801a802:	3714      	adds	r7, #20
 801a804:	46bd      	mov	sp, r7
 801a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a80a:	4770      	bx	lr

0801a80c <allocate_item>:

static lv_grad_t * allocate_item(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
{
 801a80c:	b580      	push	{r7, lr}
 801a80e:	b088      	sub	sp, #32
 801a810:	af00      	add	r7, sp, #0
 801a812:	6078      	str	r0, [r7, #4]
 801a814:	460b      	mov	r3, r1
 801a816:	807b      	strh	r3, [r7, #2]
 801a818:	4613      	mov	r3, r2
 801a81a:	803b      	strh	r3, [r7, #0]
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	795b      	ldrb	r3, [r3, #5]
 801a820:	f003 0307 	and.w	r3, r3, #7
 801a824:	b2db      	uxtb	r3, r3
 801a826:	2b02      	cmp	r3, #2
 801a828:	d102      	bne.n	801a830 <allocate_item+0x24>
 801a82a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a82e:	e001      	b.n	801a834 <allocate_item+0x28>
 801a830:	f9b7 3000 	ldrsh.w	r3, [r7]
 801a834:	82fb      	strh	r3, [r7, #22]
    lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 801a836:	f9b7 2000 	ldrsh.w	r2, [r7]
 801a83a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a83e:	4293      	cmp	r3, r2
 801a840:	bfb8      	it	lt
 801a842:	4613      	movlt	r3, r2
 801a844:	82bb      	strh	r3, [r7, #20]
                                           no dithering is selected where it's used vertically */

    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 801a846:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a84a:	3303      	adds	r3, #3
 801a84c:	f023 0303 	bic.w	r3, r3, #3
 801a850:	3310      	adds	r3, #16
 801a852:	613b      	str	r3, [r7, #16]
#if LV_DITHER_ERROR_DIFFUSION == 1
    req_size += ALIGN(w * sizeof(lv_scolor24_t));
#endif
#endif

    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 801a854:	4b49      	ldr	r3, [pc, #292]	; (801a97c <allocate_item+0x170>)
 801a856:	681a      	ldr	r2, [r3, #0]
 801a858:	4b49      	ldr	r3, [pc, #292]	; (801a980 <allocate_item+0x174>)
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	1ad3      	subs	r3, r2, r3
 801a85e:	61fb      	str	r3, [r7, #28]
    lv_grad_t * item = NULL;
 801a860:	2300      	movs	r3, #0
 801a862:	61bb      	str	r3, [r7, #24]
    if(req_size + act_size < grad_cache_size) {
 801a864:	693a      	ldr	r2, [r7, #16]
 801a866:	69fb      	ldr	r3, [r7, #28]
 801a868:	441a      	add	r2, r3
 801a86a:	4b46      	ldr	r3, [pc, #280]	; (801a984 <allocate_item+0x178>)
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	429a      	cmp	r2, r3
 801a870:	d208      	bcs.n	801a884 <allocate_item+0x78>
        item = (lv_grad_t *)grad_cache_end;
 801a872:	4b42      	ldr	r3, [pc, #264]	; (801a97c <allocate_item+0x170>)
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	61bb      	str	r3, [r7, #24]
        item->not_cached = 0;
 801a878:	69ba      	ldr	r2, [r7, #24]
 801a87a:	79d3      	ldrb	r3, [r2, #7]
 801a87c:	f36f 13c7 	bfc	r3, #7, #1
 801a880:	71d3      	strb	r3, [r2, #7]
 801a882:	e03e      	b.n	801a902 <allocate_item+0xf6>
    }
    else {
        /*Need to evict items from cache until we find enough space to allocate this one */
        if(req_size <= grad_cache_size) {
 801a884:	4b3f      	ldr	r3, [pc, #252]	; (801a984 <allocate_item+0x178>)
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	693a      	ldr	r2, [r7, #16]
 801a88a:	429a      	cmp	r2, r3
 801a88c:	d827      	bhi.n	801a8de <allocate_item+0xd2>
            while(act_size + req_size > grad_cache_size) {
 801a88e:	e016      	b.n	801a8be <allocate_item+0xb2>
                uint32_t oldest_life = UINT32_MAX;
 801a890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a894:	60bb      	str	r3, [r7, #8]
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 801a896:	f107 0308 	add.w	r3, r7, #8
 801a89a:	2200      	movs	r2, #0
 801a89c:	4619      	mov	r1, r3
 801a89e:	483a      	ldr	r0, [pc, #232]	; (801a988 <allocate_item+0x17c>)
 801a8a0:	f7ff fef4 	bl	801a68c <iterate_cache>
                iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 801a8a4:	f107 0308 	add.w	r3, r7, #8
 801a8a8:	2200      	movs	r2, #0
 801a8aa:	4619      	mov	r1, r3
 801a8ac:	4837      	ldr	r0, [pc, #220]	; (801a98c <allocate_item+0x180>)
 801a8ae:	f7ff feed 	bl	801a68c <iterate_cache>
                act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 801a8b2:	4b32      	ldr	r3, [pc, #200]	; (801a97c <allocate_item+0x170>)
 801a8b4:	681a      	ldr	r2, [r3, #0]
 801a8b6:	4b32      	ldr	r3, [pc, #200]	; (801a980 <allocate_item+0x174>)
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	1ad3      	subs	r3, r2, r3
 801a8bc:	61fb      	str	r3, [r7, #28]
            while(act_size + req_size > grad_cache_size) {
 801a8be:	69fa      	ldr	r2, [r7, #28]
 801a8c0:	693b      	ldr	r3, [r7, #16]
 801a8c2:	441a      	add	r2, r3
 801a8c4:	4b2f      	ldr	r3, [pc, #188]	; (801a984 <allocate_item+0x178>)
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	429a      	cmp	r2, r3
 801a8ca:	d8e1      	bhi.n	801a890 <allocate_item+0x84>
            }
            item = (lv_grad_t *)grad_cache_end;
 801a8cc:	4b2b      	ldr	r3, [pc, #172]	; (801a97c <allocate_item+0x170>)
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	61bb      	str	r3, [r7, #24]
            item->not_cached = 0;
 801a8d2:	69ba      	ldr	r2, [r7, #24]
 801a8d4:	79d3      	ldrb	r3, [r2, #7]
 801a8d6:	f36f 13c7 	bfc	r3, #7, #1
 801a8da:	71d3      	strb	r3, [r2, #7]
 801a8dc:	e011      	b.n	801a902 <allocate_item+0xf6>
        }
        else {
            /*The cache is too small. Allocate the item manually and free it later.*/
            item = lv_mem_alloc(req_size);
 801a8de:	6938      	ldr	r0, [r7, #16]
 801a8e0:	f009 fb08 	bl	8023ef4 <lv_mem_alloc>
 801a8e4:	61b8      	str	r0, [r7, #24]
            LV_ASSERT_MALLOC(item);
 801a8e6:	69bb      	ldr	r3, [r7, #24]
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d100      	bne.n	801a8ee <allocate_item+0xe2>
 801a8ec:	e7fe      	b.n	801a8ec <allocate_item+0xe0>
            if(item == NULL) return NULL;
 801a8ee:	69bb      	ldr	r3, [r7, #24]
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d101      	bne.n	801a8f8 <allocate_item+0xec>
 801a8f4:	2300      	movs	r3, #0
 801a8f6:	e03c      	b.n	801a972 <allocate_item+0x166>
            item->not_cached = 1;
 801a8f8:	69ba      	ldr	r2, [r7, #24]
 801a8fa:	79d3      	ldrb	r3, [r2, #7]
 801a8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a900:	71d3      	strb	r3, [r2, #7]
        }
    }

    item->key = compute_key(g, size, w);
 801a902:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801a906:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a90a:	4619      	mov	r1, r3
 801a90c:	6878      	ldr	r0, [r7, #4]
 801a90e:	f7ff fe66 	bl	801a5de <compute_key>
 801a912:	4602      	mov	r2, r0
 801a914:	69bb      	ldr	r3, [r7, #24]
 801a916:	601a      	str	r2, [r3, #0]
    item->life = 1;
 801a918:	69ba      	ldr	r2, [r7, #24]
 801a91a:	6853      	ldr	r3, [r2, #4]
 801a91c:	2101      	movs	r1, #1
 801a91e:	f361 031d 	bfi	r3, r1, #0, #30
 801a922:	6053      	str	r3, [r2, #4]
    item->filled = 0;
 801a924:	69ba      	ldr	r2, [r7, #24]
 801a926:	79d3      	ldrb	r3, [r2, #7]
 801a928:	f36f 1386 	bfc	r3, #6, #1
 801a92c:	71d3      	strb	r3, [r2, #7]
    item->alloc_size = map_size;
 801a92e:	69bb      	ldr	r3, [r7, #24]
 801a930:	8aba      	ldrh	r2, [r7, #20]
 801a932:	819a      	strh	r2, [r3, #12]
    item->size = size;
 801a934:	69bb      	ldr	r3, [r7, #24]
 801a936:	8afa      	ldrh	r2, [r7, #22]
 801a938:	81da      	strh	r2, [r3, #14]
    if(item->not_cached) {
 801a93a:	69bb      	ldr	r3, [r7, #24]
 801a93c:	79db      	ldrb	r3, [r3, #7]
 801a93e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801a942:	b2db      	uxtb	r3, r3
 801a944:	2b00      	cmp	r3, #0
 801a946:	d007      	beq.n	801a958 <allocate_item+0x14c>
        uint8_t * p = (uint8_t *)item;
 801a948:	69bb      	ldr	r3, [r7, #24]
 801a94a:	60fb      	str	r3, [r7, #12]
        item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 801a94c:	68fb      	ldr	r3, [r7, #12]
 801a94e:	f103 0210 	add.w	r2, r3, #16
 801a952:	69bb      	ldr	r3, [r7, #24]
 801a954:	609a      	str	r2, [r3, #8]
 801a956:	e00b      	b.n	801a970 <allocate_item+0x164>
        item->w = w;
#endif
#endif
    }
    else {
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 801a958:	4b08      	ldr	r3, [pc, #32]	; (801a97c <allocate_item+0x170>)
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	f103 0210 	add.w	r2, r3, #16
 801a960:	69bb      	ldr	r3, [r7, #24]
 801a962:	609a      	str	r2, [r3, #8]
        item->error_acc = (lv_scolor24_t *)(grad_cache_end + ALIGN(sizeof(*item)) + ALIGN(size * sizeof(lv_grad_color_t)) +
                                            ALIGN(map_size * sizeof(lv_color_t)));
        item->w = w;
#endif
#endif
        grad_cache_end += req_size;
 801a964:	4b05      	ldr	r3, [pc, #20]	; (801a97c <allocate_item+0x170>)
 801a966:	681a      	ldr	r2, [r3, #0]
 801a968:	693b      	ldr	r3, [r7, #16]
 801a96a:	4413      	add	r3, r2
 801a96c:	4a03      	ldr	r2, [pc, #12]	; (801a97c <allocate_item+0x170>)
 801a96e:	6013      	str	r3, [r2, #0]
    }
    return item;
 801a970:	69bb      	ldr	r3, [r7, #24]
}
 801a972:	4618      	mov	r0, r3
 801a974:	3720      	adds	r7, #32
 801a976:	46bd      	mov	sp, r7
 801a978:	bd80      	pop	{r7, pc}
 801a97a:	bf00      	nop
 801a97c:	20000788 	.word	0x20000788
 801a980:	20000ac0 	.word	0x20000ac0
 801a984:	20000784 	.word	0x20000784
 801a988:	0801a6e5 	.word	0x0801a6e5
 801a98c:	0801a7ad 	.word	0x0801a7ad

0801a990 <lv_gradient_set_cache_size>:
    LV_GC_ROOT(_lv_grad_cache_mem) = grad_cache_end = NULL;
    grad_cache_size = 0;
}

void lv_gradient_set_cache_size(size_t max_bytes)
{
 801a990:	b580      	push	{r7, lr}
 801a992:	b082      	sub	sp, #8
 801a994:	af00      	add	r7, sp, #0
 801a996:	6078      	str	r0, [r7, #4]
    lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 801a998:	4b10      	ldr	r3, [pc, #64]	; (801a9dc <lv_gradient_set_cache_size+0x4c>)
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	4618      	mov	r0, r3
 801a99e:	f009 fad9 	bl	8023f54 <lv_mem_free>
    grad_cache_end = LV_GC_ROOT(_lv_grad_cache_mem) = lv_mem_alloc(max_bytes);
 801a9a2:	6878      	ldr	r0, [r7, #4]
 801a9a4:	f009 faa6 	bl	8023ef4 <lv_mem_alloc>
 801a9a8:	4603      	mov	r3, r0
 801a9aa:	4a0c      	ldr	r2, [pc, #48]	; (801a9dc <lv_gradient_set_cache_size+0x4c>)
 801a9ac:	6013      	str	r3, [r2, #0]
 801a9ae:	4b0b      	ldr	r3, [pc, #44]	; (801a9dc <lv_gradient_set_cache_size+0x4c>)
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	4a0b      	ldr	r2, [pc, #44]	; (801a9e0 <lv_gradient_set_cache_size+0x50>)
 801a9b4:	6013      	str	r3, [r2, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_grad_cache_mem));
 801a9b6:	4b09      	ldr	r3, [pc, #36]	; (801a9dc <lv_gradient_set_cache_size+0x4c>)
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d100      	bne.n	801a9c0 <lv_gradient_set_cache_size+0x30>
 801a9be:	e7fe      	b.n	801a9be <lv_gradient_set_cache_size+0x2e>
    lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 801a9c0:	4b06      	ldr	r3, [pc, #24]	; (801a9dc <lv_gradient_set_cache_size+0x4c>)
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	6879      	ldr	r1, [r7, #4]
 801a9c6:	4618      	mov	r0, r3
 801a9c8:	f009 fec8 	bl	802475c <lv_memset_00>
    grad_cache_size = max_bytes;
 801a9cc:	4a05      	ldr	r2, [pc, #20]	; (801a9e4 <lv_gradient_set_cache_size+0x54>)
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	6013      	str	r3, [r2, #0]
}
 801a9d2:	bf00      	nop
 801a9d4:	3708      	adds	r7, #8
 801a9d6:	46bd      	mov	sp, r7
 801a9d8:	bd80      	pop	{r7, pc}
 801a9da:	bf00      	nop
 801a9dc:	20000ac0 	.word	0x20000ac0
 801a9e0:	20000788 	.word	0x20000788
 801a9e4:	20000784 	.word	0x20000784

0801a9e8 <lv_gradient_get>:

lv_grad_t * lv_gradient_get(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
{
 801a9e8:	b590      	push	{r4, r7, lr}
 801a9ea:	b087      	sub	sp, #28
 801a9ec:	af00      	add	r7, sp, #0
 801a9ee:	6078      	str	r0, [r7, #4]
 801a9f0:	460b      	mov	r3, r1
 801a9f2:	807b      	strh	r3, [r7, #2]
 801a9f4:	4613      	mov	r3, r2
 801a9f6:	803b      	strh	r3, [r7, #0]
    /* No gradient, no cache */
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	795b      	ldrb	r3, [r3, #5]
 801a9fc:	f003 0307 	and.w	r3, r3, #7
 801aa00:	b2db      	uxtb	r3, r3
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d101      	bne.n	801aa0a <lv_gradient_get+0x22>
 801aa06:	2300      	movs	r3, #0
 801aa08:	e06d      	b.n	801aae6 <lv_gradient_get+0xfe>

    /* Step 0: Check if the cache exist (else create it) */
    static bool inited = false;
    if(!inited) {
 801aa0a:	4b39      	ldr	r3, [pc, #228]	; (801aaf0 <lv_gradient_get+0x108>)
 801aa0c:	781b      	ldrb	r3, [r3, #0]
 801aa0e:	f083 0301 	eor.w	r3, r3, #1
 801aa12:	b2db      	uxtb	r3, r3
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d005      	beq.n	801aa24 <lv_gradient_get+0x3c>
        lv_gradient_set_cache_size(LV_GRAD_CACHE_DEF_SIZE);
 801aa18:	2000      	movs	r0, #0
 801aa1a:	f7ff ffb9 	bl	801a990 <lv_gradient_set_cache_size>
        inited = true;
 801aa1e:	4b34      	ldr	r3, [pc, #208]	; (801aaf0 <lv_gradient_get+0x108>)
 801aa20:	2201      	movs	r2, #1
 801aa22:	701a      	strb	r2, [r3, #0]
    }

    /* Step 1: Search cache for the given key */
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	795b      	ldrb	r3, [r3, #5]
 801aa28:	f003 0307 	and.w	r3, r3, #7
 801aa2c:	b2db      	uxtb	r3, r3
 801aa2e:	2b02      	cmp	r3, #2
 801aa30:	d102      	bne.n	801aa38 <lv_gradient_get+0x50>
 801aa32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801aa36:	e001      	b.n	801aa3c <lv_gradient_get+0x54>
 801aa38:	f9b7 3000 	ldrsh.w	r3, [r7]
 801aa3c:	82bb      	strh	r3, [r7, #20]
    uint32_t key = compute_key(g, size, w);
 801aa3e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801aa42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801aa46:	4619      	mov	r1, r3
 801aa48:	6878      	ldr	r0, [r7, #4]
 801aa4a:	f7ff fdc8 	bl	801a5de <compute_key>
 801aa4e:	4603      	mov	r3, r0
 801aa50:	613b      	str	r3, [r7, #16]
    lv_grad_t * item = NULL;
 801aa52:	2300      	movs	r3, #0
 801aa54:	60fb      	str	r3, [r7, #12]
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 801aa56:	f107 020c 	add.w	r2, r7, #12
 801aa5a:	f107 0310 	add.w	r3, r7, #16
 801aa5e:	4619      	mov	r1, r3
 801aa60:	4824      	ldr	r0, [pc, #144]	; (801aaf4 <lv_gradient_get+0x10c>)
 801aa62:	f7ff fe13 	bl	801a68c <iterate_cache>
 801aa66:	4603      	mov	r3, r0
 801aa68:	2b01      	cmp	r3, #1
 801aa6a:	d10c      	bne.n	801aa86 <lv_gradient_get+0x9e>
        item->life++; /* Don't forget to bump the counter */
 801aa6c:	68fb      	ldr	r3, [r7, #12]
 801aa6e:	685a      	ldr	r2, [r3, #4]
 801aa70:	f3c2 021d 	ubfx	r2, r2, #0, #30
 801aa74:	1c51      	adds	r1, r2, #1
 801aa76:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 801aa7a:	685a      	ldr	r2, [r3, #4]
 801aa7c:	f361 021d 	bfi	r2, r1, #0, #30
 801aa80:	605a      	str	r2, [r3, #4]
        return item;
 801aa82:	68fb      	ldr	r3, [r7, #12]
 801aa84:	e02f      	b.n	801aae6 <lv_gradient_get+0xfe>
    }

    /* Step 2: Need to allocate an item for it */
    item = allocate_item(g, w, h);
 801aa86:	f9b7 2000 	ldrsh.w	r2, [r7]
 801aa8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801aa8e:	4619      	mov	r1, r3
 801aa90:	6878      	ldr	r0, [r7, #4]
 801aa92:	f7ff febb 	bl	801a80c <allocate_item>
 801aa96:	4603      	mov	r3, r0
 801aa98:	60fb      	str	r3, [r7, #12]
    if(item == NULL) {
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d101      	bne.n	801aaa4 <lv_gradient_get+0xbc>
        LV_LOG_WARN("Faild to allcoate item for teh gradient");
        return item;
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	e020      	b.n	801aae6 <lv_gradient_get+0xfe>
    }
#if LV_DITHER_ERROR_DIFFUSION == 1
    lv_memset_00(item->error_acc, w * sizeof(lv_scolor24_t));
#endif
#else
    for(lv_coord_t i = 0; i < item->size; i++) {
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	82fb      	strh	r3, [r7, #22]
 801aaa8:	e015      	b.n	801aad6 <lv_gradient_get+0xee>
        item->map[i] = lv_gradient_calculate(g, item->size, i);
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801aab0:	68fb      	ldr	r3, [r7, #12]
 801aab2:	689a      	ldr	r2, [r3, #8]
 801aab4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801aab8:	18d4      	adds	r4, r2, r3
 801aaba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801aabe:	461a      	mov	r2, r3
 801aac0:	6878      	ldr	r0, [r7, #4]
 801aac2:	f000 f819 	bl	801aaf8 <lv_gradient_calculate>
 801aac6:	4603      	mov	r3, r0
 801aac8:	7023      	strb	r3, [r4, #0]
    for(lv_coord_t i = 0; i < item->size; i++) {
 801aaca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801aace:	b29b      	uxth	r3, r3
 801aad0:	3301      	adds	r3, #1
 801aad2:	b29b      	uxth	r3, r3
 801aad4:	82fb      	strh	r3, [r7, #22]
 801aad6:	68fb      	ldr	r3, [r7, #12]
 801aad8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801aadc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801aae0:	429a      	cmp	r2, r3
 801aae2:	dbe2      	blt.n	801aaaa <lv_gradient_get+0xc2>
    }
#endif

    return item;
 801aae4:	68fb      	ldr	r3, [r7, #12]
}
 801aae6:	4618      	mov	r0, r3
 801aae8:	371c      	adds	r7, #28
 801aaea:	46bd      	mov	sp, r7
 801aaec:	bd90      	pop	{r4, r7, pc}
 801aaee:	bf00      	nop
 801aaf0:	2000078c 	.word	0x2000078c
 801aaf4:	0801a7e1 	.word	0x0801a7e1

0801aaf8 <lv_gradient_calculate>:

LV_ATTRIBUTE_FAST_MEM lv_grad_color_t lv_gradient_calculate(const lv_grad_dsc_t * dsc, lv_coord_t range,
                                                            lv_coord_t frac)
{
 801aaf8:	b580      	push	{r7, lr}
 801aafa:	b08c      	sub	sp, #48	; 0x30
 801aafc:	af00      	add	r7, sp, #0
 801aafe:	6078      	str	r0, [r7, #4]
 801ab00:	460b      	mov	r3, r1
 801ab02:	807b      	strh	r3, [r7, #2]
 801ab04:	4613      	mov	r3, r2
 801ab06:	803b      	strh	r3, [r7, #0]
    lv_grad_color_t tmp;
    lv_color32_t one, two;
    /*Clip out-of-bounds first*/
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	785b      	ldrb	r3, [r3, #1]
 801ab0c:	461a      	mov	r2, r3
 801ab0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ab12:	fb02 f303 	mul.w	r3, r2, r3
 801ab16:	121b      	asrs	r3, r3, #8
 801ab18:	62fb      	str	r3, [r7, #44]	; 0x2c
    if(frac <= min) {
 801ab1a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801ab1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ab20:	429a      	cmp	r2, r3
 801ab22:	db04      	blt.n	801ab2e <lv_gradient_calculate+0x36>
        GRAD_CONV(tmp, dsc->stops[0].color);
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	781b      	ldrb	r3, [r3, #0]
 801ab28:	763b      	strb	r3, [r7, #24]
        return tmp;
 801ab2a:	7e3b      	ldrb	r3, [r7, #24]
 801ab2c:	e0c6      	b.n	801acbc <lv_gradient_calculate+0x1c4>
    }

    int32_t max = (dsc->stops[dsc->stops_count - 1].frac * range) >> 8;
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	791b      	ldrb	r3, [r3, #4]
 801ab32:	3b01      	subs	r3, #1
 801ab34:	687a      	ldr	r2, [r7, #4]
 801ab36:	005b      	lsls	r3, r3, #1
 801ab38:	4413      	add	r3, r2
 801ab3a:	785b      	ldrb	r3, [r3, #1]
 801ab3c:	461a      	mov	r2, r3
 801ab3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ab42:	fb02 f303 	mul.w	r3, r2, r3
 801ab46:	121b      	asrs	r3, r3, #8
 801ab48:	623b      	str	r3, [r7, #32]
    if(frac >= max) {
 801ab4a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801ab4e:	6a3a      	ldr	r2, [r7, #32]
 801ab50:	429a      	cmp	r2, r3
 801ab52:	dc08      	bgt.n	801ab66 <lv_gradient_calculate+0x6e>
        GRAD_CONV(tmp, dsc->stops[dsc->stops_count - 1].color);
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	791b      	ldrb	r3, [r3, #4]
 801ab58:	1e5a      	subs	r2, r3, #1
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 801ab60:	763b      	strb	r3, [r7, #24]
        return tmp;
 801ab62:	7e3b      	ldrb	r3, [r7, #24]
 801ab64:	e0aa      	b.n	801acbc <lv_gradient_calculate+0x1c4>
    }

    /*Find the 2 closest stop now*/
    int32_t d = 0;
 801ab66:	2300      	movs	r3, #0
 801ab68:	62bb      	str	r3, [r7, #40]	; 0x28
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 801ab6a:	2301      	movs	r3, #1
 801ab6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ab70:	e049      	b.n	801ac06 <lv_gradient_calculate+0x10e>
        int32_t cur = (dsc->stops[i].frac * range) >> 8;
 801ab72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ab76:	687a      	ldr	r2, [r7, #4]
 801ab78:	005b      	lsls	r3, r3, #1
 801ab7a:	4413      	add	r3, r2
 801ab7c:	785b      	ldrb	r3, [r3, #1]
 801ab7e:	461a      	mov	r2, r3
 801ab80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ab84:	fb02 f303 	mul.w	r3, r2, r3
 801ab88:	121b      	asrs	r3, r3, #8
 801ab8a:	61fb      	str	r3, [r7, #28]
        if(frac <= cur) {
 801ab8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 801ab90:	69fa      	ldr	r2, [r7, #28]
 801ab92:	429a      	cmp	r2, r3
 801ab94:	db32      	blt.n	801abfc <lv_gradient_calculate+0x104>
            one.full = lv_color_to32(dsc->stops[i - 1].color);
 801ab96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ab9a:	1e5a      	subs	r2, r3, #1
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801aba2:	f7ff fd0a 	bl	801a5ba <lv_color_to32>
 801aba6:	4603      	mov	r3, r0
 801aba8:	617b      	str	r3, [r7, #20]
            two.full = lv_color_to32(dsc->stops[i].color);
 801abaa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801abb4:	f7ff fd01 	bl	801a5ba <lv_color_to32>
 801abb8:	4603      	mov	r3, r0
 801abba:	613b      	str	r3, [r7, #16]
            min = (dsc->stops[i - 1].frac * range) >> 8;
 801abbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801abc0:	3b01      	subs	r3, #1
 801abc2:	687a      	ldr	r2, [r7, #4]
 801abc4:	005b      	lsls	r3, r3, #1
 801abc6:	4413      	add	r3, r2
 801abc8:	785b      	ldrb	r3, [r3, #1]
 801abca:	461a      	mov	r2, r3
 801abcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801abd0:	fb02 f303 	mul.w	r3, r2, r3
 801abd4:	121b      	asrs	r3, r3, #8
 801abd6:	62fb      	str	r3, [r7, #44]	; 0x2c
            max = (dsc->stops[i].frac * range) >> 8;
 801abd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801abdc:	687a      	ldr	r2, [r7, #4]
 801abde:	005b      	lsls	r3, r3, #1
 801abe0:	4413      	add	r3, r2
 801abe2:	785b      	ldrb	r3, [r3, #1]
 801abe4:	461a      	mov	r2, r3
 801abe6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801abea:	fb02 f303 	mul.w	r3, r2, r3
 801abee:	121b      	asrs	r3, r3, #8
 801abf0:	623b      	str	r3, [r7, #32]
            d = max - min;
 801abf2:	6a3a      	ldr	r2, [r7, #32]
 801abf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abf6:	1ad3      	subs	r3, r2, r3
 801abf8:	62bb      	str	r3, [r7, #40]	; 0x28
            break;
 801abfa:	e00a      	b.n	801ac12 <lv_gradient_calculate+0x11a>
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 801abfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ac00:	3301      	adds	r3, #1
 801ac02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	791b      	ldrb	r3, [r3, #4]
 801ac0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801ac0e:	429a      	cmp	r2, r3
 801ac10:	d3af      	bcc.n	801ab72 <lv_gradient_calculate+0x7a>
        }
    }

    LV_ASSERT(d != 0);
 801ac12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d100      	bne.n	801ac1a <lv_gradient_calculate+0x122>
 801ac18:	e7fe      	b.n	801ac18 <lv_gradient_calculate+0x120>

    /*Then interpolate*/
    frac -= min;
 801ac1a:	883a      	ldrh	r2, [r7, #0]
 801ac1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac1e:	b29b      	uxth	r3, r3
 801ac20:	1ad3      	subs	r3, r2, r3
 801ac22:	b29b      	uxth	r3, r3
 801ac24:	803b      	strh	r3, [r7, #0]
    lv_opa_t mix = (frac * 255) / d;
 801ac26:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ac2a:	4613      	mov	r3, r2
 801ac2c:	021b      	lsls	r3, r3, #8
 801ac2e:	1a9a      	subs	r2, r3, r2
 801ac30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac32:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac36:	76fb      	strb	r3, [r7, #27]
    lv_opa_t imix = 255 - mix;
 801ac38:	7efb      	ldrb	r3, [r7, #27]
 801ac3a:	43db      	mvns	r3, r3
 801ac3c:	76bb      	strb	r3, [r7, #26]

    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 801ac3e:	7c3b      	ldrb	r3, [r7, #16]
 801ac40:	461a      	mov	r2, r3
 801ac42:	7efb      	ldrb	r3, [r7, #27]
 801ac44:	fb03 f202 	mul.w	r2, r3, r2
 801ac48:	7d3b      	ldrb	r3, [r7, #20]
 801ac4a:	4619      	mov	r1, r3
 801ac4c:	7ebb      	ldrb	r3, [r7, #26]
 801ac4e:	fb01 f303 	mul.w	r3, r1, r3
 801ac52:	4413      	add	r3, r2
 801ac54:	461a      	mov	r2, r3
 801ac56:	4613      	mov	r3, r2
 801ac58:	021b      	lsls	r3, r3, #8
 801ac5a:	4413      	add	r3, r2
 801ac5c:	01db      	lsls	r3, r3, #7
 801ac5e:	4413      	add	r3, r2
 801ac60:	0f9b      	lsrs	r3, r3, #30
 801ac62:	b2d9      	uxtb	r1, r3
 801ac64:	7c7b      	ldrb	r3, [r7, #17]
 801ac66:	461a      	mov	r2, r3
 801ac68:	7efb      	ldrb	r3, [r7, #27]
 801ac6a:	fb03 f202 	mul.w	r2, r3, r2
 801ac6e:	7d7b      	ldrb	r3, [r7, #21]
 801ac70:	4618      	mov	r0, r3
 801ac72:	7ebb      	ldrb	r3, [r7, #26]
 801ac74:	fb00 f303 	mul.w	r3, r0, r3
 801ac78:	4413      	add	r3, r2
 801ac7a:	461a      	mov	r2, r3
 801ac7c:	4613      	mov	r3, r2
 801ac7e:	021b      	lsls	r3, r3, #8
 801ac80:	4413      	add	r3, r2
 801ac82:	01db      	lsls	r3, r3, #7
 801ac84:	4413      	add	r3, r2
 801ac86:	0f9b      	lsrs	r3, r3, #30
 801ac88:	b2db      	uxtb	r3, r3
 801ac8a:	430b      	orrs	r3, r1
 801ac8c:	b2d9      	uxtb	r1, r3
 801ac8e:	7cbb      	ldrb	r3, [r7, #18]
 801ac90:	461a      	mov	r2, r3
 801ac92:	7efb      	ldrb	r3, [r7, #27]
 801ac94:	fb03 f202 	mul.w	r2, r3, r2
 801ac98:	7dbb      	ldrb	r3, [r7, #22]
 801ac9a:	4618      	mov	r0, r3
 801ac9c:	7ebb      	ldrb	r3, [r7, #26]
 801ac9e:	fb00 f303 	mul.w	r3, r0, r3
 801aca2:	4413      	add	r3, r2
 801aca4:	461a      	mov	r2, r3
 801aca6:	4613      	mov	r3, r2
 801aca8:	021b      	lsls	r3, r3, #8
 801acaa:	4413      	add	r3, r2
 801acac:	01db      	lsls	r3, r3, #7
 801acae:	4413      	add	r3, r2
 801acb0:	0f9b      	lsrs	r3, r3, #30
 801acb2:	b2db      	uxtb	r3, r3
 801acb4:	430b      	orrs	r3, r1
 801acb6:	b2db      	uxtb	r3, r3
 801acb8:	733b      	strb	r3, [r7, #12]
                                LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
                                LV_UDIV255(two.ch.blue * mix  + one.ch.blue * imix));
    return r;
 801acba:	7b3b      	ldrb	r3, [r7, #12]
}
 801acbc:	4618      	mov	r0, r3
 801acbe:	3730      	adds	r7, #48	; 0x30
 801acc0:	46bd      	mov	sp, r7
 801acc2:	bd80      	pop	{r7, pc}

0801acc4 <lv_gradient_cleanup>:

void lv_gradient_cleanup(lv_grad_t * grad)
{
 801acc4:	b580      	push	{r7, lr}
 801acc6:	b082      	sub	sp, #8
 801acc8:	af00      	add	r7, sp, #0
 801acca:	6078      	str	r0, [r7, #4]
    if(grad->not_cached) {
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	79db      	ldrb	r3, [r3, #7]
 801acd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801acd4:	b2db      	uxtb	r3, r3
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	d002      	beq.n	801ace0 <lv_gradient_cleanup+0x1c>
        lv_mem_free(grad);
 801acda:	6878      	ldr	r0, [r7, #4]
 801acdc:	f009 f93a 	bl	8023f54 <lv_mem_free>
    }
}
 801ace0:	bf00      	nop
 801ace2:	3708      	adds	r7, #8
 801ace4:	46bd      	mov	sp, r7
 801ace6:	bd80      	pop	{r7, pc}

0801ace8 <lv_color_premult>:
{
 801ace8:	b480      	push	{r7}
 801acea:	b083      	sub	sp, #12
 801acec:	af00      	add	r7, sp, #0
 801acee:	7138      	strb	r0, [r7, #4]
 801acf0:	460b      	mov	r3, r1
 801acf2:	603a      	str	r2, [r7, #0]
 801acf4:	71fb      	strb	r3, [r7, #7]
    out[0] = LV_COLOR_GET_R(c);
 801acf6:	793b      	ldrb	r3, [r7, #4]
 801acf8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801acfc:	b2db      	uxtb	r3, r3
 801acfe:	b29a      	uxth	r2, r3
 801ad00:	683b      	ldr	r3, [r7, #0]
 801ad02:	801a      	strh	r2, [r3, #0]
    out[1] = LV_COLOR_GET_G(c);
 801ad04:	793b      	ldrb	r3, [r7, #4]
 801ad06:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801ad0a:	b2da      	uxtb	r2, r3
 801ad0c:	683b      	ldr	r3, [r7, #0]
 801ad0e:	3302      	adds	r3, #2
 801ad10:	b292      	uxth	r2, r2
 801ad12:	801a      	strh	r2, [r3, #0]
    out[2] = LV_COLOR_GET_B(c);
 801ad14:	793b      	ldrb	r3, [r7, #4]
 801ad16:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801ad1a:	b2da      	uxtb	r2, r3
 801ad1c:	683b      	ldr	r3, [r7, #0]
 801ad1e:	3304      	adds	r3, #4
 801ad20:	b292      	uxth	r2, r2
 801ad22:	801a      	strh	r2, [r3, #0]
}
 801ad24:	bf00      	nop
 801ad26:	370c      	adds	r7, #12
 801ad28:	46bd      	mov	sp, r7
 801ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad2e:	4770      	bx	lr

0801ad30 <lv_color_mix_premult>:
{
 801ad30:	b480      	push	{r7}
 801ad32:	b085      	sub	sp, #20
 801ad34:	af00      	add	r7, sp, #0
 801ad36:	6078      	str	r0, [r7, #4]
 801ad38:	7039      	strb	r1, [r7, #0]
 801ad3a:	4613      	mov	r3, r2
 801ad3c:	70fb      	strb	r3, [r7, #3]
    LV_COLOR_SET_R(c1, premult_c1[0]);
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	881b      	ldrh	r3, [r3, #0]
 801ad42:	f003 0301 	and.w	r3, r3, #1
 801ad46:	b2da      	uxtb	r2, r3
 801ad48:	7a3b      	ldrb	r3, [r7, #8]
 801ad4a:	f362 0300 	bfi	r3, r2, #0, #1
 801ad4e:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_G(c1, premult_c1[1]);
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	3302      	adds	r3, #2
 801ad54:	881b      	ldrh	r3, [r3, #0]
 801ad56:	f003 0301 	and.w	r3, r3, #1
 801ad5a:	b2da      	uxtb	r2, r3
 801ad5c:	7a3b      	ldrb	r3, [r7, #8]
 801ad5e:	f362 0300 	bfi	r3, r2, #0, #1
 801ad62:	723b      	strb	r3, [r7, #8]
    LV_COLOR_SET_B(c1, premult_c1[2]);
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	3304      	adds	r3, #4
 801ad68:	881b      	ldrh	r3, [r3, #0]
 801ad6a:	f003 0301 	and.w	r3, r3, #1
 801ad6e:	b2da      	uxtb	r2, r3
 801ad70:	7a3b      	ldrb	r3, [r7, #8]
 801ad72:	f362 0300 	bfi	r3, r2, #0, #1
 801ad76:	723b      	strb	r3, [r7, #8]
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
 801ad78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	da01      	bge.n	801ad84 <lv_color_mix_premult+0x54>
 801ad80:	783b      	ldrb	r3, [r7, #0]
 801ad82:	e000      	b.n	801ad86 <lv_color_mix_premult+0x56>
 801ad84:	7a3b      	ldrb	r3, [r7, #8]
 801ad86:	733b      	strb	r3, [r7, #12]
    return ret;
 801ad88:	7b3b      	ldrb	r3, [r7, #12]
}
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	3714      	adds	r7, #20
 801ad8e:	46bd      	mov	sp, r7
 801ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad94:	4770      	bx	lr

0801ad96 <lv_color_make>:
{
 801ad96:	b480      	push	{r7}
 801ad98:	b083      	sub	sp, #12
 801ad9a:	af00      	add	r7, sp, #0
 801ad9c:	4603      	mov	r3, r0
 801ad9e:	71fb      	strb	r3, [r7, #7]
 801ada0:	460b      	mov	r3, r1
 801ada2:	71bb      	strb	r3, [r7, #6]
 801ada4:	4613      	mov	r3, r2
 801ada6:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801ada8:	797b      	ldrb	r3, [r7, #5]
 801adaa:	09db      	lsrs	r3, r3, #7
 801adac:	b2da      	uxtb	r2, r3
 801adae:	79bb      	ldrb	r3, [r7, #6]
 801adb0:	09db      	lsrs	r3, r3, #7
 801adb2:	b2db      	uxtb	r3, r3
 801adb4:	4313      	orrs	r3, r2
 801adb6:	b2da      	uxtb	r2, r3
 801adb8:	79fb      	ldrb	r3, [r7, #7]
 801adba:	09db      	lsrs	r3, r3, #7
 801adbc:	b2db      	uxtb	r3, r3
 801adbe:	4313      	orrs	r3, r2
 801adc0:	b2db      	uxtb	r3, r3
}
 801adc2:	4618      	mov	r0, r3
 801adc4:	370c      	adds	r7, #12
 801adc6:	46bd      	mov	sp, r7
 801adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adcc:	4770      	bx	lr

0801adce <lv_color_hex>:
{
 801adce:	b580      	push	{r7, lr}
 801add0:	b082      	sub	sp, #8
 801add2:	af00      	add	r7, sp, #0
 801add4:	6078      	str	r0, [r7, #4]
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	0c1b      	lsrs	r3, r3, #16
 801adda:	b2d8      	uxtb	r0, r3
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	0a1b      	lsrs	r3, r3, #8
 801ade0:	b2db      	uxtb	r3, r3
 801ade2:	687a      	ldr	r2, [r7, #4]
 801ade4:	b2d2      	uxtb	r2, r2
 801ade6:	4619      	mov	r1, r3
 801ade8:	f7ff ffd5 	bl	801ad96 <lv_color_make>
 801adec:	4603      	mov	r3, r0
}
 801adee:	4618      	mov	r0, r3
 801adf0:	3708      	adds	r7, #8
 801adf2:	46bd      	mov	sp, r7
 801adf4:	bd80      	pop	{r7, pc}

0801adf6 <lv_area_copy>:
{
 801adf6:	b480      	push	{r7}
 801adf8:	b083      	sub	sp, #12
 801adfa:	af00      	add	r7, sp, #0
 801adfc:	6078      	str	r0, [r7, #4]
 801adfe:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 801ae00:	683b      	ldr	r3, [r7, #0]
 801ae02:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 801ae0a:	683b      	ldr	r3, [r7, #0]
 801ae0c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801ae14:	683b      	ldr	r3, [r7, #0]
 801ae16:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 801ae1e:	683b      	ldr	r3, [r7, #0]
 801ae20:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	80da      	strh	r2, [r3, #6]
}
 801ae28:	bf00      	nop
 801ae2a:	370c      	adds	r7, #12
 801ae2c:	46bd      	mov	sp, r7
 801ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae32:	4770      	bx	lr

0801ae34 <lv_area_get_width>:
{
 801ae34:	b480      	push	{r7}
 801ae36:	b083      	sub	sp, #12
 801ae38:	af00      	add	r7, sp, #0
 801ae3a:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ae42:	b29a      	uxth	r2, r3
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae4a:	b29b      	uxth	r3, r3
 801ae4c:	1ad3      	subs	r3, r2, r3
 801ae4e:	b29b      	uxth	r3, r3
 801ae50:	3301      	adds	r3, #1
 801ae52:	b29b      	uxth	r3, r3
 801ae54:	b21b      	sxth	r3, r3
}
 801ae56:	4618      	mov	r0, r3
 801ae58:	370c      	adds	r7, #12
 801ae5a:	46bd      	mov	sp, r7
 801ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae60:	4770      	bx	lr

0801ae62 <lv_area_get_height>:
{
 801ae62:	b480      	push	{r7}
 801ae64:	b083      	sub	sp, #12
 801ae66:	af00      	add	r7, sp, #0
 801ae68:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801ae70:	b29a      	uxth	r2, r3
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ae78:	b29b      	uxth	r3, r3
 801ae7a:	1ad3      	subs	r3, r2, r3
 801ae7c:	b29b      	uxth	r3, r3
 801ae7e:	3301      	adds	r3, #1
 801ae80:	b29b      	uxth	r3, r3
 801ae82:	b21b      	sxth	r3, r3
}
 801ae84:	4618      	mov	r0, r3
 801ae86:	370c      	adds	r7, #12
 801ae88:	46bd      	mov	sp, r7
 801ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae8e:	4770      	bx	lr

0801ae90 <lv_draw_sw_img_decoded>:
 **********************/


LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_img_decoded(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                  const lv_area_t * coords, const uint8_t * src_buf, lv_img_cf_t cf)
{
 801ae90:	b590      	push	{r4, r7, lr}
 801ae92:	b0ad      	sub	sp, #180	; 0xb4
 801ae94:	af06      	add	r7, sp, #24
 801ae96:	60f8      	str	r0, [r7, #12]
 801ae98:	60b9      	str	r1, [r7, #8]
 801ae9a:	607a      	str	r2, [r7, #4]
 801ae9c:	603b      	str	r3, [r7, #0]
    /*Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, draw_ctx->clip_area);
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	689a      	ldr	r2, [r3, #8]
 801aea2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801aea6:	4611      	mov	r1, r2
 801aea8:	4618      	mov	r0, r3
 801aeaa:	f7ff ffa4 	bl	801adf6 <lv_area_copy>

    bool mask_any = lv_draw_mask_is_any(&draw_area);
 801aeae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801aeb2:	4618      	mov	r0, r3
 801aeb4:	f7f8 feb8 	bl	8013c28 <lv_draw_mask_is_any>
 801aeb8:	4603      	mov	r3, r0
 801aeba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 801aebe:	68bb      	ldr	r3, [r7, #8]
 801aec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d104      	bne.n	801aed2 <lv_draw_sw_img_decoded+0x42>
 801aec8:	68bb      	ldr	r3, [r7, #8]
 801aeca:	885b      	ldrh	r3, [r3, #2]
 801aecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801aed0:	d001      	beq.n	801aed6 <lv_draw_sw_img_decoded+0x46>
 801aed2:	2301      	movs	r3, #1
 801aed4:	e000      	b.n	801aed8 <lv_draw_sw_img_decoded+0x48>
 801aed6:	2300      	movs	r3, #0
 801aed8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801aedc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 801aee0:	f003 0301 	and.w	r3, r3, #1
 801aee4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    lv_area_t blend_area;
    lv_draw_sw_blend_dsc_t blend_dsc;

    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 801aee8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801aeec:	211c      	movs	r1, #28
 801aeee:	4618      	mov	r0, r3
 801aef0:	f009 fc34 	bl	802475c <lv_memset_00>
    blend_dsc.opa = draw_dsc->opa;
 801aef4:	68bb      	ldr	r3, [r7, #8]
 801aef6:	7a9b      	ldrb	r3, [r3, #10]
 801aef8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    blend_dsc.blend_mode = draw_dsc->blend_mode;
 801aefc:	68bb      	ldr	r3, [r7, #8]
 801aefe:	7adb      	ldrb	r3, [r3, #11]
 801af00:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801af04:	b2db      	uxtb	r3, r3
 801af06:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    blend_dsc.blend_area = &blend_area;
 801af0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801af0e:	633b      	str	r3, [r7, #48]	; 0x30

    /*The simplest case just copy the pixels into the draw_buf*/
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 801af10:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801af14:	f083 0301 	eor.w	r3, r3, #1
 801af18:	b2db      	uxtb	r3, r3
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d019      	beq.n	801af52 <lv_draw_sw_img_decoded+0xc2>
 801af1e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 801af22:	f083 0301 	eor.w	r3, r3, #1
 801af26:	b2db      	uxtb	r3, r3
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d012      	beq.n	801af52 <lv_draw_sw_img_decoded+0xc2>
 801af2c:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801af30:	2b04      	cmp	r3, #4
 801af32:	d10e      	bne.n	801af52 <lv_draw_sw_img_decoded+0xc2>
 801af34:	68bb      	ldr	r3, [r7, #8]
 801af36:	7a5b      	ldrb	r3, [r3, #9]
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d10a      	bne.n	801af52 <lv_draw_sw_img_decoded+0xc2>
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 801af3c:	683b      	ldr	r3, [r7, #0]
 801af3e:	637b      	str	r3, [r7, #52]	; 0x34

        blend_dsc.blend_area = coords;
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	633b      	str	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801af44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801af48:	4619      	mov	r1, r3
 801af4a:	68f8      	ldr	r0, [r7, #12]
 801af4c:	f7fe f93c 	bl	80191c8 <lv_draw_sw_blend>
 801af50:	e1c6      	b.n	801b2e0 <lv_draw_sw_img_decoded+0x450>
    }
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 801af52:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801af56:	f083 0301 	eor.w	r3, r3, #1
 801af5a:	b2db      	uxtb	r3, r3
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d02f      	beq.n	801afc0 <lv_draw_sw_img_decoded+0x130>
 801af60:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 801af64:	f083 0301 	eor.w	r3, r3, #1
 801af68:	b2db      	uxtb	r3, r3
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d028      	beq.n	801afc0 <lv_draw_sw_img_decoded+0x130>
 801af6e:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801af72:	2b0e      	cmp	r3, #14
 801af74:	d124      	bne.n	801afc0 <lv_draw_sw_img_decoded+0x130>
        lv_area_t clipped_coords;
        if(!_lv_area_intersect(&clipped_coords, coords, draw_ctx->clip_area)) return;
 801af76:	68fb      	ldr	r3, [r7, #12]
 801af78:	689a      	ldr	r2, [r3, #8]
 801af7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801af7e:	6879      	ldr	r1, [r7, #4]
 801af80:	4618      	mov	r0, r3
 801af82:	f007 fc97 	bl	80228b4 <_lv_area_intersect>
 801af86:	4603      	mov	r3, r0
 801af88:	f083 0301 	eor.w	r3, r3, #1
 801af8c:	b2db      	uxtb	r3, r3
 801af8e:	2b00      	cmp	r3, #0
 801af90:	f040 81a6 	bne.w	801b2e0 <lv_draw_sw_img_decoded+0x450>

        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 801af94:	683b      	ldr	r3, [r7, #0]
 801af96:	63fb      	str	r3, [r7, #60]	; 0x3c
        blend_dsc.mask_area = coords;
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	647b      	str	r3, [r7, #68]	; 0x44
        blend_dsc.src_buf = NULL;
 801af9c:	2300      	movs	r3, #0
 801af9e:	637b      	str	r3, [r7, #52]	; 0x34
        blend_dsc.color = draw_dsc->recolor;
 801afa0:	68bb      	ldr	r3, [r7, #8]
 801afa2:	7a1b      	ldrb	r3, [r3, #8]
 801afa4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801afa8:	2302      	movs	r3, #2
 801afaa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

        blend_dsc.blend_area = coords;
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	633b      	str	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801afb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801afb6:	4619      	mov	r1, r3
 801afb8:	68f8      	ldr	r0, [r7, #12]
 801afba:	f7fe f905 	bl	80191c8 <lv_draw_sw_blend>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 801afbe:	e18f      	b.n	801b2e0 <lv_draw_sw_img_decoded+0x450>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        blend_area.x1 = draw_ctx->clip_area->x1;
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	689b      	ldr	r3, [r3, #8]
 801afc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801afc8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        blend_area.x2 = draw_ctx->clip_area->x2;
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	689b      	ldr	r3, [r3, #8]
 801afd0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801afd4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
        blend_area.y1 = draw_ctx->clip_area->y1;
 801afd8:	68fb      	ldr	r3, [r7, #12]
 801afda:	689b      	ldr	r3, [r3, #8]
 801afdc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801afe0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        blend_area.y2 = draw_ctx->clip_area->y2;
 801afe4:	68fb      	ldr	r3, [r7, #12]
 801afe6:	689b      	ldr	r3, [r3, #8]
 801afe8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801afec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        lv_coord_t src_w = lv_area_get_width(coords);
 801aff0:	6878      	ldr	r0, [r7, #4]
 801aff2:	f7ff ff1f 	bl	801ae34 <lv_area_get_width>
 801aff6:	4603      	mov	r3, r0
 801aff8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        lv_coord_t src_h = lv_area_get_height(coords);
 801affc:	6878      	ldr	r0, [r7, #4]
 801affe:	f7ff ff30 	bl	801ae62 <lv_area_get_height>
 801b002:	4603      	mov	r3, r0
 801b004:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        lv_coord_t blend_h = lv_area_get_height(&blend_area);
 801b008:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b00c:	4618      	mov	r0, r3
 801b00e:	f7ff ff28 	bl	801ae62 <lv_area_get_height>
 801b012:	4603      	mov	r3, r0
 801b014:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        lv_coord_t blend_w = lv_area_get_width(&blend_area);
 801b018:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b01c:	4618      	mov	r0, r3
 801b01e:	f7ff ff09 	bl	801ae34 <lv_area_get_width>
 801b022:	4603      	mov	r3, r0
 801b024:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        uint32_t max_buf_size = MAX_BUF_SIZE;
 801b028:	f7f5 fbf4 	bl	8010814 <_lv_refr_get_disp_refreshing>
 801b02c:	4603      	mov	r3, r0
 801b02e:	4618      	mov	r0, r3
 801b030:	f006 ff1a 	bl	8021e68 <lv_disp_get_hor_res>
 801b034:	4603      	mov	r3, r0
 801b036:	67bb      	str	r3, [r7, #120]	; 0x78
        uint32_t blend_size = lv_area_get_size(&blend_area);
 801b038:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b03c:	4618      	mov	r0, r3
 801b03e:	f007 fbac 	bl	802279a <lv_area_get_size>
 801b042:	6778      	str	r0, [r7, #116]	; 0x74
        uint32_t buf_h;
        uint32_t buf_w = blend_w;
 801b044:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801b048:	673b      	str	r3, [r7, #112]	; 0x70
        if(blend_size <= max_buf_size) {
 801b04a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801b04c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b04e:	429a      	cmp	r2, r3
 801b050:	d804      	bhi.n	801b05c <lv_draw_sw_img_decoded+0x1cc>
            buf_h = blend_h;
 801b052:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801b056:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b05a:	e006      	b.n	801b06a <lv_draw_sw_img_decoded+0x1da>
        }
        else {
            /*Round to full lines*/
            buf_h = max_buf_size / blend_w;
 801b05c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801b060:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801b062:	fbb2 f3f3 	udiv	r3, r2, r3
 801b066:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        }

        /*Create buffers and masks*/
        uint32_t buf_size = buf_w * buf_h;
 801b06a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b06c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b070:	fb02 f303 	mul.w	r3, r2, r3
 801b074:	66fb      	str	r3, [r7, #108]	; 0x6c

        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 801b076:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801b078:	f008 ffc6 	bl	8024008 <lv_mem_buf_get>
 801b07c:	66b8      	str	r0, [r7, #104]	; 0x68
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 801b07e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801b080:	f008 ffc2 	bl	8024008 <lv_mem_buf_get>
 801b084:	6678      	str	r0, [r7, #100]	; 0x64
        blend_dsc.mask_buf = mask_buf;
 801b086:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b088:	63fb      	str	r3, [r7, #60]	; 0x3c
        blend_dsc.mask_area = &blend_area;
 801b08a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b08e:	647b      	str	r3, [r7, #68]	; 0x44
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801b090:	2302      	movs	r3, #2
 801b092:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
        blend_dsc.src_buf = rgb_buf;
 801b096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b098:	637b      	str	r3, [r7, #52]	; 0x34
        lv_coord_t y_last = blend_area.y2;
 801b09a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801b09e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 801b0a2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801b0a6:	b29a      	uxth	r2, r3
 801b0a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b0ac:	b29b      	uxth	r3, r3
 801b0ae:	4413      	add	r3, r2
 801b0b0:	b29b      	uxth	r3, r3
 801b0b2:	3b01      	subs	r3, #1
 801b0b4:	b29b      	uxth	r3, r3
 801b0b6:	b21b      	sxth	r3, r3
 801b0b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 801b0bc:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801b0c0:	2b04      	cmp	r3, #4
 801b0c2:	d109      	bne.n	801b0d8 <lv_draw_sw_img_decoded+0x248>
 801b0c4:	68bb      	ldr	r3, [r7, #8]
 801b0c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	d104      	bne.n	801b0d8 <lv_draw_sw_img_decoded+0x248>
                                           draw_dsc->zoom != LV_IMG_ZOOM_NONE) ?
 801b0ce:	68bb      	ldr	r3, [r7, #8]
 801b0d0:	885b      	ldrh	r3, [r3, #2]
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 801b0d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b0d6:	d001      	beq.n	801b0dc <lv_draw_sw_img_decoded+0x24c>
 801b0d8:	2302      	movs	r3, #2
 801b0da:	e000      	b.n	801b0de <lv_draw_sw_img_decoded+0x24e>
 801b0dc:	2301      	movs	r3, #1
 801b0de:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                                          LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
        blend_dsc.mask_res = mask_res_def;
 801b0e2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 801b0e6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

        while(blend_area.y1 <= y_last) {
 801b0ea:	e0ec      	b.n	801b2c6 <lv_draw_sw_img_decoded+0x436>
            /*Apply transformations if any or separate the channels*/
            lv_area_t transform_area;
            lv_area_copy(&transform_area, &blend_area);
 801b0ec:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b0f0:	f107 0320 	add.w	r3, r7, #32
 801b0f4:	4611      	mov	r1, r2
 801b0f6:	4618      	mov	r0, r3
 801b0f8:	f7ff fe7d 	bl	801adf6 <lv_area_copy>
            lv_area_move(&transform_area, -coords->x1, -coords->y1);
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b102:	b29b      	uxth	r3, r3
 801b104:	425b      	negs	r3, r3
 801b106:	b29b      	uxth	r3, r3
 801b108:	b219      	sxth	r1, r3
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b110:	b29b      	uxth	r3, r3
 801b112:	425b      	negs	r3, r3
 801b114:	b29b      	uxth	r3, r3
 801b116:	b21a      	sxth	r2, r3
 801b118:	f107 0320 	add.w	r3, r7, #32
 801b11c:	4618      	mov	r0, r3
 801b11e:	f007 fb93 	bl	8022848 <lv_area_move>
            if(transform) {
 801b122:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 801b126:	2b00      	cmp	r3, #0
 801b128:	d018      	beq.n	801b15c <lv_draw_sw_img_decoded+0x2cc>
                lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 801b12a:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801b12e:	f107 0120 	add.w	r1, r7, #32
 801b132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b134:	9305      	str	r3, [sp, #20]
 801b136:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b138:	9304      	str	r3, [sp, #16]
 801b13a:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801b13e:	9303      	str	r3, [sp, #12]
 801b140:	68bb      	ldr	r3, [r7, #8]
 801b142:	9302      	str	r3, [sp, #8]
 801b144:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801b148:	9301      	str	r3, [sp, #4]
 801b14a:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801b14e:	9300      	str	r3, [sp, #0]
 801b150:	4613      	mov	r3, r2
 801b152:	683a      	ldr	r2, [r7, #0]
 801b154:	68f8      	ldr	r0, [r7, #12]
 801b156:	f7fb f860 	bl	801621a <lv_draw_transform>
 801b15a:	e015      	b.n	801b188 <lv_draw_sw_img_decoded+0x2f8>
                                  draw_dsc, cf, rgb_buf, mask_buf);
            }
            else {
                convert_cb(&transform_area, src_buf, src_w, src_h, src_w, draw_dsc, cf, rgb_buf, mask_buf);
 801b15c:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	; 0x82
 801b160:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801b164:	f107 0020 	add.w	r0, r7, #32
 801b168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b16a:	9304      	str	r3, [sp, #16]
 801b16c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b16e:	9303      	str	r3, [sp, #12]
 801b170:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801b174:	9302      	str	r3, [sp, #8]
 801b176:	68bb      	ldr	r3, [r7, #8]
 801b178:	9301      	str	r3, [sp, #4]
 801b17a:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801b17e:	9300      	str	r3, [sp, #0]
 801b180:	460b      	mov	r3, r1
 801b182:	6839      	ldr	r1, [r7, #0]
 801b184:	f000 f8af 	bl	801b2e6 <convert_cb>
            }

            /*Apply recolor*/
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 801b188:	68bb      	ldr	r3, [r7, #8]
 801b18a:	7a5b      	ldrb	r3, [r3, #9]
 801b18c:	2b02      	cmp	r3, #2
 801b18e:	d932      	bls.n	801b1f6 <lv_draw_sw_img_decoded+0x366>
                uint16_t premult_v[3];
                lv_opa_t recolor_opa = draw_dsc->recolor_opa;
 801b190:	68bb      	ldr	r3, [r7, #8]
 801b192:	7a5b      	ldrb	r3, [r3, #9]
 801b194:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                lv_color_t recolor = draw_dsc->recolor;
 801b198:	68bb      	ldr	r3, [r7, #8]
 801b19a:	7a1b      	ldrb	r3, [r3, #8]
 801b19c:	753b      	strb	r3, [r7, #20]
                lv_color_premult(recolor, recolor_opa, premult_v);
 801b19e:	f107 0218 	add.w	r2, r7, #24
 801b1a2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801b1a6:	4619      	mov	r1, r3
 801b1a8:	7d38      	ldrb	r0, [r7, #20]
 801b1aa:	f7ff fd9d 	bl	801ace8 <lv_color_premult>
                recolor_opa = 255 - recolor_opa;
 801b1ae:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801b1b2:	43db      	mvns	r3, r3
 801b1b4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                uint32_t i;
                for(i = 0; i < buf_size; i++) {
 801b1b8:	2300      	movs	r3, #0
 801b1ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801b1be:	e015      	b.n	801b1ec <lv_draw_sw_img_decoded+0x35c>
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 801b1c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b1c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b1c6:	4413      	add	r3, r2
 801b1c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801b1ca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801b1ce:	188c      	adds	r4, r1, r2
 801b1d0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 801b1d4:	f107 0018 	add.w	r0, r7, #24
 801b1d8:	7819      	ldrb	r1, [r3, #0]
 801b1da:	f7ff fda9 	bl	801ad30 <lv_color_mix_premult>
 801b1de:	4603      	mov	r3, r0
 801b1e0:	7023      	strb	r3, [r4, #0]
                for(i = 0; i < buf_size; i++) {
 801b1e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b1e6:	3301      	adds	r3, #1
 801b1e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801b1ec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801b1f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b1f2:	429a      	cmp	r2, r3
 801b1f4:	d3e4      	bcc.n	801b1c0 <lv_draw_sw_img_decoded+0x330>
                }
            }
#if LV_DRAW_COMPLEX
            /*Apply the masks if any*/
            if(mask_any) {
 801b1f6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d03e      	beq.n	801b27c <lv_draw_sw_img_decoded+0x3ec>
                lv_coord_t y;
                lv_opa_t * mask_buf_tmp = mask_buf;
 801b1fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 801b204:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b208:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 801b20c:	e030      	b.n	801b270 <lv_draw_sw_img_decoded+0x3e0>
                    lv_draw_mask_res_t mask_res_line;
                    mask_res_line = lv_draw_mask_apply(mask_buf_tmp, blend_area.x1, y, blend_w);
 801b20e:	f9b7 104c 	ldrsh.w	r1, [r7, #76]	; 0x4c
 801b212:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801b216:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801b21a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801b21e:	f7f8 fc05 	bl	8013a2c <lv_draw_mask_apply>
 801b222:	4603      	mov	r3, r0
 801b224:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                    if(mask_res_line == LV_DRAW_MASK_RES_TRANSP) {
 801b228:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d10a      	bne.n	801b246 <lv_draw_sw_img_decoded+0x3b6>
                        lv_memset_00(mask_buf_tmp, blend_w);
 801b230:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801b234:	4619      	mov	r1, r3
 801b236:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801b23a:	f009 fa8f 	bl	802475c <lv_memset_00>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801b23e:	2302      	movs	r3, #2
 801b240:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 801b244:	e006      	b.n	801b254 <lv_draw_sw_img_decoded+0x3c4>
                    }
                    else if(mask_res_line == LV_DRAW_MASK_RES_CHANGED) {
 801b246:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801b24a:	2b02      	cmp	r3, #2
 801b24c:	d102      	bne.n	801b254 <lv_draw_sw_img_decoded+0x3c4>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801b24e:	2302      	movs	r3, #2
 801b250:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
                    }
                    mask_buf_tmp += blend_w;
 801b254:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801b258:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801b25c:	4413      	add	r3, r2
 801b25e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 801b262:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801b266:	b29b      	uxth	r3, r3
 801b268:	3301      	adds	r3, #1
 801b26a:	b29b      	uxth	r3, r3
 801b26c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 801b270:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801b274:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801b278:	429a      	cmp	r2, r3
 801b27a:	ddc8      	ble.n	801b20e <lv_draw_sw_img_decoded+0x37e>
                }
            }
#endif

            /*Blend*/
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801b27c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b280:	4619      	mov	r1, r3
 801b282:	68f8      	ldr	r0, [r7, #12]
 801b284:	f7fd ffa0 	bl	80191c8 <lv_draw_sw_blend>

            /*Go the the next lines*/
            blend_area.y1 = blend_area.y2 + 1;
 801b288:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801b28c:	b29b      	uxth	r3, r3
 801b28e:	3301      	adds	r3, #1
 801b290:	b29b      	uxth	r3, r3
 801b292:	b21b      	sxth	r3, r3
 801b294:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 801b298:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801b29c:	b29a      	uxth	r2, r3
 801b29e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b2a2:	b29b      	uxth	r3, r3
 801b2a4:	4413      	add	r3, r2
 801b2a6:	b29b      	uxth	r3, r3
 801b2a8:	3b01      	subs	r3, #1
 801b2aa:	b29b      	uxth	r3, r3
 801b2ac:	b21b      	sxth	r3, r3
 801b2ae:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 801b2b2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 801b2b6:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 801b2ba:	429a      	cmp	r2, r3
 801b2bc:	da03      	bge.n	801b2c6 <lv_draw_sw_img_decoded+0x436>
 801b2be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801b2c2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        while(blend_area.y1 <= y_last) {
 801b2c6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801b2ca:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 801b2ce:	429a      	cmp	r2, r3
 801b2d0:	f6bf af0c 	bge.w	801b0ec <lv_draw_sw_img_decoded+0x25c>
        }

        lv_mem_buf_release(mask_buf);
 801b2d4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801b2d6:	f008 ff43 	bl	8024160 <lv_mem_buf_release>
        lv_mem_buf_release(rgb_buf);
 801b2da:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801b2dc:	f008 ff40 	bl	8024160 <lv_mem_buf_release>
    }
}
 801b2e0:	379c      	adds	r7, #156	; 0x9c
 801b2e2:	46bd      	mov	sp, r7
 801b2e4:	bd90      	pop	{r4, r7, pc}

0801b2e6 <convert_cb>:
 **********************/

/* Separate the image channels to RGB and Alpha to match LV_COLOR_DEPTH settings*/
static void convert_cb(const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w, lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 801b2e6:	b590      	push	{r4, r7, lr}
 801b2e8:	b093      	sub	sp, #76	; 0x4c
 801b2ea:	af00      	add	r7, sp, #0
 801b2ec:	60f8      	str	r0, [r7, #12]
 801b2ee:	60b9      	str	r1, [r7, #8]
 801b2f0:	4611      	mov	r1, r2
 801b2f2:	461a      	mov	r2, r3
 801b2f4:	460b      	mov	r3, r1
 801b2f6:	80fb      	strh	r3, [r7, #6]
 801b2f8:	4613      	mov	r3, r2
 801b2fa:	80bb      	strh	r3, [r7, #4]
    LV_UNUSED(draw_dsc);
    LV_UNUSED(src_h);
    LV_UNUSED(src_w);

    const uint8_t * src_tmp8 = (const uint8_t *)src_buf;
 801b2fc:	68bb      	ldr	r3, [r7, #8]
 801b2fe:	647b      	str	r3, [r7, #68]	; 0x44
    lv_coord_t y;
    lv_coord_t x;

    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801b300:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801b304:	2b04      	cmp	r3, #4
 801b306:	d003      	beq.n	801b310 <convert_cb+0x2a>
 801b308:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801b30c:	2b06      	cmp	r3, #6
 801b30e:	d169      	bne.n	801b3e4 <convert_cb+0xfe>
        uint32_t px_cnt = lv_area_get_size(dest_area);
 801b310:	68f8      	ldr	r0, [r7, #12]
 801b312:	f007 fa42 	bl	802279a <lv_area_get_size>
 801b316:	6278      	str	r0, [r7, #36]	; 0x24
        lv_memset_ff(abuf, px_cnt);
 801b318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b31a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801b31c:	f009 fa9f 	bl	802485e <lv_memset_ff>

        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 801b320:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b324:	68fa      	ldr	r2, [r7, #12]
 801b326:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801b32a:	fb02 f303 	mul.w	r3, r2, r3
 801b32e:	461a      	mov	r2, r3
 801b330:	68fb      	ldr	r3, [r7, #12]
 801b332:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b336:	4413      	add	r3, r2
 801b338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b33a:	4413      	add	r3, r2
 801b33c:	647b      	str	r3, [r7, #68]	; 0x44
        uint32_t dest_w = lv_area_get_width(dest_area);
 801b33e:	68f8      	ldr	r0, [r7, #12]
 801b340:	f7ff fd78 	bl	801ae34 <lv_area_get_width>
 801b344:	4603      	mov	r3, r0
 801b346:	623b      	str	r3, [r7, #32]
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 801b348:	6a3b      	ldr	r3, [r7, #32]
 801b34a:	61fb      	str	r3, [r7, #28]

        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 801b34c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 801b350:	837b      	strh	r3, [r7, #26]
        lv_color_t * cbuf_tmp = cbuf;
 801b352:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b354:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 801b356:	68fb      	ldr	r3, [r7, #12]
 801b358:	885b      	ldrh	r3, [r3, #2]
 801b35a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801b35e:	e014      	b.n	801b38a <convert_cb+0xa4>
            lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 801b360:	69fa      	ldr	r2, [r7, #28]
 801b362:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801b364:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801b366:	f008 ff53 	bl	8024210 <lv_memcpy>
            src_tmp8 += src_stride_byte;
 801b36a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801b36e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b370:	4413      	add	r3, r2
 801b372:	647b      	str	r3, [r7, #68]	; 0x44
            cbuf_tmp += dest_w;
 801b374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b376:	6a3b      	ldr	r3, [r7, #32]
 801b378:	4413      	add	r3, r2
 801b37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 801b37c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801b380:	b29b      	uxth	r3, r3
 801b382:	3301      	adds	r3, #1
 801b384:	b29b      	uxth	r3, r3
 801b386:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801b38a:	68fb      	ldr	r3, [r7, #12]
 801b38c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b390:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801b394:	429a      	cmp	r2, r3
 801b396:	dde3      	ble.n	801b360 <convert_cb+0x7a>
        }

        /*Make "holes" for with Chroma keying*/
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801b398:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801b39c:	2b06      	cmp	r3, #6
 801b39e:	f040 810f 	bne.w	801b5c0 <convert_cb+0x2da>
            uint32_t i;
            lv_color_t chk = LV_COLOR_CHROMA_KEY;
 801b3a2:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 801b3a6:	f7ff fd12 	bl	801adce <lv_color_hex>
 801b3aa:	4603      	mov	r3, r0
 801b3ac:	743b      	strb	r3, [r7, #16]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
            uint8_t * cbuf_uint = (uint8_t *)cbuf;
 801b3ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b3b0:	617b      	str	r3, [r7, #20]
            uint8_t chk_v = chk.full;
 801b3b2:	7c3b      	ldrb	r3, [r7, #16]
 801b3b4:	74fb      	strb	r3, [r7, #19]
            uint16_t chk_v = chk.full;
#elif LV_COLOR_DEPTH == 32
            uint32_t * cbuf_uint = (uint32_t *)cbuf;
            uint32_t chk_v = chk.full;
#endif
            for(i = 0; i < px_cnt; i++) {
 801b3b6:	2300      	movs	r3, #0
 801b3b8:	63bb      	str	r3, [r7, #56]	; 0x38
 801b3ba:	e00e      	b.n	801b3da <convert_cb+0xf4>
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 801b3bc:	697a      	ldr	r2, [r7, #20]
 801b3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3c0:	4413      	add	r3, r2
 801b3c2:	781b      	ldrb	r3, [r3, #0]
 801b3c4:	7cfa      	ldrb	r2, [r7, #19]
 801b3c6:	429a      	cmp	r2, r3
 801b3c8:	d104      	bne.n	801b3d4 <convert_cb+0xee>
 801b3ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3ce:	4413      	add	r3, r2
 801b3d0:	2200      	movs	r2, #0
 801b3d2:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < px_cnt; i++) {
 801b3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3d6:	3301      	adds	r3, #1
 801b3d8:	63bb      	str	r3, [r7, #56]	; 0x38
 801b3da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3de:	429a      	cmp	r2, r3
 801b3e0:	d3ec      	bcc.n	801b3bc <convert_cb+0xd6>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801b3e2:	e0ed      	b.n	801b5c0 <convert_cb+0x2da>
            }
        }
    }
    else if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 801b3e4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801b3e8:	2b05      	cmp	r3, #5
 801b3ea:	d16a      	bne.n	801b4c2 <convert_cb+0x1dc>
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 801b3ec:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b3f0:	68fa      	ldr	r2, [r7, #12]
 801b3f2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801b3f6:	fb02 f303 	mul.w	r3, r2, r3
 801b3fa:	68fa      	ldr	r2, [r7, #12]
 801b3fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b400:	4413      	add	r3, r2
 801b402:	005b      	lsls	r3, r3, #1
 801b404:	461a      	mov	r2, r3
 801b406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b408:	4413      	add	r3, r2
 801b40a:	647b      	str	r3, [r7, #68]	; 0x44

        lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
 801b40c:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 801b410:	68f8      	ldr	r0, [r7, #12]
 801b412:	f7ff fd0f 	bl	801ae34 <lv_area_get_width>
 801b416:	4603      	mov	r3, r0
 801b418:	b29b      	uxth	r3, r3
 801b41a:	1ae3      	subs	r3, r4, r3
 801b41c:	b29b      	uxth	r3, r3
 801b41e:	863b      	strh	r3, [r7, #48]	; 0x30
        lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
 801b420:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801b422:	005b      	lsls	r3, r3, #1
 801b424:	b29b      	uxth	r3, r3
 801b426:	85fb      	strh	r3, [r7, #46]	; 0x2e

        lv_coord_t dest_h = lv_area_get_height(dest_area);
 801b428:	68f8      	ldr	r0, [r7, #12]
 801b42a:	f7ff fd1a 	bl	801ae62 <lv_area_get_height>
 801b42e:	4603      	mov	r3, r0
 801b430:	85bb      	strh	r3, [r7, #44]	; 0x2c
        lv_coord_t dest_w = lv_area_get_width(dest_area);
 801b432:	68f8      	ldr	r0, [r7, #12]
 801b434:	f7ff fcfe 	bl	801ae34 <lv_area_get_width>
 801b438:	4603      	mov	r3, r0
 801b43a:	857b      	strh	r3, [r7, #42]	; 0x2a
        for(y = 0; y < dest_h; y++) {
 801b43c:	2300      	movs	r3, #0
 801b43e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801b442:	e037      	b.n	801b4b4 <convert_cb+0x1ce>
            for(x = 0; x < dest_w; x++) {
 801b444:	2300      	movs	r3, #0
 801b446:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801b44a:	e017      	b.n	801b47c <convert_cb+0x196>
                abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801b44c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801b450:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b452:	4413      	add	r3, r2
 801b454:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b456:	7852      	ldrb	r2, [r2, #1]
 801b458:	701a      	strb	r2, [r3, #0]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
                cbuf[x].full = *src_tmp8;
 801b45a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801b45e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801b460:	4413      	add	r3, r2
 801b462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b464:	7812      	ldrb	r2, [r2, #0]
 801b466:	701a      	strb	r2, [r3, #0]
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
#elif LV_COLOR_DEPTH == 32
                cbuf[x] = *((lv_color_t *) src_tmp8);
                cbuf[x].ch.alpha = 0xff;
#endif
                src_tmp8 += LV_IMG_PX_SIZE_ALPHA_BYTE;
 801b468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b46a:	3302      	adds	r3, #2
 801b46c:	647b      	str	r3, [r7, #68]	; 0x44
            for(x = 0; x < dest_w; x++) {
 801b46e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 801b472:	b29b      	uxth	r3, r3
 801b474:	3301      	adds	r3, #1
 801b476:	b29b      	uxth	r3, r3
 801b478:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801b47c:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 801b480:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801b484:	429a      	cmp	r2, r3
 801b486:	dbe1      	blt.n	801b44c <convert_cb+0x166>

            }
            cbuf += dest_w;
 801b488:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801b48c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801b48e:	4413      	add	r3, r2
 801b490:	667b      	str	r3, [r7, #100]	; 0x64
            abuf += dest_w;
 801b492:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801b496:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b498:	4413      	add	r3, r2
 801b49a:	66bb      	str	r3, [r7, #104]	; 0x68
            src_tmp8 += src_new_line_step_byte;
 801b49c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801b4a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b4a2:	4413      	add	r3, r2
 801b4a4:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 801b4a6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801b4aa:	b29b      	uxth	r3, r3
 801b4ac:	3301      	adds	r3, #1
 801b4ae:	b29b      	uxth	r3, r3
 801b4b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801b4b4:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801b4b8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801b4bc:	429a      	cmp	r2, r3
 801b4be:	dbc1      	blt.n	801b444 <convert_cb+0x15e>
            lv_memcpy(abuf, src_tmp8, dest_w);
            abuf += dest_w;
            src_tmp8 += src_stride;
        }
    }
}
 801b4c0:	e07f      	b.n	801b5c2 <convert_cb+0x2dc>
    else if(cf == LV_IMG_CF_RGB565A8) {
 801b4c2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 801b4c6:	2b14      	cmp	r3, #20
 801b4c8:	d17b      	bne.n	801b5c2 <convert_cb+0x2dc>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 801b4ca:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b4ce:	68fa      	ldr	r2, [r7, #12]
 801b4d0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801b4d4:	fb02 f303 	mul.w	r3, r2, r3
 801b4d8:	461a      	mov	r2, r3
 801b4da:	68fb      	ldr	r3, [r7, #12]
 801b4dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b4e0:	4413      	add	r3, r2
 801b4e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b4e4:	4413      	add	r3, r2
 801b4e6:	647b      	str	r3, [r7, #68]	; 0x44
        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 801b4e8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 801b4ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        lv_coord_t dest_h = lv_area_get_height(dest_area);
 801b4ee:	68f8      	ldr	r0, [r7, #12]
 801b4f0:	f7ff fcb7 	bl	801ae62 <lv_area_get_height>
 801b4f4:	4603      	mov	r3, r0
 801b4f6:	86bb      	strh	r3, [r7, #52]	; 0x34
        lv_coord_t dest_w = lv_area_get_width(dest_area);
 801b4f8:	68f8      	ldr	r0, [r7, #12]
 801b4fa:	f7ff fc9b 	bl	801ae34 <lv_area_get_width>
 801b4fe:	4603      	mov	r3, r0
 801b500:	867b      	strh	r3, [r7, #50]	; 0x32
        for(y = 0; y < dest_h; y++) {
 801b502:	2300      	movs	r3, #0
 801b504:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801b508:	e017      	b.n	801b53a <convert_cb+0x254>
            lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 801b50a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801b50e:	461a      	mov	r2, r3
 801b510:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801b512:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801b514:	f008 fe7c 	bl	8024210 <lv_memcpy>
            cbuf += dest_w;
 801b518:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801b51c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801b51e:	4413      	add	r3, r2
 801b520:	667b      	str	r3, [r7, #100]	; 0x64
            src_tmp8 += src_stride_byte;
 801b522:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801b526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b528:	4413      	add	r3, r2
 801b52a:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 801b52c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801b530:	b29b      	uxth	r3, r3
 801b532:	3301      	adds	r3, #1
 801b534:	b29b      	uxth	r3, r3
 801b536:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801b53a:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801b53e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801b542:	429a      	cmp	r2, r3
 801b544:	dbe1      	blt.n	801b50a <convert_cb+0x224>
        src_tmp8 = (const uint8_t *)src_buf;
 801b546:	68bb      	ldr	r3, [r7, #8]
 801b548:	647b      	str	r3, [r7, #68]	; 0x44
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 801b54a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b54e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801b552:	fb02 f303 	mul.w	r3, r2, r3
 801b556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b558:	4413      	add	r3, r2
 801b55a:	647b      	str	r3, [r7, #68]	; 0x44
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 801b55c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b560:	68fa      	ldr	r2, [r7, #12]
 801b562:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801b566:	fb02 f303 	mul.w	r3, r2, r3
 801b56a:	68fa      	ldr	r2, [r7, #12]
 801b56c:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b570:	4413      	add	r3, r2
 801b572:	461a      	mov	r2, r3
 801b574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b576:	4413      	add	r3, r2
 801b578:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 801b57a:	2300      	movs	r3, #0
 801b57c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801b580:	e017      	b.n	801b5b2 <convert_cb+0x2cc>
            lv_memcpy(abuf, src_tmp8, dest_w);
 801b582:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801b586:	461a      	mov	r2, r3
 801b588:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801b58a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801b58c:	f008 fe40 	bl	8024210 <lv_memcpy>
            abuf += dest_w;
 801b590:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801b594:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b596:	4413      	add	r3, r2
 801b598:	66bb      	str	r3, [r7, #104]	; 0x68
            src_tmp8 += src_stride;
 801b59a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801b59e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b5a0:	4413      	add	r3, r2
 801b5a2:	647b      	str	r3, [r7, #68]	; 0x44
        for(y = 0; y < dest_h; y++) {
 801b5a4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 801b5a8:	b29b      	uxth	r3, r3
 801b5aa:	3301      	adds	r3, #1
 801b5ac:	b29b      	uxth	r3, r3
 801b5ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801b5b2:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 801b5b6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801b5ba:	429a      	cmp	r2, r3
 801b5bc:	dbe1      	blt.n	801b582 <convert_cb+0x29c>
}
 801b5be:	e000      	b.n	801b5c2 <convert_cb+0x2dc>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801b5c0:	bf00      	nop
}
 801b5c2:	bf00      	nop
 801b5c4:	374c      	adds	r7, #76	; 0x4c
 801b5c6:	46bd      	mov	sp, r7
 801b5c8:	bd90      	pop	{r4, r7, pc}

0801b5ca <lv_area_get_width>:
{
 801b5ca:	b480      	push	{r7}
 801b5cc:	b083      	sub	sp, #12
 801b5ce:	af00      	add	r7, sp, #0
 801b5d0:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b5d8:	b29a      	uxth	r2, r3
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b5e0:	b29b      	uxth	r3, r3
 801b5e2:	1ad3      	subs	r3, r2, r3
 801b5e4:	b29b      	uxth	r3, r3
 801b5e6:	3301      	adds	r3, #1
 801b5e8:	b29b      	uxth	r3, r3
 801b5ea:	b21b      	sxth	r3, r3
}
 801b5ec:	4618      	mov	r0, r3
 801b5ee:	370c      	adds	r7, #12
 801b5f0:	46bd      	mov	sp, r7
 801b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5f6:	4770      	bx	lr

0801b5f8 <lv_area_get_height>:
{
 801b5f8:	b480      	push	{r7}
 801b5fa:	b083      	sub	sp, #12
 801b5fc:	af00      	add	r7, sp, #0
 801b5fe:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b606:	b29a      	uxth	r2, r3
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b60e:	b29b      	uxth	r3, r3
 801b610:	1ad3      	subs	r3, r2, r3
 801b612:	b29b      	uxth	r3, r3
 801b614:	3301      	adds	r3, #1
 801b616:	b29b      	uxth	r3, r3
 801b618:	b21b      	sxth	r3, r3
}
 801b61a:	4618      	mov	r0, r3
 801b61c:	370c      	adds	r7, #12
 801b61e:	46bd      	mov	sp, r7
 801b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b624:	4770      	bx	lr

0801b626 <lv_draw_sw_layer_create>:
 **********************/


struct _lv_draw_layer_ctx_t * lv_draw_sw_layer_create(struct _lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                                                      lv_draw_layer_flags_t flags)
{
 801b626:	b580      	push	{r7, lr}
 801b628:	b08a      	sub	sp, #40	; 0x28
 801b62a:	af00      	add	r7, sp, #0
 801b62c:	60f8      	str	r0, [r7, #12]
 801b62e:	60b9      	str	r1, [r7, #8]
 801b630:	4613      	mov	r3, r2
 801b632:	71fb      	strb	r3, [r7, #7]
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 801b634:	79fb      	ldrb	r3, [r7, #7]
 801b636:	f003 0301 	and.w	r3, r3, #1
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d001      	beq.n	801b642 <lv_draw_sw_layer_create+0x1c>
        LV_LOG_WARN("Rendering this widget needs LV_COLOR_SCREEN_TRANSP 1");
        return NULL;
 801b63e:	2300      	movs	r3, #0
 801b640:	e0df      	b.n	801b802 <lv_draw_sw_layer_create+0x1dc>
    }

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 801b642:	68bb      	ldr	r3, [r7, #8]
 801b644:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t px_size = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
 801b646:	79fb      	ldrb	r3, [r7, #7]
 801b648:	f003 0301 	and.w	r3, r3, #1
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d001      	beq.n	801b654 <lv_draw_sw_layer_create+0x2e>
 801b650:	2302      	movs	r3, #2
 801b652:	e000      	b.n	801b656 <lv_draw_sw_layer_create+0x30>
 801b654:	2301      	movs	r3, #1
 801b656:	623b      	str	r3, [r7, #32]
    if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 801b658:	79fb      	ldrb	r3, [r7, #7]
 801b65a:	f003 0302 	and.w	r3, r3, #2
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d074      	beq.n	801b74c <lv_draw_sw_layer_create+0x126>
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 801b662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b664:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801b666:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 801b66a:	f361 031e 	bfi	r3, r1, #0, #31
 801b66e:	6293      	str	r3, [r2, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 801b670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b672:	4618      	mov	r0, r3
 801b674:	f007 f891 	bl	802279a <lv_area_get_size>
 801b678:	4602      	mov	r2, r0
 801b67a:	6a3b      	ldr	r3, [r7, #32]
 801b67c:	fb02 f303 	mul.w	r3, r2, r3
 801b680:	61bb      	str	r3, [r7, #24]
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 801b682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b686:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801b68a:	461a      	mov	r2, r3
 801b68c:	69bb      	ldr	r3, [r7, #24]
 801b68e:	4293      	cmp	r3, r2
 801b690:	d207      	bcs.n	801b6a2 <lv_draw_sw_layer_create+0x7c>
 801b692:	69bb      	ldr	r3, [r7, #24]
 801b694:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b69a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801b69c:	f361 031e 	bfi	r3, r1, #0, #31
 801b6a0:	6293      	str	r3, [r2, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 801b6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b6a6:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801b6aa:	4618      	mov	r0, r3
 801b6ac:	f008 fc22 	bl	8023ef4 <lv_mem_alloc>
 801b6b0:	4602      	mov	r2, r0
 801b6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6b4:	615a      	str	r2, [r3, #20]
        if(layer_sw_ctx->base_draw.buf == NULL) {
 801b6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6b8:	695b      	ldr	r3, [r3, #20]
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d116      	bne.n	801b6ec <lv_draw_sw_layer_create+0xc6>
            LV_LOG_WARN("Cannot allocate %"LV_PRIu32" bytes for layer buffer. Allocating %"LV_PRIu32" bytes instead. (Reduced performance)",
                        (uint32_t)layer_sw_ctx->buf_size_bytes, (uint32_t)LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE * px_size);
            layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE;
 801b6be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b6c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801b6c2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 801b6c6:	f361 031e 	bfi	r3, r1, #0, #31
 801b6ca:	6293      	str	r3, [r2, #40]	; 0x28
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 801b6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b6d0:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801b6d4:	4618      	mov	r0, r3
 801b6d6:	f008 fc0d 	bl	8023ef4 <lv_mem_alloc>
 801b6da:	4602      	mov	r2, r0
 801b6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6de:	615a      	str	r2, [r3, #20]
            if(layer_sw_ctx->base_draw.buf == NULL) {
 801b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6e2:	695b      	ldr	r3, [r3, #20]
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	d101      	bne.n	801b6ec <lv_draw_sw_layer_create+0xc6>
                return NULL;
 801b6e8:	2300      	movs	r3, #0
 801b6ea:	e08a      	b.n	801b802 <lv_draw_sw_layer_create+0x1dc>
            }
        }
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 801b6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b6f0:	3308      	adds	r3, #8
 801b6f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b6f6:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->base_draw.area_act.y2 = layer_sw_ctx->base_draw.area_full.y1;
 801b6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6fc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b702:	81da      	strh	r2, [r3, #14]
        lv_coord_t w = lv_area_get_width(&layer_sw_ctx->base_draw.area_act);
 801b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b706:	3308      	adds	r3, #8
 801b708:	4618      	mov	r0, r3
 801b70a:	f7ff ff5e 	bl	801b5ca <lv_area_get_width>
 801b70e:	4603      	mov	r3, r0
 801b710:	82fb      	strh	r3, [r7, #22]
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 801b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b716:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801b71a:	461a      	mov	r2, r3
 801b71c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b720:	fb92 f3f3 	sdiv	r3, r2, r3
 801b724:	2b00      	cmp	r3, #0
 801b726:	da00      	bge.n	801b72a <lv_draw_sw_layer_create+0x104>
 801b728:	3301      	adds	r3, #1
 801b72a:	105b      	asrs	r3, r3, #1
 801b72c:	b21a      	sxth	r2, r3
 801b72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b730:	821a      	strh	r2, [r3, #16]
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 801b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b736:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801b73a:	461a      	mov	r2, r3
 801b73c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b740:	fb92 f3f3 	sdiv	r3, r2, r3
 801b744:	b21a      	sxth	r2, r3
 801b746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b748:	825a      	strh	r2, [r3, #18]
 801b74a:	e059      	b.n	801b800 <lv_draw_sw_layer_create+0x1da>
    }
    else {
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 801b74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b74e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b750:	3308      	adds	r3, #8
 801b752:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b756:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->buf_size_bytes = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 801b75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b75c:	4618      	mov	r0, r3
 801b75e:	f007 f81c 	bl	802279a <lv_area_get_size>
 801b762:	4603      	mov	r3, r0
 801b764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b768:	6a3a      	ldr	r2, [r7, #32]
 801b76a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801b76e:	fb03 f202 	mul.w	r2, r3, r2
 801b772:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801b776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b778:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801b77a:	f362 031e 	bfi	r3, r2, #0, #31
 801b77e:	628b      	str	r3, [r1, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 801b780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b784:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801b788:	4618      	mov	r0, r3
 801b78a:	f008 fbb3 	bl	8023ef4 <lv_mem_alloc>
 801b78e:	4602      	mov	r2, r0
 801b790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b792:	615a      	str	r2, [r3, #20]
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 801b794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b796:	695a      	ldr	r2, [r3, #20]
 801b798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b79c:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801b7a0:	4619      	mov	r1, r3
 801b7a2:	4610      	mov	r0, r2
 801b7a4:	f008 ffda 	bl	802475c <lv_memset_00>
        layer_sw_ctx->has_alpha = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 801b7a8:	79fb      	ldrb	r3, [r7, #7]
 801b7aa:	f003 0301 	and.w	r3, r3, #1
 801b7ae:	b2d9      	uxtb	r1, r3
 801b7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b7b2:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 801b7b6:	f361 13c7 	bfi	r3, r1, #7, #1
 801b7ba:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        if(layer_sw_ctx->base_draw.buf == NULL) {
 801b7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7c0:	695b      	ldr	r3, [r3, #20]
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d101      	bne.n	801b7ca <lv_draw_sw_layer_create+0x1a4>
            return NULL;
 801b7c6:	2300      	movs	r3, #0
 801b7c8:	e01b      	b.n	801b802 <lv_draw_sw_layer_create+0x1dc>
        }

        draw_ctx->buf = layer_sw_ctx->base_draw.buf;
 801b7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7cc:	695a      	ldr	r2, [r3, #20]
 801b7ce:	68fb      	ldr	r3, [r7, #12]
 801b7d0:	601a      	str	r2, [r3, #0]
        draw_ctx->buf_area = &layer_sw_ctx->base_draw.area_act;
 801b7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7d4:	f103 0208 	add.w	r2, r3, #8
 801b7d8:	68fb      	ldr	r3, [r7, #12]
 801b7da:	605a      	str	r2, [r3, #4]
        draw_ctx->clip_area = &layer_sw_ctx->base_draw.area_act;
 801b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7de:	f103 0208 	add.w	r2, r3, #8
 801b7e2:	68fb      	ldr	r3, [r7, #12]
 801b7e4:	609a      	str	r2, [r3, #8]

        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 801b7e6:	f7f5 f815 	bl	8010814 <_lv_refr_get_disp_refreshing>
 801b7ea:	61f8      	str	r0, [r7, #28]
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 801b7ec:	69fb      	ldr	r3, [r7, #28]
 801b7ee:	681a      	ldr	r2, [r3, #0]
 801b7f0:	79fb      	ldrb	r3, [r7, #7]
 801b7f2:	f003 0301 	and.w	r3, r3, #1
 801b7f6:	b2d9      	uxtb	r1, r3
 801b7f8:	7c13      	ldrb	r3, [r2, #16]
 801b7fa:	f361 1386 	bfi	r3, r1, #6, #1
 801b7fe:	7413      	strb	r3, [r2, #16]
    }

    return layer_ctx;
 801b800:	68bb      	ldr	r3, [r7, #8]
}
 801b802:	4618      	mov	r0, r3
 801b804:	3728      	adds	r7, #40	; 0x28
 801b806:	46bd      	mov	sp, r7
 801b808:	bd80      	pop	{r7, pc}

0801b80a <lv_draw_sw_layer_adjust>:

void lv_draw_sw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 801b80a:	b580      	push	{r7, lr}
 801b80c:	b086      	sub	sp, #24
 801b80e:	af00      	add	r7, sp, #0
 801b810:	60f8      	str	r0, [r7, #12]
 801b812:	60b9      	str	r1, [r7, #8]
 801b814:	4613      	mov	r3, r2
 801b816:	71fb      	strb	r3, [r7, #7]

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 801b818:	68bb      	ldr	r3, [r7, #8]
 801b81a:	617b      	str	r3, [r7, #20]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 801b81c:	f7f4 fffa 	bl	8010814 <_lv_refr_get_disp_refreshing>
 801b820:	6138      	str	r0, [r7, #16]
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 801b822:	79fb      	ldrb	r3, [r7, #7]
 801b824:	f003 0301 	and.w	r3, r3, #1
 801b828:	2b00      	cmp	r3, #0
 801b82a:	d017      	beq.n	801b85c <lv_draw_sw_layer_adjust+0x52>
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
 801b82c:	68bb      	ldr	r3, [r7, #8]
 801b82e:	695a      	ldr	r2, [r3, #20]
 801b830:	697b      	ldr	r3, [r7, #20]
 801b832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b834:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801b838:	4619      	mov	r1, r3
 801b83a:	4610      	mov	r0, r2
 801b83c:	f008 ff8e 	bl	802475c <lv_memset_00>
        layer_sw_ctx->has_alpha = 1;
 801b840:	697a      	ldr	r2, [r7, #20]
 801b842:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 801b846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b84a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        disp_refr->driver->screen_transp = 1;
 801b84e:	693b      	ldr	r3, [r7, #16]
 801b850:	681a      	ldr	r2, [r3, #0]
 801b852:	7c13      	ldrb	r3, [r2, #16]
 801b854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b858:	7413      	strb	r3, [r2, #16]
 801b85a:	e00c      	b.n	801b876 <lv_draw_sw_layer_adjust+0x6c>
    }
    else {
        layer_sw_ctx->has_alpha = 0;
 801b85c:	697a      	ldr	r2, [r7, #20]
 801b85e:	f892 302b 	ldrb.w	r3, [r2, #43]	; 0x2b
 801b862:	f36f 13c7 	bfc	r3, #7, #1
 801b866:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
        disp_refr->driver->screen_transp = 0;
 801b86a:	693b      	ldr	r3, [r7, #16]
 801b86c:	681a      	ldr	r2, [r3, #0]
 801b86e:	7c13      	ldrb	r3, [r2, #16]
 801b870:	f36f 1386 	bfc	r3, #6, #1
 801b874:	7413      	strb	r3, [r2, #16]
    }

    draw_ctx->buf = layer_ctx->buf;
 801b876:	68bb      	ldr	r3, [r7, #8]
 801b878:	695a      	ldr	r2, [r3, #20]
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = &layer_ctx->area_act;
 801b87e:	68bb      	ldr	r3, [r7, #8]
 801b880:	f103 0208 	add.w	r2, r3, #8
 801b884:	68fb      	ldr	r3, [r7, #12]
 801b886:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = &layer_ctx->area_act;
 801b888:	68bb      	ldr	r3, [r7, #8]
 801b88a:	f103 0208 	add.w	r2, r3, #8
 801b88e:	68fb      	ldr	r3, [r7, #12]
 801b890:	609a      	str	r2, [r3, #8]
}
 801b892:	bf00      	nop
 801b894:	3718      	adds	r7, #24
 801b896:	46bd      	mov	sp, r7
 801b898:	bd80      	pop	{r7, pc}

0801b89a <lv_draw_sw_layer_blend>:

void lv_draw_sw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                            const lv_draw_img_dsc_t * draw_dsc)
{
 801b89a:	b580      	push	{r7, lr}
 801b89c:	b08a      	sub	sp, #40	; 0x28
 801b89e:	af00      	add	r7, sp, #0
 801b8a0:	60f8      	str	r0, [r7, #12]
 801b8a2:	60b9      	str	r1, [r7, #8]
 801b8a4:	607a      	str	r2, [r7, #4]
    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
 801b8a6:	68bb      	ldr	r3, [r7, #8]
 801b8a8:	627b      	str	r3, [r7, #36]	; 0x24

    lv_img_dsc_t img;
    img.data = draw_ctx->buf;
 801b8aa:	68fb      	ldr	r3, [r7, #12]
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	61fb      	str	r3, [r7, #28]
    img.header.always_zero = 0;
 801b8b0:	7d3b      	ldrb	r3, [r7, #20]
 801b8b2:	f36f 1347 	bfc	r3, #5, #3
 801b8b6:	753b      	strb	r3, [r7, #20]
    img.header.w = lv_area_get_width(draw_ctx->buf_area);
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	685b      	ldr	r3, [r3, #4]
 801b8bc:	4618      	mov	r0, r3
 801b8be:	f7ff fe84 	bl	801b5ca <lv_area_get_width>
 801b8c2:	4603      	mov	r3, r0
 801b8c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b8c8:	b29a      	uxth	r2, r3
 801b8ca:	697b      	ldr	r3, [r7, #20]
 801b8cc:	f362 2394 	bfi	r3, r2, #10, #11
 801b8d0:	617b      	str	r3, [r7, #20]
    img.header.h = lv_area_get_height(draw_ctx->buf_area);
 801b8d2:	68fb      	ldr	r3, [r7, #12]
 801b8d4:	685b      	ldr	r3, [r3, #4]
 801b8d6:	4618      	mov	r0, r3
 801b8d8:	f7ff fe8e 	bl	801b5f8 <lv_area_get_height>
 801b8dc:	4603      	mov	r3, r0
 801b8de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801b8e2:	b29a      	uxth	r2, r3
 801b8e4:	8afb      	ldrh	r3, [r7, #22]
 801b8e6:	f362 134f 	bfi	r3, r2, #5, #11
 801b8ea:	82fb      	strh	r3, [r7, #22]
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 801b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8ee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801b8f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801b8f6:	b2db      	uxtb	r3, r3
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	d001      	beq.n	801b900 <lv_draw_sw_layer_blend+0x66>
 801b8fc:	2205      	movs	r2, #5
 801b8fe:	e000      	b.n	801b902 <lv_draw_sw_layer_blend+0x68>
 801b900:	2204      	movs	r2, #4
 801b902:	7d3b      	ldrb	r3, [r7, #20]
 801b904:	f362 0304 	bfi	r3, r2, #0, #5
 801b908:	753b      	strb	r3, [r7, #20]

    /*Restore the original draw_ctx*/
    draw_ctx->buf = layer_ctx->original.buf;
 801b90a:	68bb      	ldr	r3, [r7, #8]
 801b90c:	6a1a      	ldr	r2, [r3, #32]
 801b90e:	68fb      	ldr	r3, [r7, #12]
 801b910:	601a      	str	r2, [r3, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 801b912:	68bb      	ldr	r3, [r7, #8]
 801b914:	69da      	ldr	r2, [r3, #28]
 801b916:	68fb      	ldr	r3, [r7, #12]
 801b918:	605a      	str	r2, [r3, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 801b91a:	68bb      	ldr	r3, [r7, #8]
 801b91c:	699a      	ldr	r2, [r3, #24]
 801b91e:	68fb      	ldr	r3, [r7, #12]
 801b920:	609a      	str	r2, [r3, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 801b922:	f7f4 ff77 	bl	8010814 <_lv_refr_get_disp_refreshing>
 801b926:	6238      	str	r0, [r7, #32]
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 801b928:	6a3b      	ldr	r3, [r7, #32]
 801b92a:	681a      	ldr	r2, [r3, #0]
 801b92c:	68bb      	ldr	r3, [r7, #8]
 801b92e:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 801b932:	7c13      	ldrb	r3, [r2, #16]
 801b934:	f361 1386 	bfi	r3, r1, #6, #1
 801b938:	7413      	strb	r3, [r2, #16]

    /*Blend the layer*/
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 801b93a:	68bb      	ldr	r3, [r7, #8]
 801b93c:	f103 0208 	add.w	r2, r3, #8
 801b940:	f107 0314 	add.w	r3, r7, #20
 801b944:	6879      	ldr	r1, [r7, #4]
 801b946:	68f8      	ldr	r0, [r7, #12]
 801b948:	f7f6 fcd2 	bl	80122f0 <lv_draw_img>
    lv_draw_wait_for_finish(draw_ctx);
 801b94c:	68f8      	ldr	r0, [r7, #12]
 801b94e:	f7f6 fc25 	bl	801219c <lv_draw_wait_for_finish>
    lv_img_cache_invalidate_src(&img);
 801b952:	f107 0314 	add.w	r3, r7, #20
 801b956:	4618      	mov	r0, r3
 801b958:	f7fa fd92 	bl	8016480 <lv_img_cache_invalidate_src>
}
 801b95c:	bf00      	nop
 801b95e:	3728      	adds	r7, #40	; 0x28
 801b960:	46bd      	mov	sp, r7
 801b962:	bd80      	pop	{r7, pc}

0801b964 <lv_draw_sw_layer_destroy>:

void lv_draw_sw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 801b964:	b580      	push	{r7, lr}
 801b966:	b082      	sub	sp, #8
 801b968:	af00      	add	r7, sp, #0
 801b96a:	6078      	str	r0, [r7, #4]
 801b96c:	6039      	str	r1, [r7, #0]
    LV_UNUSED(draw_ctx);

    lv_mem_free(layer_ctx->buf);
 801b96e:	683b      	ldr	r3, [r7, #0]
 801b970:	695b      	ldr	r3, [r3, #20]
 801b972:	4618      	mov	r0, r3
 801b974:	f008 faee 	bl	8023f54 <lv_mem_free>
}
 801b978:	bf00      	nop
 801b97a:	3708      	adds	r7, #8
 801b97c:	46bd      	mov	sp, r7
 801b97e:	bd80      	pop	{r7, pc}

0801b980 <lv_area_copy>:
{
 801b980:	b480      	push	{r7}
 801b982:	b083      	sub	sp, #12
 801b984:	af00      	add	r7, sp, #0
 801b986:	6078      	str	r0, [r7, #4]
 801b988:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 801b98a:	683b      	ldr	r3, [r7, #0]
 801b98c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 801b994:	683b      	ldr	r3, [r7, #0]
 801b996:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801b99e:	683b      	ldr	r3, [r7, #0]
 801b9a0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 801b9a8:	683b      	ldr	r3, [r7, #0]
 801b9aa:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	80da      	strh	r2, [r3, #6]
}
 801b9b2:	bf00      	nop
 801b9b4:	370c      	adds	r7, #12
 801b9b6:	46bd      	mov	sp, r7
 801b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9bc:	4770      	bx	lr

0801b9be <lv_area_get_width>:
{
 801b9be:	b480      	push	{r7}
 801b9c0:	b083      	sub	sp, #12
 801b9c2:	af00      	add	r7, sp, #0
 801b9c4:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b9cc:	b29a      	uxth	r2, r3
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b9d4:	b29b      	uxth	r3, r3
 801b9d6:	1ad3      	subs	r3, r2, r3
 801b9d8:	b29b      	uxth	r3, r3
 801b9da:	3301      	adds	r3, #1
 801b9dc:	b29b      	uxth	r3, r3
 801b9de:	b21b      	sxth	r3, r3
}
 801b9e0:	4618      	mov	r0, r3
 801b9e2:	370c      	adds	r7, #12
 801b9e4:	46bd      	mov	sp, r7
 801b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ea:	4770      	bx	lr

0801b9ec <lv_draw_sw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_sw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                       uint32_t letter)
{
 801b9ec:	b590      	push	{r4, r7, lr}
 801b9ee:	b09d      	sub	sp, #116	; 0x74
 801b9f0:	af02      	add	r7, sp, #8
 801b9f2:	60f8      	str	r0, [r7, #12]
 801b9f4:	60b9      	str	r1, [r7, #8]
 801b9f6:	607a      	str	r2, [r7, #4]
 801b9f8:	603b      	str	r3, [r7, #0]
    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(dsc->font, &g, letter, '\0');
 801b9fa:	68bb      	ldr	r3, [r7, #8]
 801b9fc:	6818      	ldr	r0, [r3, #0]
 801b9fe:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 801ba02:	2300      	movs	r3, #0
 801ba04:	683a      	ldr	r2, [r7, #0]
 801ba06:	f005 fcfc 	bl	8021402 <lv_font_get_glyph_dsc>
 801ba0a:	4603      	mov	r3, r0
 801ba0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if(g_ret == false) {
 801ba10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801ba14:	f083 0301 	eor.w	r3, r3, #1
 801ba18:	b2db      	uxtb	r3, r3
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d05c      	beq.n	801bad8 <lv_draw_sw_letter+0xec>
        /*Add warning if the dsc is not found
         *but do not print warning for non printable ASCII chars (e.g. '\n')*/
        if(letter >= 0x20 &&
 801ba1e:	683b      	ldr	r3, [r7, #0]
 801ba20:	2b1f      	cmp	r3, #31
 801ba22:	f240 80cf 	bls.w	801bbc4 <lv_draw_sw_letter+0x1d8>
 801ba26:	683b      	ldr	r3, [r7, #0]
 801ba28:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 801ba2c:	4293      	cmp	r3, r2
 801ba2e:	f000 80c9 	beq.w	801bbc4 <lv_draw_sw_letter+0x1d8>
           letter != 0xf8ff && /*LV_SYMBOL_DUMMY*/
 801ba32:	683b      	ldr	r3, [r7, #0]
 801ba34:	f242 020c 	movw	r2, #8204	; 0x200c
 801ba38:	4293      	cmp	r3, r2
 801ba3a:	f000 80c3 	beq.w	801bbc4 <lv_draw_sw_letter+0x1d8>

#if LV_USE_FONT_PLACEHOLDER
            /* draw placeholder */
            lv_area_t glyph_coords;
            lv_draw_rect_dsc_t glyph_dsc;
            lv_coord_t begin_x = pos_p->x + g.ofs_x;
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ba44:	b29a      	uxth	r2, r3
 801ba46:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801ba4a:	b29b      	uxth	r3, r3
 801ba4c:	4413      	add	r3, r2
 801ba4e:	b29b      	uxth	r3, r3
 801ba50:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ba5a:	b29a      	uxth	r2, r3
 801ba5c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801ba60:	b29b      	uxth	r3, r3
 801ba62:	4413      	add	r3, r2
 801ba64:	b29b      	uxth	r3, r3
 801ba66:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            lv_area_set(&glyph_coords, begin_x, begin_y, begin_x + g.box_w, begin_y + g.box_h);
 801ba6a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 801ba6e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801ba72:	4413      	add	r3, r2
 801ba74:	b29b      	uxth	r3, r3
 801ba76:	b21c      	sxth	r4, r3
 801ba78:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801ba7c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801ba80:	4413      	add	r3, r2
 801ba82:	b29b      	uxth	r3, r3
 801ba84:	b21b      	sxth	r3, r3
 801ba86:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 801ba8a:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
 801ba8e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801ba92:	9300      	str	r3, [sp, #0]
 801ba94:	4623      	mov	r3, r4
 801ba96:	f006 fe49 	bl	802272c <lv_area_set>
            lv_draw_rect_dsc_init(&glyph_dsc);
 801ba9a:	f107 0310 	add.w	r3, r7, #16
 801ba9e:	4618      	mov	r0, r3
 801baa0:	f7fa fb5a 	bl	8016158 <lv_draw_rect_dsc_init>
            glyph_dsc.bg_opa = LV_OPA_MIN;
 801baa4:	2302      	movs	r3, #2
 801baa6:	74fb      	strb	r3, [r7, #19]
            glyph_dsc.outline_opa = LV_OPA_MIN;
 801baa8:	2302      	movs	r3, #2
 801baaa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            glyph_dsc.shadow_opa = LV_OPA_MIN;
 801baae:	2302      	movs	r3, #2
 801bab0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            glyph_dsc.bg_img_opa = LV_OPA_MIN;
 801bab4:	2302      	movs	r3, #2
 801bab6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            glyph_dsc.border_color = dsc->color;
 801baba:	68bb      	ldr	r3, [r7, #8]
 801babc:	7b1b      	ldrb	r3, [r3, #12]
 801babe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            glyph_dsc.border_width = 1;
 801bac2:	2301      	movs	r3, #1
 801bac4:	857b      	strh	r3, [r7, #42]	; 0x2a
            draw_ctx->draw_rect(draw_ctx, &glyph_dsc, &glyph_coords);
 801bac6:	68fb      	ldr	r3, [r7, #12]
 801bac8:	68db      	ldr	r3, [r3, #12]
 801baca:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801bace:	f107 0110 	add.w	r1, r7, #16
 801bad2:	68f8      	ldr	r0, [r7, #12]
 801bad4:	4798      	blx	r3
#endif
        }
        return;
 801bad6:	e075      	b.n	801bbc4 <lv_draw_sw_letter+0x1d8>
    }

    /*Don't draw anything if the character is empty. E.g. space*/
    if((g.box_h == 0) || (g.box_w == 0)) return;
 801bad8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801badc:	2b00      	cmp	r3, #0
 801bade:	d073      	beq.n	801bbc8 <lv_draw_sw_letter+0x1dc>
 801bae0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d06f      	beq.n	801bbc8 <lv_draw_sw_letter+0x1dc>

    lv_point_t gpos;
    gpos.x = pos_p->x + g.ofs_x;
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	f9b3 3000 	ldrsh.w	r3, [r3]
 801baee:	b29a      	uxth	r2, r3
 801baf0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801baf4:	b29b      	uxth	r3, r3
 801baf6:	4413      	add	r3, r2
 801baf8:	b29b      	uxth	r3, r3
 801bafa:	b21b      	sxth	r3, r3
 801bafc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bb06:	b29a      	uxth	r2, r3
 801bb08:	68bb      	ldr	r3, [r7, #8]
 801bb0a:	681b      	ldr	r3, [r3, #0]
 801bb0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801bb10:	b299      	uxth	r1, r3
 801bb12:	68bb      	ldr	r3, [r7, #8]
 801bb14:	681b      	ldr	r3, [r3, #0]
 801bb16:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801bb1a:	b29b      	uxth	r3, r3
 801bb1c:	1acb      	subs	r3, r1, r3
 801bb1e:	b29b      	uxth	r3, r3
 801bb20:	4413      	add	r3, r2
 801bb22:	b29a      	uxth	r2, r3
 801bb24:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801bb28:	1ad3      	subs	r3, r2, r3
 801bb2a:	b29a      	uxth	r2, r3
 801bb2c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801bb30:	b29b      	uxth	r3, r3
 801bb32:	1ad3      	subs	r3, r2, r3
 801bb34:	b29b      	uxth	r3, r3
 801bb36:	b21b      	sxth	r3, r3
 801bb38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    /*If the letter is completely out of mask don't draw it*/
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 801bb3c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 801bb40:	461a      	mov	r2, r3
 801bb42:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801bb46:	4413      	add	r3, r2
 801bb48:	68fa      	ldr	r2, [r7, #12]
 801bb4a:	6892      	ldr	r2, [r2, #8]
 801bb4c:	f9b2 2000 	ldrsh.w	r2, [r2]
 801bb50:	4293      	cmp	r3, r2
 801bb52:	db3b      	blt.n	801bbcc <lv_draw_sw_letter+0x1e0>
       gpos.x > draw_ctx->clip_area->x2 ||
 801bb54:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 801bb58:	68fb      	ldr	r3, [r7, #12]
 801bb5a:	689b      	ldr	r3, [r3, #8]
 801bb5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 801bb60:	429a      	cmp	r2, r3
 801bb62:	dc33      	bgt.n	801bbcc <lv_draw_sw_letter+0x1e0>
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 801bb64:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801bb68:	461a      	mov	r2, r3
 801bb6a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801bb6e:	4413      	add	r3, r2
 801bb70:	68fa      	ldr	r2, [r7, #12]
 801bb72:	6892      	ldr	r2, [r2, #8]
 801bb74:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
       gpos.x > draw_ctx->clip_area->x2 ||
 801bb78:	4293      	cmp	r3, r2
 801bb7a:	db27      	blt.n	801bbcc <lv_draw_sw_letter+0x1e0>
       gpos.y > draw_ctx->clip_area->y2)  {
 801bb7c:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 801bb80:	68fb      	ldr	r3, [r7, #12]
 801bb82:	689b      	ldr	r3, [r3, #8]
 801bb84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 801bb88:	429a      	cmp	r2, r3
 801bb8a:	dc1f      	bgt.n	801bbcc <lv_draw_sw_letter+0x1e0>
        return;
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(g.resolved_font, letter);
 801bb8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bb8e:	6839      	ldr	r1, [r7, #0]
 801bb90:	4618      	mov	r0, r3
 801bb92:	f005 fc23 	bl	80213dc <lv_font_get_glyph_bitmap>
 801bb96:	6638      	str	r0, [r7, #96]	; 0x60
    if(map_p == NULL) {
 801bb98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d018      	beq.n	801bbd0 <lv_draw_sw_letter+0x1e4>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
        return;
    }

    if(g.resolved_font->subpx) {
 801bb9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bba0:	7b1b      	ldrb	r3, [r3, #12]
 801bba2:	f003 0303 	and.w	r3, r3, #3
 801bba6:	b2db      	uxtb	r3, r3
 801bba8:	2b00      	cmp	r3, #0
 801bbaa:	d112      	bne.n	801bbd2 <lv_draw_sw_letter+0x1e6>
#else
        LV_LOG_WARN("Can't draw sub-pixel rendered letter because LV_USE_FONT_SUBPX == 0 in lv_conf.h");
#endif
    }
    else {
        draw_letter_normal(draw_ctx, dsc, &gpos, &g, map_p);
 801bbac:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 801bbb0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801bbb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bbb6:	9300      	str	r3, [sp, #0]
 801bbb8:	460b      	mov	r3, r1
 801bbba:	68b9      	ldr	r1, [r7, #8]
 801bbbc:	68f8      	ldr	r0, [r7, #12]
 801bbbe:	f000 f80b 	bl	801bbd8 <draw_letter_normal>
 801bbc2:	e006      	b.n	801bbd2 <lv_draw_sw_letter+0x1e6>
        return;
 801bbc4:	bf00      	nop
 801bbc6:	e004      	b.n	801bbd2 <lv_draw_sw_letter+0x1e6>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 801bbc8:	bf00      	nop
 801bbca:	e002      	b.n	801bbd2 <lv_draw_sw_letter+0x1e6>
        return;
 801bbcc:	bf00      	nop
 801bbce:	e000      	b.n	801bbd2 <lv_draw_sw_letter+0x1e6>
        return;
 801bbd0:	bf00      	nop
    }
}
 801bbd2:	376c      	adds	r7, #108	; 0x6c
 801bbd4:	46bd      	mov	sp, r7
 801bbd6:	bd90      	pop	{r4, r7, pc}

0801bbd8 <draw_letter_normal>:
 *   STATIC FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_letter_normal(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                                     const lv_point_t * pos, lv_font_glyph_dsc_t * g, const uint8_t * map_p)
{
 801bbd8:	b580      	push	{r7, lr}
 801bbda:	b0aa      	sub	sp, #168	; 0xa8
 801bbdc:	af00      	add	r7, sp, #0
 801bbde:	60f8      	str	r0, [r7, #12]
 801bbe0:	60b9      	str	r1, [r7, #8]
 801bbe2:	607a      	str	r2, [r7, #4]
 801bbe4:	603b      	str	r3, [r7, #0]

    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 801bbe6:	683b      	ldr	r3, [r7, #0]
 801bbe8:	7b9b      	ldrb	r3, [r3, #14]
 801bbea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801bbee:	b2db      	uxtb	r3, r3
 801bbf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    lv_opa_t opa = dsc->opa;
 801bbf4:	68bb      	ldr	r3, [r7, #8]
 801bbf6:	7e1b      	ldrb	r3, [r3, #24]
 801bbf8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 801bbfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bc00:	2b03      	cmp	r3, #3
 801bc02:	d102      	bne.n	801bc0a <draw_letter_normal+0x32>
 801bc04:	2304      	movs	r3, #4
 801bc06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        lv_draw_img(draw_ctx, &img_dsc, &fill_area, map_p);
        return;
    }
#endif

    switch(bpp) {
 801bc0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bc0e:	3b01      	subs	r3, #1
 801bc10:	2b07      	cmp	r3, #7
 801bc12:	f200 8287 	bhi.w	801c124 <draw_letter_normal+0x54c>
 801bc16:	a201      	add	r2, pc, #4	; (adr r2, 801bc1c <draw_letter_normal+0x44>)
 801bc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bc1c:	0801bc3d 	.word	0x0801bc3d
 801bc20:	0801bc51 	.word	0x0801bc51
 801bc24:	0801c125 	.word	0x0801c125
 801bc28:	0801bc65 	.word	0x0801bc65
 801bc2c:	0801c125 	.word	0x0801c125
 801bc30:	0801c125 	.word	0x0801c125
 801bc34:	0801c125 	.word	0x0801c125
 801bc38:	0801bc79 	.word	0x0801bc79
        case 1:
            bpp_opa_table_p = _lv_bpp1_opa_table;
 801bc3c:	4b6a      	ldr	r3, [pc, #424]	; (801bde8 <draw_letter_normal+0x210>)
 801bc3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0x80;
 801bc42:	2380      	movs	r3, #128	; 0x80
 801bc44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 2;
 801bc48:	2302      	movs	r3, #2
 801bc4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 801bc4e:	e01e      	b.n	801bc8e <draw_letter_normal+0xb6>
        case 2:
            bpp_opa_table_p = _lv_bpp2_opa_table;
 801bc50:	4b66      	ldr	r3, [pc, #408]	; (801bdec <draw_letter_normal+0x214>)
 801bc52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xC0;
 801bc56:	23c0      	movs	r3, #192	; 0xc0
 801bc58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 4;
 801bc5c:	2304      	movs	r3, #4
 801bc5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 801bc62:	e014      	b.n	801bc8e <draw_letter_normal+0xb6>
        case 4:
            bpp_opa_table_p = _lv_bpp4_opa_table;
 801bc64:	4b62      	ldr	r3, [pc, #392]	; (801bdf0 <draw_letter_normal+0x218>)
 801bc66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xF0;
 801bc6a:	23f0      	movs	r3, #240	; 0xf0
 801bc6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 16;
 801bc70:	2310      	movs	r3, #16
 801bc72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;
 801bc76:	e00a      	b.n	801bc8e <draw_letter_normal+0xb6>
        case 8:
            bpp_opa_table_p = _lv_bpp8_opa_table;
 801bc78:	4b5e      	ldr	r3, [pc, #376]	; (801bdf4 <draw_letter_normal+0x21c>)
 801bc7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            bitmask_init  = 0xFF;
 801bc7e:	23ff      	movs	r3, #255	; 0xff
 801bc80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            shades = 256;
 801bc84:	f44f 7380 	mov.w	r3, #256	; 0x100
 801bc88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            break;       /*No opa table, pixel value will be used directly*/
 801bc8c:	bf00      	nop
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 801bc8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801bc92:	2bfc      	cmp	r3, #252	; 0xfc
 801bc94:	d842      	bhi.n	801bd1c <draw_letter_normal+0x144>
        if(prev_opa != opa || prev_bpp != bpp) {
 801bc96:	4b58      	ldr	r3, [pc, #352]	; (801bdf8 <draw_letter_normal+0x220>)
 801bc98:	781b      	ldrb	r3, [r3, #0]
 801bc9a:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 801bc9e:	429a      	cmp	r2, r3
 801bca0:	d105      	bne.n	801bcae <draw_letter_normal+0xd6>
 801bca2:	4b56      	ldr	r3, [pc, #344]	; (801bdfc <draw_letter_normal+0x224>)
 801bca4:	681b      	ldr	r3, [r3, #0]
 801bca6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801bcaa:	429a      	cmp	r2, r3
 801bcac:	d02b      	beq.n	801bd06 <draw_letter_normal+0x12e>
            uint32_t i;
            for(i = 0; i < shades; i++) {
 801bcae:	2300      	movs	r3, #0
 801bcb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801bcb4:	e021      	b.n	801bcfa <draw_letter_normal+0x122>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 801bcb6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801bcba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801bcbe:	4413      	add	r3, r2
 801bcc0:	781b      	ldrb	r3, [r3, #0]
 801bcc2:	2bff      	cmp	r3, #255	; 0xff
 801bcc4:	d00d      	beq.n	801bce2 <draw_letter_normal+0x10a>
 801bcc6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801bcca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801bcce:	4413      	add	r3, r2
 801bcd0:	781b      	ldrb	r3, [r3, #0]
 801bcd2:	461a      	mov	r2, r3
 801bcd4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801bcd8:	fb02 f303 	mul.w	r3, r2, r3
 801bcdc:	121b      	asrs	r3, r3, #8
 801bcde:	b2db      	uxtb	r3, r3
 801bce0:	e001      	b.n	801bce6 <draw_letter_normal+0x10e>
 801bce2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801bce6:	4946      	ldr	r1, [pc, #280]	; (801be00 <draw_letter_normal+0x228>)
 801bce8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801bcec:	440a      	add	r2, r1
 801bcee:	7013      	strb	r3, [r2, #0]
            for(i = 0; i < shades; i++) {
 801bcf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801bcf4:	3301      	adds	r3, #1
 801bcf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801bcfa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801bcfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801bd02:	429a      	cmp	r2, r3
 801bd04:	d3d7      	bcc.n	801bcb6 <draw_letter_normal+0xde>
            }
        }
        bpp_opa_table_p = opa_table;
 801bd06:	4b3e      	ldr	r3, [pc, #248]	; (801be00 <draw_letter_normal+0x228>)
 801bd08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        prev_opa = opa;
 801bd0c:	4a3a      	ldr	r2, [pc, #232]	; (801bdf8 <draw_letter_normal+0x220>)
 801bd0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801bd12:	7013      	strb	r3, [r2, #0]
        prev_bpp = bpp;
 801bd14:	4a39      	ldr	r2, [pc, #228]	; (801bdfc <draw_letter_normal+0x224>)
 801bd16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bd1a:	6013      	str	r3, [r2, #0]
    }

    int32_t col, row;
    int32_t box_w = g->box_w;
 801bd1c:	683b      	ldr	r3, [r7, #0]
 801bd1e:	88db      	ldrh	r3, [r3, #6]
 801bd20:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t box_h = g->box_h;
 801bd22:	683b      	ldr	r3, [r7, #0]
 801bd24:	891b      	ldrh	r3, [r3, #8]
 801bd26:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 801bd28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bd2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801bd2e:	fb02 f303 	mul.w	r3, r2, r3
 801bd32:	673b      	str	r3, [r7, #112]	; 0x70

    /*Calculate the col/row start/end on the map*/
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bd3a:	68fb      	ldr	r3, [r7, #12]
 801bd3c:	689b      	ldr	r3, [r3, #8]
 801bd3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bd42:	429a      	cmp	r2, r3
 801bd44:	da09      	bge.n	801bd5a <draw_letter_normal+0x182>
 801bd46:	68fb      	ldr	r3, [r7, #12]
 801bd48:	689b      	ldr	r3, [r3, #8]
 801bd4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bd4e:	461a      	mov	r2, r3
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bd56:	1ad3      	subs	r3, r2, r3
 801bd58:	e000      	b.n	801bd5c <draw_letter_normal+0x184>
 801bd5a:	2300      	movs	r3, #0
 801bd5c:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bd64:	461a      	mov	r2, r3
 801bd66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bd68:	4413      	add	r3, r2
 801bd6a:	68fa      	ldr	r2, [r7, #12]
 801bd6c:	6892      	ldr	r2, [r2, #8]
 801bd6e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801bd72:	4293      	cmp	r3, r2
 801bd74:	dd0a      	ble.n	801bd8c <draw_letter_normal+0x1b4>
 801bd76:	68fb      	ldr	r3, [r7, #12]
 801bd78:	689b      	ldr	r3, [r3, #8]
 801bd7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bd7e:	461a      	mov	r2, r3
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bd86:	1ad3      	subs	r3, r2, r3
 801bd88:	3301      	adds	r3, #1
 801bd8a:	e000      	b.n	801bd8e <draw_letter_normal+0x1b6>
 801bd8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bd8e:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801bd96:	68fb      	ldr	r3, [r7, #12]
 801bd98:	689b      	ldr	r3, [r3, #8]
 801bd9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bd9e:	429a      	cmp	r2, r3
 801bda0:	da09      	bge.n	801bdb6 <draw_letter_normal+0x1de>
 801bda2:	68fb      	ldr	r3, [r7, #12]
 801bda4:	689b      	ldr	r3, [r3, #8]
 801bda6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bdaa:	461a      	mov	r2, r3
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bdb2:	1ad3      	subs	r3, r2, r3
 801bdb4:	e000      	b.n	801bdb8 <draw_letter_normal+0x1e0>
 801bdb6:	2300      	movs	r3, #0
 801bdb8:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bdc0:	461a      	mov	r2, r3
 801bdc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bdc4:	4413      	add	r3, r2
 801bdc6:	68fa      	ldr	r2, [r7, #12]
 801bdc8:	6892      	ldr	r2, [r2, #8]
 801bdca:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801bdce:	4293      	cmp	r3, r2
 801bdd0:	dd18      	ble.n	801be04 <draw_letter_normal+0x22c>
 801bdd2:	68fb      	ldr	r3, [r7, #12]
 801bdd4:	689b      	ldr	r3, [r3, #8]
 801bdd6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801bdda:	461a      	mov	r2, r3
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801bde2:	1ad3      	subs	r3, r2, r3
 801bde4:	3301      	adds	r3, #1
 801bde6:	e00e      	b.n	801be06 <draw_letter_normal+0x22e>
 801bde8:	0802896c 	.word	0x0802896c
 801bdec:	08028970 	.word	0x08028970
 801bdf0:	08028974 	.word	0x08028974
 801bdf4:	08028984 	.word	0x08028984
 801bdf8:	2000078d 	.word	0x2000078d
 801bdfc:	20000790 	.word	0x20000790
 801be00:	20000794 	.word	0x20000794
 801be04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801be06:	663b      	str	r3, [r7, #96]	; 0x60

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 801be08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801be0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801be0c:	fb02 f303 	mul.w	r3, r2, r3
 801be10:	4619      	mov	r1, r3
 801be12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801be14:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801be18:	fb02 f303 	mul.w	r3, r2, r3
 801be1c:	440b      	add	r3, r1
 801be1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    map_p += bit_ofs >> 3;
 801be20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801be22:	08db      	lsrs	r3, r3, #3
 801be24:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801be28:	4413      	add	r3, r2
 801be2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    uint8_t letter_px;
    uint32_t col_bit;
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 801be2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801be30:	f003 0307 	and.w	r3, r3, #7
 801be34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801be38:	f107 0320 	add.w	r3, r7, #32
 801be3c:	211c      	movs	r1, #28
 801be3e:	4618      	mov	r0, r3
 801be40:	f008 fc8c 	bl	802475c <lv_memset_00>
    blend_dsc.color = dsc->color;
 801be44:	68bb      	ldr	r3, [r7, #8]
 801be46:	7b1b      	ldrb	r3, [r3, #12]
 801be48:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    blend_dsc.opa = dsc->opa;
 801be4c:	68bb      	ldr	r3, [r7, #8]
 801be4e:	7e1b      	ldrb	r3, [r3, #24]
 801be50:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    blend_dsc.blend_mode = dsc->blend_mode;
 801be54:	68bb      	ldr	r3, [r7, #8]
 801be56:	7f1b      	ldrb	r3, [r3, #28]
 801be58:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 801be5c:	b2db      	uxtb	r3, r3
 801be5e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 801be62:	f7f4 fcd7 	bl	8010814 <_lv_refr_get_disp_refreshing>
 801be66:	4603      	mov	r3, r0
 801be68:	4618      	mov	r0, r3
 801be6a:	f005 fffd 	bl	8021e68 <lv_disp_get_hor_res>
 801be6e:	4603      	mov	r3, r0
 801be70:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 801be74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801be76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801be78:	fb03 f202 	mul.w	r2, r3, r2
 801be7c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801be80:	4293      	cmp	r3, r2
 801be82:	bfa8      	it	ge
 801be84:	4613      	movge	r3, r2
 801be86:	657b      	str	r3, [r7, #84]	; 0x54
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 801be88:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801be8a:	f008 f8bd 	bl	8024008 <lv_mem_buf_get>
 801be8e:	6538      	str	r0, [r7, #80]	; 0x50
    blend_dsc.mask_buf = mask_buf;
 801be90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801be92:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t mask_p = 0;
 801be94:	2300      	movs	r3, #0
 801be96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos->x;
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bea0:	b29a      	uxth	r2, r3
 801bea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bea4:	b29b      	uxth	r3, r3
 801bea6:	4413      	add	r3, r2
 801bea8:	b29b      	uxth	r3, r3
 801beaa:	b21b      	sxth	r3, r3
 801beac:	833b      	strh	r3, [r7, #24]
    fill_area.x2 = col_end  + pos->x - 1;
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801beb4:	b29a      	uxth	r2, r3
 801beb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801beb8:	b29b      	uxth	r3, r3
 801beba:	4413      	add	r3, r2
 801bebc:	b29b      	uxth	r3, r3
 801bebe:	3b01      	subs	r3, #1
 801bec0:	b29b      	uxth	r3, r3
 801bec2:	b21b      	sxth	r3, r3
 801bec4:	83bb      	strh	r3, [r7, #28]
    fill_area.y1 = row_start + pos->y;
 801bec6:	687b      	ldr	r3, [r7, #4]
 801bec8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801becc:	b29a      	uxth	r2, r3
 801bece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bed0:	b29b      	uxth	r3, r3
 801bed2:	4413      	add	r3, r2
 801bed4:	b29b      	uxth	r3, r3
 801bed6:	b21b      	sxth	r3, r3
 801bed8:	837b      	strh	r3, [r7, #26]
    fill_area.y2 = fill_area.y1;
 801beda:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801bede:	83fb      	strh	r3, [r7, #30]
#if LV_DRAW_COMPLEX
    lv_coord_t fill_w = lv_area_get_width(&fill_area);
 801bee0:	f107 0318 	add.w	r3, r7, #24
 801bee4:	4618      	mov	r0, r3
 801bee6:	f7ff fd6a 	bl	801b9be <lv_area_get_width>
 801beea:	4603      	mov	r3, r0
 801beec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    lv_area_t mask_area;
    lv_area_copy(&mask_area, &fill_area);
 801bef0:	f107 0218 	add.w	r2, r7, #24
 801bef4:	f107 0310 	add.w	r3, r7, #16
 801bef8:	4611      	mov	r1, r2
 801befa:	4618      	mov	r0, r3
 801befc:	f7ff fd40 	bl	801b980 <lv_area_copy>
    mask_area.y2 = mask_area.y1 + row_end;
 801bf00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801bf04:	b29a      	uxth	r2, r3
 801bf06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bf08:	b29b      	uxth	r3, r3
 801bf0a:	4413      	add	r3, r2
 801bf0c:	b29b      	uxth	r3, r3
 801bf0e:	b21b      	sxth	r3, r3
 801bf10:	82fb      	strh	r3, [r7, #22]
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 801bf12:	f107 0310 	add.w	r3, r7, #16
 801bf16:	4618      	mov	r0, r3
 801bf18:	f7f7 fe86 	bl	8013c28 <lv_draw_mask_is_any>
 801bf1c:	4603      	mov	r3, r0
 801bf1e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
#endif
    blend_dsc.blend_area = &fill_area;
 801bf22:	f107 0318 	add.w	r3, r7, #24
 801bf26:	623b      	str	r3, [r7, #32]
    blend_dsc.mask_area = &fill_area;
 801bf28:	f107 0318 	add.w	r3, r7, #24
 801bf2c:	637b      	str	r3, [r7, #52]	; 0x34

    uint32_t col_bit_max = 8 - bpp;
 801bf2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bf32:	f1c3 0308 	rsb	r3, r3, #8
 801bf36:	64bb      	str	r3, [r7, #72]	; 0x48
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 801bf38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801bf3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bf3c:	441a      	add	r2, r3
 801bf3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bf40:	1ad3      	subs	r3, r2, r3
 801bf42:	461a      	mov	r2, r3
 801bf44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bf48:	fb02 f303 	mul.w	r3, r2, r3
 801bf4c:	647b      	str	r3, [r7, #68]	; 0x44

    for(row = row_start ; row < row_end; row++) {
 801bf4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bf50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801bf54:	e0c3      	b.n	801c0de <draw_letter_normal+0x506>
#if LV_DRAW_COMPLEX
        int32_t mask_p_start = mask_p;
 801bf56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bf5a:	643b      	str	r3, [r7, #64]	; 0x40
#endif
        bitmask = bitmask_init >> col_bit;
 801bf5c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801bf60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801bf64:	fa22 f303 	lsr.w	r3, r2, r3
 801bf68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        for(col = col_start; col < col_end; col++) {
 801bf6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bf6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801bf72:	e04f      	b.n	801c014 <draw_letter_normal+0x43c>
            /*Load the pixel's opacity into the mask*/
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 801bf74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801bf78:	781b      	ldrb	r3, [r3, #0]
 801bf7a:	461a      	mov	r2, r3
 801bf7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bf80:	401a      	ands	r2, r3
 801bf82:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801bf84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801bf88:	1acb      	subs	r3, r1, r3
 801bf8a:	fa22 f303 	lsr.w	r3, r2, r3
 801bf8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            if(letter_px) {
 801bf92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d00b      	beq.n	801bfb2 <draw_letter_normal+0x3da>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 801bf9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801bf9e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801bfa2:	441a      	add	r2, r3
 801bfa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bfa8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801bfaa:	440b      	add	r3, r1
 801bfac:	7812      	ldrb	r2, [r2, #0]
 801bfae:	701a      	strb	r2, [r3, #0]
 801bfb0:	e005      	b.n	801bfbe <draw_letter_normal+0x3e6>
            }
            else {
                mask_buf[mask_p] = 0;
 801bfb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bfb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801bfb8:	4413      	add	r3, r2
 801bfba:	2200      	movs	r2, #0
 801bfbc:	701a      	strb	r2, [r3, #0]
            }

            /*Go to the next column*/
            if(col_bit < col_bit_max) {
 801bfbe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801bfc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bfc4:	429a      	cmp	r2, r3
 801bfc6:	d20f      	bcs.n	801bfe8 <draw_letter_normal+0x410>
                col_bit += bpp;
 801bfc8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801bfcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bfd0:	4413      	add	r3, r2
 801bfd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                bitmask = bitmask >> bpp;
 801bfd6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801bfda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bfde:	fa22 f303 	lsr.w	r3, r2, r3
 801bfe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801bfe6:	e00b      	b.n	801c000 <draw_letter_normal+0x428>
            }
            else {
                col_bit = 0;
 801bfe8:	2300      	movs	r3, #0
 801bfea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                bitmask = bitmask_init;
 801bfee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                map_p++;
 801bff6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801bffa:	3301      	adds	r3, #1
 801bffc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            }

            /*Next mask byte*/
            mask_p++;
 801c000:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c004:	3301      	adds	r3, #1
 801c006:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        for(col = col_start; col < col_end; col++) {
 801c00a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801c00e:	3301      	adds	r3, #1
 801c010:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801c014:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801c018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c01a:	429a      	cmp	r2, r3
 801c01c:	dbaa      	blt.n	801bf74 <draw_letter_normal+0x39c>
        }

#if LV_DRAW_COMPLEX
        /*Apply masks if any*/
        if(mask_any) {
 801c01e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 801c022:	2b00      	cmp	r3, #0
 801c024:	d01a      	beq.n	801c05c <draw_letter_normal+0x484>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 801c026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c028:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c02a:	18d0      	adds	r0, r2, r3
 801c02c:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 801c030:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801c034:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801c038:	f7f7 fcf8 	bl	8013a2c <lv_draw_mask_apply>
 801c03c:	4603      	mov	r3, r0
 801c03e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
                                                    fill_w);
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801c042:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801c046:	2b00      	cmp	r3, #0
 801c048:	d108      	bne.n	801c05c <draw_letter_normal+0x484>
                lv_memset_00(mask_buf + mask_p_start, fill_w);
 801c04a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c04c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c04e:	4413      	add	r3, r2
 801c050:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 801c054:	4611      	mov	r1, r2
 801c056:	4618      	mov	r0, r3
 801c058:	f008 fb80 	bl	802475c <lv_memset_00>
            }
        }
#endif

        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 801c05c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c05e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c060:	1ad3      	subs	r3, r2, r3
 801c062:	461a      	mov	r2, r3
 801c064:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c068:	4413      	add	r3, r2
 801c06a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c06c:	429a      	cmp	r2, r3
 801c06e:	d907      	bls.n	801c080 <draw_letter_normal+0x4a8>
            fill_area.y2 ++;
 801c070:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c074:	b29b      	uxth	r3, r3
 801c076:	3301      	adds	r3, #1
 801c078:	b29b      	uxth	r3, r3
 801c07a:	b21b      	sxth	r3, r3
 801c07c:	83fb      	strh	r3, [r7, #30]
 801c07e:	e015      	b.n	801c0ac <draw_letter_normal+0x4d4>
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801c080:	2302      	movs	r3, #2
 801c082:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c086:	f107 0320 	add.w	r3, r7, #32
 801c08a:	4619      	mov	r1, r3
 801c08c:	68f8      	ldr	r0, [r7, #12]
 801c08e:	f7fd f89b 	bl	80191c8 <lv_draw_sw_blend>

            fill_area.y1 = fill_area.y2 + 1;
 801c092:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c096:	b29b      	uxth	r3, r3
 801c098:	3301      	adds	r3, #1
 801c09a:	b29b      	uxth	r3, r3
 801c09c:	b21b      	sxth	r3, r3
 801c09e:	837b      	strh	r3, [r7, #26]
            fill_area.y2 = fill_area.y1;
 801c0a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801c0a4:	83fb      	strh	r3, [r7, #30]
            mask_p = 0;
 801c0a6:	2300      	movs	r3, #0
 801c0a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        }

        col_bit += col_bit_row_ofs;
 801c0ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801c0b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c0b2:	4413      	add	r3, r2
 801c0b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        map_p += (col_bit >> 3);
 801c0b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c0bc:	08db      	lsrs	r3, r3, #3
 801c0be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801c0c2:	4413      	add	r3, r2
 801c0c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        col_bit = col_bit & 0x7;
 801c0c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c0cc:	f003 0307 	and.w	r3, r3, #7
 801c0d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    for(row = row_start ; row < row_end; row++) {
 801c0d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801c0d8:	3301      	adds	r3, #1
 801c0da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801c0de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801c0e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c0e4:	429a      	cmp	r2, r3
 801c0e6:	f6ff af36 	blt.w	801bf56 <draw_letter_normal+0x37e>
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 801c0ea:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 801c0ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c0f2:	429a      	cmp	r2, r3
 801c0f4:	d012      	beq.n	801c11c <draw_letter_normal+0x544>
        fill_area.y2--;
 801c0f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c0fa:	b29b      	uxth	r3, r3
 801c0fc:	3b01      	subs	r3, #1
 801c0fe:	b29b      	uxth	r3, r3
 801c100:	b21b      	sxth	r3, r3
 801c102:	83fb      	strh	r3, [r7, #30]
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801c104:	2302      	movs	r3, #2
 801c106:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c10a:	f107 0320 	add.w	r3, r7, #32
 801c10e:	4619      	mov	r1, r3
 801c110:	68f8      	ldr	r0, [r7, #12]
 801c112:	f7fd f859 	bl	80191c8 <lv_draw_sw_blend>
        mask_p = 0;
 801c116:	2300      	movs	r3, #0
 801c118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    }

    lv_mem_buf_release(mask_buf);
 801c11c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801c11e:	f008 f81f 	bl	8024160 <lv_mem_buf_release>
 801c122:	e000      	b.n	801c126 <draw_letter_normal+0x54e>
            return; /*Invalid bpp. Can't render the letter*/
 801c124:	bf00      	nop
}
 801c126:	37a8      	adds	r7, #168	; 0xa8
 801c128:	46bd      	mov	sp, r7
 801c12a:	bd80      	pop	{r7, pc}

0801c12c <lv_area_get_width>:
{
 801c12c:	b480      	push	{r7}
 801c12e:	b083      	sub	sp, #12
 801c130:	af00      	add	r7, sp, #0
 801c132:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c13a:	b29a      	uxth	r2, r3
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c142:	b29b      	uxth	r3, r3
 801c144:	1ad3      	subs	r3, r2, r3
 801c146:	b29b      	uxth	r3, r3
 801c148:	3301      	adds	r3, #1
 801c14a:	b29b      	uxth	r3, r3
 801c14c:	b21b      	sxth	r3, r3
}
 801c14e:	4618      	mov	r0, r3
 801c150:	370c      	adds	r7, #12
 801c152:	46bd      	mov	sp, r7
 801c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c158:	4770      	bx	lr

0801c15a <lv_draw_sw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                           const lv_point_t * point1, const lv_point_t * point2)
{
 801c15a:	b580      	push	{r7, lr}
 801c15c:	b098      	sub	sp, #96	; 0x60
 801c15e:	af00      	add	r7, sp, #0
 801c160:	60f8      	str	r0, [r7, #12]
 801c162:	60b9      	str	r1, [r7, #8]
 801c164:	607a      	str	r2, [r7, #4]
 801c166:	603b      	str	r3, [r7, #0]
    if(dsc->width == 0) return;
 801c168:	68bb      	ldr	r3, [r7, #8]
 801c16a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c16e:	2b00      	cmp	r3, #0
 801c170:	f000 8172 	beq.w	801c458 <lv_draw_sw_line+0x2fe>
    if(dsc->opa <= LV_OPA_MIN) return;
 801c174:	68bb      	ldr	r3, [r7, #8]
 801c176:	7a1b      	ldrb	r3, [r3, #8]
 801c178:	2b02      	cmp	r3, #2
 801c17a:	f240 816f 	bls.w	801c45c <lv_draw_sw_line+0x302>

    if(point1->x == point2->x && point1->y == point2->y) return;
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c184:	683b      	ldr	r3, [r7, #0]
 801c186:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c18a:	429a      	cmp	r2, r3
 801c18c:	d108      	bne.n	801c1a0 <lv_draw_sw_line+0x46>
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c194:	683b      	ldr	r3, [r7, #0]
 801c196:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c19a:	429a      	cmp	r2, r3
 801c19c:	f000 8160 	beq.w	801c460 <lv_draw_sw_line+0x306>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 801c1a0:	683b      	ldr	r3, [r7, #0]
 801c1a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c1ac:	4293      	cmp	r3, r2
 801c1ae:	bfa8      	it	ge
 801c1b0:	4613      	movge	r3, r2
 801c1b2:	b21b      	sxth	r3, r3
 801c1b4:	b29a      	uxth	r2, r3
 801c1b6:	68bb      	ldr	r3, [r7, #8]
 801c1b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	da00      	bge.n	801c1c2 <lv_draw_sw_line+0x68>
 801c1c0:	3301      	adds	r3, #1
 801c1c2:	105b      	asrs	r3, r3, #1
 801c1c4:	b21b      	sxth	r3, r3
 801c1c6:	b29b      	uxth	r3, r3
 801c1c8:	1ad3      	subs	r3, r2, r3
 801c1ca:	b29b      	uxth	r3, r3
 801c1cc:	b21b      	sxth	r3, r3
 801c1ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 801c1d2:	683b      	ldr	r3, [r7, #0]
 801c1d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c1de:	4293      	cmp	r3, r2
 801c1e0:	bfb8      	it	lt
 801c1e2:	4613      	movlt	r3, r2
 801c1e4:	b21b      	sxth	r3, r3
 801c1e6:	b29a      	uxth	r2, r3
 801c1e8:	68bb      	ldr	r3, [r7, #8]
 801c1ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	da00      	bge.n	801c1f4 <lv_draw_sw_line+0x9a>
 801c1f2:	3301      	adds	r3, #1
 801c1f4:	105b      	asrs	r3, r3, #1
 801c1f6:	b21b      	sxth	r3, r3
 801c1f8:	b29b      	uxth	r3, r3
 801c1fa:	4413      	add	r3, r2
 801c1fc:	b29b      	uxth	r3, r3
 801c1fe:	b21b      	sxth	r3, r3
 801c200:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 801c204:	683b      	ldr	r3, [r7, #0]
 801c206:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c20a:	687b      	ldr	r3, [r7, #4]
 801c20c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c210:	4293      	cmp	r3, r2
 801c212:	bfa8      	it	ge
 801c214:	4613      	movge	r3, r2
 801c216:	b21b      	sxth	r3, r3
 801c218:	b29a      	uxth	r2, r3
 801c21a:	68bb      	ldr	r3, [r7, #8]
 801c21c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c220:	2b00      	cmp	r3, #0
 801c222:	da00      	bge.n	801c226 <lv_draw_sw_line+0xcc>
 801c224:	3301      	adds	r3, #1
 801c226:	105b      	asrs	r3, r3, #1
 801c228:	b21b      	sxth	r3, r3
 801c22a:	b29b      	uxth	r3, r3
 801c22c:	1ad3      	subs	r3, r2, r3
 801c22e:	b29b      	uxth	r3, r3
 801c230:	b21b      	sxth	r3, r3
 801c232:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 801c236:	683b      	ldr	r3, [r7, #0]
 801c238:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c242:	4293      	cmp	r3, r2
 801c244:	bfb8      	it	lt
 801c246:	4613      	movlt	r3, r2
 801c248:	b21b      	sxth	r3, r3
 801c24a:	b29a      	uxth	r2, r3
 801c24c:	68bb      	ldr	r3, [r7, #8]
 801c24e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c252:	2b00      	cmp	r3, #0
 801c254:	da00      	bge.n	801c258 <lv_draw_sw_line+0xfe>
 801c256:	3301      	adds	r3, #1
 801c258:	105b      	asrs	r3, r3, #1
 801c25a:	b21b      	sxth	r3, r3
 801c25c:	b29b      	uxth	r3, r3
 801c25e:	4413      	add	r3, r2
 801c260:	b29b      	uxth	r3, r3
 801c262:	b21b      	sxth	r3, r3
 801c264:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 801c268:	68fb      	ldr	r3, [r7, #12]
 801c26a:	689a      	ldr	r2, [r3, #8]
 801c26c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801c270:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c274:	4618      	mov	r0, r3
 801c276:	f006 fb1d 	bl	80228b4 <_lv_area_intersect>
 801c27a:	4603      	mov	r3, r0
 801c27c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(!is_common) return;
 801c280:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c284:	f083 0301 	eor.w	r3, r3, #1
 801c288:	b2db      	uxtb	r3, r3
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	f040 80ea 	bne.w	801c464 <lv_draw_sw_line+0x30a>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801c290:	68fb      	ldr	r3, [r7, #12]
 801c292:	689b      	ldr	r3, [r3, #8]
 801c294:	65bb      	str	r3, [r7, #88]	; 0x58
    draw_ctx->clip_area = &clip_line;
 801c296:	68fb      	ldr	r3, [r7, #12]
 801c298:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801c29c:	609a      	str	r2, [r3, #8]

    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c2a4:	683b      	ldr	r3, [r7, #0]
 801c2a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c2aa:	429a      	cmp	r2, r3
 801c2ac:	d106      	bne.n	801c2bc <lv_draw_sw_line+0x162>
 801c2ae:	683b      	ldr	r3, [r7, #0]
 801c2b0:	687a      	ldr	r2, [r7, #4]
 801c2b2:	68b9      	ldr	r1, [r7, #8]
 801c2b4:	68f8      	ldr	r0, [r7, #12]
 801c2b6:	f000 f8d9 	bl	801c46c <draw_line_hor>
 801c2ba:	e014      	b.n	801c2e6 <lv_draw_sw_line+0x18c>
    else if(point1->x == point2->x) draw_line_ver(draw_ctx, dsc, point1, point2);
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c2c2:	683b      	ldr	r3, [r7, #0]
 801c2c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c2c8:	429a      	cmp	r2, r3
 801c2ca:	d106      	bne.n	801c2da <lv_draw_sw_line+0x180>
 801c2cc:	683b      	ldr	r3, [r7, #0]
 801c2ce:	687a      	ldr	r2, [r7, #4]
 801c2d0:	68b9      	ldr	r1, [r7, #8]
 801c2d2:	68f8      	ldr	r0, [r7, #12]
 801c2d4:	f000 fa2b 	bl	801c72e <draw_line_ver>
 801c2d8:	e005      	b.n	801c2e6 <lv_draw_sw_line+0x18c>
    else draw_line_skew(draw_ctx, dsc, point1, point2);
 801c2da:	683b      	ldr	r3, [r7, #0]
 801c2dc:	687a      	ldr	r2, [r7, #4]
 801c2de:	68b9      	ldr	r1, [r7, #8]
 801c2e0:	68f8      	ldr	r0, [r7, #12]
 801c2e2:	f000 fb55 	bl	801c990 <draw_line_skew>

    if(dsc->round_end || dsc->round_start) {
 801c2e6:	68bb      	ldr	r3, [r7, #8]
 801c2e8:	7a5b      	ldrb	r3, [r3, #9]
 801c2ea:	f003 0308 	and.w	r3, r3, #8
 801c2ee:	b2db      	uxtb	r3, r3
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	d107      	bne.n	801c304 <lv_draw_sw_line+0x1aa>
 801c2f4:	68bb      	ldr	r3, [r7, #8]
 801c2f6:	7a5b      	ldrb	r3, [r3, #9]
 801c2f8:	f003 0304 	and.w	r3, r3, #4
 801c2fc:	b2db      	uxtb	r3, r3
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	f000 80a6 	beq.w	801c450 <lv_draw_sw_line+0x2f6>
        lv_draw_rect_dsc_t cir_dsc;
        lv_draw_rect_dsc_init(&cir_dsc);
 801c304:	f107 0310 	add.w	r3, r7, #16
 801c308:	4618      	mov	r0, r3
 801c30a:	f7f9 ff25 	bl	8016158 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 801c30e:	68bb      	ldr	r3, [r7, #8]
 801c310:	781b      	ldrb	r3, [r3, #0]
 801c312:	753b      	strb	r3, [r7, #20]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 801c314:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c318:	823b      	strh	r3, [r7, #16]
        cir_dsc.bg_opa = dsc->opa;
 801c31a:	68bb      	ldr	r3, [r7, #8]
 801c31c:	7a1b      	ldrb	r3, [r3, #8]
 801c31e:	74fb      	strb	r3, [r7, #19]

        int32_t r = (dsc->width >> 1);
 801c320:	68bb      	ldr	r3, [r7, #8]
 801c322:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c326:	105b      	asrs	r3, r3, #1
 801c328:	b21b      	sxth	r3, r3
 801c32a:	657b      	str	r3, [r7, #84]	; 0x54
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 801c32c:	68bb      	ldr	r3, [r7, #8]
 801c32e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c332:	b29b      	uxth	r3, r3
 801c334:	f003 0301 	and.w	r3, r3, #1
 801c338:	2b00      	cmp	r3, #0
 801c33a:	bf0c      	ite	eq
 801c33c:	2301      	moveq	r3, #1
 801c33e:	2300      	movne	r3, #0
 801c340:	b2db      	uxtb	r3, r3
 801c342:	653b      	str	r3, [r7, #80]	; 0x50
        lv_area_t cir_area;

        if(dsc->round_start) {
 801c344:	68bb      	ldr	r3, [r7, #8]
 801c346:	7a5b      	ldrb	r3, [r3, #9]
 801c348:	f003 0304 	and.w	r3, r3, #4
 801c34c:	b2db      	uxtb	r3, r3
 801c34e:	2b00      	cmp	r3, #0
 801c350:	d03b      	beq.n	801c3ca <lv_draw_sw_line+0x270>
            cir_area.x1 = point1->x - r;
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c358:	b29a      	uxth	r2, r3
 801c35a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c35c:	b29b      	uxth	r3, r3
 801c35e:	1ad3      	subs	r3, r2, r3
 801c360:	b29b      	uxth	r3, r3
 801c362:	b21b      	sxth	r3, r3
 801c364:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            cir_area.y1 = point1->y - r;
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c36e:	b29a      	uxth	r2, r3
 801c370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c372:	b29b      	uxth	r3, r3
 801c374:	1ad3      	subs	r3, r2, r3
 801c376:	b29b      	uxth	r3, r3
 801c378:	b21b      	sxth	r3, r3
 801c37a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            cir_area.x2 = point1->x + r - r_corr;
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c384:	b29a      	uxth	r2, r3
 801c386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c388:	b29b      	uxth	r3, r3
 801c38a:	4413      	add	r3, r2
 801c38c:	b29a      	uxth	r2, r3
 801c38e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c390:	b29b      	uxth	r3, r3
 801c392:	1ad3      	subs	r3, r2, r3
 801c394:	b29b      	uxth	r3, r3
 801c396:	b21b      	sxth	r3, r3
 801c398:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cir_area.y2 = point1->y + r - r_corr ;
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c3a2:	b29a      	uxth	r2, r3
 801c3a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c3a6:	b29b      	uxth	r3, r3
 801c3a8:	4413      	add	r3, r2
 801c3aa:	b29a      	uxth	r2, r3
 801c3ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c3ae:	b29b      	uxth	r3, r3
 801c3b0:	1ad3      	subs	r3, r2, r3
 801c3b2:	b29b      	uxth	r3, r3
 801c3b4:	b21b      	sxth	r3, r3
 801c3b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 801c3ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801c3be:	f107 0310 	add.w	r3, r7, #16
 801c3c2:	4619      	mov	r1, r3
 801c3c4:	68f8      	ldr	r0, [r7, #12]
 801c3c6:	f7f9 ff0b 	bl	80161e0 <lv_draw_rect>
        }

        if(dsc->round_end) {
 801c3ca:	68bb      	ldr	r3, [r7, #8]
 801c3cc:	7a5b      	ldrb	r3, [r3, #9]
 801c3ce:	f003 0308 	and.w	r3, r3, #8
 801c3d2:	b2db      	uxtb	r3, r3
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	d03b      	beq.n	801c450 <lv_draw_sw_line+0x2f6>
            cir_area.x1 = point2->x - r;
 801c3d8:	683b      	ldr	r3, [r7, #0]
 801c3da:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c3de:	b29a      	uxth	r2, r3
 801c3e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c3e2:	b29b      	uxth	r3, r3
 801c3e4:	1ad3      	subs	r3, r2, r3
 801c3e6:	b29b      	uxth	r3, r3
 801c3e8:	b21b      	sxth	r3, r3
 801c3ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            cir_area.y1 = point2->y - r;
 801c3ee:	683b      	ldr	r3, [r7, #0]
 801c3f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c3f4:	b29a      	uxth	r2, r3
 801c3f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c3f8:	b29b      	uxth	r3, r3
 801c3fa:	1ad3      	subs	r3, r2, r3
 801c3fc:	b29b      	uxth	r3, r3
 801c3fe:	b21b      	sxth	r3, r3
 801c400:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            cir_area.x2 = point2->x + r - r_corr;
 801c404:	683b      	ldr	r3, [r7, #0]
 801c406:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c40a:	b29a      	uxth	r2, r3
 801c40c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c40e:	b29b      	uxth	r3, r3
 801c410:	4413      	add	r3, r2
 801c412:	b29a      	uxth	r2, r3
 801c414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c416:	b29b      	uxth	r3, r3
 801c418:	1ad3      	subs	r3, r2, r3
 801c41a:	b29b      	uxth	r3, r3
 801c41c:	b21b      	sxth	r3, r3
 801c41e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cir_area.y2 = point2->y + r - r_corr ;
 801c422:	683b      	ldr	r3, [r7, #0]
 801c424:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c428:	b29a      	uxth	r2, r3
 801c42a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c42c:	b29b      	uxth	r3, r3
 801c42e:	4413      	add	r3, r2
 801c430:	b29a      	uxth	r2, r3
 801c432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c434:	b29b      	uxth	r3, r3
 801c436:	1ad3      	subs	r3, r2, r3
 801c438:	b29b      	uxth	r3, r3
 801c43a:	b21b      	sxth	r3, r3
 801c43c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 801c440:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801c444:	f107 0310 	add.w	r3, r7, #16
 801c448:	4619      	mov	r1, r3
 801c44a:	68f8      	ldr	r0, [r7, #12]
 801c44c:	f7f9 fec8 	bl	80161e0 <lv_draw_rect>
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 801c450:	68fb      	ldr	r3, [r7, #12]
 801c452:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c454:	609a      	str	r2, [r3, #8]
 801c456:	e006      	b.n	801c466 <lv_draw_sw_line+0x30c>
    if(dsc->width == 0) return;
 801c458:	bf00      	nop
 801c45a:	e004      	b.n	801c466 <lv_draw_sw_line+0x30c>
    if(dsc->opa <= LV_OPA_MIN) return;
 801c45c:	bf00      	nop
 801c45e:	e002      	b.n	801c466 <lv_draw_sw_line+0x30c>
    if(point1->x == point2->x && point1->y == point2->y) return;
 801c460:	bf00      	nop
 801c462:	e000      	b.n	801c466 <lv_draw_sw_line+0x30c>
    if(!is_common) return;
 801c464:	bf00      	nop
}
 801c466:	3760      	adds	r7, #96	; 0x60
 801c468:	46bd      	mov	sp, r7
 801c46a:	bd80      	pop	{r7, pc}

0801c46c <draw_line_hor>:
 **********************/


LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
 801c46c:	b580      	push	{r7, lr}
 801c46e:	b098      	sub	sp, #96	; 0x60
 801c470:	af00      	add	r7, sp, #0
 801c472:	60f8      	str	r0, [r7, #12]
 801c474:	60b9      	str	r1, [r7, #8]
 801c476:	607a      	str	r2, [r7, #4]
 801c478:	603b      	str	r3, [r7, #0]
    int32_t w = dsc->width - 1;
 801c47a:	68bb      	ldr	r3, [r7, #8]
 801c47c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c480:	3b01      	subs	r3, #1
 801c482:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t w_half0 = w >> 1;
 801c484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c486:	105b      	asrs	r3, r3, #1
 801c488:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 801c48a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c48c:	f003 0301 	and.w	r3, r3, #1
 801c490:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c492:	4413      	add	r3, r2
 801c494:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 801c496:	683b      	ldr	r3, [r7, #0]
 801c498:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c4a2:	4293      	cmp	r3, r2
 801c4a4:	bfa8      	it	ge
 801c4a6:	4613      	movge	r3, r2
 801c4a8:	b21b      	sxth	r3, r3
 801c4aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 801c4ac:	683b      	ldr	r3, [r7, #0]
 801c4ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c4b8:	4293      	cmp	r3, r2
 801c4ba:	bfb8      	it	lt
 801c4bc:	4613      	movlt	r3, r2
 801c4be:	b21b      	sxth	r3, r3
 801c4c0:	b29b      	uxth	r3, r3
 801c4c2:	3b01      	subs	r3, #1
 801c4c4:	b29b      	uxth	r3, r3
 801c4c6:	b21b      	sxth	r3, r3
 801c4c8:	863b      	strh	r3, [r7, #48]	; 0x30
    blend_area.y1 = point1->y - w_half1;
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c4d0:	b29a      	uxth	r2, r3
 801c4d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c4d4:	b29b      	uxth	r3, r3
 801c4d6:	1ad3      	subs	r3, r2, r3
 801c4d8:	b29b      	uxth	r3, r3
 801c4da:	b21b      	sxth	r3, r3
 801c4dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    blend_area.y2 = point1->y + w_half0;
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c4e4:	b29a      	uxth	r2, r3
 801c4e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c4e8:	b29b      	uxth	r3, r3
 801c4ea:	4413      	add	r3, r2
 801c4ec:	b29b      	uxth	r3, r3
 801c4ee:	b21b      	sxth	r3, r3
 801c4f0:	867b      	strh	r3, [r7, #50]	; 0x32

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 801c4f2:	68fb      	ldr	r3, [r7, #12]
 801c4f4:	689a      	ldr	r2, [r3, #8]
 801c4f6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801c4fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c4fe:	4618      	mov	r0, r3
 801c500:	f006 f9d8 	bl	80228b4 <_lv_area_intersect>
 801c504:	4603      	mov	r3, r0
 801c506:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(!is_common) return;
 801c50a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801c50e:	f083 0301 	eor.w	r3, r3, #1
 801c512:	b2db      	uxtb	r3, r3
 801c514:	2b00      	cmp	r3, #0
 801c516:	f040 8106 	bne.w	801c726 <draw_line_hor+0x2ba>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 801c51a:	68bb      	ldr	r3, [r7, #8]
 801c51c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c520:	2b00      	cmp	r3, #0
 801c522:	d006      	beq.n	801c532 <draw_line_hor+0xc6>
 801c524:	68bb      	ldr	r3, [r7, #8]
 801c526:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d001      	beq.n	801c532 <draw_line_hor+0xc6>
 801c52e:	2301      	movs	r3, #1
 801c530:	e000      	b.n	801c534 <draw_line_hor+0xc8>
 801c532:	2300      	movs	r3, #0
 801c534:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 801c538:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801c53c:	f003 0301 	and.w	r3, r3, #1
 801c540:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool simple_mode = true;
 801c544:	2301      	movs	r3, #1
 801c546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 801c54a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c54e:	4618      	mov	r0, r3
 801c550:	f7f7 fb6a 	bl	8013c28 <lv_draw_mask_is_any>
 801c554:	4603      	mov	r3, r0
 801c556:	2b00      	cmp	r3, #0
 801c558:	d003      	beq.n	801c562 <draw_line_hor+0xf6>
 801c55a:	2300      	movs	r3, #0
 801c55c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801c560:	e006      	b.n	801c570 <draw_line_hor+0x104>
    else if(dashed) simple_mode = false;
 801c562:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801c566:	2b00      	cmp	r3, #0
 801c568:	d002      	beq.n	801c570 <draw_line_hor+0x104>
 801c56a:	2300      	movs	r3, #0
 801c56c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801c570:	f107 0310 	add.w	r3, r7, #16
 801c574:	211c      	movs	r1, #28
 801c576:	4618      	mov	r0, r3
 801c578:	f008 f8f0 	bl	802475c <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801c57c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c580:	613b      	str	r3, [r7, #16]
    blend_dsc.color = dsc->color;
 801c582:	68bb      	ldr	r3, [r7, #8]
 801c584:	781b      	ldrb	r3, [r3, #0]
 801c586:	763b      	strb	r3, [r7, #24]
    blend_dsc.opa = dsc->opa;
 801c588:	68bb      	ldr	r3, [r7, #8]
 801c58a:	7a1b      	ldrb	r3, [r3, #8]
 801c58c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 801c590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c594:	2b00      	cmp	r3, #0
 801c596:	d006      	beq.n	801c5a6 <draw_line_hor+0x13a>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c598:	f107 0310 	add.w	r3, r7, #16
 801c59c:	4619      	mov	r1, r3
 801c59e:	68f8      	ldr	r0, [r7, #12]
 801c5a0:	f7fc fe12 	bl	80191c8 <lv_draw_sw_blend>
 801c5a4:	e0c0      	b.n	801c728 <draw_line_hor+0x2bc>
    }
#if LV_DRAW_COMPLEX
    /*If there other mask apply it*/
    else {

        int32_t blend_area_w = lv_area_get_width(&blend_area);
 801c5a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c5aa:	4618      	mov	r0, r3
 801c5ac:	f7ff fdbe 	bl	801c12c <lv_area_get_width>
 801c5b0:	4603      	mov	r3, r0
 801c5b2:	643b      	str	r3, [r7, #64]	; 0x40

        lv_coord_t y2 = blend_area.y2;
 801c5b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801c5b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        blend_area.y2 = blend_area.y1;
 801c5b8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801c5bc:	867b      	strh	r3, [r7, #50]	; 0x32

        lv_coord_t dash_start = 0;
 801c5be:	2300      	movs	r3, #0
 801c5c0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        if(dashed) {
 801c5c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801c5c8:	2b00      	cmp	r3, #0
 801c5ca:	d011      	beq.n	801c5f0 <draw_line_hor+0x184>
            dash_start = (blend_area.x1) % (dsc->dash_gap + dsc->dash_width);
 801c5cc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801c5d0:	461a      	mov	r2, r3
 801c5d2:	68bb      	ldr	r3, [r7, #8]
 801c5d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c5d8:	4619      	mov	r1, r3
 801c5da:	68bb      	ldr	r3, [r7, #8]
 801c5dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c5e0:	440b      	add	r3, r1
 801c5e2:	fb92 f1f3 	sdiv	r1, r2, r3
 801c5e6:	fb01 f303 	mul.w	r3, r1, r3
 801c5ea:	1ad3      	subs	r3, r2, r3
 801c5ec:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }

        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 801c5f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c5f2:	4618      	mov	r0, r3
 801c5f4:	f007 fd08 	bl	8024008 <lv_mem_buf_get>
 801c5f8:	63b8      	str	r0, [r7, #56]	; 0x38
        blend_dsc.mask_buf = mask_buf;
 801c5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5fc:	61fb      	str	r3, [r7, #28]
        blend_dsc.mask_area = &blend_area;
 801c5fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c602:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t h;
        for(h = blend_area.y1; h <= y2; h++) {
 801c604:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801c608:	65bb      	str	r3, [r7, #88]	; 0x58
 801c60a:	e082      	b.n	801c712 <draw_line_hor+0x2a6>
            lv_memset_ff(mask_buf, blend_area_w);
 801c60c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c60e:	4619      	mov	r1, r3
 801c610:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c612:	f008 f924 	bl	802485e <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_area_w);
 801c616:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801c61a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c61c:	b21a      	sxth	r2, r3
 801c61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c620:	b21b      	sxth	r3, r3
 801c622:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c624:	f7f7 fa02 	bl	8013a2c <lv_draw_mask_apply>
 801c628:	4603      	mov	r3, r0
 801c62a:	f887 3020 	strb.w	r3, [r7, #32]

            if(dashed) {
 801c62e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801c632:	2b00      	cmp	r3, #0
 801c634:	d056      	beq.n	801c6e4 <draw_line_hor+0x278>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 801c636:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d052      	beq.n	801c6e4 <draw_line_hor+0x278>
                    lv_coord_t dash_cnt = dash_start;
 801c63e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801c642:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
                    lv_coord_t i;
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 801c646:	2300      	movs	r3, #0
 801c648:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801c64c:	e042      	b.n	801c6d4 <draw_line_hor+0x268>
                        if(dash_cnt <= dsc->dash_width) {
 801c64e:	68bb      	ldr	r3, [r7, #8]
 801c650:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c654:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 801c658:	429a      	cmp	r2, r3
 801c65a:	dc17      	bgt.n	801c68c <draw_line_hor+0x220>
                            int16_t diff = dsc->dash_width - dash_cnt;
 801c65c:	68bb      	ldr	r3, [r7, #8]
 801c65e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c662:	b29a      	uxth	r2, r3
 801c664:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801c668:	1ad3      	subs	r3, r2, r3
 801c66a:	b29b      	uxth	r3, r3
 801c66c:	86fb      	strh	r3, [r7, #54]	; 0x36
                            i += diff;
 801c66e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801c672:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c674:	4413      	add	r3, r2
 801c676:	b29b      	uxth	r3, r3
 801c678:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
                            dash_cnt += diff;
 801c67c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 801c680:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c682:	4413      	add	r3, r2
 801c684:	b29b      	uxth	r3, r3
 801c686:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801c68a:	e015      	b.n	801c6b8 <draw_line_hor+0x24c>
                        }
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 801c68c:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 801c690:	68bb      	ldr	r3, [r7, #8]
 801c692:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c696:	4619      	mov	r1, r3
 801c698:	68bb      	ldr	r3, [r7, #8]
 801c69a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c69e:	440b      	add	r3, r1
 801c6a0:	429a      	cmp	r2, r3
 801c6a2:	db03      	blt.n	801c6ac <draw_line_hor+0x240>
                            dash_cnt = 0;
 801c6a4:	2300      	movs	r3, #0
 801c6a6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801c6aa:	e005      	b.n	801c6b8 <draw_line_hor+0x24c>
                        }
                        else {
                            mask_buf[i] = 0x00;
 801c6ac:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801c6b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c6b2:	4413      	add	r3, r2
 801c6b4:	2200      	movs	r2, #0
 801c6b6:	701a      	strb	r2, [r3, #0]
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 801c6b8:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801c6bc:	b29b      	uxth	r3, r3
 801c6be:	3301      	adds	r3, #1
 801c6c0:	b29b      	uxth	r3, r3
 801c6c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 801c6c6:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 801c6ca:	b29b      	uxth	r3, r3
 801c6cc:	3301      	adds	r3, #1
 801c6ce:	b29b      	uxth	r3, r3
 801c6d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801c6d4:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 801c6d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c6da:	429a      	cmp	r2, r3
 801c6dc:	dcb7      	bgt.n	801c64e <draw_line_hor+0x1e2>
                        }
                    }

                    blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801c6de:	2302      	movs	r3, #2
 801c6e0:	f887 3020 	strb.w	r3, [r7, #32]
                }
            }

            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c6e4:	f107 0310 	add.w	r3, r7, #16
 801c6e8:	4619      	mov	r1, r3
 801c6ea:	68f8      	ldr	r0, [r7, #12]
 801c6ec:	f7fc fd6c 	bl	80191c8 <lv_draw_sw_blend>

            blend_area.y1++;
 801c6f0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801c6f4:	b29b      	uxth	r3, r3
 801c6f6:	3301      	adds	r3, #1
 801c6f8:	b29b      	uxth	r3, r3
 801c6fa:	b21b      	sxth	r3, r3
 801c6fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
            blend_area.y2++;
 801c6fe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801c702:	b29b      	uxth	r3, r3
 801c704:	3301      	adds	r3, #1
 801c706:	b29b      	uxth	r3, r3
 801c708:	b21b      	sxth	r3, r3
 801c70a:	867b      	strh	r3, [r7, #50]	; 0x32
        for(h = blend_area.y1; h <= y2; h++) {
 801c70c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c70e:	3301      	adds	r3, #1
 801c710:	65bb      	str	r3, [r7, #88]	; 0x58
 801c712:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801c716:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c718:	429a      	cmp	r2, r3
 801c71a:	f77f af77 	ble.w	801c60c <draw_line_hor+0x1a0>
        }
        lv_mem_buf_release(mask_buf);
 801c71e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c720:	f007 fd1e 	bl	8024160 <lv_mem_buf_release>
 801c724:	e000      	b.n	801c728 <draw_line_hor+0x2bc>
    if(!is_common) return;
 801c726:	bf00      	nop
    }
#endif /*LV_DRAW_COMPLEX*/
}
 801c728:	3760      	adds	r7, #96	; 0x60
 801c72a:	46bd      	mov	sp, r7
 801c72c:	bd80      	pop	{r7, pc}

0801c72e <draw_line_ver>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
 801c72e:	b580      	push	{r7, lr}
 801c730:	b098      	sub	sp, #96	; 0x60
 801c732:	af00      	add	r7, sp, #0
 801c734:	60f8      	str	r0, [r7, #12]
 801c736:	60b9      	str	r1, [r7, #8]
 801c738:	607a      	str	r2, [r7, #4]
 801c73a:	603b      	str	r3, [r7, #0]
    int32_t w = dsc->width - 1;
 801c73c:	68bb      	ldr	r3, [r7, #8]
 801c73e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c742:	3b01      	subs	r3, #1
 801c744:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t w_half0 = w >> 1;
 801c746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c748:	105b      	asrs	r3, r3, #1
 801c74a:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 801c74c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c74e:	f003 0301 	and.w	r3, r3, #1
 801c752:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c754:	4413      	add	r3, r2
 801c756:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t blend_area;
    blend_area.x1 = point1->x - w_half1;
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c75e:	b29a      	uxth	r2, r3
 801c760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c762:	b29b      	uxth	r3, r3
 801c764:	1ad3      	subs	r3, r2, r3
 801c766:	b29b      	uxth	r3, r3
 801c768:	b21b      	sxth	r3, r3
 801c76a:	863b      	strh	r3, [r7, #48]	; 0x30
    blend_area.x2 = point1->x + w_half0;
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c772:	b29a      	uxth	r2, r3
 801c774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c776:	b29b      	uxth	r3, r3
 801c778:	4413      	add	r3, r2
 801c77a:	b29b      	uxth	r3, r3
 801c77c:	b21b      	sxth	r3, r3
 801c77e:	86bb      	strh	r3, [r7, #52]	; 0x34
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 801c780:	683b      	ldr	r3, [r7, #0]
 801c782:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c786:	687b      	ldr	r3, [r7, #4]
 801c788:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c78c:	4293      	cmp	r3, r2
 801c78e:	bfa8      	it	ge
 801c790:	4613      	movge	r3, r2
 801c792:	b21b      	sxth	r3, r3
 801c794:	867b      	strh	r3, [r7, #50]	; 0x32
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 801c796:	683b      	ldr	r3, [r7, #0]
 801c798:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c7a2:	4293      	cmp	r3, r2
 801c7a4:	bfb8      	it	lt
 801c7a6:	4613      	movlt	r3, r2
 801c7a8:	b21b      	sxth	r3, r3
 801c7aa:	b29b      	uxth	r3, r3
 801c7ac:	3b01      	subs	r3, #1
 801c7ae:	b29b      	uxth	r3, r3
 801c7b0:	b21b      	sxth	r3, r3
 801c7b2:	86fb      	strh	r3, [r7, #54]	; 0x36

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	689a      	ldr	r2, [r3, #8]
 801c7b8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801c7bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c7c0:	4618      	mov	r0, r3
 801c7c2:	f006 f877 	bl	80228b4 <_lv_area_intersect>
 801c7c6:	4603      	mov	r3, r0
 801c7c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if(!is_common) return;
 801c7cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801c7d0:	f083 0301 	eor.w	r3, r3, #1
 801c7d4:	b2db      	uxtb	r3, r3
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	f040 80d6 	bne.w	801c988 <draw_line_ver+0x25a>

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 801c7dc:	68bb      	ldr	r3, [r7, #8]
 801c7de:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d006      	beq.n	801c7f4 <draw_line_ver+0xc6>
 801c7e6:	68bb      	ldr	r3, [r7, #8]
 801c7e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d001      	beq.n	801c7f4 <draw_line_ver+0xc6>
 801c7f0:	2301      	movs	r3, #1
 801c7f2:	e000      	b.n	801c7f6 <draw_line_ver+0xc8>
 801c7f4:	2300      	movs	r3, #0
 801c7f6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 801c7fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801c7fe:	f003 0301 	and.w	r3, r3, #1
 801c802:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool simple_mode = true;
 801c806:	2301      	movs	r3, #1
 801c808:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 801c80c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c810:	4618      	mov	r0, r3
 801c812:	f7f7 fa09 	bl	8013c28 <lv_draw_mask_is_any>
 801c816:	4603      	mov	r3, r0
 801c818:	2b00      	cmp	r3, #0
 801c81a:	d003      	beq.n	801c824 <draw_line_ver+0xf6>
 801c81c:	2300      	movs	r3, #0
 801c81e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801c822:	e006      	b.n	801c832 <draw_line_ver+0x104>
    else if(dashed) simple_mode = false;
 801c824:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d002      	beq.n	801c832 <draw_line_ver+0x104>
 801c82c:	2300      	movs	r3, #0
 801c82e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801c832:	f107 0314 	add.w	r3, r7, #20
 801c836:	211c      	movs	r1, #28
 801c838:	4618      	mov	r0, r3
 801c83a:	f007 ff8f 	bl	802475c <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801c83e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c842:	617b      	str	r3, [r7, #20]
    blend_dsc.color = dsc->color;
 801c844:	68bb      	ldr	r3, [r7, #8]
 801c846:	781b      	ldrb	r3, [r3, #0]
 801c848:	773b      	strb	r3, [r7, #28]
    blend_dsc.opa = dsc->opa;
 801c84a:	68bb      	ldr	r3, [r7, #8]
 801c84c:	7a1b      	ldrb	r3, [r3, #8]
 801c84e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 801c852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c856:	2b00      	cmp	r3, #0
 801c858:	d006      	beq.n	801c868 <draw_line_ver+0x13a>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c85a:	f107 0314 	add.w	r3, r7, #20
 801c85e:	4619      	mov	r1, r3
 801c860:	68f8      	ldr	r0, [r7, #12]
 801c862:	f7fc fcb1 	bl	80191c8 <lv_draw_sw_blend>
 801c866:	e090      	b.n	801c98a <draw_line_ver+0x25c>
    }

#if LV_DRAW_COMPLEX
    /*If there other mask apply it*/
    else {
        int32_t draw_area_w = lv_area_get_width(&blend_area);
 801c868:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c86c:	4618      	mov	r0, r3
 801c86e:	f7ff fc5d 	bl	801c12c <lv_area_get_width>
 801c872:	4603      	mov	r3, r0
 801c874:	643b      	str	r3, [r7, #64]	; 0x40

        lv_coord_t y2 = blend_area.y2;
 801c876:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c878:	87fb      	strh	r3, [r7, #62]	; 0x3e
        blend_area.y2 = blend_area.y1;
 801c87a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801c87e:	86fb      	strh	r3, [r7, #54]	; 0x36

        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 801c880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c882:	4618      	mov	r0, r3
 801c884:	f007 fbc0 	bl	8024008 <lv_mem_buf_get>
 801c888:	63b8      	str	r0, [r7, #56]	; 0x38
        blend_dsc.mask_buf = mask_buf;
 801c88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c88c:	623b      	str	r3, [r7, #32]
        blend_dsc.mask_area = &blend_area;
 801c88e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c892:	62bb      	str	r3, [r7, #40]	; 0x28

        lv_coord_t dash_start = 0;
 801c894:	2300      	movs	r3, #0
 801c896:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        if(dashed) {
 801c89a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	d011      	beq.n	801c8c6 <draw_line_ver+0x198>
            dash_start = (blend_area.y1) % (dsc->dash_gap + dsc->dash_width);
 801c8a2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801c8a6:	461a      	mov	r2, r3
 801c8a8:	68bb      	ldr	r3, [r7, #8]
 801c8aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c8ae:	4619      	mov	r1, r3
 801c8b0:	68bb      	ldr	r3, [r7, #8]
 801c8b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c8b6:	440b      	add	r3, r1
 801c8b8:	fb92 f1f3 	sdiv	r1, r2, r3
 801c8bc:	fb01 f303 	mul.w	r3, r1, r3
 801c8c0:	1ad3      	subs	r3, r2, r3
 801c8c2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        }

        lv_coord_t dash_cnt = dash_start;
 801c8c6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801c8ca:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        int32_t h;
        for(h = blend_area.y1; h <= y2; h++) {
 801c8ce:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801c8d2:	657b      	str	r3, [r7, #84]	; 0x54
 801c8d4:	e04f      	b.n	801c976 <draw_line_ver+0x248>
            lv_memset_ff(mask_buf, draw_area_w);
 801c8d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c8d8:	4619      	mov	r1, r3
 801c8da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c8dc:	f007 ffbf 	bl	802485e <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, draw_area_w);
 801c8e0:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801c8e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c8e6:	b21a      	sxth	r2, r3
 801c8e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c8ea:	b21b      	sxth	r3, r3
 801c8ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c8ee:	f7f7 f89d 	bl	8013a2c <lv_draw_mask_apply>
 801c8f2:	4603      	mov	r3, r0
 801c8f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            if(dashed) {
 801c8f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d023      	beq.n	801c948 <draw_line_ver+0x21a>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 801c900:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c904:	2b00      	cmp	r3, #0
 801c906:	d018      	beq.n	801c93a <draw_line_ver+0x20c>
                    if(dash_cnt > dsc->dash_width) {
 801c908:	68bb      	ldr	r3, [r7, #8]
 801c90a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c90e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801c912:	429a      	cmp	r2, r3
 801c914:	dd02      	ble.n	801c91c <draw_line_ver+0x1ee>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_TRANSP;
 801c916:	2300      	movs	r3, #0
 801c918:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    }

                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 801c91c:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801c920:	68bb      	ldr	r3, [r7, #8]
 801c922:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801c926:	4619      	mov	r1, r3
 801c928:	68bb      	ldr	r3, [r7, #8]
 801c92a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801c92e:	440b      	add	r3, r1
 801c930:	429a      	cmp	r2, r3
 801c932:	db02      	blt.n	801c93a <draw_line_ver+0x20c>
                        dash_cnt = 0;
 801c934:	2300      	movs	r3, #0
 801c936:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                    }
                }
                dash_cnt ++;
 801c93a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801c93e:	b29b      	uxth	r3, r3
 801c940:	3301      	adds	r3, #1
 801c942:	b29b      	uxth	r3, r3
 801c944:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            }

            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801c948:	f107 0314 	add.w	r3, r7, #20
 801c94c:	4619      	mov	r1, r3
 801c94e:	68f8      	ldr	r0, [r7, #12]
 801c950:	f7fc fc3a 	bl	80191c8 <lv_draw_sw_blend>

            blend_area.y1++;
 801c954:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801c958:	b29b      	uxth	r3, r3
 801c95a:	3301      	adds	r3, #1
 801c95c:	b29b      	uxth	r3, r3
 801c95e:	b21b      	sxth	r3, r3
 801c960:	867b      	strh	r3, [r7, #50]	; 0x32
            blend_area.y2++;
 801c962:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801c966:	b29b      	uxth	r3, r3
 801c968:	3301      	adds	r3, #1
 801c96a:	b29b      	uxth	r3, r3
 801c96c:	b21b      	sxth	r3, r3
 801c96e:	86fb      	strh	r3, [r7, #54]	; 0x36
        for(h = blend_area.y1; h <= y2; h++) {
 801c970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c972:	3301      	adds	r3, #1
 801c974:	657b      	str	r3, [r7, #84]	; 0x54
 801c976:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801c97a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c97c:	429a      	cmp	r2, r3
 801c97e:	ddaa      	ble.n	801c8d6 <draw_line_ver+0x1a8>
        }
        lv_mem_buf_release(mask_buf);
 801c980:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c982:	f007 fbed 	bl	8024160 <lv_mem_buf_release>
 801c986:	e000      	b.n	801c98a <draw_line_ver+0x25c>
    if(!is_common) return;
 801c988:	bf00      	nop
    }
#endif /*LV_DRAW_COMPLEX*/
}
 801c98a:	3760      	adds	r7, #96	; 0x60
 801c98c:	46bd      	mov	sp, r7
 801c98e:	bd80      	pop	{r7, pc}

0801c990 <draw_line_skew>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                 const lv_point_t * point1, const lv_point_t * point2)
{
 801c990:	b5b0      	push	{r4, r5, r7, lr}
 801c992:	b0ce      	sub	sp, #312	; 0x138
 801c994:	af02      	add	r7, sp, #8
 801c996:	f507 7498 	add.w	r4, r7, #304	; 0x130
 801c99a:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 801c99e:	6020      	str	r0, [r4, #0]
 801c9a0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 801c9a4:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 801c9a8:	6001      	str	r1, [r0, #0]
 801c9aa:	f507 7198 	add.w	r1, r7, #304	; 0x130
 801c9ae:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 801c9b2:	600a      	str	r2, [r1, #0]
 801c9b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801c9b8:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 801c9bc:	6013      	str	r3, [r2, #0]
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 801c9be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801c9c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c9cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801c9d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801c9d4:	681b      	ldr	r3, [r3, #0]
 801c9d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c9da:	429a      	cmp	r2, r3
 801c9dc:	da24      	bge.n	801ca28 <draw_line_skew+0x98>
        p1.y = point1->y;
 801c9de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801c9e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c9ec:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
        p2.y = point2->y;
 801c9f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801c9f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c9fe:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        p1.x = point1->x;
 801ca02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ca06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ca10:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
        p2.x = point2->x;
 801ca14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ca18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801ca1c:	681b      	ldr	r3, [r3, #0]
 801ca1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ca22:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 801ca26:	e023      	b.n	801ca70 <draw_line_skew+0xe0>
    }
    else {
        p1.y = point2->y;
 801ca28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ca2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801ca30:	681b      	ldr	r3, [r3, #0]
 801ca32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ca36:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
        p2.y = point1->y;
 801ca3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ca3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801ca42:	681b      	ldr	r3, [r3, #0]
 801ca44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ca48:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        p1.x = point2->x;
 801ca4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ca50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801ca54:	681b      	ldr	r3, [r3, #0]
 801ca56:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ca5a:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
        p2.x = point1->x;
 801ca5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801ca62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801ca66:	681b      	ldr	r3, [r3, #0]
 801ca68:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ca6c:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
    }

    int32_t xdiff = p2.x - p1.x;
 801ca70:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801ca74:	461a      	mov	r2, r3
 801ca76:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801ca7a:	1ad3      	subs	r3, r2, r3
 801ca7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    int32_t ydiff = p2.y - p1.y;
 801ca80:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ca84:	461a      	mov	r2, r3
 801ca86:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801ca8a:	1ad3      	subs	r3, r2, r3
 801ca8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 801ca90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ca94:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801ca98:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801ca9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	bfb8      	it	lt
 801caa4:	425b      	neglt	r3, r3
 801caa6:	429a      	cmp	r2, r3
 801caa8:	bfcc      	ite	gt
 801caaa:	2301      	movgt	r3, #1
 801caac:	2300      	movle	r3, #0
 801caae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
 801cab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cab6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801caba:	681b      	ldr	r3, [r3, #0]
 801cabc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cac0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t wcorr_i = 0;
 801cac4:	2300      	movs	r3, #0
 801cac6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 801caca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d00f      	beq.n	801caf2 <draw_line_skew+0x162>
 801cad2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	bfb8      	it	lt
 801cada:	425b      	neglt	r3, r3
 801cadc:	015a      	lsls	r2, r3, #5
 801cade:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801cae2:	2b00      	cmp	r3, #0
 801cae4:	bfb8      	it	lt
 801cae6:	425b      	neglt	r3, r3
 801cae8:	fb92 f3f3 	sdiv	r3, r2, r3
 801caec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801caf0:	e00e      	b.n	801cb10 <draw_line_skew+0x180>
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 801caf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	bfb8      	it	lt
 801cafa:	425b      	neglt	r3, r3
 801cafc:	015a      	lsls	r2, r3, #5
 801cafe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801cb02:	2b00      	cmp	r3, #0
 801cb04:	bfb8      	it	lt
 801cb06:	425b      	neglt	r3, r3
 801cb08:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 801cb10:	4a7f      	ldr	r2, [pc, #508]	; (801cd10 <draw_line_skew+0x380>)
 801cb12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801cb16:	4413      	add	r3, r2
 801cb18:	781b      	ldrb	r3, [r3, #0]
 801cb1a:	461a      	mov	r2, r3
 801cb1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801cb20:	fb02 f303 	mul.w	r3, r2, r3
 801cb24:	333f      	adds	r3, #63	; 0x3f
 801cb26:	11db      	asrs	r3, r3, #7
 801cb28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    int32_t w_half0 = w >> 1;
 801cb2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801cb30:	105b      	asrs	r3, r3, #1
 801cb32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 801cb36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801cb3a:	f003 0301 	and.w	r3, r3, #1
 801cb3e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801cb42:	4413      	add	r3, r2
 801cb44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 801cb48:	f9b7 20e4 	ldrsh.w	r2, [r7, #228]	; 0xe4
 801cb4c:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801cb50:	4293      	cmp	r3, r2
 801cb52:	bfa8      	it	ge
 801cb54:	4613      	movge	r3, r2
 801cb56:	b21b      	sxth	r3, r3
 801cb58:	b29a      	uxth	r2, r3
 801cb5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801cb5e:	b29b      	uxth	r3, r3
 801cb60:	1ad3      	subs	r3, r2, r3
 801cb62:	b29b      	uxth	r3, r3
 801cb64:	b21b      	sxth	r3, r3
 801cb66:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    blend_area.x2 = LV_MAX(p1.x, p2.x) + w;
 801cb6a:	f9b7 20e4 	ldrsh.w	r2, [r7, #228]	; 0xe4
 801cb6e:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801cb72:	4293      	cmp	r3, r2
 801cb74:	bfb8      	it	lt
 801cb76:	4613      	movlt	r3, r2
 801cb78:	b21b      	sxth	r3, r3
 801cb7a:	b29a      	uxth	r2, r3
 801cb7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801cb80:	b29b      	uxth	r3, r3
 801cb82:	4413      	add	r3, r2
 801cb84:	b29b      	uxth	r3, r3
 801cb86:	b21b      	sxth	r3, r3
 801cb88:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 801cb8c:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
 801cb90:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801cb94:	4293      	cmp	r3, r2
 801cb96:	bfa8      	it	ge
 801cb98:	4613      	movge	r3, r2
 801cb9a:	b21b      	sxth	r3, r3
 801cb9c:	b29a      	uxth	r2, r3
 801cb9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801cba2:	b29b      	uxth	r3, r3
 801cba4:	1ad3      	subs	r3, r2, r3
 801cba6:	b29b      	uxth	r3, r3
 801cba8:	b21b      	sxth	r3, r3
 801cbaa:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 801cbae:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
 801cbb2:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801cbb6:	4293      	cmp	r3, r2
 801cbb8:	bfb8      	it	lt
 801cbba:	4613      	movlt	r3, r2
 801cbbc:	b21b      	sxth	r3, r3
 801cbbe:	b29a      	uxth	r2, r3
 801cbc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801cbc4:	b29b      	uxth	r3, r3
 801cbc6:	4413      	add	r3, r2
 801cbc8:	b29b      	uxth	r3, r3
 801cbca:	b21b      	sxth	r3, r3
 801cbcc:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 801cbd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cbd4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801cbd8:	681b      	ldr	r3, [r3, #0]
 801cbda:	689a      	ldr	r2, [r3, #8]
 801cbdc:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 801cbe0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801cbe4:	4618      	mov	r0, r3
 801cbe6:	f005 fe65 	bl	80228b4 <_lv_area_intersect>
 801cbea:	4603      	mov	r3, r0
 801cbec:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
    if(is_common == false) return;
 801cbf0:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 801cbf4:	f083 0301 	eor.w	r3, r3, #1
 801cbf8:	b2db      	uxtb	r3, r3
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	f040 8276 	bne.w	801d0ec <draw_line_skew+0x75c>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 801cc00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	f000 8085 	beq.w	801cd14 <draw_line_skew+0x384>
        if(xdiff > 0) {
 801cc0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	dd3e      	ble.n	801cc90 <draw_line_skew+0x300>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 801cc12:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801cc16:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801cc1a:	b29a      	uxth	r2, r3
 801cc1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801cc20:	b29b      	uxth	r3, r3
 801cc22:	1ad3      	subs	r3, r2, r3
 801cc24:	b29b      	uxth	r3, r3
 801cc26:	b21c      	sxth	r4, r3
 801cc28:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801cc2c:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801cc30:	b29a      	uxth	r2, r3
 801cc32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801cc36:	b29b      	uxth	r3, r3
 801cc38:	1ad3      	subs	r3, r2, r3
 801cc3a:	b29b      	uxth	r3, r3
 801cc3c:	b21b      	sxth	r3, r3
 801cc3e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801cc42:	2200      	movs	r2, #0
 801cc44:	9201      	str	r2, [sp, #4]
 801cc46:	9300      	str	r3, [sp, #0]
 801cc48:	462b      	mov	r3, r5
 801cc4a:	4622      	mov	r2, r4
 801cc4c:	f7f7 f84a 	bl	8013ce4 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 801cc50:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801cc54:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801cc58:	b29a      	uxth	r2, r3
 801cc5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801cc5e:	b29b      	uxth	r3, r3
 801cc60:	4413      	add	r3, r2
 801cc62:	b29b      	uxth	r3, r3
 801cc64:	b21c      	sxth	r4, r3
 801cc66:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801cc6a:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801cc6e:	b29a      	uxth	r2, r3
 801cc70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801cc74:	b29b      	uxth	r3, r3
 801cc76:	4413      	add	r3, r2
 801cc78:	b29b      	uxth	r3, r3
 801cc7a:	b21b      	sxth	r3, r3
 801cc7c:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801cc80:	2201      	movs	r2, #1
 801cc82:	9201      	str	r2, [sp, #4]
 801cc84:	9300      	str	r3, [sp, #0]
 801cc86:	462b      	mov	r3, r5
 801cc88:	4622      	mov	r2, r4
 801cc8a:	f7f7 f82b 	bl	8013ce4 <lv_draw_mask_line_points_init>
 801cc8e:	e07f      	b.n	801cd90 <draw_line_skew+0x400>
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 801cc90:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801cc94:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801cc98:	b29a      	uxth	r2, r3
 801cc9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801cc9e:	b29b      	uxth	r3, r3
 801cca0:	4413      	add	r3, r2
 801cca2:	b29b      	uxth	r3, r3
 801cca4:	b21c      	sxth	r4, r3
 801cca6:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801ccaa:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ccae:	b29a      	uxth	r2, r3
 801ccb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ccb4:	b29b      	uxth	r3, r3
 801ccb6:	4413      	add	r3, r2
 801ccb8:	b29b      	uxth	r3, r3
 801ccba:	b21b      	sxth	r3, r3
 801ccbc:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801ccc0:	2200      	movs	r2, #0
 801ccc2:	9201      	str	r2, [sp, #4]
 801ccc4:	9300      	str	r3, [sp, #0]
 801ccc6:	462b      	mov	r3, r5
 801ccc8:	4622      	mov	r2, r4
 801ccca:	f7f7 f80b 	bl	8013ce4 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 801ccce:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801ccd2:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801ccd6:	b29a      	uxth	r2, r3
 801ccd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ccdc:	b29b      	uxth	r3, r3
 801ccde:	1ad3      	subs	r3, r2, r3
 801cce0:	b29b      	uxth	r3, r3
 801cce2:	b21c      	sxth	r4, r3
 801cce4:	f9b7 50e4 	ldrsh.w	r5, [r7, #228]	; 0xe4
 801cce8:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ccec:	b29a      	uxth	r2, r3
 801ccee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ccf2:	b29b      	uxth	r3, r3
 801ccf4:	1ad3      	subs	r3, r2, r3
 801ccf6:	b29b      	uxth	r3, r3
 801ccf8:	b21b      	sxth	r3, r3
 801ccfa:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801ccfe:	2201      	movs	r2, #1
 801cd00:	9201      	str	r2, [sp, #4]
 801cd02:	9300      	str	r3, [sp, #0]
 801cd04:	462b      	mov	r3, r5
 801cd06:	4622      	mov	r2, r4
 801cd08:	f7f6 ffec 	bl	8013ce4 <lv_draw_mask_line_points_init>
 801cd0c:	e040      	b.n	801cd90 <draw_line_skew+0x400>
 801cd0e:	bf00      	nop
 801cd10:	08028a84 	.word	0x08028a84
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 801cd14:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801cd18:	b29a      	uxth	r2, r3
 801cd1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801cd1e:	b29b      	uxth	r3, r3
 801cd20:	4413      	add	r3, r2
 801cd22:	b29b      	uxth	r3, r3
 801cd24:	b219      	sxth	r1, r3
 801cd26:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 801cd2a:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801cd2e:	b29a      	uxth	r2, r3
 801cd30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801cd34:	b29b      	uxth	r3, r3
 801cd36:	4413      	add	r3, r2
 801cd38:	b29b      	uxth	r3, r3
 801cd3a:	b21a      	sxth	r2, r3
 801cd3c:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801cd40:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 801cd44:	2500      	movs	r5, #0
 801cd46:	9501      	str	r5, [sp, #4]
 801cd48:	9300      	str	r3, [sp, #0]
 801cd4a:	4613      	mov	r3, r2
 801cd4c:	4622      	mov	r2, r4
 801cd4e:	f7f6 ffc9 	bl	8013ce4 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 801cd52:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801cd56:	b29a      	uxth	r2, r3
 801cd58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801cd5c:	b29b      	uxth	r3, r3
 801cd5e:	1ad3      	subs	r3, r2, r3
 801cd60:	b29b      	uxth	r3, r3
 801cd62:	b219      	sxth	r1, r3
 801cd64:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 801cd68:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801cd6c:	b29a      	uxth	r2, r3
 801cd6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801cd72:	b29b      	uxth	r3, r3
 801cd74:	1ad3      	subs	r3, r2, r3
 801cd76:	b29b      	uxth	r3, r3
 801cd78:	b21a      	sxth	r2, r3
 801cd7a:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801cd7e:	f107 0084 	add.w	r0, r7, #132	; 0x84
 801cd82:	2501      	movs	r5, #1
 801cd84:	9501      	str	r5, [sp, #4]
 801cd86:	9300      	str	r3, [sp, #0]
 801cd88:	4613      	mov	r3, r2
 801cd8a:	4622      	mov	r2, r4
 801cd8c:	f7f6 ffaa 	bl	8013ce4 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 801cd90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801cd94:	2100      	movs	r1, #0
 801cd96:	4618      	mov	r0, r3
 801cd98:	f7f6 fe16 	bl	80139c8 <lv_draw_mask_add>
 801cd9c:	4603      	mov	r3, r0
 801cd9e:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 801cda2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801cda6:	2100      	movs	r1, #0
 801cda8:	4618      	mov	r0, r3
 801cdaa:	f7f6 fe0d 	bl	80139c8 <lv_draw_mask_add>
 801cdae:	4603      	mov	r3, r0
 801cdb0:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
    int16_t mask_top_id = LV_MASK_ID_INV;
 801cdb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cdb8:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 801cdbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cdc0:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128

    if(!dsc->raw_end) {
 801cdc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cdc8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801cdcc:	681b      	ldr	r3, [r3, #0]
 801cdce:	7a5b      	ldrb	r3, [r3, #9]
 801cdd0:	f003 0310 	and.w	r3, r3, #16
 801cdd4:	b2db      	uxtb	r3, r3
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d14f      	bne.n	801ce7a <draw_line_skew+0x4ea>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 801cdda:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
 801cdde:	f9b7 40ea 	ldrsh.w	r4, [r7, #234]	; 0xea
 801cde2:	f9b7 30e8 	ldrsh.w	r3, [r7, #232]	; 0xe8
 801cde6:	b29a      	uxth	r2, r3
 801cde8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801cdec:	b29b      	uxth	r3, r3
 801cdee:	1ad3      	subs	r3, r2, r3
 801cdf0:	b29b      	uxth	r3, r3
 801cdf2:	b21d      	sxth	r5, r3
 801cdf4:	f9b7 30ea 	ldrsh.w	r3, [r7, #234]	; 0xea
 801cdf8:	b29a      	uxth	r2, r3
 801cdfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801cdfe:	b29b      	uxth	r3, r3
 801ce00:	4413      	add	r3, r2
 801ce02:	b29b      	uxth	r3, r3
 801ce04:	b21b      	sxth	r3, r3
 801ce06:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801ce0a:	2203      	movs	r2, #3
 801ce0c:	9201      	str	r2, [sp, #4]
 801ce0e:	9300      	str	r3, [sp, #0]
 801ce10:	462b      	mov	r3, r5
 801ce12:	4622      	mov	r2, r4
 801ce14:	f7f6 ff66 	bl	8013ce4 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 801ce18:	f9b7 10e4 	ldrsh.w	r1, [r7, #228]	; 0xe4
 801ce1c:	f9b7 40e6 	ldrsh.w	r4, [r7, #230]	; 0xe6
 801ce20:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	; 0xe4
 801ce24:	b29a      	uxth	r2, r3
 801ce26:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801ce2a:	b29b      	uxth	r3, r3
 801ce2c:	1ad3      	subs	r3, r2, r3
 801ce2e:	b29b      	uxth	r3, r3
 801ce30:	b21d      	sxth	r5, r3
 801ce32:	f9b7 30e6 	ldrsh.w	r3, [r7, #230]	; 0xe6
 801ce36:	b29a      	uxth	r2, r3
 801ce38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801ce3c:	b29b      	uxth	r3, r3
 801ce3e:	4413      	add	r3, r2
 801ce40:	b29b      	uxth	r3, r3
 801ce42:	b21b      	sxth	r3, r3
 801ce44:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801ce48:	2202      	movs	r2, #2
 801ce4a:	9201      	str	r2, [sp, #4]
 801ce4c:	9300      	str	r3, [sp, #0]
 801ce4e:	462b      	mov	r3, r5
 801ce50:	4622      	mov	r2, r4
 801ce52:	f7f6 ff47 	bl	8013ce4 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 801ce56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801ce5a:	2100      	movs	r1, #0
 801ce5c:	4618      	mov	r0, r3
 801ce5e:	f7f6 fdb3 	bl	80139c8 <lv_draw_mask_add>
 801ce62:	4603      	mov	r3, r0
 801ce64:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 801ce68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ce6c:	2100      	movs	r1, #0
 801ce6e:	4618      	mov	r0, r3
 801ce70:	f7f6 fdaa 	bl	80139c8 <lv_draw_mask_add>
 801ce74:	4603      	mov	r3, r0
 801ce76:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
    }

    /*The real draw area is around the line.
     *It's easy to calculate with steep lines, but the area can be very wide with very flat lines.
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&blend_area);
 801ce7a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801ce7e:	4618      	mov	r0, r3
 801ce80:	f7ff f954 	bl	801c12c <lv_area_get_width>
 801ce84:	4603      	mov	r3, r0
 801ce86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 801ce8a:	f7f3 fcc3 	bl	8010814 <_lv_refr_get_disp_refreshing>
 801ce8e:	4603      	mov	r3, r0
 801ce90:	4618      	mov	r0, r3
 801ce92:	f004 ffe9 	bl	8021e68 <lv_disp_get_hor_res>
 801ce96:	4603      	mov	r3, r0
 801ce98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 801ce9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801cea0:	4618      	mov	r0, r3
 801cea2:	f005 fc7a 	bl	802279a <lv_area_get_size>
 801cea6:	4602      	mov	r2, r0
 801cea8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801ceac:	4293      	cmp	r3, r2
 801ceae:	d906      	bls.n	801cebe <draw_line_skew+0x52e>
 801ceb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	f005 fc70 	bl	802279a <lv_area_get_size>
 801ceba:	4603      	mov	r3, r0
 801cebc:	e001      	b.n	801cec2 <draw_line_skew+0x532>
 801cebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801cec2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 801cec6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801ceca:	f007 f89d 	bl	8024008 <lv_mem_buf_get>
 801cece:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

    lv_coord_t y2 = blend_area.y2;
 801ced2:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 801ced6:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    blend_area.y2 = blend_area.y1;
 801ceda:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 801cede:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2

    uint32_t mask_p = 0;
 801cee2:	2300      	movs	r3, #0
 801cee4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    lv_memset_ff(mask_buf, mask_buf_size);
 801cee8:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 801ceec:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801cef0:	f007 fcb5 	bl	802485e <lv_memset_ff>

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801cef4:	f107 0310 	add.w	r3, r7, #16
 801cef8:	211c      	movs	r1, #28
 801cefa:	4618      	mov	r0, r3
 801cefc:	f007 fc2e 	bl	802475c <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801cf00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cf04:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801cf08:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801cf0c:	601a      	str	r2, [r3, #0]
    blend_dsc.color = dsc->color;
 801cf0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cf12:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801cf16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801cf1a:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 801cf1e:	6812      	ldr	r2, [r2, #0]
 801cf20:	7812      	ldrb	r2, [r2, #0]
 801cf22:	721a      	strb	r2, [r3, #8]
    blend_dsc.opa = dsc->opa;
 801cf24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cf28:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801cf2c:	681b      	ldr	r3, [r3, #0]
 801cf2e:	7a1a      	ldrb	r2, [r3, #8]
 801cf30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cf34:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801cf38:	761a      	strb	r2, [r3, #24]
    blend_dsc.mask_buf = mask_buf;
 801cf3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cf3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801cf42:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801cf46:	60da      	str	r2, [r3, #12]
    blend_dsc.mask_area = &blend_area;
 801cf48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cf4c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801cf50:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 801cf54:	615a      	str	r2, [r3, #20]

    /*Fill the first row with 'color'*/
    for(h = blend_area.y1; h <= y2; h++) {
 801cf56:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 801cf5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801cf5e:	e06a      	b.n	801d036 <draw_line_skew+0x6a6>
        blend_dsc.mask_res = lv_draw_mask_apply(&mask_buf[mask_p], blend_area.x1, h, draw_area_w);
 801cf60:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801cf64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801cf68:	18d0      	adds	r0, r2, r3
 801cf6a:	f9b7 10dc 	ldrsh.w	r1, [r7, #220]	; 0xdc
 801cf6e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801cf72:	b21a      	sxth	r2, r3
 801cf74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cf78:	b21b      	sxth	r3, r3
 801cf7a:	f7f6 fd57 	bl	8013a2c <lv_draw_mask_apply>
 801cf7e:	4603      	mov	r3, r0
 801cf80:	461a      	mov	r2, r3
 801cf82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cf86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801cf8a:	741a      	strb	r2, [r3, #16]
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801cf8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cf90:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801cf94:	7c1b      	ldrb	r3, [r3, #16]
 801cf96:	2b00      	cmp	r3, #0
 801cf98:	d10a      	bne.n	801cfb0 <draw_line_skew+0x620>
            lv_memset_00(&mask_buf[mask_p], draw_area_w);
 801cf9a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801cf9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801cfa2:	4413      	add	r3, r2
 801cfa4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801cfa8:	4611      	mov	r1, r2
 801cfaa:	4618      	mov	r0, r3
 801cfac:	f007 fbd6 	bl	802475c <lv_memset_00>
        }

        mask_p += draw_area_w;
 801cfb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cfb4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801cfb8:	4413      	add	r3, r2
 801cfba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 801cfbe:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801cfc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801cfc6:	4413      	add	r3, r2
 801cfc8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801cfcc:	429a      	cmp	r2, r3
 801cfce:	d908      	bls.n	801cfe2 <draw_line_skew+0x652>
            blend_area.y2 ++;
 801cfd0:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 801cfd4:	b29b      	uxth	r3, r3
 801cfd6:	3301      	adds	r3, #1
 801cfd8:	b29b      	uxth	r3, r3
 801cfda:	b21b      	sxth	r3, r3
 801cfdc:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 801cfe0:	e024      	b.n	801d02c <draw_line_skew+0x69c>
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801cfe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cfe6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801cfea:	2202      	movs	r2, #2
 801cfec:	741a      	strb	r2, [r3, #16]
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801cfee:	f107 0210 	add.w	r2, r7, #16
 801cff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801cff6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801cffa:	4611      	mov	r1, r2
 801cffc:	6818      	ldr	r0, [r3, #0]
 801cffe:	f7fc f8e3 	bl	80191c8 <lv_draw_sw_blend>

            blend_area.y1 = blend_area.y2 + 1;
 801d002:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 801d006:	b29b      	uxth	r3, r3
 801d008:	3301      	adds	r3, #1
 801d00a:	b29b      	uxth	r3, r3
 801d00c:	b21b      	sxth	r3, r3
 801d00e:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
            blend_area.y2 = blend_area.y1;
 801d012:	f9b7 30de 	ldrsh.w	r3, [r7, #222]	; 0xde
 801d016:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
            mask_p = 0;
 801d01a:	2300      	movs	r3, #0
 801d01c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            lv_memset_ff(mask_buf, mask_buf_size);
 801d020:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 801d024:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801d028:	f007 fc19 	bl	802485e <lv_memset_ff>
    for(h = blend_area.y1; h <= y2; h++) {
 801d02c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d030:	3301      	adds	r3, #1
 801d032:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801d036:	f9b7 30ee 	ldrsh.w	r3, [r7, #238]	; 0xee
 801d03a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801d03e:	429a      	cmp	r2, r3
 801d040:	dd8e      	ble.n	801cf60 <draw_line_skew+0x5d0>
        }
    }

    /*Flush the last part*/
    if(blend_area.y1 != blend_area.y2) {
 801d042:	f9b7 20de 	ldrsh.w	r2, [r7, #222]	; 0xde
 801d046:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 801d04a:	429a      	cmp	r2, r3
 801d04c:	d017      	beq.n	801d07e <draw_line_skew+0x6ee>
        blend_area.y2--;
 801d04e:	f9b7 30e2 	ldrsh.w	r3, [r7, #226]	; 0xe2
 801d052:	b29b      	uxth	r3, r3
 801d054:	3b01      	subs	r3, #1
 801d056:	b29b      	uxth	r3, r3
 801d058:	b21b      	sxth	r3, r3
 801d05a:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801d05e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d062:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801d066:	2202      	movs	r2, #2
 801d068:	741a      	strb	r2, [r3, #16]
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d06a:	f107 0210 	add.w	r2, r7, #16
 801d06e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801d072:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801d076:	4611      	mov	r1, r2
 801d078:	6818      	ldr	r0, [r3, #0]
 801d07a:	f7fc f8a5 	bl	80191c8 <lv_draw_sw_blend>
    }

    lv_mem_buf_release(mask_buf);
 801d07e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801d082:	f007 f86d 	bl	8024160 <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_left_param);
 801d086:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d08a:	4618      	mov	r0, r3
 801d08c:	f7f6 fd62 	bl	8013b54 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_right_param);
 801d090:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801d094:	4618      	mov	r0, r3
 801d096:	f7f6 fd5d 	bl	8013b54 <lv_draw_mask_free_param>
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
 801d09a:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 801d09e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d0a2:	d004      	beq.n	801d0ae <draw_line_skew+0x71e>
 801d0a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d0a8:	4618      	mov	r0, r3
 801d0aa:	f7f6 fd53 	bl	8013b54 <lv_draw_mask_free_param>
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
 801d0ae:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 801d0b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d0b6:	d004      	beq.n	801d0c2 <draw_line_skew+0x732>
 801d0b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d0bc:	4618      	mov	r0, r3
 801d0be:	f7f6 fd49 	bl	8013b54 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_left_id);
 801d0c2:	f9b7 3104 	ldrsh.w	r3, [r7, #260]	; 0x104
 801d0c6:	4618      	mov	r0, r3
 801d0c8:	f7f6 fcf4 	bl	8013ab4 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 801d0cc:	f9b7 3102 	ldrsh.w	r3, [r7, #258]	; 0x102
 801d0d0:	4618      	mov	r0, r3
 801d0d2:	f7f6 fcef 	bl	8013ab4 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 801d0d6:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 801d0da:	4618      	mov	r0, r3
 801d0dc:	f7f6 fcea 	bl	8013ab4 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 801d0e0:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 801d0e4:	4618      	mov	r0, r3
 801d0e6:	f7f6 fce5 	bl	8013ab4 <lv_draw_mask_remove_id>
 801d0ea:	e000      	b.n	801d0ee <draw_line_skew+0x75e>
    if(is_common == false) return;
 801d0ec:	bf00      	nop
    LV_UNUSED(point2);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(dsc);
    LV_LOG_WARN("Can't draw skewed line with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 801d0ee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801d0f2:	46bd      	mov	sp, r7
 801d0f4:	bdb0      	pop	{r4, r5, r7, pc}
 801d0f6:	bf00      	nop

0801d0f8 <lv_draw_sw_polygon>:
 * @param clip_area polygon will be drawn only in this area
 * @param draw_dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_sw_polygon(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * draw_dsc, const lv_point_t * points,
                        uint16_t point_cnt)
{
 801d0f8:	b590      	push	{r4, r7, lr}
 801d0fa:	b09b      	sub	sp, #108	; 0x6c
 801d0fc:	af02      	add	r7, sp, #8
 801d0fe:	60f8      	str	r0, [r7, #12]
 801d100:	60b9      	str	r1, [r7, #8]
 801d102:	607a      	str	r2, [r7, #4]
 801d104:	807b      	strh	r3, [r7, #2]
#if LV_DRAW_COMPLEX
    if(point_cnt < 3) return;
 801d106:	887b      	ldrh	r3, [r7, #2]
 801d108:	2b02      	cmp	r3, #2
 801d10a:	f240 82a9 	bls.w	801d660 <lv_draw_sw_polygon+0x568>
    if(points == NULL) return;
 801d10e:	687b      	ldr	r3, [r7, #4]
 801d110:	2b00      	cmp	r3, #0
 801d112:	f000 82a7 	beq.w	801d664 <lv_draw_sw_polygon+0x56c>

    /*Join adjacent points if they are on the same coordinate*/
    lv_point_t * p = lv_mem_buf_get(point_cnt * sizeof(lv_point_t));
 801d116:	887b      	ldrh	r3, [r7, #2]
 801d118:	009b      	lsls	r3, r3, #2
 801d11a:	4618      	mov	r0, r3
 801d11c:	f006 ff74 	bl	8024008 <lv_mem_buf_get>
 801d120:	63b8      	str	r0, [r7, #56]	; 0x38
    if(p == NULL) return;
 801d122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d124:	2b00      	cmp	r3, #0
 801d126:	f000 829f 	beq.w	801d668 <lv_draw_sw_polygon+0x570>
    uint16_t i;
    uint16_t pcnt = 0;
 801d12a:	2300      	movs	r3, #0
 801d12c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    p[0] = points[0];
 801d130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	681b      	ldr	r3, [r3, #0]
 801d136:	6013      	str	r3, [r2, #0]
    for(i = 0; i < point_cnt - 1; i++) {
 801d138:	2300      	movs	r3, #0
 801d13a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801d13e:	e039      	b.n	801d1b4 <lv_draw_sw_polygon+0xbc>
        if(points[i].x != points[i + 1].x || points[i].y != points[i + 1].y) {
 801d140:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801d144:	009b      	lsls	r3, r3, #2
 801d146:	687a      	ldr	r2, [r7, #4]
 801d148:	4413      	add	r3, r2
 801d14a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d14e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801d152:	3301      	adds	r3, #1
 801d154:	009b      	lsls	r3, r3, #2
 801d156:	6879      	ldr	r1, [r7, #4]
 801d158:	440b      	add	r3, r1
 801d15a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d15e:	429a      	cmp	r2, r3
 801d160:	d110      	bne.n	801d184 <lv_draw_sw_polygon+0x8c>
 801d162:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801d166:	009b      	lsls	r3, r3, #2
 801d168:	687a      	ldr	r2, [r7, #4]
 801d16a:	4413      	add	r3, r2
 801d16c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d170:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801d174:	3301      	adds	r3, #1
 801d176:	009b      	lsls	r3, r3, #2
 801d178:	6879      	ldr	r1, [r7, #4]
 801d17a:	440b      	add	r3, r1
 801d17c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d180:	429a      	cmp	r2, r3
 801d182:	d012      	beq.n	801d1aa <lv_draw_sw_polygon+0xb2>
            p[pcnt] = points[i];
 801d184:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801d188:	009b      	lsls	r3, r3, #2
 801d18a:	687a      	ldr	r2, [r7, #4]
 801d18c:	18d1      	adds	r1, r2, r3
 801d18e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801d192:	009b      	lsls	r3, r3, #2
 801d194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d196:	4413      	add	r3, r2
 801d198:	461a      	mov	r2, r3
 801d19a:	460b      	mov	r3, r1
 801d19c:	681b      	ldr	r3, [r3, #0]
 801d19e:	6013      	str	r3, [r2, #0]
            pcnt++;
 801d1a0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801d1a4:	3301      	adds	r3, #1
 801d1a6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    for(i = 0; i < point_cnt - 1; i++) {
 801d1aa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801d1ae:	3301      	adds	r3, #1
 801d1b0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801d1b4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801d1b8:	887b      	ldrh	r3, [r7, #2]
 801d1ba:	3b01      	subs	r3, #1
 801d1bc:	429a      	cmp	r2, r3
 801d1be:	dbbf      	blt.n	801d140 <lv_draw_sw_polygon+0x48>
        }
    }
    /*The first and the last points are also adjacent*/
    if(points[0].x != points[point_cnt - 1].x || points[0].y != points[point_cnt - 1].y) {
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d1c6:	8879      	ldrh	r1, [r7, #2]
 801d1c8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801d1cc:	440b      	add	r3, r1
 801d1ce:	009b      	lsls	r3, r3, #2
 801d1d0:	6879      	ldr	r1, [r7, #4]
 801d1d2:	440b      	add	r3, r1
 801d1d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d1d8:	429a      	cmp	r2, r3
 801d1da:	d10d      	bne.n	801d1f8 <lv_draw_sw_polygon+0x100>
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d1e2:	8879      	ldrh	r1, [r7, #2]
 801d1e4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801d1e8:	440b      	add	r3, r1
 801d1ea:	009b      	lsls	r3, r3, #2
 801d1ec:	6879      	ldr	r1, [r7, #4]
 801d1ee:	440b      	add	r3, r1
 801d1f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d1f4:	429a      	cmp	r2, r3
 801d1f6:	d014      	beq.n	801d222 <lv_draw_sw_polygon+0x12a>
        p[pcnt] = points[point_cnt - 1];
 801d1f8:	887a      	ldrh	r2, [r7, #2]
 801d1fa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801d1fe:	4413      	add	r3, r2
 801d200:	009b      	lsls	r3, r3, #2
 801d202:	687a      	ldr	r2, [r7, #4]
 801d204:	18d1      	adds	r1, r2, r3
 801d206:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801d20a:	009b      	lsls	r3, r3, #2
 801d20c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d20e:	4413      	add	r3, r2
 801d210:	461a      	mov	r2, r3
 801d212:	460b      	mov	r3, r1
 801d214:	681b      	ldr	r3, [r3, #0]
 801d216:	6013      	str	r3, [r2, #0]
        pcnt++;
 801d218:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801d21c:	3301      	adds	r3, #1
 801d21e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    point_cnt = pcnt;
 801d222:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801d226:	807b      	strh	r3, [r7, #2]
    if(point_cnt < 3) {
 801d228:	887b      	ldrh	r3, [r7, #2]
 801d22a:	2b02      	cmp	r3, #2
 801d22c:	d803      	bhi.n	801d236 <lv_draw_sw_polygon+0x13e>
        lv_mem_buf_release(p);
 801d22e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d230:	f006 ff96 	bl	8024160 <lv_mem_buf_release>
        return;
 801d234:	e219      	b.n	801d66a <lv_draw_sw_polygon+0x572>
    }

    lv_area_t poly_coords = {.x1 = LV_COORD_MAX, .y1 = LV_COORD_MAX, .x2 = LV_COORD_MIN, .y2 = LV_COORD_MIN};
 801d236:	4a9a      	ldr	r2, [pc, #616]	; (801d4a0 <lv_draw_sw_polygon+0x3a8>)
 801d238:	f107 031c 	add.w	r3, r7, #28
 801d23c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d240:	e883 0003 	stmia.w	r3, {r0, r1}

    for(i = 0; i < point_cnt; i++) {
 801d244:	2300      	movs	r3, #0
 801d246:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801d24a:	e03c      	b.n	801d2c6 <lv_draw_sw_polygon+0x1ce>
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 801d24c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801d250:	009b      	lsls	r3, r3, #2
 801d252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d254:	4413      	add	r3, r2
 801d256:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d25a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801d25e:	4293      	cmp	r3, r2
 801d260:	bfa8      	it	ge
 801d262:	4613      	movge	r3, r2
 801d264:	b21b      	sxth	r3, r3
 801d266:	83bb      	strh	r3, [r7, #28]
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 801d268:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801d26c:	009b      	lsls	r3, r3, #2
 801d26e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d270:	4413      	add	r3, r2
 801d272:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d276:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d27a:	4293      	cmp	r3, r2
 801d27c:	bfa8      	it	ge
 801d27e:	4613      	movge	r3, r2
 801d280:	b21b      	sxth	r3, r3
 801d282:	83fb      	strh	r3, [r7, #30]
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 801d284:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801d288:	009b      	lsls	r3, r3, #2
 801d28a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d28c:	4413      	add	r3, r2
 801d28e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d292:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d296:	4293      	cmp	r3, r2
 801d298:	bfb8      	it	lt
 801d29a:	4613      	movlt	r3, r2
 801d29c:	b21b      	sxth	r3, r3
 801d29e:	843b      	strh	r3, [r7, #32]
        poly_coords.y2 = LV_MAX(poly_coords.y2, p[i].y);
 801d2a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801d2a4:	009b      	lsls	r3, r3, #2
 801d2a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d2a8:	4413      	add	r3, r2
 801d2aa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d2ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801d2b2:	4293      	cmp	r3, r2
 801d2b4:	bfb8      	it	lt
 801d2b6:	4613      	movlt	r3, r2
 801d2b8:	b21b      	sxth	r3, r3
 801d2ba:	847b      	strh	r3, [r7, #34]	; 0x22
    for(i = 0; i < point_cnt; i++) {
 801d2bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801d2c0:	3301      	adds	r3, #1
 801d2c2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801d2c6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801d2ca:	887b      	ldrh	r3, [r7, #2]
 801d2cc:	429a      	cmp	r2, r3
 801d2ce:	d3bd      	bcc.n	801d24c <lv_draw_sw_polygon+0x154>
    }

    bool is_common;
    lv_area_t clip_area;
    is_common = _lv_area_intersect(&clip_area, &poly_coords, draw_ctx->clip_area);
 801d2d0:	68fb      	ldr	r3, [r7, #12]
 801d2d2:	689a      	ldr	r2, [r3, #8]
 801d2d4:	f107 011c 	add.w	r1, r7, #28
 801d2d8:	f107 0314 	add.w	r3, r7, #20
 801d2dc:	4618      	mov	r0, r3
 801d2de:	f005 fae9 	bl	80228b4 <_lv_area_intersect>
 801d2e2:	4603      	mov	r3, r0
 801d2e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(!is_common) {
 801d2e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d2ec:	f083 0301 	eor.w	r3, r3, #1
 801d2f0:	b2db      	uxtb	r3, r3
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	d003      	beq.n	801d2fe <lv_draw_sw_polygon+0x206>
        lv_mem_buf_release(p);
 801d2f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d2f8:	f006 ff32 	bl	8024160 <lv_mem_buf_release>
        return;
 801d2fc:	e1b5      	b.n	801d66a <lv_draw_sw_polygon+0x572>
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	689b      	ldr	r3, [r3, #8]
 801d302:	633b      	str	r3, [r7, #48]	; 0x30
    draw_ctx->clip_area = &clip_area;
 801d304:	68fb      	ldr	r3, [r7, #12]
 801d306:	f107 0214 	add.w	r2, r7, #20
 801d30a:	609a      	str	r2, [r3, #8]

    /*Find the lowest point*/
    lv_coord_t y_min = p[0].y;
 801d30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d30e:	885b      	ldrh	r3, [r3, #2]
 801d310:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    int16_t y_min_i = 0;
 801d314:	2300      	movs	r3, #0
 801d316:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

    for(i = 1; i < point_cnt; i++) {
 801d31a:	2301      	movs	r3, #1
 801d31c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801d320:	e01b      	b.n	801d35a <lv_draw_sw_polygon+0x262>
        if(p[i].y < y_min) {
 801d322:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801d326:	009b      	lsls	r3, r3, #2
 801d328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d32a:	4413      	add	r3, r2
 801d32c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d330:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801d334:	429a      	cmp	r2, r3
 801d336:	dd0b      	ble.n	801d350 <lv_draw_sw_polygon+0x258>
            y_min = p[i].y;
 801d338:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801d33c:	009b      	lsls	r3, r3, #2
 801d33e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d340:	4413      	add	r3, r2
 801d342:	885b      	ldrh	r3, [r3, #2]
 801d344:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            y_min_i = i;
 801d348:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801d34c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    for(i = 1; i < point_cnt; i++) {
 801d350:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801d354:	3301      	adds	r3, #1
 801d356:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801d35a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 801d35e:	887b      	ldrh	r3, [r7, #2]
 801d360:	429a      	cmp	r2, r3
 801d362:	d3de      	bcc.n	801d322 <lv_draw_sw_polygon+0x22a>
        }
    }

    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 801d364:	887b      	ldrh	r3, [r7, #2]
 801d366:	222c      	movs	r2, #44	; 0x2c
 801d368:	fb02 f303 	mul.w	r3, r2, r3
 801d36c:	4618      	mov	r0, r3
 801d36e:	f006 fe4b 	bl	8024008 <lv_mem_buf_get>
 801d372:	62f8      	str	r0, [r7, #44]	; 0x2c
    lv_draw_mask_line_param_t * mp_next = mp;
 801d374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d376:	657b      	str	r3, [r7, #84]	; 0x54

    int32_t i_prev_left = y_min_i;
 801d378:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801d37c:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t i_prev_right = y_min_i;
 801d37e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801d382:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t i_next_left;
    int32_t i_next_right;
    uint32_t mask_cnt = 0;
 801d384:	2300      	movs	r3, #0
 801d386:	643b      	str	r3, [r7, #64]	; 0x40

    /*Get the index of the left and right points*/
    i_next_left = y_min_i - 1;
 801d388:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801d38c:	3b01      	subs	r3, #1
 801d38e:	64bb      	str	r3, [r7, #72]	; 0x48
    if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 801d390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d392:	2b00      	cmp	r3, #0
 801d394:	da03      	bge.n	801d39e <lv_draw_sw_polygon+0x2a6>
 801d396:	887b      	ldrh	r3, [r7, #2]
 801d398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d39a:	4413      	add	r3, r2
 801d39c:	64bb      	str	r3, [r7, #72]	; 0x48

    i_next_right = y_min_i + 1;
 801d39e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801d3a2:	3301      	adds	r3, #1
 801d3a4:	647b      	str	r3, [r7, #68]	; 0x44
    if(i_next_right > point_cnt - 1) i_next_right = 0;
 801d3a6:	887b      	ldrh	r3, [r7, #2]
 801d3a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d3aa:	429a      	cmp	r2, r3
 801d3ac:	db01      	blt.n	801d3b2 <lv_draw_sw_polygon+0x2ba>
 801d3ae:	2300      	movs	r3, #0
 801d3b0:	647b      	str	r3, [r7, #68]	; 0x44
     * Explanation:
     *   if angle(p_left) < angle(p_right) -> inverted
     *   dy_left/dx_left < dy_right/dx_right
     *   dy_left * dx_right < dy_right * dx_left
     */
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 801d3b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d3b4:	009b      	lsls	r3, r3, #2
 801d3b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d3b8:	4413      	add	r3, r2
 801d3ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d3be:	b29a      	uxth	r2, r3
 801d3c0:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801d3c4:	009b      	lsls	r3, r3, #2
 801d3c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d3c8:	440b      	add	r3, r1
 801d3ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d3ce:	b29b      	uxth	r3, r3
 801d3d0:	1ad3      	subs	r3, r2, r3
 801d3d2:	b29b      	uxth	r3, r3
 801d3d4:	857b      	strh	r3, [r7, #42]	; 0x2a
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 801d3d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d3d8:	009b      	lsls	r3, r3, #2
 801d3da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d3dc:	4413      	add	r3, r2
 801d3de:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d3e2:	b29a      	uxth	r2, r3
 801d3e4:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801d3e8:	009b      	lsls	r3, r3, #2
 801d3ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d3ec:	440b      	add	r3, r1
 801d3ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d3f2:	b29b      	uxth	r3, r3
 801d3f4:	1ad3      	subs	r3, r2, r3
 801d3f6:	b29b      	uxth	r3, r3
 801d3f8:	853b      	strh	r3, [r7, #40]	; 0x28
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 801d3fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d3fc:	009b      	lsls	r3, r3, #2
 801d3fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d400:	4413      	add	r3, r2
 801d402:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d406:	b29a      	uxth	r2, r3
 801d408:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801d40c:	009b      	lsls	r3, r3, #2
 801d40e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d410:	440b      	add	r3, r1
 801d412:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d416:	b29b      	uxth	r3, r3
 801d418:	1ad3      	subs	r3, r2, r3
 801d41a:	b29b      	uxth	r3, r3
 801d41c:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 801d41e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d420:	009b      	lsls	r3, r3, #2
 801d422:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d424:	4413      	add	r3, r2
 801d426:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d42a:	b29a      	uxth	r2, r3
 801d42c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801d430:	009b      	lsls	r3, r3, #2
 801d432:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d434:	440b      	add	r3, r1
 801d436:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d43a:	b29b      	uxth	r3, r3
 801d43c:	1ad3      	subs	r3, r2, r3
 801d43e:	b29b      	uxth	r3, r3
 801d440:	84bb      	strh	r3, [r7, #36]	; 0x24

    bool inv = false;
 801d442:	2300      	movs	r3, #0
 801d444:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if(dyl * dxr < dyr * dxl) inv = true;
 801d448:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801d44c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 801d450:	fb03 f202 	mul.w	r2, r3, r2
 801d454:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801d458:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 801d45c:	fb01 f303 	mul.w	r3, r1, r3
 801d460:	429a      	cmp	r2, r3
 801d462:	da02      	bge.n	801d46a <lv_draw_sw_polygon+0x372>
 801d464:	2301      	movs	r3, #1
 801d466:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    do {
        if(!inv) {
 801d46a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801d46e:	f083 0301 	eor.w	r3, r3, #1
 801d472:	b2db      	uxtb	r3, r3
 801d474:	2b00      	cmp	r3, #0
 801d476:	d015      	beq.n	801d4a4 <lv_draw_sw_polygon+0x3ac>
            i_next_left = i_prev_left - 1;
 801d478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d47a:	3b01      	subs	r3, #1
 801d47c:	64bb      	str	r3, [r7, #72]	; 0x48
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 801d47e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d480:	2b00      	cmp	r3, #0
 801d482:	da03      	bge.n	801d48c <lv_draw_sw_polygon+0x394>
 801d484:	887b      	ldrh	r3, [r7, #2]
 801d486:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d488:	4413      	add	r3, r2
 801d48a:	64bb      	str	r3, [r7, #72]	; 0x48

            i_next_right = i_prev_right + 1;
 801d48c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d48e:	3301      	adds	r3, #1
 801d490:	647b      	str	r3, [r7, #68]	; 0x44
            if(i_next_right > point_cnt - 1) i_next_right = 0;
 801d492:	887b      	ldrh	r3, [r7, #2]
 801d494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d496:	429a      	cmp	r2, r3
 801d498:	db17      	blt.n	801d4ca <lv_draw_sw_polygon+0x3d2>
 801d49a:	2300      	movs	r3, #0
 801d49c:	647b      	str	r3, [r7, #68]	; 0x44
 801d49e:	e014      	b.n	801d4ca <lv_draw_sw_polygon+0x3d2>
 801d4a0:	080288fc 	.word	0x080288fc
        }
        else {
            i_next_left = i_prev_left + 1;
 801d4a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d4a6:	3301      	adds	r3, #1
 801d4a8:	64bb      	str	r3, [r7, #72]	; 0x48
            if(i_next_left > point_cnt - 1) i_next_left = 0;
 801d4aa:	887b      	ldrh	r3, [r7, #2]
 801d4ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d4ae:	429a      	cmp	r2, r3
 801d4b0:	db01      	blt.n	801d4b6 <lv_draw_sw_polygon+0x3be>
 801d4b2:	2300      	movs	r3, #0
 801d4b4:	64bb      	str	r3, [r7, #72]	; 0x48

            i_next_right = i_prev_right - 1;
 801d4b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d4b8:	3b01      	subs	r3, #1
 801d4ba:	647b      	str	r3, [r7, #68]	; 0x44
            if(i_next_right < 0) i_next_right = point_cnt + i_next_right;
 801d4bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	da03      	bge.n	801d4ca <lv_draw_sw_polygon+0x3d2>
 801d4c2:	887b      	ldrh	r3, [r7, #2]
 801d4c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d4c6:	4413      	add	r3, r2
 801d4c8:	647b      	str	r3, [r7, #68]	; 0x44
        }

        if(p[i_next_left].y >= p[i_prev_left].y) {
 801d4ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d4cc:	009b      	lsls	r3, r3, #2
 801d4ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d4d0:	4413      	add	r3, r2
 801d4d2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d4d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d4d8:	009b      	lsls	r3, r3, #2
 801d4da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d4dc:	440b      	add	r3, r1
 801d4de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d4e2:	429a      	cmp	r2, r3
 801d4e4:	db47      	blt.n	801d576 <lv_draw_sw_polygon+0x47e>
            if(p[i_next_left].y != p[i_prev_left].y &&
 801d4e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d4e8:	009b      	lsls	r3, r3, #2
 801d4ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d4ec:	4413      	add	r3, r2
 801d4ee:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d4f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d4f4:	009b      	lsls	r3, r3, #2
 801d4f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d4f8:	440b      	add	r3, r1
 801d4fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d4fe:	429a      	cmp	r2, r3
 801d500:	d034      	beq.n	801d56c <lv_draw_sw_polygon+0x474>
               p[i_next_left].x != p[i_prev_left].x) {
 801d502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d504:	009b      	lsls	r3, r3, #2
 801d506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d508:	4413      	add	r3, r2
 801d50a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d50e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d510:	009b      	lsls	r3, r3, #2
 801d512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d514:	440b      	add	r3, r1
 801d516:	f9b3 3000 	ldrsh.w	r3, [r3]
            if(p[i_next_left].y != p[i_prev_left].y &&
 801d51a:	429a      	cmp	r2, r3
 801d51c:	d026      	beq.n	801d56c <lv_draw_sw_polygon+0x474>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 801d51e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d520:	009b      	lsls	r3, r3, #2
 801d522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d524:	4413      	add	r3, r2
 801d526:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d52a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d52c:	009b      	lsls	r3, r3, #2
 801d52e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d530:	4413      	add	r3, r2
 801d532:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
                                              p[i_next_left].x, p[i_next_left].y,
 801d536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d538:	009b      	lsls	r3, r3, #2
 801d53a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d53c:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 801d53e:	f9b3 4000 	ldrsh.w	r4, [r3]
                                              p[i_next_left].x, p[i_next_left].y,
 801d542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d544:	009b      	lsls	r3, r3, #2
 801d546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d548:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 801d54a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d54e:	2201      	movs	r2, #1
 801d550:	9201      	str	r2, [sp, #4]
 801d552:	9300      	str	r3, [sp, #0]
 801d554:	4623      	mov	r3, r4
 801d556:	4602      	mov	r2, r0
 801d558:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d55a:	f7f6 fbc3 	bl	8013ce4 <lv_draw_mask_line_points_init>
                                              LV_DRAW_MASK_LINE_SIDE_RIGHT);
                lv_draw_mask_add(mp_next, mp);
 801d55e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d560:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d562:	f7f6 fa31 	bl	80139c8 <lv_draw_mask_add>
                mp_next++;
 801d566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d568:	332c      	adds	r3, #44	; 0x2c
 801d56a:	657b      	str	r3, [r7, #84]	; 0x54
            }
            mask_cnt++;
 801d56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d56e:	3301      	adds	r3, #1
 801d570:	643b      	str	r3, [r7, #64]	; 0x40
            i_prev_left = i_next_left;
 801d572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d574:	653b      	str	r3, [r7, #80]	; 0x50
        }

        if(mask_cnt == point_cnt) break;
 801d576:	887b      	ldrh	r3, [r7, #2]
 801d578:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d57a:	429a      	cmp	r2, r3
 801d57c:	d05b      	beq.n	801d636 <lv_draw_sw_polygon+0x53e>

        if(p[i_next_right].y >= p[i_prev_right].y) {
 801d57e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d580:	009b      	lsls	r3, r3, #2
 801d582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d584:	4413      	add	r3, r2
 801d586:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d58a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d58c:	009b      	lsls	r3, r3, #2
 801d58e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d590:	440b      	add	r3, r1
 801d592:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d596:	429a      	cmp	r2, r3
 801d598:	db47      	blt.n	801d62a <lv_draw_sw_polygon+0x532>
            if(p[i_next_right].y != p[i_prev_right].y &&
 801d59a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d59c:	009b      	lsls	r3, r3, #2
 801d59e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d5a0:	4413      	add	r3, r2
 801d5a2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d5a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d5a8:	009b      	lsls	r3, r3, #2
 801d5aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d5ac:	440b      	add	r3, r1
 801d5ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d5b2:	429a      	cmp	r2, r3
 801d5b4:	d034      	beq.n	801d620 <lv_draw_sw_polygon+0x528>
               p[i_next_right].x != p[i_prev_right].x) {
 801d5b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d5b8:	009b      	lsls	r3, r3, #2
 801d5ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d5bc:	4413      	add	r3, r2
 801d5be:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d5c4:	009b      	lsls	r3, r3, #2
 801d5c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d5c8:	440b      	add	r3, r1
 801d5ca:	f9b3 3000 	ldrsh.w	r3, [r3]
            if(p[i_next_right].y != p[i_prev_right].y &&
 801d5ce:	429a      	cmp	r2, r3
 801d5d0:	d026      	beq.n	801d620 <lv_draw_sw_polygon+0x528>

                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 801d5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d5d4:	009b      	lsls	r3, r3, #2
 801d5d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d5d8:	4413      	add	r3, r2
 801d5da:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d5de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d5e0:	009b      	lsls	r3, r3, #2
 801d5e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d5e4:	4413      	add	r3, r2
 801d5e6:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
                                              p[i_next_right].x, p[i_next_right].y,
 801d5ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d5ec:	009b      	lsls	r3, r3, #2
 801d5ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d5f0:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 801d5f2:	f9b3 4000 	ldrsh.w	r4, [r3]
                                              p[i_next_right].x, p[i_next_right].y,
 801d5f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d5f8:	009b      	lsls	r3, r3, #2
 801d5fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d5fc:	4413      	add	r3, r2
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 801d5fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d602:	2200      	movs	r2, #0
 801d604:	9201      	str	r2, [sp, #4]
 801d606:	9300      	str	r3, [sp, #0]
 801d608:	4623      	mov	r3, r4
 801d60a:	4602      	mov	r2, r0
 801d60c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d60e:	f7f6 fb69 	bl	8013ce4 <lv_draw_mask_line_points_init>
                                              LV_DRAW_MASK_LINE_SIDE_LEFT);
                lv_draw_mask_add(mp_next, mp);
 801d612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d614:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d616:	f7f6 f9d7 	bl	80139c8 <lv_draw_mask_add>
                mp_next++;
 801d61a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d61c:	332c      	adds	r3, #44	; 0x2c
 801d61e:	657b      	str	r3, [r7, #84]	; 0x54
            }
            mask_cnt++;
 801d620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d622:	3301      	adds	r3, #1
 801d624:	643b      	str	r3, [r7, #64]	; 0x40
            i_prev_right = i_next_right;
 801d626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d628:	64fb      	str	r3, [r7, #76]	; 0x4c
        }

    } while(mask_cnt < point_cnt);
 801d62a:	887b      	ldrh	r3, [r7, #2]
 801d62c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d62e:	429a      	cmp	r2, r3
 801d630:	f4ff af1b 	bcc.w	801d46a <lv_draw_sw_polygon+0x372>
 801d634:	e000      	b.n	801d638 <lv_draw_sw_polygon+0x540>
        if(mask_cnt == point_cnt) break;
 801d636:	bf00      	nop

    lv_draw_rect(draw_ctx, draw_dsc, &poly_coords);
 801d638:	f107 031c 	add.w	r3, r7, #28
 801d63c:	461a      	mov	r2, r3
 801d63e:	68b9      	ldr	r1, [r7, #8]
 801d640:	68f8      	ldr	r0, [r7, #12]
 801d642:	f7f8 fdcd 	bl	80161e0 <lv_draw_rect>

    lv_draw_mask_remove_custom(mp);
 801d646:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d648:	f7f6 fa5c 	bl	8013b04 <lv_draw_mask_remove_custom>

    lv_mem_buf_release(mp);
 801d64c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d64e:	f006 fd87 	bl	8024160 <lv_mem_buf_release>
    lv_mem_buf_release(p);
 801d652:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d654:	f006 fd84 	bl	8024160 <lv_mem_buf_release>

    draw_ctx->clip_area = clip_area_ori;
 801d658:	68fb      	ldr	r3, [r7, #12]
 801d65a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d65c:	609a      	str	r2, [r3, #8]
 801d65e:	e004      	b.n	801d66a <lv_draw_sw_polygon+0x572>
    if(point_cnt < 3) return;
 801d660:	bf00      	nop
 801d662:	e002      	b.n	801d66a <lv_draw_sw_polygon+0x572>
    if(points == NULL) return;
 801d664:	bf00      	nop
 801d666:	e000      	b.n	801d66a <lv_draw_sw_polygon+0x572>
    if(p == NULL) return;
 801d668:	bf00      	nop
    LV_UNUSED(point_cnt);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(draw_dsc);
    LV_LOG_WARN("Can't draw polygon with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 801d66a:	3764      	adds	r7, #100	; 0x64
 801d66c:	46bd      	mov	sp, r7
 801d66e:	bd90      	pop	{r4, r7, pc}

0801d670 <lv_area_copy>:
{
 801d670:	b480      	push	{r7}
 801d672:	b083      	sub	sp, #12
 801d674:	af00      	add	r7, sp, #0
 801d676:	6078      	str	r0, [r7, #4]
 801d678:	6039      	str	r1, [r7, #0]
    dest->x1 = src->x1;
 801d67a:	683b      	ldr	r3, [r7, #0]
 801d67c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	801a      	strh	r2, [r3, #0]
    dest->y1 = src->y1;
 801d684:	683b      	ldr	r3, [r7, #0]
 801d686:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d68a:	687b      	ldr	r3, [r7, #4]
 801d68c:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801d68e:	683b      	ldr	r3, [r7, #0]
 801d690:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801d694:	687b      	ldr	r3, [r7, #4]
 801d696:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 801d698:	683b      	ldr	r3, [r7, #0]
 801d69a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801d69e:	687b      	ldr	r3, [r7, #4]
 801d6a0:	80da      	strh	r2, [r3, #6]
}
 801d6a2:	bf00      	nop
 801d6a4:	370c      	adds	r7, #12
 801d6a6:	46bd      	mov	sp, r7
 801d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6ac:	4770      	bx	lr

0801d6ae <lv_area_get_width>:
{
 801d6ae:	b480      	push	{r7}
 801d6b0:	b083      	sub	sp, #12
 801d6b2:	af00      	add	r7, sp, #0
 801d6b4:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801d6b6:	687b      	ldr	r3, [r7, #4]
 801d6b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d6bc:	b29a      	uxth	r2, r3
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d6c4:	b29b      	uxth	r3, r3
 801d6c6:	1ad3      	subs	r3, r2, r3
 801d6c8:	b29b      	uxth	r3, r3
 801d6ca:	3301      	adds	r3, #1
 801d6cc:	b29b      	uxth	r3, r3
 801d6ce:	b21b      	sxth	r3, r3
}
 801d6d0:	4618      	mov	r0, r3
 801d6d2:	370c      	adds	r7, #12
 801d6d4:	46bd      	mov	sp, r7
 801d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6da:	4770      	bx	lr

0801d6dc <lv_area_get_height>:
{
 801d6dc:	b480      	push	{r7}
 801d6de:	b083      	sub	sp, #12
 801d6e0:	af00      	add	r7, sp, #0
 801d6e2:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801d6e4:	687b      	ldr	r3, [r7, #4]
 801d6e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d6ea:	b29a      	uxth	r2, r3
 801d6ec:	687b      	ldr	r3, [r7, #4]
 801d6ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d6f2:	b29b      	uxth	r3, r3
 801d6f4:	1ad3      	subs	r3, r2, r3
 801d6f6:	b29b      	uxth	r3, r3
 801d6f8:	3301      	adds	r3, #1
 801d6fa:	b29b      	uxth	r3, r3
 801d6fc:	b21b      	sxth	r3, r3
}
 801d6fe:	4618      	mov	r0, r3
 801d700:	370c      	adds	r7, #12
 801d702:	46bd      	mov	sp, r7
 801d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d708:	4770      	bx	lr

0801d70a <lv_draw_sw_rect>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_sw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801d70a:	b580      	push	{r7, lr}
 801d70c:	b084      	sub	sp, #16
 801d70e:	af00      	add	r7, sp, #0
 801d710:	60f8      	str	r0, [r7, #12]
 801d712:	60b9      	str	r1, [r7, #8]
 801d714:	607a      	str	r2, [r7, #4]
#if LV_DRAW_COMPLEX
    draw_shadow(draw_ctx, dsc, coords);
 801d716:	687a      	ldr	r2, [r7, #4]
 801d718:	68b9      	ldr	r1, [r7, #8]
 801d71a:	68f8      	ldr	r0, [r7, #12]
 801d71c:	f000 fdd1 	bl	801e2c2 <draw_shadow>
#endif

    draw_bg(draw_ctx, dsc, coords);
 801d720:	687a      	ldr	r2, [r7, #4]
 801d722:	68b9      	ldr	r1, [r7, #8]
 801d724:	68f8      	ldr	r0, [r7, #12]
 801d726:	f000 f827 	bl	801d778 <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 801d72a:	687a      	ldr	r2, [r7, #4]
 801d72c:	68b9      	ldr	r1, [r7, #8]
 801d72e:	68f8      	ldr	r0, [r7, #12]
 801d730:	f000 fb1b 	bl	801dd6a <draw_bg_img>

    draw_border(draw_ctx, dsc, coords);
 801d734:	687a      	ldr	r2, [r7, #4]
 801d736:	68b9      	ldr	r1, [r7, #8]
 801d738:	68f8      	ldr	r0, [r7, #12]
 801d73a:	f000 fcd2 	bl	801e0e2 <draw_border>

    draw_outline(draw_ctx, dsc, coords);
 801d73e:	687a      	ldr	r2, [r7, #4]
 801d740:	68b9      	ldr	r1, [r7, #8]
 801d742:	68f8      	ldr	r0, [r7, #12]
 801d744:	f002 fb61 	bl	801fe0a <draw_outline>

    LV_ASSERT_MEM_INTEGRITY();
}
 801d748:	bf00      	nop
 801d74a:	3710      	adds	r7, #16
 801d74c:	46bd      	mov	sp, r7
 801d74e:	bd80      	pop	{r7, pc}

0801d750 <lv_draw_sw_bg>:

void lv_draw_sw_bg(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801d750:	b580      	push	{r7, lr}
 801d752:	b084      	sub	sp, #16
 801d754:	af00      	add	r7, sp, #0
 801d756:	60f8      	str	r0, [r7, #12]
 801d758:	60b9      	str	r1, [r7, #8]
 801d75a:	607a      	str	r2, [r7, #4]
#if LV_COLOR_SCREEN_TRANSP && LV_COLOR_DEPTH == 32
    lv_memset_00(draw_ctx->buf, lv_area_get_size(draw_ctx->buf_area) * sizeof(lv_color_t));
#endif

    draw_bg(draw_ctx, dsc, coords);
 801d75c:	687a      	ldr	r2, [r7, #4]
 801d75e:	68b9      	ldr	r1, [r7, #8]
 801d760:	68f8      	ldr	r0, [r7, #12]
 801d762:	f000 f809 	bl	801d778 <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 801d766:	687a      	ldr	r2, [r7, #4]
 801d768:	68b9      	ldr	r1, [r7, #8]
 801d76a:	68f8      	ldr	r0, [r7, #12]
 801d76c:	f000 fafd 	bl	801dd6a <draw_bg_img>
}
 801d770:	bf00      	nop
 801d772:	3710      	adds	r7, #16
 801d774:	46bd      	mov	sp, r7
 801d776:	bd80      	pop	{r7, pc}

0801d778 <draw_bg>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void draw_bg(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801d778:	b580      	push	{r7, lr}
 801d77a:	b0a6      	sub	sp, #152	; 0x98
 801d77c:	af00      	add	r7, sp, #0
 801d77e:	60f8      	str	r0, [r7, #12]
 801d780:	60b9      	str	r1, [r7, #8]
 801d782:	607a      	str	r2, [r7, #4]
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 801d784:	68bb      	ldr	r3, [r7, #8]
 801d786:	78db      	ldrb	r3, [r3, #3]
 801d788:	2b02      	cmp	r3, #2
 801d78a:	f240 82e8 	bls.w	801dd5e <draw_bg+0x5e6>

    lv_area_t bg_coords;
    lv_area_copy(&bg_coords, coords);
 801d78e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d792:	6879      	ldr	r1, [r7, #4]
 801d794:	4618      	mov	r0, r3
 801d796:	f7ff ff6b 	bl	801d670 <lv_area_copy>

    /*If the border fully covers make the bg area 1px smaller to avoid artifacts on the corners*/
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 801d79a:	68bb      	ldr	r3, [r7, #8]
 801d79c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801d7a0:	2b01      	cmp	r3, #1
 801d7a2:	dd4f      	ble.n	801d844 <draw_bg+0xcc>
 801d7a4:	68bb      	ldr	r3, [r7, #8]
 801d7a6:	7f1b      	ldrb	r3, [r3, #28]
 801d7a8:	2bfc      	cmp	r3, #252	; 0xfc
 801d7aa:	d94b      	bls.n	801d844 <draw_bg+0xcc>
 801d7ac:	68bb      	ldr	r3, [r7, #8]
 801d7ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d7b2:	2b00      	cmp	r3, #0
 801d7b4:	d046      	beq.n	801d844 <draw_bg+0xcc>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 801d7b6:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801d7ba:	b29a      	uxth	r2, r3
 801d7bc:	68bb      	ldr	r3, [r7, #8]
 801d7be:	7f5b      	ldrb	r3, [r3, #29]
 801d7c0:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801d7c4:	b2db      	uxtb	r3, r3
 801d7c6:	109b      	asrs	r3, r3, #2
 801d7c8:	b29b      	uxth	r3, r3
 801d7ca:	f003 0301 	and.w	r3, r3, #1
 801d7ce:	b29b      	uxth	r3, r3
 801d7d0:	4413      	add	r3, r2
 801d7d2:	b29b      	uxth	r3, r3
 801d7d4:	b21b      	sxth	r3, r3
 801d7d6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 801d7da:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801d7de:	b29a      	uxth	r2, r3
 801d7e0:	68bb      	ldr	r3, [r7, #8]
 801d7e2:	7f5b      	ldrb	r3, [r3, #29]
 801d7e4:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801d7e8:	b2db      	uxtb	r3, r3
 801d7ea:	105b      	asrs	r3, r3, #1
 801d7ec:	b29b      	uxth	r3, r3
 801d7ee:	f003 0301 	and.w	r3, r3, #1
 801d7f2:	b29b      	uxth	r3, r3
 801d7f4:	4413      	add	r3, r2
 801d7f6:	b29b      	uxth	r3, r3
 801d7f8:	b21b      	sxth	r3, r3
 801d7fa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 801d7fe:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801d802:	b29a      	uxth	r2, r3
 801d804:	68bb      	ldr	r3, [r7, #8]
 801d806:	7f5b      	ldrb	r3, [r3, #29]
 801d808:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801d80c:	b2db      	uxtb	r3, r3
 801d80e:	10db      	asrs	r3, r3, #3
 801d810:	b29b      	uxth	r3, r3
 801d812:	f003 0301 	and.w	r3, r3, #1
 801d816:	b29b      	uxth	r3, r3
 801d818:	1ad3      	subs	r3, r2, r3
 801d81a:	b29b      	uxth	r3, r3
 801d81c:	b21b      	sxth	r3, r3
 801d81e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 801d822:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801d826:	b29a      	uxth	r2, r3
 801d828:	68bb      	ldr	r3, [r7, #8]
 801d82a:	7f5b      	ldrb	r3, [r3, #29]
 801d82c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801d830:	b2db      	uxtb	r3, r3
 801d832:	b29b      	uxth	r3, r3
 801d834:	f003 0301 	and.w	r3, r3, #1
 801d838:	b29b      	uxth	r3, r3
 801d83a:	1ad3      	subs	r3, r2, r3
 801d83c:	b29b      	uxth	r3, r3
 801d83e:	b21b      	sxth	r3, r3
 801d840:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    }

    lv_area_t clipped_coords;
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 801d844:	68fb      	ldr	r3, [r7, #12]
 801d846:	689a      	ldr	r2, [r3, #8]
 801d848:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801d84c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d850:	4618      	mov	r0, r3
 801d852:	f005 f82f 	bl	80228b4 <_lv_area_intersect>
 801d856:	4603      	mov	r3, r0
 801d858:	f083 0301 	eor.w	r3, r3, #1
 801d85c:	b2db      	uxtb	r3, r3
 801d85e:	2b00      	cmp	r3, #0
 801d860:	f040 827f 	bne.w	801dd62 <draw_bg+0x5ea>

    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 801d864:	68bb      	ldr	r3, [r7, #8]
 801d866:	7a9b      	ldrb	r3, [r3, #10]
 801d868:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801d86c:	b2db      	uxtb	r3, r3
 801d86e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 801d872:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801d876:	2b00      	cmp	r3, #0
 801d878:	d104      	bne.n	801d884 <draw_bg+0x10c>
 801d87a:	68bb      	ldr	r3, [r7, #8]
 801d87c:	791b      	ldrb	r3, [r3, #4]
 801d87e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801d882:	e003      	b.n	801d88c <draw_bg+0x114>
 801d884:	68bb      	ldr	r3, [r7, #8]
 801d886:	795b      	ldrb	r3, [r3, #5]
 801d888:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 801d88c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 801d890:	68bb      	ldr	r3, [r7, #8]
 801d892:	79db      	ldrb	r3, [r3, #7]
 801d894:	429a      	cmp	r2, r3
 801d896:	d102      	bne.n	801d89e <draw_bg+0x126>
 801d898:	2300      	movs	r3, #0
 801d89a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 801d89e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d8a2:	4618      	mov	r0, r3
 801d8a4:	f7f6 f9c0 	bl	8013c28 <lv_draw_mask_is_any>
 801d8a8:	4603      	mov	r3, r0
 801d8aa:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 801d8ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d8b2:	2200      	movs	r2, #0
 801d8b4:	601a      	str	r2, [r3, #0]
 801d8b6:	605a      	str	r2, [r3, #4]
 801d8b8:	609a      	str	r2, [r3, #8]
 801d8ba:	60da      	str	r2, [r3, #12]
 801d8bc:	611a      	str	r2, [r3, #16]
 801d8be:	615a      	str	r2, [r3, #20]
 801d8c0:	619a      	str	r2, [r3, #24]
    blend_dsc.blend_mode = dsc->blend_mode;
 801d8c2:	68bb      	ldr	r3, [r7, #8]
 801d8c4:	789b      	ldrb	r3, [r3, #2]
 801d8c6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    blend_dsc.color = bg_color;
 801d8ca:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801d8ce:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

    /*Most simple case: just a plain rectangle*/
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 801d8d2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801d8d6:	f083 0301 	eor.w	r3, r3, #1
 801d8da:	b2db      	uxtb	r3, r3
 801d8dc:	2b00      	cmp	r3, #0
 801d8de:	d016      	beq.n	801d90e <draw_bg+0x196>
 801d8e0:	68bb      	ldr	r3, [r7, #8]
 801d8e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d111      	bne.n	801d90e <draw_bg+0x196>
 801d8ea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801d8ee:	2b00      	cmp	r3, #0
 801d8f0:	d10d      	bne.n	801d90e <draw_bg+0x196>
        blend_dsc.blend_area = &bg_coords;
 801d8f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d8f6:	63bb      	str	r3, [r7, #56]	; 0x38
        blend_dsc.opa = dsc->bg_opa;
 801d8f8:	68bb      	ldr	r3, [r7, #8]
 801d8fa:	78db      	ldrb	r3, [r3, #3]
 801d8fc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801d900:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d904:	4619      	mov	r1, r3
 801d906:	68f8      	ldr	r0, [r7, #12]
 801d908:	f7fb fc5e 	bl	80191c8 <lv_draw_sw_blend>
        return;
 801d90c:	e22a      	b.n	801dd64 <draw_bg+0x5ec>

    /*Complex case: there is gradient, mask, or radius*/
#if LV_DRAW_COMPLEX == 0
    LV_LOG_WARN("Can't draw complex rectangle because LV_DRAW_COMPLEX = 0");
#else
    lv_opa_t opa = dsc->bg_opa >= LV_OPA_MAX ? LV_OPA_COVER : dsc->bg_opa;
 801d90e:	68bb      	ldr	r3, [r7, #8]
 801d910:	78db      	ldrb	r3, [r3, #3]
 801d912:	2bfc      	cmp	r3, #252	; 0xfc
 801d914:	d802      	bhi.n	801d91c <draw_bg+0x1a4>
 801d916:	68bb      	ldr	r3, [r7, #8]
 801d918:	78db      	ldrb	r3, [r3, #3]
 801d91a:	e000      	b.n	801d91e <draw_bg+0x1a6>
 801d91c:	23ff      	movs	r3, #255	; 0xff
 801d91e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    /*Get the real radius. Can't be larger than the half of the shortest side */
    lv_coord_t coords_bg_w = lv_area_get_width(&bg_coords);
 801d922:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d926:	4618      	mov	r0, r3
 801d928:	f7ff fec1 	bl	801d6ae <lv_area_get_width>
 801d92c:	4603      	mov	r3, r0
 801d92e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    lv_coord_t coords_bg_h = lv_area_get_height(&bg_coords);
 801d932:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d936:	4618      	mov	r0, r3
 801d938:	f7ff fed0 	bl	801d6dc <lv_area_get_height>
 801d93c:	4603      	mov	r3, r0
 801d93e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    int32_t short_side = LV_MIN(coords_bg_w, coords_bg_h);
 801d942:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801d946:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801d94a:	4293      	cmp	r3, r2
 801d94c:	bfa8      	it	ge
 801d94e:	4613      	movge	r3, r2
 801d950:	b21b      	sxth	r3, r3
 801d952:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int32_t rout = LV_MIN(dsc->radius, short_side >> 1);
 801d956:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d95a:	105b      	asrs	r3, r3, #1
 801d95c:	68ba      	ldr	r2, [r7, #8]
 801d95e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801d962:	4293      	cmp	r3, r2
 801d964:	bfa8      	it	ge
 801d966:	4613      	movge	r3, r2
 801d968:	67fb      	str	r3, [r7, #124]	; 0x7c

    /*Add a radius mask if there is radius*/
    int32_t clipped_w = lv_area_get_width(&clipped_coords);
 801d96a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d96e:	4618      	mov	r0, r3
 801d970:	f7ff fe9d 	bl	801d6ae <lv_area_get_width>
 801d974:	4603      	mov	r3, r0
 801d976:	67bb      	str	r3, [r7, #120]	; 0x78
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801d978:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d97c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    lv_opa_t * mask_buf = NULL;
 801d980:	2300      	movs	r3, #0
 801d982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    lv_draw_mask_radius_param_t mask_rout_param;
    if(rout > 0 || mask_any) {
 801d986:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d988:	2b00      	cmp	r3, #0
 801d98a:	dc03      	bgt.n	801d994 <draw_bg+0x21c>
 801d98c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801d990:	2b00      	cmp	r3, #0
 801d992:	d017      	beq.n	801d9c4 <draw_bg+0x24c>
        mask_buf = lv_mem_buf_get(clipped_w);
 801d994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d996:	4618      	mov	r0, r3
 801d998:	f006 fb36 	bl	8024008 <lv_mem_buf_get>
 801d99c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 801d9a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d9a2:	b21a      	sxth	r2, r3
 801d9a4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801d9a8:	f107 0020 	add.w	r0, r7, #32
 801d9ac:	2300      	movs	r3, #0
 801d9ae:	f7f6 fbd7 	bl	8014160 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801d9b2:	f107 0320 	add.w	r3, r7, #32
 801d9b6:	2100      	movs	r1, #0
 801d9b8:	4618      	mov	r0, r3
 801d9ba:	f7f6 f805 	bl	80139c8 <lv_draw_mask_add>
 801d9be:	4603      	mov	r3, r0
 801d9c0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    }

    int32_t h;

    lv_area_t blend_area;
    blend_area.x1 = clipped_coords.x1;
 801d9c4:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801d9c8:	833b      	strh	r3, [r7, #24]
    blend_area.x2 = clipped_coords.x2;
 801d9ca:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801d9ce:	83bb      	strh	r3, [r7, #28]

    blend_dsc.mask_buf = mask_buf;
 801d9d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d9d4:	647b      	str	r3, [r7, #68]	; 0x44
    blend_dsc.blend_area = &blend_area;
 801d9d6:	f107 0318 	add.w	r3, r7, #24
 801d9da:	63bb      	str	r3, [r7, #56]	; 0x38
    blend_dsc.mask_area = &blend_area;
 801d9dc:	f107 0318 	add.w	r3, r7, #24
 801d9e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    blend_dsc.opa = LV_OPA_COVER;
 801d9e2:	23ff      	movs	r3, #255	; 0xff
 801d9e4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50


    /*Get gradient if appropriate*/
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 801d9e8:	68bb      	ldr	r3, [r7, #8]
 801d9ea:	3305      	adds	r3, #5
 801d9ec:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801d9f0:	f9b7 1088 	ldrsh.w	r1, [r7, #136]	; 0x88
 801d9f4:	4618      	mov	r0, r3
 801d9f6:	f7fc fff7 	bl	801a9e8 <lv_gradient_get>
 801d9fa:	6778      	str	r0, [r7, #116]	; 0x74
    if(grad && grad_dir == LV_GRAD_DIR_HOR) {
 801d9fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	d00d      	beq.n	801da1e <draw_bg+0x2a6>
 801da02:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801da06:	2b02      	cmp	r3, #2
 801da08:	d109      	bne.n	801da1e <draw_bg+0x2a6>
        blend_dsc.src_buf = grad->map + clipped_coords.x1 - bg_coords.x1;
 801da0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801da0c:	689a      	ldr	r2, [r3, #8]
 801da0e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 801da12:	4619      	mov	r1, r3
 801da14:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801da18:	1acb      	subs	r3, r1, r3
 801da1a:	4413      	add	r3, r2
 801da1c:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
#endif
#endif

    /*There is another mask too. Draw line by line. */
    if(mask_any) {
 801da1e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 801da22:	2b00      	cmp	r3, #0
 801da24:	d04c      	beq.n	801dac0 <draw_bg+0x348>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 801da26:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801da2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801da2e:	e03f      	b.n	801dab0 <draw_bg+0x338>
            blend_area.y1 = h;
 801da30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801da34:	b21b      	sxth	r3, r3
 801da36:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = h;
 801da38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801da3c:	b21b      	sxth	r3, r3
 801da3e:	83fb      	strh	r3, [r7, #30]

            /* Initialize the mask to opa instead of 0xFF and blend with LV_OPA_COVER.
             * It saves calculating the final opa in lv_draw_sw_blend*/
            lv_memset(mask_buf, opa, clipped_w);
 801da40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801da42:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801da46:	4619      	mov	r1, r3
 801da48:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801da4c:	f006 fdf8 	bl	8024640 <lv_memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 801da50:	f9b7 1058 	ldrsh.w	r1, [r7, #88]	; 0x58
 801da54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801da58:	b21a      	sxth	r2, r3
 801da5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801da5c:	b21b      	sxth	r3, r3
 801da5e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801da62:	f7f5 ffe3 	bl	8013a2c <lv_draw_mask_apply>
 801da66:	4603      	mov	r3, r0
 801da68:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801da6c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801da70:	2b01      	cmp	r3, #1
 801da72:	d102      	bne.n	801da7a <draw_bg+0x302>
 801da74:	2302      	movs	r3, #2
 801da76:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  h - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 801da7a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801da7e:	2b01      	cmp	r3, #1
 801da80:	d10b      	bne.n	801da9a <draw_bg+0x322>
 801da82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801da84:	689b      	ldr	r3, [r3, #8]
 801da86:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 801da8a:	4611      	mov	r1, r2
 801da8c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801da90:	1a52      	subs	r2, r2, r1
 801da92:	4413      	add	r3, r2
 801da94:	781b      	ldrb	r3, [r3, #0]
 801da96:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801da9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801da9e:	4619      	mov	r1, r3
 801daa0:	68f8      	ldr	r0, [r7, #12]
 801daa2:	f7fb fb91 	bl	80191c8 <lv_draw_sw_blend>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 801daa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801daaa:	3301      	adds	r3, #1
 801daac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801dab0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801dab4:	461a      	mov	r2, r3
 801dab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801daba:	4293      	cmp	r3, r2
 801dabc:	ddb8      	ble.n	801da30 <draw_bg+0x2b8>
        }
        goto bg_clean_up;
 801dabe:	e130      	b.n	801dd22 <draw_bg+0x5aa>
    }


    /* Draw the top of the rectangle line by line and mirror it to the bottom. */
    for(h = 0; h < rout; h++) {
 801dac0:	2300      	movs	r3, #0
 801dac2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801dac6:	e084      	b.n	801dbd2 <draw_bg+0x45a>
        lv_coord_t top_y = bg_coords.y1 + h;
 801dac8:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801dacc:	b29a      	uxth	r2, r3
 801dace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801dad2:	b29b      	uxth	r3, r3
 801dad4:	4413      	add	r3, r2
 801dad6:	b29b      	uxth	r3, r3
 801dad8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        lv_coord_t bottom_y = bg_coords.y2 - h;
 801dadc:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801dae0:	b29a      	uxth	r2, r3
 801dae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801dae6:	b29b      	uxth	r3, r3
 801dae8:	1ad3      	subs	r3, r2, r3
 801daea:	b29b      	uxth	r3, r3
 801daec:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 801daf0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801daf4:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801daf8:	429a      	cmp	r2, r3
 801dafa:	da05      	bge.n	801db08 <draw_bg+0x390>
 801dafc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801db00:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801db04:	429a      	cmp	r2, r3
 801db06:	dc5e      	bgt.n	801dbc6 <draw_bg+0x44e>

        /* Initialize the mask to opa instead of 0xFF and blend with LV_OPA_COVER.
         * It saves calculating the final opa in lv_draw_sw_blend*/
        lv_memset(mask_buf, opa, clipped_w);
 801db08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801db0a:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801db0e:	4619      	mov	r1, r3
 801db10:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801db14:	f006 fd94 	bl	8024640 <lv_memset>
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 801db18:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 801db1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801db1e:	b21b      	sxth	r3, r3
 801db20:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801db24:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801db28:	f7f5 ff80 	bl	8013a2c <lv_draw_mask_apply>
 801db2c:	4603      	mov	r3, r0
 801db2e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801db32:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801db36:	2b01      	cmp	r3, #1
 801db38:	d102      	bne.n	801db40 <draw_bg+0x3c8>
 801db3a:	2302      	movs	r3, #2
 801db3c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

        if(top_y >= clipped_coords.y1) {
 801db40:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 801db44:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801db48:	429a      	cmp	r2, r3
 801db4a:	db1a      	blt.n	801db82 <draw_bg+0x40a>
            blend_area.y1 = top_y;
 801db4c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801db50:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = top_y;
 801db52:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 801db56:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  top_y - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 801db58:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801db5c:	2b01      	cmp	r3, #1
 801db5e:	d10a      	bne.n	801db76 <draw_bg+0x3fe>
 801db60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801db62:	689b      	ldr	r3, [r3, #8]
 801db64:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 801db68:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 801db6c:	1a52      	subs	r2, r2, r1
 801db6e:	4413      	add	r3, r2
 801db70:	781b      	ldrb	r3, [r3, #0]
 801db72:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801db76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801db7a:	4619      	mov	r1, r3
 801db7c:	68f8      	ldr	r0, [r7, #12]
 801db7e:	f7fb fb23 	bl	80191c8 <lv_draw_sw_blend>
        }

        if(bottom_y <= clipped_coords.y2) {
 801db82:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801db86:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801db8a:	429a      	cmp	r2, r3
 801db8c:	dc1c      	bgt.n	801dbc8 <draw_bg+0x450>
            blend_area.y1 = bottom_y;
 801db8e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801db92:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = bottom_y;
 801db94:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801db98:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  bottom_y - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[bottom_y - bg_coords.y1];
 801db9a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801db9e:	2b01      	cmp	r3, #1
 801dba0:	d10a      	bne.n	801dbb8 <draw_bg+0x440>
 801dba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dba4:	689b      	ldr	r3, [r3, #8]
 801dba6:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 801dbaa:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 801dbae:	1a52      	subs	r2, r2, r1
 801dbb0:	4413      	add	r3, r2
 801dbb2:	781b      	ldrb	r3, [r3, #0]
 801dbb4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801dbb8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dbbc:	4619      	mov	r1, r3
 801dbbe:	68f8      	ldr	r0, [r7, #12]
 801dbc0:	f7fb fb02 	bl	80191c8 <lv_draw_sw_blend>
 801dbc4:	e000      	b.n	801dbc8 <draw_bg+0x450>
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 801dbc6:	bf00      	nop
    for(h = 0; h < rout; h++) {
 801dbc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801dbcc:	3301      	adds	r3, #1
 801dbce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801dbd2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801dbd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801dbd8:	429a      	cmp	r2, r3
 801dbda:	f6ff af75 	blt.w	801dac8 <draw_bg+0x350>

    /* Draw the center of the rectangle.*/

    /*If no other masks and no gradient, the center is a simple rectangle*/
    lv_area_t center_coords;
    center_coords.x1 = bg_coords.x1;
 801dbde:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 801dbe2:	823b      	strh	r3, [r7, #16]
    center_coords.x2 = bg_coords.x2;
 801dbe4:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801dbe8:	82bb      	strh	r3, [r7, #20]
    center_coords.y1 = bg_coords.y1 + rout;
 801dbea:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801dbee:	b29a      	uxth	r2, r3
 801dbf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801dbf2:	b29b      	uxth	r3, r3
 801dbf4:	4413      	add	r3, r2
 801dbf6:	b29b      	uxth	r3, r3
 801dbf8:	b21b      	sxth	r3, r3
 801dbfa:	827b      	strh	r3, [r7, #18]
    center_coords.y2 = bg_coords.y2 - rout;
 801dbfc:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801dc00:	b29a      	uxth	r2, r3
 801dc02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801dc04:	b29b      	uxth	r3, r3
 801dc06:	1ad3      	subs	r3, r2, r3
 801dc08:	b29b      	uxth	r3, r3
 801dc0a:	b21b      	sxth	r3, r3
 801dc0c:	82fb      	strh	r3, [r7, #22]
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 801dc0e:	f107 0310 	add.w	r3, r7, #16
 801dc12:	4618      	mov	r0, r3
 801dc14:	f7f6 f808 	bl	8013c28 <lv_draw_mask_is_any>
 801dc18:	4603      	mov	r3, r0
 801dc1a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if(!mask_any_center && grad_dir == LV_GRAD_DIR_NONE) {
 801dc1e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801dc22:	f083 0301 	eor.w	r3, r3, #1
 801dc26:	b2db      	uxtb	r3, r3
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	d022      	beq.n	801dc72 <draw_bg+0x4fa>
 801dc2c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	d11e      	bne.n	801dc72 <draw_bg+0x4fa>
        blend_area.y1 = bg_coords.y1 + rout;
 801dc34:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801dc38:	b29a      	uxth	r2, r3
 801dc3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801dc3c:	b29b      	uxth	r3, r3
 801dc3e:	4413      	add	r3, r2
 801dc40:	b29b      	uxth	r3, r3
 801dc42:	b21b      	sxth	r3, r3
 801dc44:	837b      	strh	r3, [r7, #26]
        blend_area.y2 = bg_coords.y2 - rout;
 801dc46:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801dc4a:	b29a      	uxth	r2, r3
 801dc4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801dc4e:	b29b      	uxth	r3, r3
 801dc50:	1ad3      	subs	r3, r2, r3
 801dc52:	b29b      	uxth	r3, r3
 801dc54:	b21b      	sxth	r3, r3
 801dc56:	83fb      	strh	r3, [r7, #30]
        blend_dsc.opa = opa;
 801dc58:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801dc5c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        blend_dsc.mask_buf = NULL;
 801dc60:	2300      	movs	r3, #0
 801dc62:	647b      	str	r3, [r7, #68]	; 0x44
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801dc64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dc68:	4619      	mov	r1, r3
 801dc6a:	68f8      	ldr	r0, [r7, #12]
 801dc6c:	f7fb faac 	bl	80191c8 <lv_draw_sw_blend>
 801dc70:	e057      	b.n	801dd22 <draw_bg+0x5aa>
    }
    /*With gradient and/or mask draw line by line*/
    else {
        blend_dsc.opa = opa;
 801dc72:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801dc76:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801dc7a:	2301      	movs	r3, #1
 801dc7c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        int32_t h_end = bg_coords.y2 - rout;
 801dc80:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801dc84:	461a      	mov	r2, r3
 801dc86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801dc88:	1ad3      	subs	r3, r2, r3
 801dc8a:	66fb      	str	r3, [r7, #108]	; 0x6c
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 801dc8c:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801dc90:	461a      	mov	r2, r3
 801dc92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801dc94:	4413      	add	r3, r2
 801dc96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801dc9a:	e03c      	b.n	801dd16 <draw_bg+0x59e>
            /*If there is no other mask do not apply mask as in the center there is no radius to mask*/
            if(mask_any_center) {
 801dc9c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	d015      	beq.n	801dcd0 <draw_bg+0x558>
                lv_memset(mask_buf, opa, clipped_w);
 801dca4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801dca6:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 801dcaa:	4619      	mov	r1, r3
 801dcac:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801dcb0:	f006 fcc6 	bl	8024640 <lv_memset>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 801dcb4:	f9b7 1058 	ldrsh.w	r1, [r7, #88]	; 0x58
 801dcb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801dcbc:	b21a      	sxth	r2, r3
 801dcbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801dcc0:	b21b      	sxth	r3, r3
 801dcc2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801dcc6:	f7f5 feb1 	bl	8013a2c <lv_draw_mask_apply>
 801dcca:	4603      	mov	r3, r0
 801dccc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            }

            blend_area.y1 = h;
 801dcd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801dcd4:	b21b      	sxth	r3, r3
 801dcd6:	837b      	strh	r3, [r7, #26]
            blend_area.y2 = h;
 801dcd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801dcdc:	b21b      	sxth	r3, r3
 801dcde:	83fb      	strh	r3, [r7, #30]

#if _DITHER_GRADIENT
            if(dither_func) dither_func(grad, blend_area.x1,  h - bg_coords.y1, grad_size);
#endif
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 801dce0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801dce4:	2b01      	cmp	r3, #1
 801dce6:	d10b      	bne.n	801dd00 <draw_bg+0x588>
 801dce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dcea:	689b      	ldr	r3, [r3, #8]
 801dcec:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 801dcf0:	4611      	mov	r1, r2
 801dcf2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801dcf6:	1a52      	subs	r2, r2, r1
 801dcf8:	4413      	add	r3, r2
 801dcfa:	781b      	ldrb	r3, [r3, #0]
 801dcfc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801dd00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801dd04:	4619      	mov	r1, r3
 801dd06:	68f8      	ldr	r0, [r7, #12]
 801dd08:	f7fb fa5e 	bl	80191c8 <lv_draw_sw_blend>
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 801dd0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801dd10:	3301      	adds	r3, #1
 801dd12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801dd16:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801dd1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dd1c:	429a      	cmp	r2, r3
 801dd1e:	ddbd      	ble.n	801dc9c <draw_bg+0x524>
        }
    }


bg_clean_up:
 801dd20:	bf00      	nop
    if(mask_buf) lv_mem_buf_release(mask_buf);
 801dd22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801dd26:	2b00      	cmp	r3, #0
 801dd28:	d003      	beq.n	801dd32 <draw_bg+0x5ba>
 801dd2a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801dd2e:	f006 fa17 	bl	8024160 <lv_mem_buf_release>
    if(mask_rout_id != LV_MASK_ID_INV) {
 801dd32:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801dd36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801dd3a:	d009      	beq.n	801dd50 <draw_bg+0x5d8>
        lv_draw_mask_remove_id(mask_rout_id);
 801dd3c:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 801dd40:	4618      	mov	r0, r3
 801dd42:	f7f5 feb7 	bl	8013ab4 <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_rout_param);
 801dd46:	f107 0320 	add.w	r3, r7, #32
 801dd4a:	4618      	mov	r0, r3
 801dd4c:	f7f5 ff02 	bl	8013b54 <lv_draw_mask_free_param>
    }
    if(grad) {
 801dd50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dd52:	2b00      	cmp	r3, #0
 801dd54:	d006      	beq.n	801dd64 <draw_bg+0x5ec>
        lv_gradient_cleanup(grad);
 801dd56:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801dd58:	f7fc ffb4 	bl	801acc4 <lv_gradient_cleanup>
 801dd5c:	e002      	b.n	801dd64 <draw_bg+0x5ec>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 801dd5e:	bf00      	nop
 801dd60:	e000      	b.n	801dd64 <draw_bg+0x5ec>
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 801dd62:	bf00      	nop
    }

#endif
}
 801dd64:	3798      	adds	r7, #152	; 0x98
 801dd66:	46bd      	mov	sp, r7
 801dd68:	bd80      	pop	{r7, pc}

0801dd6a <draw_bg_img>:

static void draw_bg_img(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801dd6a:	b590      	push	{r4, r7, lr}
 801dd6c:	b0a3      	sub	sp, #140	; 0x8c
 801dd6e:	af04      	add	r7, sp, #16
 801dd70:	60f8      	str	r0, [r7, #12]
 801dd72:	60b9      	str	r1, [r7, #8]
 801dd74:	607a      	str	r2, [r7, #4]
    if(dsc->bg_img_src == NULL) return;
 801dd76:	68bb      	ldr	r3, [r7, #8]
 801dd78:	68db      	ldr	r3, [r3, #12]
 801dd7a:	2b00      	cmp	r3, #0
 801dd7c:	f000 81a9 	beq.w	801e0d2 <draw_bg_img+0x368>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 801dd80:	68bb      	ldr	r3, [r7, #8]
 801dd82:	7d5b      	ldrb	r3, [r3, #21]
 801dd84:	2b02      	cmp	r3, #2
 801dd86:	f240 81a6 	bls.w	801e0d6 <draw_bg_img+0x36c>

    lv_area_t clip_area;
    if(!_lv_area_intersect(&clip_area, coords, draw_ctx->clip_area)) {
 801dd8a:	68fb      	ldr	r3, [r7, #12]
 801dd8c:	689a      	ldr	r2, [r3, #8]
 801dd8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801dd92:	6879      	ldr	r1, [r7, #4]
 801dd94:	4618      	mov	r0, r3
 801dd96:	f004 fd8d 	bl	80228b4 <_lv_area_intersect>
 801dd9a:	4603      	mov	r3, r0
 801dd9c:	f083 0301 	eor.w	r3, r3, #1
 801dda0:	b2db      	uxtb	r3, r3
 801dda2:	2b00      	cmp	r3, #0
 801dda4:	f040 8199 	bne.w	801e0da <draw_bg_img+0x370>
        return;
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801dda8:	68fb      	ldr	r3, [r7, #12]
 801ddaa:	689b      	ldr	r3, [r3, #8]
 801ddac:	677b      	str	r3, [r7, #116]	; 0x74
    draw_ctx->clip_area = &clip_area;
 801ddae:	68fb      	ldr	r3, [r7, #12]
 801ddb0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801ddb4:	609a      	str	r2, [r3, #8]

    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 801ddb6:	68bb      	ldr	r3, [r7, #8]
 801ddb8:	68db      	ldr	r3, [r3, #12]
 801ddba:	4618      	mov	r0, r3
 801ddbc:	f7f4 fb5f 	bl	801247e <lv_img_src_get_type>
 801ddc0:	4603      	mov	r3, r0
 801ddc2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    if(src_type == LV_IMG_SRC_SYMBOL) {
 801ddc6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801ddca:	2b02      	cmp	r3, #2
 801ddcc:	d17f      	bne.n	801dece <draw_bg_img+0x164>
        lv_point_t size;
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801ddce:	68bb      	ldr	r3, [r7, #8]
 801ddd0:	68d9      	ldr	r1, [r3, #12]
 801ddd2:	68bb      	ldr	r3, [r7, #8]
 801ddd4:	691a      	ldr	r2, [r3, #16]
 801ddd6:	f107 0064 	add.w	r0, r7, #100	; 0x64
 801ddda:	2300      	movs	r3, #0
 801dddc:	9302      	str	r3, [sp, #8]
 801ddde:	f641 73ff 	movw	r3, #8191	; 0x1fff
 801dde2:	9301      	str	r3, [sp, #4]
 801dde4:	2300      	movs	r3, #0
 801dde6:	9300      	str	r3, [sp, #0]
 801dde8:	2300      	movs	r3, #0
 801ddea:	f008 faf5 	bl	80263d8 <lv_txt_get_size>
        lv_area_t a;
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 801ddee:	687b      	ldr	r3, [r7, #4]
 801ddf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ddf4:	b29c      	uxth	r4, r3
 801ddf6:	6878      	ldr	r0, [r7, #4]
 801ddf8:	f7ff fc59 	bl	801d6ae <lv_area_get_width>
 801ddfc:	4603      	mov	r3, r0
 801ddfe:	2b00      	cmp	r3, #0
 801de00:	da00      	bge.n	801de04 <draw_bg_img+0x9a>
 801de02:	3301      	adds	r3, #1
 801de04:	105b      	asrs	r3, r3, #1
 801de06:	b21b      	sxth	r3, r3
 801de08:	b29b      	uxth	r3, r3
 801de0a:	4423      	add	r3, r4
 801de0c:	b29a      	uxth	r2, r3
 801de0e:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801de12:	2b00      	cmp	r3, #0
 801de14:	da00      	bge.n	801de18 <draw_bg_img+0xae>
 801de16:	3301      	adds	r3, #1
 801de18:	105b      	asrs	r3, r3, #1
 801de1a:	b21b      	sxth	r3, r3
 801de1c:	b29b      	uxth	r3, r3
 801de1e:	1ad3      	subs	r3, r2, r3
 801de20:	b29b      	uxth	r3, r3
 801de22:	b21b      	sxth	r3, r3
 801de24:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
        a.x2 = a.x1 + size.x - 1;
 801de28:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 801de2c:	b29a      	uxth	r2, r3
 801de2e:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 801de32:	b29b      	uxth	r3, r3
 801de34:	4413      	add	r3, r2
 801de36:	b29b      	uxth	r3, r3
 801de38:	3b01      	subs	r3, #1
 801de3a:	b29b      	uxth	r3, r3
 801de3c:	b21b      	sxth	r3, r3
 801de3e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 801de42:	687b      	ldr	r3, [r7, #4]
 801de44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801de48:	b29c      	uxth	r4, r3
 801de4a:	6878      	ldr	r0, [r7, #4]
 801de4c:	f7ff fc46 	bl	801d6dc <lv_area_get_height>
 801de50:	4603      	mov	r3, r0
 801de52:	2b00      	cmp	r3, #0
 801de54:	da00      	bge.n	801de58 <draw_bg_img+0xee>
 801de56:	3301      	adds	r3, #1
 801de58:	105b      	asrs	r3, r3, #1
 801de5a:	b21b      	sxth	r3, r3
 801de5c:	b29b      	uxth	r3, r3
 801de5e:	4423      	add	r3, r4
 801de60:	b29a      	uxth	r2, r3
 801de62:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801de66:	2b00      	cmp	r3, #0
 801de68:	da00      	bge.n	801de6c <draw_bg_img+0x102>
 801de6a:	3301      	adds	r3, #1
 801de6c:	105b      	asrs	r3, r3, #1
 801de6e:	b21b      	sxth	r3, r3
 801de70:	b29b      	uxth	r3, r3
 801de72:	1ad3      	subs	r3, r2, r3
 801de74:	b29b      	uxth	r3, r3
 801de76:	b21b      	sxth	r3, r3
 801de78:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        a.y2 = a.y1 + size.y - 1;
 801de7c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 801de80:	b29a      	uxth	r2, r3
 801de82:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 801de86:	b29b      	uxth	r3, r3
 801de88:	4413      	add	r3, r2
 801de8a:	b29b      	uxth	r3, r3
 801de8c:	3b01      	subs	r3, #1
 801de8e:	b29b      	uxth	r3, r3
 801de90:	b21b      	sxth	r3, r3
 801de92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        lv_draw_label_dsc_t label_draw_dsc;
        lv_draw_label_dsc_init(&label_draw_dsc);
 801de96:	f107 0314 	add.w	r3, r7, #20
 801de9a:	4618      	mov	r0, r3
 801de9c:	f7f4 fd9e 	bl	80129dc <lv_draw_label_dsc_init>
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 801dea0:	68bb      	ldr	r3, [r7, #8]
 801dea2:	691b      	ldr	r3, [r3, #16]
 801dea4:	617b      	str	r3, [r7, #20]
        label_draw_dsc.color = dsc->bg_img_recolor;
 801dea6:	68bb      	ldr	r3, [r7, #8]
 801dea8:	7d1b      	ldrb	r3, [r3, #20]
 801deaa:	f887 3020 	strb.w	r3, [r7, #32]
        label_draw_dsc.opa = dsc->bg_img_opa;
 801deae:	68bb      	ldr	r3, [r7, #8]
 801deb0:	7d5b      	ldrb	r3, [r3, #21]
 801deb2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 801deb6:	68bb      	ldr	r3, [r7, #8]
 801deb8:	68db      	ldr	r3, [r3, #12]
 801deba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801debe:	f107 0114 	add.w	r1, r7, #20
 801dec2:	2000      	movs	r0, #0
 801dec4:	9000      	str	r0, [sp, #0]
 801dec6:	68f8      	ldr	r0, [r7, #12]
 801dec8:	f7f4 fdb4 	bl	8012a34 <lv_draw_label>
 801decc:	e0fd      	b.n	801e0ca <draw_bg_img+0x360>
    }
    else {
        lv_img_header_t header;
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 801dece:	68bb      	ldr	r3, [r7, #8]
 801ded0:	68db      	ldr	r3, [r3, #12]
 801ded2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801ded6:	4611      	mov	r1, r2
 801ded8:	4618      	mov	r0, r3
 801deda:	f7f8 fb49 	bl	8016570 <lv_img_decoder_get_info>
 801dede:	4603      	mov	r3, r0
 801dee0:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
        if(res == LV_RES_OK) {
 801dee4:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 801dee8:	2b01      	cmp	r3, #1
 801deea:	f040 80ee 	bne.w	801e0ca <draw_bg_img+0x360>
            lv_draw_img_dsc_t img_dsc;
            lv_draw_img_dsc_init(&img_dsc);
 801deee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801def2:	4618      	mov	r0, r3
 801def4:	f7f4 f9df 	bl	80122b6 <lv_draw_img_dsc_init>
            img_dsc.blend_mode = dsc->blend_mode;
 801def8:	68bb      	ldr	r3, [r7, #8]
 801defa:	789b      	ldrb	r3, [r3, #2]
 801defc:	f003 030f 	and.w	r3, r3, #15
 801df00:	b2da      	uxtb	r2, r3
 801df02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801df06:	f362 0303 	bfi	r3, r2, #0, #4
 801df0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            img_dsc.recolor = dsc->bg_img_recolor;
 801df0e:	68bb      	ldr	r3, [r7, #8]
 801df10:	7d1b      	ldrb	r3, [r3, #20]
 801df12:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 801df16:	68bb      	ldr	r3, [r7, #8]
 801df18:	7d9b      	ldrb	r3, [r3, #22]
 801df1a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            img_dsc.opa = dsc->bg_img_opa;
 801df1e:	68bb      	ldr	r3, [r7, #8]
 801df20:	7d5b      	ldrb	r3, [r3, #21]
 801df22:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

            /*Center align*/
            if(dsc->bg_img_tiled == false) {
 801df26:	68bb      	ldr	r3, [r7, #8]
 801df28:	7ddb      	ldrb	r3, [r3, #23]
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	d163      	bne.n	801dff6 <draw_bg_img+0x28c>
                lv_area_t area;
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 801df2e:	687b      	ldr	r3, [r7, #4]
 801df30:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df34:	b29c      	uxth	r4, r3
 801df36:	6878      	ldr	r0, [r7, #4]
 801df38:	f7ff fbb9 	bl	801d6ae <lv_area_get_width>
 801df3c:	4603      	mov	r3, r0
 801df3e:	2b00      	cmp	r3, #0
 801df40:	da00      	bge.n	801df44 <draw_bg_img+0x1da>
 801df42:	3301      	adds	r3, #1
 801df44:	105b      	asrs	r3, r3, #1
 801df46:	b21b      	sxth	r3, r3
 801df48:	b29b      	uxth	r3, r3
 801df4a:	4423      	add	r3, r4
 801df4c:	b29a      	uxth	r2, r3
 801df4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801df50:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801df54:	b29b      	uxth	r3, r3
 801df56:	2b00      	cmp	r3, #0
 801df58:	da00      	bge.n	801df5c <draw_bg_img+0x1f2>
 801df5a:	3301      	adds	r3, #1
 801df5c:	105b      	asrs	r3, r3, #1
 801df5e:	425b      	negs	r3, r3
 801df60:	b29b      	uxth	r3, r3
 801df62:	4413      	add	r3, r2
 801df64:	b29b      	uxth	r3, r3
 801df66:	b21b      	sxth	r3, r3
 801df68:	87bb      	strh	r3, [r7, #60]	; 0x3c
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801df70:	b29c      	uxth	r4, r3
 801df72:	6878      	ldr	r0, [r7, #4]
 801df74:	f7ff fbb2 	bl	801d6dc <lv_area_get_height>
 801df78:	4603      	mov	r3, r0
 801df7a:	2b00      	cmp	r3, #0
 801df7c:	da00      	bge.n	801df80 <draw_bg_img+0x216>
 801df7e:	3301      	adds	r3, #1
 801df80:	105b      	asrs	r3, r3, #1
 801df82:	b21b      	sxth	r3, r3
 801df84:	b29b      	uxth	r3, r3
 801df86:	4423      	add	r3, r4
 801df88:	b29a      	uxth	r2, r3
 801df8a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801df8e:	f3c3 134a 	ubfx	r3, r3, #5, #11
 801df92:	b29b      	uxth	r3, r3
 801df94:	2b00      	cmp	r3, #0
 801df96:	da00      	bge.n	801df9a <draw_bg_img+0x230>
 801df98:	3301      	adds	r3, #1
 801df9a:	105b      	asrs	r3, r3, #1
 801df9c:	425b      	negs	r3, r3
 801df9e:	b29b      	uxth	r3, r3
 801dfa0:	4413      	add	r3, r2
 801dfa2:	b29b      	uxth	r3, r3
 801dfa4:	b21b      	sxth	r3, r3
 801dfa6:	87fb      	strh	r3, [r7, #62]	; 0x3e
                area.x2 = area.x1 + header.w - 1;
 801dfa8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 801dfac:	b29b      	uxth	r3, r3
 801dfae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801dfb0:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801dfb4:	b292      	uxth	r2, r2
 801dfb6:	4413      	add	r3, r2
 801dfb8:	b29b      	uxth	r3, r3
 801dfba:	3b01      	subs	r3, #1
 801dfbc:	b29b      	uxth	r3, r3
 801dfbe:	b21b      	sxth	r3, r3
 801dfc0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                area.y2 = area.y1 + header.h - 1;
 801dfc4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801dfc8:	b29b      	uxth	r3, r3
 801dfca:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801dfce:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801dfd2:	b292      	uxth	r2, r2
 801dfd4:	4413      	add	r3, r2
 801dfd6:	b29b      	uxth	r3, r3
 801dfd8:	3b01      	subs	r3, #1
 801dfda:	b29b      	uxth	r3, r3
 801dfdc:	b21b      	sxth	r3, r3
 801dfde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 801dfe2:	68bb      	ldr	r3, [r7, #8]
 801dfe4:	68db      	ldr	r3, [r3, #12]
 801dfe6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801dfea:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801dfee:	68f8      	ldr	r0, [r7, #12]
 801dff0:	f7f4 f97e 	bl	80122f0 <lv_draw_img>
 801dff4:	e069      	b.n	801e0ca <draw_bg_img+0x360>
            }
            else {
                lv_area_t area;
                area.y1 = coords->y1;
 801dff6:	687b      	ldr	r3, [r7, #4]
 801dff8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801dffc:	86fb      	strh	r3, [r7, #54]	; 0x36
                area.y2 = area.y1 + header.h - 1;
 801dffe:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801e002:	b29b      	uxth	r3, r3
 801e004:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801e008:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801e00c:	b292      	uxth	r2, r2
 801e00e:	4413      	add	r3, r2
 801e010:	b29b      	uxth	r3, r3
 801e012:	3b01      	subs	r3, #1
 801e014:	b29b      	uxth	r3, r3
 801e016:	b21b      	sxth	r3, r3
 801e018:	877b      	strh	r3, [r7, #58]	; 0x3a

                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 801e01a:	e04f      	b.n	801e0bc <draw_bg_img+0x352>

                    area.x1 = coords->x1;
 801e01c:	687b      	ldr	r3, [r7, #4]
 801e01e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e022:	86bb      	strh	r3, [r7, #52]	; 0x34
                    area.x2 = area.x1 + header.w - 1;
 801e024:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801e028:	b29b      	uxth	r3, r3
 801e02a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e02c:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801e030:	b292      	uxth	r2, r2
 801e032:	4413      	add	r3, r2
 801e034:	b29b      	uxth	r3, r3
 801e036:	3b01      	subs	r3, #1
 801e038:	b29b      	uxth	r3, r3
 801e03a:	b21b      	sxth	r3, r3
 801e03c:	873b      	strh	r3, [r7, #56]	; 0x38
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 801e03e:	e01e      	b.n	801e07e <draw_bg_img+0x314>
                        lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 801e040:	68bb      	ldr	r3, [r7, #8]
 801e042:	68db      	ldr	r3, [r3, #12]
 801e044:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801e048:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801e04c:	68f8      	ldr	r0, [r7, #12]
 801e04e:	f7f4 f94f 	bl	80122f0 <lv_draw_img>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 801e052:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801e056:	b29b      	uxth	r3, r3
 801e058:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e05a:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801e05e:	b292      	uxth	r2, r2
 801e060:	4413      	add	r3, r2
 801e062:	b29b      	uxth	r3, r3
 801e064:	b21b      	sxth	r3, r3
 801e066:	86bb      	strh	r3, [r7, #52]	; 0x34
 801e068:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801e06c:	b29b      	uxth	r3, r3
 801e06e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e070:	f3c2 228a 	ubfx	r2, r2, #10, #11
 801e074:	b292      	uxth	r2, r2
 801e076:	4413      	add	r3, r2
 801e078:	b29b      	uxth	r3, r3
 801e07a:	b21b      	sxth	r3, r3
 801e07c:	873b      	strh	r3, [r7, #56]	; 0x38
 801e07e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 801e082:	687b      	ldr	r3, [r7, #4]
 801e084:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e088:	429a      	cmp	r2, r3
 801e08a:	ddd9      	ble.n	801e040 <draw_bg_img+0x2d6>
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 801e08c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801e090:	b29b      	uxth	r3, r3
 801e092:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801e096:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801e09a:	b292      	uxth	r2, r2
 801e09c:	4413      	add	r3, r2
 801e09e:	b29b      	uxth	r3, r3
 801e0a0:	b21b      	sxth	r3, r3
 801e0a2:	86fb      	strh	r3, [r7, #54]	; 0x36
 801e0a4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801e0a8:	b29b      	uxth	r3, r3
 801e0aa:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 801e0ae:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801e0b2:	b292      	uxth	r2, r2
 801e0b4:	4413      	add	r3, r2
 801e0b6:	b29b      	uxth	r3, r3
 801e0b8:	b21b      	sxth	r3, r3
 801e0ba:	877b      	strh	r3, [r7, #58]	; 0x3a
 801e0bc:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 801e0c0:	687b      	ldr	r3, [r7, #4]
 801e0c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e0c6:	429a      	cmp	r2, r3
 801e0c8:	dda8      	ble.n	801e01c <draw_bg_img+0x2b2>
        else {
            LV_LOG_WARN("Couldn't read the background image");
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 801e0ca:	68fb      	ldr	r3, [r7, #12]
 801e0cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801e0ce:	609a      	str	r2, [r3, #8]
 801e0d0:	e004      	b.n	801e0dc <draw_bg_img+0x372>
    if(dsc->bg_img_src == NULL) return;
 801e0d2:	bf00      	nop
 801e0d4:	e002      	b.n	801e0dc <draw_bg_img+0x372>
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 801e0d6:	bf00      	nop
 801e0d8:	e000      	b.n	801e0dc <draw_bg_img+0x372>
        return;
 801e0da:	bf00      	nop
}
 801e0dc:	377c      	adds	r7, #124	; 0x7c
 801e0de:	46bd      	mov	sp, r7
 801e0e0:	bd90      	pop	{r4, r7, pc}

0801e0e2 <draw_border>:

static void draw_border(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801e0e2:	b580      	push	{r7, lr}
 801e0e4:	b090      	sub	sp, #64	; 0x40
 801e0e6:	af04      	add	r7, sp, #16
 801e0e8:	60f8      	str	r0, [r7, #12]
 801e0ea:	60b9      	str	r1, [r7, #8]
 801e0ec:	607a      	str	r2, [r7, #4]
    if(dsc->border_opa <= LV_OPA_MIN) return;
 801e0ee:	68bb      	ldr	r3, [r7, #8]
 801e0f0:	7f1b      	ldrb	r3, [r3, #28]
 801e0f2:	2b02      	cmp	r3, #2
 801e0f4:	f240 80db 	bls.w	801e2ae <draw_border+0x1cc>
    if(dsc->border_width == 0) return;
 801e0f8:	68bb      	ldr	r3, [r7, #8]
 801e0fa:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801e0fe:	2b00      	cmp	r3, #0
 801e100:	f000 80d7 	beq.w	801e2b2 <draw_border+0x1d0>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 801e104:	68bb      	ldr	r3, [r7, #8]
 801e106:	7f5b      	ldrb	r3, [r3, #29]
 801e108:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801e10c:	b2db      	uxtb	r3, r3
 801e10e:	2b00      	cmp	r3, #0
 801e110:	f000 80d1 	beq.w	801e2b6 <draw_border+0x1d4>
    if(dsc->border_post) return;
 801e114:	68bb      	ldr	r3, [r7, #8]
 801e116:	7f5b      	ldrb	r3, [r3, #29]
 801e118:	f003 0301 	and.w	r3, r3, #1
 801e11c:	b2db      	uxtb	r3, r3
 801e11e:	2b00      	cmp	r3, #0
 801e120:	f040 80cb 	bne.w	801e2ba <draw_border+0x1d8>

    int32_t coords_w = lv_area_get_width(coords);
 801e124:	6878      	ldr	r0, [r7, #4]
 801e126:	f7ff fac2 	bl	801d6ae <lv_area_get_width>
 801e12a:	4603      	mov	r3, r0
 801e12c:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t coords_h = lv_area_get_height(coords);
 801e12e:	6878      	ldr	r0, [r7, #4]
 801e130:	f7ff fad4 	bl	801d6dc <lv_area_get_height>
 801e134:	4603      	mov	r3, r0
 801e136:	623b      	str	r3, [r7, #32]
    int32_t rout = dsc->radius;
 801e138:	68bb      	ldr	r3, [r7, #8]
 801e13a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e13e:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t short_side = LV_MIN(coords_w, coords_h);
 801e140:	6a3a      	ldr	r2, [r7, #32]
 801e142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e144:	4293      	cmp	r3, r2
 801e146:	bfa8      	it	ge
 801e148:	4613      	movge	r3, r2
 801e14a:	61fb      	str	r3, [r7, #28]
    if(rout > short_side >> 1) rout = short_side >> 1;
 801e14c:	69fb      	ldr	r3, [r7, #28]
 801e14e:	105b      	asrs	r3, r3, #1
 801e150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e152:	429a      	cmp	r2, r3
 801e154:	dd02      	ble.n	801e15c <draw_border+0x7a>
 801e156:	69fb      	ldr	r3, [r7, #28]
 801e158:	105b      	asrs	r3, r3, #1
 801e15a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Get the inner area*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 801e15c:	f107 0314 	add.w	r3, r7, #20
 801e160:	6879      	ldr	r1, [r7, #4]
 801e162:	4618      	mov	r0, r3
 801e164:	f7ff fa84 	bl	801d670 <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 801e168:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801e16c:	b29a      	uxth	r2, r3
 801e16e:	68bb      	ldr	r3, [r7, #8]
 801e170:	7f5b      	ldrb	r3, [r3, #29]
 801e172:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801e176:	b2db      	uxtb	r3, r3
 801e178:	f003 0304 	and.w	r3, r3, #4
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	d004      	beq.n	801e18a <draw_border+0xa8>
 801e180:	68bb      	ldr	r3, [r7, #8]
 801e182:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801e186:	b29b      	uxth	r3, r3
 801e188:	e009      	b.n	801e19e <draw_border+0xbc>
 801e18a:	68bb      	ldr	r3, [r7, #8]
 801e18c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801e190:	b299      	uxth	r1, r3
 801e192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e194:	b29b      	uxth	r3, r3
 801e196:	440b      	add	r3, r1
 801e198:	b29b      	uxth	r3, r3
 801e19a:	425b      	negs	r3, r3
 801e19c:	b29b      	uxth	r3, r3
 801e19e:	4413      	add	r3, r2
 801e1a0:	b29b      	uxth	r3, r3
 801e1a2:	b21b      	sxth	r3, r3
 801e1a4:	82bb      	strh	r3, [r7, #20]
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 801e1a6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801e1aa:	b29a      	uxth	r2, r3
 801e1ac:	68bb      	ldr	r3, [r7, #8]
 801e1ae:	7f5b      	ldrb	r3, [r3, #29]
 801e1b0:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801e1b4:	b2db      	uxtb	r3, r3
 801e1b6:	f003 0308 	and.w	r3, r3, #8
 801e1ba:	2b00      	cmp	r3, #0
 801e1bc:	d004      	beq.n	801e1c8 <draw_border+0xe6>
 801e1be:	68bb      	ldr	r3, [r7, #8]
 801e1c0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801e1c4:	b29b      	uxth	r3, r3
 801e1c6:	e009      	b.n	801e1dc <draw_border+0xfa>
 801e1c8:	68bb      	ldr	r3, [r7, #8]
 801e1ca:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801e1ce:	b299      	uxth	r1, r3
 801e1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e1d2:	b29b      	uxth	r3, r3
 801e1d4:	440b      	add	r3, r1
 801e1d6:	b29b      	uxth	r3, r3
 801e1d8:	425b      	negs	r3, r3
 801e1da:	b29b      	uxth	r3, r3
 801e1dc:	1ad3      	subs	r3, r2, r3
 801e1de:	b29b      	uxth	r3, r3
 801e1e0:	b21b      	sxth	r3, r3
 801e1e2:	833b      	strh	r3, [r7, #24]
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 801e1e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e1e8:	b29a      	uxth	r2, r3
 801e1ea:	68bb      	ldr	r3, [r7, #8]
 801e1ec:	7f5b      	ldrb	r3, [r3, #29]
 801e1ee:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801e1f2:	b2db      	uxtb	r3, r3
 801e1f4:	f003 0302 	and.w	r3, r3, #2
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	d004      	beq.n	801e206 <draw_border+0x124>
 801e1fc:	68bb      	ldr	r3, [r7, #8]
 801e1fe:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801e202:	b29b      	uxth	r3, r3
 801e204:	e009      	b.n	801e21a <draw_border+0x138>
 801e206:	68bb      	ldr	r3, [r7, #8]
 801e208:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801e20c:	b299      	uxth	r1, r3
 801e20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e210:	b29b      	uxth	r3, r3
 801e212:	440b      	add	r3, r1
 801e214:	b29b      	uxth	r3, r3
 801e216:	425b      	negs	r3, r3
 801e218:	b29b      	uxth	r3, r3
 801e21a:	4413      	add	r3, r2
 801e21c:	b29b      	uxth	r3, r3
 801e21e:	b21b      	sxth	r3, r3
 801e220:	82fb      	strh	r3, [r7, #22]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 801e222:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801e226:	b29a      	uxth	r2, r3
 801e228:	68bb      	ldr	r3, [r7, #8]
 801e22a:	7f5b      	ldrb	r3, [r3, #29]
 801e22c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 801e230:	b2db      	uxtb	r3, r3
 801e232:	f003 0301 	and.w	r3, r3, #1
 801e236:	2b00      	cmp	r3, #0
 801e238:	d004      	beq.n	801e244 <draw_border+0x162>
 801e23a:	68bb      	ldr	r3, [r7, #8]
 801e23c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801e240:	b29b      	uxth	r3, r3
 801e242:	e009      	b.n	801e258 <draw_border+0x176>
 801e244:	68bb      	ldr	r3, [r7, #8]
 801e246:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801e24a:	b299      	uxth	r1, r3
 801e24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e24e:	b29b      	uxth	r3, r3
 801e250:	440b      	add	r3, r1
 801e252:	b29b      	uxth	r3, r3
 801e254:	425b      	negs	r3, r3
 801e256:	b29b      	uxth	r3, r3
 801e258:	1ad3      	subs	r3, r2, r3
 801e25a:	b29b      	uxth	r3, r3
 801e25c:	b21b      	sxth	r3, r3
 801e25e:	837b      	strh	r3, [r7, #26]

    lv_coord_t rin = rout - dsc->border_width;
 801e260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e262:	b29a      	uxth	r2, r3
 801e264:	68bb      	ldr	r3, [r7, #8]
 801e266:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801e26a:	b29b      	uxth	r3, r3
 801e26c:	1ad3      	subs	r3, r2, r3
 801e26e:	b29b      	uxth	r3, r3
 801e270:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(rin < 0) rin = 0;
 801e272:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801e276:	2b00      	cmp	r3, #0
 801e278:	da01      	bge.n	801e27e <draw_border+0x19c>
 801e27a:	2300      	movs	r3, #0
 801e27c:	857b      	strh	r3, [r7, #42]	; 0x2a

    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 801e27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e280:	b218      	sxth	r0, r3
 801e282:	68bb      	ldr	r3, [r7, #8]
 801e284:	7f1b      	ldrb	r3, [r3, #28]
 801e286:	68ba      	ldr	r2, [r7, #8]
 801e288:	7892      	ldrb	r2, [r2, #2]
 801e28a:	f107 0114 	add.w	r1, r7, #20
 801e28e:	9203      	str	r2, [sp, #12]
 801e290:	9302      	str	r3, [sp, #8]
 801e292:	68bb      	ldr	r3, [r7, #8]
 801e294:	7e1b      	ldrb	r3, [r3, #24]
 801e296:	f88d 3004 	strb.w	r3, [sp, #4]
 801e29a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 801e29e:	9300      	str	r3, [sp, #0]
 801e2a0:	4603      	mov	r3, r0
 801e2a2:	460a      	mov	r2, r1
 801e2a4:	6879      	ldr	r1, [r7, #4]
 801e2a6:	68f8      	ldr	r0, [r7, #12]
 801e2a8:	f001 fe78 	bl	801ff9c <draw_border_generic>
 801e2ac:	e006      	b.n	801e2bc <draw_border+0x1da>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 801e2ae:	bf00      	nop
 801e2b0:	e004      	b.n	801e2bc <draw_border+0x1da>
    if(dsc->border_width == 0) return;
 801e2b2:	bf00      	nop
 801e2b4:	e002      	b.n	801e2bc <draw_border+0x1da>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 801e2b6:	bf00      	nop
 801e2b8:	e000      	b.n	801e2bc <draw_border+0x1da>
    if(dsc->border_post) return;
 801e2ba:	bf00      	nop

}
 801e2bc:	3730      	adds	r7, #48	; 0x30
 801e2be:	46bd      	mov	sp, r7
 801e2c0:	bd80      	pop	{r7, pc}

0801e2c2 <draw_shadow>:

#if LV_DRAW_COMPLEX
LV_ATTRIBUTE_FAST_MEM static void draw_shadow(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc,
                                              const lv_area_t * coords)
{
 801e2c2:	b590      	push	{r4, r7, lr}
 801e2c4:	b0b3      	sub	sp, #204	; 0xcc
 801e2c6:	af00      	add	r7, sp, #0
 801e2c8:	60f8      	str	r0, [r7, #12]
 801e2ca:	60b9      	str	r1, [r7, #8]
 801e2cc:	607a      	str	r2, [r7, #4]
    /*Check whether the shadow is visible*/
    if(dsc->shadow_width == 0) return;
 801e2ce:	68bb      	ldr	r3, [r7, #8]
 801e2d0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801e2d4:	2b00      	cmp	r3, #0
 801e2d6:	f001 82ab 	beq.w	801f830 <draw_shadow+0x156e>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 801e2da:	68bb      	ldr	r3, [r7, #8]
 801e2dc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801e2e0:	2b02      	cmp	r3, #2
 801e2e2:	f241 82a7 	bls.w	801f834 <draw_shadow+0x1572>

    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 801e2e6:	68bb      	ldr	r3, [r7, #8]
 801e2e8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801e2ec:	2b01      	cmp	r3, #1
 801e2ee:	d10f      	bne.n	801e310 <draw_shadow+0x4e>
 801e2f0:	68bb      	ldr	r3, [r7, #8]
 801e2f2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801e2f6:	2b00      	cmp	r3, #0
 801e2f8:	dc0a      	bgt.n	801e310 <draw_shadow+0x4e>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 801e2fa:	68bb      	ldr	r3, [r7, #8]
 801e2fc:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 801e300:	2b00      	cmp	r3, #0
 801e302:	d105      	bne.n	801e310 <draw_shadow+0x4e>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 801e304:	68bb      	ldr	r3, [r7, #8]
 801e306:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801e30a:	2b00      	cmp	r3, #0
 801e30c:	f001 8294 	beq.w	801f838 <draw_shadow+0x1576>
        return;
    }

    /*Calculate the rectangle which is blurred to get the shadow in `shadow_area`*/
    lv_area_t core_area;
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 801e310:	687b      	ldr	r3, [r7, #4]
 801e312:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e316:	b29a      	uxth	r2, r3
 801e318:	68bb      	ldr	r3, [r7, #8]
 801e31a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801e31e:	b29b      	uxth	r3, r3
 801e320:	4413      	add	r3, r2
 801e322:	b29a      	uxth	r2, r3
 801e324:	68bb      	ldr	r3, [r7, #8]
 801e326:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801e32a:	b29b      	uxth	r3, r3
 801e32c:	1ad3      	subs	r3, r2, r3
 801e32e:	b29b      	uxth	r3, r3
 801e330:	b21b      	sxth	r3, r3
 801e332:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 801e336:	687b      	ldr	r3, [r7, #4]
 801e338:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e33c:	b29a      	uxth	r2, r3
 801e33e:	68bb      	ldr	r3, [r7, #8]
 801e340:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 801e344:	b29b      	uxth	r3, r3
 801e346:	4413      	add	r3, r2
 801e348:	b29a      	uxth	r2, r3
 801e34a:	68bb      	ldr	r3, [r7, #8]
 801e34c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801e350:	b29b      	uxth	r3, r3
 801e352:	4413      	add	r3, r2
 801e354:	b29b      	uxth	r3, r3
 801e356:	b21b      	sxth	r3, r3
 801e358:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 801e35c:	687b      	ldr	r3, [r7, #4]
 801e35e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e362:	b29a      	uxth	r2, r3
 801e364:	68bb      	ldr	r3, [r7, #8]
 801e366:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801e36a:	b29b      	uxth	r3, r3
 801e36c:	4413      	add	r3, r2
 801e36e:	b29a      	uxth	r2, r3
 801e370:	68bb      	ldr	r3, [r7, #8]
 801e372:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801e376:	b29b      	uxth	r3, r3
 801e378:	1ad3      	subs	r3, r2, r3
 801e37a:	b29b      	uxth	r3, r3
 801e37c:	b21b      	sxth	r3, r3
 801e37e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 801e382:	687b      	ldr	r3, [r7, #4]
 801e384:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801e388:	b29a      	uxth	r2, r3
 801e38a:	68bb      	ldr	r3, [r7, #8]
 801e38c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801e390:	b29b      	uxth	r3, r3
 801e392:	4413      	add	r3, r2
 801e394:	b29a      	uxth	r2, r3
 801e396:	68bb      	ldr	r3, [r7, #8]
 801e398:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801e39c:	b29b      	uxth	r3, r3
 801e39e:	4413      	add	r3, r2
 801e3a0:	b29b      	uxth	r3, r3
 801e3a2:	b21b      	sxth	r3, r3
 801e3a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

    /*Calculate the bounding box of the shadow*/
    lv_area_t shadow_area;
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 801e3a8:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 801e3ac:	b29a      	uxth	r2, r3
 801e3ae:	68bb      	ldr	r3, [r7, #8]
 801e3b0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	da00      	bge.n	801e3ba <draw_shadow+0xf8>
 801e3b8:	3301      	adds	r3, #1
 801e3ba:	105b      	asrs	r3, r3, #1
 801e3bc:	b21b      	sxth	r3, r3
 801e3be:	b29b      	uxth	r3, r3
 801e3c0:	1ad3      	subs	r3, r2, r3
 801e3c2:	b29b      	uxth	r3, r3
 801e3c4:	3b01      	subs	r3, #1
 801e3c6:	b29b      	uxth	r3, r3
 801e3c8:	b21b      	sxth	r3, r3
 801e3ca:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 801e3ce:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 801e3d2:	b29a      	uxth	r2, r3
 801e3d4:	68bb      	ldr	r3, [r7, #8]
 801e3d6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801e3da:	2b00      	cmp	r3, #0
 801e3dc:	da00      	bge.n	801e3e0 <draw_shadow+0x11e>
 801e3de:	3301      	adds	r3, #1
 801e3e0:	105b      	asrs	r3, r3, #1
 801e3e2:	b21b      	sxth	r3, r3
 801e3e4:	b29b      	uxth	r3, r3
 801e3e6:	4413      	add	r3, r2
 801e3e8:	b29b      	uxth	r3, r3
 801e3ea:	3301      	adds	r3, #1
 801e3ec:	b29b      	uxth	r3, r3
 801e3ee:	b21b      	sxth	r3, r3
 801e3f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 801e3f4:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 801e3f8:	b29a      	uxth	r2, r3
 801e3fa:	68bb      	ldr	r3, [r7, #8]
 801e3fc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801e400:	2b00      	cmp	r3, #0
 801e402:	da00      	bge.n	801e406 <draw_shadow+0x144>
 801e404:	3301      	adds	r3, #1
 801e406:	105b      	asrs	r3, r3, #1
 801e408:	b21b      	sxth	r3, r3
 801e40a:	b29b      	uxth	r3, r3
 801e40c:	1ad3      	subs	r3, r2, r3
 801e40e:	b29b      	uxth	r3, r3
 801e410:	3b01      	subs	r3, #1
 801e412:	b29b      	uxth	r3, r3
 801e414:	b21b      	sxth	r3, r3
 801e416:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
 801e41a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 801e41e:	b29a      	uxth	r2, r3
 801e420:	68bb      	ldr	r3, [r7, #8]
 801e422:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801e426:	2b00      	cmp	r3, #0
 801e428:	da00      	bge.n	801e42c <draw_shadow+0x16a>
 801e42a:	3301      	adds	r3, #1
 801e42c:	105b      	asrs	r3, r3, #1
 801e42e:	b21b      	sxth	r3, r3
 801e430:	b29b      	uxth	r3, r3
 801e432:	4413      	add	r3, r2
 801e434:	b29b      	uxth	r3, r3
 801e436:	3301      	adds	r3, #1
 801e438:	b29b      	uxth	r3, r3
 801e43a:	b21b      	sxth	r3, r3
 801e43c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    lv_opa_t opa = dsc->shadow_opa;
 801e440:	68bb      	ldr	r3, [r7, #8]
 801e442:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801e446:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801e44a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801e44e:	2bfd      	cmp	r3, #253	; 0xfd
 801e450:	d902      	bls.n	801e458 <draw_shadow+0x196>
 801e452:	23ff      	movs	r3, #255	; 0xff
 801e454:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

    /*Get clipped draw area which is the real draw area.
     *It is always the same or inside `shadow_area`*/
    lv_area_t draw_area;
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 801e458:	68fb      	ldr	r3, [r7, #12]
 801e45a:	689a      	ldr	r2, [r3, #8]
 801e45c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801e460:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801e464:	4618      	mov	r0, r3
 801e466:	f004 fa25 	bl	80228b4 <_lv_area_intersect>
 801e46a:	4603      	mov	r3, r0
 801e46c:	f083 0301 	eor.w	r3, r3, #1
 801e470:	b2db      	uxtb	r3, r3
 801e472:	2b00      	cmp	r3, #0
 801e474:	f041 81e2 	bne.w	801f83c <draw_shadow+0x157a>

    /*Consider 1 px smaller bg to be sure the edge will be covered by the shadow*/
    lv_area_t bg_area;
    lv_area_copy(&bg_area, coords);
 801e478:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e47c:	6879      	ldr	r1, [r7, #4]
 801e47e:	4618      	mov	r0, r3
 801e480:	f7ff f8f6 	bl	801d670 <lv_area_copy>
    lv_area_increase(&bg_area, -1, -1);
 801e484:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e48c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801e490:	4618      	mov	r0, r3
 801e492:	f004 f9a3 	bl	80227dc <lv_area_increase>

    /*Get the clamped radius*/
    int32_t r_bg = dsc->radius;
 801e496:	68bb      	ldr	r3, [r7, #8]
 801e498:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e49c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    lv_coord_t short_side = LV_MIN(lv_area_get_width(&bg_area), lv_area_get_height(&bg_area));
 801e4a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e4a4:	4618      	mov	r0, r3
 801e4a6:	f7ff f902 	bl	801d6ae <lv_area_get_width>
 801e4aa:	4603      	mov	r3, r0
 801e4ac:	461c      	mov	r4, r3
 801e4ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e4b2:	4618      	mov	r0, r3
 801e4b4:	f7ff f912 	bl	801d6dc <lv_area_get_height>
 801e4b8:	4603      	mov	r3, r0
 801e4ba:	429c      	cmp	r4, r3
 801e4bc:	da06      	bge.n	801e4cc <draw_shadow+0x20a>
 801e4be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e4c2:	4618      	mov	r0, r3
 801e4c4:	f7ff f8f3 	bl	801d6ae <lv_area_get_width>
 801e4c8:	4603      	mov	r3, r0
 801e4ca:	e005      	b.n	801e4d8 <draw_shadow+0x216>
 801e4cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e4d0:	4618      	mov	r0, r3
 801e4d2:	f7ff f903 	bl	801d6dc <lv_area_get_height>
 801e4d6:	4603      	mov	r3, r0
 801e4d8:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 801e4dc:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801e4e0:	105b      	asrs	r3, r3, #1
 801e4e2:	b21b      	sxth	r3, r3
 801e4e4:	461a      	mov	r2, r3
 801e4e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e4ea:	4293      	cmp	r3, r2
 801e4ec:	dd05      	ble.n	801e4fa <draw_shadow+0x238>
 801e4ee:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801e4f2:	105b      	asrs	r3, r3, #1
 801e4f4:	b21b      	sxth	r3, r3
 801e4f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    /*Get the clamped radius*/
    int32_t r_sh = dsc->radius;
 801e4fa:	68bb      	ldr	r3, [r7, #8]
 801e4fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e500:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    short_side = LV_MIN(lv_area_get_width(&core_area), lv_area_get_height(&core_area));
 801e504:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e508:	4618      	mov	r0, r3
 801e50a:	f7ff f8d0 	bl	801d6ae <lv_area_get_width>
 801e50e:	4603      	mov	r3, r0
 801e510:	461c      	mov	r4, r3
 801e512:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e516:	4618      	mov	r0, r3
 801e518:	f7ff f8e0 	bl	801d6dc <lv_area_get_height>
 801e51c:	4603      	mov	r3, r0
 801e51e:	429c      	cmp	r4, r3
 801e520:	da06      	bge.n	801e530 <draw_shadow+0x26e>
 801e522:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e526:	4618      	mov	r0, r3
 801e528:	f7ff f8c1 	bl	801d6ae <lv_area_get_width>
 801e52c:	4603      	mov	r3, r0
 801e52e:	e005      	b.n	801e53c <draw_shadow+0x27a>
 801e530:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801e534:	4618      	mov	r0, r3
 801e536:	f7ff f8d1 	bl	801d6dc <lv_area_get_height>
 801e53a:	4603      	mov	r3, r0
 801e53c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 801e540:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801e544:	105b      	asrs	r3, r3, #1
 801e546:	b21b      	sxth	r3, r3
 801e548:	461a      	mov	r2, r3
 801e54a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e54e:	4293      	cmp	r3, r2
 801e550:	dd05      	ble.n	801e55e <draw_shadow+0x29c>
 801e552:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 801e556:	105b      	asrs	r3, r3, #1
 801e558:	b21b      	sxth	r3, r3
 801e55a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc


    /*Get how many pixels are affected by the blur on the corners*/
    int32_t corner_size = dsc->shadow_width  + r_sh;
 801e55e:	68bb      	ldr	r3, [r7, #8]
 801e560:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 801e564:	461a      	mov	r2, r3
 801e566:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e56a:	4413      	add	r3, r2
 801e56c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            sh_cache_size = corner_size;
            sh_cache_r = r_sh;
        }
    }
#else
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 801e570:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e574:	fb03 f303 	mul.w	r3, r3, r3
 801e578:	005b      	lsls	r3, r3, #1
 801e57a:	4618      	mov	r0, r3
 801e57c:	f005 fd44 	bl	8024008 <lv_mem_buf_get>
 801e580:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    shadow_draw_corner_buf(&core_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 801e584:	68bb      	ldr	r3, [r7, #8]
 801e586:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 801e58a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e58e:	b21b      	sxth	r3, r3
 801e590:	f107 0070 	add.w	r0, r7, #112	; 0x70
 801e594:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801e598:	f001 f954 	bl	801f844 <shadow_draw_corner_buf>
#endif

    /*Skip a lot of masking if the background will cover the shadow that would be masked out*/
    bool mask_any = lv_draw_mask_is_any(&shadow_area);
 801e59c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e5a0:	4618      	mov	r0, r3
 801e5a2:	f7f5 fb41 	bl	8013c28 <lv_draw_mask_is_any>
 801e5a6:	4603      	mov	r3, r0
 801e5a8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    bool simple = true;
 801e5ac:	2301      	movs	r3, #1
 801e5ae:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 801e5b2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801e5b6:	2b00      	cmp	r3, #0
 801e5b8:	d107      	bne.n	801e5ca <draw_shadow+0x308>
 801e5ba:	68bb      	ldr	r3, [r7, #8]
 801e5bc:	78db      	ldrb	r3, [r3, #3]
 801e5be:	2bff      	cmp	r3, #255	; 0xff
 801e5c0:	d103      	bne.n	801e5ca <draw_shadow+0x308>
 801e5c2:	68bb      	ldr	r3, [r7, #8]
 801e5c4:	789b      	ldrb	r3, [r3, #2]
 801e5c6:	2b00      	cmp	r3, #0
 801e5c8:	d002      	beq.n	801e5d0 <draw_shadow+0x30e>
 801e5ca:	2300      	movs	r3, #0
 801e5cc:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb

    /*Create a radius mask to clip remove shadow on the bg area*/

    lv_draw_mask_radius_param_t mask_rout_param;
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801e5d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e5d4:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
    if(!simple) {
 801e5d8:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801e5dc:	f083 0301 	eor.w	r3, r3, #1
 801e5e0:	b2db      	uxtb	r3, r3
 801e5e2:	2b00      	cmp	r3, #0
 801e5e4:	d012      	beq.n	801e60c <draw_shadow+0x34a>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_area, r_bg, true);
 801e5e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e5ea:	b21a      	sxth	r2, r3
 801e5ec:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801e5f0:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801e5f4:	2301      	movs	r3, #1
 801e5f6:	f7f5 fdb3 	bl	8014160 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801e5fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e5fe:	2100      	movs	r1, #0
 801e600:	4618      	mov	r0, r3
 801e602:	f7f5 f9e1 	bl	80139c8 <lv_draw_mask_add>
 801e606:	4603      	mov	r3, r0
 801e608:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
    }
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&shadow_area));
 801e60c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e610:	4618      	mov	r0, r3
 801e612:	f7ff f84c 	bl	801d6ae <lv_area_get_width>
 801e616:	4603      	mov	r3, r0
 801e618:	4618      	mov	r0, r3
 801e61a:	f005 fcf5 	bl	8024008 <lv_mem_buf_get>
 801e61e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    lv_opa_t * sh_buf_tmp;
    lv_coord_t y;
    bool simple_sub;

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 801e622:	f107 0314 	add.w	r3, r7, #20
 801e626:	211c      	movs	r1, #28
 801e628:	4618      	mov	r0, r3
 801e62a:	f006 f897 	bl	802475c <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801e62e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e632:	617b      	str	r3, [r7, #20]
    blend_dsc.mask_area = &blend_area;
 801e634:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e638:	62bb      	str	r3, [r7, #40]	; 0x28
    blend_dsc.mask_buf = mask_buf;
 801e63a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e63e:	623b      	str	r3, [r7, #32]
    blend_dsc.color = dsc->shadow_color;
 801e640:	68bb      	ldr	r3, [r7, #8]
 801e642:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801e646:	773b      	strb	r3, [r7, #28]
    blend_dsc.opa = dsc->shadow_opa;
 801e648:	68bb      	ldr	r3, [r7, #8]
 801e64a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801e64e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    blend_dsc.blend_mode = dsc->blend_mode;
 801e652:	68bb      	ldr	r3, [r7, #8]
 801e654:	789b      	ldrb	r3, [r3, #2]
 801e656:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 801e65a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801e65e:	b29c      	uxth	r4, r3
 801e660:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e664:	4618      	mov	r0, r3
 801e666:	f7ff f822 	bl	801d6ae <lv_area_get_width>
 801e66a:	4603      	mov	r3, r0
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	da00      	bge.n	801e672 <draw_shadow+0x3b0>
 801e670:	3301      	adds	r3, #1
 801e672:	105b      	asrs	r3, r3, #1
 801e674:	b21b      	sxth	r3, r3
 801e676:	b29b      	uxth	r3, r3
 801e678:	4423      	add	r3, r4
 801e67a:	b29b      	uxth	r3, r3
 801e67c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 801e680:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801e684:	b29c      	uxth	r4, r3
 801e686:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801e68a:	4618      	mov	r0, r3
 801e68c:	f7ff f826 	bl	801d6dc <lv_area_get_height>
 801e690:	4603      	mov	r3, r0
 801e692:	2b00      	cmp	r3, #0
 801e694:	da00      	bge.n	801e698 <draw_shadow+0x3d6>
 801e696:	3301      	adds	r3, #1
 801e698:	105b      	asrs	r3, r3, #1
 801e69a:	b21b      	sxth	r3, r3
 801e69c:	b29b      	uxth	r3, r3
 801e69e:	4423      	add	r3, r4
 801e6a0:	b29b      	uxth	r3, r3
 801e6a2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

    /*Draw the corners if they are on the current clip area and not fully covered by the bg*/

    /*Top right corner*/
    blend_area.x2 = shadow_area.x2;
 801e6a6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801e6aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801e6ac:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801e6b0:	b29a      	uxth	r2, r3
 801e6b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e6b6:	b29b      	uxth	r3, r3
 801e6b8:	1ad3      	subs	r3, r2, r3
 801e6ba:	b29b      	uxth	r3, r3
 801e6bc:	3301      	adds	r3, #1
 801e6be:	b29b      	uxth	r3, r3
 801e6c0:	b21b      	sxth	r3, r3
 801e6c2:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = shadow_area.y1;
 801e6c4:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801e6c8:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801e6ca:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801e6ce:	b29a      	uxth	r2, r3
 801e6d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e6d4:	b29b      	uxth	r3, r3
 801e6d6:	4413      	add	r3, r2
 801e6d8:	b29b      	uxth	r3, r3
 801e6da:	3b01      	subs	r3, #1
 801e6dc:	b29b      	uxth	r3, r3
 801e6de:	b21b      	sxth	r3, r3
 801e6e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other top corners*/
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801e6e2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801e6e6:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801e6ea:	4293      	cmp	r3, r2
 801e6ec:	bfb8      	it	lt
 801e6ee:	4613      	movlt	r3, r2
 801e6f0:	b21b      	sxth	r3, r3
 801e6f2:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801e6f4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801e6f8:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801e6fc:	4293      	cmp	r3, r2
 801e6fe:	bfa8      	it	ge
 801e700:	4613      	movge	r3, r2
 801e702:	b21b      	sxth	r3, r3
 801e704:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801e706:	68fb      	ldr	r3, [r7, #12]
 801e708:	689a      	ldr	r2, [r3, #8]
 801e70a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801e70e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e712:	4618      	mov	r0, r3
 801e714:	f004 f8ce 	bl	80228b4 <_lv_area_intersect>
 801e718:	4603      	mov	r3, r0
 801e71a:	2b00      	cmp	r3, #0
 801e71c:	f000 80b3 	beq.w	801e886 <draw_shadow+0x5c4>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801e720:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e724:	b21a      	sxth	r2, r3
 801e726:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801e72a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e72e:	4618      	mov	r0, r3
 801e730:	f004 faa4 	bl	8022c7c <_lv_area_is_in>
 801e734:	4603      	mov	r3, r0
 801e736:	f083 0301 	eor.w	r3, r3, #1
 801e73a:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	f000 80a2 	beq.w	801e886 <draw_shadow+0x5c4>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801e742:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e746:	4618      	mov	r0, r3
 801e748:	f7fe ffb1 	bl	801d6ae <lv_area_get_width>
 801e74c:	4603      	mov	r3, r0
 801e74e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
        sh_buf_tmp = sh_buf;
 801e752:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e756:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 801e75a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801e75e:	461a      	mov	r2, r3
 801e760:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801e764:	1ad3      	subs	r3, r2, r3
 801e766:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801e76a:	fb02 f303 	mul.w	r3, r2, r3
 801e76e:	461a      	mov	r2, r3
 801e770:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801e774:	4413      	add	r3, r2
 801e776:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801e77a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801e77e:	461a      	mov	r2, r3
 801e780:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801e784:	4619      	mov	r1, r3
 801e786:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e78a:	1acb      	subs	r3, r1, r3
 801e78c:	3301      	adds	r3, #1
 801e78e:	1ad3      	subs	r3, r2, r3
 801e790:	461a      	mov	r2, r3
 801e792:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801e796:	4413      	add	r3, r2
 801e798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801e79c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801e7a0:	2b00      	cmp	r3, #0
 801e7a2:	d010      	beq.n	801e7c6 <draw_shadow+0x504>
 801e7a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e7a8:	b21a      	sxth	r2, r3
 801e7aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801e7ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e7b2:	4618      	mov	r0, r3
 801e7b4:	f004 fb00 	bl	8022db8 <_lv_area_is_out>
 801e7b8:	4603      	mov	r3, r0
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	d003      	beq.n	801e7c6 <draw_shadow+0x504>
 801e7be:	2301      	movs	r3, #1
 801e7c0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801e7c4:	e003      	b.n	801e7ce <draw_shadow+0x50c>
        else simple_sub = simple;
 801e7c6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801e7ca:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        if(w > 0) {
 801e7ce:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 801e7d2:	2b00      	cmp	r3, #0
 801e7d4:	dd57      	ble.n	801e886 <draw_shadow+0x5c4>
            blend_dsc.mask_buf = mask_buf;
 801e7d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e7da:	623b      	str	r3, [r7, #32]
            blend_area.x1 = clip_area_sub.x1;
 801e7dc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801e7e0:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801e7e2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801e7e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801e7e8:	2302      	movs	r3, #2
 801e7ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801e7ee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801e7f0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801e7f4:	e041      	b.n	801e87a <draw_shadow+0x5b8>
                blend_area.y1 = y;
 801e7f6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801e7fa:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801e7fc:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801e800:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801e802:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801e806:	f083 0301 	eor.w	r3, r3, #1
 801e80a:	b2db      	uxtb	r3, r3
 801e80c:	2b00      	cmp	r3, #0
 801e80e:	d01d      	beq.n	801e84c <draw_shadow+0x58a>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801e810:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e814:	461a      	mov	r2, r3
 801e816:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801e81a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801e81e:	f005 fcf7 	bl	8024210 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801e822:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801e826:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 801e82a:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801e82e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801e832:	f7f5 f8fb 	bl	8013a2c <lv_draw_mask_apply>
 801e836:	4603      	mov	r3, r0
 801e838:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801e83c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e840:	2b01      	cmp	r3, #1
 801e842:	d106      	bne.n	801e852 <draw_shadow+0x590>
 801e844:	2302      	movs	r3, #2
 801e846:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801e84a:	e002      	b.n	801e852 <draw_shadow+0x590>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801e84c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801e850:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801e852:	f107 0314 	add.w	r3, r7, #20
 801e856:	4619      	mov	r1, r3
 801e858:	68f8      	ldr	r0, [r7, #12]
 801e85a:	f7fa fcb5 	bl	80191c8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801e85e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e862:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801e866:	4413      	add	r3, r2
 801e868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801e86c:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801e870:	b29b      	uxth	r3, r3
 801e872:	3301      	adds	r3, #1
 801e874:	b29b      	uxth	r3, r3
 801e876:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801e87a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801e87e:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801e882:	429a      	cmp	r2, r3
 801e884:	ddb7      	ble.n	801e7f6 <draw_shadow+0x534>
        }
    }

    /*Bottom right corner.
     *Almost the same as top right just read the lines of `sh_buf` from then end*/
    blend_area.x2 = shadow_area.x2;
 801e886:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801e88a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801e88c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801e890:	b29a      	uxth	r2, r3
 801e892:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e896:	b29b      	uxth	r3, r3
 801e898:	1ad3      	subs	r3, r2, r3
 801e89a:	b29b      	uxth	r3, r3
 801e89c:	3301      	adds	r3, #1
 801e89e:	b29b      	uxth	r3, r3
 801e8a0:	b21b      	sxth	r3, r3
 801e8a2:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801e8a4:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801e8a8:	b29a      	uxth	r2, r3
 801e8aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e8ae:	b29b      	uxth	r3, r3
 801e8b0:	1ad3      	subs	r3, r2, r3
 801e8b2:	b29b      	uxth	r3, r3
 801e8b4:	3301      	adds	r3, #1
 801e8b6:	b29b      	uxth	r3, r3
 801e8b8:	b21b      	sxth	r3, r3
 801e8ba:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801e8bc:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801e8c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801e8c2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801e8c6:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801e8ca:	4293      	cmp	r3, r2
 801e8cc:	bfb8      	it	lt
 801e8ce:	4613      	movlt	r3, r2
 801e8d0:	b21b      	sxth	r3, r3
 801e8d2:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801e8d4:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801e8d8:	3301      	adds	r3, #1
 801e8da:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801e8de:	4293      	cmp	r3, r2
 801e8e0:	bfb8      	it	lt
 801e8e2:	4613      	movlt	r3, r2
 801e8e4:	b21b      	sxth	r3, r3
 801e8e6:	877b      	strh	r3, [r7, #58]	; 0x3a

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801e8e8:	68fb      	ldr	r3, [r7, #12]
 801e8ea:	689a      	ldr	r2, [r3, #8]
 801e8ec:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801e8f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e8f4:	4618      	mov	r0, r3
 801e8f6:	f003 ffdd 	bl	80228b4 <_lv_area_intersect>
 801e8fa:	4603      	mov	r3, r0
 801e8fc:	2b00      	cmp	r3, #0
 801e8fe:	f000 80b3 	beq.w	801ea68 <draw_shadow+0x7a6>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801e902:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e906:	b21a      	sxth	r2, r3
 801e908:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801e90c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e910:	4618      	mov	r0, r3
 801e912:	f004 f9b3 	bl	8022c7c <_lv_area_is_in>
 801e916:	4603      	mov	r3, r0
 801e918:	f083 0301 	eor.w	r3, r3, #1
 801e91c:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801e91e:	2b00      	cmp	r3, #0
 801e920:	f000 80a2 	beq.w	801ea68 <draw_shadow+0x7a6>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801e924:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e928:	4618      	mov	r0, r3
 801e92a:	f7fe fec0 	bl	801d6ae <lv_area_get_width>
 801e92e:	4603      	mov	r3, r0
 801e930:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
        sh_buf_tmp = sh_buf;
 801e934:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801e93c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801e940:	461a      	mov	r2, r3
 801e942:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801e946:	1ad3      	subs	r3, r2, r3
 801e948:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801e94c:	fb02 f303 	mul.w	r3, r2, r3
 801e950:	461a      	mov	r2, r3
 801e952:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801e956:	4413      	add	r3, r2
 801e958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801e95c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801e960:	461a      	mov	r2, r3
 801e962:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801e966:	4619      	mov	r1, r3
 801e968:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e96c:	1acb      	subs	r3, r1, r3
 801e96e:	3301      	adds	r3, #1
 801e970:	1ad3      	subs	r3, r2, r3
 801e972:	461a      	mov	r2, r3
 801e974:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801e978:	4413      	add	r3, r2
 801e97a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801e97e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801e982:	2b00      	cmp	r3, #0
 801e984:	d010      	beq.n	801e9a8 <draw_shadow+0x6e6>
 801e986:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e98a:	b21a      	sxth	r2, r3
 801e98c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801e990:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e994:	4618      	mov	r0, r3
 801e996:	f004 fa0f 	bl	8022db8 <_lv_area_is_out>
 801e99a:	4603      	mov	r3, r0
 801e99c:	2b00      	cmp	r3, #0
 801e99e:	d003      	beq.n	801e9a8 <draw_shadow+0x6e6>
 801e9a0:	2301      	movs	r3, #1
 801e9a2:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801e9a6:	e003      	b.n	801e9b0 <draw_shadow+0x6ee>
        else simple_sub = simple;
 801e9a8:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801e9ac:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

        if(w > 0) {
 801e9b0:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	dd57      	ble.n	801ea68 <draw_shadow+0x7a6>
            blend_dsc.mask_buf = mask_buf;
 801e9b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e9bc:	623b      	str	r3, [r7, #32]
            blend_area.x1 = clip_area_sub.x1;
 801e9be:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801e9c2:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801e9c4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801e9c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801e9ca:	2302      	movs	r3, #2
 801e9cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801e9d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801e9d2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801e9d6:	e041      	b.n	801ea5c <draw_shadow+0x79a>
                blend_area.y1 = y;
 801e9d8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801e9dc:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801e9de:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801e9e2:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801e9e4:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801e9e8:	f083 0301 	eor.w	r3, r3, #1
 801e9ec:	b2db      	uxtb	r3, r3
 801e9ee:	2b00      	cmp	r3, #0
 801e9f0:	d01d      	beq.n	801ea2e <draw_shadow+0x76c>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801e9f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e9f6:	461a      	mov	r2, r3
 801e9f8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801e9fc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ea00:	f005 fc06 	bl	8024210 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801ea04:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801ea08:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 801ea0c:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801ea10:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ea14:	f7f5 f80a 	bl	8013a2c <lv_draw_mask_apply>
 801ea18:	4603      	mov	r3, r0
 801ea1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801ea1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ea22:	2b01      	cmp	r3, #1
 801ea24:	d106      	bne.n	801ea34 <draw_shadow+0x772>
 801ea26:	2302      	movs	r3, #2
 801ea28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801ea2c:	e002      	b.n	801ea34 <draw_shadow+0x772>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801ea2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ea32:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ea34:	f107 0314 	add.w	r3, r7, #20
 801ea38:	4619      	mov	r1, r3
 801ea3a:	68f8      	ldr	r0, [r7, #12]
 801ea3c:	f7fa fbc4 	bl	80191c8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801ea40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ea44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801ea48:	4413      	add	r3, r2
 801ea4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801ea4e:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801ea52:	b29b      	uxth	r3, r3
 801ea54:	3b01      	subs	r3, #1
 801ea56:	b29b      	uxth	r3, r3
 801ea58:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801ea5c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801ea60:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801ea64:	429a      	cmp	r2, r3
 801ea66:	dab7      	bge.n	801e9d8 <draw_shadow+0x716>
            }
        }
    }

    /*Top side*/
    blend_area.x1 = shadow_area.x1 + corner_size;
 801ea68:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801ea6c:	b29a      	uxth	r2, r3
 801ea6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ea72:	b29b      	uxth	r3, r3
 801ea74:	4413      	add	r3, r2
 801ea76:	b29b      	uxth	r3, r3
 801ea78:	b21b      	sxth	r3, r3
 801ea7a:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801ea7c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801ea80:	b29a      	uxth	r2, r3
 801ea82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ea86:	b29b      	uxth	r3, r3
 801ea88:	1ad3      	subs	r3, r2, r3
 801ea8a:	b29b      	uxth	r3, r3
 801ea8c:	b21b      	sxth	r3, r3
 801ea8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1;
 801ea90:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801ea94:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801ea96:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801ea9a:	b29a      	uxth	r2, r3
 801ea9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801eaa0:	b29b      	uxth	r3, r3
 801eaa2:	4413      	add	r3, r2
 801eaa4:	b29b      	uxth	r3, r3
 801eaa6:	3b01      	subs	r3, #1
 801eaa8:	b29b      	uxth	r3, r3
 801eaaa:	b21b      	sxth	r3, r3
 801eaac:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801eaae:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801eab2:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801eab6:	4293      	cmp	r3, r2
 801eab8:	bfa8      	it	ge
 801eaba:	4613      	movge	r3, r2
 801eabc:	b21b      	sxth	r3, r3
 801eabe:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801eac0:	68fb      	ldr	r3, [r7, #12]
 801eac2:	689a      	ldr	r2, [r3, #8]
 801eac4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801eac8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801eacc:	4618      	mov	r0, r3
 801eace:	f003 fef1 	bl	80228b4 <_lv_area_intersect>
 801ead2:	4603      	mov	r3, r0
 801ead4:	2b00      	cmp	r3, #0
 801ead6:	f000 80c2 	beq.w	801ec5e <draw_shadow+0x99c>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801eada:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801eade:	b21a      	sxth	r2, r3
 801eae0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801eae4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801eae8:	4618      	mov	r0, r3
 801eaea:	f004 f8c7 	bl	8022c7c <_lv_area_is_in>
 801eaee:	4603      	mov	r3, r0
 801eaf0:	f083 0301 	eor.w	r3, r3, #1
 801eaf4:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801eaf6:	2b00      	cmp	r3, #0
 801eaf8:	f000 80b1 	beq.w	801ec5e <draw_shadow+0x99c>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801eafc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801eb00:	4618      	mov	r0, r3
 801eb02:	f7fe fdd4 	bl	801d6ae <lv_area_get_width>
 801eb06:	4603      	mov	r3, r0
 801eb08:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
        sh_buf_tmp = sh_buf;
 801eb0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801eb10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 801eb14:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801eb18:	461a      	mov	r2, r3
 801eb1a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801eb1e:	1ad3      	subs	r3, r2, r3
 801eb20:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801eb24:	fb02 f303 	mul.w	r3, r2, r3
 801eb28:	461a      	mov	r2, r3
 801eb2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801eb2e:	4413      	add	r3, r2
 801eb30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801eb34:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801eb38:	2b00      	cmp	r3, #0
 801eb3a:	d010      	beq.n	801eb5e <draw_shadow+0x89c>
 801eb3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801eb40:	b21a      	sxth	r2, r3
 801eb42:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801eb46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801eb4a:	4618      	mov	r0, r3
 801eb4c:	f004 f934 	bl	8022db8 <_lv_area_is_out>
 801eb50:	4603      	mov	r3, r0
 801eb52:	2b00      	cmp	r3, #0
 801eb54:	d003      	beq.n	801eb5e <draw_shadow+0x89c>
 801eb56:	2301      	movs	r3, #1
 801eb58:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801eb5c:	e003      	b.n	801eb66 <draw_shadow+0x8a4>
        else simple_sub = simple;
 801eb5e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801eb62:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

        if(w > 0) {
 801eb66:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801eb6a:	2b00      	cmp	r3, #0
 801eb6c:	dd77      	ble.n	801ec5e <draw_shadow+0x99c>
            if(!simple_sub) {
 801eb6e:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801eb72:	f083 0301 	eor.w	r3, r3, #1
 801eb76:	b2db      	uxtb	r3, r3
 801eb78:	2b00      	cmp	r3, #0
 801eb7a:	d003      	beq.n	801eb84 <draw_shadow+0x8c2>
                blend_dsc.mask_buf = mask_buf;
 801eb7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801eb80:	623b      	str	r3, [r7, #32]
 801eb82:	e001      	b.n	801eb88 <draw_shadow+0x8c6>
            }
            else {
                blend_dsc.mask_buf = NULL;
 801eb84:	2300      	movs	r3, #0
 801eb86:	623b      	str	r3, [r7, #32]
            }
            blend_area.x1 = clip_area_sub.x1;
 801eb88:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801eb8c:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801eb8e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801eb92:	87bb      	strh	r3, [r7, #60]	; 0x3c

            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801eb94:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801eb96:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801eb9a:	e05a      	b.n	801ec52 <draw_shadow+0x990>
                blend_area.y1 = y;
 801eb9c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801eba0:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801eba2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801eba6:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801eba8:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801ebac:	f083 0301 	eor.w	r3, r3, #1
 801ebb0:	b2db      	uxtb	r3, r3
 801ebb2:	2b00      	cmp	r3, #0
 801ebb4:	d024      	beq.n	801ec00 <draw_shadow+0x93e>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 801ebb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ebba:	781b      	ldrb	r3, [r3, #0]
 801ebbc:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 801ebc0:	4619      	mov	r1, r3
 801ebc2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ebc6:	f005 fd3b 	bl	8024640 <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801ebca:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801ebce:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801ebd2:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801ebd6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ebda:	f7f4 ff27 	bl	8013a2c <lv_draw_mask_apply>
 801ebde:	4603      	mov	r3, r0
 801ebe0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801ebe4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ebe8:	2b01      	cmp	r3, #1
 801ebea:	d102      	bne.n	801ebf2 <draw_shadow+0x930>
 801ebec:	2302      	movs	r3, #2
 801ebee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ebf2:	f107 0314 	add.w	r3, r7, #20
 801ebf6:	4619      	mov	r1, r3
 801ebf8:	68f8      	ldr	r0, [r7, #12]
 801ebfa:	f7fa fae5 	bl	80191c8 <lv_draw_sw_blend>
 801ebfe:	e01a      	b.n	801ec36 <draw_shadow+0x974>
                }
                else {
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 801ec00:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801ec04:	2bff      	cmp	r3, #255	; 0xff
 801ec06:	d103      	bne.n	801ec10 <draw_shadow+0x94e>
 801ec08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ec0c:	781b      	ldrb	r3, [r3, #0]
 801ec0e:	e00a      	b.n	801ec26 <draw_shadow+0x964>
 801ec10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ec14:	781b      	ldrb	r3, [r3, #0]
 801ec16:	461a      	mov	r2, r3
 801ec18:	68bb      	ldr	r3, [r7, #8]
 801ec1a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801ec1e:	fb02 f303 	mul.w	r3, r2, r3
 801ec22:	121b      	asrs	r3, r3, #8
 801ec24:	b2db      	uxtb	r3, r3
 801ec26:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ec2a:	f107 0314 	add.w	r3, r7, #20
 801ec2e:	4619      	mov	r1, r3
 801ec30:	68f8      	ldr	r0, [r7, #12]
 801ec32:	f7fa fac9 	bl	80191c8 <lv_draw_sw_blend>
                }
                sh_buf_tmp += corner_size;
 801ec36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ec3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801ec3e:	4413      	add	r3, r2
 801ec40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801ec44:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801ec48:	b29b      	uxth	r3, r3
 801ec4a:	3301      	adds	r3, #1
 801ec4c:	b29b      	uxth	r3, r3
 801ec4e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801ec52:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801ec56:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801ec5a:	429a      	cmp	r2, r3
 801ec5c:	dd9e      	ble.n	801eb9c <draw_shadow+0x8da>
            }
        }
    }
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 801ec5e:	68bb      	ldr	r3, [r7, #8]
 801ec60:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801ec64:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*Bottom side*/
    blend_area.x1 = shadow_area.x1 + corner_size;
 801ec68:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801ec6c:	b29a      	uxth	r2, r3
 801ec6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ec72:	b29b      	uxth	r3, r3
 801ec74:	4413      	add	r3, r2
 801ec76:	b29b      	uxth	r3, r3
 801ec78:	b21b      	sxth	r3, r3
 801ec7a:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801ec7c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801ec80:	b29a      	uxth	r2, r3
 801ec82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ec86:	b29b      	uxth	r3, r3
 801ec88:	1ad3      	subs	r3, r2, r3
 801ec8a:	b29b      	uxth	r3, r3
 801ec8c:	b21b      	sxth	r3, r3
 801ec8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801ec90:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801ec94:	b29a      	uxth	r2, r3
 801ec96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ec9a:	b29b      	uxth	r3, r3
 801ec9c:	1ad3      	subs	r3, r2, r3
 801ec9e:	b29b      	uxth	r3, r3
 801eca0:	3301      	adds	r3, #1
 801eca2:	b29b      	uxth	r3, r3
 801eca4:	b21b      	sxth	r3, r3
 801eca6:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801eca8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801ecac:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801ecae:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801ecb2:	3301      	adds	r3, #1
 801ecb4:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801ecb8:	4293      	cmp	r3, r2
 801ecba:	bfb8      	it	lt
 801ecbc:	4613      	movlt	r3, r2
 801ecbe:	b21b      	sxth	r3, r3
 801ecc0:	877b      	strh	r3, [r7, #58]	; 0x3a


    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801ecc2:	68fb      	ldr	r3, [r7, #12]
 801ecc4:	689a      	ldr	r2, [r3, #8]
 801ecc6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801ecca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ecce:	4618      	mov	r0, r3
 801ecd0:	f003 fdf0 	bl	80228b4 <_lv_area_intersect>
 801ecd4:	4603      	mov	r3, r0
 801ecd6:	2b00      	cmp	r3, #0
 801ecd8:	f000 80dc 	beq.w	801ee94 <draw_shadow+0xbd2>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801ecdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ece0:	b21a      	sxth	r2, r3
 801ece2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801ece6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ecea:	4618      	mov	r0, r3
 801ecec:	f003 ffc6 	bl	8022c7c <_lv_area_is_in>
 801ecf0:	4603      	mov	r3, r0
 801ecf2:	f083 0301 	eor.w	r3, r3, #1
 801ecf6:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801ecf8:	2b00      	cmp	r3, #0
 801ecfa:	f000 80cb 	beq.w	801ee94 <draw_shadow+0xbd2>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801ecfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ed02:	4618      	mov	r0, r3
 801ed04:	f7fe fcd3 	bl	801d6ae <lv_area_get_width>
 801ed08:	4603      	mov	r3, r0
 801ed0a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
        sh_buf_tmp = sh_buf;
 801ed0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ed12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801ed16:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801ed1a:	461a      	mov	r2, r3
 801ed1c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801ed20:	1ad3      	subs	r3, r2, r3
 801ed22:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801ed26:	fb02 f303 	mul.w	r3, r2, r3
 801ed2a:	461a      	mov	r2, r3
 801ed2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ed30:	4413      	add	r3, r2
 801ed32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        if(w > 0) {
 801ed36:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801ed3a:	2b00      	cmp	r3, #0
 801ed3c:	f340 80aa 	ble.w	801ee94 <draw_shadow+0xbd2>
            /*Do not mask if out of the bg*/
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801ed40:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	d010      	beq.n	801ed6a <draw_shadow+0xaa8>
 801ed48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ed4c:	b21a      	sxth	r2, r3
 801ed4e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801ed52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ed56:	4618      	mov	r0, r3
 801ed58:	f004 f82e 	bl	8022db8 <_lv_area_is_out>
 801ed5c:	4603      	mov	r3, r0
 801ed5e:	2b00      	cmp	r3, #0
 801ed60:	d003      	beq.n	801ed6a <draw_shadow+0xaa8>
 801ed62:	2301      	movs	r3, #1
 801ed64:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801ed68:	e003      	b.n	801ed72 <draw_shadow+0xab0>
            else simple_sub = simple;
 801ed6a:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801ed6e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

            if(!simple_sub) {
 801ed72:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801ed76:	f083 0301 	eor.w	r3, r3, #1
 801ed7a:	b2db      	uxtb	r3, r3
 801ed7c:	2b00      	cmp	r3, #0
 801ed7e:	d003      	beq.n	801ed88 <draw_shadow+0xac6>
                blend_dsc.mask_buf = mask_buf;
 801ed80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ed84:	623b      	str	r3, [r7, #32]
 801ed86:	e001      	b.n	801ed8c <draw_shadow+0xaca>
            }
            else {
                blend_dsc.mask_buf = NULL;
 801ed88:	2300      	movs	r3, #0
 801ed8a:	623b      	str	r3, [r7, #32]
            }
            blend_area.x1 = clip_area_sub.x1;
 801ed8c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801ed90:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801ed92:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801ed96:	87bb      	strh	r3, [r7, #60]	; 0x3c

            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801ed98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801ed9a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801ed9e:	e073      	b.n	801ee88 <draw_shadow+0xbc6>
                blend_area.y1 = y;
 801eda0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801eda4:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801eda6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801edaa:	87fb      	strh	r3, [r7, #62]	; 0x3e

                /*Do not mask if out of the bg*/
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801edac:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	d010      	beq.n	801edd6 <draw_shadow+0xb14>
 801edb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801edb8:	b21a      	sxth	r2, r3
 801edba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801edbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801edc2:	4618      	mov	r0, r3
 801edc4:	f003 fff8 	bl	8022db8 <_lv_area_is_out>
 801edc8:	4603      	mov	r3, r0
 801edca:	2b00      	cmp	r3, #0
 801edcc:	d003      	beq.n	801edd6 <draw_shadow+0xb14>
 801edce:	2301      	movs	r3, #1
 801edd0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801edd4:	e003      	b.n	801edde <draw_shadow+0xb1c>
                else simple_sub = simple;
 801edd6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801edda:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1

                if(!simple_sub) {
 801edde:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801ede2:	f083 0301 	eor.w	r3, r3, #1
 801ede6:	b2db      	uxtb	r3, r3
 801ede8:	2b00      	cmp	r3, #0
 801edea:	d024      	beq.n	801ee36 <draw_shadow+0xb74>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 801edec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801edf0:	781b      	ldrb	r3, [r3, #0]
 801edf2:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 801edf6:	4619      	mov	r1, r3
 801edf8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801edfc:	f005 fc20 	bl	8024640 <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801ee00:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801ee04:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 801ee08:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801ee0c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801ee10:	f7f4 fe0c 	bl	8013a2c <lv_draw_mask_apply>
 801ee14:	4603      	mov	r3, r0
 801ee16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801ee1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ee1e:	2b01      	cmp	r3, #1
 801ee20:	d102      	bne.n	801ee28 <draw_shadow+0xb66>
 801ee22:	2302      	movs	r3, #2
 801ee24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ee28:	f107 0314 	add.w	r3, r7, #20
 801ee2c:	4619      	mov	r1, r3
 801ee2e:	68f8      	ldr	r0, [r7, #12]
 801ee30:	f7fa f9ca 	bl	80191c8 <lv_draw_sw_blend>
 801ee34:	e01a      	b.n	801ee6c <draw_shadow+0xbaa>
                }
                else {
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 801ee36:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 801ee3a:	2bff      	cmp	r3, #255	; 0xff
 801ee3c:	d103      	bne.n	801ee46 <draw_shadow+0xb84>
 801ee3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ee42:	781b      	ldrb	r3, [r3, #0]
 801ee44:	e00a      	b.n	801ee5c <draw_shadow+0xb9a>
 801ee46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ee4a:	781b      	ldrb	r3, [r3, #0]
 801ee4c:	461a      	mov	r2, r3
 801ee4e:	68bb      	ldr	r3, [r7, #8]
 801ee50:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801ee54:	fb02 f303 	mul.w	r3, r2, r3
 801ee58:	121b      	asrs	r3, r3, #8
 801ee5a:	b2db      	uxtb	r3, r3
 801ee5c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801ee60:	f107 0314 	add.w	r3, r7, #20
 801ee64:	4619      	mov	r1, r3
 801ee66:	68f8      	ldr	r0, [r7, #12]
 801ee68:	f7fa f9ae 	bl	80191c8 <lv_draw_sw_blend>

                }
                sh_buf_tmp += corner_size;
 801ee6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ee70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801ee74:	4413      	add	r3, r2
 801ee76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801ee7a:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801ee7e:	b29b      	uxth	r3, r3
 801ee80:	3b01      	subs	r3, #1
 801ee82:	b29b      	uxth	r3, r3
 801ee84:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801ee88:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801ee8c:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801ee90:	429a      	cmp	r2, r3
 801ee92:	da85      	bge.n	801eda0 <draw_shadow+0xade>
            }
        }
    }

    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 801ee94:	68bb      	ldr	r3, [r7, #8]
 801ee96:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801ee9a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    /*Right side*/
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801ee9e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801eea2:	b29a      	uxth	r2, r3
 801eea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801eea8:	b29b      	uxth	r3, r3
 801eeaa:	1ad3      	subs	r3, r2, r3
 801eeac:	b29b      	uxth	r3, r3
 801eeae:	3301      	adds	r3, #1
 801eeb0:	b29b      	uxth	r3, r3
 801eeb2:	b21b      	sxth	r3, r3
 801eeb4:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2;
 801eeb6:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801eeba:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801eebc:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801eec0:	b29a      	uxth	r2, r3
 801eec2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801eec6:	b29b      	uxth	r3, r3
 801eec8:	4413      	add	r3, r2
 801eeca:	b29b      	uxth	r3, r3
 801eecc:	b21b      	sxth	r3, r3
 801eece:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801eed0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801eed4:	b29a      	uxth	r2, r3
 801eed6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801eeda:	b29b      	uxth	r3, r3
 801eedc:	1ad3      	subs	r3, r2, r3
 801eede:	b29b      	uxth	r3, r3
 801eee0:	b21b      	sxth	r3, r3
 801eee2:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 801eee4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801eee8:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801eeec:	429a      	cmp	r2, r3
 801eeee:	db02      	blt.n	801eef6 <draw_shadow+0xc34>
 801eef0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801eef4:	e004      	b.n	801ef00 <draw_shadow+0xc3e>
 801eef6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801eefa:	3301      	adds	r3, #1
 801eefc:	b29b      	uxth	r3, r3
 801eefe:	b21b      	sxth	r3, r3
 801ef00:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 801ef02:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801ef06:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801ef0a:	4293      	cmp	r3, r2
 801ef0c:	bfb8      	it	lt
 801ef0e:	4613      	movlt	r3, r2
 801ef10:	b21b      	sxth	r3, r3
 801ef12:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801ef14:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801ef18:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 801ef1c:	4293      	cmp	r3, r2
 801ef1e:	bfb8      	it	lt
 801ef20:	4613      	movlt	r3, r2
 801ef22:	b21b      	sxth	r3, r3
 801ef24:	873b      	strh	r3, [r7, #56]	; 0x38

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801ef26:	68fb      	ldr	r3, [r7, #12]
 801ef28:	689a      	ldr	r2, [r3, #8]
 801ef2a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801ef2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ef32:	4618      	mov	r0, r3
 801ef34:	f003 fcbe 	bl	80228b4 <_lv_area_intersect>
 801ef38:	4603      	mov	r3, r0
 801ef3a:	2b00      	cmp	r3, #0
 801ef3c:	f000 80ac 	beq.w	801f098 <draw_shadow+0xdd6>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801ef40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ef44:	b21a      	sxth	r2, r3
 801ef46:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801ef4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ef4e:	4618      	mov	r0, r3
 801ef50:	f003 fe94 	bl	8022c7c <_lv_area_is_in>
 801ef54:	4603      	mov	r3, r0
 801ef56:	f083 0301 	eor.w	r3, r3, #1
 801ef5a:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801ef5c:	2b00      	cmp	r3, #0
 801ef5e:	f000 809b 	beq.w	801f098 <draw_shadow+0xdd6>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801ef62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ef66:	4618      	mov	r0, r3
 801ef68:	f7fe fba1 	bl	801d6ae <lv_area_get_width>
 801ef6c:	4603      	mov	r3, r0
 801ef6e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
        sh_buf_tmp = sh_buf;
 801ef72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ef76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (corner_size - 1) * corner_size;
 801ef7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ef7e:	3b01      	subs	r3, #1
 801ef80:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801ef84:	fb02 f303 	mul.w	r3, r2, r3
 801ef88:	461a      	mov	r2, r3
 801ef8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ef8e:	4413      	add	r3, r2
 801ef90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801ef94:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801ef98:	461a      	mov	r2, r3
 801ef9a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801ef9e:	4619      	mov	r1, r3
 801efa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801efa4:	1acb      	subs	r3, r1, r3
 801efa6:	3301      	adds	r3, #1
 801efa8:	1ad3      	subs	r3, r2, r3
 801efaa:	461a      	mov	r2, r3
 801efac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801efb0:	4413      	add	r3, r2
 801efb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801efb6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801efba:	2b00      	cmp	r3, #0
 801efbc:	d010      	beq.n	801efe0 <draw_shadow+0xd1e>
 801efbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801efc2:	b21a      	sxth	r2, r3
 801efc4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801efc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801efcc:	4618      	mov	r0, r3
 801efce:	f003 fef3 	bl	8022db8 <_lv_area_is_out>
 801efd2:	4603      	mov	r3, r0
 801efd4:	2b00      	cmp	r3, #0
 801efd6:	d003      	beq.n	801efe0 <draw_shadow+0xd1e>
 801efd8:	2301      	movs	r3, #1
 801efda:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801efde:	e003      	b.n	801efe8 <draw_shadow+0xd26>
        else simple_sub = simple;
 801efe0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801efe4:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801efe8:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801efec:	2b00      	cmp	r3, #0
 801efee:	d002      	beq.n	801eff6 <draw_shadow+0xd34>
 801eff0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801eff4:	e001      	b.n	801effa <draw_shadow+0xd38>
 801eff6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801effa:	623b      	str	r3, [r7, #32]

        if(w > 0) {
 801effc:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801f000:	2b00      	cmp	r3, #0
 801f002:	dd49      	ble.n	801f098 <draw_shadow+0xdd6>
            blend_area.x1 = clip_area_sub.x1;
 801f004:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801f008:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801f00a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801f00e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801f010:	2302      	movs	r3, #2
 801f012:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801f016:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801f018:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801f01c:	e036      	b.n	801f08c <draw_shadow+0xdca>
                blend_area.y1 = y;
 801f01e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801f022:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801f024:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801f028:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801f02a:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801f02e:	f083 0301 	eor.w	r3, r3, #1
 801f032:	b2db      	uxtb	r3, r3
 801f034:	2b00      	cmp	r3, #0
 801f036:	d01c      	beq.n	801f072 <draw_shadow+0xdb0>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 801f038:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801f03c:	461a      	mov	r2, r3
 801f03e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801f042:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801f046:	f005 f8e3 	bl	8024210 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801f04a:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801f04e:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 801f052:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801f056:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801f05a:	f7f4 fce7 	bl	8013a2c <lv_draw_mask_apply>
 801f05e:	4603      	mov	r3, r0
 801f060:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801f064:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f068:	2b01      	cmp	r3, #1
 801f06a:	d102      	bne.n	801f072 <draw_shadow+0xdb0>
 801f06c:	2302      	movs	r3, #2
 801f06e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801f072:	f107 0314 	add.w	r3, r7, #20
 801f076:	4619      	mov	r1, r3
 801f078:	68f8      	ldr	r0, [r7, #12]
 801f07a:	f7fa f8a5 	bl	80191c8 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801f07e:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801f082:	b29b      	uxth	r3, r3
 801f084:	3301      	adds	r3, #1
 801f086:	b29b      	uxth	r3, r3
 801f088:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801f08c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801f090:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801f094:	429a      	cmp	r2, r3
 801f096:	ddc2      	ble.n	801f01e <draw_shadow+0xd5c>
            }
        }
    }

    /*Mirror the shadow corner buffer horizontally*/
    sh_buf_tmp = sh_buf ;
 801f098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f09c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    for(y = 0; y < corner_size; y++) {
 801f0a0:	2300      	movs	r3, #0
 801f0a2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801f0a6:	e047      	b.n	801f138 <draw_shadow+0xe76>
        int32_t x;
        lv_opa_t * start = sh_buf_tmp;
 801f0a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801f0ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        lv_opa_t * end = sh_buf_tmp + corner_size - 1;
 801f0b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f0b4:	3b01      	subs	r3, #1
 801f0b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801f0ba:	4413      	add	r3, r2
 801f0bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for(x = 0; x < corner_size / 2; x++) {
 801f0c0:	2300      	movs	r3, #0
 801f0c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801f0c6:	e01e      	b.n	801f106 <draw_shadow+0xe44>
            lv_opa_t tmp = *start;
 801f0c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801f0cc:	781b      	ldrb	r3, [r3, #0]
 801f0ce:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
            *start = *end;
 801f0d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801f0d6:	781a      	ldrb	r2, [r3, #0]
 801f0d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801f0dc:	701a      	strb	r2, [r3, #0]
            *end = tmp;
 801f0de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801f0e2:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 801f0e6:	701a      	strb	r2, [r3, #0]

            start++;
 801f0e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801f0ec:	3301      	adds	r3, #1
 801f0ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            end--;
 801f0f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801f0f6:	3b01      	subs	r3, #1
 801f0f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        for(x = 0; x < corner_size / 2; x++) {
 801f0fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801f100:	3301      	adds	r3, #1
 801f102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801f106:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	da00      	bge.n	801f110 <draw_shadow+0xe4e>
 801f10e:	3301      	adds	r3, #1
 801f110:	105b      	asrs	r3, r3, #1
 801f112:	461a      	mov	r2, r3
 801f114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801f118:	4293      	cmp	r3, r2
 801f11a:	dbd5      	blt.n	801f0c8 <draw_shadow+0xe06>
        }
        sh_buf_tmp += corner_size;
 801f11c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f120:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801f124:	4413      	add	r3, r2
 801f126:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    for(y = 0; y < corner_size; y++) {
 801f12a:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801f12e:	b29b      	uxth	r3, r3
 801f130:	3301      	adds	r3, #1
 801f132:	b29b      	uxth	r3, r3
 801f134:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801f138:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801f13c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801f140:	429a      	cmp	r2, r3
 801f142:	dcb1      	bgt.n	801f0a8 <draw_shadow+0xde6>
    }

    /*Left side*/
    blend_area.x1 = shadow_area.x1;
 801f144:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801f148:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801f14a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801f14e:	b29a      	uxth	r2, r3
 801f150:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f154:	b29b      	uxth	r3, r3
 801f156:	4413      	add	r3, r2
 801f158:	b29b      	uxth	r3, r3
 801f15a:	3b01      	subs	r3, #1
 801f15c:	b29b      	uxth	r3, r3
 801f15e:	b21b      	sxth	r3, r3
 801f160:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801f162:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801f166:	b29a      	uxth	r2, r3
 801f168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f16c:	b29b      	uxth	r3, r3
 801f16e:	4413      	add	r3, r2
 801f170:	b29b      	uxth	r3, r3
 801f172:	b21b      	sxth	r3, r3
 801f174:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801f176:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801f17a:	b29a      	uxth	r2, r3
 801f17c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f180:	b29b      	uxth	r3, r3
 801f182:	1ad3      	subs	r3, r2, r3
 801f184:	b29b      	uxth	r3, r3
 801f186:	b21b      	sxth	r3, r3
 801f188:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 801f18a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801f18e:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801f192:	429a      	cmp	r2, r3
 801f194:	db02      	blt.n	801f19c <draw_shadow+0xeda>
 801f196:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801f19a:	e004      	b.n	801f1a6 <draw_shadow+0xee4>
 801f19c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801f1a0:	3301      	adds	r3, #1
 801f1a2:	b29b      	uxth	r3, r3
 801f1a4:	b21b      	sxth	r3, r3
 801f1a6:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 801f1a8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801f1ac:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801f1b0:	4293      	cmp	r3, r2
 801f1b2:	bfb8      	it	lt
 801f1b4:	4613      	movlt	r3, r2
 801f1b6:	b21b      	sxth	r3, r3
 801f1b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801f1ba:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801f1be:	3b01      	subs	r3, #1
 801f1c0:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801f1c4:	4293      	cmp	r3, r2
 801f1c6:	bfa8      	it	ge
 801f1c8:	4613      	movge	r3, r2
 801f1ca:	b21b      	sxth	r3, r3
 801f1cc:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801f1ce:	68fb      	ldr	r3, [r7, #12]
 801f1d0:	689a      	ldr	r2, [r3, #8]
 801f1d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801f1d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f1da:	4618      	mov	r0, r3
 801f1dc:	f003 fb6a 	bl	80228b4 <_lv_area_intersect>
 801f1e0:	4603      	mov	r3, r0
 801f1e2:	2b00      	cmp	r3, #0
 801f1e4:	f000 80a7 	beq.w	801f336 <draw_shadow+0x1074>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801f1e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801f1ec:	b21a      	sxth	r2, r3
 801f1ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801f1f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f1f6:	4618      	mov	r0, r3
 801f1f8:	f003 fd40 	bl	8022c7c <_lv_area_is_in>
 801f1fc:	4603      	mov	r3, r0
 801f1fe:	f083 0301 	eor.w	r3, r3, #1
 801f202:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801f204:	2b00      	cmp	r3, #0
 801f206:	f000 8096 	beq.w	801f336 <draw_shadow+0x1074>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801f20a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f20e:	4618      	mov	r0, r3
 801f210:	f7fe fa4d 	bl	801d6ae <lv_area_get_width>
 801f214:	4603      	mov	r3, r0
 801f216:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
        sh_buf_tmp = sh_buf;
 801f21a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f21e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (corner_size - 1) * corner_size;
 801f222:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f226:	3b01      	subs	r3, #1
 801f228:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801f22c:	fb02 f303 	mul.w	r3, r2, r3
 801f230:	461a      	mov	r2, r3
 801f232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801f236:	4413      	add	r3, r2
 801f238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801f23c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801f240:	461a      	mov	r2, r3
 801f242:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801f246:	1ad3      	subs	r3, r2, r3
 801f248:	461a      	mov	r2, r3
 801f24a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801f24e:	4413      	add	r3, r2
 801f250:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801f254:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801f258:	2b00      	cmp	r3, #0
 801f25a:	d010      	beq.n	801f27e <draw_shadow+0xfbc>
 801f25c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801f260:	b21a      	sxth	r2, r3
 801f262:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801f266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f26a:	4618      	mov	r0, r3
 801f26c:	f003 fda4 	bl	8022db8 <_lv_area_is_out>
 801f270:	4603      	mov	r3, r0
 801f272:	2b00      	cmp	r3, #0
 801f274:	d003      	beq.n	801f27e <draw_shadow+0xfbc>
 801f276:	2301      	movs	r3, #1
 801f278:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801f27c:	e003      	b.n	801f286 <draw_shadow+0xfc4>
        else simple_sub = simple;
 801f27e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801f282:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801f286:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801f28a:	2b00      	cmp	r3, #0
 801f28c:	d002      	beq.n	801f294 <draw_shadow+0xfd2>
 801f28e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801f292:	e001      	b.n	801f298 <draw_shadow+0xfd6>
 801f294:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801f298:	623b      	str	r3, [r7, #32]
        if(w > 0) {
 801f29a:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	dd49      	ble.n	801f336 <draw_shadow+0x1074>
            blend_area.x1 = clip_area_sub.x1;
 801f2a2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801f2a6:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801f2a8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801f2ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801f2ae:	2302      	movs	r3, #2
 801f2b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801f2b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801f2b6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801f2ba:	e036      	b.n	801f32a <draw_shadow+0x1068>
                blend_area.y1 = y;
 801f2bc:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801f2c0:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801f2c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801f2c6:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801f2c8:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801f2cc:	f083 0301 	eor.w	r3, r3, #1
 801f2d0:	b2db      	uxtb	r3, r3
 801f2d2:	2b00      	cmp	r3, #0
 801f2d4:	d01c      	beq.n	801f310 <draw_shadow+0x104e>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 801f2d6:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801f2da:	461a      	mov	r2, r3
 801f2dc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801f2e0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801f2e4:	f004 ff94 	bl	8024210 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801f2e8:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801f2ec:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 801f2f0:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801f2f4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801f2f8:	f7f4 fb98 	bl	8013a2c <lv_draw_mask_apply>
 801f2fc:	4603      	mov	r3, r0
 801f2fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801f302:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f306:	2b01      	cmp	r3, #1
 801f308:	d102      	bne.n	801f310 <draw_shadow+0x104e>
 801f30a:	2302      	movs	r3, #2
 801f30c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                }

                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801f310:	f107 0314 	add.w	r3, r7, #20
 801f314:	4619      	mov	r1, r3
 801f316:	68f8      	ldr	r0, [r7, #12]
 801f318:	f7f9 ff56 	bl	80191c8 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801f31c:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801f320:	b29b      	uxth	r3, r3
 801f322:	3301      	adds	r3, #1
 801f324:	b29b      	uxth	r3, r3
 801f326:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801f32a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801f32e:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801f332:	429a      	cmp	r2, r3
 801f334:	ddc2      	ble.n	801f2bc <draw_shadow+0xffa>
            }
        }
    }

    /*Top left corner*/
    blend_area.x1 = shadow_area.x1;
 801f336:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801f33a:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801f33c:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801f340:	b29a      	uxth	r2, r3
 801f342:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f346:	b29b      	uxth	r3, r3
 801f348:	4413      	add	r3, r2
 801f34a:	b29b      	uxth	r3, r3
 801f34c:	3b01      	subs	r3, #1
 801f34e:	b29b      	uxth	r3, r3
 801f350:	b21b      	sxth	r3, r3
 801f352:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1;
 801f354:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801f358:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801f35a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801f35e:	b29a      	uxth	r2, r3
 801f360:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f364:	b29b      	uxth	r3, r3
 801f366:	4413      	add	r3, r2
 801f368:	b29b      	uxth	r3, r3
 801f36a:	3b01      	subs	r3, #1
 801f36c:	b29b      	uxth	r3, r3
 801f36e:	b21b      	sxth	r3, r3
 801f370:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801f372:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801f376:	3b01      	subs	r3, #1
 801f378:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801f37c:	4293      	cmp	r3, r2
 801f37e:	bfa8      	it	ge
 801f380:	4613      	movge	r3, r2
 801f382:	b21b      	sxth	r3, r3
 801f384:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 801f386:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801f38a:	f9b7 208c 	ldrsh.w	r2, [r7, #140]	; 0x8c
 801f38e:	4293      	cmp	r3, r2
 801f390:	bfa8      	it	ge
 801f392:	4613      	movge	r3, r2
 801f394:	b21b      	sxth	r3, r3
 801f396:	87fb      	strh	r3, [r7, #62]	; 0x3e

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801f398:	68fb      	ldr	r3, [r7, #12]
 801f39a:	689a      	ldr	r2, [r3, #8]
 801f39c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801f3a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f3a4:	4618      	mov	r0, r3
 801f3a6:	f003 fa85 	bl	80228b4 <_lv_area_intersect>
 801f3aa:	4603      	mov	r3, r0
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	f000 80ae 	beq.w	801f50e <draw_shadow+0x124c>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801f3b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801f3b6:	b21a      	sxth	r2, r3
 801f3b8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801f3bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f3c0:	4618      	mov	r0, r3
 801f3c2:	f003 fc5b 	bl	8022c7c <_lv_area_is_in>
 801f3c6:	4603      	mov	r3, r0
 801f3c8:	f083 0301 	eor.w	r3, r3, #1
 801f3cc:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	f000 809d 	beq.w	801f50e <draw_shadow+0x124c>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801f3d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f3d8:	4618      	mov	r0, r3
 801f3da:	f7fe f968 	bl	801d6ae <lv_area_get_width>
 801f3de:	4603      	mov	r3, r0
 801f3e0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        sh_buf_tmp = sh_buf;
 801f3e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f3e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 801f3ec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801f3f0:	461a      	mov	r2, r3
 801f3f2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 801f3f6:	1ad3      	subs	r3, r2, r3
 801f3f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801f3fc:	fb02 f303 	mul.w	r3, r2, r3
 801f400:	461a      	mov	r2, r3
 801f402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801f406:	4413      	add	r3, r2
 801f408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801f40c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801f410:	461a      	mov	r2, r3
 801f412:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801f416:	1ad3      	subs	r3, r2, r3
 801f418:	461a      	mov	r2, r3
 801f41a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801f41e:	4413      	add	r3, r2
 801f420:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801f424:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801f428:	2b00      	cmp	r3, #0
 801f42a:	d010      	beq.n	801f44e <draw_shadow+0x118c>
 801f42c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801f430:	b21a      	sxth	r2, r3
 801f432:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801f436:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f43a:	4618      	mov	r0, r3
 801f43c:	f003 fcbc 	bl	8022db8 <_lv_area_is_out>
 801f440:	4603      	mov	r3, r0
 801f442:	2b00      	cmp	r3, #0
 801f444:	d003      	beq.n	801f44e <draw_shadow+0x118c>
 801f446:	2301      	movs	r3, #1
 801f448:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801f44c:	e003      	b.n	801f456 <draw_shadow+0x1194>
        else simple_sub = simple;
 801f44e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801f452:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = mask_buf;
 801f456:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801f45a:	623b      	str	r3, [r7, #32]

        if(w > 0) {
 801f45c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801f460:	2b00      	cmp	r3, #0
 801f462:	dd54      	ble.n	801f50e <draw_shadow+0x124c>
            blend_area.x1 = clip_area_sub.x1;
 801f464:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801f468:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801f46a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801f46e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801f470:	2302      	movs	r3, #2
 801f472:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801f476:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801f478:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801f47c:	e041      	b.n	801f502 <draw_shadow+0x1240>
                blend_area.y1 = y;
 801f47e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801f482:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801f484:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801f488:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801f48a:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801f48e:	f083 0301 	eor.w	r3, r3, #1
 801f492:	b2db      	uxtb	r3, r3
 801f494:	2b00      	cmp	r3, #0
 801f496:	d01d      	beq.n	801f4d4 <draw_shadow+0x1212>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801f498:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f49c:	461a      	mov	r2, r3
 801f49e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801f4a2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801f4a6:	f004 feb3 	bl	8024210 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801f4aa:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801f4ae:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801f4b2:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801f4b6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801f4ba:	f7f4 fab7 	bl	8013a2c <lv_draw_mask_apply>
 801f4be:	4603      	mov	r3, r0
 801f4c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801f4c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f4c8:	2b01      	cmp	r3, #1
 801f4ca:	d106      	bne.n	801f4da <draw_shadow+0x1218>
 801f4cc:	2302      	movs	r3, #2
 801f4ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801f4d2:	e002      	b.n	801f4da <draw_shadow+0x1218>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801f4d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801f4d8:	623b      	str	r3, [r7, #32]
                }

                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801f4da:	f107 0314 	add.w	r3, r7, #20
 801f4de:	4619      	mov	r1, r3
 801f4e0:	68f8      	ldr	r0, [r7, #12]
 801f4e2:	f7f9 fe71 	bl	80191c8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801f4e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f4ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801f4ee:	4413      	add	r3, r2
 801f4f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801f4f4:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801f4f8:	b29b      	uxth	r3, r3
 801f4fa:	3301      	adds	r3, #1
 801f4fc:	b29b      	uxth	r3, r3
 801f4fe:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801f502:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801f506:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801f50a:	429a      	cmp	r2, r3
 801f50c:	ddb7      	ble.n	801f47e <draw_shadow+0x11bc>
        }
    }

    /*Bottom left corner.
     *Almost the same as bottom right just read the lines of `sh_buf` from then end*/
    blend_area.x1 = shadow_area.x1 ;
 801f50e:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801f512:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801f514:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801f518:	b29a      	uxth	r2, r3
 801f51a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f51e:	b29b      	uxth	r3, r3
 801f520:	4413      	add	r3, r2
 801f522:	b29b      	uxth	r3, r3
 801f524:	3b01      	subs	r3, #1
 801f526:	b29b      	uxth	r3, r3
 801f528:	b21b      	sxth	r3, r3
 801f52a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801f52c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801f530:	b29a      	uxth	r2, r3
 801f532:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f536:	b29b      	uxth	r3, r3
 801f538:	1ad3      	subs	r3, r2, r3
 801f53a:	b29b      	uxth	r3, r3
 801f53c:	3301      	adds	r3, #1
 801f53e:	b29b      	uxth	r3, r3
 801f540:	b21b      	sxth	r3, r3
 801f542:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2;
 801f544:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801f548:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /*Do not overdraw the other corners*/
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801f54a:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 801f54e:	3301      	adds	r3, #1
 801f550:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 801f554:	4293      	cmp	r3, r2
 801f556:	bfb8      	it	lt
 801f558:	4613      	movlt	r3, r2
 801f55a:	b21b      	sxth	r3, r3
 801f55c:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801f55e:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 801f562:	3b01      	subs	r3, #1
 801f564:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 801f568:	4293      	cmp	r3, r2
 801f56a:	bfa8      	it	ge
 801f56c:	4613      	movge	r3, r2
 801f56e:	b21b      	sxth	r3, r3
 801f570:	87bb      	strh	r3, [r7, #60]	; 0x3c

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801f572:	68fb      	ldr	r3, [r7, #12]
 801f574:	689a      	ldr	r2, [r3, #8]
 801f576:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801f57a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f57e:	4618      	mov	r0, r3
 801f580:	f003 f998 	bl	80228b4 <_lv_area_intersect>
 801f584:	4603      	mov	r3, r0
 801f586:	2b00      	cmp	r3, #0
 801f588:	f000 80ae 	beq.w	801f6e8 <draw_shadow+0x1426>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801f58c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801f590:	b21a      	sxth	r2, r3
 801f592:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801f596:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f59a:	4618      	mov	r0, r3
 801f59c:	f003 fb6e 	bl	8022c7c <_lv_area_is_in>
 801f5a0:	4603      	mov	r3, r0
 801f5a2:	f083 0301 	eor.w	r3, r3, #1
 801f5a6:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801f5a8:	2b00      	cmp	r3, #0
 801f5aa:	f000 809d 	beq.w	801f6e8 <draw_shadow+0x1426>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801f5ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f5b2:	4618      	mov	r0, r3
 801f5b4:	f7fe f87b 	bl	801d6ae <lv_area_get_width>
 801f5b8:	4603      	mov	r3, r0
 801f5ba:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        sh_buf_tmp = sh_buf;
 801f5be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f5c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801f5c6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801f5ca:	461a      	mov	r2, r3
 801f5cc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801f5d0:	1ad3      	subs	r3, r2, r3
 801f5d2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801f5d6:	fb02 f303 	mul.w	r3, r2, r3
 801f5da:	461a      	mov	r2, r3
 801f5dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801f5e0:	4413      	add	r3, r2
 801f5e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801f5e6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801f5ea:	461a      	mov	r2, r3
 801f5ec:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801f5f0:	1ad3      	subs	r3, r2, r3
 801f5f2:	461a      	mov	r2, r3
 801f5f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801f5f8:	4413      	add	r3, r2
 801f5fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        /*Do not mask if out of the bg*/
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801f5fe:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801f602:	2b00      	cmp	r3, #0
 801f604:	d010      	beq.n	801f628 <draw_shadow+0x1366>
 801f606:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801f60a:	b21a      	sxth	r2, r3
 801f60c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801f610:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f614:	4618      	mov	r0, r3
 801f616:	f003 fbcf 	bl	8022db8 <_lv_area_is_out>
 801f61a:	4603      	mov	r3, r0
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	d003      	beq.n	801f628 <draw_shadow+0x1366>
 801f620:	2301      	movs	r3, #1
 801f622:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 801f626:	e003      	b.n	801f630 <draw_shadow+0x136e>
        else simple_sub = simple;
 801f628:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801f62c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        blend_dsc.mask_buf = mask_buf;
 801f630:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801f634:	623b      	str	r3, [r7, #32]
        if(w > 0) {
 801f636:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801f63a:	2b00      	cmp	r3, #0
 801f63c:	dd54      	ble.n	801f6e8 <draw_shadow+0x1426>
            blend_area.x1 = clip_area_sub.x1;
 801f63e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801f642:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801f644:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801f648:	87bb      	strh	r3, [r7, #60]	; 0x3c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801f64a:	2302      	movs	r3, #2
 801f64c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801f650:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801f652:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801f656:	e041      	b.n	801f6dc <draw_shadow+0x141a>
                blend_area.y1 = y;
 801f658:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801f65c:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801f65e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801f662:	87fb      	strh	r3, [r7, #62]	; 0x3e

                if(!simple_sub) {
 801f664:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801f668:	f083 0301 	eor.w	r3, r3, #1
 801f66c:	b2db      	uxtb	r3, r3
 801f66e:	2b00      	cmp	r3, #0
 801f670:	d01d      	beq.n	801f6ae <draw_shadow+0x13ec>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801f672:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f676:	461a      	mov	r2, r3
 801f678:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801f67c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801f680:	f004 fdc6 	bl	8024210 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801f684:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801f688:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 801f68c:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801f690:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801f694:	f7f4 f9ca 	bl	8013a2c <lv_draw_mask_apply>
 801f698:	4603      	mov	r3, r0
 801f69a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801f69e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f6a2:	2b01      	cmp	r3, #1
 801f6a4:	d106      	bne.n	801f6b4 <draw_shadow+0x13f2>
 801f6a6:	2302      	movs	r3, #2
 801f6a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 801f6ac:	e002      	b.n	801f6b4 <draw_shadow+0x13f2>
                }
                else {
                    blend_dsc.mask_buf = sh_buf_tmp;
 801f6ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801f6b2:	623b      	str	r3, [r7, #32]
                }
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801f6b4:	f107 0314 	add.w	r3, r7, #20
 801f6b8:	4619      	mov	r1, r3
 801f6ba:	68f8      	ldr	r0, [r7, #12]
 801f6bc:	f7f9 fd84 	bl	80191c8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801f6c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f6c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801f6c8:	4413      	add	r3, r2
 801f6ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801f6ce:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801f6d2:	b29b      	uxth	r3, r3
 801f6d4:	3b01      	subs	r3, #1
 801f6d6:	b29b      	uxth	r3, r3
 801f6d8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801f6dc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 801f6e0:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801f6e4:	429a      	cmp	r2, r3
 801f6e6:	dab7      	bge.n	801f658 <draw_shadow+0x1396>
            }
        }
    }

    /*Draw the center rectangle.*/
    blend_area.x1 = shadow_area.x1 + corner_size ;
 801f6e8:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 801f6ec:	b29a      	uxth	r2, r3
 801f6ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f6f2:	b29b      	uxth	r3, r3
 801f6f4:	4413      	add	r3, r2
 801f6f6:	b29b      	uxth	r3, r3
 801f6f8:	b21b      	sxth	r3, r3
 801f6fa:	873b      	strh	r3, [r7, #56]	; 0x38
    blend_area.x2 = shadow_area.x2 - corner_size;
 801f6fc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801f700:	b29a      	uxth	r2, r3
 801f702:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f706:	b29b      	uxth	r3, r3
 801f708:	1ad3      	subs	r3, r2, r3
 801f70a:	b29b      	uxth	r3, r3
 801f70c:	b21b      	sxth	r3, r3
 801f70e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    blend_area.y1 = shadow_area.y1 + corner_size;
 801f710:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801f714:	b29a      	uxth	r2, r3
 801f716:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f71a:	b29b      	uxth	r3, r3
 801f71c:	4413      	add	r3, r2
 801f71e:	b29b      	uxth	r3, r3
 801f720:	b21b      	sxth	r3, r3
 801f722:	877b      	strh	r3, [r7, #58]	; 0x3a
    blend_area.y2 = shadow_area.y2 - corner_size;
 801f724:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801f728:	b29a      	uxth	r2, r3
 801f72a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801f72e:	b29b      	uxth	r3, r3
 801f730:	1ad3      	subs	r3, r2, r3
 801f732:	b29b      	uxth	r3, r3
 801f734:	b21b      	sxth	r3, r3
 801f736:	87fb      	strh	r3, [r7, #62]	; 0x3e
    blend_dsc.mask_buf = mask_buf;
 801f738:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801f73c:	623b      	str	r3, [r7, #32]

    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801f73e:	68fb      	ldr	r3, [r7, #12]
 801f740:	689a      	ldr	r2, [r3, #8]
 801f742:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801f746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f74a:	4618      	mov	r0, r3
 801f74c:	f003 f8b2 	bl	80228b4 <_lv_area_intersect>
 801f750:	4603      	mov	r3, r0
 801f752:	2b00      	cmp	r3, #0
 801f754:	d052      	beq.n	801f7fc <draw_shadow+0x153a>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801f756:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801f75a:	b21a      	sxth	r2, r3
 801f75c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801f760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f764:	4618      	mov	r0, r3
 801f766:	f003 fa89 	bl	8022c7c <_lv_area_is_in>
 801f76a:	4603      	mov	r3, r0
 801f76c:	f083 0301 	eor.w	r3, r3, #1
 801f770:	b2db      	uxtb	r3, r3
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801f772:	2b00      	cmp	r3, #0
 801f774:	d042      	beq.n	801f7fc <draw_shadow+0x153a>
        lv_coord_t w = lv_area_get_width(&clip_area_sub);
 801f776:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f77a:	4618      	mov	r0, r3
 801f77c:	f7fd ff97 	bl	801d6ae <lv_area_get_width>
 801f780:	4603      	mov	r3, r0
 801f782:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        if(w > 0) {
 801f786:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801f78a:	2b00      	cmp	r3, #0
 801f78c:	dd36      	ble.n	801f7fc <draw_shadow+0x153a>
            blend_area.x1 = clip_area_sub.x1;
 801f78e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801f792:	873b      	strh	r3, [r7, #56]	; 0x38
            blend_area.x2 = clip_area_sub.x2;
 801f794:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801f798:	87bb      	strh	r3, [r7, #60]	; 0x3c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801f79a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801f79c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801f7a0:	e026      	b.n	801f7f0 <draw_shadow+0x152e>
                blend_area.y1 = y;
 801f7a2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801f7a6:	877b      	strh	r3, [r7, #58]	; 0x3a
                blend_area.y2 = y;
 801f7a8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801f7ac:	87fb      	strh	r3, [r7, #62]	; 0x3e

                lv_memset_ff(mask_buf, w);
 801f7ae:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801f7b2:	4619      	mov	r1, r3
 801f7b4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801f7b8:	f005 f851 	bl	802485e <lv_memset_ff>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801f7bc:	f9b7 1030 	ldrsh.w	r1, [r7, #48]	; 0x30
 801f7c0:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 801f7c4:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801f7c8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801f7cc:	f7f4 f92e 	bl	8013a2c <lv_draw_mask_apply>
 801f7d0:	4603      	mov	r3, r0
 801f7d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801f7d6:	f107 0314 	add.w	r3, r7, #20
 801f7da:	4619      	mov	r1, r3
 801f7dc:	68f8      	ldr	r0, [r7, #12]
 801f7de:	f7f9 fcf3 	bl	80191c8 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801f7e2:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 801f7e6:	b29b      	uxth	r3, r3
 801f7e8:	3301      	adds	r3, #1
 801f7ea:	b29b      	uxth	r3, r3
 801f7ec:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801f7f0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801f7f4:	f9b7 20b2 	ldrsh.w	r2, [r7, #178]	; 0xb2
 801f7f8:	429a      	cmp	r2, r3
 801f7fa:	ddd2      	ble.n	801f7a2 <draw_shadow+0x14e0>
            }
        }
    }

    if(!simple) {
 801f7fc:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 801f800:	f083 0301 	eor.w	r3, r3, #1
 801f804:	b2db      	uxtb	r3, r3
 801f806:	2b00      	cmp	r3, #0
 801f808:	d009      	beq.n	801f81e <draw_shadow+0x155c>
        lv_draw_mask_free_param(&mask_rout_param);
 801f80a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f80e:	4618      	mov	r0, r3
 801f810:	f7f4 f9a0 	bl	8013b54 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rout_id);
 801f814:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 801f818:	4618      	mov	r0, r3
 801f81a:	f7f4 f94b 	bl	8013ab4 <lv_draw_mask_remove_id>
    }
    lv_mem_buf_release(sh_buf);
 801f81e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 801f822:	f004 fc9d 	bl	8024160 <lv_mem_buf_release>
    lv_mem_buf_release(mask_buf);
 801f826:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801f82a:	f004 fc99 	bl	8024160 <lv_mem_buf_release>
 801f82e:	e006      	b.n	801f83e <draw_shadow+0x157c>
    if(dsc->shadow_width == 0) return;
 801f830:	bf00      	nop
 801f832:	e004      	b.n	801f83e <draw_shadow+0x157c>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 801f834:	bf00      	nop
 801f836:	e002      	b.n	801f83e <draw_shadow+0x157c>
        return;
 801f838:	bf00      	nop
 801f83a:	e000      	b.n	801f83e <draw_shadow+0x157c>
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 801f83c:	bf00      	nop
}
 801f83e:	37cc      	adds	r7, #204	; 0xcc
 801f840:	46bd      	mov	sp, r7
 801f842:	bd90      	pop	{r4, r7, pc}

0801f844 <shadow_draw_corner_buf>:
 * @param sw shadow width
 * @param r radius
 */
LV_ATTRIBUTE_FAST_MEM static void shadow_draw_corner_buf(const lv_area_t * coords, uint16_t * sh_buf, lv_coord_t sw,
                                                         lv_coord_t r)
{
 801f844:	b590      	push	{r4, r7, lr}
 801f846:	b09d      	sub	sp, #116	; 0x74
 801f848:	af02      	add	r7, sp, #8
 801f84a:	60f8      	str	r0, [r7, #12]
 801f84c:	60b9      	str	r1, [r7, #8]
 801f84e:	4611      	mov	r1, r2
 801f850:	461a      	mov	r2, r3
 801f852:	460b      	mov	r3, r1
 801f854:	80fb      	strh	r3, [r7, #6]
 801f856:	4613      	mov	r3, r2
 801f858:	80bb      	strh	r3, [r7, #4]
    int32_t sw_ori = sw;
 801f85a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801f85e:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t size = sw_ori  + r;
 801f860:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801f864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f866:	4413      	add	r3, r2
 801f868:	64bb      	str	r3, [r7, #72]	; 0x48

    lv_area_t sh_area;
    lv_area_copy(&sh_area, coords);
 801f86a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801f86e:	68f9      	ldr	r1, [r7, #12]
 801f870:	4618      	mov	r0, r3
 801f872:	f7fd fefd 	bl	801d670 <lv_area_copy>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 801f876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801f87a:	2b00      	cmp	r3, #0
 801f87c:	da00      	bge.n	801f880 <shadow_draw_corner_buf+0x3c>
 801f87e:	3301      	adds	r3, #1
 801f880:	105b      	asrs	r3, r3, #1
 801f882:	b21b      	sxth	r3, r3
 801f884:	b29a      	uxth	r2, r3
 801f886:	88bb      	ldrh	r3, [r7, #4]
 801f888:	4413      	add	r3, r2
 801f88a:	b29a      	uxth	r2, r3
 801f88c:	88fb      	ldrh	r3, [r7, #6]
 801f88e:	f003 0301 	and.w	r3, r3, #1
 801f892:	2b00      	cmp	r3, #0
 801f894:	bf0c      	ite	eq
 801f896:	2301      	moveq	r3, #1
 801f898:	2300      	movne	r3, #0
 801f89a:	b2db      	uxtb	r3, r3
 801f89c:	b29b      	uxth	r3, r3
 801f89e:	1ad3      	subs	r3, r2, r3
 801f8a0:	b29b      	uxth	r3, r3
 801f8a2:	3b01      	subs	r3, #1
 801f8a4:	b29b      	uxth	r3, r3
 801f8a6:	b21b      	sxth	r3, r3
 801f8a8:	863b      	strh	r3, [r7, #48]	; 0x30
    sh_area.y1 = sw / 2 + 1;
 801f8aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801f8ae:	2b00      	cmp	r3, #0
 801f8b0:	da00      	bge.n	801f8b4 <shadow_draw_corner_buf+0x70>
 801f8b2:	3301      	adds	r3, #1
 801f8b4:	105b      	asrs	r3, r3, #1
 801f8b6:	b21b      	sxth	r3, r3
 801f8b8:	b29b      	uxth	r3, r3
 801f8ba:	3301      	adds	r3, #1
 801f8bc:	b29b      	uxth	r3, r3
 801f8be:	b21b      	sxth	r3, r3
 801f8c0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 801f8c2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 801f8c6:	b29c      	uxth	r4, r3
 801f8c8:	68f8      	ldr	r0, [r7, #12]
 801f8ca:	f7fd fef0 	bl	801d6ae <lv_area_get_width>
 801f8ce:	4603      	mov	r3, r0
 801f8d0:	b29b      	uxth	r3, r3
 801f8d2:	1ae3      	subs	r3, r4, r3
 801f8d4:	b29b      	uxth	r3, r3
 801f8d6:	b21b      	sxth	r3, r3
 801f8d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 801f8da:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801f8de:	b29c      	uxth	r4, r3
 801f8e0:	68f8      	ldr	r0, [r7, #12]
 801f8e2:	f7fd fefb 	bl	801d6dc <lv_area_get_height>
 801f8e6:	4603      	mov	r3, r0
 801f8e8:	b29b      	uxth	r3, r3
 801f8ea:	4423      	add	r3, r4
 801f8ec:	b29b      	uxth	r3, r3
 801f8ee:	b21b      	sxth	r3, r3
 801f8f0:	867b      	strh	r3, [r7, #50]	; 0x32

    lv_draw_mask_radius_param_t mask_param;
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 801f8f2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801f8f6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801f8fa:	f107 0014 	add.w	r0, r7, #20
 801f8fe:	2300      	movs	r3, #0
 801f900:	f7f4 fc2e 	bl	8014160 <lv_draw_mask_radius_init>

#if SHADOW_ENHANCE
    /*Set half shadow width width because blur will be repeated*/
    if(sw_ori == 1) sw = 1;
 801f904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f906:	2b01      	cmp	r3, #1
 801f908:	d102      	bne.n	801f910 <shadow_draw_corner_buf+0xcc>
 801f90a:	2301      	movs	r3, #1
 801f90c:	80fb      	strh	r3, [r7, #6]
 801f90e:	e002      	b.n	801f916 <shadow_draw_corner_buf+0xd2>
    else sw = sw_ori >> 1;
 801f910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f912:	105b      	asrs	r3, r3, #1
 801f914:	80fb      	strh	r3, [r7, #6]
#endif

    int32_t y;
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 801f916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f918:	4618      	mov	r0, r3
 801f91a:	f004 fb75 	bl	8024008 <lv_mem_buf_get>
 801f91e:	6478      	str	r0, [r7, #68]	; 0x44
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
 801f920:	68bb      	ldr	r3, [r7, #8]
 801f922:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 801f924:	2300      	movs	r3, #0
 801f926:	667b      	str	r3, [r7, #100]	; 0x64
 801f928:	e062      	b.n	801f9f0 <shadow_draw_corner_buf+0x1ac>
        lv_memset_ff(mask_line, size);
 801f92a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f92c:	4619      	mov	r1, r3
 801f92e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801f930:	f004 ff95 	bl	802485e <lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 801f934:	697c      	ldr	r4, [r7, #20]
 801f936:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801f938:	b21a      	sxth	r2, r3
 801f93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f93c:	b219      	sxth	r1, r3
 801f93e:	f107 0314 	add.w	r3, r7, #20
 801f942:	9300      	str	r3, [sp, #0]
 801f944:	460b      	mov	r3, r1
 801f946:	2100      	movs	r1, #0
 801f948:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801f94a:	47a0      	blx	r4
 801f94c:	4603      	mov	r3, r0
 801f94e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801f952:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801f956:	2b00      	cmp	r3, #0
 801f958:	d106      	bne.n	801f968 <shadow_draw_corner_buf+0x124>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 801f95a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f95c:	005b      	lsls	r3, r3, #1
 801f95e:	4619      	mov	r1, r3
 801f960:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801f962:	f004 fefb 	bl	802475c <lv_memset_00>
 801f966:	e03b      	b.n	801f9e0 <shadow_draw_corner_buf+0x19c>
        }
        else {
            int32_t i;
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 801f968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f96a:	781b      	ldrb	r3, [r3, #0]
 801f96c:	019a      	lsls	r2, r3, #6
 801f96e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801f972:	fb92 f3f3 	sdiv	r3, r2, r3
 801f976:	b29a      	uxth	r2, r3
 801f978:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801f97a:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 801f97c:	2301      	movs	r3, #1
 801f97e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801f980:	e02a      	b.n	801f9d8 <shadow_draw_corner_buf+0x194>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 801f982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f986:	4413      	add	r3, r2
 801f988:	781a      	ldrb	r2, [r3, #0]
 801f98a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f98c:	3b01      	subs	r3, #1
 801f98e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801f990:	440b      	add	r3, r1
 801f992:	781b      	ldrb	r3, [r3, #0]
 801f994:	429a      	cmp	r2, r3
 801f996:	d10d      	bne.n	801f9b4 <shadow_draw_corner_buf+0x170>
 801f998:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f99a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801f99e:	4413      	add	r3, r2
 801f9a0:	005b      	lsls	r3, r3, #1
 801f9a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801f9a4:	441a      	add	r2, r3
 801f9a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f9a8:	005b      	lsls	r3, r3, #1
 801f9aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801f9ac:	440b      	add	r3, r1
 801f9ae:	8812      	ldrh	r2, [r2, #0]
 801f9b0:	801a      	strh	r2, [r3, #0]
 801f9b2:	e00e      	b.n	801f9d2 <shadow_draw_corner_buf+0x18e>
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 801f9b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f9b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f9b8:	4413      	add	r3, r2
 801f9ba:	781b      	ldrb	r3, [r3, #0]
 801f9bc:	019a      	lsls	r2, r3, #6
 801f9be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801f9c2:	fb92 f1f3 	sdiv	r1, r2, r3
 801f9c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f9c8:	005b      	lsls	r3, r3, #1
 801f9ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801f9cc:	4413      	add	r3, r2
 801f9ce:	b28a      	uxth	r2, r1
 801f9d0:	801a      	strh	r2, [r3, #0]
            for(i = 1; i < size; i++) {
 801f9d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f9d4:	3301      	adds	r3, #1
 801f9d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 801f9d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f9da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f9dc:	429a      	cmp	r2, r3
 801f9de:	dbd0      	blt.n	801f982 <shadow_draw_corner_buf+0x13e>
            }
        }

        sh_ups_tmp_buf += size;
 801f9e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f9e2:	005b      	lsls	r3, r3, #1
 801f9e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801f9e6:	4413      	add	r3, r2
 801f9e8:	663b      	str	r3, [r7, #96]	; 0x60
    for(y = 0; y < size; y++) {
 801f9ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801f9ec:	3301      	adds	r3, #1
 801f9ee:	667b      	str	r3, [r7, #100]	; 0x64
 801f9f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801f9f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f9f4:	429a      	cmp	r2, r3
 801f9f6:	db98      	blt.n	801f92a <shadow_draw_corner_buf+0xe6>
    }
    lv_mem_buf_release(mask_line);
 801f9f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801f9fa:	f004 fbb1 	bl	8024160 <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_param);
 801f9fe:	f107 0314 	add.w	r3, r7, #20
 801fa02:	4618      	mov	r0, r3
 801fa04:	f7f4 f8a6 	bl	8013b54 <lv_draw_mask_free_param>

    if(sw == 1) {
 801fa08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fa0c:	2b01      	cmp	r3, #1
 801fa0e:	d11a      	bne.n	801fa46 <shadow_draw_corner_buf+0x202>
        int32_t i;
        lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 801fa10:	68bb      	ldr	r3, [r7, #8]
 801fa12:	63bb      	str	r3, [r7, #56]	; 0x38
        for(i = 0; i < size * size; i++) {
 801fa14:	2300      	movs	r3, #0
 801fa16:	65bb      	str	r3, [r7, #88]	; 0x58
 801fa18:	e00e      	b.n	801fa38 <shadow_draw_corner_buf+0x1f4>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 801fa1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801fa1c:	005b      	lsls	r3, r3, #1
 801fa1e:	68ba      	ldr	r2, [r7, #8]
 801fa20:	4413      	add	r3, r2
 801fa22:	881b      	ldrh	r3, [r3, #0]
 801fa24:	099b      	lsrs	r3, r3, #6
 801fa26:	b299      	uxth	r1, r3
 801fa28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801fa2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fa2c:	4413      	add	r3, r2
 801fa2e:	b2ca      	uxtb	r2, r1
 801fa30:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < size * size; i++) {
 801fa32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801fa34:	3301      	adds	r3, #1
 801fa36:	65bb      	str	r3, [r7, #88]	; 0x58
 801fa38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fa3a:	fb03 f303 	mul.w	r3, r3, r3
 801fa3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801fa40:	429a      	cmp	r2, r3
 801fa42:	dbea      	blt.n	801fa1a <shadow_draw_corner_buf+0x1d6>
        }
        return;
 801fa44:	e070      	b.n	801fb28 <shadow_draw_corner_buf+0x2e4>
    }

    shadow_blur_corner(size, sw, sh_buf);
 801fa46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fa48:	b21b      	sxth	r3, r3
 801fa4a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801fa4e:	68ba      	ldr	r2, [r7, #8]
 801fa50:	4618      	mov	r0, r3
 801fa52:	f000 f86c 	bl	801fb2e <shadow_blur_corner>
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
    for(x = 0; x < size * size; x++) {
        res_buf[x] = sh_buf[x];
    }
#else
    sw += sw_ori & 1;
 801fa56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fa58:	b29b      	uxth	r3, r3
 801fa5a:	f003 0301 	and.w	r3, r3, #1
 801fa5e:	b29a      	uxth	r2, r3
 801fa60:	88fb      	ldrh	r3, [r7, #6]
 801fa62:	4413      	add	r3, r2
 801fa64:	b29b      	uxth	r3, r3
 801fa66:	80fb      	strh	r3, [r7, #6]
    if(sw > 1) {
 801fa68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fa6c:	2b01      	cmp	r3, #1
 801fa6e:	dd43      	ble.n	801faf8 <shadow_draw_corner_buf+0x2b4>
        uint32_t i;
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
 801fa70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fa74:	f44f 527f 	mov.w	r2, #16320	; 0x3fc0
 801fa78:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa7c:	643b      	str	r3, [r7, #64]	; 0x40
        for(i = 0; i < (uint32_t)size * size; i++) {
 801fa7e:	2300      	movs	r3, #0
 801fa80:	657b      	str	r3, [r7, #84]	; 0x54
 801fa82:	e02a      	b.n	801fada <shadow_draw_corner_buf+0x296>
            if(sh_buf[i] == 0) continue;
 801fa84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fa86:	005b      	lsls	r3, r3, #1
 801fa88:	68ba      	ldr	r2, [r7, #8]
 801fa8a:	4413      	add	r3, r2
 801fa8c:	881b      	ldrh	r3, [r3, #0]
 801fa8e:	2b00      	cmp	r3, #0
 801fa90:	d01f      	beq.n	801fad2 <shadow_draw_corner_buf+0x28e>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 801fa92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fa94:	005b      	lsls	r3, r3, #1
 801fa96:	68ba      	ldr	r2, [r7, #8]
 801fa98:	4413      	add	r3, r2
 801fa9a:	881b      	ldrh	r3, [r3, #0]
 801fa9c:	2bff      	cmp	r3, #255	; 0xff
 801fa9e:	d107      	bne.n	801fab0 <shadow_draw_corner_buf+0x26c>
 801faa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801faa2:	005b      	lsls	r3, r3, #1
 801faa4:	68ba      	ldr	r2, [r7, #8]
 801faa6:	4413      	add	r3, r2
 801faa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801faaa:	b292      	uxth	r2, r2
 801faac:	801a      	strh	r2, [r3, #0]
 801faae:	e011      	b.n	801fad4 <shadow_draw_corner_buf+0x290>
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 801fab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fab2:	005b      	lsls	r3, r3, #1
 801fab4:	68ba      	ldr	r2, [r7, #8]
 801fab6:	4413      	add	r3, r2
 801fab8:	881b      	ldrh	r3, [r3, #0]
 801faba:	019a      	lsls	r2, r3, #6
 801fabc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fac0:	fb92 f1f3 	sdiv	r1, r2, r3
 801fac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fac6:	005b      	lsls	r3, r3, #1
 801fac8:	68ba      	ldr	r2, [r7, #8]
 801faca:	4413      	add	r3, r2
 801facc:	b28a      	uxth	r2, r1
 801face:	801a      	strh	r2, [r3, #0]
 801fad0:	e000      	b.n	801fad4 <shadow_draw_corner_buf+0x290>
            if(sh_buf[i] == 0) continue;
 801fad2:	bf00      	nop
        for(i = 0; i < (uint32_t)size * size; i++) {
 801fad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fad6:	3301      	adds	r3, #1
 801fad8:	657b      	str	r3, [r7, #84]	; 0x54
 801fada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fadc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801fade:	fb02 f303 	mul.w	r3, r2, r3
 801fae2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801fae4:	429a      	cmp	r2, r3
 801fae6:	d3cd      	bcc.n	801fa84 <shadow_draw_corner_buf+0x240>
        }

        shadow_blur_corner(size, sw, sh_buf);
 801fae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801faea:	b21b      	sxth	r3, r3
 801faec:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801faf0:	68ba      	ldr	r2, [r7, #8]
 801faf2:	4618      	mov	r0, r3
 801faf4:	f000 f81b 	bl	801fb2e <shadow_blur_corner>
    }
    int32_t x;
    lv_opa_t * res_buf = (lv_opa_t *)sh_buf;
 801faf8:	68bb      	ldr	r3, [r7, #8]
 801fafa:	63fb      	str	r3, [r7, #60]	; 0x3c
    for(x = 0; x < size * size; x++) {
 801fafc:	2300      	movs	r3, #0
 801fafe:	653b      	str	r3, [r7, #80]	; 0x50
 801fb00:	e00c      	b.n	801fb1c <shadow_draw_corner_buf+0x2d8>
        res_buf[x] = sh_buf[x];
 801fb02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fb04:	005b      	lsls	r3, r3, #1
 801fb06:	68ba      	ldr	r2, [r7, #8]
 801fb08:	4413      	add	r3, r2
 801fb0a:	8819      	ldrh	r1, [r3, #0]
 801fb0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fb0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fb10:	4413      	add	r3, r2
 801fb12:	b2ca      	uxtb	r2, r1
 801fb14:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < size * size; x++) {
 801fb16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fb18:	3301      	adds	r3, #1
 801fb1a:	653b      	str	r3, [r7, #80]	; 0x50
 801fb1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fb1e:	fb03 f303 	mul.w	r3, r3, r3
 801fb22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801fb24:	429a      	cmp	r2, r3
 801fb26:	dbec      	blt.n	801fb02 <shadow_draw_corner_buf+0x2be>
    }
#endif

}
 801fb28:	376c      	adds	r7, #108	; 0x6c
 801fb2a:	46bd      	mov	sp, r7
 801fb2c:	bd90      	pop	{r4, r7, pc}

0801fb2e <shadow_blur_corner>:

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 801fb2e:	b580      	push	{r7, lr}
 801fb30:	b092      	sub	sp, #72	; 0x48
 801fb32:	af00      	add	r7, sp, #0
 801fb34:	4603      	mov	r3, r0
 801fb36:	603a      	str	r2, [r7, #0]
 801fb38:	80fb      	strh	r3, [r7, #6]
 801fb3a:	460b      	mov	r3, r1
 801fb3c:	80bb      	strh	r3, [r7, #4]
    int32_t s_left = sw >> 1;
 801fb3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801fb42:	105b      	asrs	r3, r3, #1
 801fb44:	b21b      	sxth	r3, r3
 801fb46:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t s_right = (sw >> 1);
 801fb48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801fb4c:	105b      	asrs	r3, r3, #1
 801fb4e:	b21b      	sxth	r3, r3
 801fb50:	61bb      	str	r3, [r7, #24]
    if((sw & 1) == 0) s_left--;
 801fb52:	88bb      	ldrh	r3, [r7, #4]
 801fb54:	f003 0301 	and.w	r3, r3, #1
 801fb58:	2b00      	cmp	r3, #0
 801fb5a:	d102      	bne.n	801fb62 <shadow_blur_corner+0x34>
 801fb5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb5e:	3b01      	subs	r3, #1
 801fb60:	647b      	str	r3, [r7, #68]	; 0x44

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 801fb62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fb66:	005b      	lsls	r3, r3, #1
 801fb68:	4618      	mov	r0, r3
 801fb6a:	f004 fa4d 	bl	8024008 <lv_mem_buf_get>
 801fb6e:	6178      	str	r0, [r7, #20]

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
 801fb70:	683b      	ldr	r3, [r7, #0]
 801fb72:	63bb      	str	r3, [r7, #56]	; 0x38

    for(y = 0; y < size; y++) {
 801fb74:	2300      	movs	r3, #0
 801fb76:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fb78:	e05f      	b.n	801fc3a <shadow_blur_corner+0x10c>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 801fb7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801fb7e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801fb82:	4413      	add	r3, r2
 801fb84:	005b      	lsls	r3, r3, #1
 801fb86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fb88:	4413      	add	r3, r2
 801fb8a:	881b      	ldrh	r3, [r3, #0]
 801fb8c:	461a      	mov	r2, r3
 801fb8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801fb92:	fb02 f303 	mul.w	r3, r2, r3
 801fb96:	637b      	str	r3, [r7, #52]	; 0x34
        for(x = size - 1; x >= 0; x--) {
 801fb98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fb9c:	3b01      	subs	r3, #1
 801fb9e:	643b      	str	r3, [r7, #64]	; 0x40
 801fba0:	e037      	b.n	801fc12 <shadow_blur_corner+0xe4>
            sh_ups_blur_buf[x] = v;
 801fba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fba4:	005b      	lsls	r3, r3, #1
 801fba6:	697a      	ldr	r2, [r7, #20]
 801fba8:	4413      	add	r3, r2
 801fbaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fbac:	b292      	uxth	r2, r2
 801fbae:	801a      	strh	r2, [r3, #0]

            /*Forget the right pixel*/
            uint32_t right_val = 0;
 801fbb0:	2300      	movs	r3, #0
 801fbb2:	633b      	str	r3, [r7, #48]	; 0x30
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 801fbb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fbb6:	69bb      	ldr	r3, [r7, #24]
 801fbb8:	441a      	add	r2, r3
 801fbba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fbbe:	429a      	cmp	r2, r3
 801fbc0:	da07      	bge.n	801fbd2 <shadow_blur_corner+0xa4>
 801fbc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fbc4:	69bb      	ldr	r3, [r7, #24]
 801fbc6:	4413      	add	r3, r2
 801fbc8:	005b      	lsls	r3, r3, #1
 801fbca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fbcc:	4413      	add	r3, r2
 801fbce:	881b      	ldrh	r3, [r3, #0]
 801fbd0:	633b      	str	r3, [r7, #48]	; 0x30
            v -= right_val;
 801fbd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fbd6:	1ad3      	subs	r3, r2, r3
 801fbd8:	637b      	str	r3, [r7, #52]	; 0x34

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 801fbda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fbdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fbde:	1ad3      	subs	r3, r2, r3
 801fbe0:	2b00      	cmp	r3, #0
 801fbe2:	dc03      	bgt.n	801fbec <shadow_blur_corner+0xbe>
 801fbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbe6:	881b      	ldrh	r3, [r3, #0]
 801fbe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801fbea:	e00b      	b.n	801fc04 <shadow_blur_corner+0xd6>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 801fbec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fbee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fbf0:	1ad3      	subs	r3, r2, r3
 801fbf2:	461a      	mov	r2, r3
 801fbf4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801fbf8:	4413      	add	r3, r2
 801fbfa:	005b      	lsls	r3, r3, #1
 801fbfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fbfe:	4413      	add	r3, r2
 801fc00:	881b      	ldrh	r3, [r3, #0]
 801fc02:	62fb      	str	r3, [r7, #44]	; 0x2c
            v += left_val;
 801fc04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fc08:	4413      	add	r3, r2
 801fc0a:	637b      	str	r3, [r7, #52]	; 0x34
        for(x = size - 1; x >= 0; x--) {
 801fc0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fc0e:	3b01      	subs	r3, #1
 801fc10:	643b      	str	r3, [r7, #64]	; 0x40
 801fc12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fc14:	2b00      	cmp	r3, #0
 801fc16:	dac4      	bge.n	801fba2 <shadow_blur_corner+0x74>
        }
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 801fc18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fc1c:	005b      	lsls	r3, r3, #1
 801fc1e:	461a      	mov	r2, r3
 801fc20:	6979      	ldr	r1, [r7, #20]
 801fc22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801fc24:	f004 faf4 	bl	8024210 <lv_memcpy>
        sh_ups_tmp_buf += size;
 801fc28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fc2c:	005b      	lsls	r3, r3, #1
 801fc2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fc30:	4413      	add	r3, r2
 801fc32:	63bb      	str	r3, [r7, #56]	; 0x38
    for(y = 0; y < size; y++) {
 801fc34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fc36:	3301      	adds	r3, #1
 801fc38:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fc3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fc3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fc40:	429a      	cmp	r2, r3
 801fc42:	db9a      	blt.n	801fb7a <shadow_blur_corner+0x4c>
    }

    /*Vertical blur*/
    uint32_t i;
    uint32_t max_v = LV_OPA_COVER << SHADOW_UPSCALE_SHIFT;
 801fc44:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 801fc48:	613b      	str	r3, [r7, #16]
    uint32_t max_v_div = max_v / sw;
 801fc4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801fc4e:	693a      	ldr	r2, [r7, #16]
 801fc50:	fbb2 f3f3 	udiv	r3, r2, r3
 801fc54:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < (uint32_t)size * size; i++) {
 801fc56:	2300      	movs	r3, #0
 801fc58:	62bb      	str	r3, [r7, #40]	; 0x28
 801fc5a:	e02c      	b.n	801fcb6 <shadow_blur_corner+0x188>
        if(sh_ups_buf[i] == 0) continue;
 801fc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc5e:	005b      	lsls	r3, r3, #1
 801fc60:	683a      	ldr	r2, [r7, #0]
 801fc62:	4413      	add	r3, r2
 801fc64:	881b      	ldrh	r3, [r3, #0]
 801fc66:	2b00      	cmp	r3, #0
 801fc68:	d021      	beq.n	801fcae <shadow_blur_corner+0x180>
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 801fc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc6c:	005b      	lsls	r3, r3, #1
 801fc6e:	683a      	ldr	r2, [r7, #0]
 801fc70:	4413      	add	r3, r2
 801fc72:	881b      	ldrh	r3, [r3, #0]
 801fc74:	461a      	mov	r2, r3
 801fc76:	693b      	ldr	r3, [r7, #16]
 801fc78:	4293      	cmp	r3, r2
 801fc7a:	d107      	bne.n	801fc8c <shadow_blur_corner+0x15e>
 801fc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc7e:	005b      	lsls	r3, r3, #1
 801fc80:	683a      	ldr	r2, [r7, #0]
 801fc82:	4413      	add	r3, r2
 801fc84:	68fa      	ldr	r2, [r7, #12]
 801fc86:	b292      	uxth	r2, r2
 801fc88:	801a      	strh	r2, [r3, #0]
 801fc8a:	e011      	b.n	801fcb0 <shadow_blur_corner+0x182>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 801fc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc8e:	005b      	lsls	r3, r3, #1
 801fc90:	683a      	ldr	r2, [r7, #0]
 801fc92:	4413      	add	r3, r2
 801fc94:	881b      	ldrh	r3, [r3, #0]
 801fc96:	461a      	mov	r2, r3
 801fc98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801fc9c:	fb92 f1f3 	sdiv	r1, r2, r3
 801fca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fca2:	005b      	lsls	r3, r3, #1
 801fca4:	683a      	ldr	r2, [r7, #0]
 801fca6:	4413      	add	r3, r2
 801fca8:	b28a      	uxth	r2, r1
 801fcaa:	801a      	strh	r2, [r3, #0]
 801fcac:	e000      	b.n	801fcb0 <shadow_blur_corner+0x182>
        if(sh_ups_buf[i] == 0) continue;
 801fcae:	bf00      	nop
    for(i = 0; i < (uint32_t)size * size; i++) {
 801fcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fcb2:	3301      	adds	r3, #1
 801fcb4:	62bb      	str	r3, [r7, #40]	; 0x28
 801fcb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fcba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801fcbe:	fb02 f303 	mul.w	r3, r2, r3
 801fcc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fcc4:	429a      	cmp	r2, r3
 801fcc6:	d3c9      	bcc.n	801fc5c <shadow_blur_corner+0x12e>
    }

    for(x = 0; x < size; x++) {
 801fcc8:	2300      	movs	r3, #0
 801fcca:	643b      	str	r3, [r7, #64]	; 0x40
 801fccc:	e090      	b.n	801fdf0 <shadow_blur_corner+0x2c2>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 801fcce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fcd0:	005b      	lsls	r3, r3, #1
 801fcd2:	683a      	ldr	r2, [r7, #0]
 801fcd4:	4413      	add	r3, r2
 801fcd6:	63bb      	str	r3, [r7, #56]	; 0x38
        int32_t v = sh_ups_tmp_buf[0] * sw;
 801fcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fcda:	881b      	ldrh	r3, [r3, #0]
 801fcdc:	461a      	mov	r2, r3
 801fcde:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801fce2:	fb02 f303 	mul.w	r3, r2, r3
 801fce6:	627b      	str	r3, [r7, #36]	; 0x24
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 801fce8:	2300      	movs	r3, #0
 801fcea:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fcec:	e05b      	b.n	801fda6 <shadow_blur_corner+0x278>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 801fcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fcf0:	2b00      	cmp	r3, #0
 801fcf2:	db03      	blt.n	801fcfc <shadow_blur_corner+0x1ce>
 801fcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fcf6:	119b      	asrs	r3, r3, #6
 801fcf8:	b299      	uxth	r1, r3
 801fcfa:	e000      	b.n	801fcfe <shadow_blur_corner+0x1d0>
 801fcfc:	2100      	movs	r1, #0
 801fcfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fd00:	005b      	lsls	r3, r3, #1
 801fd02:	697a      	ldr	r2, [r7, #20]
 801fd04:	4413      	add	r3, r2
 801fd06:	460a      	mov	r2, r1
 801fd08:	801a      	strh	r2, [r3, #0]

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 801fd0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fd0c:	69bb      	ldr	r3, [r7, #24]
 801fd0e:	1ad3      	subs	r3, r2, r3
 801fd10:	2b00      	cmp	r3, #0
 801fd12:	dc03      	bgt.n	801fd1c <shadow_blur_corner+0x1ee>
 801fd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fd16:	881b      	ldrh	r3, [r3, #0]
 801fd18:	623b      	str	r3, [r7, #32]
 801fd1a:	e00d      	b.n	801fd38 <shadow_blur_corner+0x20a>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 801fd1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fd1e:	69bb      	ldr	r3, [r7, #24]
 801fd20:	1ad3      	subs	r3, r2, r3
 801fd22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801fd26:	fb03 f202 	mul.w	r2, r3, r2
 801fd2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fd2c:	4413      	add	r3, r2
 801fd2e:	005b      	lsls	r3, r3, #1
 801fd30:	683a      	ldr	r2, [r7, #0]
 801fd32:	4413      	add	r3, r2
 801fd34:	881b      	ldrh	r3, [r3, #0]
 801fd36:	623b      	str	r3, [r7, #32]
            v -= top_val;
 801fd38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fd3a:	6a3b      	ldr	r3, [r7, #32]
 801fd3c:	1ad3      	subs	r3, r2, r3
 801fd3e:	627b      	str	r3, [r7, #36]	; 0x24

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 801fd40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fd42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fd44:	4413      	add	r3, r2
 801fd46:	1c5a      	adds	r2, r3, #1
 801fd48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fd4c:	429a      	cmp	r2, r3
 801fd4e:	da0f      	bge.n	801fd70 <shadow_blur_corner+0x242>
 801fd50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fd52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fd54:	4413      	add	r3, r2
 801fd56:	3301      	adds	r3, #1
 801fd58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801fd5c:	fb03 f202 	mul.w	r2, r3, r2
 801fd60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fd62:	4413      	add	r3, r2
 801fd64:	005b      	lsls	r3, r3, #1
 801fd66:	683a      	ldr	r2, [r7, #0]
 801fd68:	4413      	add	r3, r2
 801fd6a:	881b      	ldrh	r3, [r3, #0]
 801fd6c:	61fb      	str	r3, [r7, #28]
 801fd6e:	e00d      	b.n	801fd8c <shadow_blur_corner+0x25e>
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 801fd70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fd74:	3b01      	subs	r3, #1
 801fd76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801fd7a:	fb03 f202 	mul.w	r2, r3, r2
 801fd7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fd80:	4413      	add	r3, r2
 801fd82:	005b      	lsls	r3, r3, #1
 801fd84:	683a      	ldr	r2, [r7, #0]
 801fd86:	4413      	add	r3, r2
 801fd88:	881b      	ldrh	r3, [r3, #0]
 801fd8a:	61fb      	str	r3, [r7, #28]
            v += bottom_val;
 801fd8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fd8e:	69fb      	ldr	r3, [r7, #28]
 801fd90:	4413      	add	r3, r2
 801fd92:	627b      	str	r3, [r7, #36]	; 0x24
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 801fd94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fd96:	3301      	adds	r3, #1
 801fd98:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fd9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fd9e:	005b      	lsls	r3, r3, #1
 801fda0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fda2:	4413      	add	r3, r2
 801fda4:	63bb      	str	r3, [r7, #56]	; 0x38
 801fda6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fdaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fdac:	429a      	cmp	r2, r3
 801fdae:	db9e      	blt.n	801fcee <shadow_blur_corner+0x1c0>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
 801fdb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fdb2:	005b      	lsls	r3, r3, #1
 801fdb4:	683a      	ldr	r2, [r7, #0]
 801fdb6:	4413      	add	r3, r2
 801fdb8:	63bb      	str	r3, [r7, #56]	; 0x38
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 801fdba:	2300      	movs	r3, #0
 801fdbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fdbe:	e00f      	b.n	801fde0 <shadow_blur_corner+0x2b2>
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 801fdc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fdc2:	005b      	lsls	r3, r3, #1
 801fdc4:	697a      	ldr	r2, [r7, #20]
 801fdc6:	4413      	add	r3, r2
 801fdc8:	881a      	ldrh	r2, [r3, #0]
 801fdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fdcc:	801a      	strh	r2, [r3, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 801fdce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fdd0:	3301      	adds	r3, #1
 801fdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fdd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fdd8:	005b      	lsls	r3, r3, #1
 801fdda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fddc:	4413      	add	r3, r2
 801fdde:	63bb      	str	r3, [r7, #56]	; 0x38
 801fde0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fde4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fde6:	429a      	cmp	r2, r3
 801fde8:	dbea      	blt.n	801fdc0 <shadow_blur_corner+0x292>
    for(x = 0; x < size; x++) {
 801fdea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fdec:	3301      	adds	r3, #1
 801fdee:	643b      	str	r3, [r7, #64]	; 0x40
 801fdf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fdf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fdf6:	429a      	cmp	r2, r3
 801fdf8:	f6ff af69 	blt.w	801fcce <shadow_blur_corner+0x1a0>
        }
    }

    lv_mem_buf_release(sh_ups_blur_buf);
 801fdfc:	6978      	ldr	r0, [r7, #20]
 801fdfe:	f004 f9af 	bl	8024160 <lv_mem_buf_release>
}
 801fe02:	bf00      	nop
 801fe04:	3748      	adds	r7, #72	; 0x48
 801fe06:	46bd      	mov	sp, r7
 801fe08:	bd80      	pop	{r7, pc}

0801fe0a <draw_outline>:
#endif

static void draw_outline(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 801fe0a:	b5b0      	push	{r4, r5, r7, lr}
 801fe0c:	b092      	sub	sp, #72	; 0x48
 801fe0e:	af04      	add	r7, sp, #16
 801fe10:	60f8      	str	r0, [r7, #12]
 801fe12:	60b9      	str	r1, [r7, #8]
 801fe14:	607a      	str	r2, [r7, #4]
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 801fe16:	68bb      	ldr	r3, [r7, #8]
 801fe18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801fe1c:	2b02      	cmp	r3, #2
 801fe1e:	f240 80b7 	bls.w	801ff90 <draw_outline+0x186>
    if(dsc->outline_width == 0) return;
 801fe22:	68bb      	ldr	r3, [r7, #8]
 801fe24:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801fe28:	2b00      	cmp	r3, #0
 801fe2a:	f000 80b3 	beq.w	801ff94 <draw_outline+0x18a>

    lv_opa_t opa = dsc->outline_opa;
 801fe2e:	68bb      	ldr	r3, [r7, #8]
 801fe30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801fe34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 801fe38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801fe3c:	2bfd      	cmp	r3, #253	; 0xfd
 801fe3e:	d902      	bls.n	801fe46 <draw_outline+0x3c>
 801fe40:	23ff      	movs	r3, #255	; 0xff
 801fe42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    /*Get the inner radius*/
    lv_area_t area_inner;
    lv_area_copy(&area_inner, coords);
 801fe46:	f107 0318 	add.w	r3, r7, #24
 801fe4a:	6879      	ldr	r1, [r7, #4]
 801fe4c:	4618      	mov	r0, r3
 801fe4e:	f7fd fc0f 	bl	801d670 <lv_area_copy>

    /*Bring the outline closer to make sure there is no color bleeding with pad=0*/
    lv_coord_t pad = dsc->outline_pad - 1;
 801fe52:	68bb      	ldr	r3, [r7, #8]
 801fe54:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801fe58:	b29b      	uxth	r3, r3
 801fe5a:	3b01      	subs	r3, #1
 801fe5c:	b29b      	uxth	r3, r3
 801fe5e:	863b      	strh	r3, [r7, #48]	; 0x30
    area_inner.x1 -= pad;
 801fe60:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801fe64:	b29a      	uxth	r2, r3
 801fe66:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801fe68:	1ad3      	subs	r3, r2, r3
 801fe6a:	b29b      	uxth	r3, r3
 801fe6c:	b21b      	sxth	r3, r3
 801fe6e:	833b      	strh	r3, [r7, #24]
    area_inner.y1 -= pad;
 801fe70:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801fe74:	b29a      	uxth	r2, r3
 801fe76:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801fe78:	1ad3      	subs	r3, r2, r3
 801fe7a:	b29b      	uxth	r3, r3
 801fe7c:	b21b      	sxth	r3, r3
 801fe7e:	837b      	strh	r3, [r7, #26]
    area_inner.x2 += pad;
 801fe80:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801fe84:	b29a      	uxth	r2, r3
 801fe86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801fe88:	4413      	add	r3, r2
 801fe8a:	b29b      	uxth	r3, r3
 801fe8c:	b21b      	sxth	r3, r3
 801fe8e:	83bb      	strh	r3, [r7, #28]
    area_inner.y2 += pad;
 801fe90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801fe94:	b29a      	uxth	r2, r3
 801fe96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801fe98:	4413      	add	r3, r2
 801fe9a:	b29b      	uxth	r3, r3
 801fe9c:	b21b      	sxth	r3, r3
 801fe9e:	83fb      	strh	r3, [r7, #30]

    lv_area_t area_outer;
    lv_area_copy(&area_outer, &area_inner);
 801fea0:	f107 0218 	add.w	r2, r7, #24
 801fea4:	f107 0310 	add.w	r3, r7, #16
 801fea8:	4611      	mov	r1, r2
 801feaa:	4618      	mov	r0, r3
 801feac:	f7fd fbe0 	bl	801d670 <lv_area_copy>

    area_outer.x1 -= dsc->outline_width;
 801feb0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801feb4:	b29a      	uxth	r2, r3
 801feb6:	68bb      	ldr	r3, [r7, #8]
 801feb8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801febc:	b29b      	uxth	r3, r3
 801febe:	1ad3      	subs	r3, r2, r3
 801fec0:	b29b      	uxth	r3, r3
 801fec2:	b21b      	sxth	r3, r3
 801fec4:	823b      	strh	r3, [r7, #16]
    area_outer.x2 += dsc->outline_width;
 801fec6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801feca:	b29a      	uxth	r2, r3
 801fecc:	68bb      	ldr	r3, [r7, #8]
 801fece:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801fed2:	b29b      	uxth	r3, r3
 801fed4:	4413      	add	r3, r2
 801fed6:	b29b      	uxth	r3, r3
 801fed8:	b21b      	sxth	r3, r3
 801feda:	82bb      	strh	r3, [r7, #20]
    area_outer.y1 -= dsc->outline_width;
 801fedc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801fee0:	b29a      	uxth	r2, r3
 801fee2:	68bb      	ldr	r3, [r7, #8]
 801fee4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801fee8:	b29b      	uxth	r3, r3
 801feea:	1ad3      	subs	r3, r2, r3
 801feec:	b29b      	uxth	r3, r3
 801feee:	b21b      	sxth	r3, r3
 801fef0:	827b      	strh	r3, [r7, #18]
    area_outer.y2 += dsc->outline_width;
 801fef2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801fef6:	b29a      	uxth	r2, r3
 801fef8:	68bb      	ldr	r3, [r7, #8]
 801fefa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801fefe:	b29b      	uxth	r3, r3
 801ff00:	4413      	add	r3, r2
 801ff02:	b29b      	uxth	r3, r3
 801ff04:	b21b      	sxth	r3, r3
 801ff06:	82fb      	strh	r3, [r7, #22]


    int32_t inner_w = lv_area_get_width(&area_inner);
 801ff08:	f107 0318 	add.w	r3, r7, #24
 801ff0c:	4618      	mov	r0, r3
 801ff0e:	f7fd fbce 	bl	801d6ae <lv_area_get_width>
 801ff12:	4603      	mov	r3, r0
 801ff14:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t inner_h = lv_area_get_height(&area_inner);
 801ff16:	f107 0318 	add.w	r3, r7, #24
 801ff1a:	4618      	mov	r0, r3
 801ff1c:	f7fd fbde 	bl	801d6dc <lv_area_get_height>
 801ff20:	4603      	mov	r3, r0
 801ff22:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t rin = dsc->radius;
 801ff24:	68bb      	ldr	r3, [r7, #8]
 801ff26:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ff2a:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t short_side = LV_MIN(inner_w, inner_h);
 801ff2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ff2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff30:	4293      	cmp	r3, r2
 801ff32:	bfa8      	it	ge
 801ff34:	4613      	movge	r3, r2
 801ff36:	627b      	str	r3, [r7, #36]	; 0x24
    if(rin > short_side >> 1) rin = short_side >> 1;
 801ff38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff3a:	105b      	asrs	r3, r3, #1
 801ff3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ff3e:	429a      	cmp	r2, r3
 801ff40:	dd02      	ble.n	801ff48 <draw_outline+0x13e>
 801ff42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff44:	105b      	asrs	r3, r3, #1
 801ff46:	637b      	str	r3, [r7, #52]	; 0x34

    lv_coord_t rout = rin + dsc->outline_width;
 801ff48:	68bb      	ldr	r3, [r7, #8]
 801ff4a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801ff4e:	b29a      	uxth	r2, r3
 801ff50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ff52:	b29b      	uxth	r3, r3
 801ff54:	4413      	add	r3, r2
 801ff56:	b29b      	uxth	r3, r3
 801ff58:	847b      	strh	r3, [r7, #34]	; 0x22

    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 801ff5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ff5c:	b21b      	sxth	r3, r3
 801ff5e:	68ba      	ldr	r2, [r7, #8]
 801ff60:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 801ff64:	68b9      	ldr	r1, [r7, #8]
 801ff66:	7889      	ldrb	r1, [r1, #2]
 801ff68:	f9b7 5022 	ldrsh.w	r5, [r7, #34]	; 0x22
 801ff6c:	f107 0418 	add.w	r4, r7, #24
 801ff70:	f107 0010 	add.w	r0, r7, #16
 801ff74:	9103      	str	r1, [sp, #12]
 801ff76:	9202      	str	r2, [sp, #8]
 801ff78:	68ba      	ldr	r2, [r7, #8]
 801ff7a:	7f92      	ldrb	r2, [r2, #30]
 801ff7c:	f88d 2004 	strb.w	r2, [sp, #4]
 801ff80:	9300      	str	r3, [sp, #0]
 801ff82:	462b      	mov	r3, r5
 801ff84:	4622      	mov	r2, r4
 801ff86:	4601      	mov	r1, r0
 801ff88:	68f8      	ldr	r0, [r7, #12]
 801ff8a:	f000 f807 	bl	801ff9c <draw_border_generic>
 801ff8e:	e002      	b.n	801ff96 <draw_outline+0x18c>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 801ff90:	bf00      	nop
 801ff92:	e000      	b.n	801ff96 <draw_outline+0x18c>
    if(dsc->outline_width == 0) return;
 801ff94:	bf00      	nop
                        dsc->blend_mode);
}
 801ff96:	3738      	adds	r7, #56	; 0x38
 801ff98:	46bd      	mov	sp, r7
 801ff9a:	bdb0      	pop	{r4, r5, r7, pc}

0801ff9c <draw_border_generic>:

void draw_border_generic(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                         lv_coord_t rout, lv_coord_t rin, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 801ff9c:	b580      	push	{r7, lr}
 801ff9e:	b0a8      	sub	sp, #160	; 0xa0
 801ffa0:	af02      	add	r7, sp, #8
 801ffa2:	60f8      	str	r0, [r7, #12]
 801ffa4:	60b9      	str	r1, [r7, #8]
 801ffa6:	607a      	str	r2, [r7, #4]
 801ffa8:	807b      	strh	r3, [r7, #2]
    opa = opa >= LV_OPA_COVER ? LV_OPA_COVER : opa;

    bool mask_any = lv_draw_mask_is_any(outer_area);
 801ffaa:	68b8      	ldr	r0, [r7, #8]
 801ffac:	f7f3 fe3c 	bl	8013c28 <lv_draw_mask_is_any>
 801ffb0:	4603      	mov	r3, r0
 801ffb2:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

#if LV_DRAW_COMPLEX

    if(!mask_any && rout == 0 && rin == 0) {
 801ffb6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801ffba:	f083 0301 	eor.w	r3, r3, #1
 801ffbe:	b2db      	uxtb	r3, r3
 801ffc0:	2b00      	cmp	r3, #0
 801ffc2:	d012      	beq.n	801ffea <draw_border_generic+0x4e>
 801ffc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	d10e      	bne.n	801ffea <draw_border_generic+0x4e>
 801ffcc:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 801ffd0:	2b00      	cmp	r3, #0
 801ffd2:	d10a      	bne.n	801ffea <draw_border_generic+0x4e>
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
 801ffd4:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 801ffd8:	9300      	str	r3, [sp, #0]
 801ffda:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 801ffde:	687a      	ldr	r2, [r7, #4]
 801ffe0:	68b9      	ldr	r1, [r7, #8]
 801ffe2:	68f8      	ldr	r0, [r7, #12]
 801ffe4:	f000 fbb0 	bl	8020748 <draw_border_simple>
        return;
 801ffe8:	e3ab      	b.n	8020742 <draw_border_generic+0x7a6>
    }

    /*Get clipped draw area which is the real draw area.
     *It is always the same or inside `coords`*/
    lv_area_t draw_area;
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 801ffea:	68fb      	ldr	r3, [r7, #12]
 801ffec:	689a      	ldr	r2, [r3, #8]
 801ffee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801fff2:	68b9      	ldr	r1, [r7, #8]
 801fff4:	4618      	mov	r0, r3
 801fff6:	f002 fc5d 	bl	80228b4 <_lv_area_intersect>
 801fffa:	4603      	mov	r3, r0
 801fffc:	f083 0301 	eor.w	r3, r3, #1
 8020000:	b2db      	uxtb	r3, r3
 8020002:	2b00      	cmp	r3, #0
 8020004:	f040 839c 	bne.w	8020740 <draw_border_generic+0x7a4>
    int32_t draw_area_w = lv_area_get_width(&draw_area);
 8020008:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802000c:	4618      	mov	r0, r3
 802000e:	f7fd fb4e 	bl	801d6ae <lv_area_get_width>
 8020012:	4603      	mov	r3, r0
 8020014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8020018:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802001c:	211c      	movs	r1, #28
 802001e:	4618      	mov	r0, r3
 8020020:	f004 fb9c 	bl	802475c <lv_memset_00>
    blend_dsc.mask_buf = lv_mem_buf_get(draw_area_w);;
 8020024:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8020028:	4618      	mov	r0, r3
 802002a:	f003 ffed 	bl	8024008 <lv_mem_buf_get>
 802002e:	4603      	mov	r3, r0
 8020030:	663b      	str	r3, [r7, #96]	; 0x60


    /*Create mask for the outer area*/
    int16_t mask_rout_id = LV_MASK_ID_INV;
 8020032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020036:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    lv_draw_mask_radius_param_t mask_rout_param;
    if(rout > 0) {
 802003a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802003e:	2b00      	cmp	r3, #0
 8020040:	dd10      	ble.n	8020064 <draw_border_generic+0xc8>
        lv_draw_mask_radius_init(&mask_rout_param, outer_area, rout, false);
 8020042:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8020046:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 802004a:	2300      	movs	r3, #0
 802004c:	68b9      	ldr	r1, [r7, #8]
 802004e:	f7f4 f887 	bl	8014160 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8020052:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8020056:	2100      	movs	r1, #0
 8020058:	4618      	mov	r0, r3
 802005a:	f7f3 fcb5 	bl	80139c8 <lv_draw_mask_add>
 802005e:	4603      	mov	r3, r0
 8020060:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    }

    /*Create mask for the inner mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, inner_area, rin, true);
 8020064:	f9b7 20a0 	ldrsh.w	r2, [r7, #160]	; 0xa0
 8020068:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802006c:	2301      	movs	r3, #1
 802006e:	6879      	ldr	r1, [r7, #4]
 8020070:	f7f4 f876 	bl	8014160 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 8020074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020078:	2100      	movs	r1, #0
 802007a:	4618      	mov	r0, r3
 802007c:	f7f3 fca4 	bl	80139c8 <lv_draw_mask_add>
 8020080:	4603      	mov	r3, r0
 8020082:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    int32_t h;
    lv_area_t blend_area;
    blend_dsc.blend_area = &blend_area;
 8020086:	f107 031c 	add.w	r3, r7, #28
 802008a:	657b      	str	r3, [r7, #84]	; 0x54
    blend_dsc.mask_area = &blend_area;
 802008c:	f107 031c 	add.w	r3, r7, #28
 8020090:	66bb      	str	r3, [r7, #104]	; 0x68
    blend_dsc.color = color;
 8020092:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8020096:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
    blend_dsc.opa = opa;
 802009a:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 802009e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    blend_dsc.blend_mode = blend_mode;
 80200a2:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80200a6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

    /*Calculate the x and y coordinates where the straight parts area*/
    lv_area_t core_area;
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 80200aa:	687b      	ldr	r3, [r7, #4]
 80200ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80200b0:	461a      	mov	r2, r3
 80200b2:	68bb      	ldr	r3, [r7, #8]
 80200b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80200b8:	4619      	mov	r1, r3
 80200ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80200be:	440b      	add	r3, r1
 80200c0:	4293      	cmp	r3, r2
 80200c2:	bfb8      	it	lt
 80200c4:	4613      	movlt	r3, r2
 80200c6:	b21b      	sxth	r3, r3
 80200c8:	82bb      	strh	r3, [r7, #20]
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 80200ca:	687b      	ldr	r3, [r7, #4]
 80200cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80200d0:	461a      	mov	r2, r3
 80200d2:	68bb      	ldr	r3, [r7, #8]
 80200d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80200d8:	4619      	mov	r1, r3
 80200da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80200de:	1acb      	subs	r3, r1, r3
 80200e0:	4293      	cmp	r3, r2
 80200e2:	bfa8      	it	ge
 80200e4:	4613      	movge	r3, r2
 80200e6:	b21b      	sxth	r3, r3
 80200e8:	833b      	strh	r3, [r7, #24]
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 80200ea:	687b      	ldr	r3, [r7, #4]
 80200ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80200f0:	461a      	mov	r2, r3
 80200f2:	68bb      	ldr	r3, [r7, #8]
 80200f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80200f8:	4619      	mov	r1, r3
 80200fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80200fe:	440b      	add	r3, r1
 8020100:	4293      	cmp	r3, r2
 8020102:	bfb8      	it	lt
 8020104:	4613      	movlt	r3, r2
 8020106:	b21b      	sxth	r3, r3
 8020108:	82fb      	strh	r3, [r7, #22]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 802010a:	687b      	ldr	r3, [r7, #4]
 802010c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020110:	461a      	mov	r2, r3
 8020112:	68bb      	ldr	r3, [r7, #8]
 8020114:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020118:	4619      	mov	r1, r3
 802011a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802011e:	1acb      	subs	r3, r1, r3
 8020120:	4293      	cmp	r3, r2
 8020122:	bfa8      	it	ge
 8020124:	4613      	movge	r3, r2
 8020126:	b21b      	sxth	r3, r3
 8020128:	837b      	strh	r3, [r7, #26]
    lv_coord_t core_w = lv_area_get_width(&core_area);
 802012a:	f107 0314 	add.w	r3, r7, #20
 802012e:	4618      	mov	r0, r3
 8020130:	f7fd fabd 	bl	801d6ae <lv_area_get_width>
 8020134:	4603      	mov	r3, r0
 8020136:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 802013a:	68bb      	ldr	r3, [r7, #8]
 802013c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020140:	687b      	ldr	r3, [r7, #4]
 8020142:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020146:	429a      	cmp	r2, r3
 8020148:	bfd4      	ite	le
 802014a:	2301      	movle	r3, #1
 802014c:	2300      	movgt	r3, #0
 802014e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 8020152:	68bb      	ldr	r3, [r7, #8]
 8020154:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020158:	687b      	ldr	r3, [r7, #4]
 802015a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802015e:	429a      	cmp	r2, r3
 8020160:	bfac      	ite	ge
 8020162:	2301      	movge	r3, #1
 8020164:	2300      	movlt	r3, #0
 8020166:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

    /*If there is other masks, need to draw line by line*/
    if(mask_any) {
 802016a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 802016e:	2b00      	cmp	r3, #0
 8020170:	d077      	beq.n	8020262 <draw_border_generic+0x2c6>
        blend_area.x1 = draw_area.x1;
 8020172:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8020176:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 8020178:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 802017c:	843b      	strh	r3, [r7, #32]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 802017e:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8020182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8020186:	e045      	b.n	8020214 <draw_border_generic+0x278>
            if(!top_side && h < core_area.y1) continue;
 8020188:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 802018c:	f083 0301 	eor.w	r3, r3, #1
 8020190:	b2db      	uxtb	r3, r3
 8020192:	2b00      	cmp	r3, #0
 8020194:	d006      	beq.n	80201a4 <draw_border_generic+0x208>
 8020196:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802019a:	461a      	mov	r2, r3
 802019c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80201a0:	4293      	cmp	r3, r2
 80201a2:	db31      	blt.n	8020208 <draw_border_generic+0x26c>
            if(!bottom_side && h > core_area.y2) break;
 80201a4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80201a8:	f083 0301 	eor.w	r3, r3, #1
 80201ac:	b2db      	uxtb	r3, r3
 80201ae:	2b00      	cmp	r3, #0
 80201b0:	d006      	beq.n	80201c0 <draw_border_generic+0x224>
 80201b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80201b6:	461a      	mov	r2, r3
 80201b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80201bc:	4293      	cmp	r3, r2
 80201be:	dc31      	bgt.n	8020224 <draw_border_generic+0x288>

            blend_area.y1 = h;
 80201c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80201c4:	b21b      	sxth	r3, r3
 80201c6:	83fb      	strh	r3, [r7, #30]
            blend_area.y2 = h;
 80201c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80201cc:	b21b      	sxth	r3, r3
 80201ce:	847b      	strh	r3, [r7, #34]	; 0x22

            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 80201d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80201d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80201d6:	4611      	mov	r1, r2
 80201d8:	4618      	mov	r0, r3
 80201da:	f004 fb40 	bl	802485e <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, draw_area.x1, h, draw_area_w);
 80201de:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80201e0:	f9b7 1070 	ldrsh.w	r1, [r7, #112]	; 0x70
 80201e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80201e8:	b21a      	sxth	r2, r3
 80201ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80201ee:	b21b      	sxth	r3, r3
 80201f0:	f7f3 fc1c 	bl	8013a2c <lv_draw_mask_apply>
 80201f4:	4603      	mov	r3, r0
 80201f6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80201fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80201fe:	4619      	mov	r1, r3
 8020200:	68f8      	ldr	r0, [r7, #12]
 8020202:	f7f8 ffe1 	bl	80191c8 <lv_draw_sw_blend>
 8020206:	e000      	b.n	802020a <draw_border_generic+0x26e>
            if(!top_side && h < core_area.y1) continue;
 8020208:	bf00      	nop
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 802020a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802020e:	3301      	adds	r3, #1
 8020210:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8020214:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8020218:	461a      	mov	r2, r3
 802021a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802021e:	4293      	cmp	r3, r2
 8020220:	ddb2      	ble.n	8020188 <draw_border_generic+0x1ec>
 8020222:	e000      	b.n	8020226 <draw_border_generic+0x28a>
            if(!bottom_side && h > core_area.y2) break;
 8020224:	bf00      	nop
        }

        lv_draw_mask_free_param(&mask_rin_param);
 8020226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802022a:	4618      	mov	r0, r3
 802022c:	f7f3 fc92 	bl	8013b54 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rin_id);
 8020230:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8020234:	4618      	mov	r0, r3
 8020236:	f7f3 fc3d 	bl	8013ab4 <lv_draw_mask_remove_id>
        if(mask_rout_id != LV_MASK_ID_INV) {
 802023a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 802023e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020242:	d009      	beq.n	8020258 <draw_border_generic+0x2bc>
            lv_draw_mask_free_param(&mask_rout_param);
 8020244:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8020248:	4618      	mov	r0, r3
 802024a:	f7f3 fc83 	bl	8013b54 <lv_draw_mask_free_param>
            lv_draw_mask_remove_id(mask_rout_id);
 802024e:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8020252:	4618      	mov	r0, r3
 8020254:	f7f3 fc2e 	bl	8013ab4 <lv_draw_mask_remove_id>
        }
        lv_mem_buf_release(blend_dsc.mask_buf);
 8020258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802025a:	4618      	mov	r0, r3
 802025c:	f003 ff80 	bl	8024160 <lv_mem_buf_release>
        return;
 8020260:	e26f      	b.n	8020742 <draw_border_generic+0x7a6>
    }

    /*No masks*/
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 8020262:	68bb      	ldr	r3, [r7, #8]
 8020264:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020268:	687b      	ldr	r3, [r7, #4]
 802026a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802026e:	429a      	cmp	r2, r3
 8020270:	bfd4      	ite	le
 8020272:	2301      	movle	r3, #1
 8020274:	2300      	movgt	r3, #0
 8020276:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 802027a:	68bb      	ldr	r3, [r7, #8]
 802027c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020286:	429a      	cmp	r2, r3
 8020288:	bfac      	ite	ge
 802028a:	2301      	movge	r3, #1
 802028c:	2300      	movlt	r3, #0
 802028e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    bool split_hor = true;
 8020292:	2301      	movs	r3, #1
 8020294:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    if(left_side && right_side && top_side && bottom_side &&
 8020298:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 802029c:	2b00      	cmp	r3, #0
 802029e:	d012      	beq.n	80202c6 <draw_border_generic+0x32a>
 80202a0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80202a4:	2b00      	cmp	r3, #0
 80202a6:	d00e      	beq.n	80202c6 <draw_border_generic+0x32a>
 80202a8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	d00a      	beq.n	80202c6 <draw_border_generic+0x32a>
 80202b0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80202b4:	2b00      	cmp	r3, #0
 80202b6:	d006      	beq.n	80202c6 <draw_border_generic+0x32a>
 80202b8:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 80202bc:	2b31      	cmp	r3, #49	; 0x31
 80202be:	dc02      	bgt.n	80202c6 <draw_border_generic+0x32a>
       core_w < SPLIT_LIMIT) {
        split_hor = false;
 80202c0:	2300      	movs	r3, #0
 80202c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 80202c6:	2301      	movs	r3, #1
 80202c8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    /*Draw the straight lines first if they are long enough*/
    if(top_side && split_hor) {
 80202cc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80202d0:	2b00      	cmp	r3, #0
 80202d2:	d01b      	beq.n	802030c <draw_border_generic+0x370>
 80202d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80202d8:	2b00      	cmp	r3, #0
 80202da:	d017      	beq.n	802030c <draw_border_generic+0x370>
        blend_area.x1 = core_area.x1;
 80202dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80202e0:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = core_area.x2;
 80202e2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80202e6:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = outer_area->y1;
 80202e8:	68bb      	ldr	r3, [r7, #8]
 80202ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80202ee:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = inner_area->y1 - 1;
 80202f0:	687b      	ldr	r3, [r7, #4]
 80202f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80202f6:	b29b      	uxth	r3, r3
 80202f8:	3b01      	subs	r3, #1
 80202fa:	b29b      	uxth	r3, r3
 80202fc:	b21b      	sxth	r3, r3
 80202fe:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8020300:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8020304:	4619      	mov	r1, r3
 8020306:	68f8      	ldr	r0, [r7, #12]
 8020308:	f7f8 ff5e 	bl	80191c8 <lv_draw_sw_blend>
    }

    if(bottom_side && split_hor) {
 802030c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8020310:	2b00      	cmp	r3, #0
 8020312:	d01b      	beq.n	802034c <draw_border_generic+0x3b0>
 8020314:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8020318:	2b00      	cmp	r3, #0
 802031a:	d017      	beq.n	802034c <draw_border_generic+0x3b0>
        blend_area.x1 = core_area.x1;
 802031c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020320:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = core_area.x2;
 8020322:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8020326:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = inner_area->y2 + 1;
 8020328:	687b      	ldr	r3, [r7, #4]
 802032a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802032e:	b29b      	uxth	r3, r3
 8020330:	3301      	adds	r3, #1
 8020332:	b29b      	uxth	r3, r3
 8020334:	b21b      	sxth	r3, r3
 8020336:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = outer_area->y2;
 8020338:	68bb      	ldr	r3, [r7, #8]
 802033a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802033e:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8020340:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8020344:	4619      	mov	r1, r3
 8020346:	68f8      	ldr	r0, [r7, #12]
 8020348:	f7f8 ff3e 	bl	80191c8 <lv_draw_sw_blend>
    }

    if(left_side) {
 802034c:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8020350:	2b00      	cmp	r3, #0
 8020352:	d017      	beq.n	8020384 <draw_border_generic+0x3e8>
        blend_area.x1 = outer_area->x1;
 8020354:	68bb      	ldr	r3, [r7, #8]
 8020356:	f9b3 3000 	ldrsh.w	r3, [r3]
 802035a:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = inner_area->x1 - 1;
 802035c:	687b      	ldr	r3, [r7, #4]
 802035e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020362:	b29b      	uxth	r3, r3
 8020364:	3b01      	subs	r3, #1
 8020366:	b29b      	uxth	r3, r3
 8020368:	b21b      	sxth	r3, r3
 802036a:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = core_area.y1;
 802036c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020370:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = core_area.y2;
 8020372:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8020376:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8020378:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802037c:	4619      	mov	r1, r3
 802037e:	68f8      	ldr	r0, [r7, #12]
 8020380:	f7f8 ff22 	bl	80191c8 <lv_draw_sw_blend>
    }

    if(right_side) {
 8020384:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8020388:	2b00      	cmp	r3, #0
 802038a:	d017      	beq.n	80203bc <draw_border_generic+0x420>
        blend_area.x1 = inner_area->x2 + 1;
 802038c:	687b      	ldr	r3, [r7, #4]
 802038e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020392:	b29b      	uxth	r3, r3
 8020394:	3301      	adds	r3, #1
 8020396:	b29b      	uxth	r3, r3
 8020398:	b21b      	sxth	r3, r3
 802039a:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = outer_area->x2;
 802039c:	68bb      	ldr	r3, [r7, #8]
 802039e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80203a2:	843b      	strh	r3, [r7, #32]
        blend_area.y1 = core_area.y1;
 80203a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80203a8:	83fb      	strh	r3, [r7, #30]
        blend_area.y2 = core_area.y2;
 80203aa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80203ae:	847b      	strh	r3, [r7, #34]	; 0x22
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80203b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80203b4:	4619      	mov	r1, r3
 80203b6:	68f8      	ldr	r0, [r7, #12]
 80203b8:	f7f8 ff06 	bl	80191c8 <lv_draw_sw_blend>

    /*Draw the corners*/
    lv_coord_t blend_w;

    /*Left and right corner together if they are close to each other*/
    if(!split_hor) {
 80203bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80203c0:	f083 0301 	eor.w	r3, r3, #1
 80203c4:	b2db      	uxtb	r3, r3
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	f000 8081 	beq.w	80204ce <draw_border_generic+0x532>
        /*Calculate the top corner and mirror it to the bottom*/
        blend_area.x1 = draw_area.x1;
 80203cc:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80203d0:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 80203d2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80203d6:	843b      	strh	r3, [r7, #32]
        lv_coord_t max_h = LV_MAX(rout, inner_area->y1 - outer_area->y1);
 80203d8:	687b      	ldr	r3, [r7, #4]
 80203da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80203de:	461a      	mov	r2, r3
 80203e0:	68bb      	ldr	r3, [r7, #8]
 80203e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80203e6:	1ad2      	subs	r2, r2, r3
 80203e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80203ec:	4293      	cmp	r3, r2
 80203ee:	bfb8      	it	lt
 80203f0:	4613      	movlt	r3, r2
 80203f2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        for(h = 0; h < max_h; h++) {
 80203f6:	2300      	movs	r3, #0
 80203f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80203fc:	e060      	b.n	80204c0 <draw_border_generic+0x524>
            lv_coord_t top_y = outer_area->y1 + h;
 80203fe:	68bb      	ldr	r3, [r7, #8]
 8020400:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020404:	b29a      	uxth	r2, r3
 8020406:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802040a:	b29b      	uxth	r3, r3
 802040c:	4413      	add	r3, r2
 802040e:	b29b      	uxth	r3, r3
 8020410:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            lv_coord_t bottom_y = outer_area->y2 - h;
 8020414:	68bb      	ldr	r3, [r7, #8]
 8020416:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802041a:	b29a      	uxth	r2, r3
 802041c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8020420:	b29b      	uxth	r3, r3
 8020422:	1ad3      	subs	r3, r2, r3
 8020424:	b29b      	uxth	r3, r3
 8020426:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 802042a:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 802042e:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 8020432:	429a      	cmp	r2, r3
 8020434:	da05      	bge.n	8020442 <draw_border_generic+0x4a6>
 8020436:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 802043a:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 802043e:	429a      	cmp	r2, r3
 8020440:	dc38      	bgt.n	80204b4 <draw_border_generic+0x518>

            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 8020442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8020444:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8020448:	4611      	mov	r1, r2
 802044a:	4618      	mov	r0, r3
 802044c:	f004 fa07 	bl	802485e <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, top_y, draw_area_w);
 8020450:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8020452:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8020456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802045a:	b21b      	sxth	r3, r3
 802045c:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 8020460:	f7f3 fae4 	bl	8013a2c <lv_draw_mask_apply>
 8020464:	4603      	mov	r3, r0
 8020466:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            if(top_y >= draw_area.y1) {
 802046a:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 802046e:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 8020472:	429a      	cmp	r2, r3
 8020474:	db0b      	blt.n	802048e <draw_border_generic+0x4f2>
                blend_area.y1 = top_y;
 8020476:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 802047a:	83fb      	strh	r3, [r7, #30]
                blend_area.y2 = top_y;
 802047c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8020480:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8020482:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8020486:	4619      	mov	r1, r3
 8020488:	68f8      	ldr	r0, [r7, #12]
 802048a:	f7f8 fe9d 	bl	80191c8 <lv_draw_sw_blend>
            }

            if(bottom_y <= draw_area.y2) {
 802048e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8020492:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	; 0x78
 8020496:	429a      	cmp	r2, r3
 8020498:	dc0d      	bgt.n	80204b6 <draw_border_generic+0x51a>
                blend_area.y1 = bottom_y;
 802049a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 802049e:	83fb      	strh	r3, [r7, #30]
                blend_area.y2 = bottom_y;
 80204a0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80204a4:	847b      	strh	r3, [r7, #34]	; 0x22
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80204a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80204aa:	4619      	mov	r1, r3
 80204ac:	68f8      	ldr	r0, [r7, #12]
 80204ae:	f7f8 fe8b 	bl	80191c8 <lv_draw_sw_blend>
 80204b2:	e000      	b.n	80204b6 <draw_border_generic+0x51a>
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 80204b4:	bf00      	nop
        for(h = 0; h < max_h; h++) {
 80204b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80204ba:	3301      	adds	r3, #1
 80204bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80204c0:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80204c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80204c8:	429a      	cmp	r2, r3
 80204ca:	db98      	blt.n	80203fe <draw_border_generic+0x462>
 80204cc:	e11f      	b.n	802070e <draw_border_generic+0x772>
            }
        }
    }
    else {
        /*Left corners*/
        blend_area.x1 = draw_area.x1;
 80204ce:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80204d2:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 80204d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80204d8:	3b01      	subs	r3, #1
 80204da:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 80204de:	4293      	cmp	r3, r2
 80204e0:	bfa8      	it	ge
 80204e2:	4613      	movge	r3, r2
 80204e4:	b21b      	sxth	r3, r3
 80204e6:	843b      	strh	r3, [r7, #32]
        blend_w = lv_area_get_width(&blend_area);
 80204e8:	f107 031c 	add.w	r3, r7, #28
 80204ec:	4618      	mov	r0, r3
 80204ee:	f7fd f8de 	bl	801d6ae <lv_area_get_width>
 80204f2:	4603      	mov	r3, r0
 80204f4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if(blend_w > 0) {
 80204f8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80204fc:	2b00      	cmp	r3, #0
 80204fe:	dd76      	ble.n	80205ee <draw_border_generic+0x652>
            if(left_side || top_side) {
 8020500:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8020504:	2b00      	cmp	r3, #0
 8020506:	d103      	bne.n	8020510 <draw_border_generic+0x574>
 8020508:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 802050c:	2b00      	cmp	r3, #0
 802050e:	d032      	beq.n	8020576 <draw_border_generic+0x5da>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 8020510:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8020514:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8020518:	e026      	b.n	8020568 <draw_border_generic+0x5cc>
                    blend_area.y1 = h;
 802051a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802051e:	b21b      	sxth	r3, r3
 8020520:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 8020522:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8020526:	b21b      	sxth	r3, r3
 8020528:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 802052a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802052c:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 8020530:	4611      	mov	r1, r2
 8020532:	4618      	mov	r0, r3
 8020534:	f004 f993 	bl	802485e <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 8020538:	6e38      	ldr	r0, [r7, #96]	; 0x60
 802053a:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 802053e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8020542:	b21a      	sxth	r2, r3
 8020544:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8020548:	f7f3 fa70 	bl	8013a2c <lv_draw_mask_apply>
 802054c:	4603      	mov	r3, r0
 802054e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8020552:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8020556:	4619      	mov	r1, r3
 8020558:	68f8      	ldr	r0, [r7, #12]
 802055a:	f7f8 fe35 	bl	80191c8 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 802055e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8020562:	3301      	adds	r3, #1
 8020564:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8020568:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802056c:	461a      	mov	r2, r3
 802056e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8020572:	4293      	cmp	r3, r2
 8020574:	dbd1      	blt.n	802051a <draw_border_generic+0x57e>
                }
            }

            if(left_side || bottom_side) {
 8020576:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 802057a:	2b00      	cmp	r3, #0
 802057c:	d103      	bne.n	8020586 <draw_border_generic+0x5ea>
 802057e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8020582:	2b00      	cmp	r3, #0
 8020584:	d033      	beq.n	80205ee <draw_border_generic+0x652>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 8020586:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 802058a:	3301      	adds	r3, #1
 802058c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8020590:	e026      	b.n	80205e0 <draw_border_generic+0x644>
                    blend_area.y1 = h;
 8020592:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8020596:	b21b      	sxth	r3, r3
 8020598:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 802059a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802059e:	b21b      	sxth	r3, r3
 80205a0:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 80205a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80205a4:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 80205a8:	4611      	mov	r1, r2
 80205aa:	4618      	mov	r0, r3
 80205ac:	f004 f957 	bl	802485e <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 80205b0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80205b2:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80205b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80205ba:	b21a      	sxth	r2, r3
 80205bc:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80205c0:	f7f3 fa34 	bl	8013a2c <lv_draw_mask_apply>
 80205c4:	4603      	mov	r3, r0
 80205c6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80205ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80205ce:	4619      	mov	r1, r3
 80205d0:	68f8      	ldr	r0, [r7, #12]
 80205d2:	f7f8 fdf9 	bl	80191c8 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 80205d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80205da:	3301      	adds	r3, #1
 80205dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80205e0:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80205e4:	461a      	mov	r2, r3
 80205e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80205ea:	4293      	cmp	r3, r2
 80205ec:	ddd1      	ble.n	8020592 <draw_border_generic+0x5f6>
                }
            }
        }

        /*Right corners*/
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 80205ee:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80205f2:	3301      	adds	r3, #1
 80205f4:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 80205f8:	4293      	cmp	r3, r2
 80205fa:	bfb8      	it	lt
 80205fc:	4613      	movlt	r3, r2
 80205fe:	b21b      	sxth	r3, r3
 8020600:	83bb      	strh	r3, [r7, #28]
        blend_area.x2 = draw_area.x2;
 8020602:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8020606:	843b      	strh	r3, [r7, #32]
        blend_w = lv_area_get_width(&blend_area);
 8020608:	f107 031c 	add.w	r3, r7, #28
 802060c:	4618      	mov	r0, r3
 802060e:	f7fd f84e 	bl	801d6ae <lv_area_get_width>
 8020612:	4603      	mov	r3, r0
 8020614:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

        if(blend_w > 0) {
 8020618:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 802061c:	2b00      	cmp	r3, #0
 802061e:	dd76      	ble.n	802070e <draw_border_generic+0x772>
            if(right_side || top_side) {
 8020620:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8020624:	2b00      	cmp	r3, #0
 8020626:	d103      	bne.n	8020630 <draw_border_generic+0x694>
 8020628:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 802062c:	2b00      	cmp	r3, #0
 802062e:	d032      	beq.n	8020696 <draw_border_generic+0x6fa>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 8020630:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8020634:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8020638:	e026      	b.n	8020688 <draw_border_generic+0x6ec>
                    blend_area.y1 = h;
 802063a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802063e:	b21b      	sxth	r3, r3
 8020640:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 8020642:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8020646:	b21b      	sxth	r3, r3
 8020648:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 802064a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802064c:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 8020650:	4611      	mov	r1, r2
 8020652:	4618      	mov	r0, r3
 8020654:	f004 f903 	bl	802485e <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 8020658:	6e38      	ldr	r0, [r7, #96]	; 0x60
 802065a:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 802065e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8020662:	b21a      	sxth	r2, r3
 8020664:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8020668:	f7f3 f9e0 	bl	8013a2c <lv_draw_mask_apply>
 802066c:	4603      	mov	r3, r0
 802066e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8020672:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8020676:	4619      	mov	r1, r3
 8020678:	68f8      	ldr	r0, [r7, #12]
 802067a:	f7f8 fda5 	bl	80191c8 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 802067e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8020682:	3301      	adds	r3, #1
 8020684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8020688:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802068c:	461a      	mov	r2, r3
 802068e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8020692:	4293      	cmp	r3, r2
 8020694:	dbd1      	blt.n	802063a <draw_border_generic+0x69e>
                }
            }

            if(right_side || bottom_side) {
 8020696:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 802069a:	2b00      	cmp	r3, #0
 802069c:	d103      	bne.n	80206a6 <draw_border_generic+0x70a>
 802069e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80206a2:	2b00      	cmp	r3, #0
 80206a4:	d033      	beq.n	802070e <draw_border_generic+0x772>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 80206a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80206aa:	3301      	adds	r3, #1
 80206ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80206b0:	e026      	b.n	8020700 <draw_border_generic+0x764>
                    blend_area.y1 = h;
 80206b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80206b6:	b21b      	sxth	r3, r3
 80206b8:	83fb      	strh	r3, [r7, #30]
                    blend_area.y2 = h;
 80206ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80206be:	b21b      	sxth	r3, r3
 80206c0:	847b      	strh	r3, [r7, #34]	; 0x22

                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 80206c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80206c4:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	; 0x7e
 80206c8:	4611      	mov	r1, r2
 80206ca:	4618      	mov	r0, r3
 80206cc:	f004 f8c7 	bl	802485e <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 80206d0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80206d2:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80206d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80206da:	b21a      	sxth	r2, r3
 80206dc:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80206e0:	f7f3 f9a4 	bl	8013a2c <lv_draw_mask_apply>
 80206e4:	4603      	mov	r3, r0
 80206e6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80206ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80206ee:	4619      	mov	r1, r3
 80206f0:	68f8      	ldr	r0, [r7, #12]
 80206f2:	f7f8 fd69 	bl	80191c8 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 80206f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80206fa:	3301      	adds	r3, #1
 80206fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8020700:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8020704:	461a      	mov	r2, r3
 8020706:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802070a:	4293      	cmp	r3, r2
 802070c:	ddd1      	ble.n	80206b2 <draw_border_generic+0x716>
                }
            }
        }
    }

    lv_draw_mask_free_param(&mask_rin_param);
 802070e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020712:	4618      	mov	r0, r3
 8020714:	f7f3 fa1e 	bl	8013b54 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rin_id);
 8020718:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 802071c:	4618      	mov	r0, r3
 802071e:	f7f3 f9c9 	bl	8013ab4 <lv_draw_mask_remove_id>
    lv_draw_mask_free_param(&mask_rout_param);
 8020722:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8020726:	4618      	mov	r0, r3
 8020728:	f7f3 fa14 	bl	8013b54 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rout_id);
 802072c:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8020730:	4618      	mov	r0, r3
 8020732:	f7f3 f9bf 	bl	8013ab4 <lv_draw_mask_remove_id>
    lv_mem_buf_release(blend_dsc.mask_buf);
 8020736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8020738:	4618      	mov	r0, r3
 802073a:	f003 fd11 	bl	8024160 <lv_mem_buf_release>
 802073e:	e000      	b.n	8020742 <draw_border_generic+0x7a6>
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 8020740:	bf00      	nop
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
        return;
    }

#endif /*LV_DRAW_COMPLEX*/
}
 8020742:	3798      	adds	r7, #152	; 0x98
 8020744:	46bd      	mov	sp, r7
 8020746:	bd80      	pop	{r7, pc}

08020748 <draw_border_simple>:
static void draw_border_simple(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                               lv_color_t color, lv_opa_t opa)
{
 8020748:	b580      	push	{r7, lr}
 802074a:	b08e      	sub	sp, #56	; 0x38
 802074c:	af00      	add	r7, sp, #0
 802074e:	60f8      	str	r0, [r7, #12]
 8020750:	60b9      	str	r1, [r7, #8]
 8020752:	607a      	str	r2, [r7, #4]
 8020754:	703b      	strb	r3, [r7, #0]
    lv_area_t a;
    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 8020756:	f107 0310 	add.w	r3, r7, #16
 802075a:	211c      	movs	r1, #28
 802075c:	4618      	mov	r0, r3
 802075e:	f003 fffd 	bl	802475c <lv_memset_00>
    blend_dsc.blend_area = &a;
 8020762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8020766:	613b      	str	r3, [r7, #16]
    blend_dsc.color = color;
 8020768:	783b      	ldrb	r3, [r7, #0]
 802076a:	763b      	strb	r3, [r7, #24]
    blend_dsc.opa = opa;
 802076c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8020770:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 8020774:	68bb      	ldr	r3, [r7, #8]
 8020776:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 802077a:	687b      	ldr	r3, [r7, #4]
 802077c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020780:	429a      	cmp	r2, r3
 8020782:	bfd4      	ite	le
 8020784:	2301      	movle	r3, #1
 8020786:	2300      	movgt	r3, #0
 8020788:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 802078c:	68bb      	ldr	r3, [r7, #8]
 802078e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020792:	687b      	ldr	r3, [r7, #4]
 8020794:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020798:	429a      	cmp	r2, r3
 802079a:	bfac      	ite	ge
 802079c:	2301      	movge	r3, #1
 802079e:	2300      	movlt	r3, #0
 80207a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 80207a4:	68bb      	ldr	r3, [r7, #8]
 80207a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80207aa:	687b      	ldr	r3, [r7, #4]
 80207ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80207b0:	429a      	cmp	r2, r3
 80207b2:	bfd4      	ite	le
 80207b4:	2301      	movle	r3, #1
 80207b6:	2300      	movgt	r3, #0
 80207b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 80207bc:	68bb      	ldr	r3, [r7, #8]
 80207be:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80207c2:	687b      	ldr	r3, [r7, #4]
 80207c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80207c8:	429a      	cmp	r2, r3
 80207ca:	bfac      	ite	ge
 80207cc:	2301      	movge	r3, #1
 80207ce:	2300      	movlt	r3, #0
 80207d0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34


    /*Top*/
    a.x1 = outer_area->x1;
 80207d4:	68bb      	ldr	r3, [r7, #8]
 80207d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80207da:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = outer_area->x2;
 80207dc:	68bb      	ldr	r3, [r7, #8]
 80207de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80207e2:	863b      	strh	r3, [r7, #48]	; 0x30
    a.y1 = outer_area->y1;
 80207e4:	68bb      	ldr	r3, [r7, #8]
 80207e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80207ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = inner_area->y1 - 1;
 80207ec:	687b      	ldr	r3, [r7, #4]
 80207ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80207f2:	b29b      	uxth	r3, r3
 80207f4:	3b01      	subs	r3, #1
 80207f6:	b29b      	uxth	r3, r3
 80207f8:	b21b      	sxth	r3, r3
 80207fa:	867b      	strh	r3, [r7, #50]	; 0x32
    if(top_side) {
 80207fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8020800:	2b00      	cmp	r3, #0
 8020802:	d005      	beq.n	8020810 <draw_border_simple+0xc8>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8020804:	f107 0310 	add.w	r3, r7, #16
 8020808:	4619      	mov	r1, r3
 802080a:	68f8      	ldr	r0, [r7, #12]
 802080c:	f7f8 fcdc 	bl	80191c8 <lv_draw_sw_blend>
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
 8020810:	687b      	ldr	r3, [r7, #4]
 8020812:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020816:	b29b      	uxth	r3, r3
 8020818:	3301      	adds	r3, #1
 802081a:	b29b      	uxth	r3, r3
 802081c:	b21b      	sxth	r3, r3
 802081e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = outer_area->y2;
 8020820:	68bb      	ldr	r3, [r7, #8]
 8020822:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020826:	867b      	strh	r3, [r7, #50]	; 0x32
    if(bottom_side) {
 8020828:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 802082c:	2b00      	cmp	r3, #0
 802082e:	d005      	beq.n	802083c <draw_border_simple+0xf4>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8020830:	f107 0310 	add.w	r3, r7, #16
 8020834:	4619      	mov	r1, r3
 8020836:	68f8      	ldr	r0, [r7, #12]
 8020838:	f7f8 fcc6 	bl	80191c8 <lv_draw_sw_blend>
    }

    /*Left*/
    a.x1 = outer_area->x1;
 802083c:	68bb      	ldr	r3, [r7, #8]
 802083e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020842:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = inner_area->x1 - 1;
 8020844:	687b      	ldr	r3, [r7, #4]
 8020846:	f9b3 3000 	ldrsh.w	r3, [r3]
 802084a:	b29b      	uxth	r3, r3
 802084c:	3b01      	subs	r3, #1
 802084e:	b29b      	uxth	r3, r3
 8020850:	b21b      	sxth	r3, r3
 8020852:	863b      	strh	r3, [r7, #48]	; 0x30
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 8020854:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8020858:	2b00      	cmp	r3, #0
 802085a:	d003      	beq.n	8020864 <draw_border_simple+0x11c>
 802085c:	687b      	ldr	r3, [r7, #4]
 802085e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020862:	e002      	b.n	802086a <draw_border_simple+0x122>
 8020864:	68bb      	ldr	r3, [r7, #8]
 8020866:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802086a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 802086c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8020870:	2b00      	cmp	r3, #0
 8020872:	d003      	beq.n	802087c <draw_border_simple+0x134>
 8020874:	687b      	ldr	r3, [r7, #4]
 8020876:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802087a:	e002      	b.n	8020882 <draw_border_simple+0x13a>
 802087c:	68bb      	ldr	r3, [r7, #8]
 802087e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020882:	867b      	strh	r3, [r7, #50]	; 0x32
    if(left_side) {
 8020884:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8020888:	2b00      	cmp	r3, #0
 802088a:	d005      	beq.n	8020898 <draw_border_simple+0x150>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 802088c:	f107 0310 	add.w	r3, r7, #16
 8020890:	4619      	mov	r1, r3
 8020892:	68f8      	ldr	r0, [r7, #12]
 8020894:	f7f8 fc98 	bl	80191c8 <lv_draw_sw_blend>
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
 8020898:	687b      	ldr	r3, [r7, #4]
 802089a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802089e:	b29b      	uxth	r3, r3
 80208a0:	3301      	adds	r3, #1
 80208a2:	b29b      	uxth	r3, r3
 80208a4:	b21b      	sxth	r3, r3
 80208a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a.x2 = outer_area->x2;
 80208a8:	68bb      	ldr	r3, [r7, #8]
 80208aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80208ae:	863b      	strh	r3, [r7, #48]	; 0x30
    if(right_side) {
 80208b0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80208b4:	2b00      	cmp	r3, #0
 80208b6:	d005      	beq.n	80208c4 <draw_border_simple+0x17c>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80208b8:	f107 0310 	add.w	r3, r7, #16
 80208bc:	4619      	mov	r1, r3
 80208be:	68f8      	ldr	r0, [r7, #12]
 80208c0:	f7f8 fc82 	bl	80191c8 <lv_draw_sw_blend>
    }
}
 80208c4:	bf00      	nop
 80208c6:	3738      	adds	r7, #56	; 0x38
 80208c8:	46bd      	mov	sp, r7
 80208ca:	bd80      	pop	{r7, pc}

080208cc <lv_color_mix>:
{
 80208cc:	b480      	push	{r7}
 80208ce:	b085      	sub	sp, #20
 80208d0:	af00      	add	r7, sp, #0
 80208d2:	7138      	strb	r0, [r7, #4]
 80208d4:	7039      	strb	r1, [r7, #0]
 80208d6:	4613      	mov	r3, r2
 80208d8:	70fb      	strb	r3, [r7, #3]
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
 80208da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80208de:	2b00      	cmp	r3, #0
 80208e0:	da01      	bge.n	80208e6 <lv_color_mix+0x1a>
 80208e2:	793b      	ldrb	r3, [r7, #4]
 80208e4:	e000      	b.n	80208e8 <lv_color_mix+0x1c>
 80208e6:	783b      	ldrb	r3, [r7, #0]
 80208e8:	733b      	strb	r3, [r7, #12]
    return ret;
 80208ea:	7b3b      	ldrb	r3, [r7, #12]
}
 80208ec:	4618      	mov	r0, r3
 80208ee:	3714      	adds	r7, #20
 80208f0:	46bd      	mov	sp, r7
 80208f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208f6:	4770      	bx	lr

080208f8 <lv_area_get_width>:
{
 80208f8:	b480      	push	{r7}
 80208fa:	b083      	sub	sp, #12
 80208fc:	af00      	add	r7, sp, #0
 80208fe:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020900:	687b      	ldr	r3, [r7, #4]
 8020902:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020906:	b29a      	uxth	r2, r3
 8020908:	687b      	ldr	r3, [r7, #4]
 802090a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802090e:	b29b      	uxth	r3, r3
 8020910:	1ad3      	subs	r3, r2, r3
 8020912:	b29b      	uxth	r3, r3
 8020914:	3301      	adds	r3, #1
 8020916:	b29b      	uxth	r3, r3
 8020918:	b21b      	sxth	r3, r3
}
 802091a:	4618      	mov	r0, r3
 802091c:	370c      	adds	r7, #12
 802091e:	46bd      	mov	sp, r7
 8020920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020924:	4770      	bx	lr

08020926 <lv_area_get_height>:
{
 8020926:	b480      	push	{r7}
 8020928:	b083      	sub	sp, #12
 802092a:	af00      	add	r7, sp, #0
 802092c:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802092e:	687b      	ldr	r3, [r7, #4]
 8020930:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020934:	b29a      	uxth	r2, r3
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802093c:	b29b      	uxth	r3, r3
 802093e:	1ad3      	subs	r3, r2, r3
 8020940:	b29b      	uxth	r3, r3
 8020942:	3301      	adds	r3, #1
 8020944:	b29b      	uxth	r3, r3
 8020946:	b21b      	sxth	r3, r3
}
 8020948:	4618      	mov	r0, r3
 802094a:	370c      	adds	r7, #12
 802094c:	46bd      	mov	sp, r7
 802094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020952:	4770      	bx	lr

08020954 <lv_draw_sw_transform>:
 **********************/

void lv_draw_sw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf,
                          lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                          const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 8020954:	b590      	push	{r4, r7, lr}
 8020956:	b0ab      	sub	sp, #172	; 0xac
 8020958:	af08      	add	r7, sp, #32
 802095a:	60f8      	str	r0, [r7, #12]
 802095c:	60b9      	str	r1, [r7, #8]
 802095e:	607a      	str	r2, [r7, #4]
 8020960:	807b      	strh	r3, [r7, #2]
    LV_UNUSED(draw_ctx);

    point_transform_dsc_t tr_dsc;
    tr_dsc.angle = -draw_dsc->angle;
 8020962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8020966:	f9b3 3000 	ldrsh.w	r3, [r3]
 802096a:	425b      	negs	r3, r3
 802096c:	63fb      	str	r3, [r7, #60]	; 0x3c
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 802096e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8020972:	885b      	ldrh	r3, [r3, #2]
 8020974:	461a      	mov	r2, r3
 8020976:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802097a:	fb93 f3f2 	sdiv	r3, r3, r2
 802097e:	63bb      	str	r3, [r7, #56]	; 0x38
    tr_dsc.pivot = draw_dsc->pivot;
 8020980:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8020984:	685b      	ldr	r3, [r3, #4]
 8020986:	64bb      	str	r3, [r7, #72]	; 0x48

    int32_t angle_low = tr_dsc.angle / 10;
 8020988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802098a:	4aaf      	ldr	r2, [pc, #700]	; (8020c48 <lv_draw_sw_transform+0x2f4>)
 802098c:	fb82 1203 	smull	r1, r2, r2, r3
 8020990:	1092      	asrs	r2, r2, #2
 8020992:	17db      	asrs	r3, r3, #31
 8020994:	1ad3      	subs	r3, r2, r3
 8020996:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t angle_high = angle_low + 1;
 8020998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802099a:	3301      	adds	r3, #1
 802099c:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 802099e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80209a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80209a2:	f06f 0109 	mvn.w	r1, #9
 80209a6:	fb01 f303 	mul.w	r3, r1, r3
 80209aa:	4413      	add	r3, r2
 80209ac:	673b      	str	r3, [r7, #112]	; 0x70

    int32_t s1 = lv_trigo_sin(angle_low);
 80209ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80209b0:	b21b      	sxth	r3, r3
 80209b2:	4618      	mov	r0, r3
 80209b4:	f003 f984 	bl	8023cc0 <lv_trigo_sin>
 80209b8:	4603      	mov	r3, r0
 80209ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t s2 = lv_trigo_sin(angle_high);
 80209bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80209be:	b21b      	sxth	r3, r3
 80209c0:	4618      	mov	r0, r3
 80209c2:	f003 f97d 	bl	8023cc0 <lv_trigo_sin>
 80209c6:	4603      	mov	r3, r0
 80209c8:	66bb      	str	r3, [r7, #104]	; 0x68

    int32_t c1 = lv_trigo_sin(angle_low + 90);
 80209ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80209cc:	b29b      	uxth	r3, r3
 80209ce:	335a      	adds	r3, #90	; 0x5a
 80209d0:	b29b      	uxth	r3, r3
 80209d2:	b21b      	sxth	r3, r3
 80209d4:	4618      	mov	r0, r3
 80209d6:	f003 f973 	bl	8023cc0 <lv_trigo_sin>
 80209da:	4603      	mov	r3, r0
 80209dc:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 80209de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80209e0:	b29b      	uxth	r3, r3
 80209e2:	335a      	adds	r3, #90	; 0x5a
 80209e4:	b29b      	uxth	r3, r3
 80209e6:	b21b      	sxth	r3, r3
 80209e8:	4618      	mov	r0, r3
 80209ea:	f003 f969 	bl	8023cc0 <lv_trigo_sin>
 80209ee:	4603      	mov	r3, r0
 80209f0:	663b      	str	r3, [r7, #96]	; 0x60

    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80209f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80209f4:	f1c3 030a 	rsb	r3, r3, #10
 80209f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80209fa:	fb03 f202 	mul.w	r2, r3, r2
 80209fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8020a00:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8020a02:	fb01 f303 	mul.w	r3, r1, r3
 8020a06:	4413      	add	r3, r2
 8020a08:	4a8f      	ldr	r2, [pc, #572]	; (8020c48 <lv_draw_sw_transform+0x2f4>)
 8020a0a:	fb82 1203 	smull	r1, r2, r2, r3
 8020a0e:	1092      	asrs	r2, r2, #2
 8020a10:	17db      	asrs	r3, r3, #31
 8020a12:	1ad3      	subs	r3, r2, r3
 8020a14:	633b      	str	r3, [r7, #48]	; 0x30
    tr_dsc.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8020a16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8020a18:	f1c3 030a 	rsb	r3, r3, #10
 8020a1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8020a1e:	fb03 f202 	mul.w	r2, r3, r2
 8020a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8020a24:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8020a26:	fb01 f303 	mul.w	r3, r1, r3
 8020a2a:	4413      	add	r3, r2
 8020a2c:	4a86      	ldr	r2, [pc, #536]	; (8020c48 <lv_draw_sw_transform+0x2f4>)
 8020a2e:	fb82 1203 	smull	r1, r2, r2, r3
 8020a32:	1092      	asrs	r2, r2, #2
 8020a34:	17db      	asrs	r3, r3, #31
 8020a36:	1ad3      	subs	r3, r2, r3
 8020a38:	637b      	str	r3, [r7, #52]	; 0x34
    tr_dsc.sinma = tr_dsc.sinma >> (LV_TRIGO_SHIFT - 10);
 8020a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020a3c:	115b      	asrs	r3, r3, #5
 8020a3e:	633b      	str	r3, [r7, #48]	; 0x30
    tr_dsc.cosma = tr_dsc.cosma >> (LV_TRIGO_SHIFT - 10);
 8020a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a42:	115b      	asrs	r3, r3, #5
 8020a44:	637b      	str	r3, [r7, #52]	; 0x34
    tr_dsc.pivot_x_256 = tr_dsc.pivot.x * 256;
 8020a46:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8020a4a:	021b      	lsls	r3, r3, #8
 8020a4c:	643b      	str	r3, [r7, #64]	; 0x40
    tr_dsc.pivot_y_256 = tr_dsc.pivot.y * 256;
 8020a4e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8020a52:	021b      	lsls	r3, r3, #8
 8020a54:	647b      	str	r3, [r7, #68]	; 0x44

    lv_coord_t dest_w = lv_area_get_width(dest_area);
 8020a56:	68b8      	ldr	r0, [r7, #8]
 8020a58:	f7ff ff4e 	bl	80208f8 <lv_area_get_width>
 8020a5c:	4603      	mov	r3, r0
 8020a5e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    lv_coord_t dest_h = lv_area_get_height(dest_area);
 8020a62:	68b8      	ldr	r0, [r7, #8]
 8020a64:	f7ff ff5f 	bl	8020926 <lv_area_get_height>
 8020a68:	4603      	mov	r3, r0
 8020a6a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    lv_coord_t y;
    for(y = 0; y < dest_h; y++) {
 8020a6e:	2300      	movs	r3, #0
 8020a70:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8020a74:	e0db      	b.n	8020c2e <lv_draw_sw_transform+0x2da>
        int32_t xs1_ups, ys1_ups, xs2_ups, ys2_ups;

        transform_point_upscaled(&tr_dsc, dest_area->x1, dest_area->y1 + y, &xs1_ups, &ys1_ups);
 8020a76:	68bb      	ldr	r3, [r7, #8]
 8020a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020a7c:	461c      	mov	r4, r3
 8020a7e:	68bb      	ldr	r3, [r7, #8]
 8020a80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020a84:	461a      	mov	r2, r3
 8020a86:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8020a8a:	441a      	add	r2, r3
 8020a8c:	f107 011c 	add.w	r1, r7, #28
 8020a90:	f107 0020 	add.w	r0, r7, #32
 8020a94:	f107 0318 	add.w	r3, r7, #24
 8020a98:	9300      	str	r3, [sp, #0]
 8020a9a:	460b      	mov	r3, r1
 8020a9c:	4621      	mov	r1, r4
 8020a9e:	f000 fbff 	bl	80212a0 <transform_point_upscaled>
        transform_point_upscaled(&tr_dsc, dest_area->x2, dest_area->y1 + y, &xs2_ups, &ys2_ups);
 8020aa2:	68bb      	ldr	r3, [r7, #8]
 8020aa4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020aa8:	461c      	mov	r4, r3
 8020aaa:	68bb      	ldr	r3, [r7, #8]
 8020aac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020ab0:	461a      	mov	r2, r3
 8020ab2:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8020ab6:	441a      	add	r2, r3
 8020ab8:	f107 0114 	add.w	r1, r7, #20
 8020abc:	f107 0020 	add.w	r0, r7, #32
 8020ac0:	f107 0310 	add.w	r3, r7, #16
 8020ac4:	9300      	str	r3, [sp, #0]
 8020ac6:	460b      	mov	r3, r1
 8020ac8:	4621      	mov	r1, r4
 8020aca:	f000 fbe9 	bl	80212a0 <transform_point_upscaled>

        int32_t xs_diff = xs2_ups - xs1_ups;
 8020ace:	697a      	ldr	r2, [r7, #20]
 8020ad0:	69fb      	ldr	r3, [r7, #28]
 8020ad2:	1ad3      	subs	r3, r2, r3
 8020ad4:	65bb      	str	r3, [r7, #88]	; 0x58
        int32_t ys_diff = ys2_ups - ys1_ups;
 8020ad6:	693a      	ldr	r2, [r7, #16]
 8020ad8:	69bb      	ldr	r3, [r7, #24]
 8020ada:	1ad3      	subs	r3, r2, r3
 8020adc:	657b      	str	r3, [r7, #84]	; 0x54
        int32_t xs_step_256 = 0;
 8020ade:	2300      	movs	r3, #0
 8020ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        int32_t ys_step_256 = 0;
 8020ae4:	2300      	movs	r3, #0
 8020ae6:	67fb      	str	r3, [r7, #124]	; 0x7c
        if(dest_w > 1) {
 8020ae8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8020aec:	2b01      	cmp	r3, #1
 8020aee:	dd10      	ble.n	8020b12 <lv_draw_sw_transform+0x1be>
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 8020af0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8020af2:	021a      	lsls	r2, r3, #8
 8020af4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8020af8:	3b01      	subs	r3, #1
 8020afa:	fb92 f3f3 	sdiv	r3, r2, r3
 8020afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 8020b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020b04:	021a      	lsls	r2, r3, #8
 8020b06:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8020b0a:	3b01      	subs	r3, #1
 8020b0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b10:	67fb      	str	r3, [r7, #124]	; 0x7c
        }
        int32_t xs_ups = xs1_ups + 0x80;
 8020b12:	69fb      	ldr	r3, [r7, #28]
 8020b14:	3380      	adds	r3, #128	; 0x80
 8020b16:	653b      	str	r3, [r7, #80]	; 0x50
        int32_t ys_ups = ys1_ups + 0x80;
 8020b18:	69bb      	ldr	r3, [r7, #24]
 8020b1a:	3380      	adds	r3, #128	; 0x80
 8020b1c:	64fb      	str	r3, [r7, #76]	; 0x4c

        if(draw_dsc->antialias == 0) {
 8020b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8020b22:	7c1b      	ldrb	r3, [r3, #16]
 8020b24:	f003 0301 	and.w	r3, r3, #1
 8020b28:	b2db      	uxtb	r3, r3
 8020b2a:	2b00      	cmp	r3, #0
 8020b2c:	d148      	bne.n	8020bc0 <lv_draw_sw_transform+0x26c>
            switch(cf) {
 8020b2e:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8020b32:	2b06      	cmp	r3, #6
 8020b34:	d023      	beq.n	8020b7e <lv_draw_sw_transform+0x22a>
 8020b36:	2b06      	cmp	r3, #6
 8020b38:	dc63      	bgt.n	8020c02 <lv_draw_sw_transform+0x2ae>
 8020b3a:	2b04      	cmp	r3, #4
 8020b3c:	d01f      	beq.n	8020b7e <lv_draw_sw_transform+0x22a>
 8020b3e:	2b05      	cmp	r3, #5
 8020b40:	d15f      	bne.n	8020c02 <lv_draw_sw_transform+0x2ae>
                case LV_IMG_CF_TRUE_COLOR_ALPHA:
                    argb_no_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf);
 8020b42:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8020b46:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 8020b4a:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 8020b4e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8020b52:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8020b56:	9206      	str	r2, [sp, #24]
 8020b58:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8020b5c:	9205      	str	r2, [sp, #20]
 8020b5e:	9304      	str	r3, [sp, #16]
 8020b60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8020b62:	9303      	str	r3, [sp, #12]
 8020b64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8020b68:	9302      	str	r3, [sp, #8]
 8020b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020b6c:	9301      	str	r3, [sp, #4]
 8020b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020b70:	9300      	str	r3, [sp, #0]
 8020b72:	4623      	mov	r3, r4
 8020b74:	4602      	mov	r2, r0
 8020b76:	6878      	ldr	r0, [r7, #4]
 8020b78:	f000 f8ee 	bl	8020d58 <argb_no_aa>
                    break;
 8020b7c:	e042      	b.n	8020c04 <lv_draw_sw_transform+0x2b0>
                case LV_IMG_CF_TRUE_COLOR:
                case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
                    rgb_no_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf, cf);
 8020b7e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8020b82:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 8020b86:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 8020b8a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8020b8e:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8020b92:	9207      	str	r2, [sp, #28]
 8020b94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8020b98:	9206      	str	r2, [sp, #24]
 8020b9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8020b9e:	9205      	str	r2, [sp, #20]
 8020ba0:	9304      	str	r3, [sp, #16]
 8020ba2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8020ba4:	9303      	str	r3, [sp, #12]
 8020ba6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8020baa:	9302      	str	r3, [sp, #8]
 8020bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020bae:	9301      	str	r3, [sp, #4]
 8020bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020bb2:	9300      	str	r3, [sp, #0]
 8020bb4:	4623      	mov	r3, r4
 8020bb6:	4602      	mov	r2, r0
 8020bb8:	6878      	ldr	r0, [r7, #4]
 8020bba:	f000 f847 	bl	8020c4c <rgb_no_aa>
                    break;
 8020bbe:	e021      	b.n	8020c04 <lv_draw_sw_transform+0x2b0>
                default:
                    break;
            }
        }
        else {
            argb_and_rgb_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf, cf);
 8020bc0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8020bc4:	f9b7 409c 	ldrsh.w	r4, [r7, #156]	; 0x9c
 8020bc8:	f9b7 0098 	ldrsh.w	r0, [r7, #152]	; 0x98
 8020bcc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8020bd0:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8020bd4:	9207      	str	r2, [sp, #28]
 8020bd6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8020bda:	9206      	str	r2, [sp, #24]
 8020bdc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8020be0:	9205      	str	r2, [sp, #20]
 8020be2:	9304      	str	r3, [sp, #16]
 8020be4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8020be6:	9303      	str	r3, [sp, #12]
 8020be8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8020bec:	9302      	str	r3, [sp, #8]
 8020bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020bf0:	9301      	str	r3, [sp, #4]
 8020bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020bf4:	9300      	str	r3, [sp, #0]
 8020bf6:	4623      	mov	r3, r4
 8020bf8:	4602      	mov	r2, r0
 8020bfa:	6878      	ldr	r0, [r7, #4]
 8020bfc:	f000 f91d 	bl	8020e3a <argb_and_rgb_aa>
 8020c00:	e000      	b.n	8020c04 <lv_draw_sw_transform+0x2b0>
                    break;
 8020c02:	bf00      	nop
        }

        cbuf += dest_w;
 8020c04:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8020c08:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8020c0c:	4413      	add	r3, r2
 8020c0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        abuf += dest_w;
 8020c12:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8020c16:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8020c1a:	4413      	add	r3, r2
 8020c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    for(y = 0; y < dest_h; y++) {
 8020c20:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8020c24:	b29b      	uxth	r3, r3
 8020c26:	3301      	adds	r3, #1
 8020c28:	b29b      	uxth	r3, r3
 8020c2a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8020c2e:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 8020c32:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8020c36:	429a      	cmp	r2, r3
 8020c38:	f6ff af1d 	blt.w	8020a76 <lv_draw_sw_transform+0x122>
    }
}
 8020c3c:	bf00      	nop
 8020c3e:	bf00      	nop
 8020c40:	378c      	adds	r7, #140	; 0x8c
 8020c42:	46bd      	mov	sp, r7
 8020c44:	bd90      	pop	{r4, r7, pc}
 8020c46:	bf00      	nop
 8020c48:	66666667 	.word	0x66666667

08020c4c <rgb_no_aa>:
 **********************/

static void rgb_no_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                      int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                      int32_t x_end, lv_color_t * cbuf, uint8_t * abuf, lv_img_cf_t cf)
{
 8020c4c:	b580      	push	{r7, lr}
 8020c4e:	b08c      	sub	sp, #48	; 0x30
 8020c50:	af00      	add	r7, sp, #0
 8020c52:	60f8      	str	r0, [r7, #12]
 8020c54:	4608      	mov	r0, r1
 8020c56:	4611      	mov	r1, r2
 8020c58:	461a      	mov	r2, r3
 8020c5a:	4603      	mov	r3, r0
 8020c5c:	817b      	strh	r3, [r7, #10]
 8020c5e:	460b      	mov	r3, r1
 8020c60:	813b      	strh	r3, [r7, #8]
 8020c62:	4613      	mov	r3, r2
 8020c64:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 8020c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c68:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t ys_ups_start = ys_ups;
 8020c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020c6c:	627b      	str	r3, [r7, #36]	; 0x24
    lv_disp_t * d = _lv_refr_get_disp_refreshing();
 8020c6e:	f7ef fdd1 	bl	8010814 <_lv_refr_get_disp_refreshing>
 8020c72:	6238      	str	r0, [r7, #32]
    lv_color_t ck = d->driver->color_chroma_key;
 8020c74:	6a3b      	ldr	r3, [r7, #32]
 8020c76:	681b      	ldr	r3, [r3, #0]
 8020c78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8020c7c:	743b      	strb	r3, [r7, #16]

    lv_memset_ff(abuf, x_end);
 8020c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020c80:	4619      	mov	r1, r3
 8020c82:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8020c84:	f003 fdeb 	bl	802485e <lv_memset_ff>

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 8020c88:	2300      	movs	r3, #0
 8020c8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8020c8c:	e05a      	b.n	8020d44 <rgb_no_aa+0xf8>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8020c8e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8020c92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8020c94:	fb02 f303 	mul.w	r3, r2, r3
 8020c98:	121b      	asrs	r3, r3, #8
 8020c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020c9c:	4413      	add	r3, r2
 8020c9e:	63bb      	str	r3, [r7, #56]	; 0x38
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8020ca0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8020ca4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020ca6:	fb02 f303 	mul.w	r3, r2, r3
 8020caa:	121b      	asrs	r3, r3, #8
 8020cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020cae:	4413      	add	r3, r2
 8020cb0:	63fb      	str	r3, [r7, #60]	; 0x3c

        int32_t xs_int = xs_ups >> 8;
 8020cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020cb4:	121b      	asrs	r3, r3, #8
 8020cb6:	61fb      	str	r3, [r7, #28]
        int32_t ys_int = ys_ups >> 8;
 8020cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020cba:	121b      	asrs	r3, r3, #8
 8020cbc:	61bb      	str	r3, [r7, #24]
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8020cbe:	69fb      	ldr	r3, [r7, #28]
 8020cc0:	2b00      	cmp	r3, #0
 8020cc2:	db0c      	blt.n	8020cde <rgb_no_aa+0x92>
 8020cc4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8020cc8:	69fa      	ldr	r2, [r7, #28]
 8020cca:	429a      	cmp	r2, r3
 8020ccc:	da07      	bge.n	8020cde <rgb_no_aa+0x92>
 8020cce:	69bb      	ldr	r3, [r7, #24]
 8020cd0:	2b00      	cmp	r3, #0
 8020cd2:	db04      	blt.n	8020cde <rgb_no_aa+0x92>
 8020cd4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8020cd8:	69ba      	ldr	r2, [r7, #24]
 8020cda:	429a      	cmp	r2, r3
 8020cdc:	db06      	blt.n	8020cec <rgb_no_aa+0xa0>
            abuf[x] = 0x00;
 8020cde:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8020ce2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8020ce4:	4413      	add	r3, r2
 8020ce6:	2200      	movs	r2, #0
 8020ce8:	701a      	strb	r2, [r3, #0]
 8020cea:	e013      	b.n	8020d14 <rgb_no_aa+0xc8>
        }
        else {

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            const uint8_t * src_tmp = src;
 8020cec:	68fb      	ldr	r3, [r7, #12]
 8020cee:	617b      	str	r3, [r7, #20]
            src_tmp += ys_int * src_stride + xs_int;
 8020cf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020cf4:	69ba      	ldr	r2, [r7, #24]
 8020cf6:	fb03 f202 	mul.w	r2, r3, r2
 8020cfa:	69fb      	ldr	r3, [r7, #28]
 8020cfc:	4413      	add	r3, r2
 8020cfe:	461a      	mov	r2, r3
 8020d00:	697b      	ldr	r3, [r7, #20]
 8020d02:	4413      	add	r3, r2
 8020d04:	617b      	str	r3, [r7, #20]
            cbuf[x].full = src_tmp[0];
 8020d06:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8020d0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8020d0c:	4413      	add	r3, r2
 8020d0e:	697a      	ldr	r2, [r7, #20]
 8020d10:	7812      	ldrb	r2, [r2, #0]
 8020d12:	701a      	strb	r2, [r3, #0]
            const uint8_t * src_tmp = src;
            src_tmp += (ys_int * src_stride * sizeof(lv_color_t)) + xs_int * sizeof(lv_color_t);
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
        }
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED && cbuf[x].full == ck.full) {
 8020d14:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8020d18:	2b06      	cmp	r3, #6
 8020d1a:	d10d      	bne.n	8020d38 <rgb_no_aa+0xec>
 8020d1c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8020d20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8020d22:	4413      	add	r3, r2
 8020d24:	781a      	ldrb	r2, [r3, #0]
 8020d26:	7c3b      	ldrb	r3, [r7, #16]
 8020d28:	429a      	cmp	r2, r3
 8020d2a:	d105      	bne.n	8020d38 <rgb_no_aa+0xec>
            abuf[x] = 0x00;
 8020d2c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8020d30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8020d32:	4413      	add	r3, r2
 8020d34:	2200      	movs	r2, #0
 8020d36:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < x_end; x++) {
 8020d38:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8020d3c:	b29b      	uxth	r3, r3
 8020d3e:	3301      	adds	r3, #1
 8020d40:	b29b      	uxth	r3, r3
 8020d42:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8020d44:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8020d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8020d4a:	429a      	cmp	r2, r3
 8020d4c:	dc9f      	bgt.n	8020c8e <rgb_no_aa+0x42>
        }
    }
}
 8020d4e:	bf00      	nop
 8020d50:	bf00      	nop
 8020d52:	3730      	adds	r7, #48	; 0x30
 8020d54:	46bd      	mov	sp, r7
 8020d56:	bd80      	pop	{r7, pc}

08020d58 <argb_no_aa>:

static void argb_no_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                       int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                       int32_t x_end, lv_color_t * cbuf, uint8_t * abuf)
{
 8020d58:	b480      	push	{r7}
 8020d5a:	b08b      	sub	sp, #44	; 0x2c
 8020d5c:	af00      	add	r7, sp, #0
 8020d5e:	60f8      	str	r0, [r7, #12]
 8020d60:	4608      	mov	r0, r1
 8020d62:	4611      	mov	r1, r2
 8020d64:	461a      	mov	r2, r3
 8020d66:	4603      	mov	r3, r0
 8020d68:	817b      	strh	r3, [r7, #10]
 8020d6a:	460b      	mov	r3, r1
 8020d6c:	813b      	strh	r3, [r7, #8]
 8020d6e:	4613      	mov	r3, r2
 8020d70:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 8020d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020d74:	623b      	str	r3, [r7, #32]
    int32_t ys_ups_start = ys_ups;
 8020d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020d78:	61fb      	str	r3, [r7, #28]

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 8020d7a:	2300      	movs	r3, #0
 8020d7c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8020d7e:	e050      	b.n	8020e22 <argb_no_aa+0xca>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8020d80:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8020d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8020d86:	fb02 f303 	mul.w	r3, r2, r3
 8020d8a:	121b      	asrs	r3, r3, #8
 8020d8c:	6a3a      	ldr	r2, [r7, #32]
 8020d8e:	4413      	add	r3, r2
 8020d90:	633b      	str	r3, [r7, #48]	; 0x30
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8020d92:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8020d96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020d98:	fb02 f303 	mul.w	r3, r2, r3
 8020d9c:	121b      	asrs	r3, r3, #8
 8020d9e:	69fa      	ldr	r2, [r7, #28]
 8020da0:	4413      	add	r3, r2
 8020da2:	637b      	str	r3, [r7, #52]	; 0x34

        int32_t xs_int = xs_ups >> 8;
 8020da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020da6:	121b      	asrs	r3, r3, #8
 8020da8:	61bb      	str	r3, [r7, #24]
        int32_t ys_int = ys_ups >> 8;
 8020daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020dac:	121b      	asrs	r3, r3, #8
 8020dae:	617b      	str	r3, [r7, #20]
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8020db0:	69bb      	ldr	r3, [r7, #24]
 8020db2:	2b00      	cmp	r3, #0
 8020db4:	db0c      	blt.n	8020dd0 <argb_no_aa+0x78>
 8020db6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8020dba:	69ba      	ldr	r2, [r7, #24]
 8020dbc:	429a      	cmp	r2, r3
 8020dbe:	da07      	bge.n	8020dd0 <argb_no_aa+0x78>
 8020dc0:	697b      	ldr	r3, [r7, #20]
 8020dc2:	2b00      	cmp	r3, #0
 8020dc4:	db04      	blt.n	8020dd0 <argb_no_aa+0x78>
 8020dc6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8020dca:	697a      	ldr	r2, [r7, #20]
 8020dcc:	429a      	cmp	r2, r3
 8020dce:	db06      	blt.n	8020dde <argb_no_aa+0x86>
            abuf[x] = 0;
 8020dd0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8020dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8020dd6:	4413      	add	r3, r2
 8020dd8:	2200      	movs	r2, #0
 8020dda:	701a      	strb	r2, [r3, #0]
 8020ddc:	e01b      	b.n	8020e16 <argb_no_aa+0xbe>
        }
        else {
            const uint8_t * src_tmp = src;
 8020dde:	68fb      	ldr	r3, [r7, #12]
 8020de0:	613b      	str	r3, [r7, #16]
            src_tmp += (ys_int * src_stride * LV_IMG_PX_SIZE_ALPHA_BYTE) + xs_int * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8020de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020de6:	697a      	ldr	r2, [r7, #20]
 8020de8:	fb03 f202 	mul.w	r2, r3, r2
 8020dec:	69bb      	ldr	r3, [r7, #24]
 8020dee:	4413      	add	r3, r2
 8020df0:	005b      	lsls	r3, r3, #1
 8020df2:	461a      	mov	r2, r3
 8020df4:	693b      	ldr	r3, [r7, #16]
 8020df6:	4413      	add	r3, r2
 8020df8:	613b      	str	r3, [r7, #16]

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            cbuf[x].full = src_tmp[0];
 8020dfa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8020dfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020e00:	4413      	add	r3, r2
 8020e02:	693a      	ldr	r2, [r7, #16]
 8020e04:	7812      	ldrb	r2, [r2, #0]
 8020e06:	701a      	strb	r2, [r3, #0]
#elif LV_COLOR_DEPTH == 16
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
#elif LV_COLOR_DEPTH == 32
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
            abuf[x] = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8020e08:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8020e0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8020e0e:	4413      	add	r3, r2
 8020e10:	693a      	ldr	r2, [r7, #16]
 8020e12:	7852      	ldrb	r2, [r2, #1]
 8020e14:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < x_end; x++) {
 8020e16:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8020e1a:	b29b      	uxth	r3, r3
 8020e1c:	3301      	adds	r3, #1
 8020e1e:	b29b      	uxth	r3, r3
 8020e20:	84fb      	strh	r3, [r7, #38]	; 0x26
 8020e22:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8020e26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8020e28:	429a      	cmp	r2, r3
 8020e2a:	dca9      	bgt.n	8020d80 <argb_no_aa+0x28>
        }
    }
}
 8020e2c:	bf00      	nop
 8020e2e:	bf00      	nop
 8020e30:	372c      	adds	r7, #44	; 0x2c
 8020e32:	46bd      	mov	sp, r7
 8020e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e38:	4770      	bx	lr

08020e3a <argb_and_rgb_aa>:


static void argb_and_rgb_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                            int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                            int32_t x_end, lv_color_t * cbuf, uint8_t * abuf, lv_img_cf_t cf)
{
 8020e3a:	b590      	push	{r4, r7, lr}
 8020e3c:	b09b      	sub	sp, #108	; 0x6c
 8020e3e:	af00      	add	r7, sp, #0
 8020e40:	60f8      	str	r0, [r7, #12]
 8020e42:	4608      	mov	r0, r1
 8020e44:	4611      	mov	r1, r2
 8020e46:	461a      	mov	r2, r3
 8020e48:	4603      	mov	r3, r0
 8020e4a:	817b      	strh	r3, [r7, #10]
 8020e4c:	460b      	mov	r3, r1
 8020e4e:	813b      	strh	r3, [r7, #8]
 8020e50:	4613      	mov	r3, r2
 8020e52:	80fb      	strh	r3, [r7, #6]
    int32_t xs_ups_start = xs_ups;
 8020e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8020e56:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t ys_ups_start = ys_ups;
 8020e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8020e5a:	643b      	str	r3, [r7, #64]	; 0x40
    bool has_alpha;
    int32_t px_size;
    lv_color_t ck = {0};
 8020e5c:	2300      	movs	r3, #0
 8020e5e:	f887 3020 	strb.w	r3, [r7, #32]
    switch(cf) {
 8020e62:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8020e66:	2b06      	cmp	r3, #6
 8020e68:	d013      	beq.n	8020e92 <argb_and_rgb_aa+0x58>
 8020e6a:	2b06      	cmp	r3, #6
 8020e6c:	f300 8214 	bgt.w	8021298 <argb_and_rgb_aa+0x45e>
 8020e70:	2b04      	cmp	r3, #4
 8020e72:	d002      	beq.n	8020e7a <argb_and_rgb_aa+0x40>
 8020e74:	2b05      	cmp	r3, #5
 8020e76:	d006      	beq.n	8020e86 <argb_and_rgb_aa+0x4c>
            has_alpha = true;
            px_size = sizeof(lv_color_t);
            break;
#endif
        default:
            return;
 8020e78:	e20e      	b.n	8021298 <argb_and_rgb_aa+0x45e>
            has_alpha = false;
 8020e7a:	2300      	movs	r3, #0
 8020e7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            px_size = sizeof(lv_color_t);
 8020e80:	2301      	movs	r3, #1
 8020e82:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 8020e84:	e014      	b.n	8020eb0 <argb_and_rgb_aa+0x76>
            has_alpha = true;
 8020e86:	2301      	movs	r3, #1
 8020e88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 8020e8c:	2302      	movs	r3, #2
 8020e8e:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 8020e90:	e00e      	b.n	8020eb0 <argb_and_rgb_aa+0x76>
                has_alpha = true;
 8020e92:	2301      	movs	r3, #1
 8020e94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                px_size = sizeof(lv_color_t);
 8020e98:	2301      	movs	r3, #1
 8020e9a:	663b      	str	r3, [r7, #96]	; 0x60
                lv_disp_t * d = _lv_refr_get_disp_refreshing();
 8020e9c:	f7ef fcba 	bl	8010814 <_lv_refr_get_disp_refreshing>
 8020ea0:	63f8      	str	r0, [r7, #60]	; 0x3c
                ck = d->driver->color_chroma_key;
 8020ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020ea4:	681b      	ldr	r3, [r3, #0]
 8020ea6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8020eaa:	f887 3020 	strb.w	r3, [r7, #32]
                break;
 8020eae:	bf00      	nop
    }

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 8020eb0:	2300      	movs	r3, #0
 8020eb2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8020eb6:	e1e7      	b.n	8021288 <argb_and_rgb_aa+0x44e>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8020eb8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8020ebc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8020ec0:	fb02 f303 	mul.w	r3, r2, r3
 8020ec4:	121b      	asrs	r3, r3, #8
 8020ec6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020ec8:	4413      	add	r3, r2
 8020eca:	67bb      	str	r3, [r7, #120]	; 0x78
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8020ecc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8020ed0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8020ed4:	fb02 f303 	mul.w	r3, r2, r3
 8020ed8:	121b      	asrs	r3, r3, #8
 8020eda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8020edc:	4413      	add	r3, r2
 8020ede:	67fb      	str	r3, [r7, #124]	; 0x7c

        int32_t xs_int = xs_ups >> 8;
 8020ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8020ee2:	121b      	asrs	r3, r3, #8
 8020ee4:	63bb      	str	r3, [r7, #56]	; 0x38
        int32_t ys_int = ys_ups >> 8;
 8020ee6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8020ee8:	121b      	asrs	r3, r3, #8
 8020eea:	637b      	str	r3, [r7, #52]	; 0x34

        /*Fully out of the image*/
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8020eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020eee:	2b00      	cmp	r3, #0
 8020ef0:	db0c      	blt.n	8020f0c <argb_and_rgb_aa+0xd2>
 8020ef2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8020ef6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8020ef8:	429a      	cmp	r2, r3
 8020efa:	da07      	bge.n	8020f0c <argb_and_rgb_aa+0xd2>
 8020efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020efe:	2b00      	cmp	r3, #0
 8020f00:	db04      	blt.n	8020f0c <argb_and_rgb_aa+0xd2>
 8020f02:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8020f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020f08:	429a      	cmp	r2, r3
 8020f0a:	db07      	blt.n	8020f1c <argb_and_rgb_aa+0xe2>
            abuf[x] = 0x00;
 8020f0c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8020f10:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8020f14:	4413      	add	r3, r2
 8020f16:	2200      	movs	r2, #0
 8020f18:	701a      	strb	r2, [r3, #0]
            continue;
 8020f1a:	e1ae      	b.n	802127a <argb_and_rgb_aa+0x440>
        }

        /*Get the direction the hor and ver neighbor
         *`fract` will be in range of 0x00..0xFF and `next` (+/-1) indicates the direction*/
        int32_t xs_fract = xs_ups & 0xFF;
 8020f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8020f1e:	b2db      	uxtb	r3, r3
 8020f20:	65bb      	str	r3, [r7, #88]	; 0x58
        int32_t ys_fract = ys_ups & 0xFF;
 8020f22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8020f24:	b2db      	uxtb	r3, r3
 8020f26:	657b      	str	r3, [r7, #84]	; 0x54

        int32_t x_next;
        int32_t y_next;
        if(xs_fract < 0x80) {
 8020f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8020f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8020f2c:	dc08      	bgt.n	8020f40 <argb_and_rgb_aa+0x106>
            x_next = -1;
 8020f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020f32:	653b      	str	r3, [r7, #80]	; 0x50
            xs_fract = (0x7F - xs_fract) * 2;
 8020f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8020f36:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8020f3a:	005b      	lsls	r3, r3, #1
 8020f3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8020f3e:	e005      	b.n	8020f4c <argb_and_rgb_aa+0x112>
        }
        else {
            x_next = 1;
 8020f40:	2301      	movs	r3, #1
 8020f42:	653b      	str	r3, [r7, #80]	; 0x50
            xs_fract = (xs_fract - 0x80) * 2;
 8020f44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8020f46:	3b80      	subs	r3, #128	; 0x80
 8020f48:	005b      	lsls	r3, r3, #1
 8020f4a:	65bb      	str	r3, [r7, #88]	; 0x58
        }
        if(ys_fract < 0x80) {
 8020f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8020f50:	dc08      	bgt.n	8020f64 <argb_and_rgb_aa+0x12a>
            y_next = -1;
 8020f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020f56:	64fb      	str	r3, [r7, #76]	; 0x4c
            ys_fract = (0x7F - ys_fract) * 2;
 8020f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020f5a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8020f5e:	005b      	lsls	r3, r3, #1
 8020f60:	657b      	str	r3, [r7, #84]	; 0x54
 8020f62:	e005      	b.n	8020f70 <argb_and_rgb_aa+0x136>
        }
        else {
            y_next = 1;
 8020f64:	2301      	movs	r3, #1
 8020f66:	64fb      	str	r3, [r7, #76]	; 0x4c
            ys_fract = (ys_fract - 0x80) * 2;
 8020f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020f6a:	3b80      	subs	r3, #128	; 0x80
 8020f6c:	005b      	lsls	r3, r3, #1
 8020f6e:	657b      	str	r3, [r7, #84]	; 0x54
        }

        const uint8_t * src_tmp = src;
 8020f70:	68fb      	ldr	r3, [r7, #12]
 8020f72:	633b      	str	r3, [r7, #48]	; 0x30
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 8020f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020f7a:	fb02 f303 	mul.w	r3, r2, r3
 8020f7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8020f80:	fb03 f202 	mul.w	r2, r3, r2
 8020f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020f86:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8020f88:	fb01 f303 	mul.w	r3, r1, r3
 8020f8c:	4413      	add	r3, r2
 8020f8e:	461a      	mov	r2, r3
 8020f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f92:	4413      	add	r3, r2
 8020f94:	633b      	str	r3, [r7, #48]	; 0x30


        if(xs_int + x_next >= 0 &&
 8020f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8020f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020f9a:	4413      	add	r3, r2
 8020f9c:	2b00      	cmp	r3, #0
 8020f9e:	f2c0 80fe 	blt.w	802119e <argb_and_rgb_aa+0x364>
           xs_int + x_next <= src_w - 1 &&
 8020fa2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8020fa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8020fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020faa:	440b      	add	r3, r1
        if(xs_int + x_next >= 0 &&
 8020fac:	429a      	cmp	r2, r3
 8020fae:	f340 80f6 	ble.w	802119e <argb_and_rgb_aa+0x364>
           ys_int + y_next >= 0 &&
 8020fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020fb6:	4413      	add	r3, r2
           xs_int + x_next <= src_w - 1 &&
 8020fb8:	2b00      	cmp	r3, #0
 8020fba:	f2c0 80f0 	blt.w	802119e <argb_and_rgb_aa+0x364>
           ys_int + y_next <= src_h - 1) {
 8020fbe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8020fc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8020fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020fc6:	440b      	add	r3, r1
           ys_int + y_next >= 0 &&
 8020fc8:	429a      	cmp	r2, r3
 8020fca:	f340 80e8 	ble.w	802119e <argb_and_rgb_aa+0x364>

            const uint8_t * px_base = src_tmp;
 8020fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
            const uint8_t * px_hor = src_tmp + x_next * px_size;
 8020fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020fd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8020fd6:	fb02 f303 	mul.w	r3, r2, r3
 8020fda:	461a      	mov	r2, r3
 8020fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fde:	4413      	add	r3, r2
 8020fe0:	62bb      	str	r3, [r7, #40]	; 0x28
            const uint8_t * px_ver = src_tmp + y_next * src_stride * px_size;
 8020fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020fe6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8020fe8:	fb02 f303 	mul.w	r3, r2, r3
 8020fec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8020fee:	fb02 f303 	mul.w	r3, r2, r3
 8020ff2:	461a      	mov	r2, r3
 8020ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ff6:	4413      	add	r3, r2
 8020ff8:	627b      	str	r3, [r7, #36]	; 0x24
            lv_color_t c_base;
            lv_color_t c_ver;
            lv_color_t c_hor;

            if(has_alpha) {
 8020ffa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	f000 808e 	beq.w	8021120 <argb_and_rgb_aa+0x2e6>
                lv_opa_t a_base;
                lv_opa_t a_ver;
                lv_opa_t a_hor;
                if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8021004:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8021008:	2b05      	cmp	r3, #5
 802100a:	d10c      	bne.n	8021026 <argb_and_rgb_aa+0x1ec>
                    a_base = px_base[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 802100c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802100e:	785b      	ldrb	r3, [r3, #1]
 8021010:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                    a_ver = px_ver[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8021014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021016:	785b      	ldrb	r3, [r3, #1]
 8021018:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    a_hor = px_hor[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 802101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802101e:	785b      	ldrb	r3, [r3, #1]
 8021020:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8021024:	e030      	b.n	8021088 <argb_and_rgb_aa+0x24e>
                    a_base = *(a_tmp + (ys_int * src_stride) + xs_int);
                    a_hor = *(a_tmp + (ys_int * src_stride) + xs_int + x_next);
                    a_ver = *(a_tmp + ((ys_int + y_next) * src_stride) + xs_int);
                }
#endif
                else if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8021026:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 802102a:	2b06      	cmp	r3, #6
 802102c:	d123      	bne.n	8021076 <argb_and_rgb_aa+0x23c>
                    if(((lv_color_t *)px_base)->full == ck.full ||
 802102e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021030:	781a      	ldrb	r2, [r3, #0]
 8021032:	f897 3020 	ldrb.w	r3, [r7, #32]
 8021036:	429a      	cmp	r2, r3
 8021038:	d00b      	beq.n	8021052 <argb_and_rgb_aa+0x218>
                       ((lv_color_t *)px_ver)->full == ck.full ||
 802103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802103c:	781a      	ldrb	r2, [r3, #0]
 802103e:	f897 3020 	ldrb.w	r3, [r7, #32]
                    if(((lv_color_t *)px_base)->full == ck.full ||
 8021042:	429a      	cmp	r2, r3
 8021044:	d005      	beq.n	8021052 <argb_and_rgb_aa+0x218>
                       ((lv_color_t *)px_hor)->full == ck.full) {
 8021046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021048:	781a      	ldrb	r2, [r3, #0]
 802104a:	f897 3020 	ldrb.w	r3, [r7, #32]
                       ((lv_color_t *)px_ver)->full == ck.full ||
 802104e:	429a      	cmp	r2, r3
 8021050:	d107      	bne.n	8021062 <argb_and_rgb_aa+0x228>
                        abuf[x] = 0x00;
 8021052:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8021056:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802105a:	4413      	add	r3, r2
 802105c:	2200      	movs	r2, #0
 802105e:	701a      	strb	r2, [r3, #0]
                        continue;
 8021060:	e10b      	b.n	802127a <argb_and_rgb_aa+0x440>
                    }
                    else {
                        a_base = 0xff;
 8021062:	23ff      	movs	r3, #255	; 0xff
 8021064:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                        a_ver = 0xff;
 8021068:	23ff      	movs	r3, #255	; 0xff
 802106a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                        a_hor = 0xff;
 802106e:	23ff      	movs	r3, #255	; 0xff
 8021070:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8021074:	e008      	b.n	8021088 <argb_and_rgb_aa+0x24e>
                    }
                }
                else {
                    a_base = 0xff;
 8021076:	23ff      	movs	r3, #255	; 0xff
 8021078:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                    a_ver = 0xff;
 802107c:	23ff      	movs	r3, #255	; 0xff
 802107e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    a_hor = 0xff;
 8021082:	23ff      	movs	r3, #255	; 0xff
 8021084:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                }

                if(a_ver != a_base) a_ver = ((a_ver * ys_fract) + (a_base * (0x100 - ys_fract))) >> 8;
 8021088:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 802108c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8021090:	429a      	cmp	r2, r3
 8021092:	d00f      	beq.n	80210b4 <argb_and_rgb_aa+0x27a>
 8021094:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8021098:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802109a:	fb03 f202 	mul.w	r2, r3, r2
 802109e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80210a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80210a4:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80210a8:	fb01 f303 	mul.w	r3, r1, r3
 80210ac:	4413      	add	r3, r2
 80210ae:	121b      	asrs	r3, r3, #8
 80210b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                if(a_hor != a_base) a_hor = ((a_hor * xs_fract) + (a_base * (0x100 - xs_fract))) >> 8;
 80210b4:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80210b8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80210bc:	429a      	cmp	r2, r3
 80210be:	d00f      	beq.n	80210e0 <argb_and_rgb_aa+0x2a6>
 80210c0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80210c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80210c6:	fb03 f202 	mul.w	r2, r3, r2
 80210ca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80210ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80210d0:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80210d4:	fb01 f303 	mul.w	r3, r1, r3
 80210d8:	4413      	add	r3, r2
 80210da:	121b      	asrs	r3, r3, #8
 80210dc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                abuf[x] = (a_ver + a_hor) >> 1;
 80210e0:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 80210e4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80210e8:	4413      	add	r3, r2
 80210ea:	1059      	asrs	r1, r3, #1
 80210ec:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80210f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80210f4:	4413      	add	r3, r2
 80210f6:	b2ca      	uxtb	r2, r1
 80210f8:	701a      	strb	r2, [r3, #0]

                if(abuf[x] == 0x00) continue;
 80210fa:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80210fe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8021102:	4413      	add	r3, r2
 8021104:	781b      	ldrb	r3, [r3, #0]
 8021106:	2b00      	cmp	r3, #0
 8021108:	f000 80b6 	beq.w	8021278 <argb_and_rgb_aa+0x43e>

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
                c_base.full = px_base[0];
 802110c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802110e:	781b      	ldrb	r3, [r3, #0]
 8021110:	773b      	strb	r3, [r7, #28]
                c_ver.full = px_ver[0];
 8021112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021114:	781b      	ldrb	r3, [r3, #0]
 8021116:	763b      	strb	r3, [r7, #24]
                c_hor.full = px_hor[0];
 8021118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802111a:	781b      	ldrb	r3, [r3, #0]
 802111c:	753b      	strb	r3, [r7, #20]
 802111e:	e00f      	b.n	8021140 <argb_and_rgb_aa+0x306>
                c_hor.full = *((uint32_t *)px_hor);
#endif
            }
            /*No alpha channel -> RGB*/
            else {
                c_base = *((const lv_color_t *) px_base);
 8021120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021122:	781b      	ldrb	r3, [r3, #0]
 8021124:	773b      	strb	r3, [r7, #28]
                c_hor = *((const lv_color_t *) px_hor);
 8021126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021128:	781b      	ldrb	r3, [r3, #0]
 802112a:	753b      	strb	r3, [r7, #20]
                c_ver = *((const lv_color_t *) px_ver);
 802112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802112e:	781b      	ldrb	r3, [r3, #0]
 8021130:	763b      	strb	r3, [r7, #24]
                abuf[x] = 0xff;
 8021132:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8021136:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802113a:	4413      	add	r3, r2
 802113c:	22ff      	movs	r2, #255	; 0xff
 802113e:	701a      	strb	r2, [r3, #0]
            }

            if(c_base.full == c_ver.full && c_base.full == c_hor.full) {
 8021140:	7f3a      	ldrb	r2, [r7, #28]
 8021142:	7e3b      	ldrb	r3, [r7, #24]
 8021144:	429a      	cmp	r2, r3
 8021146:	d10b      	bne.n	8021160 <argb_and_rgb_aa+0x326>
 8021148:	7f3a      	ldrb	r2, [r7, #28]
 802114a:	7d3b      	ldrb	r3, [r7, #20]
 802114c:	429a      	cmp	r2, r3
 802114e:	d107      	bne.n	8021160 <argb_and_rgb_aa+0x326>
                cbuf[x] = c_base;
 8021150:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8021154:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8021158:	4413      	add	r3, r2
 802115a:	7f3a      	ldrb	r2, [r7, #28]
 802115c:	701a      	strb	r2, [r3, #0]
           ys_int + y_next <= src_h - 1) {
 802115e:	e08c      	b.n	802127a <argb_and_rgb_aa+0x440>
            }
            else {
                c_ver = lv_color_mix(c_ver, c_base, ys_fract);
 8021160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021162:	b2db      	uxtb	r3, r3
 8021164:	461a      	mov	r2, r3
 8021166:	7f39      	ldrb	r1, [r7, #28]
 8021168:	7e38      	ldrb	r0, [r7, #24]
 802116a:	f7ff fbaf 	bl	80208cc <lv_color_mix>
 802116e:	4603      	mov	r3, r0
 8021170:	763b      	strb	r3, [r7, #24]
                c_hor = lv_color_mix(c_hor, c_base, xs_fract);
 8021172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021174:	b2db      	uxtb	r3, r3
 8021176:	461a      	mov	r2, r3
 8021178:	7f39      	ldrb	r1, [r7, #28]
 802117a:	7d38      	ldrb	r0, [r7, #20]
 802117c:	f7ff fba6 	bl	80208cc <lv_color_mix>
 8021180:	4603      	mov	r3, r0
 8021182:	753b      	strb	r3, [r7, #20]
                cbuf[x] = lv_color_mix(c_hor, c_ver, LV_OPA_50);
 8021184:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8021188:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802118c:	18d4      	adds	r4, r2, r3
 802118e:	227f      	movs	r2, #127	; 0x7f
 8021190:	7e39      	ldrb	r1, [r7, #24]
 8021192:	7d38      	ldrb	r0, [r7, #20]
 8021194:	f7ff fb9a 	bl	80208cc <lv_color_mix>
 8021198:	4603      	mov	r3, r0
 802119a:	7023      	strb	r3, [r4, #0]
           ys_int + y_next <= src_h - 1) {
 802119c:	e06d      	b.n	802127a <argb_and_rgb_aa+0x440>
            }
        }
        /*Partially out of the image*/
        else {
#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            cbuf[x].full = src_tmp[0];
 802119e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80211a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80211a6:	4413      	add	r3, r2
 80211a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80211aa:	7812      	ldrb	r2, [r2, #0]
 80211ac:	701a      	strb	r2, [r3, #0]
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
#elif LV_COLOR_DEPTH == 32
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
            lv_opa_t a;
            switch(cf) {
 80211ae:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80211b2:	2b05      	cmp	r3, #5
 80211b4:	d002      	beq.n	80211bc <argb_and_rgb_aa+0x382>
 80211b6:	2b06      	cmp	r3, #6
 80211b8:	d005      	beq.n	80211c6 <argb_and_rgb_aa+0x38c>
 80211ba:	e014      	b.n	80211e6 <argb_and_rgb_aa+0x3ac>
                case LV_IMG_CF_TRUE_COLOR_ALPHA:
                    a = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 80211bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211be:	785b      	ldrb	r3, [r3, #1]
 80211c0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    break;
 80211c4:	e012      	b.n	80211ec <argb_and_rgb_aa+0x3b2>
                case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED:
                    a = cbuf[x].full == ck.full ? 0x00 : 0xff;
 80211c6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80211ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80211ce:	4413      	add	r3, r2
 80211d0:	781a      	ldrb	r2, [r3, #0]
 80211d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80211d6:	429a      	cmp	r2, r3
 80211d8:	d101      	bne.n	80211de <argb_and_rgb_aa+0x3a4>
 80211da:	2300      	movs	r3, #0
 80211dc:	e000      	b.n	80211e0 <argb_and_rgb_aa+0x3a6>
 80211de:	23ff      	movs	r3, #255	; 0xff
 80211e0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    break;
 80211e4:	e002      	b.n	80211ec <argb_and_rgb_aa+0x3b2>
                case LV_IMG_CF_RGB565A8:
                    a = *(src + src_stride * src_h * sizeof(lv_color_t) + (ys_int * src_stride) + xs_int);
                    break;
#endif
                default:
                    a = 0xff;
 80211e6:	23ff      	movs	r3, #255	; 0xff
 80211e8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
            }

            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 80211ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80211ee:	2b00      	cmp	r3, #0
 80211f0:	d102      	bne.n	80211f8 <argb_and_rgb_aa+0x3be>
 80211f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80211f4:	2b00      	cmp	r3, #0
 80211f6:	db08      	blt.n	802120a <argb_and_rgb_aa+0x3d0>
 80211f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80211fc:	3b01      	subs	r3, #1
 80211fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021200:	429a      	cmp	r2, r3
 8021202:	d112      	bne.n	802122a <argb_and_rgb_aa+0x3f0>
 8021204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021206:	2b00      	cmp	r3, #0
 8021208:	dd0f      	ble.n	802122a <argb_and_rgb_aa+0x3f0>
                abuf[x] = (a * (0xFF - xs_fract)) >> 8;
 802120a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 802120e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8021210:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8021214:	fb02 f303 	mul.w	r3, r2, r3
 8021218:	1219      	asrs	r1, r3, #8
 802121a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 802121e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8021222:	4413      	add	r3, r2
 8021224:	b2ca      	uxtb	r2, r1
 8021226:	701a      	strb	r2, [r3, #0]
 8021228:	e027      	b.n	802127a <argb_and_rgb_aa+0x440>
            }
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 802122a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802122c:	2b00      	cmp	r3, #0
 802122e:	d102      	bne.n	8021236 <argb_and_rgb_aa+0x3fc>
 8021230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021232:	2b00      	cmp	r3, #0
 8021234:	db08      	blt.n	8021248 <argb_and_rgb_aa+0x40e>
 8021236:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 802123a:	3b01      	subs	r3, #1
 802123c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802123e:	429a      	cmp	r2, r3
 8021240:	d112      	bne.n	8021268 <argb_and_rgb_aa+0x42e>
 8021242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021244:	2b00      	cmp	r3, #0
 8021246:	dd0f      	ble.n	8021268 <argb_and_rgb_aa+0x42e>
                abuf[x] = (a * (0xFF - ys_fract)) >> 8;
 8021248:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 802124c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802124e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8021252:	fb02 f303 	mul.w	r3, r2, r3
 8021256:	1219      	asrs	r1, r3, #8
 8021258:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 802125c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8021260:	4413      	add	r3, r2
 8021262:	b2ca      	uxtb	r2, r1
 8021264:	701a      	strb	r2, [r3, #0]
 8021266:	e008      	b.n	802127a <argb_and_rgb_aa+0x440>
            }
            else {
                abuf[x] = 0x00;
 8021268:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 802126c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8021270:	4413      	add	r3, r2
 8021272:	2200      	movs	r2, #0
 8021274:	701a      	strb	r2, [r3, #0]
 8021276:	e000      	b.n	802127a <argb_and_rgb_aa+0x440>
                if(abuf[x] == 0x00) continue;
 8021278:	bf00      	nop
    for(x = 0; x < x_end; x++) {
 802127a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 802127e:	b29b      	uxth	r3, r3
 8021280:	3301      	adds	r3, #1
 8021282:	b29b      	uxth	r3, r3
 8021284:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8021288:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 802128c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8021290:	429a      	cmp	r2, r3
 8021292:	f73f ae11 	bgt.w	8020eb8 <argb_and_rgb_aa+0x7e>
 8021296:	e000      	b.n	802129a <argb_and_rgb_aa+0x460>
            return;
 8021298:	bf00      	nop
            }
        }
    }
}
 802129a:	376c      	adds	r7, #108	; 0x6c
 802129c:	46bd      	mov	sp, r7
 802129e:	bd90      	pop	{r4, r7, pc}

080212a0 <transform_point_upscaled>:

static void transform_point_upscaled(point_transform_dsc_t * t, int32_t xin, int32_t yin, int32_t * xout,
                                     int32_t * yout)
{
 80212a0:	b480      	push	{r7}
 80212a2:	b085      	sub	sp, #20
 80212a4:	af00      	add	r7, sp, #0
 80212a6:	60f8      	str	r0, [r7, #12]
 80212a8:	60b9      	str	r1, [r7, #8]
 80212aa:	607a      	str	r2, [r7, #4]
 80212ac:	603b      	str	r3, [r7, #0]
    if(t->angle == 0 && t->zoom == LV_IMG_ZOOM_NONE) {
 80212ae:	68fb      	ldr	r3, [r7, #12]
 80212b0:	69db      	ldr	r3, [r3, #28]
 80212b2:	2b00      	cmp	r3, #0
 80212b4:	d10d      	bne.n	80212d2 <transform_point_upscaled+0x32>
 80212b6:	68fb      	ldr	r3, [r7, #12]
 80212b8:	699b      	ldr	r3, [r3, #24]
 80212ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80212be:	d108      	bne.n	80212d2 <transform_point_upscaled+0x32>
        *xout = xin * 256;
 80212c0:	68bb      	ldr	r3, [r7, #8]
 80212c2:	021a      	lsls	r2, r3, #8
 80212c4:	683b      	ldr	r3, [r7, #0]
 80212c6:	601a      	str	r2, [r3, #0]
        *yout = yin * 256;
 80212c8:	687b      	ldr	r3, [r7, #4]
 80212ca:	021a      	lsls	r2, r3, #8
 80212cc:	69bb      	ldr	r3, [r7, #24]
 80212ce:	601a      	str	r2, [r3, #0]
        return;
 80212d0:	e078      	b.n	80213c4 <transform_point_upscaled+0x124>
    }

    xin -= t->pivot.x;
 80212d2:	68fb      	ldr	r3, [r7, #12]
 80212d4:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80212d8:	461a      	mov	r2, r3
 80212da:	68bb      	ldr	r3, [r7, #8]
 80212dc:	1a9b      	subs	r3, r3, r2
 80212de:	60bb      	str	r3, [r7, #8]
    yin -= t->pivot.y;
 80212e0:	68fb      	ldr	r3, [r7, #12]
 80212e2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80212e6:	461a      	mov	r2, r3
 80212e8:	687b      	ldr	r3, [r7, #4]
 80212ea:	1a9b      	subs	r3, r3, r2
 80212ec:	607b      	str	r3, [r7, #4]

    if(t->angle == 0) {
 80212ee:	68fb      	ldr	r3, [r7, #12]
 80212f0:	69db      	ldr	r3, [r3, #28]
 80212f2:	2b00      	cmp	r3, #0
 80212f4:	d114      	bne.n	8021320 <transform_point_upscaled+0x80>
        *xout = ((int32_t)(xin * t->zoom)) + (t->pivot_x_256);
 80212f6:	68fb      	ldr	r3, [r7, #12]
 80212f8:	699b      	ldr	r3, [r3, #24]
 80212fa:	68ba      	ldr	r2, [r7, #8]
 80212fc:	fb03 f202 	mul.w	r2, r3, r2
 8021300:	68fb      	ldr	r3, [r7, #12]
 8021302:	6a1b      	ldr	r3, [r3, #32]
 8021304:	441a      	add	r2, r3
 8021306:	683b      	ldr	r3, [r7, #0]
 8021308:	601a      	str	r2, [r3, #0]
        *yout = ((int32_t)(yin * t->zoom)) + (t->pivot_y_256);
 802130a:	68fb      	ldr	r3, [r7, #12]
 802130c:	699b      	ldr	r3, [r3, #24]
 802130e:	687a      	ldr	r2, [r7, #4]
 8021310:	fb03 f202 	mul.w	r2, r3, r2
 8021314:	68fb      	ldr	r3, [r7, #12]
 8021316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021318:	441a      	add	r2, r3
 802131a:	69bb      	ldr	r3, [r7, #24]
 802131c:	601a      	str	r2, [r3, #0]
 802131e:	e051      	b.n	80213c4 <transform_point_upscaled+0x124>
    }
    else if(t->zoom == LV_IMG_ZOOM_NONE) {
 8021320:	68fb      	ldr	r3, [r7, #12]
 8021322:	699b      	ldr	r3, [r3, #24]
 8021324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021328:	d122      	bne.n	8021370 <transform_point_upscaled+0xd0>
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 802132a:	68fb      	ldr	r3, [r7, #12]
 802132c:	695b      	ldr	r3, [r3, #20]
 802132e:	68ba      	ldr	r2, [r7, #8]
 8021330:	fb03 f202 	mul.w	r2, r3, r2
 8021334:	68fb      	ldr	r3, [r7, #12]
 8021336:	691b      	ldr	r3, [r3, #16]
 8021338:	6879      	ldr	r1, [r7, #4]
 802133a:	fb01 f303 	mul.w	r3, r1, r3
 802133e:	1ad3      	subs	r3, r2, r3
 8021340:	109a      	asrs	r2, r3, #2
 8021342:	68fb      	ldr	r3, [r7, #12]
 8021344:	6a1b      	ldr	r3, [r3, #32]
 8021346:	441a      	add	r2, r3
 8021348:	683b      	ldr	r3, [r7, #0]
 802134a:	601a      	str	r2, [r3, #0]
        *yout = ((t->sinma * xin + t->cosma * yin) >> 2) + (t->pivot_y_256);
 802134c:	68fb      	ldr	r3, [r7, #12]
 802134e:	691b      	ldr	r3, [r3, #16]
 8021350:	68ba      	ldr	r2, [r7, #8]
 8021352:	fb03 f202 	mul.w	r2, r3, r2
 8021356:	68fb      	ldr	r3, [r7, #12]
 8021358:	695b      	ldr	r3, [r3, #20]
 802135a:	6879      	ldr	r1, [r7, #4]
 802135c:	fb01 f303 	mul.w	r3, r1, r3
 8021360:	4413      	add	r3, r2
 8021362:	109a      	asrs	r2, r3, #2
 8021364:	68fb      	ldr	r3, [r7, #12]
 8021366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021368:	441a      	add	r2, r3
 802136a:	69bb      	ldr	r3, [r7, #24]
 802136c:	601a      	str	r2, [r3, #0]
 802136e:	e029      	b.n	80213c4 <transform_point_upscaled+0x124>
    }
    else {
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
 8021370:	68fb      	ldr	r3, [r7, #12]
 8021372:	695b      	ldr	r3, [r3, #20]
 8021374:	68ba      	ldr	r2, [r7, #8]
 8021376:	fb03 f202 	mul.w	r2, r3, r2
 802137a:	68fb      	ldr	r3, [r7, #12]
 802137c:	691b      	ldr	r3, [r3, #16]
 802137e:	6879      	ldr	r1, [r7, #4]
 8021380:	fb01 f303 	mul.w	r3, r1, r3
 8021384:	1ad3      	subs	r3, r2, r3
 8021386:	68fa      	ldr	r2, [r7, #12]
 8021388:	6992      	ldr	r2, [r2, #24]
 802138a:	fb02 f303 	mul.w	r3, r2, r3
 802138e:	129a      	asrs	r2, r3, #10
 8021390:	68fb      	ldr	r3, [r7, #12]
 8021392:	6a1b      	ldr	r3, [r3, #32]
 8021394:	441a      	add	r2, r3
 8021396:	683b      	ldr	r3, [r7, #0]
 8021398:	601a      	str	r2, [r3, #0]
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
 802139a:	68fb      	ldr	r3, [r7, #12]
 802139c:	691b      	ldr	r3, [r3, #16]
 802139e:	68ba      	ldr	r2, [r7, #8]
 80213a0:	fb03 f202 	mul.w	r2, r3, r2
 80213a4:	68fb      	ldr	r3, [r7, #12]
 80213a6:	695b      	ldr	r3, [r3, #20]
 80213a8:	6879      	ldr	r1, [r7, #4]
 80213aa:	fb01 f303 	mul.w	r3, r1, r3
 80213ae:	4413      	add	r3, r2
 80213b0:	68fa      	ldr	r2, [r7, #12]
 80213b2:	6992      	ldr	r2, [r2, #24]
 80213b4:	fb02 f303 	mul.w	r3, r2, r3
 80213b8:	129a      	asrs	r2, r3, #10
 80213ba:	68fb      	ldr	r3, [r7, #12]
 80213bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80213be:	441a      	add	r2, r3
 80213c0:	69bb      	ldr	r3, [r7, #24]
 80213c2:	601a      	str	r2, [r3, #0]
    }
}
 80213c4:	3714      	adds	r7, #20
 80213c6:	46bd      	mov	sp, r7
 80213c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213cc:	4770      	bx	lr

080213ce <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 80213ce:	b480      	push	{r7}
 80213d0:	af00      	add	r7, sp, #0
    lv_freetype_init(LV_FREETYPE_CACHE_FT_FACES, LV_FREETYPE_CACHE_FT_SIZES, LV_FREETYPE_CACHE_SIZE);
#  else
    lv_freetype_init(0, 0, 0);
#  endif
#endif
}
 80213d2:	bf00      	nop
 80213d4:	46bd      	mov	sp, r7
 80213d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213da:	4770      	bx	lr

080213dc <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter a UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 80213dc:	b580      	push	{r7, lr}
 80213de:	b082      	sub	sp, #8
 80213e0:	af00      	add	r7, sp, #0
 80213e2:	6078      	str	r0, [r7, #4]
 80213e4:	6039      	str	r1, [r7, #0]
    LV_ASSERT_NULL(font_p);
 80213e6:	687b      	ldr	r3, [r7, #4]
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	d100      	bne.n	80213ee <lv_font_get_glyph_bitmap+0x12>
 80213ec:	e7fe      	b.n	80213ec <lv_font_get_glyph_bitmap+0x10>
    return font_p->get_glyph_bitmap(font_p, letter);
 80213ee:	687b      	ldr	r3, [r7, #4]
 80213f0:	685b      	ldr	r3, [r3, #4]
 80213f2:	6839      	ldr	r1, [r7, #0]
 80213f4:	6878      	ldr	r0, [r7, #4]
 80213f6:	4798      	blx	r3
 80213f8:	4603      	mov	r3, r0
}
 80213fa:	4618      	mov	r0, r3
 80213fc:	3708      	adds	r7, #8
 80213fe:	46bd      	mov	sp, r7
 8021400:	bd80      	pop	{r7, pc}

08021402 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
 8021402:	b590      	push	{r4, r7, lr}
 8021404:	b089      	sub	sp, #36	; 0x24
 8021406:	af00      	add	r7, sp, #0
 8021408:	60f8      	str	r0, [r7, #12]
 802140a:	60b9      	str	r1, [r7, #8]
 802140c:	607a      	str	r2, [r7, #4]
 802140e:	603b      	str	r3, [r7, #0]

    LV_ASSERT_NULL(font_p);
 8021410:	68fb      	ldr	r3, [r7, #12]
 8021412:	2b00      	cmp	r3, #0
 8021414:	d100      	bne.n	8021418 <lv_font_get_glyph_dsc+0x16>
 8021416:	e7fe      	b.n	8021416 <lv_font_get_glyph_dsc+0x14>
    LV_ASSERT_NULL(dsc_out);
 8021418:	68bb      	ldr	r3, [r7, #8]
 802141a:	2b00      	cmp	r3, #0
 802141c:	d100      	bne.n	8021420 <lv_font_get_glyph_dsc+0x1e>
 802141e:	e7fe      	b.n	802141e <lv_font_get_glyph_dsc+0x1c>

#if LV_USE_FONT_PLACEHOLDER
    const lv_font_t * placeholder_font = NULL;
 8021420:	2300      	movs	r3, #0
 8021422:	61fb      	str	r3, [r7, #28]
#endif

    const lv_font_t * f = font_p;
 8021424:	68fb      	ldr	r3, [r7, #12]
 8021426:	61bb      	str	r3, [r7, #24]

    dsc_out->resolved_font = NULL;
 8021428:	68bb      	ldr	r3, [r7, #8]
 802142a:	2200      	movs	r2, #0
 802142c:	601a      	str	r2, [r3, #0]

    while(f) {
 802142e:	e01f      	b.n	8021470 <lv_font_get_glyph_dsc+0x6e>
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 8021430:	69bb      	ldr	r3, [r7, #24]
 8021432:	681c      	ldr	r4, [r3, #0]
 8021434:	683b      	ldr	r3, [r7, #0]
 8021436:	687a      	ldr	r2, [r7, #4]
 8021438:	68b9      	ldr	r1, [r7, #8]
 802143a:	69b8      	ldr	r0, [r7, #24]
 802143c:	47a0      	blx	r4
 802143e:	4603      	mov	r3, r0
 8021440:	75fb      	strb	r3, [r7, #23]
        if(found) {
 8021442:	7dfb      	ldrb	r3, [r7, #23]
 8021444:	2b00      	cmp	r3, #0
 8021446:	d010      	beq.n	802146a <lv_font_get_glyph_dsc+0x68>
            if(!dsc_out->is_placeholder) {
 8021448:	68bb      	ldr	r3, [r7, #8]
 802144a:	7b9b      	ldrb	r3, [r3, #14]
 802144c:	f003 0310 	and.w	r3, r3, #16
 8021450:	b2db      	uxtb	r3, r3
 8021452:	2b00      	cmp	r3, #0
 8021454:	d104      	bne.n	8021460 <lv_font_get_glyph_dsc+0x5e>
                dsc_out->resolved_font = f;
 8021456:	68bb      	ldr	r3, [r7, #8]
 8021458:	69ba      	ldr	r2, [r7, #24]
 802145a:	601a      	str	r2, [r3, #0]
                return true;
 802145c:	2301      	movs	r3, #1
 802145e:	e059      	b.n	8021514 <lv_font_get_glyph_dsc+0x112>
            }
#if LV_USE_FONT_PLACEHOLDER
            else if(placeholder_font == NULL) {
 8021460:	69fb      	ldr	r3, [r7, #28]
 8021462:	2b00      	cmp	r3, #0
 8021464:	d101      	bne.n	802146a <lv_font_get_glyph_dsc+0x68>
                placeholder_font = f;
 8021466:	69bb      	ldr	r3, [r7, #24]
 8021468:	61fb      	str	r3, [r7, #28]
            }
#endif
        }
        f = f->fallback;
 802146a:	69bb      	ldr	r3, [r7, #24]
 802146c:	695b      	ldr	r3, [r3, #20]
 802146e:	61bb      	str	r3, [r7, #24]
    while(f) {
 8021470:	69bb      	ldr	r3, [r7, #24]
 8021472:	2b00      	cmp	r3, #0
 8021474:	d1dc      	bne.n	8021430 <lv_font_get_glyph_dsc+0x2e>
    }

#if LV_USE_FONT_PLACEHOLDER
    if(placeholder_font != NULL) {
 8021476:	69fb      	ldr	r3, [r7, #28]
 8021478:	2b00      	cmp	r3, #0
 802147a:	d00b      	beq.n	8021494 <lv_font_get_glyph_dsc+0x92>
        placeholder_font->get_glyph_dsc(placeholder_font, dsc_out, letter, letter_next);
 802147c:	69fb      	ldr	r3, [r7, #28]
 802147e:	681c      	ldr	r4, [r3, #0]
 8021480:	683b      	ldr	r3, [r7, #0]
 8021482:	687a      	ldr	r2, [r7, #4]
 8021484:	68b9      	ldr	r1, [r7, #8]
 8021486:	69f8      	ldr	r0, [r7, #28]
 8021488:	47a0      	blx	r4
        dsc_out->resolved_font = placeholder_font;
 802148a:	68bb      	ldr	r3, [r7, #8]
 802148c:	69fa      	ldr	r2, [r7, #28]
 802148e:	601a      	str	r2, [r3, #0]
        return true;
 8021490:	2301      	movs	r3, #1
 8021492:	e03f      	b.n	8021514 <lv_font_get_glyph_dsc+0x112>
    }
#endif

    if(letter < 0x20 ||
 8021494:	687b      	ldr	r3, [r7, #4]
 8021496:	2b1f      	cmp	r3, #31
 8021498:	d909      	bls.n	80214ae <lv_font_get_glyph_dsc+0xac>
 802149a:	687b      	ldr	r3, [r7, #4]
 802149c:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 80214a0:	4293      	cmp	r3, r2
 80214a2:	d004      	beq.n	80214ae <lv_font_get_glyph_dsc+0xac>
       letter == 0xf8ff || /*LV_SYMBOL_DUMMY*/
 80214a4:	687b      	ldr	r3, [r7, #4]
 80214a6:	f242 020c 	movw	r2, #8204	; 0x200c
 80214aa:	4293      	cmp	r3, r2
 80214ac:	d106      	bne.n	80214bc <lv_font_get_glyph_dsc+0xba>
       letter == 0x200c) { /*ZERO WIDTH NON-JOINER*/
        dsc_out->box_w = 0;
 80214ae:	68bb      	ldr	r3, [r7, #8]
 80214b0:	2200      	movs	r2, #0
 80214b2:	80da      	strh	r2, [r3, #6]
        dsc_out->adv_w = 0;
 80214b4:	68bb      	ldr	r3, [r7, #8]
 80214b6:	2200      	movs	r2, #0
 80214b8:	809a      	strh	r2, [r3, #4]
 80214ba:	e010      	b.n	80214de <lv_font_get_glyph_dsc+0xdc>
    }
    else {
#if LV_USE_FONT_PLACEHOLDER
        dsc_out->box_w = font_p->line_height / 2;
 80214bc:	68fb      	ldr	r3, [r7, #12]
 80214be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80214c2:	2b00      	cmp	r3, #0
 80214c4:	da00      	bge.n	80214c8 <lv_font_get_glyph_dsc+0xc6>
 80214c6:	3301      	adds	r3, #1
 80214c8:	105b      	asrs	r3, r3, #1
 80214ca:	b21b      	sxth	r3, r3
 80214cc:	b29a      	uxth	r2, r3
 80214ce:	68bb      	ldr	r3, [r7, #8]
 80214d0:	80da      	strh	r2, [r3, #6]
        dsc_out->adv_w = dsc_out->box_w + 2;
 80214d2:	68bb      	ldr	r3, [r7, #8]
 80214d4:	88db      	ldrh	r3, [r3, #6]
 80214d6:	3302      	adds	r3, #2
 80214d8:	b29a      	uxth	r2, r3
 80214da:	68bb      	ldr	r3, [r7, #8]
 80214dc:	809a      	strh	r2, [r3, #4]
        dsc_out->box_w = 0;
        dsc_out->adv_w = 0;
#endif
    }

    dsc_out->resolved_font = NULL;
 80214de:	68bb      	ldr	r3, [r7, #8]
 80214e0:	2200      	movs	r2, #0
 80214e2:	601a      	str	r2, [r3, #0]
    dsc_out->box_h = font_p->line_height;
 80214e4:	68fb      	ldr	r3, [r7, #12]
 80214e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80214ea:	b29a      	uxth	r2, r3
 80214ec:	68bb      	ldr	r3, [r7, #8]
 80214ee:	811a      	strh	r2, [r3, #8]
    dsc_out->ofs_x = 0;
 80214f0:	68bb      	ldr	r3, [r7, #8]
 80214f2:	2200      	movs	r2, #0
 80214f4:	815a      	strh	r2, [r3, #10]
    dsc_out->ofs_y = 0;
 80214f6:	68bb      	ldr	r3, [r7, #8]
 80214f8:	2200      	movs	r2, #0
 80214fa:	819a      	strh	r2, [r3, #12]
    dsc_out->bpp   = 1;
 80214fc:	68ba      	ldr	r2, [r7, #8]
 80214fe:	7b93      	ldrb	r3, [r2, #14]
 8021500:	2101      	movs	r1, #1
 8021502:	f361 0303 	bfi	r3, r1, #0, #4
 8021506:	7393      	strb	r3, [r2, #14]
    dsc_out->is_placeholder = true;
 8021508:	68ba      	ldr	r2, [r7, #8]
 802150a:	7b93      	ldrb	r3, [r2, #14]
 802150c:	f043 0310 	orr.w	r3, r3, #16
 8021510:	7393      	strb	r3, [r2, #14]

    return false;
 8021512:	2300      	movs	r3, #0
}
 8021514:	4618      	mov	r0, r3
 8021516:	3724      	adds	r7, #36	; 0x24
 8021518:	46bd      	mov	sp, r7
 802151a:	bd90      	pop	{r4, r7, pc}

0802151c <lv_font_get_glyph_width>:
 * @param letter a UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 802151c:	b580      	push	{r7, lr}
 802151e:	b088      	sub	sp, #32
 8021520:	af00      	add	r7, sp, #0
 8021522:	60f8      	str	r0, [r7, #12]
 8021524:	60b9      	str	r1, [r7, #8]
 8021526:	607a      	str	r2, [r7, #4]
    LV_ASSERT_NULL(font);
 8021528:	68fb      	ldr	r3, [r7, #12]
 802152a:	2b00      	cmp	r3, #0
 802152c:	d100      	bne.n	8021530 <lv_font_get_glyph_width+0x14>
 802152e:	e7fe      	b.n	802152e <lv_font_get_glyph_width+0x12>
    lv_font_glyph_dsc_t g;
    lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 8021530:	f107 0110 	add.w	r1, r7, #16
 8021534:	687b      	ldr	r3, [r7, #4]
 8021536:	68ba      	ldr	r2, [r7, #8]
 8021538:	68f8      	ldr	r0, [r7, #12]
 802153a:	f7ff ff62 	bl	8021402 <lv_font_get_glyph_dsc>
    return g.adv_w;
 802153e:	8abb      	ldrh	r3, [r7, #20]
}
 8021540:	4618      	mov	r0, r3
 8021542:	3720      	adds	r7, #32
 8021544:	46bd      	mov	sp, r7
 8021546:	bd80      	pop	{r7, pc}

08021548 <lv_font_get_bitmap_fmt_txt>:
 * @param font pointer to font
 * @param unicode_letter a unicode letter which bitmap should be get
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)
{
 8021548:	b580      	push	{r7, lr}
 802154a:	b086      	sub	sp, #24
 802154c:	af00      	add	r7, sp, #0
 802154e:	6078      	str	r0, [r7, #4]
 8021550:	6039      	str	r1, [r7, #0]
    if(unicode_letter == '\t') unicode_letter = ' ';
 8021552:	683b      	ldr	r3, [r7, #0]
 8021554:	2b09      	cmp	r3, #9
 8021556:	d101      	bne.n	802155c <lv_font_get_bitmap_fmt_txt+0x14>
 8021558:	2320      	movs	r3, #32
 802155a:	603b      	str	r3, [r7, #0]

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 802155c:	687b      	ldr	r3, [r7, #4]
 802155e:	691b      	ldr	r3, [r3, #16]
 8021560:	617b      	str	r3, [r7, #20]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8021562:	6839      	ldr	r1, [r7, #0]
 8021564:	6878      	ldr	r0, [r7, #4]
 8021566:	f000 f8b9 	bl	80216dc <get_glyph_dsc_id>
 802156a:	6138      	str	r0, [r7, #16]
    if(!gid) return NULL;
 802156c:	693b      	ldr	r3, [r7, #16]
 802156e:	2b00      	cmp	r3, #0
 8021570:	d101      	bne.n	8021576 <lv_font_get_bitmap_fmt_txt+0x2e>
 8021572:	2300      	movs	r3, #0
 8021574:	e015      	b.n	80215a2 <lv_font_get_bitmap_fmt_txt+0x5a>

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8021576:	697b      	ldr	r3, [r7, #20]
 8021578:	685a      	ldr	r2, [r3, #4]
 802157a:	693b      	ldr	r3, [r7, #16]
 802157c:	00db      	lsls	r3, r3, #3
 802157e:	4413      	add	r3, r2
 8021580:	60fb      	str	r3, [r7, #12]

    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 8021582:	697b      	ldr	r3, [r7, #20]
 8021584:	7cdb      	ldrb	r3, [r3, #19]
 8021586:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 802158a:	b2db      	uxtb	r3, r3
 802158c:	2b00      	cmp	r3, #0
 802158e:	d107      	bne.n	80215a0 <lv_font_get_bitmap_fmt_txt+0x58>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8021590:	697b      	ldr	r3, [r7, #20]
 8021592:	681b      	ldr	r3, [r3, #0]
 8021594:	68fa      	ldr	r2, [r7, #12]
 8021596:	6812      	ldr	r2, [r2, #0]
 8021598:	f3c2 0213 	ubfx	r2, r2, #0, #20
 802159c:	4413      	add	r3, r2
 802159e:	e000      	b.n	80215a2 <lv_font_get_bitmap_fmt_txt+0x5a>
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
                   (uint8_t)fdsc->bpp, prefilter);
        return LV_GC_ROOT(_lv_font_decompr_buf);
#else /*!LV_USE_FONT_COMPRESSED*/
        LV_LOG_WARN("Compressed fonts is used but LV_USE_FONT_COMPRESSED is not enabled in lv_conf.h");
        return NULL;
 80215a0:	2300      	movs	r3, #0
#endif
    }

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
}
 80215a2:	4618      	mov	r0, r3
 80215a4:	3718      	adds	r7, #24
 80215a6:	46bd      	mov	sp, r7
 80215a8:	bd80      	pop	{r7, pc}

080215aa <lv_font_get_glyph_dsc_fmt_txt>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter,
                                   uint32_t unicode_letter_next)
{
 80215aa:	b580      	push	{r7, lr}
 80215ac:	b08c      	sub	sp, #48	; 0x30
 80215ae:	af00      	add	r7, sp, #0
 80215b0:	60f8      	str	r0, [r7, #12]
 80215b2:	60b9      	str	r1, [r7, #8]
 80215b4:	607a      	str	r2, [r7, #4]
 80215b6:	603b      	str	r3, [r7, #0]
    bool is_tab = false;
 80215b8:	2300      	movs	r3, #0
 80215ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(unicode_letter == '\t') {
 80215be:	687b      	ldr	r3, [r7, #4]
 80215c0:	2b09      	cmp	r3, #9
 80215c2:	d104      	bne.n	80215ce <lv_font_get_glyph_dsc_fmt_txt+0x24>
        unicode_letter = ' ';
 80215c4:	2320      	movs	r3, #32
 80215c6:	607b      	str	r3, [r7, #4]
        is_tab = true;
 80215c8:	2301      	movs	r3, #1
 80215ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 80215ce:	68fb      	ldr	r3, [r7, #12]
 80215d0:	691b      	ldr	r3, [r3, #16]
 80215d2:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 80215d4:	6879      	ldr	r1, [r7, #4]
 80215d6:	68f8      	ldr	r0, [r7, #12]
 80215d8:	f000 f880 	bl	80216dc <get_glyph_dsc_id>
 80215dc:	6238      	str	r0, [r7, #32]
    if(!gid) return false;
 80215de:	6a3b      	ldr	r3, [r7, #32]
 80215e0:	2b00      	cmp	r3, #0
 80215e2:	d101      	bne.n	80215e8 <lv_font_get_glyph_dsc_fmt_txt+0x3e>
 80215e4:	2300      	movs	r3, #0
 80215e6:	e06d      	b.n	80216c4 <lv_font_get_glyph_dsc_fmt_txt+0x11a>

    int8_t kvalue = 0;
 80215e8:	2300      	movs	r3, #0
 80215ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if(fdsc->kern_dsc) {
 80215ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80215f0:	68db      	ldr	r3, [r3, #12]
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	d00f      	beq.n	8021616 <lv_font_get_glyph_dsc_fmt_txt+0x6c>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 80215f6:	6839      	ldr	r1, [r7, #0]
 80215f8:	68f8      	ldr	r0, [r7, #12]
 80215fa:	f000 f86f 	bl	80216dc <get_glyph_dsc_id>
 80215fe:	61f8      	str	r0, [r7, #28]
        if(gid_next) {
 8021600:	69fb      	ldr	r3, [r7, #28]
 8021602:	2b00      	cmp	r3, #0
 8021604:	d007      	beq.n	8021616 <lv_font_get_glyph_dsc_fmt_txt+0x6c>
            kvalue = get_kern_value(font, gid, gid_next);
 8021606:	69fa      	ldr	r2, [r7, #28]
 8021608:	6a39      	ldr	r1, [r7, #32]
 802160a:	68f8      	ldr	r0, [r7, #12]
 802160c:	f000 f9aa 	bl	8021964 <get_kern_value>
 8021610:	4603      	mov	r3, r0
 8021612:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
    }

    /*Put together a glyph dsc*/
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8021616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021618:	685a      	ldr	r2, [r3, #4]
 802161a:	6a3b      	ldr	r3, [r7, #32]
 802161c:	00db      	lsls	r3, r3, #3
 802161e:	4413      	add	r3, r2
 8021620:	61bb      	str	r3, [r7, #24]

    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8021622:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8021626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021628:	8a12      	ldrh	r2, [r2, #16]
 802162a:	fb02 f303 	mul.w	r3, r2, r3
 802162e:	111b      	asrs	r3, r3, #4
 8021630:	617b      	str	r3, [r7, #20]

    uint32_t adv_w = gdsc->adv_w;
 8021632:	69bb      	ldr	r3, [r7, #24]
 8021634:	885b      	ldrh	r3, [r3, #2]
 8021636:	f3c3 130b 	ubfx	r3, r3, #4, #12
 802163a:	b29b      	uxth	r3, r3
 802163c:	62bb      	str	r3, [r7, #40]	; 0x28
    if(is_tab) adv_w *= 2;
 802163e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021642:	2b00      	cmp	r3, #0
 8021644:	d002      	beq.n	802164c <lv_font_get_glyph_dsc_fmt_txt+0xa2>
 8021646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021648:	005b      	lsls	r3, r3, #1
 802164a:	62bb      	str	r3, [r7, #40]	; 0x28

    adv_w += kv;
 802164c:	697b      	ldr	r3, [r7, #20]
 802164e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021650:	4413      	add	r3, r2
 8021652:	62bb      	str	r3, [r7, #40]	; 0x28
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8021654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021656:	3308      	adds	r3, #8
 8021658:	091b      	lsrs	r3, r3, #4
 802165a:	62bb      	str	r3, [r7, #40]	; 0x28

    dsc_out->adv_w = adv_w;
 802165c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802165e:	b29a      	uxth	r2, r3
 8021660:	68bb      	ldr	r3, [r7, #8]
 8021662:	809a      	strh	r2, [r3, #4]
    dsc_out->box_h = gdsc->box_h;
 8021664:	69bb      	ldr	r3, [r7, #24]
 8021666:	795b      	ldrb	r3, [r3, #5]
 8021668:	b29a      	uxth	r2, r3
 802166a:	68bb      	ldr	r3, [r7, #8]
 802166c:	811a      	strh	r2, [r3, #8]
    dsc_out->box_w = gdsc->box_w;
 802166e:	69bb      	ldr	r3, [r7, #24]
 8021670:	791b      	ldrb	r3, [r3, #4]
 8021672:	b29a      	uxth	r2, r3
 8021674:	68bb      	ldr	r3, [r7, #8]
 8021676:	80da      	strh	r2, [r3, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 8021678:	69bb      	ldr	r3, [r7, #24]
 802167a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 802167e:	b21a      	sxth	r2, r3
 8021680:	68bb      	ldr	r3, [r7, #8]
 8021682:	815a      	strh	r2, [r3, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 8021684:	69bb      	ldr	r3, [r7, #24]
 8021686:	f993 3007 	ldrsb.w	r3, [r3, #7]
 802168a:	b21a      	sxth	r2, r3
 802168c:	68bb      	ldr	r3, [r7, #8]
 802168e:	819a      	strh	r2, [r3, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 8021690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021692:	7cdb      	ldrb	r3, [r3, #19]
 8021694:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8021698:	b2d9      	uxtb	r1, r3
 802169a:	68ba      	ldr	r2, [r7, #8]
 802169c:	7b93      	ldrb	r3, [r2, #14]
 802169e:	f361 0303 	bfi	r3, r1, #0, #4
 80216a2:	7393      	strb	r3, [r2, #14]
    dsc_out->is_placeholder = false;
 80216a4:	68ba      	ldr	r2, [r7, #8]
 80216a6:	7b93      	ldrb	r3, [r2, #14]
 80216a8:	f36f 1304 	bfc	r3, #4, #1
 80216ac:	7393      	strb	r3, [r2, #14]

    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 80216ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80216b2:	2b00      	cmp	r3, #0
 80216b4:	d005      	beq.n	80216c2 <lv_font_get_glyph_dsc_fmt_txt+0x118>
 80216b6:	68bb      	ldr	r3, [r7, #8]
 80216b8:	88db      	ldrh	r3, [r3, #6]
 80216ba:	005b      	lsls	r3, r3, #1
 80216bc:	b29a      	uxth	r2, r3
 80216be:	68bb      	ldr	r3, [r7, #8]
 80216c0:	80da      	strh	r2, [r3, #6]

    return true;
 80216c2:	2301      	movs	r3, #1
}
 80216c4:	4618      	mov	r0, r3
 80216c6:	3730      	adds	r7, #48	; 0x30
 80216c8:	46bd      	mov	sp, r7
 80216ca:	bd80      	pop	{r7, pc}

080216cc <_lv_font_clean_up_fmt_txt>:

/**
 * Free the allocated memories.
 */
void _lv_font_clean_up_fmt_txt(void)
{
 80216cc:	b480      	push	{r7}
 80216ce:	af00      	add	r7, sp, #0
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
    }
#endif
}
 80216d0:	bf00      	nop
 80216d2:	46bd      	mov	sp, r7
 80216d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216d8:	4770      	bx	lr
	...

080216dc <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 80216dc:	b590      	push	{r4, r7, lr}
 80216de:	b091      	sub	sp, #68	; 0x44
 80216e0:	af02      	add	r7, sp, #8
 80216e2:	6078      	str	r0, [r7, #4]
 80216e4:	6039      	str	r1, [r7, #0]
    if(letter == '\0') return 0;
 80216e6:	683b      	ldr	r3, [r7, #0]
 80216e8:	2b00      	cmp	r3, #0
 80216ea:	d101      	bne.n	80216f0 <get_glyph_dsc_id+0x14>
 80216ec:	2300      	movs	r3, #0
 80216ee:	e133      	b.n	8021958 <get_glyph_dsc_id+0x27c>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 80216f0:	687b      	ldr	r3, [r7, #4]
 80216f2:	691b      	ldr	r3, [r3, #16]
 80216f4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*Check the cache first*/
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 80216f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216f8:	695b      	ldr	r3, [r3, #20]
 80216fa:	2b00      	cmp	r3, #0
 80216fc:	d009      	beq.n	8021712 <get_glyph_dsc_id+0x36>
 80216fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021700:	695b      	ldr	r3, [r3, #20]
 8021702:	681b      	ldr	r3, [r3, #0]
 8021704:	683a      	ldr	r2, [r7, #0]
 8021706:	429a      	cmp	r2, r3
 8021708:	d103      	bne.n	8021712 <get_glyph_dsc_id+0x36>
 802170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802170c:	695b      	ldr	r3, [r3, #20]
 802170e:	685b      	ldr	r3, [r3, #4]
 8021710:	e122      	b.n	8021958 <get_glyph_dsc_id+0x27c>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 8021712:	2300      	movs	r3, #0
 8021714:	86fb      	strh	r3, [r7, #54]	; 0x36
 8021716:	e108      	b.n	802192a <get_glyph_dsc_id+0x24e>

        /*Relative code point*/
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8021718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802171a:	6899      	ldr	r1, [r3, #8]
 802171c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802171e:	4613      	mov	r3, r2
 8021720:	009b      	lsls	r3, r3, #2
 8021722:	4413      	add	r3, r2
 8021724:	009b      	lsls	r3, r3, #2
 8021726:	440b      	add	r3, r1
 8021728:	681b      	ldr	r3, [r3, #0]
 802172a:	683a      	ldr	r2, [r7, #0]
 802172c:	1ad3      	subs	r3, r2, r3
 802172e:	62bb      	str	r3, [r7, #40]	; 0x28
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8021730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021732:	6899      	ldr	r1, [r3, #8]
 8021734:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8021736:	4613      	mov	r3, r2
 8021738:	009b      	lsls	r3, r3, #2
 802173a:	4413      	add	r3, r2
 802173c:	009b      	lsls	r3, r3, #2
 802173e:	440b      	add	r3, r1
 8021740:	889b      	ldrh	r3, [r3, #4]
 8021742:	461a      	mov	r2, r3
 8021744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021746:	4293      	cmp	r3, r2
 8021748:	d903      	bls.n	8021752 <get_glyph_dsc_id+0x76>
    for(i = 0; i < fdsc->cmap_num; i++) {
 802174a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 802174c:	3301      	adds	r3, #1
 802174e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8021750:	e0eb      	b.n	802192a <get_glyph_dsc_id+0x24e>
        uint32_t glyph_id = 0;
 8021752:	2300      	movs	r3, #0
 8021754:	633b      	str	r3, [r7, #48]	; 0x30
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8021756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021758:	6899      	ldr	r1, [r3, #8]
 802175a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802175c:	4613      	mov	r3, r2
 802175e:	009b      	lsls	r3, r3, #2
 8021760:	4413      	add	r3, r2
 8021762:	009b      	lsls	r3, r3, #2
 8021764:	440b      	add	r3, r1
 8021766:	7c9b      	ldrb	r3, [r3, #18]
 8021768:	2b02      	cmp	r3, #2
 802176a:	d10d      	bne.n	8021788 <get_glyph_dsc_id+0xac>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 802176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802176e:	6899      	ldr	r1, [r3, #8]
 8021770:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8021772:	4613      	mov	r3, r2
 8021774:	009b      	lsls	r3, r3, #2
 8021776:	4413      	add	r3, r2
 8021778:	009b      	lsls	r3, r3, #2
 802177a:	440b      	add	r3, r1
 802177c:	88db      	ldrh	r3, [r3, #6]
 802177e:	461a      	mov	r2, r3
 8021780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021782:	4413      	add	r3, r2
 8021784:	633b      	str	r3, [r7, #48]	; 0x30
 8021786:	e0c2      	b.n	802190e <get_glyph_dsc_id+0x232>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 8021788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802178a:	6899      	ldr	r1, [r3, #8]
 802178c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802178e:	4613      	mov	r3, r2
 8021790:	009b      	lsls	r3, r3, #2
 8021792:	4413      	add	r3, r2
 8021794:	009b      	lsls	r3, r3, #2
 8021796:	440b      	add	r3, r1
 8021798:	7c9b      	ldrb	r3, [r3, #18]
 802179a:	2b00      	cmp	r3, #0
 802179c:	d11a      	bne.n	80217d4 <get_glyph_dsc_id+0xf8>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 802179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217a0:	6899      	ldr	r1, [r3, #8]
 80217a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80217a4:	4613      	mov	r3, r2
 80217a6:	009b      	lsls	r3, r3, #2
 80217a8:	4413      	add	r3, r2
 80217aa:	009b      	lsls	r3, r3, #2
 80217ac:	440b      	add	r3, r1
 80217ae:	68db      	ldr	r3, [r3, #12]
 80217b0:	613b      	str	r3, [r7, #16]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 80217b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217b4:	6899      	ldr	r1, [r3, #8]
 80217b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80217b8:	4613      	mov	r3, r2
 80217ba:	009b      	lsls	r3, r3, #2
 80217bc:	4413      	add	r3, r2
 80217be:	009b      	lsls	r3, r3, #2
 80217c0:	440b      	add	r3, r1
 80217c2:	88db      	ldrh	r3, [r3, #6]
 80217c4:	4619      	mov	r1, r3
 80217c6:	693a      	ldr	r2, [r7, #16]
 80217c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217ca:	4413      	add	r3, r2
 80217cc:	781b      	ldrb	r3, [r3, #0]
 80217ce:	440b      	add	r3, r1
 80217d0:	633b      	str	r3, [r7, #48]	; 0x30
 80217d2:	e09c      	b.n	802190e <get_glyph_dsc_id+0x232>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 80217d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217d6:	6899      	ldr	r1, [r3, #8]
 80217d8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80217da:	4613      	mov	r3, r2
 80217dc:	009b      	lsls	r3, r3, #2
 80217de:	4413      	add	r3, r2
 80217e0:	009b      	lsls	r3, r3, #2
 80217e2:	440b      	add	r3, r1
 80217e4:	7c9b      	ldrb	r3, [r3, #18]
 80217e6:	2b03      	cmp	r3, #3
 80217e8:	d13c      	bne.n	8021864 <get_glyph_dsc_id+0x188>
            uint16_t key = rcp;
 80217ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217ec:	b29b      	uxth	r3, r3
 80217ee:	81fb      	strh	r3, [r7, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 80217f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217f2:	6899      	ldr	r1, [r3, #8]
 80217f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80217f6:	4613      	mov	r3, r2
 80217f8:	009b      	lsls	r3, r3, #2
 80217fa:	4413      	add	r3, r2
 80217fc:	009b      	lsls	r3, r3, #2
 80217fe:	440b      	add	r3, r1
 8021800:	689c      	ldr	r4, [r3, #8]
 8021802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021804:	6899      	ldr	r1, [r3, #8]
 8021806:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8021808:	4613      	mov	r3, r2
 802180a:	009b      	lsls	r3, r3, #2
 802180c:	4413      	add	r3, r2
 802180e:	009b      	lsls	r3, r3, #2
 8021810:	440b      	add	r3, r1
 8021812:	8a1b      	ldrh	r3, [r3, #16]
 8021814:	461a      	mov	r2, r3
 8021816:	f107 000e 	add.w	r0, r7, #14
 802181a:	4b51      	ldr	r3, [pc, #324]	; (8021960 <get_glyph_dsc_id+0x284>)
 802181c:	9300      	str	r3, [sp, #0]
 802181e:	2302      	movs	r3, #2
 8021820:	4621      	mov	r1, r4
 8021822:	f005 fb0d 	bl	8026e40 <_lv_utils_bsearch>
 8021826:	61b8      	str	r0, [r7, #24]
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 8021828:	69bb      	ldr	r3, [r7, #24]
 802182a:	2b00      	cmp	r3, #0
 802182c:	d06f      	beq.n	802190e <get_glyph_dsc_id+0x232>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 802182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021830:	6899      	ldr	r1, [r3, #8]
 8021832:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8021834:	4613      	mov	r3, r2
 8021836:	009b      	lsls	r3, r3, #2
 8021838:	4413      	add	r3, r2
 802183a:	009b      	lsls	r3, r3, #2
 802183c:	440b      	add	r3, r1
 802183e:	689b      	ldr	r3, [r3, #8]
 8021840:	69ba      	ldr	r2, [r7, #24]
 8021842:	1ad3      	subs	r3, r2, r3
 8021844:	105b      	asrs	r3, r3, #1
 8021846:	617b      	str	r3, [r7, #20]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8021848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802184a:	6899      	ldr	r1, [r3, #8]
 802184c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802184e:	4613      	mov	r3, r2
 8021850:	009b      	lsls	r3, r3, #2
 8021852:	4413      	add	r3, r2
 8021854:	009b      	lsls	r3, r3, #2
 8021856:	440b      	add	r3, r1
 8021858:	88db      	ldrh	r3, [r3, #6]
 802185a:	461a      	mov	r2, r3
 802185c:	697b      	ldr	r3, [r7, #20]
 802185e:	4413      	add	r3, r2
 8021860:	633b      	str	r3, [r7, #48]	; 0x30
 8021862:	e054      	b.n	802190e <get_glyph_dsc_id+0x232>
            }
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 8021864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021866:	6899      	ldr	r1, [r3, #8]
 8021868:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 802186a:	4613      	mov	r3, r2
 802186c:	009b      	lsls	r3, r3, #2
 802186e:	4413      	add	r3, r2
 8021870:	009b      	lsls	r3, r3, #2
 8021872:	440b      	add	r3, r1
 8021874:	7c9b      	ldrb	r3, [r3, #18]
 8021876:	2b01      	cmp	r3, #1
 8021878:	d149      	bne.n	802190e <get_glyph_dsc_id+0x232>
            uint16_t key = rcp;
 802187a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802187c:	b29b      	uxth	r3, r3
 802187e:	81bb      	strh	r3, [r7, #12]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8021880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021882:	6899      	ldr	r1, [r3, #8]
 8021884:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8021886:	4613      	mov	r3, r2
 8021888:	009b      	lsls	r3, r3, #2
 802188a:	4413      	add	r3, r2
 802188c:	009b      	lsls	r3, r3, #2
 802188e:	440b      	add	r3, r1
 8021890:	689c      	ldr	r4, [r3, #8]
 8021892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021894:	6899      	ldr	r1, [r3, #8]
 8021896:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8021898:	4613      	mov	r3, r2
 802189a:	009b      	lsls	r3, r3, #2
 802189c:	4413      	add	r3, r2
 802189e:	009b      	lsls	r3, r3, #2
 80218a0:	440b      	add	r3, r1
 80218a2:	8a1b      	ldrh	r3, [r3, #16]
 80218a4:	461a      	mov	r2, r3
 80218a6:	f107 000c 	add.w	r0, r7, #12
 80218aa:	4b2d      	ldr	r3, [pc, #180]	; (8021960 <get_glyph_dsc_id+0x284>)
 80218ac:	9300      	str	r3, [sp, #0]
 80218ae:	2302      	movs	r3, #2
 80218b0:	4621      	mov	r1, r4
 80218b2:	f005 fac5 	bl	8026e40 <_lv_utils_bsearch>
 80218b6:	6278      	str	r0, [r7, #36]	; 0x24
                                             sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);

            if(p) {
 80218b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218ba:	2b00      	cmp	r3, #0
 80218bc:	d027      	beq.n	802190e <get_glyph_dsc_id+0x232>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80218be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80218c0:	6899      	ldr	r1, [r3, #8]
 80218c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80218c4:	4613      	mov	r3, r2
 80218c6:	009b      	lsls	r3, r3, #2
 80218c8:	4413      	add	r3, r2
 80218ca:	009b      	lsls	r3, r3, #2
 80218cc:	440b      	add	r3, r1
 80218ce:	689b      	ldr	r3, [r3, #8]
 80218d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80218d2:	1ad3      	subs	r3, r2, r3
 80218d4:	105b      	asrs	r3, r3, #1
 80218d6:	623b      	str	r3, [r7, #32]
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 80218d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80218da:	6899      	ldr	r1, [r3, #8]
 80218dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80218de:	4613      	mov	r3, r2
 80218e0:	009b      	lsls	r3, r3, #2
 80218e2:	4413      	add	r3, r2
 80218e4:	009b      	lsls	r3, r3, #2
 80218e6:	440b      	add	r3, r1
 80218e8:	68db      	ldr	r3, [r3, #12]
 80218ea:	61fb      	str	r3, [r7, #28]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 80218ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80218ee:	6899      	ldr	r1, [r3, #8]
 80218f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80218f2:	4613      	mov	r3, r2
 80218f4:	009b      	lsls	r3, r3, #2
 80218f6:	4413      	add	r3, r2
 80218f8:	009b      	lsls	r3, r3, #2
 80218fa:	440b      	add	r3, r1
 80218fc:	88db      	ldrh	r3, [r3, #6]
 80218fe:	4619      	mov	r1, r3
 8021900:	6a3b      	ldr	r3, [r7, #32]
 8021902:	005b      	lsls	r3, r3, #1
 8021904:	69fa      	ldr	r2, [r7, #28]
 8021906:	4413      	add	r3, r2
 8021908:	881b      	ldrh	r3, [r3, #0]
 802190a:	440b      	add	r3, r1
 802190c:	633b      	str	r3, [r7, #48]	; 0x30
            }
        }

        /*Update the cache*/
        if(fdsc->cache) {
 802190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021910:	695b      	ldr	r3, [r3, #20]
 8021912:	2b00      	cmp	r3, #0
 8021914:	d007      	beq.n	8021926 <get_glyph_dsc_id+0x24a>
            fdsc->cache->last_letter = letter;
 8021916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021918:	695b      	ldr	r3, [r3, #20]
 802191a:	683a      	ldr	r2, [r7, #0]
 802191c:	601a      	str	r2, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 802191e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021920:	695b      	ldr	r3, [r3, #20]
 8021922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021924:	605a      	str	r2, [r3, #4]
        }
        return glyph_id;
 8021926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021928:	e016      	b.n	8021958 <get_glyph_dsc_id+0x27c>
    for(i = 0; i < fdsc->cmap_num; i++) {
 802192a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802192c:	8a5b      	ldrh	r3, [r3, #18]
 802192e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021932:	b29b      	uxth	r3, r3
 8021934:	461a      	mov	r2, r3
 8021936:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8021938:	4293      	cmp	r3, r2
 802193a:	f4ff aeed 	bcc.w	8021718 <get_glyph_dsc_id+0x3c>
    }

    if(fdsc->cache) {
 802193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021940:	695b      	ldr	r3, [r3, #20]
 8021942:	2b00      	cmp	r3, #0
 8021944:	d007      	beq.n	8021956 <get_glyph_dsc_id+0x27a>
        fdsc->cache->last_letter = letter;
 8021946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021948:	695b      	ldr	r3, [r3, #20]
 802194a:	683a      	ldr	r2, [r7, #0]
 802194c:	601a      	str	r2, [r3, #0]
        fdsc->cache->last_glyph_id = 0;
 802194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021950:	695b      	ldr	r3, [r3, #20]
 8021952:	2200      	movs	r2, #0
 8021954:	605a      	str	r2, [r3, #4]
    }
    return 0;
 8021956:	2300      	movs	r3, #0

}
 8021958:	4618      	mov	r0, r3
 802195a:	373c      	adds	r7, #60	; 0x3c
 802195c:	46bd      	mov	sp, r7
 802195e:	bd90      	pop	{r4, r7, pc}
 8021960:	08021b45 	.word	0x08021b45

08021964 <get_kern_value>:

static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)
{
 8021964:	b580      	push	{r7, lr}
 8021966:	b094      	sub	sp, #80	; 0x50
 8021968:	af02      	add	r7, sp, #8
 802196a:	60f8      	str	r0, [r7, #12]
 802196c:	60b9      	str	r1, [r7, #8]
 802196e:	607a      	str	r2, [r7, #4]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8021970:	68fb      	ldr	r3, [r7, #12]
 8021972:	691b      	ldr	r3, [r3, #16]
 8021974:	643b      	str	r3, [r7, #64]	; 0x40

    int8_t value = 0;
 8021976:	2300      	movs	r3, #0
 8021978:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if(fdsc->kern_classes == 0) {
 802197c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802197e:	7cdb      	ldrb	r3, [r3, #19]
 8021980:	f003 0320 	and.w	r3, r3, #32
 8021984:	b2db      	uxtb	r3, r3
 8021986:	2b00      	cmp	r3, #0
 8021988:	d160      	bne.n	8021a4c <get_kern_value+0xe8>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 802198a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802198c:	68db      	ldr	r3, [r3, #12]
 802198e:	637b      	str	r3, [r7, #52]	; 0x34
        if(kdsc->glyph_ids_size == 0) {
 8021990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021992:	7adb      	ldrb	r3, [r3, #11]
 8021994:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8021998:	b2db      	uxtb	r3, r3
 802199a:	2b00      	cmp	r3, #0
 802199c:	d129      	bne.n	80219f2 <get_kern_value+0x8e>
            /*Use binary search to find the kern value.
             *The pairs are ordered left_id first, then right_id secondly.*/
            const uint16_t * g_ids = kdsc->glyph_ids;
 802199e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80219a0:	681b      	ldr	r3, [r3, #0]
 80219a2:	627b      	str	r3, [r7, #36]	; 0x24
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	b29b      	uxth	r3, r3
 80219a8:	021b      	lsls	r3, r3, #8
 80219aa:	b29a      	uxth	r2, r3
 80219ac:	68bb      	ldr	r3, [r7, #8]
 80219ae:	b29b      	uxth	r3, r3
 80219b0:	4413      	add	r3, r2
 80219b2:	b29b      	uxth	r3, r3
 80219b4:	837b      	strh	r3, [r7, #26]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 80219b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80219b8:	689b      	ldr	r3, [r3, #8]
 80219ba:	f3c3 031d 	ubfx	r3, r3, #0, #30
 80219be:	461a      	mov	r2, r3
 80219c0:	f107 001a 	add.w	r0, r7, #26
 80219c4:	4b39      	ldr	r3, [pc, #228]	; (8021aac <get_kern_value+0x148>)
 80219c6:	9300      	str	r3, [sp, #0]
 80219c8:	2302      	movs	r3, #2
 80219ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80219cc:	f005 fa38 	bl	8026e40 <_lv_utils_bsearch>
 80219d0:	6238      	str	r0, [r7, #32]

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 80219d2:	6a3b      	ldr	r3, [r7, #32]
 80219d4:	2b00      	cmp	r3, #0
 80219d6:	d063      	beq.n	8021aa0 <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 80219d8:	6a3a      	ldr	r2, [r7, #32]
 80219da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80219dc:	1ad3      	subs	r3, r2, r3
 80219de:	105b      	asrs	r3, r3, #1
 80219e0:	61fb      	str	r3, [r7, #28]
                value = kdsc->values[ofs];
 80219e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80219e4:	685a      	ldr	r2, [r3, #4]
 80219e6:	69fb      	ldr	r3, [r7, #28]
 80219e8:	4413      	add	r3, r2
 80219ea:	781b      	ldrb	r3, [r3, #0]
 80219ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80219f0:	e056      	b.n	8021aa0 <get_kern_value+0x13c>
            }
        }
        else if(kdsc->glyph_ids_size == 1) {
 80219f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80219f4:	7adb      	ldrb	r3, [r3, #11]
 80219f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80219fa:	b2db      	uxtb	r3, r3
 80219fc:	2b40      	cmp	r3, #64	; 0x40
 80219fe:	d14f      	bne.n	8021aa0 <get_kern_value+0x13c>
            /*Use binary search to find the kern value.
             *The pairs are ordered left_id first, then right_id secondly.*/
            const uint32_t * g_ids = kdsc->glyph_ids;
 8021a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021a02:	681b      	ldr	r3, [r3, #0]
 8021a04:	633b      	str	r3, [r7, #48]	; 0x30
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 8021a06:	687b      	ldr	r3, [r7, #4]
 8021a08:	041a      	lsls	r2, r3, #16
 8021a0a:	68bb      	ldr	r3, [r7, #8]
 8021a0c:	4413      	add	r3, r2
 8021a0e:	617b      	str	r3, [r7, #20]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8021a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021a12:	689b      	ldr	r3, [r3, #8]
 8021a14:	f3c3 031d 	ubfx	r3, r3, #0, #30
 8021a18:	461a      	mov	r2, r3
 8021a1a:	f107 0014 	add.w	r0, r7, #20
 8021a1e:	4b24      	ldr	r3, [pc, #144]	; (8021ab0 <get_kern_value+0x14c>)
 8021a20:	9300      	str	r3, [sp, #0]
 8021a22:	2304      	movs	r3, #4
 8021a24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8021a26:	f005 fa0b 	bl	8026e40 <_lv_utils_bsearch>
 8021a2a:	62f8      	str	r0, [r7, #44]	; 0x2c

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 8021a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a2e:	2b00      	cmp	r3, #0
 8021a30:	d036      	beq.n	8021aa0 <get_kern_value+0x13c>
                lv_uintptr_t ofs = kid_p - g_ids;
 8021a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a36:	1ad3      	subs	r3, r2, r3
 8021a38:	109b      	asrs	r3, r3, #2
 8021a3a:	62bb      	str	r3, [r7, #40]	; 0x28
                value = kdsc->values[ofs];
 8021a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021a3e:	685a      	ldr	r2, [r3, #4]
 8021a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a42:	4413      	add	r3, r2
 8021a44:	781b      	ldrb	r3, [r3, #0]
 8021a46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8021a4a:	e029      	b.n	8021aa0 <get_kern_value+0x13c>
            /*Invalid value*/
        }
    }
    else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 8021a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021a4e:	68db      	ldr	r3, [r3, #12]
 8021a50:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8021a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021a54:	685a      	ldr	r2, [r3, #4]
 8021a56:	68bb      	ldr	r3, [r7, #8]
 8021a58:	4413      	add	r3, r2
 8021a5a:	781b      	ldrb	r3, [r3, #0]
 8021a5c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 8021a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021a62:	689a      	ldr	r2, [r3, #8]
 8021a64:	687b      	ldr	r3, [r7, #4]
 8021a66:	4413      	add	r3, r2
 8021a68:	781b      	ldrb	r3, [r3, #0]
 8021a6a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

        /*If class = 0, kerning not exist for that glyph
         *else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 8021a6e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8021a72:	2b00      	cmp	r3, #0
 8021a74:	d014      	beq.n	8021aa0 <get_kern_value+0x13c>
 8021a76:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8021a7a:	2b00      	cmp	r3, #0
 8021a7c:	d010      	beq.n	8021aa0 <get_kern_value+0x13c>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 8021a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021a80:	681b      	ldr	r3, [r3, #0]
 8021a82:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8021a86:	3a01      	subs	r2, #1
 8021a88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8021a8a:	7b49      	ldrb	r1, [r1, #13]
 8021a8c:	fb02 f101 	mul.w	r1, r2, r1
 8021a90:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8021a94:	3a01      	subs	r2, #1
 8021a96:	440a      	add	r2, r1
 8021a98:	4413      	add	r3, r2
 8021a9a:	781b      	ldrb	r3, [r3, #0]
 8021a9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }

    }
    return value;
 8021aa0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8021aa4:	4618      	mov	r0, r3
 8021aa6:	3748      	adds	r7, #72	; 0x48
 8021aa8:	46bd      	mov	sp, r7
 8021aaa:	bd80      	pop	{r7, pc}
 8021aac:	08021ab5 	.word	0x08021ab5
 8021ab0:	08021afd 	.word	0x08021afd

08021ab4 <kern_pair_8_compare>:

static int32_t kern_pair_8_compare(const void * ref, const void * element)
{
 8021ab4:	b480      	push	{r7}
 8021ab6:	b085      	sub	sp, #20
 8021ab8:	af00      	add	r7, sp, #0
 8021aba:	6078      	str	r0, [r7, #4]
 8021abc:	6039      	str	r1, [r7, #0]
    const uint8_t * ref8_p = ref;
 8021abe:	687b      	ldr	r3, [r7, #4]
 8021ac0:	60fb      	str	r3, [r7, #12]
    const uint8_t * element8_p = element;
 8021ac2:	683b      	ldr	r3, [r7, #0]
 8021ac4:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 8021ac6:	68fb      	ldr	r3, [r7, #12]
 8021ac8:	781a      	ldrb	r2, [r3, #0]
 8021aca:	68bb      	ldr	r3, [r7, #8]
 8021acc:	781b      	ldrb	r3, [r3, #0]
 8021ace:	429a      	cmp	r2, r3
 8021ad0:	d006      	beq.n	8021ae0 <kern_pair_8_compare+0x2c>
 8021ad2:	68fb      	ldr	r3, [r7, #12]
 8021ad4:	781b      	ldrb	r3, [r3, #0]
 8021ad6:	461a      	mov	r2, r3
 8021ad8:	68bb      	ldr	r3, [r7, #8]
 8021ada:	781b      	ldrb	r3, [r3, #0]
 8021adc:	1ad3      	subs	r3, r2, r3
 8021ade:	e007      	b.n	8021af0 <kern_pair_8_compare+0x3c>
    else return (int32_t) ref8_p[1] - element8_p[1];
 8021ae0:	68fb      	ldr	r3, [r7, #12]
 8021ae2:	3301      	adds	r3, #1
 8021ae4:	781b      	ldrb	r3, [r3, #0]
 8021ae6:	461a      	mov	r2, r3
 8021ae8:	68bb      	ldr	r3, [r7, #8]
 8021aea:	3301      	adds	r3, #1
 8021aec:	781b      	ldrb	r3, [r3, #0]
 8021aee:	1ad3      	subs	r3, r2, r3

}
 8021af0:	4618      	mov	r0, r3
 8021af2:	3714      	adds	r7, #20
 8021af4:	46bd      	mov	sp, r7
 8021af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021afa:	4770      	bx	lr

08021afc <kern_pair_16_compare>:

static int32_t kern_pair_16_compare(const void * ref, const void * element)
{
 8021afc:	b480      	push	{r7}
 8021afe:	b085      	sub	sp, #20
 8021b00:	af00      	add	r7, sp, #0
 8021b02:	6078      	str	r0, [r7, #4]
 8021b04:	6039      	str	r1, [r7, #0]
    const uint16_t * ref16_p = ref;
 8021b06:	687b      	ldr	r3, [r7, #4]
 8021b08:	60fb      	str	r3, [r7, #12]
    const uint16_t * element16_p = element;
 8021b0a:	683b      	ldr	r3, [r7, #0]
 8021b0c:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 8021b0e:	68fb      	ldr	r3, [r7, #12]
 8021b10:	881a      	ldrh	r2, [r3, #0]
 8021b12:	68bb      	ldr	r3, [r7, #8]
 8021b14:	881b      	ldrh	r3, [r3, #0]
 8021b16:	429a      	cmp	r2, r3
 8021b18:	d006      	beq.n	8021b28 <kern_pair_16_compare+0x2c>
 8021b1a:	68fb      	ldr	r3, [r7, #12]
 8021b1c:	881b      	ldrh	r3, [r3, #0]
 8021b1e:	461a      	mov	r2, r3
 8021b20:	68bb      	ldr	r3, [r7, #8]
 8021b22:	881b      	ldrh	r3, [r3, #0]
 8021b24:	1ad3      	subs	r3, r2, r3
 8021b26:	e007      	b.n	8021b38 <kern_pair_16_compare+0x3c>
    else return (int32_t) ref16_p[1] - element16_p[1];
 8021b28:	68fb      	ldr	r3, [r7, #12]
 8021b2a:	3302      	adds	r3, #2
 8021b2c:	881b      	ldrh	r3, [r3, #0]
 8021b2e:	461a      	mov	r2, r3
 8021b30:	68bb      	ldr	r3, [r7, #8]
 8021b32:	3302      	adds	r3, #2
 8021b34:	881b      	ldrh	r3, [r3, #0]
 8021b36:	1ad3      	subs	r3, r2, r3
}
 8021b38:	4618      	mov	r0, r3
 8021b3a:	3714      	adds	r7, #20
 8021b3c:	46bd      	mov	sp, r7
 8021b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b42:	4770      	bx	lr

08021b44 <unicode_list_compare>:
 *  @retval = 0   Reference is equal to element.
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
 8021b44:	b480      	push	{r7}
 8021b46:	b083      	sub	sp, #12
 8021b48:	af00      	add	r7, sp, #0
 8021b4a:	6078      	str	r0, [r7, #4]
 8021b4c:	6039      	str	r1, [r7, #0]
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 8021b4e:	687b      	ldr	r3, [r7, #4]
 8021b50:	881b      	ldrh	r3, [r3, #0]
 8021b52:	461a      	mov	r2, r3
 8021b54:	683b      	ldr	r3, [r7, #0]
 8021b56:	881b      	ldrh	r3, [r3, #0]
 8021b58:	1ad3      	subs	r3, r2, r3
}
 8021b5a:	4618      	mov	r0, r3
 8021b5c:	370c      	adds	r7, #12
 8021b5e:	46bd      	mov	sp, r7
 8021b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b64:	4770      	bx	lr

08021b66 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 8021b66:	b480      	push	{r7}
 8021b68:	b083      	sub	sp, #12
 8021b6a:	af00      	add	r7, sp, #0
 8021b6c:	4603      	mov	r3, r0
 8021b6e:	71fb      	strb	r3, [r7, #7]
 8021b70:	460b      	mov	r3, r1
 8021b72:	71bb      	strb	r3, [r7, #6]
 8021b74:	4613      	mov	r3, r2
 8021b76:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8021b78:	797b      	ldrb	r3, [r7, #5]
 8021b7a:	09db      	lsrs	r3, r3, #7
 8021b7c:	b2da      	uxtb	r2, r3
 8021b7e:	79bb      	ldrb	r3, [r7, #6]
 8021b80:	09db      	lsrs	r3, r3, #7
 8021b82:	b2db      	uxtb	r3, r3
 8021b84:	4313      	orrs	r3, r2
 8021b86:	b2da      	uxtb	r2, r3
 8021b88:	79fb      	ldrb	r3, [r7, #7]
 8021b8a:	09db      	lsrs	r3, r3, #7
 8021b8c:	b2db      	uxtb	r3, r3
 8021b8e:	4313      	orrs	r3, r2
 8021b90:	b2db      	uxtb	r3, r3
}
 8021b92:	4618      	mov	r0, r3
 8021b94:	370c      	adds	r7, #12
 8021b96:	46bd      	mov	sp, r7
 8021b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b9c:	4770      	bx	lr

08021b9e <lv_color_hex>:

static inline lv_color_t lv_color_hex(uint32_t c)
{
 8021b9e:	b580      	push	{r7, lr}
 8021ba0:	b082      	sub	sp, #8
 8021ba2:	af00      	add	r7, sp, #0
 8021ba4:	6078      	str	r0, [r7, #4]
#elif LV_COLOR_DEPTH == 32
    lv_color_t r;
    r.full = c | 0xFF000000;
    return r;
#else /*LV_COLOR_DEPTH == 8*/
    return lv_color_make((uint8_t)((c >> 16) & 0xFF), (uint8_t)((c >> 8) & 0xFF), (uint8_t)(c & 0xFF));
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	0c1b      	lsrs	r3, r3, #16
 8021baa:	b2d8      	uxtb	r0, r3
 8021bac:	687b      	ldr	r3, [r7, #4]
 8021bae:	0a1b      	lsrs	r3, r3, #8
 8021bb0:	b2db      	uxtb	r3, r3
 8021bb2:	687a      	ldr	r2, [r7, #4]
 8021bb4:	b2d2      	uxtb	r2, r2
 8021bb6:	4619      	mov	r1, r3
 8021bb8:	f7ff ffd5 	bl	8021b66 <lv_color_make>
 8021bbc:	4603      	mov	r3, r0
#endif
}
 8021bbe:	4618      	mov	r0, r3
 8021bc0:	3708      	adds	r7, #8
 8021bc2:	46bd      	mov	sp, r7
 8021bc4:	bd80      	pop	{r7, pc}

08021bc6 <lv_color_white>:
 **********************/
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
 8021bc6:	b580      	push	{r7, lr}
 8021bc8:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 8021bca:	22ff      	movs	r2, #255	; 0xff
 8021bcc:	21ff      	movs	r1, #255	; 0xff
 8021bce:	20ff      	movs	r0, #255	; 0xff
 8021bd0:	f7ff ffc9 	bl	8021b66 <lv_color_make>
 8021bd4:	4603      	mov	r3, r0
}
 8021bd6:	4618      	mov	r0, r3
 8021bd8:	bd80      	pop	{r7, pc}
	...

08021bdc <lv_obj_remove_style_all>:
/**
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
 8021bdc:	b580      	push	{r7, lr}
 8021bde:	b082      	sub	sp, #8
 8021be0:	af00      	add	r7, sp, #0
 8021be2:	6078      	str	r0, [r7, #4]
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8021be4:	4a04      	ldr	r2, [pc, #16]	; (8021bf8 <lv_obj_remove_style_all+0x1c>)
 8021be6:	2100      	movs	r1, #0
 8021be8:	6878      	ldr	r0, [r7, #4]
 8021bea:	f7ec fd65 	bl	800e6b8 <lv_obj_remove_style>
}
 8021bee:	bf00      	nop
 8021bf0:	3708      	adds	r7, #8
 8021bf2:	46bd      	mov	sp, r7
 8021bf4:	bd80      	pop	{r7, pc}
 8021bf6:	bf00      	nop
 8021bf8:	000fffff 	.word	0x000fffff

08021bfc <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 8021bfc:	b590      	push	{r4, r7, lr}
 8021bfe:	b083      	sub	sp, #12
 8021c00:	af00      	add	r7, sp, #0
 8021c02:	6078      	str	r0, [r7, #4]
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 8021c04:	2150      	movs	r1, #80	; 0x50
 8021c06:	6878      	ldr	r0, [r7, #4]
 8021c08:	f002 fda8 	bl	802475c <lv_memset_00>

    driver->hor_res          = 320;
 8021c0c:	687b      	ldr	r3, [r7, #4]
 8021c0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8021c12:	801a      	strh	r2, [r3, #0]
    driver->ver_res          = 240;
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	22f0      	movs	r2, #240	; 0xf0
 8021c18:	805a      	strh	r2, [r3, #2]
    driver->physical_hor_res = -1;
 8021c1a:	687b      	ldr	r3, [r7, #4]
 8021c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021c20:	809a      	strh	r2, [r3, #4]
    driver->physical_ver_res = -1;
 8021c22:	687b      	ldr	r3, [r7, #4]
 8021c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021c28:	80da      	strh	r2, [r3, #6]
    driver->offset_x         = 0;
 8021c2a:	687b      	ldr	r3, [r7, #4]
 8021c2c:	2200      	movs	r2, #0
 8021c2e:	811a      	strh	r2, [r3, #8]
    driver->offset_y         = 0;
 8021c30:	687b      	ldr	r3, [r7, #4]
 8021c32:	2200      	movs	r2, #0
 8021c34:	815a      	strh	r2, [r3, #10]
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8021c36:	687a      	ldr	r2, [r7, #4]
 8021c38:	7c13      	ldrb	r3, [r2, #16]
 8021c3a:	f36f 03c3 	bfc	r3, #3, #1
 8021c3e:	7413      	strb	r3, [r2, #16]
    driver->screen_transp    = 0;
 8021c40:	687a      	ldr	r2, [r7, #4]
 8021c42:	7c13      	ldrb	r3, [r2, #16]
 8021c44:	f36f 1386 	bfc	r3, #6, #1
 8021c48:	7413      	strb	r3, [r2, #16]
    driver->dpi              = LV_DPI_DEF;
 8021c4a:	687a      	ldr	r2, [r7, #4]
 8021c4c:	6913      	ldr	r3, [r2, #16]
 8021c4e:	2182      	movs	r1, #130	; 0x82
 8021c50:	f361 13d0 	bfi	r3, r1, #7, #10
 8021c54:	6113      	str	r3, [r2, #16]
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 8021c56:	687c      	ldr	r4, [r7, #4]
 8021c58:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8021c5c:	f7ff ff9f 	bl	8021b9e <lv_color_hex>
 8021c60:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
#elif LV_USE_GPU_ARM2D
    driver->draw_ctx_init = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_deinit = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_size = sizeof(lv_draw_arm2d_ctx_t);
#else
    driver->draw_ctx_init = lv_draw_sw_init_ctx;
 8021c64:	687b      	ldr	r3, [r7, #4]
 8021c66:	4a06      	ldr	r2, [pc, #24]	; (8021c80 <lv_disp_drv_init+0x84>)
 8021c68:	641a      	str	r2, [r3, #64]	; 0x40
    driver->draw_ctx_deinit = lv_draw_sw_init_ctx;
 8021c6a:	687b      	ldr	r3, [r7, #4]
 8021c6c:	4a04      	ldr	r2, [pc, #16]	; (8021c80 <lv_disp_drv_init+0x84>)
 8021c6e:	645a      	str	r2, [r3, #68]	; 0x44
    driver->draw_ctx_size = sizeof(lv_draw_sw_ctx_t);
 8021c70:	687b      	ldr	r3, [r7, #4]
 8021c72:	2254      	movs	r2, #84	; 0x54
 8021c74:	649a      	str	r2, [r3, #72]	; 0x48
#endif

}
 8021c76:	bf00      	nop
 8021c78:	370c      	adds	r7, #12
 8021c7a:	46bd      	mov	sp, r7
 8021c7c:	bd90      	pop	{r4, r7, pc}
 8021c7e:	bf00      	nop
 8021c80:	08017499 	.word	0x08017499

08021c84 <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 8021c84:	b580      	push	{r7, lr}
 8021c86:	b084      	sub	sp, #16
 8021c88:	af00      	add	r7, sp, #0
 8021c8a:	60f8      	str	r0, [r7, #12]
 8021c8c:	60b9      	str	r1, [r7, #8]
 8021c8e:	607a      	str	r2, [r7, #4]
 8021c90:	603b      	str	r3, [r7, #0]
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 8021c92:	211c      	movs	r1, #28
 8021c94:	68f8      	ldr	r0, [r7, #12]
 8021c96:	f002 fd61 	bl	802475c <lv_memset_00>

    draw_buf->buf1    = buf1;
 8021c9a:	68fb      	ldr	r3, [r7, #12]
 8021c9c:	68ba      	ldr	r2, [r7, #8]
 8021c9e:	601a      	str	r2, [r3, #0]
    draw_buf->buf2    = buf2;
 8021ca0:	68fb      	ldr	r3, [r7, #12]
 8021ca2:	687a      	ldr	r2, [r7, #4]
 8021ca4:	605a      	str	r2, [r3, #4]
    draw_buf->buf_act = draw_buf->buf1;
 8021ca6:	68fb      	ldr	r3, [r7, #12]
 8021ca8:	681a      	ldr	r2, [r3, #0]
 8021caa:	68fb      	ldr	r3, [r7, #12]
 8021cac:	609a      	str	r2, [r3, #8]
    draw_buf->size    = size_in_px_cnt;
 8021cae:	68fb      	ldr	r3, [r7, #12]
 8021cb0:	683a      	ldr	r2, [r7, #0]
 8021cb2:	60da      	str	r2, [r3, #12]
}
 8021cb4:	bf00      	nop
 8021cb6:	3710      	adds	r7, #16
 8021cb8:	46bd      	mov	sp, r7
 8021cba:	bd80      	pop	{r7, pc}

08021cbc <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 8021cbc:	b590      	push	{r4, r7, lr}
 8021cbe:	b087      	sub	sp, #28
 8021cc0:	af00      	add	r7, sp, #0
 8021cc2:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 8021cc4:	485f      	ldr	r0, [pc, #380]	; (8021e44 <lv_disp_drv_register+0x188>)
 8021cc6:	f001 fe91 	bl	80239ec <_lv_ll_ins_head>
 8021cca:	6178      	str	r0, [r7, #20]
    LV_ASSERT_MALLOC(disp);
 8021ccc:	697b      	ldr	r3, [r7, #20]
 8021cce:	2b00      	cmp	r3, #0
 8021cd0:	d100      	bne.n	8021cd4 <lv_disp_drv_register+0x18>
 8021cd2:	e7fe      	b.n	8021cd2 <lv_disp_drv_register+0x16>
    if(!disp) {
 8021cd4:	697b      	ldr	r3, [r7, #20]
 8021cd6:	2b00      	cmp	r3, #0
 8021cd8:	d101      	bne.n	8021cde <lv_disp_drv_register+0x22>
        return NULL;
 8021cda:	2300      	movs	r3, #0
 8021cdc:	e0ae      	b.n	8021e3c <lv_disp_drv_register+0x180>
    }

    /*Create a draw context if not created yet*/
    if(driver->draw_ctx == NULL) {
 8021cde:	687b      	ldr	r3, [r7, #4]
 8021ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021ce2:	2b00      	cmp	r3, #0
 8021ce4:	d116      	bne.n	8021d14 <lv_disp_drv_register+0x58>
        lv_draw_ctx_t * draw_ctx = lv_mem_alloc(driver->draw_ctx_size);
 8021ce6:	687b      	ldr	r3, [r7, #4]
 8021ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021cea:	4618      	mov	r0, r3
 8021cec:	f002 f902 	bl	8023ef4 <lv_mem_alloc>
 8021cf0:	6138      	str	r0, [r7, #16]
        LV_ASSERT_MALLOC(draw_ctx);
 8021cf2:	693b      	ldr	r3, [r7, #16]
 8021cf4:	2b00      	cmp	r3, #0
 8021cf6:	d100      	bne.n	8021cfa <lv_disp_drv_register+0x3e>
 8021cf8:	e7fe      	b.n	8021cf8 <lv_disp_drv_register+0x3c>
        if(draw_ctx == NULL) return NULL;
 8021cfa:	693b      	ldr	r3, [r7, #16]
 8021cfc:	2b00      	cmp	r3, #0
 8021cfe:	d101      	bne.n	8021d04 <lv_disp_drv_register+0x48>
 8021d00:	2300      	movs	r3, #0
 8021d02:	e09b      	b.n	8021e3c <lv_disp_drv_register+0x180>
        driver->draw_ctx_init(driver, draw_ctx);
 8021d04:	687b      	ldr	r3, [r7, #4]
 8021d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021d08:	6939      	ldr	r1, [r7, #16]
 8021d0a:	6878      	ldr	r0, [r7, #4]
 8021d0c:	4798      	blx	r3
        driver->draw_ctx = draw_ctx;
 8021d0e:	687b      	ldr	r3, [r7, #4]
 8021d10:	693a      	ldr	r2, [r7, #16]
 8021d12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 8021d14:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8021d18:	6978      	ldr	r0, [r7, #20]
 8021d1a:	f002 fd1f 	bl	802475c <lv_memset_00>

    disp->driver = driver;
 8021d1e:	697b      	ldr	r3, [r7, #20]
 8021d20:	687a      	ldr	r2, [r7, #4]
 8021d22:	601a      	str	r2, [r3, #0]

    disp->inv_en_cnt = 1;
 8021d24:	697b      	ldr	r3, [r7, #20]
 8021d26:	2201      	movs	r2, #1
 8021d28:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

    lv_disp_t * disp_def_tmp = disp_def;
 8021d2c:	4b46      	ldr	r3, [pc, #280]	; (8021e48 <lv_disp_drv_register+0x18c>)
 8021d2e:	681b      	ldr	r3, [r3, #0]
 8021d30:	60fb      	str	r3, [r7, #12]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 8021d32:	4a45      	ldr	r2, [pc, #276]	; (8021e48 <lv_disp_drv_register+0x18c>)
 8021d34:	697b      	ldr	r3, [r7, #20]
 8021d36:	6013      	str	r3, [r2, #0]
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 8021d38:	697a      	ldr	r2, [r7, #20]
 8021d3a:	211e      	movs	r1, #30
 8021d3c:	4843      	ldr	r0, [pc, #268]	; (8021e4c <lv_disp_drv_register+0x190>)
 8021d3e:	f003 fbd1 	bl	80254e4 <lv_timer_create>
 8021d42:	4602      	mov	r2, r0
 8021d44:	697b      	ldr	r3, [r7, #20]
 8021d46:	605a      	str	r2, [r3, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 8021d48:	697b      	ldr	r3, [r7, #20]
 8021d4a:	685b      	ldr	r3, [r3, #4]
 8021d4c:	2b00      	cmp	r3, #0
 8021d4e:	d100      	bne.n	8021d52 <lv_disp_drv_register+0x96>
 8021d50:	e7fe      	b.n	8021d50 <lv_disp_drv_register+0x94>
    if(disp->refr_timer == NULL) {
 8021d52:	697b      	ldr	r3, [r7, #20]
 8021d54:	685b      	ldr	r3, [r3, #4]
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	d104      	bne.n	8021d64 <lv_disp_drv_register+0xa8>
        lv_mem_free(disp);
 8021d5a:	6978      	ldr	r0, [r7, #20]
 8021d5c:	f002 f8fa 	bl	8023f54 <lv_mem_free>
        return NULL;
 8021d60:	2300      	movs	r3, #0
 8021d62:	e06b      	b.n	8021e3c <lv_disp_drv_register+0x180>
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 8021d64:	687b      	ldr	r3, [r7, #4]
 8021d66:	7c1b      	ldrb	r3, [r3, #16]
 8021d68:	f003 0302 	and.w	r3, r3, #2
 8021d6c:	b2db      	uxtb	r3, r3
 8021d6e:	2b00      	cmp	r3, #0
 8021d70:	d012      	beq.n	8021d98 <lv_disp_drv_register+0xdc>
 8021d72:	687b      	ldr	r3, [r7, #4]
 8021d74:	68db      	ldr	r3, [r3, #12]
 8021d76:	68da      	ldr	r2, [r3, #12]
 8021d78:	687b      	ldr	r3, [r7, #4]
 8021d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021d7e:	4619      	mov	r1, r3
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021d86:	fb01 f303 	mul.w	r3, r1, r3
 8021d8a:	429a      	cmp	r2, r3
 8021d8c:	d204      	bcs.n	8021d98 <lv_disp_drv_register+0xdc>
        driver->full_refresh = 0;
 8021d8e:	687a      	ldr	r2, [r7, #4]
 8021d90:	7c13      	ldrb	r3, [r2, #16]
 8021d92:	f36f 0341 	bfc	r3, #1, #1
 8021d96:	7413      	strb	r3, [r2, #16]
        LV_LOG_WARN("full_refresh requires at least screen sized draw buffer(s)");
    }

    disp->bg_color = lv_color_white();
 8021d98:	697c      	ldr	r4, [r7, #20]
 8021d9a:	f7ff ff14 	bl	8021bc6 <lv_color_white>
 8021d9e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 8021da2:	697b      	ldr	r3, [r7, #20]
 8021da4:	22ff      	movs	r2, #255	; 0xff
 8021da6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    else {
        disp->theme = lv_theme_default_get();
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 8021daa:	2000      	movs	r0, #0
 8021dac:	f7e6 f86a 	bl	8007e84 <lv_obj_create>
 8021db0:	4602      	mov	r2, r0
 8021db2:	697b      	ldr	r3, [r7, #20]
 8021db4:	611a      	str	r2, [r3, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 8021db6:	2000      	movs	r0, #0
 8021db8:	f7e6 f864 	bl	8007e84 <lv_obj_create>
 8021dbc:	4602      	mov	r2, r0
 8021dbe:	697b      	ldr	r3, [r7, #20]
 8021dc0:	61da      	str	r2, [r3, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 8021dc2:	2000      	movs	r0, #0
 8021dc4:	f7e6 f85e 	bl	8007e84 <lv_obj_create>
 8021dc8:	4602      	mov	r2, r0
 8021dca:	697b      	ldr	r3, [r7, #20]
 8021dcc:	621a      	str	r2, [r3, #32]
    lv_obj_remove_style_all(disp->top_layer);
 8021dce:	697b      	ldr	r3, [r7, #20]
 8021dd0:	69db      	ldr	r3, [r3, #28]
 8021dd2:	4618      	mov	r0, r3
 8021dd4:	f7ff ff02 	bl	8021bdc <lv_obj_remove_style_all>
    lv_obj_remove_style_all(disp->sys_layer);
 8021dd8:	697b      	ldr	r3, [r7, #20]
 8021dda:	6a1b      	ldr	r3, [r3, #32]
 8021ddc:	4618      	mov	r0, r3
 8021dde:	f7ff fefd 	bl	8021bdc <lv_obj_remove_style_all>
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 8021de2:	697b      	ldr	r3, [r7, #20]
 8021de4:	69db      	ldr	r3, [r3, #28]
 8021de6:	2102      	movs	r1, #2
 8021de8:	4618      	mov	r0, r3
 8021dea:	f7e6 f85f 	bl	8007eac <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 8021dee:	697b      	ldr	r3, [r7, #20]
 8021df0:	6a1b      	ldr	r3, [r3, #32]
 8021df2:	2102      	movs	r1, #2
 8021df4:	4618      	mov	r0, r3
 8021df6:	f7e6 f859 	bl	8007eac <lv_obj_clear_flag>

    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 8021dfa:	697b      	ldr	r3, [r7, #20]
 8021dfc:	69db      	ldr	r3, [r3, #28]
 8021dfe:	2100      	movs	r1, #0
 8021e00:	4618      	mov	r0, r3
 8021e02:	f7ea fb64 	bl	800c4ce <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 8021e06:	697b      	ldr	r3, [r7, #20]
 8021e08:	6a1b      	ldr	r3, [r3, #32]
 8021e0a:	2100      	movs	r1, #0
 8021e0c:	4618      	mov	r0, r3
 8021e0e:	f7ea fb5e 	bl	800c4ce <lv_obj_set_scrollbar_mode>

    lv_obj_invalidate(disp->act_scr);
 8021e12:	697b      	ldr	r3, [r7, #20]
 8021e14:	691b      	ldr	r3, [r3, #16]
 8021e16:	4618      	mov	r0, r3
 8021e18:	f7e9 fcd5 	bl	800b7c6 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
 8021e1c:	4a0a      	ldr	r2, [pc, #40]	; (8021e48 <lv_disp_drv_register+0x18c>)
 8021e1e:	68fb      	ldr	r3, [r7, #12]
 8021e20:	6013      	str	r3, [r2, #0]
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 8021e22:	4b09      	ldr	r3, [pc, #36]	; (8021e48 <lv_disp_drv_register+0x18c>)
 8021e24:	681b      	ldr	r3, [r3, #0]
 8021e26:	2b00      	cmp	r3, #0
 8021e28:	d102      	bne.n	8021e30 <lv_disp_drv_register+0x174>
 8021e2a:	4a07      	ldr	r2, [pc, #28]	; (8021e48 <lv_disp_drv_register+0x18c>)
 8021e2c:	697b      	ldr	r3, [r7, #20]
 8021e2e:	6013      	str	r3, [r2, #0]

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 8021e30:	697b      	ldr	r3, [r7, #20]
 8021e32:	685b      	ldr	r3, [r3, #4]
 8021e34:	4618      	mov	r0, r3
 8021e36:	f003 fbc1 	bl	80255bc <lv_timer_ready>

    return disp;
 8021e3a:	697b      	ldr	r3, [r7, #20]
}
 8021e3c:	4618      	mov	r0, r3
 8021e3e:	371c      	adds	r7, #28
 8021e40:	46bd      	mov	sp, r7
 8021e42:	bd90      	pop	{r4, r7, pc}
 8021e44:	200008c8 	.word	0x200008c8
 8021e48:	2000089c 	.word	0x2000089c
 8021e4c:	0801082d 	.word	0x0801082d

08021e50 <lv_disp_get_default>:
/**
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
 8021e50:	b480      	push	{r7}
 8021e52:	af00      	add	r7, sp, #0
    return disp_def;
 8021e54:	4b03      	ldr	r3, [pc, #12]	; (8021e64 <lv_disp_get_default+0x14>)
 8021e56:	681b      	ldr	r3, [r3, #0]
}
 8021e58:	4618      	mov	r0, r3
 8021e5a:	46bd      	mov	sp, r7
 8021e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e60:	4770      	bx	lr
 8021e62:	bf00      	nop
 8021e64:	2000089c 	.word	0x2000089c

08021e68 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 8021e68:	b580      	push	{r7, lr}
 8021e6a:	b082      	sub	sp, #8
 8021e6c:	af00      	add	r7, sp, #0
 8021e6e:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 8021e70:	687b      	ldr	r3, [r7, #4]
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	d102      	bne.n	8021e7c <lv_disp_get_hor_res+0x14>
 8021e76:	f7ff ffeb 	bl	8021e50 <lv_disp_get_default>
 8021e7a:	6078      	str	r0, [r7, #4]

    if(disp == NULL) {
 8021e7c:	687b      	ldr	r3, [r7, #4]
 8021e7e:	2b00      	cmp	r3, #0
 8021e80:	d101      	bne.n	8021e86 <lv_disp_get_hor_res+0x1e>
        return 0;
 8021e82:	2300      	movs	r3, #0
 8021e84:	e012      	b.n	8021eac <lv_disp_get_hor_res+0x44>
    }
    else {
        switch(disp->driver->rotated) {
 8021e86:	687b      	ldr	r3, [r7, #4]
 8021e88:	681b      	ldr	r3, [r3, #0]
 8021e8a:	7c1b      	ldrb	r3, [r3, #16]
 8021e8c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8021e90:	b2db      	uxtb	r3, r3
 8021e92:	2b01      	cmp	r3, #1
 8021e94:	d001      	beq.n	8021e9a <lv_disp_get_hor_res+0x32>
 8021e96:	2b03      	cmp	r3, #3
 8021e98:	d104      	bne.n	8021ea4 <lv_disp_get_hor_res+0x3c>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
 8021e9a:	687b      	ldr	r3, [r7, #4]
 8021e9c:	681b      	ldr	r3, [r3, #0]
 8021e9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8021ea2:	e003      	b.n	8021eac <lv_disp_get_hor_res+0x44>
            default:
                return disp->driver->hor_res;
 8021ea4:	687b      	ldr	r3, [r7, #4]
 8021ea6:	681b      	ldr	r3, [r3, #0]
 8021ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
        }
    }
}
 8021eac:	4618      	mov	r0, r3
 8021eae:	3708      	adds	r7, #8
 8021eb0:	46bd      	mov	sp, r7
 8021eb2:	bd80      	pop	{r7, pc}

08021eb4 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 8021eb4:	b580      	push	{r7, lr}
 8021eb6:	b082      	sub	sp, #8
 8021eb8:	af00      	add	r7, sp, #0
 8021eba:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 8021ebc:	687b      	ldr	r3, [r7, #4]
 8021ebe:	2b00      	cmp	r3, #0
 8021ec0:	d102      	bne.n	8021ec8 <lv_disp_get_ver_res+0x14>
 8021ec2:	f7ff ffc5 	bl	8021e50 <lv_disp_get_default>
 8021ec6:	6078      	str	r0, [r7, #4]

    if(disp == NULL) {
 8021ec8:	687b      	ldr	r3, [r7, #4]
 8021eca:	2b00      	cmp	r3, #0
 8021ecc:	d101      	bne.n	8021ed2 <lv_disp_get_ver_res+0x1e>
        return 0;
 8021ece:	2300      	movs	r3, #0
 8021ed0:	e012      	b.n	8021ef8 <lv_disp_get_ver_res+0x44>
    }
    else {
        switch(disp->driver->rotated) {
 8021ed2:	687b      	ldr	r3, [r7, #4]
 8021ed4:	681b      	ldr	r3, [r3, #0]
 8021ed6:	7c1b      	ldrb	r3, [r3, #16]
 8021ed8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8021edc:	b2db      	uxtb	r3, r3
 8021ede:	2b01      	cmp	r3, #1
 8021ee0:	d001      	beq.n	8021ee6 <lv_disp_get_ver_res+0x32>
 8021ee2:	2b03      	cmp	r3, #3
 8021ee4:	d104      	bne.n	8021ef0 <lv_disp_get_ver_res+0x3c>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
 8021ee6:	687b      	ldr	r3, [r7, #4]
 8021ee8:	681b      	ldr	r3, [r3, #0]
 8021eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021eee:	e003      	b.n	8021ef8 <lv_disp_get_ver_res+0x44>
            default:
                return disp->driver->ver_res;
 8021ef0:	687b      	ldr	r3, [r7, #4]
 8021ef2:	681b      	ldr	r3, [r3, #0]
 8021ef4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        }
    }
}
 8021ef8:	4618      	mov	r0, r3
 8021efa:	3708      	adds	r7, #8
 8021efc:	46bd      	mov	sp, r7
 8021efe:	bd80      	pop	{r7, pc}

08021f00 <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
 8021f00:	b580      	push	{r7, lr}
 8021f02:	b082      	sub	sp, #8
 8021f04:	af00      	add	r7, sp, #0
 8021f06:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 8021f08:	687b      	ldr	r3, [r7, #4]
 8021f0a:	2b00      	cmp	r3, #0
 8021f0c:	d102      	bne.n	8021f14 <lv_disp_get_dpi+0x14>
 8021f0e:	f7ff ff9f 	bl	8021e50 <lv_disp_get_default>
 8021f12:	6078      	str	r0, [r7, #4]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 8021f14:	687b      	ldr	r3, [r7, #4]
 8021f16:	2b00      	cmp	r3, #0
 8021f18:	d101      	bne.n	8021f1e <lv_disp_get_dpi+0x1e>
 8021f1a:	2382      	movs	r3, #130	; 0x82
 8021f1c:	e006      	b.n	8021f2c <lv_disp_get_dpi+0x2c>
    return disp->driver->dpi;
 8021f1e:	687b      	ldr	r3, [r7, #4]
 8021f20:	681b      	ldr	r3, [r3, #0]
 8021f22:	691b      	ldr	r3, [r3, #16]
 8021f24:	f3c3 13c9 	ubfx	r3, r3, #7, #10
 8021f28:	b29b      	uxth	r3, r3
 8021f2a:	b21b      	sxth	r3, r3
}
 8021f2c:	4618      	mov	r0, r3
 8021f2e:	3708      	adds	r7, #8
 8021f30:	46bd      	mov	sp, r7
 8021f32:	bd80      	pop	{r7, pc}

08021f34 <lv_disp_flush_ready>:
/**
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
 8021f34:	b480      	push	{r7}
 8021f36:	b083      	sub	sp, #12
 8021f38:	af00      	add	r7, sp, #0
 8021f3a:	6078      	str	r0, [r7, #4]
    disp_drv->draw_buf->flushing = 0;
 8021f3c:	687b      	ldr	r3, [r7, #4]
 8021f3e:	68db      	ldr	r3, [r3, #12]
 8021f40:	2200      	movs	r2, #0
 8021f42:	611a      	str	r2, [r3, #16]
    disp_drv->draw_buf->flushing_last = 0;
 8021f44:	687b      	ldr	r3, [r7, #4]
 8021f46:	68db      	ldr	r3, [r3, #12]
 8021f48:	2200      	movs	r2, #0
 8021f4a:	615a      	str	r2, [r3, #20]
}
 8021f4c:	bf00      	nop
 8021f4e:	370c      	adds	r7, #12
 8021f50:	46bd      	mov	sp, r7
 8021f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f56:	4770      	bx	lr

08021f58 <lv_disp_get_draw_buf>:
 * Get the internal buffer of a display
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
 8021f58:	b480      	push	{r7}
 8021f5a:	b083      	sub	sp, #12
 8021f5c:	af00      	add	r7, sp, #0
 8021f5e:	6078      	str	r0, [r7, #4]
    return disp->driver->draw_buf;
 8021f60:	687b      	ldr	r3, [r7, #4]
 8021f62:	681b      	ldr	r3, [r3, #0]
 8021f64:	68db      	ldr	r3, [r3, #12]
}
 8021f66:	4618      	mov	r0, r3
 8021f68:	370c      	adds	r7, #12
 8021f6a:	46bd      	mov	sp, r7
 8021f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f70:	4770      	bx	lr
	...

08021f74 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 8021f74:	b580      	push	{r7, lr}
 8021f76:	b082      	sub	sp, #8
 8021f78:	af00      	add	r7, sp, #0
 8021f7a:	6078      	str	r0, [r7, #4]
    if(indev == NULL)
 8021f7c:	687b      	ldr	r3, [r7, #4]
 8021f7e:	2b00      	cmp	r3, #0
 8021f80:	d104      	bne.n	8021f8c <lv_indev_get_next+0x18>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8021f82:	4807      	ldr	r0, [pc, #28]	; (8021fa0 <lv_indev_get_next+0x2c>)
 8021f84:	f001 fdf7 	bl	8023b76 <_lv_ll_get_head>
 8021f88:	4603      	mov	r3, r0
 8021f8a:	e004      	b.n	8021f96 <lv_indev_get_next+0x22>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 8021f8c:	6879      	ldr	r1, [r7, #4]
 8021f8e:	4804      	ldr	r0, [pc, #16]	; (8021fa0 <lv_indev_get_next+0x2c>)
 8021f90:	f001 fe13 	bl	8023bba <_lv_ll_get_next>
 8021f94:	4603      	mov	r3, r0
}
 8021f96:	4618      	mov	r0, r3
 8021f98:	3708      	adds	r7, #8
 8021f9a:	46bd      	mov	sp, r7
 8021f9c:	bd80      	pop	{r7, pc}
 8021f9e:	bf00      	nop
 8021fa0:	200008d4 	.word	0x200008d4

08021fa4 <lv_tick_inc>:
/**
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
 8021fa4:	b480      	push	{r7}
 8021fa6:	b083      	sub	sp, #12
 8021fa8:	af00      	add	r7, sp, #0
 8021faa:	6078      	str	r0, [r7, #4]
    tick_irq_flag = 0;
 8021fac:	4b07      	ldr	r3, [pc, #28]	; (8021fcc <lv_tick_inc+0x28>)
 8021fae:	2200      	movs	r2, #0
 8021fb0:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 8021fb2:	4b07      	ldr	r3, [pc, #28]	; (8021fd0 <lv_tick_inc+0x2c>)
 8021fb4:	681a      	ldr	r2, [r3, #0]
 8021fb6:	687b      	ldr	r3, [r7, #4]
 8021fb8:	4413      	add	r3, r2
 8021fba:	4a05      	ldr	r2, [pc, #20]	; (8021fd0 <lv_tick_inc+0x2c>)
 8021fbc:	6013      	str	r3, [r2, #0]
}
 8021fbe:	bf00      	nop
 8021fc0:	370c      	adds	r7, #12
 8021fc2:	46bd      	mov	sp, r7
 8021fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fc8:	4770      	bx	lr
 8021fca:	bf00      	nop
 8021fcc:	200008a4 	.word	0x200008a4
 8021fd0:	200008a0 	.word	0x200008a0

08021fd4 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 8021fd4:	b480      	push	{r7}
 8021fd6:	b083      	sub	sp, #12
 8021fd8:	af00      	add	r7, sp, #0
     *This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        tick_irq_flag = 1;
 8021fda:	4b09      	ldr	r3, [pc, #36]	; (8022000 <lv_tick_get+0x2c>)
 8021fdc:	2201      	movs	r2, #1
 8021fde:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 8021fe0:	4b08      	ldr	r3, [pc, #32]	; (8022004 <lv_tick_get+0x30>)
 8021fe2:	681b      	ldr	r3, [r3, #0]
 8021fe4:	607b      	str	r3, [r7, #4]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 8021fe6:	4b06      	ldr	r3, [pc, #24]	; (8022000 <lv_tick_get+0x2c>)
 8021fe8:	781b      	ldrb	r3, [r3, #0]
 8021fea:	b2db      	uxtb	r3, r3
 8021fec:	2b00      	cmp	r3, #0
 8021fee:	d0f4      	beq.n	8021fda <lv_tick_get+0x6>

    return result;
 8021ff0:	687b      	ldr	r3, [r7, #4]
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 8021ff2:	4618      	mov	r0, r3
 8021ff4:	370c      	adds	r7, #12
 8021ff6:	46bd      	mov	sp, r7
 8021ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ffc:	4770      	bx	lr
 8021ffe:	bf00      	nop
 8022000:	200008a4 	.word	0x200008a4
 8022004:	200008a0 	.word	0x200008a0

08022008 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 8022008:	b580      	push	{r7, lr}
 802200a:	b084      	sub	sp, #16
 802200c:	af00      	add	r7, sp, #0
 802200e:	6078      	str	r0, [r7, #4]
    uint32_t act_time = lv_tick_get();
 8022010:	f7ff ffe0 	bl	8021fd4 <lv_tick_get>
 8022014:	60f8      	str	r0, [r7, #12]

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 8022016:	68fa      	ldr	r2, [r7, #12]
 8022018:	687b      	ldr	r3, [r7, #4]
 802201a:	429a      	cmp	r2, r3
 802201c:	d304      	bcc.n	8022028 <lv_tick_elaps+0x20>
        prev_tick = act_time - prev_tick;
 802201e:	68fa      	ldr	r2, [r7, #12]
 8022020:	687b      	ldr	r3, [r7, #4]
 8022022:	1ad3      	subs	r3, r2, r3
 8022024:	607b      	str	r3, [r7, #4]
 8022026:	e006      	b.n	8022036 <lv_tick_elaps+0x2e>
    }
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
 8022028:	687b      	ldr	r3, [r7, #4]
 802202a:	425b      	negs	r3, r3
 802202c:	607b      	str	r3, [r7, #4]
        prev_tick += act_time;
 802202e:	687a      	ldr	r2, [r7, #4]
 8022030:	68fb      	ldr	r3, [r7, #12]
 8022032:	4413      	add	r3, r2
 8022034:	607b      	str	r3, [r7, #4]
    }

    return prev_tick;
 8022036:	687b      	ldr	r3, [r7, #4]
}
 8022038:	4618      	mov	r0, r3
 802203a:	3710      	adds	r7, #16
 802203c:	46bd      	mov	sp, r7
 802203e:	bd80      	pop	{r7, pc}

08022040 <_lv_anim_core_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_anim_core_init(void)
{
 8022040:	b580      	push	{r7, lr}
 8022042:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8022044:	2144      	movs	r1, #68	; 0x44
 8022046:	4809      	ldr	r0, [pc, #36]	; (802206c <_lv_anim_core_init+0x2c>)
 8022048:	f001 fcb7 	bl	80239ba <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 802204c:	2200      	movs	r2, #0
 802204e:	211e      	movs	r1, #30
 8022050:	4807      	ldr	r0, [pc, #28]	; (8022070 <_lv_anim_core_init+0x30>)
 8022052:	f003 fa47 	bl	80254e4 <lv_timer_create>
 8022056:	4603      	mov	r3, r0
 8022058:	4a06      	ldr	r2, [pc, #24]	; (8022074 <_lv_anim_core_init+0x34>)
 802205a:	6013      	str	r3, [r2, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 802205c:	f000 fb1a 	bl	8022694 <anim_mark_list_change>
    anim_list_changed = false;
 8022060:	4b05      	ldr	r3, [pc, #20]	; (8022078 <_lv_anim_core_init+0x38>)
 8022062:	2200      	movs	r2, #0
 8022064:	701a      	strb	r2, [r3, #0]
}
 8022066:	bf00      	nop
 8022068:	bd80      	pop	{r7, pc}
 802206a:	bf00      	nop
 802206c:	200008ec 	.word	0x200008ec
 8022070:	080223e9 	.word	0x080223e9
 8022074:	200008b0 	.word	0x200008b0
 8022078:	200008ac 	.word	0x200008ac

0802207c <lv_anim_init>:

void lv_anim_init(lv_anim_t * a)
{
 802207c:	b580      	push	{r7, lr}
 802207e:	b082      	sub	sp, #8
 8022080:	af00      	add	r7, sp, #0
 8022082:	6078      	str	r0, [r7, #4]
    lv_memset_00(a, sizeof(lv_anim_t));
 8022084:	2144      	movs	r1, #68	; 0x44
 8022086:	6878      	ldr	r0, [r7, #4]
 8022088:	f002 fb68 	bl	802475c <lv_memset_00>
    a->time = 500;
 802208c:	687b      	ldr	r3, [r7, #4]
 802208e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8022092:	62da      	str	r2, [r3, #44]	; 0x2c
    a->start_value = 0;
 8022094:	687b      	ldr	r3, [r7, #4]
 8022096:	2200      	movs	r2, #0
 8022098:	621a      	str	r2, [r3, #32]
    a->end_value = 100;
 802209a:	687b      	ldr	r3, [r7, #4]
 802209c:	2264      	movs	r2, #100	; 0x64
 802209e:	629a      	str	r2, [r3, #40]	; 0x28
    a->repeat_cnt = 1;
 80220a0:	687b      	ldr	r3, [r7, #4]
 80220a2:	2201      	movs	r2, #1
 80220a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    a->path_cb = lv_anim_path_linear;
 80220a8:	687b      	ldr	r3, [r7, #4]
 80220aa:	4a06      	ldr	r2, [pc, #24]	; (80220c4 <lv_anim_init+0x48>)
 80220ac:	61da      	str	r2, [r3, #28]
    a->early_apply = 1;
 80220ae:	687a      	ldr	r2, [r7, #4]
 80220b0:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 80220b4:	f043 0301 	orr.w	r3, r3, #1
 80220b8:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
}
 80220bc:	bf00      	nop
 80220be:	3708      	adds	r7, #8
 80220c0:	46bd      	mov	sp, r7
 80220c2:	bd80      	pop	{r7, pc}
 80220c4:	080222cf 	.word	0x080222cf

080220c8 <lv_anim_start>:

lv_anim_t * lv_anim_start(const lv_anim_t * a)
{
 80220c8:	b580      	push	{r7, lr}
 80220ca:	b084      	sub	sp, #16
 80220cc:	af00      	add	r7, sp, #0
 80220ce:	6078      	str	r0, [r7, #4]
    TRACE_ANIM("begin");

    /*Do not let two animations for the same 'var' with the same 'exec_cb'*/
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 80220d0:	687b      	ldr	r3, [r7, #4]
 80220d2:	685b      	ldr	r3, [r3, #4]
 80220d4:	2b00      	cmp	r3, #0
 80220d6:	d007      	beq.n	80220e8 <lv_anim_start+0x20>
 80220d8:	687b      	ldr	r3, [r7, #4]
 80220da:	681a      	ldr	r2, [r3, #0]
 80220dc:	687b      	ldr	r3, [r7, #4]
 80220de:	685b      	ldr	r3, [r3, #4]
 80220e0:	4619      	mov	r1, r3
 80220e2:	4610      	mov	r0, r2
 80220e4:	f000 f868 	bl	80221b8 <lv_anim_del>

    /*If the list is empty the anim timer was suspended and it's last run measure is invalid*/
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 80220e8:	4830      	ldr	r0, [pc, #192]	; (80221ac <lv_anim_start+0xe4>)
 80220ea:	f001 fd8f 	bl	8023c0c <_lv_ll_is_empty>
 80220ee:	4603      	mov	r3, r0
 80220f0:	2b00      	cmp	r3, #0
 80220f2:	d004      	beq.n	80220fe <lv_anim_start+0x36>
        last_timer_run = lv_tick_get();
 80220f4:	f7ff ff6e 	bl	8021fd4 <lv_tick_get>
 80220f8:	4603      	mov	r3, r0
 80220fa:	4a2d      	ldr	r2, [pc, #180]	; (80221b0 <lv_anim_start+0xe8>)
 80220fc:	6013      	str	r3, [r2, #0]
    }

    /*Add the new animation to the animation linked list*/
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 80220fe:	482b      	ldr	r0, [pc, #172]	; (80221ac <lv_anim_start+0xe4>)
 8022100:	f001 fc74 	bl	80239ec <_lv_ll_ins_head>
 8022104:	60f8      	str	r0, [r7, #12]
    LV_ASSERT_MALLOC(new_anim);
 8022106:	68fb      	ldr	r3, [r7, #12]
 8022108:	2b00      	cmp	r3, #0
 802210a:	d100      	bne.n	802210e <lv_anim_start+0x46>
 802210c:	e7fe      	b.n	802210c <lv_anim_start+0x44>
    if(new_anim == NULL) return NULL;
 802210e:	68fb      	ldr	r3, [r7, #12]
 8022110:	2b00      	cmp	r3, #0
 8022112:	d101      	bne.n	8022118 <lv_anim_start+0x50>
 8022114:	2300      	movs	r3, #0
 8022116:	e045      	b.n	80221a4 <lv_anim_start+0xdc>

    /*Initialize the animation descriptor*/
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8022118:	2244      	movs	r2, #68	; 0x44
 802211a:	6879      	ldr	r1, [r7, #4]
 802211c:	68f8      	ldr	r0, [r7, #12]
 802211e:	f002 f877 	bl	8024210 <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 8022122:	687b      	ldr	r3, [r7, #4]
 8022124:	681b      	ldr	r3, [r3, #0]
 8022126:	687a      	ldr	r2, [r7, #4]
 8022128:	429a      	cmp	r2, r3
 802212a:	d102      	bne.n	8022132 <lv_anim_start+0x6a>
 802212c:	68fb      	ldr	r3, [r7, #12]
 802212e:	68fa      	ldr	r2, [r7, #12]
 8022130:	601a      	str	r2, [r3, #0]
    new_anim->run_round = anim_run_round;
 8022132:	4b20      	ldr	r3, [pc, #128]	; (80221b4 <lv_anim_start+0xec>)
 8022134:	7819      	ldrb	r1, [r3, #0]
 8022136:	68fa      	ldr	r2, [r7, #12]
 8022138:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 802213c:	f361 0382 	bfi	r3, r1, #2, #1
 8022140:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42

    /*Set the start value*/
    if(new_anim->early_apply) {
 8022144:	68fb      	ldr	r3, [r7, #12]
 8022146:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802214a:	f003 0301 	and.w	r3, r3, #1
 802214e:	b2db      	uxtb	r3, r3
 8022150:	2b00      	cmp	r3, #0
 8022152:	d024      	beq.n	802219e <lv_anim_start+0xd6>
        if(new_anim->get_value_cb) {
 8022154:	68fb      	ldr	r3, [r7, #12]
 8022156:	695b      	ldr	r3, [r3, #20]
 8022158:	2b00      	cmp	r3, #0
 802215a:	d010      	beq.n	802217e <lv_anim_start+0xb6>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 802215c:	68fb      	ldr	r3, [r7, #12]
 802215e:	695b      	ldr	r3, [r3, #20]
 8022160:	68f8      	ldr	r0, [r7, #12]
 8022162:	4798      	blx	r3
 8022164:	60b8      	str	r0, [r7, #8]
            new_anim->start_value += v_ofs;
 8022166:	68fb      	ldr	r3, [r7, #12]
 8022168:	6a1a      	ldr	r2, [r3, #32]
 802216a:	68bb      	ldr	r3, [r7, #8]
 802216c:	441a      	add	r2, r3
 802216e:	68fb      	ldr	r3, [r7, #12]
 8022170:	621a      	str	r2, [r3, #32]
            new_anim->end_value += v_ofs;
 8022172:	68fb      	ldr	r3, [r7, #12]
 8022174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022176:	68bb      	ldr	r3, [r7, #8]
 8022178:	441a      	add	r2, r3
 802217a:	68fb      	ldr	r3, [r7, #12]
 802217c:	629a      	str	r2, [r3, #40]	; 0x28
        }

        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 802217e:	68fb      	ldr	r3, [r7, #12]
 8022180:	685b      	ldr	r3, [r3, #4]
 8022182:	2b00      	cmp	r3, #0
 8022184:	d00b      	beq.n	802219e <lv_anim_start+0xd6>
 8022186:	68fb      	ldr	r3, [r7, #12]
 8022188:	681b      	ldr	r3, [r3, #0]
 802218a:	2b00      	cmp	r3, #0
 802218c:	d007      	beq.n	802219e <lv_anim_start+0xd6>
 802218e:	68fb      	ldr	r3, [r7, #12]
 8022190:	685b      	ldr	r3, [r3, #4]
 8022192:	68fa      	ldr	r2, [r7, #12]
 8022194:	6810      	ldr	r0, [r2, #0]
 8022196:	68fa      	ldr	r2, [r7, #12]
 8022198:	6a12      	ldr	r2, [r2, #32]
 802219a:	4611      	mov	r1, r2
 802219c:	4798      	blx	r3
    }

    /*Creating an animation changed the linked list.
     *It's important if it happens in a ready callback. (see `anim_timer`)*/
    anim_mark_list_change();
 802219e:	f000 fa79 	bl	8022694 <anim_mark_list_change>

    TRACE_ANIM("finished");
    return new_anim;
 80221a2:	68fb      	ldr	r3, [r7, #12]
}
 80221a4:	4618      	mov	r0, r3
 80221a6:	3710      	adds	r7, #16
 80221a8:	46bd      	mov	sp, r7
 80221aa:	bd80      	pop	{r7, pc}
 80221ac:	200008ec 	.word	0x200008ec
 80221b0:	200008a8 	.word	0x200008a8
 80221b4:	200008ad 	.word	0x200008ad

080221b8 <lv_anim_del>:

    return playtime;
}

bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb)
{
 80221b8:	b580      	push	{r7, lr}
 80221ba:	b086      	sub	sp, #24
 80221bc:	af00      	add	r7, sp, #0
 80221be:	6078      	str	r0, [r7, #4]
 80221c0:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    lv_anim_t * a_next;
    bool del = false;
 80221c2:	2300      	movs	r3, #0
 80221c4:	74fb      	strb	r3, [r7, #19]
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80221c6:	481b      	ldr	r0, [pc, #108]	; (8022234 <lv_anim_del+0x7c>)
 80221c8:	f001 fcd5 	bl	8023b76 <_lv_ll_get_head>
 80221cc:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 80221ce:	e029      	b.n	8022224 <lv_anim_del+0x6c>
        /*'a' might be deleted, so get the next object while 'a' is valid*/
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80221d0:	6979      	ldr	r1, [r7, #20]
 80221d2:	4818      	ldr	r0, [pc, #96]	; (8022234 <lv_anim_del+0x7c>)
 80221d4:	f001 fcf1 	bl	8023bba <_lv_ll_get_next>
 80221d8:	60f8      	str	r0, [r7, #12]

        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80221da:	697b      	ldr	r3, [r7, #20]
 80221dc:	681b      	ldr	r3, [r3, #0]
 80221de:	687a      	ldr	r2, [r7, #4]
 80221e0:	429a      	cmp	r2, r3
 80221e2:	d002      	beq.n	80221ea <lv_anim_del+0x32>
 80221e4:	687b      	ldr	r3, [r7, #4]
 80221e6:	2b00      	cmp	r3, #0
 80221e8:	d11a      	bne.n	8022220 <lv_anim_del+0x68>
 80221ea:	697b      	ldr	r3, [r7, #20]
 80221ec:	685b      	ldr	r3, [r3, #4]
 80221ee:	683a      	ldr	r2, [r7, #0]
 80221f0:	429a      	cmp	r2, r3
 80221f2:	d002      	beq.n	80221fa <lv_anim_del+0x42>
 80221f4:	683b      	ldr	r3, [r7, #0]
 80221f6:	2b00      	cmp	r3, #0
 80221f8:	d112      	bne.n	8022220 <lv_anim_del+0x68>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 80221fa:	6979      	ldr	r1, [r7, #20]
 80221fc:	480d      	ldr	r0, [pc, #52]	; (8022234 <lv_anim_del+0x7c>)
 80221fe:	f001 fc5d 	bl	8023abc <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 8022202:	697b      	ldr	r3, [r7, #20]
 8022204:	691b      	ldr	r3, [r3, #16]
 8022206:	2b00      	cmp	r3, #0
 8022208:	d003      	beq.n	8022212 <lv_anim_del+0x5a>
 802220a:	697b      	ldr	r3, [r7, #20]
 802220c:	691b      	ldr	r3, [r3, #16]
 802220e:	6978      	ldr	r0, [r7, #20]
 8022210:	4798      	blx	r3
            lv_mem_free(a);
 8022212:	6978      	ldr	r0, [r7, #20]
 8022214:	f001 fe9e 	bl	8023f54 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 8022218:	f000 fa3c 	bl	8022694 <anim_mark_list_change>
                                       the linked list*/
            del = true;
 802221c:	2301      	movs	r3, #1
 802221e:	74fb      	strb	r3, [r7, #19]
        }

        a = a_next;
 8022220:	68fb      	ldr	r3, [r7, #12]
 8022222:	617b      	str	r3, [r7, #20]
    while(a != NULL) {
 8022224:	697b      	ldr	r3, [r7, #20]
 8022226:	2b00      	cmp	r3, #0
 8022228:	d1d2      	bne.n	80221d0 <lv_anim_del+0x18>
    }

    return del;
 802222a:	7cfb      	ldrb	r3, [r7, #19]
}
 802222c:	4618      	mov	r0, r3
 802222e:	3718      	adds	r7, #24
 8022230:	46bd      	mov	sp, r7
 8022232:	bd80      	pop	{r7, pc}
 8022234:	200008ec 	.word	0x200008ec

08022238 <lv_anim_get>:
    _lv_ll_clear(&LV_GC_ROOT(_lv_anim_ll));
    anim_mark_list_change();
}

lv_anim_t * lv_anim_get(void * var, lv_anim_exec_xcb_t exec_cb)
{
 8022238:	b580      	push	{r7, lr}
 802223a:	b084      	sub	sp, #16
 802223c:	af00      	add	r7, sp, #0
 802223e:	6078      	str	r0, [r7, #4]
 8022240:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8022242:	4810      	ldr	r0, [pc, #64]	; (8022284 <lv_anim_get+0x4c>)
 8022244:	f001 fc97 	bl	8023b76 <_lv_ll_get_head>
 8022248:	60f8      	str	r0, [r7, #12]
 802224a:	e013      	b.n	8022274 <lv_anim_get+0x3c>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 802224c:	68fb      	ldr	r3, [r7, #12]
 802224e:	681b      	ldr	r3, [r3, #0]
 8022250:	687a      	ldr	r2, [r7, #4]
 8022252:	429a      	cmp	r2, r3
 8022254:	d109      	bne.n	802226a <lv_anim_get+0x32>
 8022256:	68fb      	ldr	r3, [r7, #12]
 8022258:	685b      	ldr	r3, [r3, #4]
 802225a:	683a      	ldr	r2, [r7, #0]
 802225c:	429a      	cmp	r2, r3
 802225e:	d002      	beq.n	8022266 <lv_anim_get+0x2e>
 8022260:	683b      	ldr	r3, [r7, #0]
 8022262:	2b00      	cmp	r3, #0
 8022264:	d101      	bne.n	802226a <lv_anim_get+0x32>
            return a;
 8022266:	68fb      	ldr	r3, [r7, #12]
 8022268:	e008      	b.n	802227c <lv_anim_get+0x44>
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 802226a:	68f9      	ldr	r1, [r7, #12]
 802226c:	4805      	ldr	r0, [pc, #20]	; (8022284 <lv_anim_get+0x4c>)
 802226e:	f001 fca4 	bl	8023bba <_lv_ll_get_next>
 8022272:	60f8      	str	r0, [r7, #12]
 8022274:	68fb      	ldr	r3, [r7, #12]
 8022276:	2b00      	cmp	r3, #0
 8022278:	d1e8      	bne.n	802224c <lv_anim_get+0x14>
        }
    }

    return NULL;
 802227a:	2300      	movs	r3, #0
}
 802227c:	4618      	mov	r0, r3
 802227e:	3710      	adds	r7, #16
 8022280:	46bd      	mov	sp, r7
 8022282:	bd80      	pop	{r7, pc}
 8022284:	200008ec 	.word	0x200008ec

08022288 <lv_anim_speed_to_time>:

    return cnt;
}

uint32_t lv_anim_speed_to_time(uint32_t speed, int32_t start, int32_t end)
{
 8022288:	b480      	push	{r7}
 802228a:	b087      	sub	sp, #28
 802228c:	af00      	add	r7, sp, #0
 802228e:	60f8      	str	r0, [r7, #12]
 8022290:	60b9      	str	r1, [r7, #8]
 8022292:	607a      	str	r2, [r7, #4]
    uint32_t d    = LV_ABS(start - end);
 8022294:	68ba      	ldr	r2, [r7, #8]
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	1ad3      	subs	r3, r2, r3
 802229a:	2b00      	cmp	r3, #0
 802229c:	bfb8      	it	lt
 802229e:	425b      	neglt	r3, r3
 80222a0:	613b      	str	r3, [r7, #16]
    uint32_t time = (d * 1000) / speed;
 80222a2:	693b      	ldr	r3, [r7, #16]
 80222a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80222a8:	fb03 f202 	mul.w	r2, r3, r2
 80222ac:	68fb      	ldr	r3, [r7, #12]
 80222ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80222b2:	617b      	str	r3, [r7, #20]

    if(time == 0) {
 80222b4:	697b      	ldr	r3, [r7, #20]
 80222b6:	2b00      	cmp	r3, #0
 80222b8:	d102      	bne.n	80222c0 <lv_anim_speed_to_time+0x38>
        time++;
 80222ba:	697b      	ldr	r3, [r7, #20]
 80222bc:	3301      	adds	r3, #1
 80222be:	617b      	str	r3, [r7, #20]
    }

    return time;
 80222c0:	697b      	ldr	r3, [r7, #20]
}
 80222c2:	4618      	mov	r0, r3
 80222c4:	371c      	adds	r7, #28
 80222c6:	46bd      	mov	sp, r7
 80222c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222cc:	4770      	bx	lr

080222ce <lv_anim_path_linear>:
{
    anim_timer(NULL);
}

int32_t lv_anim_path_linear(const lv_anim_t * a)
{
 80222ce:	b580      	push	{r7, lr}
 80222d0:	b086      	sub	sp, #24
 80222d2:	af02      	add	r7, sp, #8
 80222d4:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 80222d6:	687b      	ldr	r3, [r7, #4]
 80222d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80222da:	687b      	ldr	r3, [r7, #4]
 80222dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80222de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80222e2:	9300      	str	r3, [sp, #0]
 80222e4:	2300      	movs	r3, #0
 80222e6:	2100      	movs	r1, #0
 80222e8:	f001 fdac 	bl	8023e44 <lv_map>
 80222ec:	60f8      	str	r0, [r7, #12]

    /*Get the new value which will be proportional to `step`
     *and the `start` and `end` values*/
    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 80222ee:	687b      	ldr	r3, [r7, #4]
 80222f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80222f2:	687b      	ldr	r3, [r7, #4]
 80222f4:	6a1b      	ldr	r3, [r3, #32]
 80222f6:	1ad2      	subs	r2, r2, r3
 80222f8:	68fb      	ldr	r3, [r7, #12]
 80222fa:	fb02 f303 	mul.w	r3, r2, r3
 80222fe:	60bb      	str	r3, [r7, #8]
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 8022300:	68bb      	ldr	r3, [r7, #8]
 8022302:	129b      	asrs	r3, r3, #10
 8022304:	60bb      	str	r3, [r7, #8]
    new_value += a->start_value;
 8022306:	687b      	ldr	r3, [r7, #4]
 8022308:	6a1b      	ldr	r3, [r3, #32]
 802230a:	68ba      	ldr	r2, [r7, #8]
 802230c:	4413      	add	r3, r2
 802230e:	60bb      	str	r3, [r7, #8]

    return new_value;
 8022310:	68bb      	ldr	r3, [r7, #8]
}
 8022312:	4618      	mov	r0, r3
 8022314:	3710      	adds	r7, #16
 8022316:	46bd      	mov	sp, r7
 8022318:	bd80      	pop	{r7, pc}

0802231a <lv_anim_path_ease_out>:

    return new_value;
}

int32_t lv_anim_path_ease_out(const lv_anim_t * a)
{
 802231a:	b580      	push	{r7, lr}
 802231c:	b088      	sub	sp, #32
 802231e:	af02      	add	r7, sp, #8
 8022320:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 8022322:	687b      	ldr	r3, [r7, #4]
 8022324:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8022326:	687b      	ldr	r3, [r7, #4]
 8022328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802232a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802232e:	9300      	str	r3, [sp, #0]
 8022330:	2300      	movs	r3, #0
 8022332:	2100      	movs	r1, #0
 8022334:	f001 fd86 	bl	8023e44 <lv_map>
 8022338:	4603      	mov	r3, r0
 802233a:	617b      	str	r3, [r7, #20]
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 802233c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022340:	9300      	str	r3, [sp, #0]
 8022342:	f240 33b6 	movw	r3, #950	; 0x3b6
 8022346:	f44f 7261 	mov.w	r2, #900	; 0x384
 802234a:	2100      	movs	r1, #0
 802234c:	6978      	ldr	r0, [r7, #20]
 802234e:	f001 fd27 	bl	8023da0 <lv_bezier3>
 8022352:	4603      	mov	r3, r0
 8022354:	613b      	str	r3, [r7, #16]

    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 8022356:	687b      	ldr	r3, [r7, #4]
 8022358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802235a:	687b      	ldr	r3, [r7, #4]
 802235c:	6a1b      	ldr	r3, [r3, #32]
 802235e:	1ad2      	subs	r2, r2, r3
 8022360:	693b      	ldr	r3, [r7, #16]
 8022362:	fb02 f303 	mul.w	r3, r2, r3
 8022366:	60fb      	str	r3, [r7, #12]
    new_value = new_value >> LV_BEZIER_VAL_SHIFT;
 8022368:	68fb      	ldr	r3, [r7, #12]
 802236a:	129b      	asrs	r3, r3, #10
 802236c:	60fb      	str	r3, [r7, #12]
    new_value += a->start_value;
 802236e:	687b      	ldr	r3, [r7, #4]
 8022370:	6a1b      	ldr	r3, [r3, #32]
 8022372:	68fa      	ldr	r2, [r7, #12]
 8022374:	4413      	add	r3, r2
 8022376:	60fb      	str	r3, [r7, #12]

    return new_value;
 8022378:	68fb      	ldr	r3, [r7, #12]
}
 802237a:	4618      	mov	r0, r3
 802237c:	3718      	adds	r7, #24
 802237e:	46bd      	mov	sp, r7
 8022380:	bd80      	pop	{r7, pc}

08022382 <lv_anim_path_ease_in_out>:

int32_t lv_anim_path_ease_in_out(const lv_anim_t * a)
{
 8022382:	b580      	push	{r7, lr}
 8022384:	b088      	sub	sp, #32
 8022386:	af02      	add	r7, sp, #8
 8022388:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 802238a:	687b      	ldr	r3, [r7, #4]
 802238c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 802238e:	687b      	ldr	r3, [r7, #4]
 8022390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022396:	9300      	str	r3, [sp, #0]
 8022398:	2300      	movs	r3, #0
 802239a:	2100      	movs	r1, #0
 802239c:	f001 fd52 	bl	8023e44 <lv_map>
 80223a0:	4603      	mov	r3, r0
 80223a2:	617b      	str	r3, [r7, #20]
    int32_t step = lv_bezier3(t, 0, 50, 952, LV_BEZIER_VAL_MAX);
 80223a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80223a8:	9300      	str	r3, [sp, #0]
 80223aa:	f44f 736e 	mov.w	r3, #952	; 0x3b8
 80223ae:	2232      	movs	r2, #50	; 0x32
 80223b0:	2100      	movs	r1, #0
 80223b2:	6978      	ldr	r0, [r7, #20]
 80223b4:	f001 fcf4 	bl	8023da0 <lv_bezier3>
 80223b8:	4603      	mov	r3, r0
 80223ba:	613b      	str	r3, [r7, #16]

    int32_t new_value;
    new_value = step * (a->end_value - a->start_value);
 80223bc:	687b      	ldr	r3, [r7, #4]
 80223be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80223c0:	687b      	ldr	r3, [r7, #4]
 80223c2:	6a1b      	ldr	r3, [r3, #32]
 80223c4:	1ad2      	subs	r2, r2, r3
 80223c6:	693b      	ldr	r3, [r7, #16]
 80223c8:	fb02 f303 	mul.w	r3, r2, r3
 80223cc:	60fb      	str	r3, [r7, #12]
    new_value = new_value >> LV_BEZIER_VAL_SHIFT;
 80223ce:	68fb      	ldr	r3, [r7, #12]
 80223d0:	129b      	asrs	r3, r3, #10
 80223d2:	60fb      	str	r3, [r7, #12]
    new_value += a->start_value;
 80223d4:	687b      	ldr	r3, [r7, #4]
 80223d6:	6a1b      	ldr	r3, [r3, #32]
 80223d8:	68fa      	ldr	r2, [r7, #12]
 80223da:	4413      	add	r3, r2
 80223dc:	60fb      	str	r3, [r7, #12]

    return new_value;
 80223de:	68fb      	ldr	r3, [r7, #12]
}
 80223e0:	4618      	mov	r0, r3
 80223e2:	3718      	adds	r7, #24
 80223e4:	46bd      	mov	sp, r7
 80223e6:	bd80      	pop	{r7, pc}

080223e8 <anim_timer>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_timer(lv_timer_t * param)
{
 80223e8:	b580      	push	{r7, lr}
 80223ea:	b088      	sub	sp, #32
 80223ec:	af00      	add	r7, sp, #0
 80223ee:	6078      	str	r0, [r7, #4]
    LV_UNUSED(param);

    uint32_t elaps = lv_tick_elaps(last_timer_run);
 80223f0:	4b5d      	ldr	r3, [pc, #372]	; (8022568 <anim_timer+0x180>)
 80223f2:	681b      	ldr	r3, [r3, #0]
 80223f4:	4618      	mov	r0, r3
 80223f6:	f7ff fe07 	bl	8022008 <lv_tick_elaps>
 80223fa:	61b8      	str	r0, [r7, #24]

    /*Flip the run round*/
    anim_run_round = anim_run_round ? false : true;
 80223fc:	4b5b      	ldr	r3, [pc, #364]	; (802256c <anim_timer+0x184>)
 80223fe:	781b      	ldrb	r3, [r3, #0]
 8022400:	f083 0301 	eor.w	r3, r3, #1
 8022404:	b2da      	uxtb	r2, r3
 8022406:	4b59      	ldr	r3, [pc, #356]	; (802256c <anim_timer+0x184>)
 8022408:	701a      	strb	r2, [r3, #0]

    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 802240a:	4859      	ldr	r0, [pc, #356]	; (8022570 <anim_timer+0x188>)
 802240c:	f001 fbb3 	bl	8023b76 <_lv_ll_get_head>
 8022410:	61f8      	str	r0, [r7, #28]

    while(a != NULL) {
 8022412:	e09c      	b.n	802254e <anim_timer+0x166>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 8022414:	4b57      	ldr	r3, [pc, #348]	; (8022574 <anim_timer+0x18c>)
 8022416:	2200      	movs	r2, #0
 8022418:	701a      	strb	r2, [r3, #0]

        if(a->run_round != anim_run_round) {
 802241a:	69fb      	ldr	r3, [r7, #28]
 802241c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8022420:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8022424:	b2da      	uxtb	r2, r3
 8022426:	4b51      	ldr	r3, [pc, #324]	; (802256c <anim_timer+0x184>)
 8022428:	781b      	ldrb	r3, [r3, #0]
 802242a:	429a      	cmp	r2, r3
 802242c:	f000 8081 	beq.w	8022532 <anim_timer+0x14a>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 8022430:	4b4e      	ldr	r3, [pc, #312]	; (802256c <anim_timer+0x184>)
 8022432:	7819      	ldrb	r1, [r3, #0]
 8022434:	69fa      	ldr	r2, [r7, #28]
 8022436:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 802243a:	f361 0382 	bfi	r3, r1, #2, #1
 802243e:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42

            /*The animation will run now for the first time. Call `start_cb`*/
            int32_t new_act_time = a->act_time + elaps;
 8022442:	69fb      	ldr	r3, [r7, #28]
 8022444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022446:	461a      	mov	r2, r3
 8022448:	69bb      	ldr	r3, [r7, #24]
 802244a:	4413      	add	r3, r2
 802244c:	617b      	str	r3, [r7, #20]
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 802244e:	69fb      	ldr	r3, [r7, #28]
 8022450:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8022454:	f003 0308 	and.w	r3, r3, #8
 8022458:	b2db      	uxtb	r3, r3
 802245a:	2b00      	cmp	r3, #0
 802245c:	d132      	bne.n	80224c4 <anim_timer+0xdc>
 802245e:	69fb      	ldr	r3, [r7, #28]
 8022460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022462:	2b00      	cmp	r3, #0
 8022464:	dc2e      	bgt.n	80224c4 <anim_timer+0xdc>
 8022466:	697b      	ldr	r3, [r7, #20]
 8022468:	2b00      	cmp	r3, #0
 802246a:	db2b      	blt.n	80224c4 <anim_timer+0xdc>
                if(a->early_apply == 0 && a->get_value_cb) {
 802246c:	69fb      	ldr	r3, [r7, #28]
 802246e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8022472:	f003 0301 	and.w	r3, r3, #1
 8022476:	b2db      	uxtb	r3, r3
 8022478:	2b00      	cmp	r3, #0
 802247a:	d114      	bne.n	80224a6 <anim_timer+0xbe>
 802247c:	69fb      	ldr	r3, [r7, #28]
 802247e:	695b      	ldr	r3, [r3, #20]
 8022480:	2b00      	cmp	r3, #0
 8022482:	d010      	beq.n	80224a6 <anim_timer+0xbe>
                    int32_t v_ofs = a->get_value_cb(a);
 8022484:	69fb      	ldr	r3, [r7, #28]
 8022486:	695b      	ldr	r3, [r3, #20]
 8022488:	69f8      	ldr	r0, [r7, #28]
 802248a:	4798      	blx	r3
 802248c:	6138      	str	r0, [r7, #16]
                    a->start_value += v_ofs;
 802248e:	69fb      	ldr	r3, [r7, #28]
 8022490:	6a1a      	ldr	r2, [r3, #32]
 8022492:	693b      	ldr	r3, [r7, #16]
 8022494:	441a      	add	r2, r3
 8022496:	69fb      	ldr	r3, [r7, #28]
 8022498:	621a      	str	r2, [r3, #32]
                    a->end_value += v_ofs;
 802249a:	69fb      	ldr	r3, [r7, #28]
 802249c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802249e:	693b      	ldr	r3, [r7, #16]
 80224a0:	441a      	add	r2, r3
 80224a2:	69fb      	ldr	r3, [r7, #28]
 80224a4:	629a      	str	r2, [r3, #40]	; 0x28
                }
                if(a->start_cb) a->start_cb(a);
 80224a6:	69fb      	ldr	r3, [r7, #28]
 80224a8:	689b      	ldr	r3, [r3, #8]
 80224aa:	2b00      	cmp	r3, #0
 80224ac:	d003      	beq.n	80224b6 <anim_timer+0xce>
 80224ae:	69fb      	ldr	r3, [r7, #28]
 80224b0:	689b      	ldr	r3, [r3, #8]
 80224b2:	69f8      	ldr	r0, [r7, #28]
 80224b4:	4798      	blx	r3
                a->start_cb_called = 1;
 80224b6:	69fa      	ldr	r2, [r7, #28]
 80224b8:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 80224bc:	f043 0308 	orr.w	r3, r3, #8
 80224c0:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            }
            a->act_time += elaps;
 80224c4:	69fb      	ldr	r3, [r7, #28]
 80224c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224c8:	461a      	mov	r2, r3
 80224ca:	69bb      	ldr	r3, [r7, #24]
 80224cc:	4413      	add	r3, r2
 80224ce:	461a      	mov	r2, r3
 80224d0:	69fb      	ldr	r3, [r7, #28]
 80224d2:	631a      	str	r2, [r3, #48]	; 0x30
            if(a->act_time >= 0) {
 80224d4:	69fb      	ldr	r3, [r7, #28]
 80224d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224d8:	2b00      	cmp	r3, #0
 80224da:	db2a      	blt.n	8022532 <anim_timer+0x14a>
                if(a->act_time > a->time) a->act_time = a->time;
 80224dc:	69fb      	ldr	r3, [r7, #28]
 80224de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80224e0:	69fb      	ldr	r3, [r7, #28]
 80224e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80224e4:	429a      	cmp	r2, r3
 80224e6:	dd03      	ble.n	80224f0 <anim_timer+0x108>
 80224e8:	69fb      	ldr	r3, [r7, #28]
 80224ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80224ec:	69fb      	ldr	r3, [r7, #28]
 80224ee:	631a      	str	r2, [r3, #48]	; 0x30

                int32_t new_value;
                new_value = a->path_cb(a);
 80224f0:	69fb      	ldr	r3, [r7, #28]
 80224f2:	69db      	ldr	r3, [r3, #28]
 80224f4:	69f8      	ldr	r0, [r7, #28]
 80224f6:	4798      	blx	r3
 80224f8:	60f8      	str	r0, [r7, #12]

                if(new_value != a->current_value) {
 80224fa:	69fb      	ldr	r3, [r7, #28]
 80224fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80224fe:	68fa      	ldr	r2, [r7, #12]
 8022500:	429a      	cmp	r2, r3
 8022502:	d00d      	beq.n	8022520 <anim_timer+0x138>
                    a->current_value = new_value;
 8022504:	69fb      	ldr	r3, [r7, #28]
 8022506:	68fa      	ldr	r2, [r7, #12]
 8022508:	625a      	str	r2, [r3, #36]	; 0x24
                    /*Apply the calculated value*/
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 802250a:	69fb      	ldr	r3, [r7, #28]
 802250c:	685b      	ldr	r3, [r3, #4]
 802250e:	2b00      	cmp	r3, #0
 8022510:	d006      	beq.n	8022520 <anim_timer+0x138>
 8022512:	69fb      	ldr	r3, [r7, #28]
 8022514:	685b      	ldr	r3, [r3, #4]
 8022516:	69fa      	ldr	r2, [r7, #28]
 8022518:	6812      	ldr	r2, [r2, #0]
 802251a:	68f9      	ldr	r1, [r7, #12]
 802251c:	4610      	mov	r0, r2
 802251e:	4798      	blx	r3
                }

                /*If the time is elapsed the animation is ready*/
                if(a->act_time >= a->time) {
 8022520:	69fb      	ldr	r3, [r7, #28]
 8022522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8022524:	69fb      	ldr	r3, [r7, #28]
 8022526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022528:	429a      	cmp	r2, r3
 802252a:	db02      	blt.n	8022532 <anim_timer+0x14a>
                    anim_ready_handler(a);
 802252c:	69f8      	ldr	r0, [r7, #28]
 802252e:	f000 f823 	bl	8022578 <anim_ready_handler>
            }
        }

        /*If the linked list changed due to anim. delete then it's not safe to continue
         *the reading of the list from here -> start from the head*/
        if(anim_list_changed)
 8022532:	4b10      	ldr	r3, [pc, #64]	; (8022574 <anim_timer+0x18c>)
 8022534:	781b      	ldrb	r3, [r3, #0]
 8022536:	2b00      	cmp	r3, #0
 8022538:	d004      	beq.n	8022544 <anim_timer+0x15c>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 802253a:	480d      	ldr	r0, [pc, #52]	; (8022570 <anim_timer+0x188>)
 802253c:	f001 fb1b 	bl	8023b76 <_lv_ll_get_head>
 8022540:	61f8      	str	r0, [r7, #28]
 8022542:	e004      	b.n	802254e <anim_timer+0x166>
        else
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8022544:	69f9      	ldr	r1, [r7, #28]
 8022546:	480a      	ldr	r0, [pc, #40]	; (8022570 <anim_timer+0x188>)
 8022548:	f001 fb37 	bl	8023bba <_lv_ll_get_next>
 802254c:	61f8      	str	r0, [r7, #28]
    while(a != NULL) {
 802254e:	69fb      	ldr	r3, [r7, #28]
 8022550:	2b00      	cmp	r3, #0
 8022552:	f47f af5f 	bne.w	8022414 <anim_timer+0x2c>
    }

    last_timer_run = lv_tick_get();
 8022556:	f7ff fd3d 	bl	8021fd4 <lv_tick_get>
 802255a:	4603      	mov	r3, r0
 802255c:	4a02      	ldr	r2, [pc, #8]	; (8022568 <anim_timer+0x180>)
 802255e:	6013      	str	r3, [r2, #0]
}
 8022560:	bf00      	nop
 8022562:	3720      	adds	r7, #32
 8022564:	46bd      	mov	sp, r7
 8022566:	bd80      	pop	{r7, pc}
 8022568:	200008a8 	.word	0x200008a8
 802256c:	200008ad 	.word	0x200008ad
 8022570:	200008ec 	.word	0x200008ec
 8022574:	200008ac 	.word	0x200008ac

08022578 <anim_ready_handler>:
 * Called when an animation is ready to do the necessary thinks
 * e.g. repeat, play back, delete etc.
 * @param a pointer to an animation descriptor
 */
static void anim_ready_handler(lv_anim_t * a)
{
 8022578:	b580      	push	{r7, lr}
 802257a:	b084      	sub	sp, #16
 802257c:	af00      	add	r7, sp, #0
 802257e:	6078      	str	r0, [r7, #4]
    /*In the end of a forward anim decrement repeat cnt.*/
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8022580:	687b      	ldr	r3, [r7, #4]
 8022582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8022586:	f003 0302 	and.w	r3, r3, #2
 802258a:	b2db      	uxtb	r3, r3
 802258c:	2b00      	cmp	r3, #0
 802258e:	d113      	bne.n	80225b8 <anim_ready_handler+0x40>
 8022590:	687b      	ldr	r3, [r7, #4]
 8022592:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8022596:	2b00      	cmp	r3, #0
 8022598:	d00e      	beq.n	80225b8 <anim_ready_handler+0x40>
 802259a:	687b      	ldr	r3, [r7, #4]
 802259c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80225a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80225a4:	4293      	cmp	r3, r2
 80225a6:	d007      	beq.n	80225b8 <anim_ready_handler+0x40>
        a->repeat_cnt--;
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80225ae:	3b01      	subs	r3, #1
 80225b0:	b29a      	uxth	r2, r3
 80225b2:	687b      	ldr	r3, [r7, #4]
 80225b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    }

    /*Delete the animation if
     * - no repeat left and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready*/
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 80225b8:	687b      	ldr	r3, [r7, #4]
 80225ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80225be:	2b00      	cmp	r3, #0
 80225c0:	d125      	bne.n	802260e <anim_ready_handler+0x96>
 80225c2:	687b      	ldr	r3, [r7, #4]
 80225c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80225c6:	2b00      	cmp	r3, #0
 80225c8:	d007      	beq.n	80225da <anim_ready_handler+0x62>
 80225ca:	687b      	ldr	r3, [r7, #4]
 80225cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80225d0:	f003 0302 	and.w	r3, r3, #2
 80225d4:	b2db      	uxtb	r3, r3
 80225d6:	2b00      	cmp	r3, #0
 80225d8:	d019      	beq.n	802260e <anim_ready_handler+0x96>

        /*Delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 80225da:	6879      	ldr	r1, [r7, #4]
 80225dc:	482c      	ldr	r0, [pc, #176]	; (8022690 <anim_ready_handler+0x118>)
 80225de:	f001 fa6d 	bl	8023abc <_lv_ll_remove>
        /*Flag that the list has changed*/
        anim_mark_list_change();
 80225e2:	f000 f857 	bl	8022694 <anim_mark_list_change>

        /*Call the callback function at the end*/
        if(a->ready_cb != NULL) a->ready_cb(a);
 80225e6:	687b      	ldr	r3, [r7, #4]
 80225e8:	68db      	ldr	r3, [r3, #12]
 80225ea:	2b00      	cmp	r3, #0
 80225ec:	d003      	beq.n	80225f6 <anim_ready_handler+0x7e>
 80225ee:	687b      	ldr	r3, [r7, #4]
 80225f0:	68db      	ldr	r3, [r3, #12]
 80225f2:	6878      	ldr	r0, [r7, #4]
 80225f4:	4798      	blx	r3
        if(a->deleted_cb != NULL) a->deleted_cb(a);
 80225f6:	687b      	ldr	r3, [r7, #4]
 80225f8:	691b      	ldr	r3, [r3, #16]
 80225fa:	2b00      	cmp	r3, #0
 80225fc:	d003      	beq.n	8022606 <anim_ready_handler+0x8e>
 80225fe:	687b      	ldr	r3, [r7, #4]
 8022600:	691b      	ldr	r3, [r3, #16]
 8022602:	6878      	ldr	r0, [r7, #4]
 8022604:	4798      	blx	r3
        lv_mem_free(a);
 8022606:	6878      	ldr	r0, [r7, #4]
 8022608:	f001 fca4 	bl	8023f54 <lv_mem_free>
            tmp = a->time;
            a->time = a->playback_time;
            a->playback_time = tmp;
        }
    }
}
 802260c:	e03c      	b.n	8022688 <anim_ready_handler+0x110>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 802260e:	687b      	ldr	r3, [r7, #4]
 8022610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022612:	425a      	negs	r2, r3
 8022614:	687b      	ldr	r3, [r7, #4]
 8022616:	631a      	str	r2, [r3, #48]	; 0x30
        if(a->playback_time != 0) {
 8022618:	687b      	ldr	r3, [r7, #4]
 802261a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802261c:	2b00      	cmp	r3, #0
 802261e:	d033      	beq.n	8022688 <anim_ready_handler+0x110>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 8022620:	687b      	ldr	r3, [r7, #4]
 8022622:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8022626:	f003 0302 	and.w	r3, r3, #2
 802262a:	b2db      	uxtb	r3, r3
 802262c:	2b00      	cmp	r3, #0
 802262e:	d104      	bne.n	802263a <anim_ready_handler+0xc2>
 8022630:	687b      	ldr	r3, [r7, #4]
 8022632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022634:	425a      	negs	r2, r3
 8022636:	687b      	ldr	r3, [r7, #4]
 8022638:	631a      	str	r2, [r3, #48]	; 0x30
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 802263a:	687b      	ldr	r3, [r7, #4]
 802263c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8022640:	f003 0302 	and.w	r3, r3, #2
 8022644:	b2db      	uxtb	r3, r3
 8022646:	2b00      	cmp	r3, #0
 8022648:	bf0c      	ite	eq
 802264a:	2301      	moveq	r3, #1
 802264c:	2300      	movne	r3, #0
 802264e:	b2d9      	uxtb	r1, r3
 8022650:	687a      	ldr	r2, [r7, #4]
 8022652:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8022656:	f361 0341 	bfi	r3, r1, #1, #1
 802265a:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
            int32_t tmp    = a->start_value;
 802265e:	687b      	ldr	r3, [r7, #4]
 8022660:	6a1b      	ldr	r3, [r3, #32]
 8022662:	60fb      	str	r3, [r7, #12]
            a->start_value = a->end_value;
 8022664:	687b      	ldr	r3, [r7, #4]
 8022666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022668:	687b      	ldr	r3, [r7, #4]
 802266a:	621a      	str	r2, [r3, #32]
            a->end_value   = tmp;
 802266c:	687b      	ldr	r3, [r7, #4]
 802266e:	68fa      	ldr	r2, [r7, #12]
 8022670:	629a      	str	r2, [r3, #40]	; 0x28
            tmp = a->time;
 8022672:	687b      	ldr	r3, [r7, #4]
 8022674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022676:	60fb      	str	r3, [r7, #12]
            a->time = a->playback_time;
 8022678:	687b      	ldr	r3, [r7, #4]
 802267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802267c:	461a      	mov	r2, r3
 802267e:	687b      	ldr	r3, [r7, #4]
 8022680:	62da      	str	r2, [r3, #44]	; 0x2c
            a->playback_time = tmp;
 8022682:	68fa      	ldr	r2, [r7, #12]
 8022684:	687b      	ldr	r3, [r7, #4]
 8022686:	639a      	str	r2, [r3, #56]	; 0x38
}
 8022688:	bf00      	nop
 802268a:	3710      	adds	r7, #16
 802268c:	46bd      	mov	sp, r7
 802268e:	bd80      	pop	{r7, pc}
 8022690:	200008ec 	.word	0x200008ec

08022694 <anim_mark_list_change>:

static void anim_mark_list_change(void)
{
 8022694:	b580      	push	{r7, lr}
 8022696:	af00      	add	r7, sp, #0
    anim_list_changed = true;
 8022698:	4b0a      	ldr	r3, [pc, #40]	; (80226c4 <anim_mark_list_change+0x30>)
 802269a:	2201      	movs	r2, #1
 802269c:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 802269e:	480a      	ldr	r0, [pc, #40]	; (80226c8 <anim_mark_list_change+0x34>)
 80226a0:	f001 fa69 	bl	8023b76 <_lv_ll_get_head>
 80226a4:	4603      	mov	r3, r0
 80226a6:	2b00      	cmp	r3, #0
 80226a8:	d105      	bne.n	80226b6 <anim_mark_list_change+0x22>
        lv_timer_pause(_lv_anim_tmr);
 80226aa:	4b08      	ldr	r3, [pc, #32]	; (80226cc <anim_mark_list_change+0x38>)
 80226ac:	681b      	ldr	r3, [r3, #0]
 80226ae:	4618      	mov	r0, r3
 80226b0:	f002 ff66 	bl	8025580 <lv_timer_pause>
    else
        lv_timer_resume(_lv_anim_tmr);
}
 80226b4:	e004      	b.n	80226c0 <anim_mark_list_change+0x2c>
        lv_timer_resume(_lv_anim_tmr);
 80226b6:	4b05      	ldr	r3, [pc, #20]	; (80226cc <anim_mark_list_change+0x38>)
 80226b8:	681b      	ldr	r3, [r3, #0]
 80226ba:	4618      	mov	r0, r3
 80226bc:	f002 ff6f 	bl	802559e <lv_timer_resume>
}
 80226c0:	bf00      	nop
 80226c2:	bd80      	pop	{r7, pc}
 80226c4:	200008ac 	.word	0x200008ac
 80226c8:	200008ec 	.word	0x200008ec
 80226cc:	200008b0 	.word	0x200008b0

080226d0 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 80226d0:	b480      	push	{r7}
 80226d2:	b083      	sub	sp, #12
 80226d4:	af00      	add	r7, sp, #0
 80226d6:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80226de:	b29a      	uxth	r2, r3
 80226e0:	687b      	ldr	r3, [r7, #4]
 80226e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80226e6:	b29b      	uxth	r3, r3
 80226e8:	1ad3      	subs	r3, r2, r3
 80226ea:	b29b      	uxth	r3, r3
 80226ec:	3301      	adds	r3, #1
 80226ee:	b29b      	uxth	r3, r3
 80226f0:	b21b      	sxth	r3, r3
}
 80226f2:	4618      	mov	r0, r3
 80226f4:	370c      	adds	r7, #12
 80226f6:	46bd      	mov	sp, r7
 80226f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226fc:	4770      	bx	lr

080226fe <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 80226fe:	b480      	push	{r7}
 8022700:	b083      	sub	sp, #12
 8022702:	af00      	add	r7, sp, #0
 8022704:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8022706:	687b      	ldr	r3, [r7, #4]
 8022708:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802270c:	b29a      	uxth	r2, r3
 802270e:	687b      	ldr	r3, [r7, #4]
 8022710:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022714:	b29b      	uxth	r3, r3
 8022716:	1ad3      	subs	r3, r2, r3
 8022718:	b29b      	uxth	r3, r3
 802271a:	3301      	adds	r3, #1
 802271c:	b29b      	uxth	r3, r3
 802271e:	b21b      	sxth	r3, r3
}
 8022720:	4618      	mov	r0, r3
 8022722:	370c      	adds	r7, #12
 8022724:	46bd      	mov	sp, r7
 8022726:	f85d 7b04 	ldr.w	r7, [sp], #4
 802272a:	4770      	bx	lr

0802272c <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 802272c:	b480      	push	{r7}
 802272e:	b085      	sub	sp, #20
 8022730:	af00      	add	r7, sp, #0
 8022732:	60f8      	str	r0, [r7, #12]
 8022734:	4608      	mov	r0, r1
 8022736:	4611      	mov	r1, r2
 8022738:	461a      	mov	r2, r3
 802273a:	4603      	mov	r3, r0
 802273c:	817b      	strh	r3, [r7, #10]
 802273e:	460b      	mov	r3, r1
 8022740:	813b      	strh	r3, [r7, #8]
 8022742:	4613      	mov	r3, r2
 8022744:	80fb      	strh	r3, [r7, #6]
    area_p->x1 = x1;
 8022746:	68fb      	ldr	r3, [r7, #12]
 8022748:	897a      	ldrh	r2, [r7, #10]
 802274a:	801a      	strh	r2, [r3, #0]
    area_p->y1 = y1;
 802274c:	68fb      	ldr	r3, [r7, #12]
 802274e:	893a      	ldrh	r2, [r7, #8]
 8022750:	805a      	strh	r2, [r3, #2]
    area_p->x2 = x2;
 8022752:	68fb      	ldr	r3, [r7, #12]
 8022754:	88fa      	ldrh	r2, [r7, #6]
 8022756:	809a      	strh	r2, [r3, #4]
    area_p->y2 = y2;
 8022758:	68fb      	ldr	r3, [r7, #12]
 802275a:	8b3a      	ldrh	r2, [r7, #24]
 802275c:	80da      	strh	r2, [r3, #6]
}
 802275e:	bf00      	nop
 8022760:	3714      	adds	r7, #20
 8022762:	46bd      	mov	sp, r7
 8022764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022768:	4770      	bx	lr

0802276a <lv_area_set_height>:
 * Set the height of an area
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
 802276a:	b480      	push	{r7}
 802276c:	b083      	sub	sp, #12
 802276e:	af00      	add	r7, sp, #0
 8022770:	6078      	str	r0, [r7, #4]
 8022772:	460b      	mov	r3, r1
 8022774:	807b      	strh	r3, [r7, #2]
    area_p->y2 = area_p->y1 + h - 1;
 8022776:	687b      	ldr	r3, [r7, #4]
 8022778:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802277c:	b29a      	uxth	r2, r3
 802277e:	887b      	ldrh	r3, [r7, #2]
 8022780:	4413      	add	r3, r2
 8022782:	b29b      	uxth	r3, r3
 8022784:	3b01      	subs	r3, #1
 8022786:	b29b      	uxth	r3, r3
 8022788:	b21a      	sxth	r2, r3
 802278a:	687b      	ldr	r3, [r7, #4]
 802278c:	80da      	strh	r2, [r3, #6]
}
 802278e:	bf00      	nop
 8022790:	370c      	adds	r7, #12
 8022792:	46bd      	mov	sp, r7
 8022794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022798:	4770      	bx	lr

0802279a <lv_area_get_size>:
 * Return with area of an area (x * y)
 * @param area_p pointer to an area
 * @return size of area
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 802279a:	b480      	push	{r7}
 802279c:	b085      	sub	sp, #20
 802279e:	af00      	add	r7, sp, #0
 80227a0:	6078      	str	r0, [r7, #4]
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 80227a2:	687b      	ldr	r3, [r7, #4]
 80227a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80227a8:	461a      	mov	r2, r3
 80227aa:	687b      	ldr	r3, [r7, #4]
 80227ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80227b0:	1ad3      	subs	r3, r2, r3
 80227b2:	3301      	adds	r3, #1
 80227b4:	461a      	mov	r2, r3
 80227b6:	687b      	ldr	r3, [r7, #4]
 80227b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80227bc:	4619      	mov	r1, r3
 80227be:	687b      	ldr	r3, [r7, #4]
 80227c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80227c4:	1acb      	subs	r3, r1, r3
 80227c6:	3301      	adds	r3, #1
 80227c8:	fb02 f303 	mul.w	r3, r2, r3
 80227cc:	60fb      	str	r3, [r7, #12]

    return size;
 80227ce:	68fb      	ldr	r3, [r7, #12]
}
 80227d0:	4618      	mov	r0, r3
 80227d2:	3714      	adds	r7, #20
 80227d4:	46bd      	mov	sp, r7
 80227d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227da:	4770      	bx	lr

080227dc <lv_area_increase>:

void lv_area_increase(lv_area_t * area, lv_coord_t w_extra, lv_coord_t h_extra)
{
 80227dc:	b480      	push	{r7}
 80227de:	b083      	sub	sp, #12
 80227e0:	af00      	add	r7, sp, #0
 80227e2:	6078      	str	r0, [r7, #4]
 80227e4:	460b      	mov	r3, r1
 80227e6:	807b      	strh	r3, [r7, #2]
 80227e8:	4613      	mov	r3, r2
 80227ea:	803b      	strh	r3, [r7, #0]
    area->x1 -= w_extra;
 80227ec:	687b      	ldr	r3, [r7, #4]
 80227ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80227f2:	b29a      	uxth	r2, r3
 80227f4:	887b      	ldrh	r3, [r7, #2]
 80227f6:	1ad3      	subs	r3, r2, r3
 80227f8:	b29b      	uxth	r3, r3
 80227fa:	b21a      	sxth	r2, r3
 80227fc:	687b      	ldr	r3, [r7, #4]
 80227fe:	801a      	strh	r2, [r3, #0]
    area->x2 += w_extra;
 8022800:	687b      	ldr	r3, [r7, #4]
 8022802:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8022806:	b29a      	uxth	r2, r3
 8022808:	887b      	ldrh	r3, [r7, #2]
 802280a:	4413      	add	r3, r2
 802280c:	b29b      	uxth	r3, r3
 802280e:	b21a      	sxth	r2, r3
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	809a      	strh	r2, [r3, #4]
    area->y1 -= h_extra;
 8022814:	687b      	ldr	r3, [r7, #4]
 8022816:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802281a:	b29a      	uxth	r2, r3
 802281c:	883b      	ldrh	r3, [r7, #0]
 802281e:	1ad3      	subs	r3, r2, r3
 8022820:	b29b      	uxth	r3, r3
 8022822:	b21a      	sxth	r2, r3
 8022824:	687b      	ldr	r3, [r7, #4]
 8022826:	805a      	strh	r2, [r3, #2]
    area->y2 += h_extra;
 8022828:	687b      	ldr	r3, [r7, #4]
 802282a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802282e:	b29a      	uxth	r2, r3
 8022830:	883b      	ldrh	r3, [r7, #0]
 8022832:	4413      	add	r3, r2
 8022834:	b29b      	uxth	r3, r3
 8022836:	b21a      	sxth	r2, r3
 8022838:	687b      	ldr	r3, [r7, #4]
 802283a:	80da      	strh	r2, [r3, #6]
}
 802283c:	bf00      	nop
 802283e:	370c      	adds	r7, #12
 8022840:	46bd      	mov	sp, r7
 8022842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022846:	4770      	bx	lr

08022848 <lv_area_move>:

void lv_area_move(lv_area_t * area, lv_coord_t x_ofs, lv_coord_t y_ofs)
{
 8022848:	b480      	push	{r7}
 802284a:	b083      	sub	sp, #12
 802284c:	af00      	add	r7, sp, #0
 802284e:	6078      	str	r0, [r7, #4]
 8022850:	460b      	mov	r3, r1
 8022852:	807b      	strh	r3, [r7, #2]
 8022854:	4613      	mov	r3, r2
 8022856:	803b      	strh	r3, [r7, #0]
    area->x1 += x_ofs;
 8022858:	687b      	ldr	r3, [r7, #4]
 802285a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802285e:	b29a      	uxth	r2, r3
 8022860:	887b      	ldrh	r3, [r7, #2]
 8022862:	4413      	add	r3, r2
 8022864:	b29b      	uxth	r3, r3
 8022866:	b21a      	sxth	r2, r3
 8022868:	687b      	ldr	r3, [r7, #4]
 802286a:	801a      	strh	r2, [r3, #0]
    area->x2 += x_ofs;
 802286c:	687b      	ldr	r3, [r7, #4]
 802286e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8022872:	b29a      	uxth	r2, r3
 8022874:	887b      	ldrh	r3, [r7, #2]
 8022876:	4413      	add	r3, r2
 8022878:	b29b      	uxth	r3, r3
 802287a:	b21a      	sxth	r2, r3
 802287c:	687b      	ldr	r3, [r7, #4]
 802287e:	809a      	strh	r2, [r3, #4]
    area->y1 += y_ofs;
 8022880:	687b      	ldr	r3, [r7, #4]
 8022882:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022886:	b29a      	uxth	r2, r3
 8022888:	883b      	ldrh	r3, [r7, #0]
 802288a:	4413      	add	r3, r2
 802288c:	b29b      	uxth	r3, r3
 802288e:	b21a      	sxth	r2, r3
 8022890:	687b      	ldr	r3, [r7, #4]
 8022892:	805a      	strh	r2, [r3, #2]
    area->y2 += y_ofs;
 8022894:	687b      	ldr	r3, [r7, #4]
 8022896:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 802289a:	b29a      	uxth	r2, r3
 802289c:	883b      	ldrh	r3, [r7, #0]
 802289e:	4413      	add	r3, r2
 80228a0:	b29b      	uxth	r3, r3
 80228a2:	b21a      	sxth	r2, r3
 80228a4:	687b      	ldr	r3, [r7, #4]
 80228a6:	80da      	strh	r2, [r3, #6]
}
 80228a8:	bf00      	nop
 80228aa:	370c      	adds	r7, #12
 80228ac:	46bd      	mov	sp, r7
 80228ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228b2:	4770      	bx	lr

080228b4 <_lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool _lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 80228b4:	b480      	push	{r7}
 80228b6:	b087      	sub	sp, #28
 80228b8:	af00      	add	r7, sp, #0
 80228ba:	60f8      	str	r0, [r7, #12]
 80228bc:	60b9      	str	r1, [r7, #8]
 80228be:	607a      	str	r2, [r7, #4]
    /*Get the smaller area from 'a1_p' and 'a2_p'*/
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 80228c0:	687b      	ldr	r3, [r7, #4]
 80228c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80228c6:	68bb      	ldr	r3, [r7, #8]
 80228c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80228cc:	4293      	cmp	r3, r2
 80228ce:	bfb8      	it	lt
 80228d0:	4613      	movlt	r3, r2
 80228d2:	b21a      	sxth	r2, r3
 80228d4:	68fb      	ldr	r3, [r7, #12]
 80228d6:	801a      	strh	r2, [r3, #0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 80228d8:	687b      	ldr	r3, [r7, #4]
 80228da:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80228de:	68bb      	ldr	r3, [r7, #8]
 80228e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80228e4:	4293      	cmp	r3, r2
 80228e6:	bfb8      	it	lt
 80228e8:	4613      	movlt	r3, r2
 80228ea:	b21a      	sxth	r2, r3
 80228ec:	68fb      	ldr	r3, [r7, #12]
 80228ee:	805a      	strh	r2, [r3, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 80228f0:	687b      	ldr	r3, [r7, #4]
 80228f2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80228f6:	68bb      	ldr	r3, [r7, #8]
 80228f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80228fc:	4293      	cmp	r3, r2
 80228fe:	bfa8      	it	ge
 8022900:	4613      	movge	r3, r2
 8022902:	b21a      	sxth	r2, r3
 8022904:	68fb      	ldr	r3, [r7, #12]
 8022906:	809a      	strh	r2, [r3, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8022908:	687b      	ldr	r3, [r7, #4]
 802290a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 802290e:	68bb      	ldr	r3, [r7, #8]
 8022910:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8022914:	4293      	cmp	r3, r2
 8022916:	bfa8      	it	ge
 8022918:	4613      	movge	r3, r2
 802291a:	b21a      	sxth	r2, r3
 802291c:	68fb      	ldr	r3, [r7, #12]
 802291e:	80da      	strh	r2, [r3, #6]

    /*If x1 or y1 greater than x2 or y2 then the areas union is empty*/
    bool union_ok = true;
 8022920:	2301      	movs	r3, #1
 8022922:	75fb      	strb	r3, [r7, #23]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8022924:	68fb      	ldr	r3, [r7, #12]
 8022926:	f9b3 2000 	ldrsh.w	r2, [r3]
 802292a:	68fb      	ldr	r3, [r7, #12]
 802292c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8022930:	429a      	cmp	r2, r3
 8022932:	dc07      	bgt.n	8022944 <_lv_area_intersect+0x90>
 8022934:	68fb      	ldr	r3, [r7, #12]
 8022936:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 802293a:	68fb      	ldr	r3, [r7, #12]
 802293c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8022940:	429a      	cmp	r2, r3
 8022942:	dd01      	ble.n	8022948 <_lv_area_intersect+0x94>
        union_ok = false;
 8022944:	2300      	movs	r3, #0
 8022946:	75fb      	strb	r3, [r7, #23]
    }

    return union_ok;
 8022948:	7dfb      	ldrb	r3, [r7, #23]
}
 802294a:	4618      	mov	r0, r3
 802294c:	371c      	adds	r7, #28
 802294e:	46bd      	mov	sp, r7
 8022950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022954:	4770      	bx	lr

08022956 <_lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void _lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8022956:	b480      	push	{r7}
 8022958:	b085      	sub	sp, #20
 802295a:	af00      	add	r7, sp, #0
 802295c:	60f8      	str	r0, [r7, #12]
 802295e:	60b9      	str	r1, [r7, #8]
 8022960:	607a      	str	r2, [r7, #4]
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 8022962:	687b      	ldr	r3, [r7, #4]
 8022964:	f9b3 2000 	ldrsh.w	r2, [r3]
 8022968:	68bb      	ldr	r3, [r7, #8]
 802296a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802296e:	4293      	cmp	r3, r2
 8022970:	bfa8      	it	ge
 8022972:	4613      	movge	r3, r2
 8022974:	b21a      	sxth	r2, r3
 8022976:	68fb      	ldr	r3, [r7, #12]
 8022978:	801a      	strh	r2, [r3, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 802297a:	687b      	ldr	r3, [r7, #4]
 802297c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8022980:	68bb      	ldr	r3, [r7, #8]
 8022982:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022986:	4293      	cmp	r3, r2
 8022988:	bfa8      	it	ge
 802298a:	4613      	movge	r3, r2
 802298c:	b21a      	sxth	r2, r3
 802298e:	68fb      	ldr	r3, [r7, #12]
 8022990:	805a      	strh	r2, [r3, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 8022992:	687b      	ldr	r3, [r7, #4]
 8022994:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8022998:	68bb      	ldr	r3, [r7, #8]
 802299a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802299e:	4293      	cmp	r3, r2
 80229a0:	bfb8      	it	lt
 80229a2:	4613      	movlt	r3, r2
 80229a4:	b21a      	sxth	r2, r3
 80229a6:	68fb      	ldr	r3, [r7, #12]
 80229a8:	809a      	strh	r2, [r3, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 80229aa:	687b      	ldr	r3, [r7, #4]
 80229ac:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80229b0:	68bb      	ldr	r3, [r7, #8]
 80229b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80229b6:	4293      	cmp	r3, r2
 80229b8:	bfb8      	it	lt
 80229ba:	4613      	movlt	r3, r2
 80229bc:	b21a      	sxth	r2, r3
 80229be:	68fb      	ldr	r3, [r7, #12]
 80229c0:	80da      	strh	r2, [r3, #6]
}
 80229c2:	bf00      	nop
 80229c4:	3714      	adds	r7, #20
 80229c6:	46bd      	mov	sp, r7
 80229c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229cc:	4770      	bx	lr

080229ce <_lv_area_is_point_on>:
 * @param p_p pointer to a point
 * @param radius radius of area (e.g. for rounded rectangle)
 * @return false:the point is out of the area
 */
bool _lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p, lv_coord_t radius)
{
 80229ce:	b580      	push	{r7, lr}
 80229d0:	b088      	sub	sp, #32
 80229d2:	af00      	add	r7, sp, #0
 80229d4:	60f8      	str	r0, [r7, #12]
 80229d6:	60b9      	str	r1, [r7, #8]
 80229d8:	4613      	mov	r3, r2
 80229da:	80fb      	strh	r3, [r7, #6]
    /*First check the basic area*/
    bool is_on_rect = false;
 80229dc:	2300      	movs	r3, #0
 80229de:	77fb      	strb	r3, [r7, #31]
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 80229e0:	68bb      	ldr	r3, [r7, #8]
 80229e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80229e6:	68fb      	ldr	r3, [r7, #12]
 80229e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80229ec:	429a      	cmp	r2, r3
 80229ee:	db19      	blt.n	8022a24 <_lv_area_is_point_on+0x56>
 80229f0:	68bb      	ldr	r3, [r7, #8]
 80229f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80229f6:	68fb      	ldr	r3, [r7, #12]
 80229f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80229fc:	429a      	cmp	r2, r3
 80229fe:	dc11      	bgt.n	8022a24 <_lv_area_is_point_on+0x56>
 8022a00:	68bb      	ldr	r3, [r7, #8]
 8022a02:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8022a06:	68fb      	ldr	r3, [r7, #12]
 8022a08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022a0c:	429a      	cmp	r2, r3
 8022a0e:	db09      	blt.n	8022a24 <_lv_area_is_point_on+0x56>
 8022a10:	68bb      	ldr	r3, [r7, #8]
 8022a12:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8022a16:	68fb      	ldr	r3, [r7, #12]
 8022a18:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8022a1c:	429a      	cmp	r2, r3
 8022a1e:	dc01      	bgt.n	8022a24 <_lv_area_is_point_on+0x56>
        is_on_rect = true;
 8022a20:	2301      	movs	r3, #1
 8022a22:	77fb      	strb	r3, [r7, #31]
    }
    if(!is_on_rect)
 8022a24:	7ffb      	ldrb	r3, [r7, #31]
 8022a26:	f083 0301 	eor.w	r3, r3, #1
 8022a2a:	b2db      	uxtb	r3, r3
 8022a2c:	2b00      	cmp	r3, #0
 8022a2e:	d001      	beq.n	8022a34 <_lv_area_is_point_on+0x66>
        return false;
 8022a30:	2300      	movs	r3, #0
 8022a32:	e0f1      	b.n	8022c18 <_lv_area_is_point_on+0x24a>
    /*Now handle potential rounded rectangles*/
    if(radius <= 0) {
 8022a34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8022a38:	2b00      	cmp	r3, #0
 8022a3a:	dc01      	bgt.n	8022a40 <_lv_area_is_point_on+0x72>
        /*No radius, it is within the rectangle*/
        return true;
 8022a3c:	2301      	movs	r3, #1
 8022a3e:	e0eb      	b.n	8022c18 <_lv_area_is_point_on+0x24a>
    }
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 8022a40:	68f8      	ldr	r0, [r7, #12]
 8022a42:	f7ff fe45 	bl	80226d0 <lv_area_get_width>
 8022a46:	4603      	mov	r3, r0
 8022a48:	2b00      	cmp	r3, #0
 8022a4a:	da00      	bge.n	8022a4e <_lv_area_is_point_on+0x80>
 8022a4c:	3301      	adds	r3, #1
 8022a4e:	105b      	asrs	r3, r3, #1
 8022a50:	83bb      	strh	r3, [r7, #28]
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 8022a52:	68f8      	ldr	r0, [r7, #12]
 8022a54:	f7ff fe53 	bl	80226fe <lv_area_get_height>
 8022a58:	4603      	mov	r3, r0
 8022a5a:	2b00      	cmp	r3, #0
 8022a5c:	da00      	bge.n	8022a60 <_lv_area_is_point_on+0x92>
 8022a5e:	3301      	adds	r3, #1
 8022a60:	105b      	asrs	r3, r3, #1
 8022a62:	837b      	strh	r3, [r7, #26]
    lv_coord_t max_radius = LV_MIN(w, h);
 8022a64:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8022a68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8022a6c:	4293      	cmp	r3, r2
 8022a6e:	bfa8      	it	ge
 8022a70:	4613      	movge	r3, r2
 8022a72:	833b      	strh	r3, [r7, #24]
    if(radius > max_radius)
 8022a74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8022a78:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8022a7c:	429a      	cmp	r2, r3
 8022a7e:	dd01      	ble.n	8022a84 <_lv_area_is_point_on+0xb6>
        radius = max_radius;
 8022a80:	8b3b      	ldrh	r3, [r7, #24]
 8022a82:	80fb      	strh	r3, [r7, #6]

    /*Check if it's in one of the corners*/
    lv_area_t corner_area;
    /*Top left*/
    corner_area.x1 = a_p->x1;
 8022a84:	68fb      	ldr	r3, [r7, #12]
 8022a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022a8a:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x1 + radius;
 8022a8c:	68fb      	ldr	r3, [r7, #12]
 8022a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022a92:	b29a      	uxth	r2, r3
 8022a94:	88fb      	ldrh	r3, [r7, #6]
 8022a96:	4413      	add	r3, r2
 8022a98:	b29b      	uxth	r3, r3
 8022a9a:	b21b      	sxth	r3, r3
 8022a9c:	82bb      	strh	r3, [r7, #20]
    corner_area.y1 = a_p->y1;
 8022a9e:	68fb      	ldr	r3, [r7, #12]
 8022aa0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022aa4:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 8022aa6:	68fb      	ldr	r3, [r7, #12]
 8022aa8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022aac:	b29a      	uxth	r2, r3
 8022aae:	88fb      	ldrh	r3, [r7, #6]
 8022ab0:	4413      	add	r3, r2
 8022ab2:	b29b      	uxth	r3, r3
 8022ab4:	b21b      	sxth	r3, r3
 8022ab6:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8022ab8:	f107 0310 	add.w	r3, r7, #16
 8022abc:	2200      	movs	r2, #0
 8022abe:	68b9      	ldr	r1, [r7, #8]
 8022ac0:	4618      	mov	r0, r3
 8022ac2:	f7ff ff84 	bl	80229ce <_lv_area_is_point_on>
 8022ac6:	4603      	mov	r3, r0
 8022ac8:	2b00      	cmp	r3, #0
 8022aca:	d017      	beq.n	8022afc <_lv_area_is_point_on+0x12e>
        corner_area.x2 += radius;
 8022acc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8022ad0:	b29a      	uxth	r2, r3
 8022ad2:	88fb      	ldrh	r3, [r7, #6]
 8022ad4:	4413      	add	r3, r2
 8022ad6:	b29b      	uxth	r3, r3
 8022ad8:	b21b      	sxth	r3, r3
 8022ada:	82bb      	strh	r3, [r7, #20]
        corner_area.y2 += radius;
 8022adc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8022ae0:	b29a      	uxth	r2, r3
 8022ae2:	88fb      	ldrh	r3, [r7, #6]
 8022ae4:	4413      	add	r3, r2
 8022ae6:	b29b      	uxth	r3, r3
 8022ae8:	b21b      	sxth	r3, r3
 8022aea:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 8022aec:	f107 0310 	add.w	r3, r7, #16
 8022af0:	68b9      	ldr	r1, [r7, #8]
 8022af2:	4618      	mov	r0, r3
 8022af4:	f000 fb30 	bl	8023158 <lv_point_within_circle>
 8022af8:	4603      	mov	r3, r0
 8022afa:	e08d      	b.n	8022c18 <_lv_area_is_point_on+0x24a>
    }
    /*Bottom left*/
    corner_area.y1 = a_p->y2 - radius;
 8022afc:	68fb      	ldr	r3, [r7, #12]
 8022afe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8022b02:	b29a      	uxth	r2, r3
 8022b04:	88fb      	ldrh	r3, [r7, #6]
 8022b06:	1ad3      	subs	r3, r2, r3
 8022b08:	b29b      	uxth	r3, r3
 8022b0a:	b21b      	sxth	r3, r3
 8022b0c:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y2;
 8022b0e:	68fb      	ldr	r3, [r7, #12]
 8022b10:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8022b14:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8022b16:	f107 0310 	add.w	r3, r7, #16
 8022b1a:	2200      	movs	r2, #0
 8022b1c:	68b9      	ldr	r1, [r7, #8]
 8022b1e:	4618      	mov	r0, r3
 8022b20:	f7ff ff55 	bl	80229ce <_lv_area_is_point_on>
 8022b24:	4603      	mov	r3, r0
 8022b26:	2b00      	cmp	r3, #0
 8022b28:	d017      	beq.n	8022b5a <_lv_area_is_point_on+0x18c>
        corner_area.x2 += radius;
 8022b2a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8022b2e:	b29a      	uxth	r2, r3
 8022b30:	88fb      	ldrh	r3, [r7, #6]
 8022b32:	4413      	add	r3, r2
 8022b34:	b29b      	uxth	r3, r3
 8022b36:	b21b      	sxth	r3, r3
 8022b38:	82bb      	strh	r3, [r7, #20]
        corner_area.y1 -= radius;
 8022b3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8022b3e:	b29a      	uxth	r2, r3
 8022b40:	88fb      	ldrh	r3, [r7, #6]
 8022b42:	1ad3      	subs	r3, r2, r3
 8022b44:	b29b      	uxth	r3, r3
 8022b46:	b21b      	sxth	r3, r3
 8022b48:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 8022b4a:	f107 0310 	add.w	r3, r7, #16
 8022b4e:	68b9      	ldr	r1, [r7, #8]
 8022b50:	4618      	mov	r0, r3
 8022b52:	f000 fb01 	bl	8023158 <lv_point_within_circle>
 8022b56:	4603      	mov	r3, r0
 8022b58:	e05e      	b.n	8022c18 <_lv_area_is_point_on+0x24a>
    }
    /*Bottom right*/
    corner_area.x1 = a_p->x2 - radius;
 8022b5a:	68fb      	ldr	r3, [r7, #12]
 8022b5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8022b60:	b29a      	uxth	r2, r3
 8022b62:	88fb      	ldrh	r3, [r7, #6]
 8022b64:	1ad3      	subs	r3, r2, r3
 8022b66:	b29b      	uxth	r3, r3
 8022b68:	b21b      	sxth	r3, r3
 8022b6a:	823b      	strh	r3, [r7, #16]
    corner_area.x2 = a_p->x2;
 8022b6c:	68fb      	ldr	r3, [r7, #12]
 8022b6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8022b72:	82bb      	strh	r3, [r7, #20]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8022b74:	f107 0310 	add.w	r3, r7, #16
 8022b78:	2200      	movs	r2, #0
 8022b7a:	68b9      	ldr	r1, [r7, #8]
 8022b7c:	4618      	mov	r0, r3
 8022b7e:	f7ff ff26 	bl	80229ce <_lv_area_is_point_on>
 8022b82:	4603      	mov	r3, r0
 8022b84:	2b00      	cmp	r3, #0
 8022b86:	d017      	beq.n	8022bb8 <_lv_area_is_point_on+0x1ea>
        corner_area.x1 -= radius;
 8022b88:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8022b8c:	b29a      	uxth	r2, r3
 8022b8e:	88fb      	ldrh	r3, [r7, #6]
 8022b90:	1ad3      	subs	r3, r2, r3
 8022b92:	b29b      	uxth	r3, r3
 8022b94:	b21b      	sxth	r3, r3
 8022b96:	823b      	strh	r3, [r7, #16]
        corner_area.y1 -= radius;
 8022b98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8022b9c:	b29a      	uxth	r2, r3
 8022b9e:	88fb      	ldrh	r3, [r7, #6]
 8022ba0:	1ad3      	subs	r3, r2, r3
 8022ba2:	b29b      	uxth	r3, r3
 8022ba4:	b21b      	sxth	r3, r3
 8022ba6:	827b      	strh	r3, [r7, #18]
        return lv_point_within_circle(&corner_area, p_p);
 8022ba8:	f107 0310 	add.w	r3, r7, #16
 8022bac:	68b9      	ldr	r1, [r7, #8]
 8022bae:	4618      	mov	r0, r3
 8022bb0:	f000 fad2 	bl	8023158 <lv_point_within_circle>
 8022bb4:	4603      	mov	r3, r0
 8022bb6:	e02f      	b.n	8022c18 <_lv_area_is_point_on+0x24a>
    }
    /*Top right*/
    corner_area.y1 = a_p->y1;
 8022bb8:	68fb      	ldr	r3, [r7, #12]
 8022bba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022bbe:	827b      	strh	r3, [r7, #18]
    corner_area.y2 = a_p->y1 + radius;
 8022bc0:	68fb      	ldr	r3, [r7, #12]
 8022bc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022bc6:	b29a      	uxth	r2, r3
 8022bc8:	88fb      	ldrh	r3, [r7, #6]
 8022bca:	4413      	add	r3, r2
 8022bcc:	b29b      	uxth	r3, r3
 8022bce:	b21b      	sxth	r3, r3
 8022bd0:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8022bd2:	f107 0310 	add.w	r3, r7, #16
 8022bd6:	2200      	movs	r2, #0
 8022bd8:	68b9      	ldr	r1, [r7, #8]
 8022bda:	4618      	mov	r0, r3
 8022bdc:	f7ff fef7 	bl	80229ce <_lv_area_is_point_on>
 8022be0:	4603      	mov	r3, r0
 8022be2:	2b00      	cmp	r3, #0
 8022be4:	d017      	beq.n	8022c16 <_lv_area_is_point_on+0x248>
        corner_area.x1 -= radius;
 8022be6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8022bea:	b29a      	uxth	r2, r3
 8022bec:	88fb      	ldrh	r3, [r7, #6]
 8022bee:	1ad3      	subs	r3, r2, r3
 8022bf0:	b29b      	uxth	r3, r3
 8022bf2:	b21b      	sxth	r3, r3
 8022bf4:	823b      	strh	r3, [r7, #16]
        corner_area.y2 += radius;
 8022bf6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8022bfa:	b29a      	uxth	r2, r3
 8022bfc:	88fb      	ldrh	r3, [r7, #6]
 8022bfe:	4413      	add	r3, r2
 8022c00:	b29b      	uxth	r3, r3
 8022c02:	b21b      	sxth	r3, r3
 8022c04:	82fb      	strh	r3, [r7, #22]
        return lv_point_within_circle(&corner_area, p_p);
 8022c06:	f107 0310 	add.w	r3, r7, #16
 8022c0a:	68b9      	ldr	r1, [r7, #8]
 8022c0c:	4618      	mov	r0, r3
 8022c0e:	f000 faa3 	bl	8023158 <lv_point_within_circle>
 8022c12:	4603      	mov	r3, r0
 8022c14:	e000      	b.n	8022c18 <_lv_area_is_point_on+0x24a>
    }
    /*Not within corners*/
    return true;
 8022c16:	2301      	movs	r3, #1
}
 8022c18:	4618      	mov	r0, r3
 8022c1a:	3720      	adds	r7, #32
 8022c1c:	46bd      	mov	sp, r7
 8022c1e:	bd80      	pop	{r7, pc}

08022c20 <_lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool _lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 8022c20:	b480      	push	{r7}
 8022c22:	b083      	sub	sp, #12
 8022c24:	af00      	add	r7, sp, #0
 8022c26:	6078      	str	r0, [r7, #4]
 8022c28:	6039      	str	r1, [r7, #0]
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8022c2a:	687b      	ldr	r3, [r7, #4]
 8022c2c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8022c30:	683b      	ldr	r3, [r7, #0]
 8022c32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8022c36:	429a      	cmp	r2, r3
 8022c38:	dc19      	bgt.n	8022c6e <_lv_area_is_on+0x4e>
 8022c3a:	687b      	ldr	r3, [r7, #4]
 8022c3c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8022c40:	683b      	ldr	r3, [r7, #0]
 8022c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022c46:	429a      	cmp	r2, r3
 8022c48:	db11      	blt.n	8022c6e <_lv_area_is_on+0x4e>
 8022c4a:	687b      	ldr	r3, [r7, #4]
 8022c4c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8022c50:	683b      	ldr	r3, [r7, #0]
 8022c52:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8022c56:	429a      	cmp	r2, r3
 8022c58:	dc09      	bgt.n	8022c6e <_lv_area_is_on+0x4e>
 8022c5a:	687b      	ldr	r3, [r7, #4]
 8022c5c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8022c60:	683b      	ldr	r3, [r7, #0]
 8022c62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022c66:	429a      	cmp	r2, r3
 8022c68:	db01      	blt.n	8022c6e <_lv_area_is_on+0x4e>
        return true;
 8022c6a:	2301      	movs	r3, #1
 8022c6c:	e000      	b.n	8022c70 <_lv_area_is_on+0x50>
    }
    else {
        return false;
 8022c6e:	2300      	movs	r3, #0
    }
}
 8022c70:	4618      	mov	r0, r3
 8022c72:	370c      	adds	r7, #12
 8022c74:	46bd      	mov	sp, r7
 8022c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c7a:	4770      	bx	lr

08022c7c <_lv_area_is_in>:
 * @param aholder_p pointer to an area which could involve 'ain_p'
 * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 * @return true: `ain_p` is fully inside `aholder_p`
 */
bool _lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p, lv_coord_t radius)
{
 8022c7c:	b580      	push	{r7, lr}
 8022c7e:	b086      	sub	sp, #24
 8022c80:	af00      	add	r7, sp, #0
 8022c82:	60f8      	str	r0, [r7, #12]
 8022c84:	60b9      	str	r1, [r7, #8]
 8022c86:	4613      	mov	r3, r2
 8022c88:	80fb      	strh	r3, [r7, #6]
    bool is_in = false;
 8022c8a:	2300      	movs	r3, #0
 8022c8c:	75fb      	strb	r3, [r7, #23]

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8022c8e:	68fb      	ldr	r3, [r7, #12]
 8022c90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8022c94:	68bb      	ldr	r3, [r7, #8]
 8022c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022c9a:	429a      	cmp	r2, r3
 8022c9c:	db19      	blt.n	8022cd2 <_lv_area_is_in+0x56>
 8022c9e:	68fb      	ldr	r3, [r7, #12]
 8022ca0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8022ca4:	68bb      	ldr	r3, [r7, #8]
 8022ca6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022caa:	429a      	cmp	r2, r3
 8022cac:	db11      	blt.n	8022cd2 <_lv_area_is_in+0x56>
 8022cae:	68fb      	ldr	r3, [r7, #12]
 8022cb0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8022cb4:	68bb      	ldr	r3, [r7, #8]
 8022cb6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8022cba:	429a      	cmp	r2, r3
 8022cbc:	dc09      	bgt.n	8022cd2 <_lv_area_is_in+0x56>
       ain_p->y2 <= aholder_p->y2) {
 8022cbe:	68fb      	ldr	r3, [r7, #12]
 8022cc0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8022cc4:	68bb      	ldr	r3, [r7, #8]
 8022cc6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8022cca:	429a      	cmp	r2, r3
 8022ccc:	dc01      	bgt.n	8022cd2 <_lv_area_is_in+0x56>
        is_in = true;
 8022cce:	2301      	movs	r3, #1
 8022cd0:	75fb      	strb	r3, [r7, #23]
    }

    if(!is_in) return false;
 8022cd2:	7dfb      	ldrb	r3, [r7, #23]
 8022cd4:	f083 0301 	eor.w	r3, r3, #1
 8022cd8:	b2db      	uxtb	r3, r3
 8022cda:	2b00      	cmp	r3, #0
 8022cdc:	d001      	beq.n	8022ce2 <_lv_area_is_in+0x66>
 8022cde:	2300      	movs	r3, #0
 8022ce0:	e066      	b.n	8022db0 <_lv_area_is_in+0x134>
    if(radius == 0) return true;
 8022ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8022ce6:	2b00      	cmp	r3, #0
 8022ce8:	d101      	bne.n	8022cee <_lv_area_is_in+0x72>
 8022cea:	2301      	movs	r3, #1
 8022cec:	e060      	b.n	8022db0 <_lv_area_is_in+0x134>

    /*Check if the corner points are inside the radius or not*/
    lv_point_t p;

    p.x = ain_p->x1;
 8022cee:	68fb      	ldr	r3, [r7, #12]
 8022cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022cf4:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 8022cf6:	68fb      	ldr	r3, [r7, #12]
 8022cf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022cfc:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8022cfe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8022d02:	f107 0310 	add.w	r3, r7, #16
 8022d06:	4619      	mov	r1, r3
 8022d08:	68b8      	ldr	r0, [r7, #8]
 8022d0a:	f7ff fe60 	bl	80229ce <_lv_area_is_point_on>
 8022d0e:	4603      	mov	r3, r0
 8022d10:	f083 0301 	eor.w	r3, r3, #1
 8022d14:	b2db      	uxtb	r3, r3
 8022d16:	2b00      	cmp	r3, #0
 8022d18:	d001      	beq.n	8022d1e <_lv_area_is_in+0xa2>
 8022d1a:	2300      	movs	r3, #0
 8022d1c:	e048      	b.n	8022db0 <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 8022d1e:	68fb      	ldr	r3, [r7, #12]
 8022d20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8022d24:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y1;
 8022d26:	68fb      	ldr	r3, [r7, #12]
 8022d28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022d2c:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8022d2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8022d32:	f107 0310 	add.w	r3, r7, #16
 8022d36:	4619      	mov	r1, r3
 8022d38:	68b8      	ldr	r0, [r7, #8]
 8022d3a:	f7ff fe48 	bl	80229ce <_lv_area_is_point_on>
 8022d3e:	4603      	mov	r3, r0
 8022d40:	f083 0301 	eor.w	r3, r3, #1
 8022d44:	b2db      	uxtb	r3, r3
 8022d46:	2b00      	cmp	r3, #0
 8022d48:	d001      	beq.n	8022d4e <_lv_area_is_in+0xd2>
 8022d4a:	2300      	movs	r3, #0
 8022d4c:	e030      	b.n	8022db0 <_lv_area_is_in+0x134>

    p.x = ain_p->x1;
 8022d4e:	68fb      	ldr	r3, [r7, #12]
 8022d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022d54:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 8022d56:	68fb      	ldr	r3, [r7, #12]
 8022d58:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8022d5c:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8022d5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8022d62:	f107 0310 	add.w	r3, r7, #16
 8022d66:	4619      	mov	r1, r3
 8022d68:	68b8      	ldr	r0, [r7, #8]
 8022d6a:	f7ff fe30 	bl	80229ce <_lv_area_is_point_on>
 8022d6e:	4603      	mov	r3, r0
 8022d70:	f083 0301 	eor.w	r3, r3, #1
 8022d74:	b2db      	uxtb	r3, r3
 8022d76:	2b00      	cmp	r3, #0
 8022d78:	d001      	beq.n	8022d7e <_lv_area_is_in+0x102>
 8022d7a:	2300      	movs	r3, #0
 8022d7c:	e018      	b.n	8022db0 <_lv_area_is_in+0x134>

    p.x = ain_p->x2;
 8022d7e:	68fb      	ldr	r3, [r7, #12]
 8022d80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8022d84:	823b      	strh	r3, [r7, #16]
    p.y = ain_p->y2;
 8022d86:	68fb      	ldr	r3, [r7, #12]
 8022d88:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8022d8c:	827b      	strh	r3, [r7, #18]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8022d8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8022d92:	f107 0310 	add.w	r3, r7, #16
 8022d96:	4619      	mov	r1, r3
 8022d98:	68b8      	ldr	r0, [r7, #8]
 8022d9a:	f7ff fe18 	bl	80229ce <_lv_area_is_point_on>
 8022d9e:	4603      	mov	r3, r0
 8022da0:	f083 0301 	eor.w	r3, r3, #1
 8022da4:	b2db      	uxtb	r3, r3
 8022da6:	2b00      	cmp	r3, #0
 8022da8:	d001      	beq.n	8022dae <_lv_area_is_in+0x132>
 8022daa:	2300      	movs	r3, #0
 8022dac:	e000      	b.n	8022db0 <_lv_area_is_in+0x134>

    return true;
 8022dae:	2301      	movs	r3, #1
}
 8022db0:	4618      	mov	r0, r3
 8022db2:	3718      	adds	r7, #24
 8022db4:	46bd      	mov	sp, r7
 8022db6:	bd80      	pop	{r7, pc}

08022db8 <_lv_area_is_out>:
 * @param aholder_p pointer to an area which could involve 'ain_p'
 * @param radius radius of `aholder_p` (e.g. for rounded rectangle)
 * @return true: `aout_p` is fully outside `aholder_p`
 */
bool _lv_area_is_out(const lv_area_t * aout_p, const lv_area_t * aholder_p, lv_coord_t radius)
{
 8022db8:	b580      	push	{r7, lr}
 8022dba:	b086      	sub	sp, #24
 8022dbc:	af00      	add	r7, sp, #0
 8022dbe:	60f8      	str	r0, [r7, #12]
 8022dc0:	60b9      	str	r1, [r7, #8]
 8022dc2:	4613      	mov	r3, r2
 8022dc4:	80fb      	strh	r3, [r7, #6]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8022dc6:	68fb      	ldr	r3, [r7, #12]
 8022dc8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8022dcc:	68bb      	ldr	r3, [r7, #8]
 8022dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022dd2:	429a      	cmp	r2, r3
 8022dd4:	db17      	blt.n	8022e06 <_lv_area_is_out+0x4e>
 8022dd6:	68fb      	ldr	r3, [r7, #12]
 8022dd8:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8022ddc:	68bb      	ldr	r3, [r7, #8]
 8022dde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022de2:	429a      	cmp	r2, r3
 8022de4:	db0f      	blt.n	8022e06 <_lv_area_is_out+0x4e>
 8022de6:	68fb      	ldr	r3, [r7, #12]
 8022de8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8022dec:	68bb      	ldr	r3, [r7, #8]
 8022dee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8022df2:	429a      	cmp	r2, r3
 8022df4:	dc07      	bgt.n	8022e06 <_lv_area_is_out+0x4e>
       aout_p->y1 > aholder_p->y2) {
 8022df6:	68fb      	ldr	r3, [r7, #12]
 8022df8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8022dfc:	68bb      	ldr	r3, [r7, #8]
 8022dfe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8022e02:	429a      	cmp	r2, r3
 8022e04:	dd01      	ble.n	8022e0a <_lv_area_is_out+0x52>
        return true;
 8022e06:	2301      	movs	r3, #1
 8022e08:	e05a      	b.n	8022ec0 <_lv_area_is_out+0x108>
    }

    if(radius == 0) return false;
 8022e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8022e0e:	2b00      	cmp	r3, #0
 8022e10:	d101      	bne.n	8022e16 <_lv_area_is_out+0x5e>
 8022e12:	2300      	movs	r3, #0
 8022e14:	e054      	b.n	8022ec0 <_lv_area_is_out+0x108>

    /*Check if the corner points are outside the radius or not*/
    lv_point_t p;

    p.x = aout_p->x1;
 8022e16:	68fb      	ldr	r3, [r7, #12]
 8022e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022e1c:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y1;
 8022e1e:	68fb      	ldr	r3, [r7, #12]
 8022e20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022e24:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8022e26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8022e2a:	f107 0314 	add.w	r3, r7, #20
 8022e2e:	4619      	mov	r1, r3
 8022e30:	68b8      	ldr	r0, [r7, #8]
 8022e32:	f7ff fdcc 	bl	80229ce <_lv_area_is_point_on>
 8022e36:	4603      	mov	r3, r0
 8022e38:	2b00      	cmp	r3, #0
 8022e3a:	d001      	beq.n	8022e40 <_lv_area_is_out+0x88>
 8022e3c:	2300      	movs	r3, #0
 8022e3e:	e03f      	b.n	8022ec0 <_lv_area_is_out+0x108>

    p.x = aout_p->x2;
 8022e40:	68fb      	ldr	r3, [r7, #12]
 8022e42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8022e46:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y1;
 8022e48:	68fb      	ldr	r3, [r7, #12]
 8022e4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022e4e:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8022e50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8022e54:	f107 0314 	add.w	r3, r7, #20
 8022e58:	4619      	mov	r1, r3
 8022e5a:	68b8      	ldr	r0, [r7, #8]
 8022e5c:	f7ff fdb7 	bl	80229ce <_lv_area_is_point_on>
 8022e60:	4603      	mov	r3, r0
 8022e62:	2b00      	cmp	r3, #0
 8022e64:	d001      	beq.n	8022e6a <_lv_area_is_out+0xb2>
 8022e66:	2300      	movs	r3, #0
 8022e68:	e02a      	b.n	8022ec0 <_lv_area_is_out+0x108>

    p.x = aout_p->x1;
 8022e6a:	68fb      	ldr	r3, [r7, #12]
 8022e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022e70:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y2;
 8022e72:	68fb      	ldr	r3, [r7, #12]
 8022e74:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8022e78:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8022e7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8022e7e:	f107 0314 	add.w	r3, r7, #20
 8022e82:	4619      	mov	r1, r3
 8022e84:	68b8      	ldr	r0, [r7, #8]
 8022e86:	f7ff fda2 	bl	80229ce <_lv_area_is_point_on>
 8022e8a:	4603      	mov	r3, r0
 8022e8c:	2b00      	cmp	r3, #0
 8022e8e:	d001      	beq.n	8022e94 <_lv_area_is_out+0xdc>
 8022e90:	2300      	movs	r3, #0
 8022e92:	e015      	b.n	8022ec0 <_lv_area_is_out+0x108>

    p.x = aout_p->x2;
 8022e94:	68fb      	ldr	r3, [r7, #12]
 8022e96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8022e9a:	82bb      	strh	r3, [r7, #20]
    p.y = aout_p->y2;
 8022e9c:	68fb      	ldr	r3, [r7, #12]
 8022e9e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8022ea2:	82fb      	strh	r3, [r7, #22]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8022ea4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8022ea8:	f107 0314 	add.w	r3, r7, #20
 8022eac:	4619      	mov	r1, r3
 8022eae:	68b8      	ldr	r0, [r7, #8]
 8022eb0:	f7ff fd8d 	bl	80229ce <_lv_area_is_point_on>
 8022eb4:	4603      	mov	r3, r0
 8022eb6:	2b00      	cmp	r3, #0
 8022eb8:	d001      	beq.n	8022ebe <_lv_area_is_out+0x106>
 8022eba:	2300      	movs	r3, #0
 8022ebc:	e000      	b.n	8022ec0 <_lv_area_is_out+0x108>

    return true;
 8022ebe:	2301      	movs	r3, #1
}
 8022ec0:	4618      	mov	r0, r3
 8022ec2:	3718      	adds	r7, #24
 8022ec4:	46bd      	mov	sp, r7
 8022ec6:	bd80      	pop	{r7, pc}

08022ec8 <lv_point_transform>:
    to_align->y2 = to_align->y1 + h - 1;
}

#define _LV_TRANSFORM_TRIGO_SHIFT 10
void lv_point_transform(lv_point_t * p, int32_t angle, int32_t zoom, const lv_point_t * pivot)
{
 8022ec8:	b580      	push	{r7, lr}
 8022eca:	b08e      	sub	sp, #56	; 0x38
 8022ecc:	af00      	add	r7, sp, #0
 8022ece:	60f8      	str	r0, [r7, #12]
 8022ed0:	60b9      	str	r1, [r7, #8]
 8022ed2:	607a      	str	r2, [r7, #4]
 8022ed4:	603b      	str	r3, [r7, #0]
    if(angle == 0 && zoom == 256) {
 8022ed6:	68bb      	ldr	r3, [r7, #8]
 8022ed8:	2b00      	cmp	r3, #0
 8022eda:	d104      	bne.n	8022ee6 <lv_point_transform+0x1e>
 8022edc:	687b      	ldr	r3, [r7, #4]
 8022ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022ee2:	f000 812c 	beq.w	802313e <lv_point_transform+0x276>
        return;
    }

    p->x -= pivot->x;
 8022ee6:	68fb      	ldr	r3, [r7, #12]
 8022ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022eec:	b29a      	uxth	r2, r3
 8022eee:	683b      	ldr	r3, [r7, #0]
 8022ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022ef4:	b29b      	uxth	r3, r3
 8022ef6:	1ad3      	subs	r3, r2, r3
 8022ef8:	b29b      	uxth	r3, r3
 8022efa:	b21a      	sxth	r2, r3
 8022efc:	68fb      	ldr	r3, [r7, #12]
 8022efe:	801a      	strh	r2, [r3, #0]
    p->y -= pivot->y;
 8022f00:	68fb      	ldr	r3, [r7, #12]
 8022f02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022f06:	b29a      	uxth	r2, r3
 8022f08:	683b      	ldr	r3, [r7, #0]
 8022f0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022f0e:	b29b      	uxth	r3, r3
 8022f10:	1ad3      	subs	r3, r2, r3
 8022f12:	b29b      	uxth	r3, r3
 8022f14:	b21a      	sxth	r2, r3
 8022f16:	68fb      	ldr	r3, [r7, #12]
 8022f18:	805a      	strh	r2, [r3, #2]

    if(angle == 0) {
 8022f1a:	68bb      	ldr	r3, [r7, #8]
 8022f1c:	2b00      	cmp	r3, #0
 8022f1e:	d124      	bne.n	8022f6a <lv_point_transform+0xa2>
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 8022f20:	68fb      	ldr	r3, [r7, #12]
 8022f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022f26:	461a      	mov	r2, r3
 8022f28:	687b      	ldr	r3, [r7, #4]
 8022f2a:	fb02 f303 	mul.w	r3, r2, r3
 8022f2e:	121b      	asrs	r3, r3, #8
 8022f30:	b29a      	uxth	r2, r3
 8022f32:	683b      	ldr	r3, [r7, #0]
 8022f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022f38:	b29b      	uxth	r3, r3
 8022f3a:	4413      	add	r3, r2
 8022f3c:	b29b      	uxth	r3, r3
 8022f3e:	b21a      	sxth	r2, r3
 8022f40:	68fb      	ldr	r3, [r7, #12]
 8022f42:	801a      	strh	r2, [r3, #0]
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 8022f44:	68fb      	ldr	r3, [r7, #12]
 8022f46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022f4a:	461a      	mov	r2, r3
 8022f4c:	687b      	ldr	r3, [r7, #4]
 8022f4e:	fb02 f303 	mul.w	r3, r2, r3
 8022f52:	121b      	asrs	r3, r3, #8
 8022f54:	b29a      	uxth	r2, r3
 8022f56:	683b      	ldr	r3, [r7, #0]
 8022f58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022f5c:	b29b      	uxth	r3, r3
 8022f5e:	4413      	add	r3, r2
 8022f60:	b29b      	uxth	r3, r3
 8022f62:	b21a      	sxth	r2, r3
 8022f64:	68fb      	ldr	r3, [r7, #12]
 8022f66:	805a      	strh	r2, [r3, #2]
        return;
 8022f68:	e0ea      	b.n	8023140 <lv_point_transform+0x278>
    }

    static int32_t angle_prev = INT32_MIN;
    static int32_t sinma;
    static int32_t cosma;
    if(angle_prev != angle) {
 8022f6a:	4b77      	ldr	r3, [pc, #476]	; (8023148 <lv_point_transform+0x280>)
 8022f6c:	681b      	ldr	r3, [r3, #0]
 8022f6e:	68ba      	ldr	r2, [r7, #8]
 8022f70:	429a      	cmp	r2, r3
 8022f72:	d078      	beq.n	8023066 <lv_point_transform+0x19e>
        int32_t angle_limited = angle;
 8022f74:	68bb      	ldr	r3, [r7, #8]
 8022f76:	637b      	str	r3, [r7, #52]	; 0x34
        if(angle_limited > 3600) angle_limited -= 3600;
 8022f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022f7a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8022f7e:	dd03      	ble.n	8022f88 <lv_point_transform+0xc0>
 8022f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022f82:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8022f86:	637b      	str	r3, [r7, #52]	; 0x34
        if(angle_limited < 0) angle_limited += 3600;
 8022f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022f8a:	2b00      	cmp	r3, #0
 8022f8c:	da03      	bge.n	8022f96 <lv_point_transform+0xce>
 8022f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022f90:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8022f94:	637b      	str	r3, [r7, #52]	; 0x34

        int32_t angle_low = angle_limited / 10;
 8022f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022f98:	4a6c      	ldr	r2, [pc, #432]	; (802314c <lv_point_transform+0x284>)
 8022f9a:	fb82 1203 	smull	r1, r2, r2, r3
 8022f9e:	1092      	asrs	r2, r2, #2
 8022fa0:	17db      	asrs	r3, r3, #31
 8022fa2:	1ad3      	subs	r3, r2, r3
 8022fa4:	633b      	str	r3, [r7, #48]	; 0x30
        int32_t angle_high = angle_low + 1;
 8022fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022fa8:	3301      	adds	r3, #1
 8022faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 8022fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022fae:	f06f 0209 	mvn.w	r2, #9
 8022fb2:	fb02 f303 	mul.w	r3, r2, r3
 8022fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022fb8:	4413      	add	r3, r2
 8022fba:	62bb      	str	r3, [r7, #40]	; 0x28

        int32_t s1 = lv_trigo_sin(angle_low);
 8022fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022fbe:	b21b      	sxth	r3, r3
 8022fc0:	4618      	mov	r0, r3
 8022fc2:	f000 fe7d 	bl	8023cc0 <lv_trigo_sin>
 8022fc6:	4603      	mov	r3, r0
 8022fc8:	627b      	str	r3, [r7, #36]	; 0x24
        int32_t s2 = lv_trigo_sin(angle_high);
 8022fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022fcc:	b21b      	sxth	r3, r3
 8022fce:	4618      	mov	r0, r3
 8022fd0:	f000 fe76 	bl	8023cc0 <lv_trigo_sin>
 8022fd4:	4603      	mov	r3, r0
 8022fd6:	623b      	str	r3, [r7, #32]

        int32_t c1 = lv_trigo_sin(angle_low + 90);
 8022fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022fda:	b29b      	uxth	r3, r3
 8022fdc:	335a      	adds	r3, #90	; 0x5a
 8022fde:	b29b      	uxth	r3, r3
 8022fe0:	b21b      	sxth	r3, r3
 8022fe2:	4618      	mov	r0, r3
 8022fe4:	f000 fe6c 	bl	8023cc0 <lv_trigo_sin>
 8022fe8:	4603      	mov	r3, r0
 8022fea:	61fb      	str	r3, [r7, #28]
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 8022fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022fee:	b29b      	uxth	r3, r3
 8022ff0:	335a      	adds	r3, #90	; 0x5a
 8022ff2:	b29b      	uxth	r3, r3
 8022ff4:	b21b      	sxth	r3, r3
 8022ff6:	4618      	mov	r0, r3
 8022ff8:	f000 fe62 	bl	8023cc0 <lv_trigo_sin>
 8022ffc:	4603      	mov	r3, r0
 8022ffe:	61bb      	str	r3, [r7, #24]

        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8023000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023002:	f1c3 030a 	rsb	r3, r3, #10
 8023006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023008:	fb03 f202 	mul.w	r2, r3, r2
 802300c:	6a3b      	ldr	r3, [r7, #32]
 802300e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8023010:	fb01 f303 	mul.w	r3, r1, r3
 8023014:	4413      	add	r3, r2
 8023016:	4a4d      	ldr	r2, [pc, #308]	; (802314c <lv_point_transform+0x284>)
 8023018:	fb82 1203 	smull	r1, r2, r2, r3
 802301c:	1092      	asrs	r2, r2, #2
 802301e:	17db      	asrs	r3, r3, #31
 8023020:	1ad3      	subs	r3, r2, r3
 8023022:	4a4b      	ldr	r2, [pc, #300]	; (8023150 <lv_point_transform+0x288>)
 8023024:	6013      	str	r3, [r2, #0]
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8023026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023028:	f1c3 030a 	rsb	r3, r3, #10
 802302c:	69fa      	ldr	r2, [r7, #28]
 802302e:	fb03 f202 	mul.w	r2, r3, r2
 8023032:	69bb      	ldr	r3, [r7, #24]
 8023034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8023036:	fb01 f303 	mul.w	r3, r1, r3
 802303a:	4413      	add	r3, r2
 802303c:	4a43      	ldr	r2, [pc, #268]	; (802314c <lv_point_transform+0x284>)
 802303e:	fb82 1203 	smull	r1, r2, r2, r3
 8023042:	1092      	asrs	r2, r2, #2
 8023044:	17db      	asrs	r3, r3, #31
 8023046:	1ad3      	subs	r3, r2, r3
 8023048:	4a42      	ldr	r2, [pc, #264]	; (8023154 <lv_point_transform+0x28c>)
 802304a:	6013      	str	r3, [r2, #0]
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 802304c:	4b40      	ldr	r3, [pc, #256]	; (8023150 <lv_point_transform+0x288>)
 802304e:	681b      	ldr	r3, [r3, #0]
 8023050:	115b      	asrs	r3, r3, #5
 8023052:	4a3f      	ldr	r2, [pc, #252]	; (8023150 <lv_point_transform+0x288>)
 8023054:	6013      	str	r3, [r2, #0]
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8023056:	4b3f      	ldr	r3, [pc, #252]	; (8023154 <lv_point_transform+0x28c>)
 8023058:	681b      	ldr	r3, [r3, #0]
 802305a:	115b      	asrs	r3, r3, #5
 802305c:	4a3d      	ldr	r2, [pc, #244]	; (8023154 <lv_point_transform+0x28c>)
 802305e:	6013      	str	r3, [r2, #0]
        angle_prev = angle;
 8023060:	4a39      	ldr	r2, [pc, #228]	; (8023148 <lv_point_transform+0x280>)
 8023062:	68bb      	ldr	r3, [r7, #8]
 8023064:	6013      	str	r3, [r2, #0]
    }
    int32_t x = p->x;
 8023066:	68fb      	ldr	r3, [r7, #12]
 8023068:	f9b3 3000 	ldrsh.w	r3, [r3]
 802306c:	617b      	str	r3, [r7, #20]
    int32_t y = p->y;
 802306e:	68fb      	ldr	r3, [r7, #12]
 8023070:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8023074:	613b      	str	r3, [r7, #16]
    if(zoom == 256) {
 8023076:	687b      	ldr	r3, [r7, #4]
 8023078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802307c:	d12c      	bne.n	80230d8 <lv_point_transform+0x210>
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 802307e:	4b35      	ldr	r3, [pc, #212]	; (8023154 <lv_point_transform+0x28c>)
 8023080:	681b      	ldr	r3, [r3, #0]
 8023082:	697a      	ldr	r2, [r7, #20]
 8023084:	fb03 f202 	mul.w	r2, r3, r2
 8023088:	4b31      	ldr	r3, [pc, #196]	; (8023150 <lv_point_transform+0x288>)
 802308a:	681b      	ldr	r3, [r3, #0]
 802308c:	6939      	ldr	r1, [r7, #16]
 802308e:	fb01 f303 	mul.w	r3, r1, r3
 8023092:	1ad3      	subs	r3, r2, r3
 8023094:	129b      	asrs	r3, r3, #10
 8023096:	b29a      	uxth	r2, r3
 8023098:	683b      	ldr	r3, [r7, #0]
 802309a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802309e:	b29b      	uxth	r3, r3
 80230a0:	4413      	add	r3, r2
 80230a2:	b29b      	uxth	r3, r3
 80230a4:	b21a      	sxth	r2, r3
 80230a6:	68fb      	ldr	r3, [r7, #12]
 80230a8:	801a      	strh	r2, [r3, #0]
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 80230aa:	4b29      	ldr	r3, [pc, #164]	; (8023150 <lv_point_transform+0x288>)
 80230ac:	681b      	ldr	r3, [r3, #0]
 80230ae:	697a      	ldr	r2, [r7, #20]
 80230b0:	fb03 f202 	mul.w	r2, r3, r2
 80230b4:	4b27      	ldr	r3, [pc, #156]	; (8023154 <lv_point_transform+0x28c>)
 80230b6:	681b      	ldr	r3, [r3, #0]
 80230b8:	6939      	ldr	r1, [r7, #16]
 80230ba:	fb01 f303 	mul.w	r3, r1, r3
 80230be:	4413      	add	r3, r2
 80230c0:	129b      	asrs	r3, r3, #10
 80230c2:	b29a      	uxth	r2, r3
 80230c4:	683b      	ldr	r3, [r7, #0]
 80230c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80230ca:	b29b      	uxth	r3, r3
 80230cc:	4413      	add	r3, r2
 80230ce:	b29b      	uxth	r3, r3
 80230d0:	b21a      	sxth	r2, r3
 80230d2:	68fb      	ldr	r3, [r7, #12]
 80230d4:	805a      	strh	r2, [r3, #2]
 80230d6:	e033      	b.n	8023140 <lv_point_transform+0x278>
    }
    else {
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 80230d8:	4b1e      	ldr	r3, [pc, #120]	; (8023154 <lv_point_transform+0x28c>)
 80230da:	681b      	ldr	r3, [r3, #0]
 80230dc:	697a      	ldr	r2, [r7, #20]
 80230de:	fb03 f202 	mul.w	r2, r3, r2
 80230e2:	4b1b      	ldr	r3, [pc, #108]	; (8023150 <lv_point_transform+0x288>)
 80230e4:	681b      	ldr	r3, [r3, #0]
 80230e6:	6939      	ldr	r1, [r7, #16]
 80230e8:	fb01 f303 	mul.w	r3, r1, r3
 80230ec:	1ad3      	subs	r3, r2, r3
 80230ee:	687a      	ldr	r2, [r7, #4]
 80230f0:	fb02 f303 	mul.w	r3, r2, r3
 80230f4:	149b      	asrs	r3, r3, #18
 80230f6:	b29a      	uxth	r2, r3
 80230f8:	683b      	ldr	r3, [r7, #0]
 80230fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80230fe:	b29b      	uxth	r3, r3
 8023100:	4413      	add	r3, r2
 8023102:	b29b      	uxth	r3, r3
 8023104:	b21a      	sxth	r2, r3
 8023106:	68fb      	ldr	r3, [r7, #12]
 8023108:	801a      	strh	r2, [r3, #0]
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 802310a:	4b11      	ldr	r3, [pc, #68]	; (8023150 <lv_point_transform+0x288>)
 802310c:	681b      	ldr	r3, [r3, #0]
 802310e:	697a      	ldr	r2, [r7, #20]
 8023110:	fb03 f202 	mul.w	r2, r3, r2
 8023114:	4b0f      	ldr	r3, [pc, #60]	; (8023154 <lv_point_transform+0x28c>)
 8023116:	681b      	ldr	r3, [r3, #0]
 8023118:	6939      	ldr	r1, [r7, #16]
 802311a:	fb01 f303 	mul.w	r3, r1, r3
 802311e:	4413      	add	r3, r2
 8023120:	687a      	ldr	r2, [r7, #4]
 8023122:	fb02 f303 	mul.w	r3, r2, r3
 8023126:	149b      	asrs	r3, r3, #18
 8023128:	b29a      	uxth	r2, r3
 802312a:	683b      	ldr	r3, [r7, #0]
 802312c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8023130:	b29b      	uxth	r3, r3
 8023132:	4413      	add	r3, r2
 8023134:	b29b      	uxth	r3, r3
 8023136:	b21a      	sxth	r2, r3
 8023138:	68fb      	ldr	r3, [r7, #12]
 802313a:	805a      	strh	r2, [r3, #2]
 802313c:	e000      	b.n	8023140 <lv_point_transform+0x278>
        return;
 802313e:	bf00      	nop
    }
}
 8023140:	3738      	adds	r7, #56	; 0x38
 8023142:	46bd      	mov	sp, r7
 8023144:	bd80      	pop	{r7, pc}
 8023146:	bf00      	nop
 8023148:	20000010 	.word	0x20000010
 802314c:	66666667 	.word	0x66666667
 8023150:	200008b4 	.word	0x200008b4
 8023154:	200008b8 	.word	0x200008b8

08023158 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 8023158:	b480      	push	{r7}
 802315a:	b089      	sub	sp, #36	; 0x24
 802315c:	af00      	add	r7, sp, #0
 802315e:	6078      	str	r0, [r7, #4]
 8023160:	6039      	str	r1, [r7, #0]
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8023162:	687b      	ldr	r3, [r7, #4]
 8023164:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8023168:	461a      	mov	r2, r3
 802316a:	687b      	ldr	r3, [r7, #4]
 802316c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8023170:	1ad3      	subs	r3, r2, r3
 8023172:	2b00      	cmp	r3, #0
 8023174:	da00      	bge.n	8023178 <lv_point_within_circle+0x20>
 8023176:	3301      	adds	r3, #1
 8023178:	105b      	asrs	r3, r3, #1
 802317a:	83fb      	strh	r3, [r7, #30]

    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
 802317c:	687b      	ldr	r3, [r7, #4]
 802317e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8023182:	b29a      	uxth	r2, r3
 8023184:	8bfb      	ldrh	r3, [r7, #30]
 8023186:	4413      	add	r3, r2
 8023188:	b29b      	uxth	r3, r3
 802318a:	83bb      	strh	r3, [r7, #28]
    lv_coord_t cy = area->y1 + r;
 802318c:	687b      	ldr	r3, [r7, #4]
 802318e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8023192:	b29a      	uxth	r2, r3
 8023194:	8bfb      	ldrh	r3, [r7, #30]
 8023196:	4413      	add	r3, r2
 8023198:	b29b      	uxth	r3, r3
 802319a:	837b      	strh	r3, [r7, #26]

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
 802319c:	683b      	ldr	r3, [r7, #0]
 802319e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80231a2:	b29a      	uxth	r2, r3
 80231a4:	8bbb      	ldrh	r3, [r7, #28]
 80231a6:	1ad3      	subs	r3, r2, r3
 80231a8:	b29b      	uxth	r3, r3
 80231aa:	833b      	strh	r3, [r7, #24]
    lv_coord_t py = p->y - cy;
 80231ac:	683b      	ldr	r3, [r7, #0]
 80231ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80231b2:	b29a      	uxth	r2, r3
 80231b4:	8b7b      	ldrh	r3, [r7, #26]
 80231b6:	1ad3      	subs	r3, r2, r3
 80231b8:	b29b      	uxth	r3, r3
 80231ba:	82fb      	strh	r3, [r7, #22]

    uint32_t r_sqrd = r * r;
 80231bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80231c0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80231c4:	fb02 f303 	mul.w	r3, r2, r3
 80231c8:	613b      	str	r3, [r7, #16]
    uint32_t dist = (px * px) + (py * py);
 80231ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80231ce:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80231d2:	fb03 f202 	mul.w	r2, r3, r2
 80231d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80231da:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80231de:	fb01 f303 	mul.w	r3, r1, r3
 80231e2:	4413      	add	r3, r2
 80231e4:	60fb      	str	r3, [r7, #12]

    if(dist <= r_sqrd)
 80231e6:	68fa      	ldr	r2, [r7, #12]
 80231e8:	693b      	ldr	r3, [r7, #16]
 80231ea:	429a      	cmp	r2, r3
 80231ec:	d801      	bhi.n	80231f2 <lv_point_within_circle+0x9a>
        return true;
 80231ee:	2301      	movs	r3, #1
 80231f0:	e000      	b.n	80231f4 <lv_point_within_circle+0x9c>
    else
        return false;
 80231f2:	2300      	movs	r3, #0
}
 80231f4:	4618      	mov	r0, r3
 80231f6:	3724      	adds	r7, #36	; 0x24
 80231f8:	46bd      	mov	sp, r7
 80231fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231fe:	4770      	bx	lr

08023200 <lv_color_make>:
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
 8023200:	b480      	push	{r7}
 8023202:	b083      	sub	sp, #12
 8023204:	af00      	add	r7, sp, #0
 8023206:	4603      	mov	r3, r0
 8023208:	71fb      	strb	r3, [r7, #7]
 802320a:	460b      	mov	r3, r1
 802320c:	71bb      	strb	r3, [r7, #6]
 802320e:	4613      	mov	r3, r2
 8023210:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8023212:	797b      	ldrb	r3, [r7, #5]
 8023214:	09db      	lsrs	r3, r3, #7
 8023216:	b2da      	uxtb	r2, r3
 8023218:	79bb      	ldrb	r3, [r7, #6]
 802321a:	09db      	lsrs	r3, r3, #7
 802321c:	b2db      	uxtb	r3, r3
 802321e:	4313      	orrs	r3, r2
 8023220:	b2da      	uxtb	r2, r3
 8023222:	79fb      	ldrb	r3, [r7, #7]
 8023224:	09db      	lsrs	r3, r3, #7
 8023226:	b2db      	uxtb	r3, r3
 8023228:	4313      	orrs	r3, r2
 802322a:	b2db      	uxtb	r3, r3
}
 802322c:	4618      	mov	r0, r3
 802322e:	370c      	adds	r7, #12
 8023230:	46bd      	mov	sp, r7
 8023232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023236:	4770      	bx	lr

08023238 <lv_color_black>:
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
}
static inline lv_color_t lv_color_black(void)
{
 8023238:	b580      	push	{r7, lr}
 802323a:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 802323c:	2200      	movs	r2, #0
 802323e:	2100      	movs	r1, #0
 8023240:	2000      	movs	r0, #0
 8023242:	f7ff ffdd 	bl	8023200 <lv_color_make>
 8023246:	4603      	mov	r3, r0
}
 8023248:	4618      	mov	r0, r3
 802324a:	bd80      	pop	{r7, pc}

0802324c <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
 802324c:	b480      	push	{r7}
 802324e:	b085      	sub	sp, #20
 8023250:	af00      	add	r7, sp, #0
 8023252:	60f8      	str	r0, [r7, #12]
 8023254:	7239      	strb	r1, [r7, #8]
 8023256:	607a      	str	r2, [r7, #4]
        *buf = color;
        buf++;
        px_num--;
    }
#else
    while(px_num > 16) {
 8023258:	e062      	b.n	8023320 <lv_color_fill+0xd4>
        *buf = color;
 802325a:	68fb      	ldr	r3, [r7, #12]
 802325c:	7a3a      	ldrb	r2, [r7, #8]
 802325e:	701a      	strb	r2, [r3, #0]
        buf++;
 8023260:	68fb      	ldr	r3, [r7, #12]
 8023262:	3301      	adds	r3, #1
 8023264:	60fb      	str	r3, [r7, #12]
        *buf = color;
 8023266:	68fb      	ldr	r3, [r7, #12]
 8023268:	7a3a      	ldrb	r2, [r7, #8]
 802326a:	701a      	strb	r2, [r3, #0]
        buf++;
 802326c:	68fb      	ldr	r3, [r7, #12]
 802326e:	3301      	adds	r3, #1
 8023270:	60fb      	str	r3, [r7, #12]
        *buf = color;
 8023272:	68fb      	ldr	r3, [r7, #12]
 8023274:	7a3a      	ldrb	r2, [r7, #8]
 8023276:	701a      	strb	r2, [r3, #0]
        buf++;
 8023278:	68fb      	ldr	r3, [r7, #12]
 802327a:	3301      	adds	r3, #1
 802327c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 802327e:	68fb      	ldr	r3, [r7, #12]
 8023280:	7a3a      	ldrb	r2, [r7, #8]
 8023282:	701a      	strb	r2, [r3, #0]
        buf++;
 8023284:	68fb      	ldr	r3, [r7, #12]
 8023286:	3301      	adds	r3, #1
 8023288:	60fb      	str	r3, [r7, #12]

        *buf = color;
 802328a:	68fb      	ldr	r3, [r7, #12]
 802328c:	7a3a      	ldrb	r2, [r7, #8]
 802328e:	701a      	strb	r2, [r3, #0]
        buf++;
 8023290:	68fb      	ldr	r3, [r7, #12]
 8023292:	3301      	adds	r3, #1
 8023294:	60fb      	str	r3, [r7, #12]
        *buf = color;
 8023296:	68fb      	ldr	r3, [r7, #12]
 8023298:	7a3a      	ldrb	r2, [r7, #8]
 802329a:	701a      	strb	r2, [r3, #0]
        buf++;
 802329c:	68fb      	ldr	r3, [r7, #12]
 802329e:	3301      	adds	r3, #1
 80232a0:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80232a2:	68fb      	ldr	r3, [r7, #12]
 80232a4:	7a3a      	ldrb	r2, [r7, #8]
 80232a6:	701a      	strb	r2, [r3, #0]
        buf++;
 80232a8:	68fb      	ldr	r3, [r7, #12]
 80232aa:	3301      	adds	r3, #1
 80232ac:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80232ae:	68fb      	ldr	r3, [r7, #12]
 80232b0:	7a3a      	ldrb	r2, [r7, #8]
 80232b2:	701a      	strb	r2, [r3, #0]
        buf++;
 80232b4:	68fb      	ldr	r3, [r7, #12]
 80232b6:	3301      	adds	r3, #1
 80232b8:	60fb      	str	r3, [r7, #12]

        *buf = color;
 80232ba:	68fb      	ldr	r3, [r7, #12]
 80232bc:	7a3a      	ldrb	r2, [r7, #8]
 80232be:	701a      	strb	r2, [r3, #0]
        buf++;
 80232c0:	68fb      	ldr	r3, [r7, #12]
 80232c2:	3301      	adds	r3, #1
 80232c4:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80232c6:	68fb      	ldr	r3, [r7, #12]
 80232c8:	7a3a      	ldrb	r2, [r7, #8]
 80232ca:	701a      	strb	r2, [r3, #0]
        buf++;
 80232cc:	68fb      	ldr	r3, [r7, #12]
 80232ce:	3301      	adds	r3, #1
 80232d0:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80232d2:	68fb      	ldr	r3, [r7, #12]
 80232d4:	7a3a      	ldrb	r2, [r7, #8]
 80232d6:	701a      	strb	r2, [r3, #0]
        buf++;
 80232d8:	68fb      	ldr	r3, [r7, #12]
 80232da:	3301      	adds	r3, #1
 80232dc:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80232de:	68fb      	ldr	r3, [r7, #12]
 80232e0:	7a3a      	ldrb	r2, [r7, #8]
 80232e2:	701a      	strb	r2, [r3, #0]
        buf++;
 80232e4:	68fb      	ldr	r3, [r7, #12]
 80232e6:	3301      	adds	r3, #1
 80232e8:	60fb      	str	r3, [r7, #12]

        *buf = color;
 80232ea:	68fb      	ldr	r3, [r7, #12]
 80232ec:	7a3a      	ldrb	r2, [r7, #8]
 80232ee:	701a      	strb	r2, [r3, #0]
        buf++;
 80232f0:	68fb      	ldr	r3, [r7, #12]
 80232f2:	3301      	adds	r3, #1
 80232f4:	60fb      	str	r3, [r7, #12]
        *buf = color;
 80232f6:	68fb      	ldr	r3, [r7, #12]
 80232f8:	7a3a      	ldrb	r2, [r7, #8]
 80232fa:	701a      	strb	r2, [r3, #0]
        buf++;
 80232fc:	68fb      	ldr	r3, [r7, #12]
 80232fe:	3301      	adds	r3, #1
 8023300:	60fb      	str	r3, [r7, #12]
        *buf = color;
 8023302:	68fb      	ldr	r3, [r7, #12]
 8023304:	7a3a      	ldrb	r2, [r7, #8]
 8023306:	701a      	strb	r2, [r3, #0]
        buf++;
 8023308:	68fb      	ldr	r3, [r7, #12]
 802330a:	3301      	adds	r3, #1
 802330c:	60fb      	str	r3, [r7, #12]
        *buf = color;
 802330e:	68fb      	ldr	r3, [r7, #12]
 8023310:	7a3a      	ldrb	r2, [r7, #8]
 8023312:	701a      	strb	r2, [r3, #0]
        buf++;
 8023314:	68fb      	ldr	r3, [r7, #12]
 8023316:	3301      	adds	r3, #1
 8023318:	60fb      	str	r3, [r7, #12]

        px_num -= 16;
 802331a:	687b      	ldr	r3, [r7, #4]
 802331c:	3b10      	subs	r3, #16
 802331e:	607b      	str	r3, [r7, #4]
    while(px_num > 16) {
 8023320:	687b      	ldr	r3, [r7, #4]
 8023322:	2b10      	cmp	r3, #16
 8023324:	d899      	bhi.n	802325a <lv_color_fill+0xe>
    }
    while(px_num) {
 8023326:	e008      	b.n	802333a <lv_color_fill+0xee>
        *buf = color;
 8023328:	68fb      	ldr	r3, [r7, #12]
 802332a:	7a3a      	ldrb	r2, [r7, #8]
 802332c:	701a      	strb	r2, [r3, #0]
        buf++;
 802332e:	68fb      	ldr	r3, [r7, #12]
 8023330:	3301      	adds	r3, #1
 8023332:	60fb      	str	r3, [r7, #12]
        px_num--;
 8023334:	687b      	ldr	r3, [r7, #4]
 8023336:	3b01      	subs	r3, #1
 8023338:	607b      	str	r3, [r7, #4]
    while(px_num) {
 802333a:	687b      	ldr	r3, [r7, #4]
 802333c:	2b00      	cmp	r3, #0
 802333e:	d1f3      	bne.n	8023328 <lv_color_fill+0xdc>
    }
#endif
}
 8023340:	bf00      	nop
 8023342:	bf00      	nop
 8023344:	3714      	adds	r7, #20
 8023346:	46bd      	mov	sp, r7
 8023348:	f85d 7b04 	ldr.w	r7, [sp], #4
 802334c:	4770      	bx	lr
	...

08023350 <lv_palette_main>:
    color32.full = lv_color_to32(color);
    return lv_color_rgb_to_hsv(color32.ch.red, color32.ch.green, color32.ch.blue);
}

lv_color_t lv_palette_main(lv_palette_t p)
{
 8023350:	b580      	push	{r7, lr}
 8023352:	b082      	sub	sp, #8
 8023354:	af00      	add	r7, sp, #0
 8023356:	4603      	mov	r3, r0
 8023358:	71fb      	strb	r3, [r7, #7]
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 802335a:	79fb      	ldrb	r3, [r7, #7]
 802335c:	2b12      	cmp	r3, #18
 802335e:	d903      	bls.n	8023368 <lv_palette_main+0x18>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
 8023360:	f7ff ff6a 	bl	8023238 <lv_color_black>
 8023364:	4603      	mov	r3, r0
 8023366:	e002      	b.n	802336e <lv_palette_main+0x1e>
    }

    return colors[p];
 8023368:	79fb      	ldrb	r3, [r7, #7]
 802336a:	4a03      	ldr	r2, [pc, #12]	; (8023378 <lv_palette_main+0x28>)
 802336c:	5cd3      	ldrb	r3, [r2, r3]

}
 802336e:	4618      	mov	r0, r3
 8023370:	3708      	adds	r7, #8
 8023372:	46bd      	mov	sp, r7
 8023374:	bd80      	pop	{r7, pc}
 8023376:	bf00      	nop
 8023378:	0802fabc 	.word	0x0802fabc

0802337c <_lv_fs_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
 802337c:	b580      	push	{r7, lr}
 802337e:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 8023380:	2104      	movs	r1, #4
 8023382:	4802      	ldr	r0, [pc, #8]	; (802338c <_lv_fs_init+0x10>)
 8023384:	f000 fb19 	bl	80239ba <_lv_ll_init>
}
 8023388:	bf00      	nop
 802338a:	bd80      	pop	{r7, pc}
 802338c:	200008e0 	.word	0x200008e0

08023390 <lv_fs_open>:

    return drv->ready_cb(drv);
}

lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 8023390:	b580      	push	{r7, lr}
 8023392:	b088      	sub	sp, #32
 8023394:	af00      	add	r7, sp, #0
 8023396:	60f8      	str	r0, [r7, #12]
 8023398:	60b9      	str	r1, [r7, #8]
 802339a:	4613      	mov	r3, r2
 802339c:	71fb      	strb	r3, [r7, #7]
    if(path == NULL) {
 802339e:	68bb      	ldr	r3, [r7, #8]
 80233a0:	2b00      	cmp	r3, #0
 80233a2:	d101      	bne.n	80233a8 <lv_fs_open+0x18>
        LV_LOG_WARN("Can't open file: path is NULL");
        return LV_FS_RES_INV_PARAM;
 80233a4:	230b      	movs	r3, #11
 80233a6:	e05c      	b.n	8023462 <lv_fs_open+0xd2>
    }

    char letter = path[0];
 80233a8:	68bb      	ldr	r3, [r7, #8]
 80233aa:	781b      	ldrb	r3, [r3, #0]
 80233ac:	77fb      	strb	r3, [r7, #31]
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 80233ae:	7ffb      	ldrb	r3, [r7, #31]
 80233b0:	4618      	mov	r0, r3
 80233b2:	f000 fa9b 	bl	80238ec <lv_fs_get_drv>
 80233b6:	61b8      	str	r0, [r7, #24]

    if(drv == NULL) {
 80233b8:	69bb      	ldr	r3, [r7, #24]
 80233ba:	2b00      	cmp	r3, #0
 80233bc:	d101      	bne.n	80233c2 <lv_fs_open+0x32>
        LV_LOG_WARN("Can't open file (%s): unknown driver letter", path);
        return LV_FS_RES_NOT_EX;
 80233be:	2303      	movs	r3, #3
 80233c0:	e04f      	b.n	8023462 <lv_fs_open+0xd2>
    }

    if(drv->ready_cb) {
 80233c2:	69bb      	ldr	r3, [r7, #24]
 80233c4:	685b      	ldr	r3, [r3, #4]
 80233c6:	2b00      	cmp	r3, #0
 80233c8:	d00b      	beq.n	80233e2 <lv_fs_open+0x52>
        if(drv->ready_cb(drv) == false) {
 80233ca:	69bb      	ldr	r3, [r7, #24]
 80233cc:	685b      	ldr	r3, [r3, #4]
 80233ce:	69b8      	ldr	r0, [r7, #24]
 80233d0:	4798      	blx	r3
 80233d2:	4603      	mov	r3, r0
 80233d4:	f083 0301 	eor.w	r3, r3, #1
 80233d8:	b2db      	uxtb	r3, r3
 80233da:	2b00      	cmp	r3, #0
 80233dc:	d001      	beq.n	80233e2 <lv_fs_open+0x52>
            LV_LOG_WARN("Can't open file (%s): driver not ready", path);
            return LV_FS_RES_HW_ERR;
 80233de:	2301      	movs	r3, #1
 80233e0:	e03f      	b.n	8023462 <lv_fs_open+0xd2>
        }
    }

    if(drv->open_cb == NULL) {
 80233e2:	69bb      	ldr	r3, [r7, #24]
 80233e4:	689b      	ldr	r3, [r3, #8]
 80233e6:	2b00      	cmp	r3, #0
 80233e8:	d101      	bne.n	80233ee <lv_fs_open+0x5e>
        LV_LOG_WARN("Can't open file (%s): open function not exists", path);
        return LV_FS_RES_NOT_IMP;
 80233ea:	2309      	movs	r3, #9
 80233ec:	e039      	b.n	8023462 <lv_fs_open+0xd2>
    }

    const char * real_path = lv_fs_get_real_path(path);
 80233ee:	68b8      	ldr	r0, [r7, #8]
 80233f0:	f000 face 	bl	8023990 <lv_fs_get_real_path>
 80233f4:	6178      	str	r0, [r7, #20]
    void * file_d = drv->open_cb(drv, real_path, mode);
 80233f6:	69bb      	ldr	r3, [r7, #24]
 80233f8:	689b      	ldr	r3, [r3, #8]
 80233fa:	79fa      	ldrb	r2, [r7, #7]
 80233fc:	6979      	ldr	r1, [r7, #20]
 80233fe:	69b8      	ldr	r0, [r7, #24]
 8023400:	4798      	blx	r3
 8023402:	6138      	str	r0, [r7, #16]

    if(file_d == NULL || file_d == (void *)(-1)) {
 8023404:	693b      	ldr	r3, [r7, #16]
 8023406:	2b00      	cmp	r3, #0
 8023408:	d003      	beq.n	8023412 <lv_fs_open+0x82>
 802340a:	693b      	ldr	r3, [r7, #16]
 802340c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8023410:	d101      	bne.n	8023416 <lv_fs_open+0x86>
        return LV_FS_RES_UNKNOWN;
 8023412:	230c      	movs	r3, #12
 8023414:	e025      	b.n	8023462 <lv_fs_open+0xd2>
    }

    file_p->drv = drv;
 8023416:	68fb      	ldr	r3, [r7, #12]
 8023418:	69ba      	ldr	r2, [r7, #24]
 802341a:	605a      	str	r2, [r3, #4]
    file_p->file_d = file_d;
 802341c:	68fb      	ldr	r3, [r7, #12]
 802341e:	693a      	ldr	r2, [r7, #16]
 8023420:	601a      	str	r2, [r3, #0]

    if(drv->cache_size) {
 8023422:	69bb      	ldr	r3, [r7, #24]
 8023424:	885b      	ldrh	r3, [r3, #2]
 8023426:	2b00      	cmp	r3, #0
 8023428:	d01a      	beq.n	8023460 <lv_fs_open+0xd0>
        file_p->cache = lv_mem_alloc(sizeof(lv_fs_file_cache_t));
 802342a:	2010      	movs	r0, #16
 802342c:	f000 fd62 	bl	8023ef4 <lv_mem_alloc>
 8023430:	4602      	mov	r2, r0
 8023432:	68fb      	ldr	r3, [r7, #12]
 8023434:	609a      	str	r2, [r3, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 8023436:	68fb      	ldr	r3, [r7, #12]
 8023438:	689b      	ldr	r3, [r3, #8]
 802343a:	2b00      	cmp	r3, #0
 802343c:	d100      	bne.n	8023440 <lv_fs_open+0xb0>
 802343e:	e7fe      	b.n	802343e <lv_fs_open+0xae>
        lv_memset_00(file_p->cache, sizeof(lv_fs_file_cache_t));
 8023440:	68fb      	ldr	r3, [r7, #12]
 8023442:	689b      	ldr	r3, [r3, #8]
 8023444:	2110      	movs	r1, #16
 8023446:	4618      	mov	r0, r3
 8023448:	f001 f988 	bl	802475c <lv_memset_00>
        file_p->cache->start = UINT32_MAX;  /*Set an invalid range by default*/
 802344c:	68fb      	ldr	r3, [r7, #12]
 802344e:	689b      	ldr	r3, [r3, #8]
 8023450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023454:	601a      	str	r2, [r3, #0]
        file_p->cache->end = UINT32_MAX - 1;
 8023456:	68fb      	ldr	r3, [r7, #12]
 8023458:	689b      	ldr	r3, [r3, #8]
 802345a:	f06f 0201 	mvn.w	r2, #1
 802345e:	605a      	str	r2, [r3, #4]
    }

    return LV_FS_RES_OK;
 8023460:	2300      	movs	r3, #0
}
 8023462:	4618      	mov	r0, r3
 8023464:	3720      	adds	r7, #32
 8023466:	46bd      	mov	sp, r7
 8023468:	bd80      	pop	{r7, pc}

0802346a <lv_fs_close>:

lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 802346a:	b580      	push	{r7, lr}
 802346c:	b084      	sub	sp, #16
 802346e:	af00      	add	r7, sp, #0
 8023470:	6078      	str	r0, [r7, #4]
    if(file_p->drv == NULL) {
 8023472:	687b      	ldr	r3, [r7, #4]
 8023474:	685b      	ldr	r3, [r3, #4]
 8023476:	2b00      	cmp	r3, #0
 8023478:	d101      	bne.n	802347e <lv_fs_close+0x14>
        return LV_FS_RES_INV_PARAM;
 802347a:	230b      	movs	r3, #11
 802347c:	e034      	b.n	80234e8 <lv_fs_close+0x7e>
    }

    if(file_p->drv->close_cb == NULL) {
 802347e:	687b      	ldr	r3, [r7, #4]
 8023480:	685b      	ldr	r3, [r3, #4]
 8023482:	68db      	ldr	r3, [r3, #12]
 8023484:	2b00      	cmp	r3, #0
 8023486:	d101      	bne.n	802348c <lv_fs_close+0x22>
        return LV_FS_RES_NOT_IMP;
 8023488:	2309      	movs	r3, #9
 802348a:	e02d      	b.n	80234e8 <lv_fs_close+0x7e>
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 802348c:	687b      	ldr	r3, [r7, #4]
 802348e:	685b      	ldr	r3, [r3, #4]
 8023490:	68db      	ldr	r3, [r3, #12]
 8023492:	687a      	ldr	r2, [r7, #4]
 8023494:	6850      	ldr	r0, [r2, #4]
 8023496:	687a      	ldr	r2, [r7, #4]
 8023498:	6812      	ldr	r2, [r2, #0]
 802349a:	4611      	mov	r1, r2
 802349c:	4798      	blx	r3
 802349e:	4603      	mov	r3, r0
 80234a0:	73fb      	strb	r3, [r7, #15]

    if(file_p->drv->cache_size && file_p->cache) {
 80234a2:	687b      	ldr	r3, [r7, #4]
 80234a4:	685b      	ldr	r3, [r3, #4]
 80234a6:	885b      	ldrh	r3, [r3, #2]
 80234a8:	2b00      	cmp	r3, #0
 80234aa:	d013      	beq.n	80234d4 <lv_fs_close+0x6a>
 80234ac:	687b      	ldr	r3, [r7, #4]
 80234ae:	689b      	ldr	r3, [r3, #8]
 80234b0:	2b00      	cmp	r3, #0
 80234b2:	d00f      	beq.n	80234d4 <lv_fs_close+0x6a>
        if(file_p->cache->buffer) {
 80234b4:	687b      	ldr	r3, [r7, #4]
 80234b6:	689b      	ldr	r3, [r3, #8]
 80234b8:	68db      	ldr	r3, [r3, #12]
 80234ba:	2b00      	cmp	r3, #0
 80234bc:	d005      	beq.n	80234ca <lv_fs_close+0x60>
            lv_mem_free(file_p->cache->buffer);
 80234be:	687b      	ldr	r3, [r7, #4]
 80234c0:	689b      	ldr	r3, [r3, #8]
 80234c2:	68db      	ldr	r3, [r3, #12]
 80234c4:	4618      	mov	r0, r3
 80234c6:	f000 fd45 	bl	8023f54 <lv_mem_free>
        }

        lv_mem_free(file_p->cache);
 80234ca:	687b      	ldr	r3, [r7, #4]
 80234cc:	689b      	ldr	r3, [r3, #8]
 80234ce:	4618      	mov	r0, r3
 80234d0:	f000 fd40 	bl	8023f54 <lv_mem_free>
    }

    file_p->file_d = NULL;
 80234d4:	687b      	ldr	r3, [r7, #4]
 80234d6:	2200      	movs	r2, #0
 80234d8:	601a      	str	r2, [r3, #0]
    file_p->drv    = NULL;
 80234da:	687b      	ldr	r3, [r7, #4]
 80234dc:	2200      	movs	r2, #0
 80234de:	605a      	str	r2, [r3, #4]
    file_p->cache  = NULL;
 80234e0:	687b      	ldr	r3, [r7, #4]
 80234e2:	2200      	movs	r2, #0
 80234e4:	609a      	str	r2, [r3, #8]

    return res;
 80234e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80234e8:	4618      	mov	r0, r3
 80234ea:	3710      	adds	r7, #16
 80234ec:	46bd      	mov	sp, r7
 80234ee:	bd80      	pop	{r7, pc}

080234f0 <lv_fs_read_cached>:

static lv_fs_res_t lv_fs_read_cached(lv_fs_file_t * file_p, char * buf, uint32_t btr, uint32_t * br)
{
 80234f0:	b5b0      	push	{r4, r5, r7, lr}
 80234f2:	b090      	sub	sp, #64	; 0x40
 80234f4:	af02      	add	r7, sp, #8
 80234f6:	60f8      	str	r0, [r7, #12]
 80234f8:	60b9      	str	r1, [r7, #8]
 80234fa:	607a      	str	r2, [r7, #4]
 80234fc:	603b      	str	r3, [r7, #0]
    lv_fs_res_t res = LV_FS_RES_OK;
 80234fe:	2300      	movs	r3, #0
 8023500:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint32_t file_position = file_p->cache->file_position;
 8023504:	68fb      	ldr	r3, [r7, #12]
 8023506:	689b      	ldr	r3, [r3, #8]
 8023508:	689b      	ldr	r3, [r3, #8]
 802350a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t start = file_p->cache->start;
 802350c:	68fb      	ldr	r3, [r7, #12]
 802350e:	689b      	ldr	r3, [r3, #8]
 8023510:	681b      	ldr	r3, [r3, #0]
 8023512:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t end = file_p->cache->end;
 8023514:	68fb      	ldr	r3, [r7, #12]
 8023516:	689b      	ldr	r3, [r3, #8]
 8023518:	685b      	ldr	r3, [r3, #4]
 802351a:	627b      	str	r3, [r7, #36]	; 0x24
    char * buffer = file_p->cache->buffer;
 802351c:	68fb      	ldr	r3, [r7, #12]
 802351e:	689b      	ldr	r3, [r3, #8]
 8023520:	68db      	ldr	r3, [r3, #12]
 8023522:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t buffer_size = file_p->drv->cache_size;
 8023524:	68fb      	ldr	r3, [r7, #12]
 8023526:	685b      	ldr	r3, [r3, #4]
 8023528:	885b      	ldrh	r3, [r3, #2]
 802352a:	847b      	strh	r3, [r7, #34]	; 0x22

    if(start <= file_position && file_position < end) {
 802352c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023530:	429a      	cmp	r2, r3
 8023532:	f200 8082 	bhi.w	802363a <lv_fs_read_cached+0x14a>
 8023536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802353a:	429a      	cmp	r2, r3
 802353c:	d27d      	bcs.n	802363a <lv_fs_read_cached+0x14a>
        /* Data can be read from cache buffer */
        uint16_t buffer_offset = file_position - start;
 802353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023540:	b29a      	uxth	r2, r3
 8023542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023544:	b29b      	uxth	r3, r3
 8023546:	1ad3      	subs	r3, r2, r3
 8023548:	843b      	strh	r3, [r7, #32]
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 802354a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802354e:	1ad2      	subs	r2, r2, r3
 8023550:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8023552:	8c3b      	ldrh	r3, [r7, #32]
 8023554:	1acb      	subs	r3, r1, r3
 8023556:	4293      	cmp	r3, r2
 8023558:	bf28      	it	cs
 802355a:	4613      	movcs	r3, r2
 802355c:	61fb      	str	r3, [r7, #28]

        if(btr <= buffer_remaining_length) {
 802355e:	687a      	ldr	r2, [r7, #4]
 8023560:	69fb      	ldr	r3, [r7, #28]
 8023562:	429a      	cmp	r2, r3
 8023564:	d80b      	bhi.n	802357e <lv_fs_read_cached+0x8e>
            /*Data is in cache buffer, and buffer end not reached, no need to read from FS*/
            lv_memcpy(buf, buffer + buffer_offset, btr);
 8023566:	8c3b      	ldrh	r3, [r7, #32]
 8023568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802356a:	4413      	add	r3, r2
 802356c:	687a      	ldr	r2, [r7, #4]
 802356e:	4619      	mov	r1, r3
 8023570:	68b8      	ldr	r0, [r7, #8]
 8023572:	f000 fe4d 	bl	8024210 <lv_memcpy>
            *br = btr;
 8023576:	683b      	ldr	r3, [r7, #0]
 8023578:	687a      	ldr	r2, [r7, #4]
 802357a:	601a      	str	r2, [r3, #0]
    if(start <= file_position && file_position < end) {
 802357c:	e0b3      	b.n	80236e6 <lv_fs_read_cached+0x1f6>
        }
        else {
            /*First part of data is in cache buffer, but we need to read rest of data from FS*/
            lv_memcpy(buf, buffer + buffer_offset, buffer_remaining_length);
 802357e:	8c3b      	ldrh	r3, [r7, #32]
 8023580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023582:	4413      	add	r3, r2
 8023584:	69fa      	ldr	r2, [r7, #28]
 8023586:	4619      	mov	r1, r3
 8023588:	68b8      	ldr	r0, [r7, #8]
 802358a:	f000 fe41 	bl	8024210 <lv_memcpy>

            uint32_t bytes_read_to_buffer = 0;
 802358e:	2300      	movs	r3, #0
 8023590:	617b      	str	r3, [r7, #20]
            if(btr > buffer_size) {
 8023592:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023594:	687a      	ldr	r2, [r7, #4]
 8023596:	429a      	cmp	r2, r3
 8023598:	d916      	bls.n	80235c8 <lv_fs_read_cached+0xd8>
                /*If remaining data chuck is bigger than buffer size, then do not use cache, instead read it directly from FS*/
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 802359a:	68fb      	ldr	r3, [r7, #12]
 802359c:	685b      	ldr	r3, [r3, #4]
 802359e:	691c      	ldr	r4, [r3, #16]
 80235a0:	68fb      	ldr	r3, [r7, #12]
 80235a2:	6858      	ldr	r0, [r3, #4]
 80235a4:	68fb      	ldr	r3, [r7, #12]
 80235a6:	6819      	ldr	r1, [r3, #0]
 80235a8:	68ba      	ldr	r2, [r7, #8]
 80235aa:	69fb      	ldr	r3, [r7, #28]
 80235ac:	18d5      	adds	r5, r2, r3
 80235ae:	687a      	ldr	r2, [r7, #4]
 80235b0:	69fb      	ldr	r3, [r7, #28]
 80235b2:	1ad2      	subs	r2, r2, r3
 80235b4:	f107 0314 	add.w	r3, r7, #20
 80235b8:	9300      	str	r3, [sp, #0]
 80235ba:	4613      	mov	r3, r2
 80235bc:	462a      	mov	r2, r5
 80235be:	47a0      	blx	r4
 80235c0:	4603      	mov	r3, r0
 80235c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80235c6:	e02e      	b.n	8023626 <lv_fs_read_cached+0x136>
                                           btr - buffer_remaining_length, &bytes_read_to_buffer);
            }
            else {
                /*If remaining data chunk is smaller than buffer size, then read into cache buffer*/
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 80235c8:	68fb      	ldr	r3, [r7, #12]
 80235ca:	685b      	ldr	r3, [r3, #4]
 80235cc:	691c      	ldr	r4, [r3, #16]
 80235ce:	68fb      	ldr	r3, [r7, #12]
 80235d0:	6858      	ldr	r0, [r3, #4]
 80235d2:	68fb      	ldr	r3, [r7, #12]
 80235d4:	6819      	ldr	r1, [r3, #0]
 80235d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80235d8:	f107 0314 	add.w	r3, r7, #20
 80235dc:	9300      	str	r3, [sp, #0]
 80235de:	4613      	mov	r3, r2
 80235e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80235e2:	47a0      	blx	r4
 80235e4:	4603      	mov	r3, r0
 80235e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                file_p->cache->start = file_p->cache->end;
 80235ea:	68fb      	ldr	r3, [r7, #12]
 80235ec:	689a      	ldr	r2, [r3, #8]
 80235ee:	68fb      	ldr	r3, [r7, #12]
 80235f0:	689b      	ldr	r3, [r3, #8]
 80235f2:	6852      	ldr	r2, [r2, #4]
 80235f4:	601a      	str	r2, [r3, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 80235f6:	68fb      	ldr	r3, [r7, #12]
 80235f8:	689b      	ldr	r3, [r3, #8]
 80235fa:	6819      	ldr	r1, [r3, #0]
 80235fc:	697a      	ldr	r2, [r7, #20]
 80235fe:	68fb      	ldr	r3, [r7, #12]
 8023600:	689b      	ldr	r3, [r3, #8]
 8023602:	440a      	add	r2, r1
 8023604:	605a      	str	r2, [r3, #4]

                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 8023606:	687a      	ldr	r2, [r7, #4]
 8023608:	69fb      	ldr	r3, [r7, #28]
 802360a:	1ad2      	subs	r2, r2, r3
 802360c:	697b      	ldr	r3, [r7, #20]
 802360e:	4293      	cmp	r3, r2
 8023610:	bf28      	it	cs
 8023612:	4613      	movcs	r3, r2
 8023614:	837b      	strh	r3, [r7, #26]
                lv_memcpy(buf + buffer_remaining_length, buffer, data_chunk_remaining);
 8023616:	68ba      	ldr	r2, [r7, #8]
 8023618:	69fb      	ldr	r3, [r7, #28]
 802361a:	4413      	add	r3, r2
 802361c:	8b7a      	ldrh	r2, [r7, #26]
 802361e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8023620:	4618      	mov	r0, r3
 8023622:	f000 fdf5 	bl	8024210 <lv_memcpy>
            }
            *br = LV_MIN(buffer_remaining_length + bytes_read_to_buffer, btr);
 8023626:	697a      	ldr	r2, [r7, #20]
 8023628:	69fb      	ldr	r3, [r7, #28]
 802362a:	441a      	add	r2, r3
 802362c:	687b      	ldr	r3, [r7, #4]
 802362e:	429a      	cmp	r2, r3
 8023630:	bf28      	it	cs
 8023632:	461a      	movcs	r2, r3
 8023634:	683b      	ldr	r3, [r7, #0]
 8023636:	601a      	str	r2, [r3, #0]
    if(start <= file_position && file_position < end) {
 8023638:	e055      	b.n	80236e6 <lv_fs_read_cached+0x1f6>
        }
    }
    else {
        /*Data is not in cache buffer*/
        if(btr > buffer_size) {
 802363a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802363c:	687a      	ldr	r2, [r7, #4]
 802363e:	429a      	cmp	r2, r3
 8023640:	d90f      	bls.n	8023662 <lv_fs_read_cached+0x172>
            /*If bigger data is requested, then do not use cache, instead read it directly*/
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 8023642:	68fb      	ldr	r3, [r7, #12]
 8023644:	685b      	ldr	r3, [r3, #4]
 8023646:	691c      	ldr	r4, [r3, #16]
 8023648:	68fb      	ldr	r3, [r7, #12]
 802364a:	6858      	ldr	r0, [r3, #4]
 802364c:	68fb      	ldr	r3, [r7, #12]
 802364e:	6819      	ldr	r1, [r3, #0]
 8023650:	683b      	ldr	r3, [r7, #0]
 8023652:	9300      	str	r3, [sp, #0]
 8023654:	687b      	ldr	r3, [r7, #4]
 8023656:	68ba      	ldr	r2, [r7, #8]
 8023658:	47a0      	blx	r4
 802365a:	4603      	mov	r3, r0
 802365c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8023660:	e041      	b.n	80236e6 <lv_fs_read_cached+0x1f6>
        }
        else {
            /*If small data is requested, then read from FS into cache buffer*/
            if(buffer == NULL) {
 8023662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023664:	2b00      	cmp	r3, #0
 8023666:	d111      	bne.n	802368c <lv_fs_read_cached+0x19c>
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 8023668:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 802366a:	68fb      	ldr	r3, [r7, #12]
 802366c:	689c      	ldr	r4, [r3, #8]
 802366e:	4610      	mov	r0, r2
 8023670:	f000 fc40 	bl	8023ef4 <lv_mem_alloc>
 8023674:	4603      	mov	r3, r0
 8023676:	60e3      	str	r3, [r4, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 8023678:	68fb      	ldr	r3, [r7, #12]
 802367a:	689b      	ldr	r3, [r3, #8]
 802367c:	68db      	ldr	r3, [r3, #12]
 802367e:	2b00      	cmp	r3, #0
 8023680:	d100      	bne.n	8023684 <lv_fs_read_cached+0x194>
 8023682:	e7fe      	b.n	8023682 <lv_fs_read_cached+0x192>
                buffer = file_p->cache->buffer;
 8023684:	68fb      	ldr	r3, [r7, #12]
 8023686:	689b      	ldr	r3, [r3, #8]
 8023688:	68db      	ldr	r3, [r3, #12]
 802368a:	633b      	str	r3, [r7, #48]	; 0x30
            }

            uint32_t bytes_read_to_buffer = 0;
 802368c:	2300      	movs	r3, #0
 802368e:	613b      	str	r3, [r7, #16]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8023690:	68fb      	ldr	r3, [r7, #12]
 8023692:	685b      	ldr	r3, [r3, #4]
 8023694:	691c      	ldr	r4, [r3, #16]
 8023696:	68fb      	ldr	r3, [r7, #12]
 8023698:	6858      	ldr	r0, [r3, #4]
 802369a:	68fb      	ldr	r3, [r7, #12]
 802369c:	6819      	ldr	r1, [r3, #0]
 802369e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80236a0:	f107 0310 	add.w	r3, r7, #16
 80236a4:	9300      	str	r3, [sp, #0]
 80236a6:	4613      	mov	r3, r2
 80236a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80236aa:	47a0      	blx	r4
 80236ac:	4603      	mov	r3, r0
 80236ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            file_p->cache->start = file_position;
 80236b2:	68fb      	ldr	r3, [r7, #12]
 80236b4:	689b      	ldr	r3, [r3, #8]
 80236b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80236b8:	601a      	str	r2, [r3, #0]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 80236ba:	68fb      	ldr	r3, [r7, #12]
 80236bc:	689b      	ldr	r3, [r3, #8]
 80236be:	6819      	ldr	r1, [r3, #0]
 80236c0:	693a      	ldr	r2, [r7, #16]
 80236c2:	68fb      	ldr	r3, [r7, #12]
 80236c4:	689b      	ldr	r3, [r3, #8]
 80236c6:	440a      	add	r2, r1
 80236c8:	605a      	str	r2, [r3, #4]

            *br = LV_MIN(btr, bytes_read_to_buffer);
 80236ca:	693a      	ldr	r2, [r7, #16]
 80236cc:	687b      	ldr	r3, [r7, #4]
 80236ce:	429a      	cmp	r2, r3
 80236d0:	bf28      	it	cs
 80236d2:	461a      	movcs	r2, r3
 80236d4:	683b      	ldr	r3, [r7, #0]
 80236d6:	601a      	str	r2, [r3, #0]
            lv_memcpy(buf, buffer, *br);
 80236d8:	683b      	ldr	r3, [r7, #0]
 80236da:	681b      	ldr	r3, [r3, #0]
 80236dc:	461a      	mov	r2, r3
 80236de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80236e0:	68b8      	ldr	r0, [r7, #8]
 80236e2:	f000 fd95 	bl	8024210 <lv_memcpy>

        }
    }

    if(res == LV_FS_RES_OK) {
 80236e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80236ea:	2b00      	cmp	r3, #0
 80236ec:	d108      	bne.n	8023700 <lv_fs_read_cached+0x210>
        file_p->cache->file_position += *br;
 80236ee:	68fb      	ldr	r3, [r7, #12]
 80236f0:	689b      	ldr	r3, [r3, #8]
 80236f2:	6899      	ldr	r1, [r3, #8]
 80236f4:	683b      	ldr	r3, [r7, #0]
 80236f6:	681a      	ldr	r2, [r3, #0]
 80236f8:	68fb      	ldr	r3, [r7, #12]
 80236fa:	689b      	ldr	r3, [r3, #8]
 80236fc:	440a      	add	r2, r1
 80236fe:	609a      	str	r2, [r3, #8]
    }

    return res;
 8023700:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8023704:	4618      	mov	r0, r3
 8023706:	3738      	adds	r7, #56	; 0x38
 8023708:	46bd      	mov	sp, r7
 802370a:	bdb0      	pop	{r4, r5, r7, pc}

0802370c <lv_fs_read>:

lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 802370c:	b590      	push	{r4, r7, lr}
 802370e:	b089      	sub	sp, #36	; 0x24
 8023710:	af02      	add	r7, sp, #8
 8023712:	60f8      	str	r0, [r7, #12]
 8023714:	60b9      	str	r1, [r7, #8]
 8023716:	607a      	str	r2, [r7, #4]
 8023718:	603b      	str	r3, [r7, #0]
    if(br != NULL) *br = 0;
 802371a:	683b      	ldr	r3, [r7, #0]
 802371c:	2b00      	cmp	r3, #0
 802371e:	d002      	beq.n	8023726 <lv_fs_read+0x1a>
 8023720:	683b      	ldr	r3, [r7, #0]
 8023722:	2200      	movs	r2, #0
 8023724:	601a      	str	r2, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8023726:	68fb      	ldr	r3, [r7, #12]
 8023728:	685b      	ldr	r3, [r3, #4]
 802372a:	2b00      	cmp	r3, #0
 802372c:	d101      	bne.n	8023732 <lv_fs_read+0x26>
 802372e:	230b      	movs	r3, #11
 8023730:	e02d      	b.n	802378e <lv_fs_read+0x82>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8023732:	68fb      	ldr	r3, [r7, #12]
 8023734:	685b      	ldr	r3, [r3, #4]
 8023736:	691b      	ldr	r3, [r3, #16]
 8023738:	2b00      	cmp	r3, #0
 802373a:	d101      	bne.n	8023740 <lv_fs_read+0x34>
 802373c:	2309      	movs	r3, #9
 802373e:	e026      	b.n	802378e <lv_fs_read+0x82>

    uint32_t br_tmp = 0;
 8023740:	2300      	movs	r3, #0
 8023742:	613b      	str	r3, [r7, #16]
    lv_fs_res_t res;

    if(file_p->drv->cache_size) {
 8023744:	68fb      	ldr	r3, [r7, #12]
 8023746:	685b      	ldr	r3, [r3, #4]
 8023748:	885b      	ldrh	r3, [r3, #2]
 802374a:	2b00      	cmp	r3, #0
 802374c:	d009      	beq.n	8023762 <lv_fs_read+0x56>
        res = lv_fs_read_cached(file_p, (char *)buf, btr, &br_tmp);
 802374e:	f107 0310 	add.w	r3, r7, #16
 8023752:	687a      	ldr	r2, [r7, #4]
 8023754:	68b9      	ldr	r1, [r7, #8]
 8023756:	68f8      	ldr	r0, [r7, #12]
 8023758:	f7ff feca 	bl	80234f0 <lv_fs_read_cached>
 802375c:	4603      	mov	r3, r0
 802375e:	75fb      	strb	r3, [r7, #23]
 8023760:	e00e      	b.n	8023780 <lv_fs_read+0x74>
    }
    else {
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 8023762:	68fb      	ldr	r3, [r7, #12]
 8023764:	685b      	ldr	r3, [r3, #4]
 8023766:	691c      	ldr	r4, [r3, #16]
 8023768:	68fb      	ldr	r3, [r7, #12]
 802376a:	6858      	ldr	r0, [r3, #4]
 802376c:	68fb      	ldr	r3, [r7, #12]
 802376e:	6819      	ldr	r1, [r3, #0]
 8023770:	f107 0310 	add.w	r3, r7, #16
 8023774:	9300      	str	r3, [sp, #0]
 8023776:	687b      	ldr	r3, [r7, #4]
 8023778:	68ba      	ldr	r2, [r7, #8]
 802377a:	47a0      	blx	r4
 802377c:	4603      	mov	r3, r0
 802377e:	75fb      	strb	r3, [r7, #23]
    }

    if(br != NULL) *br = br_tmp;
 8023780:	683b      	ldr	r3, [r7, #0]
 8023782:	2b00      	cmp	r3, #0
 8023784:	d002      	beq.n	802378c <lv_fs_read+0x80>
 8023786:	693a      	ldr	r2, [r7, #16]
 8023788:	683b      	ldr	r3, [r7, #0]
 802378a:	601a      	str	r2, [r3, #0]

    return res;
 802378c:	7dfb      	ldrb	r3, [r7, #23]
}
 802378e:	4618      	mov	r0, r3
 8023790:	371c      	adds	r7, #28
 8023792:	46bd      	mov	sp, r7
 8023794:	bd90      	pop	{r4, r7, pc}

08023796 <lv_fs_seek>:

    return res;
}

lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos, lv_fs_whence_t whence)
{
 8023796:	b590      	push	{r4, r7, lr}
 8023798:	b087      	sub	sp, #28
 802379a:	af00      	add	r7, sp, #0
 802379c:	60f8      	str	r0, [r7, #12]
 802379e:	60b9      	str	r1, [r7, #8]
 80237a0:	4613      	mov	r3, r2
 80237a2:	71fb      	strb	r3, [r7, #7]
    if(file_p->drv == NULL) {
 80237a4:	68fb      	ldr	r3, [r7, #12]
 80237a6:	685b      	ldr	r3, [r3, #4]
 80237a8:	2b00      	cmp	r3, #0
 80237aa:	d101      	bne.n	80237b0 <lv_fs_seek+0x1a>
        return LV_FS_RES_INV_PARAM;
 80237ac:	230b      	movs	r3, #11
 80237ae:	e098      	b.n	80238e2 <lv_fs_seek+0x14c>
    }

    if(file_p->drv->seek_cb == NULL) {
 80237b0:	68fb      	ldr	r3, [r7, #12]
 80237b2:	685b      	ldr	r3, [r3, #4]
 80237b4:	699b      	ldr	r3, [r3, #24]
 80237b6:	2b00      	cmp	r3, #0
 80237b8:	d101      	bne.n	80237be <lv_fs_seek+0x28>
        return LV_FS_RES_NOT_IMP;
 80237ba:	2309      	movs	r3, #9
 80237bc:	e091      	b.n	80238e2 <lv_fs_seek+0x14c>
    }

    lv_fs_res_t res = LV_FS_RES_OK;
 80237be:	2300      	movs	r3, #0
 80237c0:	75fb      	strb	r3, [r7, #23]
    if(file_p->drv->cache_size) {
 80237c2:	68fb      	ldr	r3, [r7, #12]
 80237c4:	685b      	ldr	r3, [r3, #4]
 80237c6:	885b      	ldrh	r3, [r3, #2]
 80237c8:	2b00      	cmp	r3, #0
 80237ca:	d077      	beq.n	80238bc <lv_fs_seek+0x126>
        switch(whence) {
 80237cc:	79fb      	ldrb	r3, [r7, #7]
 80237ce:	2b02      	cmp	r3, #2
 80237d0:	d051      	beq.n	8023876 <lv_fs_seek+0xe0>
 80237d2:	2b02      	cmp	r3, #2
 80237d4:	f300 8084 	bgt.w	80238e0 <lv_fs_seek+0x14a>
 80237d8:	2b00      	cmp	r3, #0
 80237da:	d002      	beq.n	80237e2 <lv_fs_seek+0x4c>
 80237dc:	2b01      	cmp	r3, #1
 80237de:	d023      	beq.n	8023828 <lv_fs_seek+0x92>
 80237e0:	e07e      	b.n	80238e0 <lv_fs_seek+0x14a>
            case LV_FS_SEEK_SET: {
                    file_p->cache->file_position = pos;
 80237e2:	68fb      	ldr	r3, [r7, #12]
 80237e4:	689b      	ldr	r3, [r3, #8]
 80237e6:	68ba      	ldr	r2, [r7, #8]
 80237e8:	609a      	str	r2, [r3, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 80237ea:	68fb      	ldr	r3, [r7, #12]
 80237ec:	689b      	ldr	r3, [r3, #8]
 80237ee:	689a      	ldr	r2, [r3, #8]
 80237f0:	68fb      	ldr	r3, [r7, #12]
 80237f2:	689b      	ldr	r3, [r3, #8]
 80237f4:	681b      	ldr	r3, [r3, #0]
 80237f6:	429a      	cmp	r2, r3
 80237f8:	d307      	bcc.n	802380a <lv_fs_seek+0x74>
 80237fa:	68fb      	ldr	r3, [r7, #12]
 80237fc:	689b      	ldr	r3, [r3, #8]
 80237fe:	689a      	ldr	r2, [r3, #8]
 8023800:	68fb      	ldr	r3, [r7, #12]
 8023802:	689b      	ldr	r3, [r3, #8]
 8023804:	685b      	ldr	r3, [r3, #4]
 8023806:	429a      	cmp	r2, r3
 8023808:	d965      	bls.n	80238d6 <lv_fs_seek+0x140>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 802380a:	68fb      	ldr	r3, [r7, #12]
 802380c:	685b      	ldr	r3, [r3, #4]
 802380e:	699c      	ldr	r4, [r3, #24]
 8023810:	68fb      	ldr	r3, [r7, #12]
 8023812:	6858      	ldr	r0, [r3, #4]
 8023814:	68fb      	ldr	r3, [r7, #12]
 8023816:	6819      	ldr	r1, [r3, #0]
 8023818:	68fb      	ldr	r3, [r7, #12]
 802381a:	689b      	ldr	r3, [r3, #8]
 802381c:	689a      	ldr	r2, [r3, #8]
 802381e:	2300      	movs	r3, #0
 8023820:	47a0      	blx	r4
 8023822:	4603      	mov	r3, r0
 8023824:	75fb      	strb	r3, [r7, #23]
                    }

                    break;
 8023826:	e056      	b.n	80238d6 <lv_fs_seek+0x140>
                }
            case LV_FS_SEEK_CUR: {
                    file_p->cache->file_position += pos;
 8023828:	68fb      	ldr	r3, [r7, #12]
 802382a:	689b      	ldr	r3, [r3, #8]
 802382c:	6899      	ldr	r1, [r3, #8]
 802382e:	68fb      	ldr	r3, [r7, #12]
 8023830:	689b      	ldr	r3, [r3, #8]
 8023832:	68ba      	ldr	r2, [r7, #8]
 8023834:	440a      	add	r2, r1
 8023836:	609a      	str	r2, [r3, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8023838:	68fb      	ldr	r3, [r7, #12]
 802383a:	689b      	ldr	r3, [r3, #8]
 802383c:	689a      	ldr	r2, [r3, #8]
 802383e:	68fb      	ldr	r3, [r7, #12]
 8023840:	689b      	ldr	r3, [r3, #8]
 8023842:	681b      	ldr	r3, [r3, #0]
 8023844:	429a      	cmp	r2, r3
 8023846:	d307      	bcc.n	8023858 <lv_fs_seek+0xc2>
 8023848:	68fb      	ldr	r3, [r7, #12]
 802384a:	689b      	ldr	r3, [r3, #8]
 802384c:	689a      	ldr	r2, [r3, #8]
 802384e:	68fb      	ldr	r3, [r7, #12]
 8023850:	689b      	ldr	r3, [r3, #8]
 8023852:	685b      	ldr	r3, [r3, #4]
 8023854:	429a      	cmp	r2, r3
 8023856:	d940      	bls.n	80238da <lv_fs_seek+0x144>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8023858:	68fb      	ldr	r3, [r7, #12]
 802385a:	685b      	ldr	r3, [r3, #4]
 802385c:	699c      	ldr	r4, [r3, #24]
 802385e:	68fb      	ldr	r3, [r7, #12]
 8023860:	6858      	ldr	r0, [r3, #4]
 8023862:	68fb      	ldr	r3, [r7, #12]
 8023864:	6819      	ldr	r1, [r3, #0]
 8023866:	68fb      	ldr	r3, [r7, #12]
 8023868:	689b      	ldr	r3, [r3, #8]
 802386a:	689a      	ldr	r2, [r3, #8]
 802386c:	2300      	movs	r3, #0
 802386e:	47a0      	blx	r4
 8023870:	4603      	mov	r3, r0
 8023872:	75fb      	strb	r3, [r7, #23]
                    }

                    break;
 8023874:	e031      	b.n	80238da <lv_fs_seek+0x144>
                }
            case LV_FS_SEEK_END: {
                    /*Because we don't know the file size, we do a little trick: do a FS seek, then get new file position from FS*/
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8023876:	68fb      	ldr	r3, [r7, #12]
 8023878:	685b      	ldr	r3, [r3, #4]
 802387a:	699c      	ldr	r4, [r3, #24]
 802387c:	68fb      	ldr	r3, [r7, #12]
 802387e:	6858      	ldr	r0, [r3, #4]
 8023880:	68fb      	ldr	r3, [r7, #12]
 8023882:	6819      	ldr	r1, [r3, #0]
 8023884:	79fb      	ldrb	r3, [r7, #7]
 8023886:	68ba      	ldr	r2, [r7, #8]
 8023888:	47a0      	blx	r4
 802388a:	4603      	mov	r3, r0
 802388c:	75fb      	strb	r3, [r7, #23]
                    if(res == LV_FS_RES_OK) {
 802388e:	7dfb      	ldrb	r3, [r7, #23]
 8023890:	2b00      	cmp	r3, #0
 8023892:	d124      	bne.n	80238de <lv_fs_seek+0x148>
                        uint32_t tmp_position;
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 8023894:	68fb      	ldr	r3, [r7, #12]
 8023896:	685b      	ldr	r3, [r3, #4]
 8023898:	69db      	ldr	r3, [r3, #28]
 802389a:	68fa      	ldr	r2, [r7, #12]
 802389c:	6850      	ldr	r0, [r2, #4]
 802389e:	68fa      	ldr	r2, [r7, #12]
 80238a0:	6811      	ldr	r1, [r2, #0]
 80238a2:	f107 0210 	add.w	r2, r7, #16
 80238a6:	4798      	blx	r3
 80238a8:	4603      	mov	r3, r0
 80238aa:	75fb      	strb	r3, [r7, #23]

                        if(res == LV_FS_RES_OK) {
 80238ac:	7dfb      	ldrb	r3, [r7, #23]
 80238ae:	2b00      	cmp	r3, #0
 80238b0:	d115      	bne.n	80238de <lv_fs_seek+0x148>
                            file_p->cache->file_position = tmp_position;
 80238b2:	68fb      	ldr	r3, [r7, #12]
 80238b4:	689b      	ldr	r3, [r3, #8]
 80238b6:	693a      	ldr	r2, [r7, #16]
 80238b8:	609a      	str	r2, [r3, #8]
                        }
                    }
                    break;
 80238ba:	e010      	b.n	80238de <lv_fs_seek+0x148>
                }
        }
    }
    else {
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 80238bc:	68fb      	ldr	r3, [r7, #12]
 80238be:	685b      	ldr	r3, [r3, #4]
 80238c0:	699c      	ldr	r4, [r3, #24]
 80238c2:	68fb      	ldr	r3, [r7, #12]
 80238c4:	6858      	ldr	r0, [r3, #4]
 80238c6:	68fb      	ldr	r3, [r7, #12]
 80238c8:	6819      	ldr	r1, [r3, #0]
 80238ca:	79fb      	ldrb	r3, [r7, #7]
 80238cc:	68ba      	ldr	r2, [r7, #8]
 80238ce:	47a0      	blx	r4
 80238d0:	4603      	mov	r3, r0
 80238d2:	75fb      	strb	r3, [r7, #23]
 80238d4:	e004      	b.n	80238e0 <lv_fs_seek+0x14a>
                    break;
 80238d6:	bf00      	nop
 80238d8:	e002      	b.n	80238e0 <lv_fs_seek+0x14a>
                    break;
 80238da:	bf00      	nop
 80238dc:	e000      	b.n	80238e0 <lv_fs_seek+0x14a>
                    break;
 80238de:	bf00      	nop
    }

    return res;
 80238e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80238e2:	4618      	mov	r0, r3
 80238e4:	371c      	adds	r7, #28
 80238e6:	46bd      	mov	sp, r7
 80238e8:	bd90      	pop	{r4, r7, pc}
	...

080238ec <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 80238ec:	b580      	push	{r7, lr}
 80238ee:	b084      	sub	sp, #16
 80238f0:	af00      	add	r7, sp, #0
 80238f2:	4603      	mov	r3, r0
 80238f4:	71fb      	strb	r3, [r7, #7]
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 80238f6:	480d      	ldr	r0, [pc, #52]	; (802392c <lv_fs_get_drv+0x40>)
 80238f8:	f000 f93d 	bl	8023b76 <_lv_ll_get_head>
 80238fc:	60f8      	str	r0, [r7, #12]
 80238fe:	e00d      	b.n	802391c <lv_fs_get_drv+0x30>
        if((*drv)->letter == letter) {
 8023900:	68fb      	ldr	r3, [r7, #12]
 8023902:	681b      	ldr	r3, [r3, #0]
 8023904:	781b      	ldrb	r3, [r3, #0]
 8023906:	79fa      	ldrb	r2, [r7, #7]
 8023908:	429a      	cmp	r2, r3
 802390a:	d102      	bne.n	8023912 <lv_fs_get_drv+0x26>
            return *drv;
 802390c:	68fb      	ldr	r3, [r7, #12]
 802390e:	681b      	ldr	r3, [r3, #0]
 8023910:	e008      	b.n	8023924 <lv_fs_get_drv+0x38>
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8023912:	68f9      	ldr	r1, [r7, #12]
 8023914:	4805      	ldr	r0, [pc, #20]	; (802392c <lv_fs_get_drv+0x40>)
 8023916:	f000 f950 	bl	8023bba <_lv_ll_get_next>
 802391a:	60f8      	str	r0, [r7, #12]
 802391c:	68fb      	ldr	r3, [r7, #12]
 802391e:	2b00      	cmp	r3, #0
 8023920:	d1ee      	bne.n	8023900 <lv_fs_get_drv+0x14>
        }
    }

    return NULL;
 8023922:	2300      	movs	r3, #0
}
 8023924:	4618      	mov	r0, r3
 8023926:	3710      	adds	r7, #16
 8023928:	46bd      	mov	sp, r7
 802392a:	bd80      	pop	{r7, pc}
 802392c:	200008e0 	.word	0x200008e0

08023930 <lv_fs_get_ext>:

    return buf;
}

const char * lv_fs_get_ext(const char * fn)
{
 8023930:	b580      	push	{r7, lr}
 8023932:	b084      	sub	sp, #16
 8023934:	af00      	add	r7, sp, #0
 8023936:	6078      	str	r0, [r7, #4]
    size_t i;
    for(i = strlen(fn); i > 0; i--) {
 8023938:	6878      	ldr	r0, [r7, #4]
 802393a:	f7dc fc87 	bl	800024c <strlen>
 802393e:	60f8      	str	r0, [r7, #12]
 8023940:	e01b      	b.n	802397a <lv_fs_get_ext+0x4a>
        if(fn[i] == '.') {
 8023942:	687a      	ldr	r2, [r7, #4]
 8023944:	68fb      	ldr	r3, [r7, #12]
 8023946:	4413      	add	r3, r2
 8023948:	781b      	ldrb	r3, [r3, #0]
 802394a:	2b2e      	cmp	r3, #46	; 0x2e
 802394c:	d104      	bne.n	8023958 <lv_fs_get_ext+0x28>
            return &fn[i + 1];
 802394e:	68fb      	ldr	r3, [r7, #12]
 8023950:	3301      	adds	r3, #1
 8023952:	687a      	ldr	r2, [r7, #4]
 8023954:	4413      	add	r3, r2
 8023956:	e014      	b.n	8023982 <lv_fs_get_ext+0x52>
        }
        else if(fn[i] == '/' || fn[i] == '\\') {
 8023958:	687a      	ldr	r2, [r7, #4]
 802395a:	68fb      	ldr	r3, [r7, #12]
 802395c:	4413      	add	r3, r2
 802395e:	781b      	ldrb	r3, [r3, #0]
 8023960:	2b2f      	cmp	r3, #47	; 0x2f
 8023962:	d005      	beq.n	8023970 <lv_fs_get_ext+0x40>
 8023964:	687a      	ldr	r2, [r7, #4]
 8023966:	68fb      	ldr	r3, [r7, #12]
 8023968:	4413      	add	r3, r2
 802396a:	781b      	ldrb	r3, [r3, #0]
 802396c:	2b5c      	cmp	r3, #92	; 0x5c
 802396e:	d101      	bne.n	8023974 <lv_fs_get_ext+0x44>
            return ""; /*No extension if a '\' or '/' found*/
 8023970:	4b06      	ldr	r3, [pc, #24]	; (802398c <lv_fs_get_ext+0x5c>)
 8023972:	e006      	b.n	8023982 <lv_fs_get_ext+0x52>
    for(i = strlen(fn); i > 0; i--) {
 8023974:	68fb      	ldr	r3, [r7, #12]
 8023976:	3b01      	subs	r3, #1
 8023978:	60fb      	str	r3, [r7, #12]
 802397a:	68fb      	ldr	r3, [r7, #12]
 802397c:	2b00      	cmp	r3, #0
 802397e:	d1e0      	bne.n	8023942 <lv_fs_get_ext+0x12>
        }
    }

    return ""; /*Empty string if no '.' in the file name.*/
 8023980:	4b02      	ldr	r3, [pc, #8]	; (802398c <lv_fs_get_ext+0x5c>)
}
 8023982:	4618      	mov	r0, r3
 8023984:	3710      	adds	r7, #16
 8023986:	46bd      	mov	sp, r7
 8023988:	bd80      	pop	{r7, pc}
 802398a:	bf00      	nop
 802398c:	08028904 	.word	0x08028904

08023990 <lv_fs_get_real_path>:
 * Skip the driver letter and the possible : after the letter
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 8023990:	b480      	push	{r7}
 8023992:	b083      	sub	sp, #12
 8023994:	af00      	add	r7, sp, #0
 8023996:	6078      	str	r0, [r7, #4]
    path++; /*Ignore the driver letter*/
 8023998:	687b      	ldr	r3, [r7, #4]
 802399a:	3301      	adds	r3, #1
 802399c:	607b      	str	r3, [r7, #4]
    if(*path == ':') path++;
 802399e:	687b      	ldr	r3, [r7, #4]
 80239a0:	781b      	ldrb	r3, [r3, #0]
 80239a2:	2b3a      	cmp	r3, #58	; 0x3a
 80239a4:	d102      	bne.n	80239ac <lv_fs_get_real_path+0x1c>
 80239a6:	687b      	ldr	r3, [r7, #4]
 80239a8:	3301      	adds	r3, #1
 80239aa:	607b      	str	r3, [r7, #4]

    return path;
 80239ac:	687b      	ldr	r3, [r7, #4]
}
 80239ae:	4618      	mov	r0, r3
 80239b0:	370c      	adds	r7, #12
 80239b2:	46bd      	mov	sp, r7
 80239b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239b8:	4770      	bx	lr

080239ba <_lv_ll_init>:
 * Initialize linked list
 * @param ll_p pointer to lv_ll_t variable
 * @param node_size the size of 1 node in bytes
 */
void _lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
 80239ba:	b480      	push	{r7}
 80239bc:	b083      	sub	sp, #12
 80239be:	af00      	add	r7, sp, #0
 80239c0:	6078      	str	r0, [r7, #4]
 80239c2:	6039      	str	r1, [r7, #0]
    ll_p->head = NULL;
 80239c4:	687b      	ldr	r3, [r7, #4]
 80239c6:	2200      	movs	r2, #0
 80239c8:	605a      	str	r2, [r3, #4]
    ll_p->tail = NULL;
 80239ca:	687b      	ldr	r3, [r7, #4]
 80239cc:	2200      	movs	r2, #0
 80239ce:	609a      	str	r2, [r3, #8]
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    node_size = (node_size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    node_size = (node_size + 3) & (~0x3);
 80239d0:	683b      	ldr	r3, [r7, #0]
 80239d2:	3303      	adds	r3, #3
 80239d4:	f023 0303 	bic.w	r3, r3, #3
 80239d8:	603b      	str	r3, [r7, #0]
#endif

    ll_p->n_size = node_size;
 80239da:	687b      	ldr	r3, [r7, #4]
 80239dc:	683a      	ldr	r2, [r7, #0]
 80239de:	601a      	str	r2, [r3, #0]
}
 80239e0:	bf00      	nop
 80239e2:	370c      	adds	r7, #12
 80239e4:	46bd      	mov	sp, r7
 80239e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239ea:	4770      	bx	lr

080239ec <_lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * _lv_ll_ins_head(lv_ll_t * ll_p)
{
 80239ec:	b580      	push	{r7, lr}
 80239ee:	b084      	sub	sp, #16
 80239f0:	af00      	add	r7, sp, #0
 80239f2:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80239f4:	687b      	ldr	r3, [r7, #4]
 80239f6:	681b      	ldr	r3, [r3, #0]
 80239f8:	3308      	adds	r3, #8
 80239fa:	4618      	mov	r0, r3
 80239fc:	f000 fa7a 	bl	8023ef4 <lv_mem_alloc>
 8023a00:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 8023a02:	68fb      	ldr	r3, [r7, #12]
 8023a04:	2b00      	cmp	r3, #0
 8023a06:	d020      	beq.n	8023a4a <_lv_ll_ins_head+0x5e>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 8023a08:	2200      	movs	r2, #0
 8023a0a:	68f9      	ldr	r1, [r7, #12]
 8023a0c:	6878      	ldr	r0, [r7, #4]
 8023a0e:	f000 f917 	bl	8023c40 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8023a12:	687b      	ldr	r3, [r7, #4]
 8023a14:	685b      	ldr	r3, [r3, #4]
 8023a16:	461a      	mov	r2, r3
 8023a18:	68f9      	ldr	r1, [r7, #12]
 8023a1a:	6878      	ldr	r0, [r7, #4]
 8023a1c:	f000 f92f 	bl	8023c7e <node_set_next>

        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8023a20:	687b      	ldr	r3, [r7, #4]
 8023a22:	685b      	ldr	r3, [r3, #4]
 8023a24:	2b00      	cmp	r3, #0
 8023a26:	d006      	beq.n	8023a36 <_lv_ll_ins_head+0x4a>
            node_set_prev(ll_p, ll_p->head, n_new);
 8023a28:	687b      	ldr	r3, [r7, #4]
 8023a2a:	685b      	ldr	r3, [r3, #4]
 8023a2c:	68fa      	ldr	r2, [r7, #12]
 8023a2e:	4619      	mov	r1, r3
 8023a30:	6878      	ldr	r0, [r7, #4]
 8023a32:	f000 f905 	bl	8023c40 <node_set_prev>
        }

        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8023a36:	687b      	ldr	r3, [r7, #4]
 8023a38:	68fa      	ldr	r2, [r7, #12]
 8023a3a:	605a      	str	r2, [r3, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8023a3c:	687b      	ldr	r3, [r7, #4]
 8023a3e:	689b      	ldr	r3, [r3, #8]
 8023a40:	2b00      	cmp	r3, #0
 8023a42:	d102      	bne.n	8023a4a <_lv_ll_ins_head+0x5e>
            ll_p->tail = n_new;
 8023a44:	687b      	ldr	r3, [r7, #4]
 8023a46:	68fa      	ldr	r2, [r7, #12]
 8023a48:	609a      	str	r2, [r3, #8]
        }
    }

    return n_new;
 8023a4a:	68fb      	ldr	r3, [r7, #12]
}
 8023a4c:	4618      	mov	r0, r3
 8023a4e:	3710      	adds	r7, #16
 8023a50:	46bd      	mov	sp, r7
 8023a52:	bd80      	pop	{r7, pc}

08023a54 <_lv_ll_ins_tail>:
 * Add a new tail to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new tail
 */
void * _lv_ll_ins_tail(lv_ll_t * ll_p)
{
 8023a54:	b580      	push	{r7, lr}
 8023a56:	b084      	sub	sp, #16
 8023a58:	af00      	add	r7, sp, #0
 8023a5a:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8023a5c:	687b      	ldr	r3, [r7, #4]
 8023a5e:	681b      	ldr	r3, [r3, #0]
 8023a60:	3308      	adds	r3, #8
 8023a62:	4618      	mov	r0, r3
 8023a64:	f000 fa46 	bl	8023ef4 <lv_mem_alloc>
 8023a68:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 8023a6a:	68fb      	ldr	r3, [r7, #12]
 8023a6c:	2b00      	cmp	r3, #0
 8023a6e:	d020      	beq.n	8023ab2 <_lv_ll_ins_tail+0x5e>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 8023a70:	2200      	movs	r2, #0
 8023a72:	68f9      	ldr	r1, [r7, #12]
 8023a74:	6878      	ldr	r0, [r7, #4]
 8023a76:	f000 f902 	bl	8023c7e <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 8023a7a:	687b      	ldr	r3, [r7, #4]
 8023a7c:	689b      	ldr	r3, [r3, #8]
 8023a7e:	461a      	mov	r2, r3
 8023a80:	68f9      	ldr	r1, [r7, #12]
 8023a82:	6878      	ldr	r0, [r7, #4]
 8023a84:	f000 f8dc 	bl	8023c40 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8023a88:	687b      	ldr	r3, [r7, #4]
 8023a8a:	689b      	ldr	r3, [r3, #8]
 8023a8c:	2b00      	cmp	r3, #0
 8023a8e:	d006      	beq.n	8023a9e <_lv_ll_ins_tail+0x4a>
            node_set_next(ll_p, ll_p->tail, n_new);
 8023a90:	687b      	ldr	r3, [r7, #4]
 8023a92:	689b      	ldr	r3, [r3, #8]
 8023a94:	68fa      	ldr	r2, [r7, #12]
 8023a96:	4619      	mov	r1, r3
 8023a98:	6878      	ldr	r0, [r7, #4]
 8023a9a:	f000 f8f0 	bl	8023c7e <node_set_next>
        }

        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 8023a9e:	687b      	ldr	r3, [r7, #4]
 8023aa0:	68fa      	ldr	r2, [r7, #12]
 8023aa2:	609a      	str	r2, [r3, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8023aa4:	687b      	ldr	r3, [r7, #4]
 8023aa6:	685b      	ldr	r3, [r3, #4]
 8023aa8:	2b00      	cmp	r3, #0
 8023aaa:	d102      	bne.n	8023ab2 <_lv_ll_ins_tail+0x5e>
            ll_p->head = n_new;
 8023aac:	687b      	ldr	r3, [r7, #4]
 8023aae:	68fa      	ldr	r2, [r7, #12]
 8023ab0:	605a      	str	r2, [r3, #4]
        }
    }

    return n_new;
 8023ab2:	68fb      	ldr	r3, [r7, #12]
}
 8023ab4:	4618      	mov	r0, r3
 8023ab6:	3710      	adds	r7, #16
 8023ab8:	46bd      	mov	sp, r7
 8023aba:	bd80      	pop	{r7, pc}

08023abc <_lv_ll_remove>:
 * It does not free the memory of node.
 * @param ll_p pointer to the linked list of 'node_p'
 * @param node_p pointer to node in 'll_p' linked list
 */
void _lv_ll_remove(lv_ll_t * ll_p, void * node_p)
{
 8023abc:	b580      	push	{r7, lr}
 8023abe:	b084      	sub	sp, #16
 8023ac0:	af00      	add	r7, sp, #0
 8023ac2:	6078      	str	r0, [r7, #4]
 8023ac4:	6039      	str	r1, [r7, #0]
    if(ll_p == NULL) return;
 8023ac6:	687b      	ldr	r3, [r7, #4]
 8023ac8:	2b00      	cmp	r3, #0
 8023aca:	d050      	beq.n	8023b6e <_lv_ll_remove+0xb2>

    if(_lv_ll_get_head(ll_p) == node_p) {
 8023acc:	6878      	ldr	r0, [r7, #4]
 8023ace:	f000 f852 	bl	8023b76 <_lv_ll_get_head>
 8023ad2:	4602      	mov	r2, r0
 8023ad4:	683b      	ldr	r3, [r7, #0]
 8023ad6:	4293      	cmp	r3, r2
 8023ad8:	d116      	bne.n	8023b08 <_lv_ll_remove+0x4c>
        /*The new head will be the node after 'n_act'*/
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 8023ada:	6839      	ldr	r1, [r7, #0]
 8023adc:	6878      	ldr	r0, [r7, #4]
 8023ade:	f000 f86c 	bl	8023bba <_lv_ll_get_next>
 8023ae2:	4602      	mov	r2, r0
 8023ae4:	687b      	ldr	r3, [r7, #4]
 8023ae6:	605a      	str	r2, [r3, #4]
        if(ll_p->head == NULL) {
 8023ae8:	687b      	ldr	r3, [r7, #4]
 8023aea:	685b      	ldr	r3, [r3, #4]
 8023aec:	2b00      	cmp	r3, #0
 8023aee:	d103      	bne.n	8023af8 <_lv_ll_remove+0x3c>
            ll_p->tail = NULL;
 8023af0:	687b      	ldr	r3, [r7, #4]
 8023af2:	2200      	movs	r2, #0
 8023af4:	609a      	str	r2, [r3, #8]
 8023af6:	e03b      	b.n	8023b70 <_lv_ll_remove+0xb4>
        }
        else {
            node_set_prev(ll_p, ll_p->head, NULL);
 8023af8:	687b      	ldr	r3, [r7, #4]
 8023afa:	685b      	ldr	r3, [r3, #4]
 8023afc:	2200      	movs	r2, #0
 8023afe:	4619      	mov	r1, r3
 8023b00:	6878      	ldr	r0, [r7, #4]
 8023b02:	f000 f89d 	bl	8023c40 <node_set_prev>
 8023b06:	e033      	b.n	8023b70 <_lv_ll_remove+0xb4>
        }
    }
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8023b08:	6878      	ldr	r0, [r7, #4]
 8023b0a:	f000 f845 	bl	8023b98 <_lv_ll_get_tail>
 8023b0e:	4602      	mov	r2, r0
 8023b10:	683b      	ldr	r3, [r7, #0]
 8023b12:	4293      	cmp	r3, r2
 8023b14:	d116      	bne.n	8023b44 <_lv_ll_remove+0x88>
        /*The new tail will be the node before 'n_act'*/
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8023b16:	6839      	ldr	r1, [r7, #0]
 8023b18:	6878      	ldr	r0, [r7, #4]
 8023b1a:	f000 f863 	bl	8023be4 <_lv_ll_get_prev>
 8023b1e:	4602      	mov	r2, r0
 8023b20:	687b      	ldr	r3, [r7, #4]
 8023b22:	609a      	str	r2, [r3, #8]
        if(ll_p->tail == NULL) {
 8023b24:	687b      	ldr	r3, [r7, #4]
 8023b26:	689b      	ldr	r3, [r3, #8]
 8023b28:	2b00      	cmp	r3, #0
 8023b2a:	d103      	bne.n	8023b34 <_lv_ll_remove+0x78>
            ll_p->head = NULL;
 8023b2c:	687b      	ldr	r3, [r7, #4]
 8023b2e:	2200      	movs	r2, #0
 8023b30:	605a      	str	r2, [r3, #4]
 8023b32:	e01d      	b.n	8023b70 <_lv_ll_remove+0xb4>
        }
        else {
            node_set_next(ll_p, ll_p->tail, NULL);
 8023b34:	687b      	ldr	r3, [r7, #4]
 8023b36:	689b      	ldr	r3, [r3, #8]
 8023b38:	2200      	movs	r2, #0
 8023b3a:	4619      	mov	r1, r3
 8023b3c:	6878      	ldr	r0, [r7, #4]
 8023b3e:	f000 f89e 	bl	8023c7e <node_set_next>
 8023b42:	e015      	b.n	8023b70 <_lv_ll_remove+0xb4>
        }
    }
    else {
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 8023b44:	6839      	ldr	r1, [r7, #0]
 8023b46:	6878      	ldr	r0, [r7, #4]
 8023b48:	f000 f84c 	bl	8023be4 <_lv_ll_get_prev>
 8023b4c:	60f8      	str	r0, [r7, #12]
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 8023b4e:	6839      	ldr	r1, [r7, #0]
 8023b50:	6878      	ldr	r0, [r7, #4]
 8023b52:	f000 f832 	bl	8023bba <_lv_ll_get_next>
 8023b56:	60b8      	str	r0, [r7, #8]

        node_set_next(ll_p, n_prev, n_next);
 8023b58:	68ba      	ldr	r2, [r7, #8]
 8023b5a:	68f9      	ldr	r1, [r7, #12]
 8023b5c:	6878      	ldr	r0, [r7, #4]
 8023b5e:	f000 f88e 	bl	8023c7e <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 8023b62:	68fa      	ldr	r2, [r7, #12]
 8023b64:	68b9      	ldr	r1, [r7, #8]
 8023b66:	6878      	ldr	r0, [r7, #4]
 8023b68:	f000 f86a 	bl	8023c40 <node_set_prev>
 8023b6c:	e000      	b.n	8023b70 <_lv_ll_remove+0xb4>
    if(ll_p == NULL) return;
 8023b6e:	bf00      	nop
    }
}
 8023b70:	3710      	adds	r7, #16
 8023b72:	46bd      	mov	sp, r7
 8023b74:	bd80      	pop	{r7, pc}

08023b76 <_lv_ll_get_head>:
 * Return with head node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * _lv_ll_get_head(const lv_ll_t * ll_p)
{
 8023b76:	b480      	push	{r7}
 8023b78:	b083      	sub	sp, #12
 8023b7a:	af00      	add	r7, sp, #0
 8023b7c:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return NULL;
 8023b7e:	687b      	ldr	r3, [r7, #4]
 8023b80:	2b00      	cmp	r3, #0
 8023b82:	d101      	bne.n	8023b88 <_lv_ll_get_head+0x12>
 8023b84:	2300      	movs	r3, #0
 8023b86:	e001      	b.n	8023b8c <_lv_ll_get_head+0x16>
    return ll_p->head;
 8023b88:	687b      	ldr	r3, [r7, #4]
 8023b8a:	685b      	ldr	r3, [r3, #4]
}
 8023b8c:	4618      	mov	r0, r3
 8023b8e:	370c      	adds	r7, #12
 8023b90:	46bd      	mov	sp, r7
 8023b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b96:	4770      	bx	lr

08023b98 <_lv_ll_get_tail>:
 * Return with tail node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the tail of 'll_p'
 */
void * _lv_ll_get_tail(const lv_ll_t * ll_p)
{
 8023b98:	b480      	push	{r7}
 8023b9a:	b083      	sub	sp, #12
 8023b9c:	af00      	add	r7, sp, #0
 8023b9e:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return NULL;
 8023ba0:	687b      	ldr	r3, [r7, #4]
 8023ba2:	2b00      	cmp	r3, #0
 8023ba4:	d101      	bne.n	8023baa <_lv_ll_get_tail+0x12>
 8023ba6:	2300      	movs	r3, #0
 8023ba8:	e001      	b.n	8023bae <_lv_ll_get_tail+0x16>
    return ll_p->tail;
 8023baa:	687b      	ldr	r3, [r7, #4]
 8023bac:	689b      	ldr	r3, [r3, #8]
}
 8023bae:	4618      	mov	r0, r3
 8023bb0:	370c      	adds	r7, #12
 8023bb2:	46bd      	mov	sp, r7
 8023bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bb8:	4770      	bx	lr

08023bba <_lv_ll_get_next>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the next node
 */
void * _lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
{
 8023bba:	b480      	push	{r7}
 8023bbc:	b085      	sub	sp, #20
 8023bbe:	af00      	add	r7, sp, #0
 8023bc0:	6078      	str	r0, [r7, #4]
 8023bc2:	6039      	str	r1, [r7, #0]
    /*Pointer to the next node is stored in the end of this node.
     *Go there and return the address found there*/
    const lv_ll_node_t * n_act_d = n_act;
 8023bc4:	683b      	ldr	r3, [r7, #0]
 8023bc6:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8023bc8:	687b      	ldr	r3, [r7, #4]
 8023bca:	681b      	ldr	r3, [r3, #0]
 8023bcc:	3304      	adds	r3, #4
 8023bce:	68fa      	ldr	r2, [r7, #12]
 8023bd0:	4413      	add	r3, r2
 8023bd2:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 8023bd4:	68fb      	ldr	r3, [r7, #12]
 8023bd6:	681b      	ldr	r3, [r3, #0]
}
 8023bd8:	4618      	mov	r0, r3
 8023bda:	3714      	adds	r7, #20
 8023bdc:	46bd      	mov	sp, r7
 8023bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023be2:	4770      	bx	lr

08023be4 <_lv_ll_get_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the previous node
 */
void * _lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
{
 8023be4:	b480      	push	{r7}
 8023be6:	b085      	sub	sp, #20
 8023be8:	af00      	add	r7, sp, #0
 8023bea:	6078      	str	r0, [r7, #4]
 8023bec:	6039      	str	r1, [r7, #0]
    /*Pointer to the prev. node is stored in the end of this node.
     *Go there and return the address found there*/
    const lv_ll_node_t * n_act_d = n_act;
 8023bee:	683b      	ldr	r3, [r7, #0]
 8023bf0:	60fb      	str	r3, [r7, #12]
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8023bf2:	687b      	ldr	r3, [r7, #4]
 8023bf4:	681b      	ldr	r3, [r3, #0]
 8023bf6:	68fa      	ldr	r2, [r7, #12]
 8023bf8:	4413      	add	r3, r2
 8023bfa:	60fb      	str	r3, [r7, #12]
    return *((lv_ll_node_t **)n_act_d);
 8023bfc:	68fb      	ldr	r3, [r7, #12]
 8023bfe:	681b      	ldr	r3, [r3, #0]
}
 8023c00:	4618      	mov	r0, r3
 8023c02:	3714      	adds	r7, #20
 8023c04:	46bd      	mov	sp, r7
 8023c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c0a:	4770      	bx	lr

08023c0c <_lv_ll_is_empty>:
 * Check if a linked list is empty
 * @param ll_p pointer to a linked list
 * @return true: the linked list is empty; false: not empty
 */
bool _lv_ll_is_empty(lv_ll_t * ll_p)
{
 8023c0c:	b480      	push	{r7}
 8023c0e:	b083      	sub	sp, #12
 8023c10:	af00      	add	r7, sp, #0
 8023c12:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return true;
 8023c14:	687b      	ldr	r3, [r7, #4]
 8023c16:	2b00      	cmp	r3, #0
 8023c18:	d101      	bne.n	8023c1e <_lv_ll_is_empty+0x12>
 8023c1a:	2301      	movs	r3, #1
 8023c1c:	e00a      	b.n	8023c34 <_lv_ll_is_empty+0x28>

    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8023c1e:	687b      	ldr	r3, [r7, #4]
 8023c20:	685b      	ldr	r3, [r3, #4]
 8023c22:	2b00      	cmp	r3, #0
 8023c24:	d105      	bne.n	8023c32 <_lv_ll_is_empty+0x26>
 8023c26:	687b      	ldr	r3, [r7, #4]
 8023c28:	689b      	ldr	r3, [r3, #8]
 8023c2a:	2b00      	cmp	r3, #0
 8023c2c:	d101      	bne.n	8023c32 <_lv_ll_is_empty+0x26>
 8023c2e:	2301      	movs	r3, #1
 8023c30:	e000      	b.n	8023c34 <_lv_ll_is_empty+0x28>

    return false;
 8023c32:	2300      	movs	r3, #0
}
 8023c34:	4618      	mov	r0, r3
 8023c36:	370c      	adds	r7, #12
 8023c38:	46bd      	mov	sp, r7
 8023c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c3e:	4770      	bx	lr

08023c40 <node_set_prev>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
 8023c40:	b480      	push	{r7}
 8023c42:	b089      	sub	sp, #36	; 0x24
 8023c44:	af00      	add	r7, sp, #0
 8023c46:	60f8      	str	r0, [r7, #12]
 8023c48:	60b9      	str	r1, [r7, #8]
 8023c4a:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8023c4c:	68bb      	ldr	r3, [r7, #8]
 8023c4e:	2b00      	cmp	r3, #0
 8023c50:	d00f      	beq.n	8023c72 <node_set_prev+0x32>

    uint8_t * act8 = (uint8_t *)act;
 8023c52:	68bb      	ldr	r3, [r7, #8]
 8023c54:	61fb      	str	r3, [r7, #28]

    act8 += LL_PREV_P_OFFSET(ll_p);
 8023c56:	68fb      	ldr	r3, [r7, #12]
 8023c58:	681b      	ldr	r3, [r3, #0]
 8023c5a:	69fa      	ldr	r2, [r7, #28]
 8023c5c:	4413      	add	r3, r2
 8023c5e:	61fb      	str	r3, [r7, #28]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 8023c60:	69fb      	ldr	r3, [r7, #28]
 8023c62:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;
 8023c64:	1d3b      	adds	r3, r7, #4
 8023c66:	617b      	str	r3, [r7, #20]

    *act_node_p = *prev_node_p;
 8023c68:	697b      	ldr	r3, [r7, #20]
 8023c6a:	681a      	ldr	r2, [r3, #0]
 8023c6c:	69bb      	ldr	r3, [r7, #24]
 8023c6e:	601a      	str	r2, [r3, #0]
 8023c70:	e000      	b.n	8023c74 <node_set_prev+0x34>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8023c72:	bf00      	nop
}
 8023c74:	3724      	adds	r7, #36	; 0x24
 8023c76:	46bd      	mov	sp, r7
 8023c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c7c:	4770      	bx	lr

08023c7e <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
 8023c7e:	b480      	push	{r7}
 8023c80:	b089      	sub	sp, #36	; 0x24
 8023c82:	af00      	add	r7, sp, #0
 8023c84:	60f8      	str	r0, [r7, #12]
 8023c86:	60b9      	str	r1, [r7, #8]
 8023c88:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8023c8a:	68bb      	ldr	r3, [r7, #8]
 8023c8c:	2b00      	cmp	r3, #0
 8023c8e:	d010      	beq.n	8023cb2 <node_set_next+0x34>
    uint8_t * act8 = (uint8_t *)act;
 8023c90:	68bb      	ldr	r3, [r7, #8]
 8023c92:	61fb      	str	r3, [r7, #28]

    act8 += LL_NEXT_P_OFFSET(ll_p);
 8023c94:	68fb      	ldr	r3, [r7, #12]
 8023c96:	681b      	ldr	r3, [r3, #0]
 8023c98:	3304      	adds	r3, #4
 8023c9a:	69fa      	ldr	r2, [r7, #28]
 8023c9c:	4413      	add	r3, r2
 8023c9e:	61fb      	str	r3, [r7, #28]
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
 8023ca0:	69fb      	ldr	r3, [r7, #28]
 8023ca2:	61bb      	str	r3, [r7, #24]
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;
 8023ca4:	1d3b      	adds	r3, r7, #4
 8023ca6:	617b      	str	r3, [r7, #20]

    *act_node_p = *next_node_p;
 8023ca8:	697b      	ldr	r3, [r7, #20]
 8023caa:	681a      	ldr	r2, [r3, #0]
 8023cac:	69bb      	ldr	r3, [r7, #24]
 8023cae:	601a      	str	r2, [r3, #0]
 8023cb0:	e000      	b.n	8023cb4 <node_set_next+0x36>
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8023cb2:	bf00      	nop
}
 8023cb4:	3724      	adds	r7, #36	; 0x24
 8023cb6:	46bd      	mov	sp, r7
 8023cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cbc:	4770      	bx	lr
	...

08023cc0 <lv_trigo_sin>:
 * Return with sinus of an angle
 * @param angle
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
 8023cc0:	b480      	push	{r7}
 8023cc2:	b085      	sub	sp, #20
 8023cc4:	af00      	add	r7, sp, #0
 8023cc6:	4603      	mov	r3, r0
 8023cc8:	80fb      	strh	r3, [r7, #6]
    int16_t ret = 0;
 8023cca:	2300      	movs	r3, #0
 8023ccc:	81fb      	strh	r3, [r7, #14]
    angle       = angle % 360;
 8023cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8023cd2:	4a31      	ldr	r2, [pc, #196]	; (8023d98 <lv_trigo_sin+0xd8>)
 8023cd4:	fb82 1203 	smull	r1, r2, r2, r3
 8023cd8:	441a      	add	r2, r3
 8023cda:	1211      	asrs	r1, r2, #8
 8023cdc:	17da      	asrs	r2, r3, #31
 8023cde:	1a8a      	subs	r2, r1, r2
 8023ce0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8023ce4:	fb01 f202 	mul.w	r2, r1, r2
 8023ce8:	1a9b      	subs	r3, r3, r2
 8023cea:	80fb      	strh	r3, [r7, #6]

    if(angle < 0) angle = 360 + angle;
 8023cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8023cf0:	2b00      	cmp	r3, #0
 8023cf2:	da04      	bge.n	8023cfe <lv_trigo_sin+0x3e>
 8023cf4:	88fb      	ldrh	r3, [r7, #6]
 8023cf6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8023cfa:	b29b      	uxth	r3, r3
 8023cfc:	80fb      	strh	r3, [r7, #6]

    if(angle < 90) {
 8023cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8023d02:	2b59      	cmp	r3, #89	; 0x59
 8023d04:	dc06      	bgt.n	8023d14 <lv_trigo_sin+0x54>
        ret = sin0_90_table[angle];
 8023d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8023d0a:	4a24      	ldr	r2, [pc, #144]	; (8023d9c <lv_trigo_sin+0xdc>)
 8023d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023d10:	81fb      	strh	r3, [r7, #14]
 8023d12:	e038      	b.n	8023d86 <lv_trigo_sin+0xc6>
    }
    else if(angle >= 90 && angle < 180) {
 8023d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8023d18:	2b59      	cmp	r3, #89	; 0x59
 8023d1a:	dd0f      	ble.n	8023d3c <lv_trigo_sin+0x7c>
 8023d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8023d20:	2bb3      	cmp	r3, #179	; 0xb3
 8023d22:	dc0b      	bgt.n	8023d3c <lv_trigo_sin+0x7c>
        angle = 180 - angle;
 8023d24:	88fb      	ldrh	r3, [r7, #6]
 8023d26:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8023d2a:	b29b      	uxth	r3, r3
 8023d2c:	80fb      	strh	r3, [r7, #6]
        ret   = sin0_90_table[angle];
 8023d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8023d32:	4a1a      	ldr	r2, [pc, #104]	; (8023d9c <lv_trigo_sin+0xdc>)
 8023d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023d38:	81fb      	strh	r3, [r7, #14]
 8023d3a:	e024      	b.n	8023d86 <lv_trigo_sin+0xc6>
    }
    else if(angle >= 180 && angle < 270) {
 8023d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8023d40:	2bb3      	cmp	r3, #179	; 0xb3
 8023d42:	dd12      	ble.n	8023d6a <lv_trigo_sin+0xaa>
 8023d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8023d48:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8023d4c:	da0d      	bge.n	8023d6a <lv_trigo_sin+0xaa>
        angle = angle - 180;
 8023d4e:	88fb      	ldrh	r3, [r7, #6]
 8023d50:	3bb4      	subs	r3, #180	; 0xb4
 8023d52:	b29b      	uxth	r3, r3
 8023d54:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 8023d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8023d5a:	4a10      	ldr	r2, [pc, #64]	; (8023d9c <lv_trigo_sin+0xdc>)
 8023d5c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8023d60:	b29b      	uxth	r3, r3
 8023d62:	425b      	negs	r3, r3
 8023d64:	b29b      	uxth	r3, r3
 8023d66:	81fb      	strh	r3, [r7, #14]
 8023d68:	e00d      	b.n	8023d86 <lv_trigo_sin+0xc6>
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 8023d6a:	88fb      	ldrh	r3, [r7, #6]
 8023d6c:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8023d70:	b29b      	uxth	r3, r3
 8023d72:	80fb      	strh	r3, [r7, #6]
        ret   = -sin0_90_table[angle];
 8023d74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8023d78:	4a08      	ldr	r2, [pc, #32]	; (8023d9c <lv_trigo_sin+0xdc>)
 8023d7a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8023d7e:	b29b      	uxth	r3, r3
 8023d80:	425b      	negs	r3, r3
 8023d82:	b29b      	uxth	r3, r3
 8023d84:	81fb      	strh	r3, [r7, #14]
    }

    return ret;
 8023d86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8023d8a:	4618      	mov	r0, r3
 8023d8c:	3714      	adds	r7, #20
 8023d8e:	46bd      	mov	sp, r7
 8023d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d94:	4770      	bx	lr
 8023d96:	bf00      	nop
 8023d98:	b60b60b7 	.word	0xb60b60b7
 8023d9c:	0802fad0 	.word	0x0802fad0

08023da0 <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 8023da0:	b480      	push	{r7}
 8023da2:	b08f      	sub	sp, #60	; 0x3c
 8023da4:	af00      	add	r7, sp, #0
 8023da6:	60f8      	str	r0, [r7, #12]
 8023da8:	60b9      	str	r1, [r7, #8]
 8023daa:	607a      	str	r2, [r7, #4]
 8023dac:	603b      	str	r3, [r7, #0]
    uint32_t t_rem  = 1024 - t;
 8023dae:	68fb      	ldr	r3, [r7, #12]
 8023db0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8023db4:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8023db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023db8:	fb03 f303 	mul.w	r3, r3, r3
 8023dbc:	0a9b      	lsrs	r3, r3, #10
 8023dbe:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8023dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023dc4:	fb02 f303 	mul.w	r3, r2, r3
 8023dc8:	0a9b      	lsrs	r3, r3, #10
 8023dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t t2     = (t * t) >> 10;
 8023dcc:	68fb      	ldr	r3, [r7, #12]
 8023dce:	fb03 f303 	mul.w	r3, r3, r3
 8023dd2:	0a9b      	lsrs	r3, r3, #10
 8023dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t t3     = (t2 * t) >> 10;
 8023dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023dd8:	68fa      	ldr	r2, [r7, #12]
 8023dda:	fb02 f303 	mul.w	r3, r2, r3
 8023dde:	0a9b      	lsrs	r3, r3, #10
 8023de0:	627b      	str	r3, [r7, #36]	; 0x24

    uint32_t v1 = (t_rem3 * u0) >> 10;
 8023de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023de4:	68ba      	ldr	r2, [r7, #8]
 8023de6:	fb02 f303 	mul.w	r3, r2, r3
 8023dea:	0a9b      	lsrs	r3, r3, #10
 8023dec:	623b      	str	r3, [r7, #32]
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8023dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023df0:	68fa      	ldr	r2, [r7, #12]
 8023df2:	fb02 f303 	mul.w	r3, r2, r3
 8023df6:	687a      	ldr	r2, [r7, #4]
 8023df8:	fb03 f202 	mul.w	r2, r3, r2
 8023dfc:	4613      	mov	r3, r2
 8023dfe:	005b      	lsls	r3, r3, #1
 8023e00:	4413      	add	r3, r2
 8023e02:	0d1b      	lsrs	r3, r3, #20
 8023e04:	61fb      	str	r3, [r7, #28]
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8023e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023e0a:	fb02 f303 	mul.w	r3, r2, r3
 8023e0e:	683a      	ldr	r2, [r7, #0]
 8023e10:	fb03 f202 	mul.w	r2, r3, r2
 8023e14:	4613      	mov	r3, r2
 8023e16:	005b      	lsls	r3, r3, #1
 8023e18:	4413      	add	r3, r2
 8023e1a:	0d1b      	lsrs	r3, r3, #20
 8023e1c:	61bb      	str	r3, [r7, #24]
    uint32_t v4 = (t3 * u3) >> 10;
 8023e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8023e22:	fb02 f303 	mul.w	r3, r2, r3
 8023e26:	0a9b      	lsrs	r3, r3, #10
 8023e28:	617b      	str	r3, [r7, #20]

    return v1 + v2 + v3 + v4;
 8023e2a:	6a3a      	ldr	r2, [r7, #32]
 8023e2c:	69fb      	ldr	r3, [r7, #28]
 8023e2e:	441a      	add	r2, r3
 8023e30:	69bb      	ldr	r3, [r7, #24]
 8023e32:	441a      	add	r2, r3
 8023e34:	697b      	ldr	r3, [r7, #20]
 8023e36:	4413      	add	r3, r2
}
 8023e38:	4618      	mov	r0, r3
 8023e3a:	373c      	adds	r7, #60	; 0x3c
 8023e3c:	46bd      	mov	sp, r7
 8023e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e42:	4770      	bx	lr

08023e44 <lv_map>:
 * @param min_out max output range
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
 8023e44:	b480      	push	{r7}
 8023e46:	b087      	sub	sp, #28
 8023e48:	af00      	add	r7, sp, #0
 8023e4a:	60f8      	str	r0, [r7, #12]
 8023e4c:	60b9      	str	r1, [r7, #8]
 8023e4e:	607a      	str	r2, [r7, #4]
 8023e50:	603b      	str	r3, [r7, #0]
    if(max_in >= min_in && x >= max_in) return max_out;
 8023e52:	687a      	ldr	r2, [r7, #4]
 8023e54:	68bb      	ldr	r3, [r7, #8]
 8023e56:	429a      	cmp	r2, r3
 8023e58:	db05      	blt.n	8023e66 <lv_map+0x22>
 8023e5a:	68fa      	ldr	r2, [r7, #12]
 8023e5c:	687b      	ldr	r3, [r7, #4]
 8023e5e:	429a      	cmp	r2, r3
 8023e60:	db01      	blt.n	8023e66 <lv_map+0x22>
 8023e62:	6a3b      	ldr	r3, [r7, #32]
 8023e64:	e030      	b.n	8023ec8 <lv_map+0x84>
    if(max_in >= min_in && x <= min_in) return min_out;
 8023e66:	687a      	ldr	r2, [r7, #4]
 8023e68:	68bb      	ldr	r3, [r7, #8]
 8023e6a:	429a      	cmp	r2, r3
 8023e6c:	db05      	blt.n	8023e7a <lv_map+0x36>
 8023e6e:	68fa      	ldr	r2, [r7, #12]
 8023e70:	68bb      	ldr	r3, [r7, #8]
 8023e72:	429a      	cmp	r2, r3
 8023e74:	dc01      	bgt.n	8023e7a <lv_map+0x36>
 8023e76:	683b      	ldr	r3, [r7, #0]
 8023e78:	e026      	b.n	8023ec8 <lv_map+0x84>

    if(max_in <= min_in && x <= max_in) return max_out;
 8023e7a:	687a      	ldr	r2, [r7, #4]
 8023e7c:	68bb      	ldr	r3, [r7, #8]
 8023e7e:	429a      	cmp	r2, r3
 8023e80:	dc05      	bgt.n	8023e8e <lv_map+0x4a>
 8023e82:	68fa      	ldr	r2, [r7, #12]
 8023e84:	687b      	ldr	r3, [r7, #4]
 8023e86:	429a      	cmp	r2, r3
 8023e88:	dc01      	bgt.n	8023e8e <lv_map+0x4a>
 8023e8a:	6a3b      	ldr	r3, [r7, #32]
 8023e8c:	e01c      	b.n	8023ec8 <lv_map+0x84>
    if(max_in <= min_in && x >= min_in) return min_out;
 8023e8e:	687a      	ldr	r2, [r7, #4]
 8023e90:	68bb      	ldr	r3, [r7, #8]
 8023e92:	429a      	cmp	r2, r3
 8023e94:	dc05      	bgt.n	8023ea2 <lv_map+0x5e>
 8023e96:	68fa      	ldr	r2, [r7, #12]
 8023e98:	68bb      	ldr	r3, [r7, #8]
 8023e9a:	429a      	cmp	r2, r3
 8023e9c:	db01      	blt.n	8023ea2 <lv_map+0x5e>
 8023e9e:	683b      	ldr	r3, [r7, #0]
 8023ea0:	e012      	b.n	8023ec8 <lv_map+0x84>
     *   ((x - min_in) * delta_out) / delta in) + min_out
     * To avoid rounding error reorder the operations:
     *   (x - min_in) * (delta_out / delta_min) + min_out
     */

    int32_t delta_in = max_in - min_in;
 8023ea2:	687a      	ldr	r2, [r7, #4]
 8023ea4:	68bb      	ldr	r3, [r7, #8]
 8023ea6:	1ad3      	subs	r3, r2, r3
 8023ea8:	617b      	str	r3, [r7, #20]
    int32_t delta_out = max_out - min_out;
 8023eaa:	6a3a      	ldr	r2, [r7, #32]
 8023eac:	683b      	ldr	r3, [r7, #0]
 8023eae:	1ad3      	subs	r3, r2, r3
 8023eb0:	613b      	str	r3, [r7, #16]

    return ((x - min_in) * delta_out) / delta_in + min_out;
 8023eb2:	68fa      	ldr	r2, [r7, #12]
 8023eb4:	68bb      	ldr	r3, [r7, #8]
 8023eb6:	1ad3      	subs	r3, r2, r3
 8023eb8:	693a      	ldr	r2, [r7, #16]
 8023eba:	fb03 f202 	mul.w	r2, r3, r2
 8023ebe:	697b      	ldr	r3, [r7, #20]
 8023ec0:	fb92 f2f3 	sdiv	r2, r2, r3
 8023ec4:	683b      	ldr	r3, [r7, #0]
 8023ec6:	4413      	add	r3, r2
}
 8023ec8:	4618      	mov	r0, r3
 8023eca:	371c      	adds	r7, #28
 8023ecc:	46bd      	mov	sp, r7
 8023ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ed2:	4770      	bx	lr

08023ed4 <lv_mem_init>:

/**
 * Initialize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 8023ed4:	b580      	push	{r7, lr}
 8023ed6:	af00      	add	r7, sp, #0
#ifdef LV_MEM_POOL_ALLOC
    tlsf = lv_tlsf_create_with_pool((void *)LV_MEM_POOL_ALLOC(LV_MEM_SIZE), LV_MEM_SIZE);
#else
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_ATTRIBUTE_LARGE_RAM_ARRAY MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 8023ed8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8023edc:	4803      	ldr	r0, [pc, #12]	; (8023eec <lv_mem_init+0x18>)
 8023ede:	f002 f950 	bl	8026182 <lv_tlsf_create_with_pool>
 8023ee2:	4603      	mov	r3, r0
 8023ee4:	4a02      	ldr	r2, [pc, #8]	; (8023ef0 <lv_mem_init+0x1c>)
 8023ee6:	6013      	str	r3, [r2, #0]
#endif

#if LV_MEM_ADD_JUNK
    LV_LOG_WARN("LV_MEM_ADD_JUNK is enabled which makes LVGL much slower");
#endif
}
 8023ee8:	bf00      	nop
 8023eea:	bd80      	pop	{r7, pc}
 8023eec:	20000ad4 	.word	0x20000ad4
 8023ef0:	20000ac8 	.word	0x20000ac8

08023ef4 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
 8023ef4:	b580      	push	{r7, lr}
 8023ef6:	b084      	sub	sp, #16
 8023ef8:	af00      	add	r7, sp, #0
 8023efa:	6078      	str	r0, [r7, #4]
    MEM_TRACE("allocating %lu bytes", (unsigned long)size);
    if(size == 0) {
 8023efc:	687b      	ldr	r3, [r7, #4]
 8023efe:	2b00      	cmp	r3, #0
 8023f00:	d101      	bne.n	8023f06 <lv_mem_alloc+0x12>
        MEM_TRACE("using zero_mem");
        return &zero_mem;
 8023f02:	4b10      	ldr	r3, [pc, #64]	; (8023f44 <lv_mem_alloc+0x50>)
 8023f04:	e019      	b.n	8023f3a <lv_mem_alloc+0x46>
    }

#if LV_MEM_CUSTOM == 0
    void * alloc = lv_tlsf_malloc(tlsf, size);
 8023f06:	4b10      	ldr	r3, [pc, #64]	; (8023f48 <lv_mem_alloc+0x54>)
 8023f08:	681b      	ldr	r3, [r3, #0]
 8023f0a:	6879      	ldr	r1, [r7, #4]
 8023f0c:	4618      	mov	r0, r3
 8023f0e:	f002 f955 	bl	80261bc <lv_tlsf_malloc>
 8023f12:	60f8      	str	r0, [r7, #12]
    else {
        lv_memset(alloc, 0xaa, size);
    }
#endif

    if(alloc) {
 8023f14:	68fb      	ldr	r3, [r7, #12]
 8023f16:	2b00      	cmp	r3, #0
 8023f18:	d00e      	beq.n	8023f38 <lv_mem_alloc+0x44>
#if LV_MEM_CUSTOM == 0
        cur_used += size;
 8023f1a:	4b0c      	ldr	r3, [pc, #48]	; (8023f4c <lv_mem_alloc+0x58>)
 8023f1c:	681a      	ldr	r2, [r3, #0]
 8023f1e:	687b      	ldr	r3, [r7, #4]
 8023f20:	4413      	add	r3, r2
 8023f22:	4a0a      	ldr	r2, [pc, #40]	; (8023f4c <lv_mem_alloc+0x58>)
 8023f24:	6013      	str	r3, [r2, #0]
        max_used = LV_MAX(cur_used, max_used);
 8023f26:	4b0a      	ldr	r3, [pc, #40]	; (8023f50 <lv_mem_alloc+0x5c>)
 8023f28:	681a      	ldr	r2, [r3, #0]
 8023f2a:	4b08      	ldr	r3, [pc, #32]	; (8023f4c <lv_mem_alloc+0x58>)
 8023f2c:	681b      	ldr	r3, [r3, #0]
 8023f2e:	4293      	cmp	r3, r2
 8023f30:	bf38      	it	cc
 8023f32:	4613      	movcc	r3, r2
 8023f34:	4a06      	ldr	r2, [pc, #24]	; (8023f50 <lv_mem_alloc+0x5c>)
 8023f36:	6013      	str	r3, [r2, #0]
#endif
        MEM_TRACE("allocated at %p", alloc);
    }
    return alloc;
 8023f38:	68fb      	ldr	r3, [r7, #12]
}
 8023f3a:	4618      	mov	r0, r3
 8023f3c:	3710      	adds	r7, #16
 8023f3e:	46bd      	mov	sp, r7
 8023f40:	bd80      	pop	{r7, pc}
 8023f42:	bf00      	nop
 8023f44:	20000014 	.word	0x20000014
 8023f48:	20000ac8 	.word	0x20000ac8
 8023f4c:	20000acc 	.word	0x20000acc
 8023f50:	20000ad0 	.word	0x20000ad0

08023f54 <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(void * data)
{
 8023f54:	b580      	push	{r7, lr}
 8023f56:	b084      	sub	sp, #16
 8023f58:	af00      	add	r7, sp, #0
 8023f5a:	6078      	str	r0, [r7, #4]
    MEM_TRACE("freeing %p", data);
    if(data == &zero_mem) return;
 8023f5c:	687b      	ldr	r3, [r7, #4]
 8023f5e:	4a11      	ldr	r2, [pc, #68]	; (8023fa4 <lv_mem_free+0x50>)
 8023f60:	4293      	cmp	r3, r2
 8023f62:	d019      	beq.n	8023f98 <lv_mem_free+0x44>
    if(data == NULL) return;
 8023f64:	687b      	ldr	r3, [r7, #4]
 8023f66:	2b00      	cmp	r3, #0
 8023f68:	d018      	beq.n	8023f9c <lv_mem_free+0x48>

#if LV_MEM_CUSTOM == 0
#  if LV_MEM_ADD_JUNK
    lv_memset(data, 0xbb, lv_tlsf_block_size(data));
#  endif
    size_t size = lv_tlsf_free(tlsf, data);
 8023f6a:	4b0f      	ldr	r3, [pc, #60]	; (8023fa8 <lv_mem_free+0x54>)
 8023f6c:	681b      	ldr	r3, [r3, #0]
 8023f6e:	6879      	ldr	r1, [r7, #4]
 8023f70:	4618      	mov	r0, r3
 8023f72:	f002 f93e 	bl	80261f2 <lv_tlsf_free>
 8023f76:	60f8      	str	r0, [r7, #12]
    if(cur_used > size) cur_used -= size;
 8023f78:	4b0c      	ldr	r3, [pc, #48]	; (8023fac <lv_mem_free+0x58>)
 8023f7a:	681b      	ldr	r3, [r3, #0]
 8023f7c:	68fa      	ldr	r2, [r7, #12]
 8023f7e:	429a      	cmp	r2, r3
 8023f80:	d206      	bcs.n	8023f90 <lv_mem_free+0x3c>
 8023f82:	4b0a      	ldr	r3, [pc, #40]	; (8023fac <lv_mem_free+0x58>)
 8023f84:	681a      	ldr	r2, [r3, #0]
 8023f86:	68fb      	ldr	r3, [r7, #12]
 8023f88:	1ad3      	subs	r3, r2, r3
 8023f8a:	4a08      	ldr	r2, [pc, #32]	; (8023fac <lv_mem_free+0x58>)
 8023f8c:	6013      	str	r3, [r2, #0]
 8023f8e:	e006      	b.n	8023f9e <lv_mem_free+0x4a>
    else cur_used = 0;
 8023f90:	4b06      	ldr	r3, [pc, #24]	; (8023fac <lv_mem_free+0x58>)
 8023f92:	2200      	movs	r2, #0
 8023f94:	601a      	str	r2, [r3, #0]
 8023f96:	e002      	b.n	8023f9e <lv_mem_free+0x4a>
    if(data == &zero_mem) return;
 8023f98:	bf00      	nop
 8023f9a:	e000      	b.n	8023f9e <lv_mem_free+0x4a>
    if(data == NULL) return;
 8023f9c:	bf00      	nop
#else
    LV_MEM_CUSTOM_FREE(data);
#endif
}
 8023f9e:	3710      	adds	r7, #16
 8023fa0:	46bd      	mov	sp, r7
 8023fa2:	bd80      	pop	{r7, pc}
 8023fa4:	20000014 	.word	0x20000014
 8023fa8:	20000ac8 	.word	0x20000ac8
 8023fac:	20000acc 	.word	0x20000acc

08023fb0 <lv_mem_realloc>:
 * Its content will be copied to the new memory block and freed
 * @param new_size the desired new size in byte
 * @return pointer to the new memory
 */
void * lv_mem_realloc(void * data_p, size_t new_size)
{
 8023fb0:	b580      	push	{r7, lr}
 8023fb2:	b084      	sub	sp, #16
 8023fb4:	af00      	add	r7, sp, #0
 8023fb6:	6078      	str	r0, [r7, #4]
 8023fb8:	6039      	str	r1, [r7, #0]
    MEM_TRACE("reallocating %p with %lu size", data_p, (unsigned long)new_size);
    if(new_size == 0) {
 8023fba:	683b      	ldr	r3, [r7, #0]
 8023fbc:	2b00      	cmp	r3, #0
 8023fbe:	d104      	bne.n	8023fca <lv_mem_realloc+0x1a>
        MEM_TRACE("using zero_mem");
        lv_mem_free(data_p);
 8023fc0:	6878      	ldr	r0, [r7, #4]
 8023fc2:	f7ff ffc7 	bl	8023f54 <lv_mem_free>
        return &zero_mem;
 8023fc6:	4b0e      	ldr	r3, [pc, #56]	; (8024000 <lv_mem_realloc+0x50>)
 8023fc8:	e016      	b.n	8023ff8 <lv_mem_realloc+0x48>
    }

    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 8023fca:	687b      	ldr	r3, [r7, #4]
 8023fcc:	4a0c      	ldr	r2, [pc, #48]	; (8024000 <lv_mem_realloc+0x50>)
 8023fce:	4293      	cmp	r3, r2
 8023fd0:	d104      	bne.n	8023fdc <lv_mem_realloc+0x2c>
 8023fd2:	6838      	ldr	r0, [r7, #0]
 8023fd4:	f7ff ff8e 	bl	8023ef4 <lv_mem_alloc>
 8023fd8:	4603      	mov	r3, r0
 8023fda:	e00d      	b.n	8023ff8 <lv_mem_realloc+0x48>

#if LV_MEM_CUSTOM == 0
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 8023fdc:	4b09      	ldr	r3, [pc, #36]	; (8024004 <lv_mem_realloc+0x54>)
 8023fde:	681b      	ldr	r3, [r3, #0]
 8023fe0:	683a      	ldr	r2, [r7, #0]
 8023fe2:	6879      	ldr	r1, [r7, #4]
 8023fe4:	4618      	mov	r0, r3
 8023fe6:	f002 f934 	bl	8026252 <lv_tlsf_realloc>
 8023fea:	60f8      	str	r0, [r7, #12]
#else
    void * new_p = LV_MEM_CUSTOM_REALLOC(data_p, new_size);
#endif
    if(new_p == NULL) {
 8023fec:	68fb      	ldr	r3, [r7, #12]
 8023fee:	2b00      	cmp	r3, #0
 8023ff0:	d101      	bne.n	8023ff6 <lv_mem_realloc+0x46>
        LV_LOG_ERROR("couldn't allocate memory");
        return NULL;
 8023ff2:	2300      	movs	r3, #0
 8023ff4:	e000      	b.n	8023ff8 <lv_mem_realloc+0x48>
    }

    MEM_TRACE("allocated at %p", new_p);
    return new_p;
 8023ff6:	68fb      	ldr	r3, [r7, #12]
}
 8023ff8:	4618      	mov	r0, r3
 8023ffa:	3710      	adds	r7, #16
 8023ffc:	46bd      	mov	sp, r7
 8023ffe:	bd80      	pop	{r7, pc}
 8024000:	20000014 	.word	0x20000014
 8024004:	20000ac8 	.word	0x20000ac8

08024008 <lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * lv_mem_buf_get(uint32_t size)
{
 8024008:	b580      	push	{r7, lr}
 802400a:	b084      	sub	sp, #16
 802400c:	af00      	add	r7, sp, #0
 802400e:	6078      	str	r0, [r7, #4]
    if(size == 0) return NULL;
 8024010:	687b      	ldr	r3, [r7, #4]
 8024012:	2b00      	cmp	r3, #0
 8024014:	d101      	bne.n	802401a <lv_mem_buf_get+0x12>
 8024016:	2300      	movs	r3, #0
 8024018:	e09c      	b.n	8024154 <lv_mem_buf_get+0x14c>

    MEM_TRACE("begin, getting %d bytes", size);

    /*Try to find a free buffer with suitable size*/
    int8_t i_guess = -1;
 802401a:	23ff      	movs	r3, #255	; 0xff
 802401c:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 802401e:	2300      	movs	r3, #0
 8024020:	73bb      	strb	r3, [r7, #14]
 8024022:	e041      	b.n	80240a8 <lv_mem_buf_get+0xa0>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 8024024:	7bbb      	ldrb	r3, [r7, #14]
 8024026:	4a4d      	ldr	r2, [pc, #308]	; (802415c <lv_mem_buf_get+0x154>)
 8024028:	00db      	lsls	r3, r3, #3
 802402a:	4413      	add	r3, r2
 802402c:	799b      	ldrb	r3, [r3, #6]
 802402e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8024032:	b2db      	uxtb	r3, r3
 8024034:	2b00      	cmp	r3, #0
 8024036:	d134      	bne.n	80240a2 <lv_mem_buf_get+0x9a>
 8024038:	7bbb      	ldrb	r3, [r7, #14]
 802403a:	4a48      	ldr	r2, [pc, #288]	; (802415c <lv_mem_buf_get+0x154>)
 802403c:	00db      	lsls	r3, r3, #3
 802403e:	4413      	add	r3, r2
 8024040:	889b      	ldrh	r3, [r3, #4]
 8024042:	461a      	mov	r2, r3
 8024044:	687b      	ldr	r3, [r7, #4]
 8024046:	4293      	cmp	r3, r2
 8024048:	d82b      	bhi.n	80240a2 <lv_mem_buf_get+0x9a>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 802404a:	7bbb      	ldrb	r3, [r7, #14]
 802404c:	4a43      	ldr	r2, [pc, #268]	; (802415c <lv_mem_buf_get+0x154>)
 802404e:	00db      	lsls	r3, r3, #3
 8024050:	4413      	add	r3, r2
 8024052:	889b      	ldrh	r3, [r3, #4]
 8024054:	461a      	mov	r2, r3
 8024056:	687b      	ldr	r3, [r7, #4]
 8024058:	4293      	cmp	r3, r2
 802405a:	d10c      	bne.n	8024076 <lv_mem_buf_get+0x6e>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 802405c:	7bbb      	ldrb	r3, [r7, #14]
 802405e:	4a3f      	ldr	r2, [pc, #252]	; (802415c <lv_mem_buf_get+0x154>)
 8024060:	00db      	lsls	r3, r3, #3
 8024062:	4413      	add	r3, r2
 8024064:	799a      	ldrb	r2, [r3, #6]
 8024066:	f042 0201 	orr.w	r2, r2, #1
 802406a:	719a      	strb	r2, [r3, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 802406c:	7bbb      	ldrb	r3, [r7, #14]
 802406e:	4a3b      	ldr	r2, [pc, #236]	; (802415c <lv_mem_buf_get+0x154>)
 8024070:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8024074:	e06e      	b.n	8024154 <lv_mem_buf_get+0x14c>
            }
            else if(i_guess < 0) {
 8024076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802407a:	2b00      	cmp	r3, #0
 802407c:	da02      	bge.n	8024084 <lv_mem_buf_get+0x7c>
                i_guess = i;
 802407e:	7bbb      	ldrb	r3, [r7, #14]
 8024080:	73fb      	strb	r3, [r7, #15]
 8024082:	e00e      	b.n	80240a2 <lv_mem_buf_get+0x9a>
            }
            /*If size of `i` is closer to `size` prefer it*/
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 8024084:	7bbb      	ldrb	r3, [r7, #14]
 8024086:	4a35      	ldr	r2, [pc, #212]	; (802415c <lv_mem_buf_get+0x154>)
 8024088:	00db      	lsls	r3, r3, #3
 802408a:	4413      	add	r3, r2
 802408c:	889a      	ldrh	r2, [r3, #4]
 802408e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8024092:	4932      	ldr	r1, [pc, #200]	; (802415c <lv_mem_buf_get+0x154>)
 8024094:	00db      	lsls	r3, r3, #3
 8024096:	440b      	add	r3, r1
 8024098:	889b      	ldrh	r3, [r3, #4]
 802409a:	429a      	cmp	r2, r3
 802409c:	d201      	bcs.n	80240a2 <lv_mem_buf_get+0x9a>
                i_guess = i;
 802409e:	7bbb      	ldrb	r3, [r7, #14]
 80240a0:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80240a2:	7bbb      	ldrb	r3, [r7, #14]
 80240a4:	3301      	adds	r3, #1
 80240a6:	73bb      	strb	r3, [r7, #14]
 80240a8:	7bbb      	ldrb	r3, [r7, #14]
 80240aa:	2b0f      	cmp	r3, #15
 80240ac:	d9ba      	bls.n	8024024 <lv_mem_buf_get+0x1c>
            }
        }
    }

    if(i_guess >= 0) {
 80240ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80240b2:	2b00      	cmp	r3, #0
 80240b4:	db0e      	blt.n	80240d4 <lv_mem_buf_get+0xcc>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 80240b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80240ba:	4a28      	ldr	r2, [pc, #160]	; (802415c <lv_mem_buf_get+0x154>)
 80240bc:	00db      	lsls	r3, r3, #3
 80240be:	4413      	add	r3, r2
 80240c0:	799a      	ldrb	r2, [r3, #6]
 80240c2:	f042 0201 	orr.w	r2, r2, #1
 80240c6:	719a      	strb	r2, [r3, #6]
        MEM_TRACE("returning already allocated buffer (buffer id: %d, address: %p)", i_guess,
                  LV_GC_ROOT(lv_mem_buf[i_guess]).p);
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 80240c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80240cc:	4a23      	ldr	r2, [pc, #140]	; (802415c <lv_mem_buf_get+0x154>)
 80240ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80240d2:	e03f      	b.n	8024154 <lv_mem_buf_get+0x14c>
    }

    /*Reallocate a free buffer*/
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80240d4:	2300      	movs	r3, #0
 80240d6:	737b      	strb	r3, [r7, #13]
 80240d8:	e038      	b.n	802414c <lv_mem_buf_get+0x144>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 80240da:	7b7b      	ldrb	r3, [r7, #13]
 80240dc:	4a1f      	ldr	r2, [pc, #124]	; (802415c <lv_mem_buf_get+0x154>)
 80240de:	00db      	lsls	r3, r3, #3
 80240e0:	4413      	add	r3, r2
 80240e2:	799b      	ldrb	r3, [r3, #6]
 80240e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80240e8:	b2db      	uxtb	r3, r3
 80240ea:	2b00      	cmp	r3, #0
 80240ec:	d12b      	bne.n	8024146 <lv_mem_buf_get+0x13e>
            /*if this fails you probably need to increase your LV_MEM_SIZE/heap size*/
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 80240ee:	7b7b      	ldrb	r3, [r7, #13]
 80240f0:	4a1a      	ldr	r2, [pc, #104]	; (802415c <lv_mem_buf_get+0x154>)
 80240f2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80240f6:	6879      	ldr	r1, [r7, #4]
 80240f8:	4618      	mov	r0, r3
 80240fa:	f7ff ff59 	bl	8023fb0 <lv_mem_realloc>
 80240fe:	60b8      	str	r0, [r7, #8]
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 8024100:	68bb      	ldr	r3, [r7, #8]
 8024102:	2b00      	cmp	r3, #0
 8024104:	d100      	bne.n	8024108 <lv_mem_buf_get+0x100>
 8024106:	e7fe      	b.n	8024106 <lv_mem_buf_get+0xfe>
            if(buf == NULL) return NULL;
 8024108:	68bb      	ldr	r3, [r7, #8]
 802410a:	2b00      	cmp	r3, #0
 802410c:	d101      	bne.n	8024112 <lv_mem_buf_get+0x10a>
 802410e:	2300      	movs	r3, #0
 8024110:	e020      	b.n	8024154 <lv_mem_buf_get+0x14c>

            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8024112:	7b7b      	ldrb	r3, [r7, #13]
 8024114:	4a11      	ldr	r2, [pc, #68]	; (802415c <lv_mem_buf_get+0x154>)
 8024116:	00db      	lsls	r3, r3, #3
 8024118:	4413      	add	r3, r2
 802411a:	799a      	ldrb	r2, [r3, #6]
 802411c:	f042 0201 	orr.w	r2, r2, #1
 8024120:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 8024122:	7b7b      	ldrb	r3, [r7, #13]
 8024124:	687a      	ldr	r2, [r7, #4]
 8024126:	b291      	uxth	r1, r2
 8024128:	4a0c      	ldr	r2, [pc, #48]	; (802415c <lv_mem_buf_get+0x154>)
 802412a:	00db      	lsls	r3, r3, #3
 802412c:	4413      	add	r3, r2
 802412e:	460a      	mov	r2, r1
 8024130:	809a      	strh	r2, [r3, #4]
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 8024132:	7b7b      	ldrb	r3, [r7, #13]
 8024134:	4909      	ldr	r1, [pc, #36]	; (802415c <lv_mem_buf_get+0x154>)
 8024136:	68ba      	ldr	r2, [r7, #8]
 8024138:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
            MEM_TRACE("allocated (buffer id: %d, address: %p)", i, LV_GC_ROOT(lv_mem_buf[i]).p);
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 802413c:	7b7b      	ldrb	r3, [r7, #13]
 802413e:	4a07      	ldr	r2, [pc, #28]	; (802415c <lv_mem_buf_get+0x154>)
 8024140:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8024144:	e006      	b.n	8024154 <lv_mem_buf_get+0x14c>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8024146:	7b7b      	ldrb	r3, [r7, #13]
 8024148:	3301      	adds	r3, #1
 802414a:	737b      	strb	r3, [r7, #13]
 802414c:	7b7b      	ldrb	r3, [r7, #13]
 802414e:	2b0f      	cmp	r3, #15
 8024150:	d9c3      	bls.n	80240da <lv_mem_buf_get+0xd2>
        }
    }

    LV_LOG_ERROR("no more buffers. (increase LV_MEM_BUF_MAX_NUM)");
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 8024152:	e7fe      	b.n	8024152 <lv_mem_buf_get+0x14a>
    return NULL;
}
 8024154:	4618      	mov	r0, r3
 8024156:	3710      	adds	r7, #16
 8024158:	46bd      	mov	sp, r7
 802415a:	bd80      	pop	{r7, pc}
 802415c:	20000950 	.word	0x20000950

08024160 <lv_mem_buf_release>:
/**
 * Release a memory buffer
 * @param p buffer to release
 */
void lv_mem_buf_release(void * p)
{
 8024160:	b480      	push	{r7}
 8024162:	b085      	sub	sp, #20
 8024164:	af00      	add	r7, sp, #0
 8024166:	6078      	str	r0, [r7, #4]
    MEM_TRACE("begin (address: %p)", p);

    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8024168:	2300      	movs	r3, #0
 802416a:	73fb      	strb	r3, [r7, #15]
 802416c:	e012      	b.n	8024194 <lv_mem_buf_release+0x34>
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 802416e:	7bfb      	ldrb	r3, [r7, #15]
 8024170:	4a0c      	ldr	r2, [pc, #48]	; (80241a4 <lv_mem_buf_release+0x44>)
 8024172:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8024176:	687a      	ldr	r2, [r7, #4]
 8024178:	429a      	cmp	r2, r3
 802417a:	d108      	bne.n	802418e <lv_mem_buf_release+0x2e>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 802417c:	7bfb      	ldrb	r3, [r7, #15]
 802417e:	4a09      	ldr	r2, [pc, #36]	; (80241a4 <lv_mem_buf_release+0x44>)
 8024180:	00db      	lsls	r3, r3, #3
 8024182:	4413      	add	r3, r2
 8024184:	799a      	ldrb	r2, [r3, #6]
 8024186:	f36f 0200 	bfc	r2, #0, #1
 802418a:	719a      	strb	r2, [r3, #6]
            return;
 802418c:	e005      	b.n	802419a <lv_mem_buf_release+0x3a>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 802418e:	7bfb      	ldrb	r3, [r7, #15]
 8024190:	3301      	adds	r3, #1
 8024192:	73fb      	strb	r3, [r7, #15]
 8024194:	7bfb      	ldrb	r3, [r7, #15]
 8024196:	2b0f      	cmp	r3, #15
 8024198:	d9e9      	bls.n	802416e <lv_mem_buf_release+0xe>
        }
    }

    LV_LOG_ERROR("p is not a known buffer");
}
 802419a:	3714      	adds	r7, #20
 802419c:	46bd      	mov	sp, r7
 802419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241a2:	4770      	bx	lr
 80241a4:	20000950 	.word	0x20000950

080241a8 <lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void lv_mem_buf_free_all(void)
{
 80241a8:	b580      	push	{r7, lr}
 80241aa:	b082      	sub	sp, #8
 80241ac:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80241ae:	2300      	movs	r3, #0
 80241b0:	71fb      	strb	r3, [r7, #7]
 80241b2:	e022      	b.n	80241fa <lv_mem_buf_free_all+0x52>
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 80241b4:	79fb      	ldrb	r3, [r7, #7]
 80241b6:	4a15      	ldr	r2, [pc, #84]	; (802420c <lv_mem_buf_free_all+0x64>)
 80241b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80241bc:	2b00      	cmp	r3, #0
 80241be:	d019      	beq.n	80241f4 <lv_mem_buf_free_all+0x4c>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 80241c0:	79fb      	ldrb	r3, [r7, #7]
 80241c2:	4a12      	ldr	r2, [pc, #72]	; (802420c <lv_mem_buf_free_all+0x64>)
 80241c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80241c8:	4618      	mov	r0, r3
 80241ca:	f7ff fec3 	bl	8023f54 <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 80241ce:	79fb      	ldrb	r3, [r7, #7]
 80241d0:	4a0e      	ldr	r2, [pc, #56]	; (802420c <lv_mem_buf_free_all+0x64>)
 80241d2:	2100      	movs	r1, #0
 80241d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 80241d8:	79fb      	ldrb	r3, [r7, #7]
 80241da:	4a0c      	ldr	r2, [pc, #48]	; (802420c <lv_mem_buf_free_all+0x64>)
 80241dc:	00db      	lsls	r3, r3, #3
 80241de:	4413      	add	r3, r2
 80241e0:	799a      	ldrb	r2, [r3, #6]
 80241e2:	f36f 0200 	bfc	r2, #0, #1
 80241e6:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 80241e8:	79fb      	ldrb	r3, [r7, #7]
 80241ea:	4a08      	ldr	r2, [pc, #32]	; (802420c <lv_mem_buf_free_all+0x64>)
 80241ec:	00db      	lsls	r3, r3, #3
 80241ee:	4413      	add	r3, r2
 80241f0:	2200      	movs	r2, #0
 80241f2:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80241f4:	79fb      	ldrb	r3, [r7, #7]
 80241f6:	3301      	adds	r3, #1
 80241f8:	71fb      	strb	r3, [r7, #7]
 80241fa:	79fb      	ldrb	r3, [r7, #7]
 80241fc:	2b0f      	cmp	r3, #15
 80241fe:	d9d9      	bls.n	80241b4 <lv_mem_buf_free_all+0xc>
        }
    }
}
 8024200:	bf00      	nop
 8024202:	bf00      	nop
 8024204:	3708      	adds	r7, #8
 8024206:	46bd      	mov	sp, r7
 8024208:	bd80      	pop	{r7, pc}
 802420a:	bf00      	nop
 802420c:	20000950 	.word	0x20000950

08024210 <lv_memcpy>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM void * lv_memcpy(void * dst, const void * src, size_t len)
{
 8024210:	b480      	push	{r7}
 8024212:	b08b      	sub	sp, #44	; 0x2c
 8024214:	af00      	add	r7, sp, #0
 8024216:	60f8      	str	r0, [r7, #12]
 8024218:	60b9      	str	r1, [r7, #8]
 802421a:	607a      	str	r2, [r7, #4]
    uint8_t * d8 = dst;
 802421c:	68fb      	ldr	r3, [r7, #12]
 802421e:	627b      	str	r3, [r7, #36]	; 0x24
    const uint8_t * s8 = src;
 8024220:	68bb      	ldr	r3, [r7, #8]
 8024222:	623b      	str	r3, [r7, #32]

    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8024224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024226:	f003 0303 	and.w	r3, r3, #3
 802422a:	61fb      	str	r3, [r7, #28]
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 802422c:	6a3b      	ldr	r3, [r7, #32]
 802422e:	f003 0303 	and.w	r3, r3, #3
 8024232:	613b      	str	r3, [r7, #16]

    /*Byte copy for unaligned memories*/
    if(s_align != d_align) {
 8024234:	693a      	ldr	r2, [r7, #16]
 8024236:	69fb      	ldr	r3, [r7, #28]
 8024238:	429a      	cmp	r2, r3
 802423a:	f000 815b 	beq.w	80244f4 <lv_memcpy+0x2e4>
        while(len > 32) {
 802423e:	e142      	b.n	80244c6 <lv_memcpy+0x2b6>
            REPEAT8(COPY8);
 8024240:	6a3b      	ldr	r3, [r7, #32]
 8024242:	781a      	ldrb	r2, [r3, #0]
 8024244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024246:	701a      	strb	r2, [r3, #0]
 8024248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802424a:	3301      	adds	r3, #1
 802424c:	627b      	str	r3, [r7, #36]	; 0x24
 802424e:	6a3b      	ldr	r3, [r7, #32]
 8024250:	3301      	adds	r3, #1
 8024252:	623b      	str	r3, [r7, #32]
 8024254:	6a3b      	ldr	r3, [r7, #32]
 8024256:	781a      	ldrb	r2, [r3, #0]
 8024258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802425a:	701a      	strb	r2, [r3, #0]
 802425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802425e:	3301      	adds	r3, #1
 8024260:	627b      	str	r3, [r7, #36]	; 0x24
 8024262:	6a3b      	ldr	r3, [r7, #32]
 8024264:	3301      	adds	r3, #1
 8024266:	623b      	str	r3, [r7, #32]
 8024268:	6a3b      	ldr	r3, [r7, #32]
 802426a:	781a      	ldrb	r2, [r3, #0]
 802426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802426e:	701a      	strb	r2, [r3, #0]
 8024270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024272:	3301      	adds	r3, #1
 8024274:	627b      	str	r3, [r7, #36]	; 0x24
 8024276:	6a3b      	ldr	r3, [r7, #32]
 8024278:	3301      	adds	r3, #1
 802427a:	623b      	str	r3, [r7, #32]
 802427c:	6a3b      	ldr	r3, [r7, #32]
 802427e:	781a      	ldrb	r2, [r3, #0]
 8024280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024282:	701a      	strb	r2, [r3, #0]
 8024284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024286:	3301      	adds	r3, #1
 8024288:	627b      	str	r3, [r7, #36]	; 0x24
 802428a:	6a3b      	ldr	r3, [r7, #32]
 802428c:	3301      	adds	r3, #1
 802428e:	623b      	str	r3, [r7, #32]
 8024290:	6a3b      	ldr	r3, [r7, #32]
 8024292:	781a      	ldrb	r2, [r3, #0]
 8024294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024296:	701a      	strb	r2, [r3, #0]
 8024298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802429a:	3301      	adds	r3, #1
 802429c:	627b      	str	r3, [r7, #36]	; 0x24
 802429e:	6a3b      	ldr	r3, [r7, #32]
 80242a0:	3301      	adds	r3, #1
 80242a2:	623b      	str	r3, [r7, #32]
 80242a4:	6a3b      	ldr	r3, [r7, #32]
 80242a6:	781a      	ldrb	r2, [r3, #0]
 80242a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242aa:	701a      	strb	r2, [r3, #0]
 80242ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242ae:	3301      	adds	r3, #1
 80242b0:	627b      	str	r3, [r7, #36]	; 0x24
 80242b2:	6a3b      	ldr	r3, [r7, #32]
 80242b4:	3301      	adds	r3, #1
 80242b6:	623b      	str	r3, [r7, #32]
 80242b8:	6a3b      	ldr	r3, [r7, #32]
 80242ba:	781a      	ldrb	r2, [r3, #0]
 80242bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242be:	701a      	strb	r2, [r3, #0]
 80242c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242c2:	3301      	adds	r3, #1
 80242c4:	627b      	str	r3, [r7, #36]	; 0x24
 80242c6:	6a3b      	ldr	r3, [r7, #32]
 80242c8:	3301      	adds	r3, #1
 80242ca:	623b      	str	r3, [r7, #32]
 80242cc:	6a3b      	ldr	r3, [r7, #32]
 80242ce:	781a      	ldrb	r2, [r3, #0]
 80242d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242d2:	701a      	strb	r2, [r3, #0]
 80242d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242d6:	3301      	adds	r3, #1
 80242d8:	627b      	str	r3, [r7, #36]	; 0x24
 80242da:	6a3b      	ldr	r3, [r7, #32]
 80242dc:	3301      	adds	r3, #1
 80242de:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 80242e0:	6a3b      	ldr	r3, [r7, #32]
 80242e2:	781a      	ldrb	r2, [r3, #0]
 80242e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242e6:	701a      	strb	r2, [r3, #0]
 80242e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242ea:	3301      	adds	r3, #1
 80242ec:	627b      	str	r3, [r7, #36]	; 0x24
 80242ee:	6a3b      	ldr	r3, [r7, #32]
 80242f0:	3301      	adds	r3, #1
 80242f2:	623b      	str	r3, [r7, #32]
 80242f4:	6a3b      	ldr	r3, [r7, #32]
 80242f6:	781a      	ldrb	r2, [r3, #0]
 80242f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242fa:	701a      	strb	r2, [r3, #0]
 80242fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242fe:	3301      	adds	r3, #1
 8024300:	627b      	str	r3, [r7, #36]	; 0x24
 8024302:	6a3b      	ldr	r3, [r7, #32]
 8024304:	3301      	adds	r3, #1
 8024306:	623b      	str	r3, [r7, #32]
 8024308:	6a3b      	ldr	r3, [r7, #32]
 802430a:	781a      	ldrb	r2, [r3, #0]
 802430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802430e:	701a      	strb	r2, [r3, #0]
 8024310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024312:	3301      	adds	r3, #1
 8024314:	627b      	str	r3, [r7, #36]	; 0x24
 8024316:	6a3b      	ldr	r3, [r7, #32]
 8024318:	3301      	adds	r3, #1
 802431a:	623b      	str	r3, [r7, #32]
 802431c:	6a3b      	ldr	r3, [r7, #32]
 802431e:	781a      	ldrb	r2, [r3, #0]
 8024320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024322:	701a      	strb	r2, [r3, #0]
 8024324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024326:	3301      	adds	r3, #1
 8024328:	627b      	str	r3, [r7, #36]	; 0x24
 802432a:	6a3b      	ldr	r3, [r7, #32]
 802432c:	3301      	adds	r3, #1
 802432e:	623b      	str	r3, [r7, #32]
 8024330:	6a3b      	ldr	r3, [r7, #32]
 8024332:	781a      	ldrb	r2, [r3, #0]
 8024334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024336:	701a      	strb	r2, [r3, #0]
 8024338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802433a:	3301      	adds	r3, #1
 802433c:	627b      	str	r3, [r7, #36]	; 0x24
 802433e:	6a3b      	ldr	r3, [r7, #32]
 8024340:	3301      	adds	r3, #1
 8024342:	623b      	str	r3, [r7, #32]
 8024344:	6a3b      	ldr	r3, [r7, #32]
 8024346:	781a      	ldrb	r2, [r3, #0]
 8024348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802434a:	701a      	strb	r2, [r3, #0]
 802434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802434e:	3301      	adds	r3, #1
 8024350:	627b      	str	r3, [r7, #36]	; 0x24
 8024352:	6a3b      	ldr	r3, [r7, #32]
 8024354:	3301      	adds	r3, #1
 8024356:	623b      	str	r3, [r7, #32]
 8024358:	6a3b      	ldr	r3, [r7, #32]
 802435a:	781a      	ldrb	r2, [r3, #0]
 802435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802435e:	701a      	strb	r2, [r3, #0]
 8024360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024362:	3301      	adds	r3, #1
 8024364:	627b      	str	r3, [r7, #36]	; 0x24
 8024366:	6a3b      	ldr	r3, [r7, #32]
 8024368:	3301      	adds	r3, #1
 802436a:	623b      	str	r3, [r7, #32]
 802436c:	6a3b      	ldr	r3, [r7, #32]
 802436e:	781a      	ldrb	r2, [r3, #0]
 8024370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024372:	701a      	strb	r2, [r3, #0]
 8024374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024376:	3301      	adds	r3, #1
 8024378:	627b      	str	r3, [r7, #36]	; 0x24
 802437a:	6a3b      	ldr	r3, [r7, #32]
 802437c:	3301      	adds	r3, #1
 802437e:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 8024380:	6a3b      	ldr	r3, [r7, #32]
 8024382:	781a      	ldrb	r2, [r3, #0]
 8024384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024386:	701a      	strb	r2, [r3, #0]
 8024388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802438a:	3301      	adds	r3, #1
 802438c:	627b      	str	r3, [r7, #36]	; 0x24
 802438e:	6a3b      	ldr	r3, [r7, #32]
 8024390:	3301      	adds	r3, #1
 8024392:	623b      	str	r3, [r7, #32]
 8024394:	6a3b      	ldr	r3, [r7, #32]
 8024396:	781a      	ldrb	r2, [r3, #0]
 8024398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802439a:	701a      	strb	r2, [r3, #0]
 802439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802439e:	3301      	adds	r3, #1
 80243a0:	627b      	str	r3, [r7, #36]	; 0x24
 80243a2:	6a3b      	ldr	r3, [r7, #32]
 80243a4:	3301      	adds	r3, #1
 80243a6:	623b      	str	r3, [r7, #32]
 80243a8:	6a3b      	ldr	r3, [r7, #32]
 80243aa:	781a      	ldrb	r2, [r3, #0]
 80243ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243ae:	701a      	strb	r2, [r3, #0]
 80243b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243b2:	3301      	adds	r3, #1
 80243b4:	627b      	str	r3, [r7, #36]	; 0x24
 80243b6:	6a3b      	ldr	r3, [r7, #32]
 80243b8:	3301      	adds	r3, #1
 80243ba:	623b      	str	r3, [r7, #32]
 80243bc:	6a3b      	ldr	r3, [r7, #32]
 80243be:	781a      	ldrb	r2, [r3, #0]
 80243c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243c2:	701a      	strb	r2, [r3, #0]
 80243c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243c6:	3301      	adds	r3, #1
 80243c8:	627b      	str	r3, [r7, #36]	; 0x24
 80243ca:	6a3b      	ldr	r3, [r7, #32]
 80243cc:	3301      	adds	r3, #1
 80243ce:	623b      	str	r3, [r7, #32]
 80243d0:	6a3b      	ldr	r3, [r7, #32]
 80243d2:	781a      	ldrb	r2, [r3, #0]
 80243d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243d6:	701a      	strb	r2, [r3, #0]
 80243d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243da:	3301      	adds	r3, #1
 80243dc:	627b      	str	r3, [r7, #36]	; 0x24
 80243de:	6a3b      	ldr	r3, [r7, #32]
 80243e0:	3301      	adds	r3, #1
 80243e2:	623b      	str	r3, [r7, #32]
 80243e4:	6a3b      	ldr	r3, [r7, #32]
 80243e6:	781a      	ldrb	r2, [r3, #0]
 80243e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243ea:	701a      	strb	r2, [r3, #0]
 80243ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243ee:	3301      	adds	r3, #1
 80243f0:	627b      	str	r3, [r7, #36]	; 0x24
 80243f2:	6a3b      	ldr	r3, [r7, #32]
 80243f4:	3301      	adds	r3, #1
 80243f6:	623b      	str	r3, [r7, #32]
 80243f8:	6a3b      	ldr	r3, [r7, #32]
 80243fa:	781a      	ldrb	r2, [r3, #0]
 80243fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80243fe:	701a      	strb	r2, [r3, #0]
 8024400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024402:	3301      	adds	r3, #1
 8024404:	627b      	str	r3, [r7, #36]	; 0x24
 8024406:	6a3b      	ldr	r3, [r7, #32]
 8024408:	3301      	adds	r3, #1
 802440a:	623b      	str	r3, [r7, #32]
 802440c:	6a3b      	ldr	r3, [r7, #32]
 802440e:	781a      	ldrb	r2, [r3, #0]
 8024410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024412:	701a      	strb	r2, [r3, #0]
 8024414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024416:	3301      	adds	r3, #1
 8024418:	627b      	str	r3, [r7, #36]	; 0x24
 802441a:	6a3b      	ldr	r3, [r7, #32]
 802441c:	3301      	adds	r3, #1
 802441e:	623b      	str	r3, [r7, #32]
            REPEAT8(COPY8);
 8024420:	6a3b      	ldr	r3, [r7, #32]
 8024422:	781a      	ldrb	r2, [r3, #0]
 8024424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024426:	701a      	strb	r2, [r3, #0]
 8024428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802442a:	3301      	adds	r3, #1
 802442c:	627b      	str	r3, [r7, #36]	; 0x24
 802442e:	6a3b      	ldr	r3, [r7, #32]
 8024430:	3301      	adds	r3, #1
 8024432:	623b      	str	r3, [r7, #32]
 8024434:	6a3b      	ldr	r3, [r7, #32]
 8024436:	781a      	ldrb	r2, [r3, #0]
 8024438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802443a:	701a      	strb	r2, [r3, #0]
 802443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802443e:	3301      	adds	r3, #1
 8024440:	627b      	str	r3, [r7, #36]	; 0x24
 8024442:	6a3b      	ldr	r3, [r7, #32]
 8024444:	3301      	adds	r3, #1
 8024446:	623b      	str	r3, [r7, #32]
 8024448:	6a3b      	ldr	r3, [r7, #32]
 802444a:	781a      	ldrb	r2, [r3, #0]
 802444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802444e:	701a      	strb	r2, [r3, #0]
 8024450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024452:	3301      	adds	r3, #1
 8024454:	627b      	str	r3, [r7, #36]	; 0x24
 8024456:	6a3b      	ldr	r3, [r7, #32]
 8024458:	3301      	adds	r3, #1
 802445a:	623b      	str	r3, [r7, #32]
 802445c:	6a3b      	ldr	r3, [r7, #32]
 802445e:	781a      	ldrb	r2, [r3, #0]
 8024460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024462:	701a      	strb	r2, [r3, #0]
 8024464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024466:	3301      	adds	r3, #1
 8024468:	627b      	str	r3, [r7, #36]	; 0x24
 802446a:	6a3b      	ldr	r3, [r7, #32]
 802446c:	3301      	adds	r3, #1
 802446e:	623b      	str	r3, [r7, #32]
 8024470:	6a3b      	ldr	r3, [r7, #32]
 8024472:	781a      	ldrb	r2, [r3, #0]
 8024474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024476:	701a      	strb	r2, [r3, #0]
 8024478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802447a:	3301      	adds	r3, #1
 802447c:	627b      	str	r3, [r7, #36]	; 0x24
 802447e:	6a3b      	ldr	r3, [r7, #32]
 8024480:	3301      	adds	r3, #1
 8024482:	623b      	str	r3, [r7, #32]
 8024484:	6a3b      	ldr	r3, [r7, #32]
 8024486:	781a      	ldrb	r2, [r3, #0]
 8024488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802448a:	701a      	strb	r2, [r3, #0]
 802448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802448e:	3301      	adds	r3, #1
 8024490:	627b      	str	r3, [r7, #36]	; 0x24
 8024492:	6a3b      	ldr	r3, [r7, #32]
 8024494:	3301      	adds	r3, #1
 8024496:	623b      	str	r3, [r7, #32]
 8024498:	6a3b      	ldr	r3, [r7, #32]
 802449a:	781a      	ldrb	r2, [r3, #0]
 802449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802449e:	701a      	strb	r2, [r3, #0]
 80244a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244a2:	3301      	adds	r3, #1
 80244a4:	627b      	str	r3, [r7, #36]	; 0x24
 80244a6:	6a3b      	ldr	r3, [r7, #32]
 80244a8:	3301      	adds	r3, #1
 80244aa:	623b      	str	r3, [r7, #32]
 80244ac:	6a3b      	ldr	r3, [r7, #32]
 80244ae:	781a      	ldrb	r2, [r3, #0]
 80244b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244b2:	701a      	strb	r2, [r3, #0]
 80244b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244b6:	3301      	adds	r3, #1
 80244b8:	627b      	str	r3, [r7, #36]	; 0x24
 80244ba:	6a3b      	ldr	r3, [r7, #32]
 80244bc:	3301      	adds	r3, #1
 80244be:	623b      	str	r3, [r7, #32]
            len -= 32;
 80244c0:	687b      	ldr	r3, [r7, #4]
 80244c2:	3b20      	subs	r3, #32
 80244c4:	607b      	str	r3, [r7, #4]
        while(len > 32) {
 80244c6:	687b      	ldr	r3, [r7, #4]
 80244c8:	2b20      	cmp	r3, #32
 80244ca:	f63f aeb9 	bhi.w	8024240 <lv_memcpy+0x30>
        }
        while(len) {
 80244ce:	e00c      	b.n	80244ea <lv_memcpy+0x2da>
            COPY8
 80244d0:	6a3b      	ldr	r3, [r7, #32]
 80244d2:	781a      	ldrb	r2, [r3, #0]
 80244d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244d6:	701a      	strb	r2, [r3, #0]
 80244d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80244da:	3301      	adds	r3, #1
 80244dc:	627b      	str	r3, [r7, #36]	; 0x24
 80244de:	6a3b      	ldr	r3, [r7, #32]
 80244e0:	3301      	adds	r3, #1
 80244e2:	623b      	str	r3, [r7, #32]
            len--;
 80244e4:	687b      	ldr	r3, [r7, #4]
 80244e6:	3b01      	subs	r3, #1
 80244e8:	607b      	str	r3, [r7, #4]
        while(len) {
 80244ea:	687b      	ldr	r3, [r7, #4]
 80244ec:	2b00      	cmp	r3, #0
 80244ee:	d1ef      	bne.n	80244d0 <lv_memcpy+0x2c0>
        }
        return dst;
 80244f0:	68fb      	ldr	r3, [r7, #12]
 80244f2:	e09f      	b.n	8024634 <lv_memcpy+0x424>
    }

    /*Make the memories aligned*/
    if(d_align) {
 80244f4:	69fb      	ldr	r3, [r7, #28]
 80244f6:	2b00      	cmp	r3, #0
 80244f8:	d01a      	beq.n	8024530 <lv_memcpy+0x320>
        d_align = ALIGN_MASK + 1 - d_align;
 80244fa:	69fb      	ldr	r3, [r7, #28]
 80244fc:	f1c3 0304 	rsb	r3, r3, #4
 8024500:	61fb      	str	r3, [r7, #28]
        while(d_align && len) {
 8024502:	e00f      	b.n	8024524 <lv_memcpy+0x314>
            COPY8;
 8024504:	6a3b      	ldr	r3, [r7, #32]
 8024506:	781a      	ldrb	r2, [r3, #0]
 8024508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802450a:	701a      	strb	r2, [r3, #0]
 802450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802450e:	3301      	adds	r3, #1
 8024510:	627b      	str	r3, [r7, #36]	; 0x24
 8024512:	6a3b      	ldr	r3, [r7, #32]
 8024514:	3301      	adds	r3, #1
 8024516:	623b      	str	r3, [r7, #32]
            d_align--;
 8024518:	69fb      	ldr	r3, [r7, #28]
 802451a:	3b01      	subs	r3, #1
 802451c:	61fb      	str	r3, [r7, #28]
            len--;
 802451e:	687b      	ldr	r3, [r7, #4]
 8024520:	3b01      	subs	r3, #1
 8024522:	607b      	str	r3, [r7, #4]
        while(d_align && len) {
 8024524:	69fb      	ldr	r3, [r7, #28]
 8024526:	2b00      	cmp	r3, #0
 8024528:	d002      	beq.n	8024530 <lv_memcpy+0x320>
 802452a:	687b      	ldr	r3, [r7, #4]
 802452c:	2b00      	cmp	r3, #0
 802452e:	d1e9      	bne.n	8024504 <lv_memcpy+0x2f4>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 8024530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024532:	61bb      	str	r3, [r7, #24]
    const uint32_t * s32 = (uint32_t *)s8;
 8024534:	6a3b      	ldr	r3, [r7, #32]
 8024536:	617b      	str	r3, [r7, #20]
    while(len > 32) {
 8024538:	e052      	b.n	80245e0 <lv_memcpy+0x3d0>
        REPEAT8(COPY32)
 802453a:	697b      	ldr	r3, [r7, #20]
 802453c:	681a      	ldr	r2, [r3, #0]
 802453e:	69bb      	ldr	r3, [r7, #24]
 8024540:	601a      	str	r2, [r3, #0]
 8024542:	69bb      	ldr	r3, [r7, #24]
 8024544:	3304      	adds	r3, #4
 8024546:	61bb      	str	r3, [r7, #24]
 8024548:	697b      	ldr	r3, [r7, #20]
 802454a:	3304      	adds	r3, #4
 802454c:	617b      	str	r3, [r7, #20]
 802454e:	697b      	ldr	r3, [r7, #20]
 8024550:	681a      	ldr	r2, [r3, #0]
 8024552:	69bb      	ldr	r3, [r7, #24]
 8024554:	601a      	str	r2, [r3, #0]
 8024556:	69bb      	ldr	r3, [r7, #24]
 8024558:	3304      	adds	r3, #4
 802455a:	61bb      	str	r3, [r7, #24]
 802455c:	697b      	ldr	r3, [r7, #20]
 802455e:	3304      	adds	r3, #4
 8024560:	617b      	str	r3, [r7, #20]
 8024562:	697b      	ldr	r3, [r7, #20]
 8024564:	681a      	ldr	r2, [r3, #0]
 8024566:	69bb      	ldr	r3, [r7, #24]
 8024568:	601a      	str	r2, [r3, #0]
 802456a:	69bb      	ldr	r3, [r7, #24]
 802456c:	3304      	adds	r3, #4
 802456e:	61bb      	str	r3, [r7, #24]
 8024570:	697b      	ldr	r3, [r7, #20]
 8024572:	3304      	adds	r3, #4
 8024574:	617b      	str	r3, [r7, #20]
 8024576:	697b      	ldr	r3, [r7, #20]
 8024578:	681a      	ldr	r2, [r3, #0]
 802457a:	69bb      	ldr	r3, [r7, #24]
 802457c:	601a      	str	r2, [r3, #0]
 802457e:	69bb      	ldr	r3, [r7, #24]
 8024580:	3304      	adds	r3, #4
 8024582:	61bb      	str	r3, [r7, #24]
 8024584:	697b      	ldr	r3, [r7, #20]
 8024586:	3304      	adds	r3, #4
 8024588:	617b      	str	r3, [r7, #20]
 802458a:	697b      	ldr	r3, [r7, #20]
 802458c:	681a      	ldr	r2, [r3, #0]
 802458e:	69bb      	ldr	r3, [r7, #24]
 8024590:	601a      	str	r2, [r3, #0]
 8024592:	69bb      	ldr	r3, [r7, #24]
 8024594:	3304      	adds	r3, #4
 8024596:	61bb      	str	r3, [r7, #24]
 8024598:	697b      	ldr	r3, [r7, #20]
 802459a:	3304      	adds	r3, #4
 802459c:	617b      	str	r3, [r7, #20]
 802459e:	697b      	ldr	r3, [r7, #20]
 80245a0:	681a      	ldr	r2, [r3, #0]
 80245a2:	69bb      	ldr	r3, [r7, #24]
 80245a4:	601a      	str	r2, [r3, #0]
 80245a6:	69bb      	ldr	r3, [r7, #24]
 80245a8:	3304      	adds	r3, #4
 80245aa:	61bb      	str	r3, [r7, #24]
 80245ac:	697b      	ldr	r3, [r7, #20]
 80245ae:	3304      	adds	r3, #4
 80245b0:	617b      	str	r3, [r7, #20]
 80245b2:	697b      	ldr	r3, [r7, #20]
 80245b4:	681a      	ldr	r2, [r3, #0]
 80245b6:	69bb      	ldr	r3, [r7, #24]
 80245b8:	601a      	str	r2, [r3, #0]
 80245ba:	69bb      	ldr	r3, [r7, #24]
 80245bc:	3304      	adds	r3, #4
 80245be:	61bb      	str	r3, [r7, #24]
 80245c0:	697b      	ldr	r3, [r7, #20]
 80245c2:	3304      	adds	r3, #4
 80245c4:	617b      	str	r3, [r7, #20]
 80245c6:	697b      	ldr	r3, [r7, #20]
 80245c8:	681a      	ldr	r2, [r3, #0]
 80245ca:	69bb      	ldr	r3, [r7, #24]
 80245cc:	601a      	str	r2, [r3, #0]
 80245ce:	69bb      	ldr	r3, [r7, #24]
 80245d0:	3304      	adds	r3, #4
 80245d2:	61bb      	str	r3, [r7, #24]
 80245d4:	697b      	ldr	r3, [r7, #20]
 80245d6:	3304      	adds	r3, #4
 80245d8:	617b      	str	r3, [r7, #20]
        len -= 32;
 80245da:	687b      	ldr	r3, [r7, #4]
 80245dc:	3b20      	subs	r3, #32
 80245de:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 80245e0:	687b      	ldr	r3, [r7, #4]
 80245e2:	2b20      	cmp	r3, #32
 80245e4:	d8a9      	bhi.n	802453a <lv_memcpy+0x32a>
    }

    while(len > 4) {
 80245e6:	e00c      	b.n	8024602 <lv_memcpy+0x3f2>
        COPY32;
 80245e8:	697b      	ldr	r3, [r7, #20]
 80245ea:	681a      	ldr	r2, [r3, #0]
 80245ec:	69bb      	ldr	r3, [r7, #24]
 80245ee:	601a      	str	r2, [r3, #0]
 80245f0:	69bb      	ldr	r3, [r7, #24]
 80245f2:	3304      	adds	r3, #4
 80245f4:	61bb      	str	r3, [r7, #24]
 80245f6:	697b      	ldr	r3, [r7, #20]
 80245f8:	3304      	adds	r3, #4
 80245fa:	617b      	str	r3, [r7, #20]
        len -= 4;
 80245fc:	687b      	ldr	r3, [r7, #4]
 80245fe:	3b04      	subs	r3, #4
 8024600:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 8024602:	687b      	ldr	r3, [r7, #4]
 8024604:	2b04      	cmp	r3, #4
 8024606:	d8ef      	bhi.n	80245e8 <lv_memcpy+0x3d8>
    }

    d8 = (uint8_t *)d32;
 8024608:	69bb      	ldr	r3, [r7, #24]
 802460a:	627b      	str	r3, [r7, #36]	; 0x24
    s8 = (const uint8_t *)s32;
 802460c:	697b      	ldr	r3, [r7, #20]
 802460e:	623b      	str	r3, [r7, #32]
    while(len) {
 8024610:	e00c      	b.n	802462c <lv_memcpy+0x41c>
        COPY8
 8024612:	6a3b      	ldr	r3, [r7, #32]
 8024614:	781a      	ldrb	r2, [r3, #0]
 8024616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024618:	701a      	strb	r2, [r3, #0]
 802461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802461c:	3301      	adds	r3, #1
 802461e:	627b      	str	r3, [r7, #36]	; 0x24
 8024620:	6a3b      	ldr	r3, [r7, #32]
 8024622:	3301      	adds	r3, #1
 8024624:	623b      	str	r3, [r7, #32]
        len--;
 8024626:	687b      	ldr	r3, [r7, #4]
 8024628:	3b01      	subs	r3, #1
 802462a:	607b      	str	r3, [r7, #4]
    while(len) {
 802462c:	687b      	ldr	r3, [r7, #4]
 802462e:	2b00      	cmp	r3, #0
 8024630:	d1ef      	bne.n	8024612 <lv_memcpy+0x402>
    }

    return dst;
 8024632:	68fb      	ldr	r3, [r7, #12]
}
 8024634:	4618      	mov	r0, r3
 8024636:	372c      	adds	r7, #44	; 0x2c
 8024638:	46bd      	mov	sp, r7
 802463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802463e:	4770      	bx	lr

08024640 <lv_memset>:
 * @param dst pointer to the destination buffer
 * @param v value to set [0..255]
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset(void * dst, uint8_t v, size_t len)
{
 8024640:	b480      	push	{r7}
 8024642:	b089      	sub	sp, #36	; 0x24
 8024644:	af00      	add	r7, sp, #0
 8024646:	60f8      	str	r0, [r7, #12]
 8024648:	460b      	mov	r3, r1
 802464a:	607a      	str	r2, [r7, #4]
 802464c:	72fb      	strb	r3, [r7, #11]

    uint8_t * d8 = (uint8_t *)dst;
 802464e:	68fb      	ldr	r3, [r7, #12]
 8024650:	61fb      	str	r3, [r7, #28]

    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 8024652:	69fb      	ldr	r3, [r7, #28]
 8024654:	f003 0303 	and.w	r3, r3, #3
 8024658:	61bb      	str	r3, [r7, #24]

    /*Make the address aligned*/
    if(d_align) {
 802465a:	69bb      	ldr	r3, [r7, #24]
 802465c:	2b00      	cmp	r3, #0
 802465e:	d016      	beq.n	802468e <lv_memset+0x4e>
        d_align = ALIGN_MASK + 1 - d_align;
 8024660:	69bb      	ldr	r3, [r7, #24]
 8024662:	f1c3 0304 	rsb	r3, r3, #4
 8024666:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 8024668:	e00b      	b.n	8024682 <lv_memset+0x42>
            SET8(v);
 802466a:	69fb      	ldr	r3, [r7, #28]
 802466c:	7afa      	ldrb	r2, [r7, #11]
 802466e:	701a      	strb	r2, [r3, #0]
 8024670:	69fb      	ldr	r3, [r7, #28]
 8024672:	3301      	adds	r3, #1
 8024674:	61fb      	str	r3, [r7, #28]
            len--;
 8024676:	687b      	ldr	r3, [r7, #4]
 8024678:	3b01      	subs	r3, #1
 802467a:	607b      	str	r3, [r7, #4]
            d_align--;
 802467c:	69bb      	ldr	r3, [r7, #24]
 802467e:	3b01      	subs	r3, #1
 8024680:	61bb      	str	r3, [r7, #24]
        while(d_align && len) {
 8024682:	69bb      	ldr	r3, [r7, #24]
 8024684:	2b00      	cmp	r3, #0
 8024686:	d002      	beq.n	802468e <lv_memset+0x4e>
 8024688:	687b      	ldr	r3, [r7, #4]
 802468a:	2b00      	cmp	r3, #0
 802468c:	d1ed      	bne.n	802466a <lv_memset+0x2a>
        }
    }

    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
 802468e:	7afa      	ldrb	r2, [r7, #11]
 8024690:	7afb      	ldrb	r3, [r7, #11]
 8024692:	021b      	lsls	r3, r3, #8
 8024694:	441a      	add	r2, r3
 8024696:	7afb      	ldrb	r3, [r7, #11]
 8024698:	041b      	lsls	r3, r3, #16
 802469a:	441a      	add	r2, r3
 802469c:	7afb      	ldrb	r3, [r7, #11]
 802469e:	061b      	lsls	r3, r3, #24
 80246a0:	4413      	add	r3, r2
 80246a2:	613b      	str	r3, [r7, #16]

    uint32_t * d32 = (uint32_t *)d8;
 80246a4:	69fb      	ldr	r3, [r7, #28]
 80246a6:	617b      	str	r3, [r7, #20]

    while(len > 32) {
 80246a8:	e032      	b.n	8024710 <lv_memset+0xd0>
        REPEAT8(SET32(v32));
 80246aa:	697b      	ldr	r3, [r7, #20]
 80246ac:	693a      	ldr	r2, [r7, #16]
 80246ae:	601a      	str	r2, [r3, #0]
 80246b0:	697b      	ldr	r3, [r7, #20]
 80246b2:	3304      	adds	r3, #4
 80246b4:	617b      	str	r3, [r7, #20]
 80246b6:	697b      	ldr	r3, [r7, #20]
 80246b8:	693a      	ldr	r2, [r7, #16]
 80246ba:	601a      	str	r2, [r3, #0]
 80246bc:	697b      	ldr	r3, [r7, #20]
 80246be:	3304      	adds	r3, #4
 80246c0:	617b      	str	r3, [r7, #20]
 80246c2:	697b      	ldr	r3, [r7, #20]
 80246c4:	693a      	ldr	r2, [r7, #16]
 80246c6:	601a      	str	r2, [r3, #0]
 80246c8:	697b      	ldr	r3, [r7, #20]
 80246ca:	3304      	adds	r3, #4
 80246cc:	617b      	str	r3, [r7, #20]
 80246ce:	697b      	ldr	r3, [r7, #20]
 80246d0:	693a      	ldr	r2, [r7, #16]
 80246d2:	601a      	str	r2, [r3, #0]
 80246d4:	697b      	ldr	r3, [r7, #20]
 80246d6:	3304      	adds	r3, #4
 80246d8:	617b      	str	r3, [r7, #20]
 80246da:	697b      	ldr	r3, [r7, #20]
 80246dc:	693a      	ldr	r2, [r7, #16]
 80246de:	601a      	str	r2, [r3, #0]
 80246e0:	697b      	ldr	r3, [r7, #20]
 80246e2:	3304      	adds	r3, #4
 80246e4:	617b      	str	r3, [r7, #20]
 80246e6:	697b      	ldr	r3, [r7, #20]
 80246e8:	693a      	ldr	r2, [r7, #16]
 80246ea:	601a      	str	r2, [r3, #0]
 80246ec:	697b      	ldr	r3, [r7, #20]
 80246ee:	3304      	adds	r3, #4
 80246f0:	617b      	str	r3, [r7, #20]
 80246f2:	697b      	ldr	r3, [r7, #20]
 80246f4:	693a      	ldr	r2, [r7, #16]
 80246f6:	601a      	str	r2, [r3, #0]
 80246f8:	697b      	ldr	r3, [r7, #20]
 80246fa:	3304      	adds	r3, #4
 80246fc:	617b      	str	r3, [r7, #20]
 80246fe:	697b      	ldr	r3, [r7, #20]
 8024700:	693a      	ldr	r2, [r7, #16]
 8024702:	601a      	str	r2, [r3, #0]
 8024704:	697b      	ldr	r3, [r7, #20]
 8024706:	3304      	adds	r3, #4
 8024708:	617b      	str	r3, [r7, #20]
        len -= 32;
 802470a:	687b      	ldr	r3, [r7, #4]
 802470c:	3b20      	subs	r3, #32
 802470e:	607b      	str	r3, [r7, #4]
    while(len > 32) {
 8024710:	687b      	ldr	r3, [r7, #4]
 8024712:	2b20      	cmp	r3, #32
 8024714:	d8c9      	bhi.n	80246aa <lv_memset+0x6a>
    }

    while(len > 4) {
 8024716:	e008      	b.n	802472a <lv_memset+0xea>
        SET32(v32);
 8024718:	697b      	ldr	r3, [r7, #20]
 802471a:	693a      	ldr	r2, [r7, #16]
 802471c:	601a      	str	r2, [r3, #0]
 802471e:	697b      	ldr	r3, [r7, #20]
 8024720:	3304      	adds	r3, #4
 8024722:	617b      	str	r3, [r7, #20]
        len -= 4;
 8024724:	687b      	ldr	r3, [r7, #4]
 8024726:	3b04      	subs	r3, #4
 8024728:	607b      	str	r3, [r7, #4]
    while(len > 4) {
 802472a:	687b      	ldr	r3, [r7, #4]
 802472c:	2b04      	cmp	r3, #4
 802472e:	d8f3      	bhi.n	8024718 <lv_memset+0xd8>
    }

    d8 = (uint8_t *)d32;
 8024730:	697b      	ldr	r3, [r7, #20]
 8024732:	61fb      	str	r3, [r7, #28]
    while(len) {
 8024734:	e008      	b.n	8024748 <lv_memset+0x108>
        SET8(v);
 8024736:	69fb      	ldr	r3, [r7, #28]
 8024738:	7afa      	ldrb	r2, [r7, #11]
 802473a:	701a      	strb	r2, [r3, #0]
 802473c:	69fb      	ldr	r3, [r7, #28]
 802473e:	3301      	adds	r3, #1
 8024740:	61fb      	str	r3, [r7, #28]
        len--;
 8024742:	687b      	ldr	r3, [r7, #4]
 8024744:	3b01      	subs	r3, #1
 8024746:	607b      	str	r3, [r7, #4]
    while(len) {
 8024748:	687b      	ldr	r3, [r7, #4]
 802474a:	2b00      	cmp	r3, #0
 802474c:	d1f3      	bne.n	8024736 <lv_memset+0xf6>
    }
}
 802474e:	bf00      	nop
 8024750:	bf00      	nop
 8024752:	3724      	adds	r7, #36	; 0x24
 8024754:	46bd      	mov	sp, r7
 8024756:	f85d 7b04 	ldr.w	r7, [sp], #4
 802475a:	4770      	bx	lr

0802475c <lv_memset_00>:
 * Same as `memset(dst, 0x00, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset_00(void * dst, size_t len)
{
 802475c:	b480      	push	{r7}
 802475e:	b087      	sub	sp, #28
 8024760:	af00      	add	r7, sp, #0
 8024762:	6078      	str	r0, [r7, #4]
 8024764:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *)dst;
 8024766:	687b      	ldr	r3, [r7, #4]
 8024768:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 802476a:	697b      	ldr	r3, [r7, #20]
 802476c:	f003 0303 	and.w	r3, r3, #3
 8024770:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 8024772:	693b      	ldr	r3, [r7, #16]
 8024774:	2b00      	cmp	r3, #0
 8024776:	d016      	beq.n	80247a6 <lv_memset_00+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 8024778:	693b      	ldr	r3, [r7, #16]
 802477a:	f1c3 0304 	rsb	r3, r3, #4
 802477e:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 8024780:	e00b      	b.n	802479a <lv_memset_00+0x3e>
            SET8(0);
 8024782:	697b      	ldr	r3, [r7, #20]
 8024784:	2200      	movs	r2, #0
 8024786:	701a      	strb	r2, [r3, #0]
 8024788:	697b      	ldr	r3, [r7, #20]
 802478a:	3301      	adds	r3, #1
 802478c:	617b      	str	r3, [r7, #20]
            len--;
 802478e:	683b      	ldr	r3, [r7, #0]
 8024790:	3b01      	subs	r3, #1
 8024792:	603b      	str	r3, [r7, #0]
            d_align--;
 8024794:	693b      	ldr	r3, [r7, #16]
 8024796:	3b01      	subs	r3, #1
 8024798:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 802479a:	693b      	ldr	r3, [r7, #16]
 802479c:	2b00      	cmp	r3, #0
 802479e:	d002      	beq.n	80247a6 <lv_memset_00+0x4a>
 80247a0:	683b      	ldr	r3, [r7, #0]
 80247a2:	2b00      	cmp	r3, #0
 80247a4:	d1ed      	bne.n	8024782 <lv_memset_00+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 80247a6:	697b      	ldr	r3, [r7, #20]
 80247a8:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 80247aa:	e032      	b.n	8024812 <lv_memset_00+0xb6>
        REPEAT8(SET32(0));
 80247ac:	68fb      	ldr	r3, [r7, #12]
 80247ae:	2200      	movs	r2, #0
 80247b0:	601a      	str	r2, [r3, #0]
 80247b2:	68fb      	ldr	r3, [r7, #12]
 80247b4:	3304      	adds	r3, #4
 80247b6:	60fb      	str	r3, [r7, #12]
 80247b8:	68fb      	ldr	r3, [r7, #12]
 80247ba:	2200      	movs	r2, #0
 80247bc:	601a      	str	r2, [r3, #0]
 80247be:	68fb      	ldr	r3, [r7, #12]
 80247c0:	3304      	adds	r3, #4
 80247c2:	60fb      	str	r3, [r7, #12]
 80247c4:	68fb      	ldr	r3, [r7, #12]
 80247c6:	2200      	movs	r2, #0
 80247c8:	601a      	str	r2, [r3, #0]
 80247ca:	68fb      	ldr	r3, [r7, #12]
 80247cc:	3304      	adds	r3, #4
 80247ce:	60fb      	str	r3, [r7, #12]
 80247d0:	68fb      	ldr	r3, [r7, #12]
 80247d2:	2200      	movs	r2, #0
 80247d4:	601a      	str	r2, [r3, #0]
 80247d6:	68fb      	ldr	r3, [r7, #12]
 80247d8:	3304      	adds	r3, #4
 80247da:	60fb      	str	r3, [r7, #12]
 80247dc:	68fb      	ldr	r3, [r7, #12]
 80247de:	2200      	movs	r2, #0
 80247e0:	601a      	str	r2, [r3, #0]
 80247e2:	68fb      	ldr	r3, [r7, #12]
 80247e4:	3304      	adds	r3, #4
 80247e6:	60fb      	str	r3, [r7, #12]
 80247e8:	68fb      	ldr	r3, [r7, #12]
 80247ea:	2200      	movs	r2, #0
 80247ec:	601a      	str	r2, [r3, #0]
 80247ee:	68fb      	ldr	r3, [r7, #12]
 80247f0:	3304      	adds	r3, #4
 80247f2:	60fb      	str	r3, [r7, #12]
 80247f4:	68fb      	ldr	r3, [r7, #12]
 80247f6:	2200      	movs	r2, #0
 80247f8:	601a      	str	r2, [r3, #0]
 80247fa:	68fb      	ldr	r3, [r7, #12]
 80247fc:	3304      	adds	r3, #4
 80247fe:	60fb      	str	r3, [r7, #12]
 8024800:	68fb      	ldr	r3, [r7, #12]
 8024802:	2200      	movs	r2, #0
 8024804:	601a      	str	r2, [r3, #0]
 8024806:	68fb      	ldr	r3, [r7, #12]
 8024808:	3304      	adds	r3, #4
 802480a:	60fb      	str	r3, [r7, #12]
        len -= 32;
 802480c:	683b      	ldr	r3, [r7, #0]
 802480e:	3b20      	subs	r3, #32
 8024810:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 8024812:	683b      	ldr	r3, [r7, #0]
 8024814:	2b20      	cmp	r3, #32
 8024816:	d8c9      	bhi.n	80247ac <lv_memset_00+0x50>
    }

    while(len > 4) {
 8024818:	e008      	b.n	802482c <lv_memset_00+0xd0>
        SET32(0);
 802481a:	68fb      	ldr	r3, [r7, #12]
 802481c:	2200      	movs	r2, #0
 802481e:	601a      	str	r2, [r3, #0]
 8024820:	68fb      	ldr	r3, [r7, #12]
 8024822:	3304      	adds	r3, #4
 8024824:	60fb      	str	r3, [r7, #12]
        len -= 4;
 8024826:	683b      	ldr	r3, [r7, #0]
 8024828:	3b04      	subs	r3, #4
 802482a:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 802482c:	683b      	ldr	r3, [r7, #0]
 802482e:	2b04      	cmp	r3, #4
 8024830:	d8f3      	bhi.n	802481a <lv_memset_00+0xbe>
    }

    d8 = (uint8_t *)d32;
 8024832:	68fb      	ldr	r3, [r7, #12]
 8024834:	617b      	str	r3, [r7, #20]
    while(len) {
 8024836:	e008      	b.n	802484a <lv_memset_00+0xee>
        SET8(0);
 8024838:	697b      	ldr	r3, [r7, #20]
 802483a:	2200      	movs	r2, #0
 802483c:	701a      	strb	r2, [r3, #0]
 802483e:	697b      	ldr	r3, [r7, #20]
 8024840:	3301      	adds	r3, #1
 8024842:	617b      	str	r3, [r7, #20]
        len--;
 8024844:	683b      	ldr	r3, [r7, #0]
 8024846:	3b01      	subs	r3, #1
 8024848:	603b      	str	r3, [r7, #0]
    while(len) {
 802484a:	683b      	ldr	r3, [r7, #0]
 802484c:	2b00      	cmp	r3, #0
 802484e:	d1f3      	bne.n	8024838 <lv_memset_00+0xdc>
    }
}
 8024850:	bf00      	nop
 8024852:	bf00      	nop
 8024854:	371c      	adds	r7, #28
 8024856:	46bd      	mov	sp, r7
 8024858:	f85d 7b04 	ldr.w	r7, [sp], #4
 802485c:	4770      	bx	lr

0802485e <lv_memset_ff>:
 * Same as `memset(dst, 0xFF, len)` but optimized for 4 byte operation.
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
LV_ATTRIBUTE_FAST_MEM void lv_memset_ff(void * dst, size_t len)
{
 802485e:	b480      	push	{r7}
 8024860:	b087      	sub	sp, #28
 8024862:	af00      	add	r7, sp, #0
 8024864:	6078      	str	r0, [r7, #4]
 8024866:	6039      	str	r1, [r7, #0]
    uint8_t * d8 = (uint8_t *)dst;
 8024868:	687b      	ldr	r3, [r7, #4]
 802486a:	617b      	str	r3, [r7, #20]
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;
 802486c:	697b      	ldr	r3, [r7, #20]
 802486e:	f003 0303 	and.w	r3, r3, #3
 8024872:	613b      	str	r3, [r7, #16]

    /*Make the address aligned*/
    if(d_align) {
 8024874:	693b      	ldr	r3, [r7, #16]
 8024876:	2b00      	cmp	r3, #0
 8024878:	d016      	beq.n	80248a8 <lv_memset_ff+0x4a>
        d_align = ALIGN_MASK + 1 - d_align;
 802487a:	693b      	ldr	r3, [r7, #16]
 802487c:	f1c3 0304 	rsb	r3, r3, #4
 8024880:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 8024882:	e00b      	b.n	802489c <lv_memset_ff+0x3e>
            SET8(0xFF);
 8024884:	697b      	ldr	r3, [r7, #20]
 8024886:	22ff      	movs	r2, #255	; 0xff
 8024888:	701a      	strb	r2, [r3, #0]
 802488a:	697b      	ldr	r3, [r7, #20]
 802488c:	3301      	adds	r3, #1
 802488e:	617b      	str	r3, [r7, #20]
            len--;
 8024890:	683b      	ldr	r3, [r7, #0]
 8024892:	3b01      	subs	r3, #1
 8024894:	603b      	str	r3, [r7, #0]
            d_align--;
 8024896:	693b      	ldr	r3, [r7, #16]
 8024898:	3b01      	subs	r3, #1
 802489a:	613b      	str	r3, [r7, #16]
        while(d_align && len) {
 802489c:	693b      	ldr	r3, [r7, #16]
 802489e:	2b00      	cmp	r3, #0
 80248a0:	d002      	beq.n	80248a8 <lv_memset_ff+0x4a>
 80248a2:	683b      	ldr	r3, [r7, #0]
 80248a4:	2b00      	cmp	r3, #0
 80248a6:	d1ed      	bne.n	8024884 <lv_memset_ff+0x26>
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
 80248a8:	697b      	ldr	r3, [r7, #20]
 80248aa:	60fb      	str	r3, [r7, #12]
    while(len > 32) {
 80248ac:	e03a      	b.n	8024924 <lv_memset_ff+0xc6>
        REPEAT8(SET32(0xFFFFFFFF));
 80248ae:	68fb      	ldr	r3, [r7, #12]
 80248b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80248b4:	601a      	str	r2, [r3, #0]
 80248b6:	68fb      	ldr	r3, [r7, #12]
 80248b8:	3304      	adds	r3, #4
 80248ba:	60fb      	str	r3, [r7, #12]
 80248bc:	68fb      	ldr	r3, [r7, #12]
 80248be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80248c2:	601a      	str	r2, [r3, #0]
 80248c4:	68fb      	ldr	r3, [r7, #12]
 80248c6:	3304      	adds	r3, #4
 80248c8:	60fb      	str	r3, [r7, #12]
 80248ca:	68fb      	ldr	r3, [r7, #12]
 80248cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80248d0:	601a      	str	r2, [r3, #0]
 80248d2:	68fb      	ldr	r3, [r7, #12]
 80248d4:	3304      	adds	r3, #4
 80248d6:	60fb      	str	r3, [r7, #12]
 80248d8:	68fb      	ldr	r3, [r7, #12]
 80248da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80248de:	601a      	str	r2, [r3, #0]
 80248e0:	68fb      	ldr	r3, [r7, #12]
 80248e2:	3304      	adds	r3, #4
 80248e4:	60fb      	str	r3, [r7, #12]
 80248e6:	68fb      	ldr	r3, [r7, #12]
 80248e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80248ec:	601a      	str	r2, [r3, #0]
 80248ee:	68fb      	ldr	r3, [r7, #12]
 80248f0:	3304      	adds	r3, #4
 80248f2:	60fb      	str	r3, [r7, #12]
 80248f4:	68fb      	ldr	r3, [r7, #12]
 80248f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80248fa:	601a      	str	r2, [r3, #0]
 80248fc:	68fb      	ldr	r3, [r7, #12]
 80248fe:	3304      	adds	r3, #4
 8024900:	60fb      	str	r3, [r7, #12]
 8024902:	68fb      	ldr	r3, [r7, #12]
 8024904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024908:	601a      	str	r2, [r3, #0]
 802490a:	68fb      	ldr	r3, [r7, #12]
 802490c:	3304      	adds	r3, #4
 802490e:	60fb      	str	r3, [r7, #12]
 8024910:	68fb      	ldr	r3, [r7, #12]
 8024912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024916:	601a      	str	r2, [r3, #0]
 8024918:	68fb      	ldr	r3, [r7, #12]
 802491a:	3304      	adds	r3, #4
 802491c:	60fb      	str	r3, [r7, #12]
        len -= 32;
 802491e:	683b      	ldr	r3, [r7, #0]
 8024920:	3b20      	subs	r3, #32
 8024922:	603b      	str	r3, [r7, #0]
    while(len > 32) {
 8024924:	683b      	ldr	r3, [r7, #0]
 8024926:	2b20      	cmp	r3, #32
 8024928:	d8c1      	bhi.n	80248ae <lv_memset_ff+0x50>
    }

    while(len > 4) {
 802492a:	e009      	b.n	8024940 <lv_memset_ff+0xe2>
        SET32(0xFFFFFFFF);
 802492c:	68fb      	ldr	r3, [r7, #12]
 802492e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024932:	601a      	str	r2, [r3, #0]
 8024934:	68fb      	ldr	r3, [r7, #12]
 8024936:	3304      	adds	r3, #4
 8024938:	60fb      	str	r3, [r7, #12]
        len -= 4;
 802493a:	683b      	ldr	r3, [r7, #0]
 802493c:	3b04      	subs	r3, #4
 802493e:	603b      	str	r3, [r7, #0]
    while(len > 4) {
 8024940:	683b      	ldr	r3, [r7, #0]
 8024942:	2b04      	cmp	r3, #4
 8024944:	d8f2      	bhi.n	802492c <lv_memset_ff+0xce>
    }

    d8 = (uint8_t *)d32;
 8024946:	68fb      	ldr	r3, [r7, #12]
 8024948:	617b      	str	r3, [r7, #20]
    while(len) {
 802494a:	e008      	b.n	802495e <lv_memset_ff+0x100>
        SET8(0xFF);
 802494c:	697b      	ldr	r3, [r7, #20]
 802494e:	22ff      	movs	r2, #255	; 0xff
 8024950:	701a      	strb	r2, [r3, #0]
 8024952:	697b      	ldr	r3, [r7, #20]
 8024954:	3301      	adds	r3, #1
 8024956:	617b      	str	r3, [r7, #20]
        len--;
 8024958:	683b      	ldr	r3, [r7, #0]
 802495a:	3b01      	subs	r3, #1
 802495c:	603b      	str	r3, [r7, #0]
    while(len) {
 802495e:	683b      	ldr	r3, [r7, #0]
 8024960:	2b00      	cmp	r3, #0
 8024962:	d1f3      	bne.n	802494c <lv_memset_ff+0xee>
    }
}
 8024964:	bf00      	nop
 8024966:	bf00      	nop
 8024968:	371c      	adds	r7, #28
 802496a:	46bd      	mov	sp, r7
 802496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024970:	4770      	bx	lr

08024972 <lv_color_make>:
{
 8024972:	b480      	push	{r7}
 8024974:	b083      	sub	sp, #12
 8024976:	af00      	add	r7, sp, #0
 8024978:	4603      	mov	r3, r0
 802497a:	71fb      	strb	r3, [r7, #7]
 802497c:	460b      	mov	r3, r1
 802497e:	71bb      	strb	r3, [r7, #6]
 8024980:	4613      	mov	r3, r2
 8024982:	717b      	strb	r3, [r7, #5]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8024984:	797b      	ldrb	r3, [r7, #5]
 8024986:	09db      	lsrs	r3, r3, #7
 8024988:	b2da      	uxtb	r2, r3
 802498a:	79bb      	ldrb	r3, [r7, #6]
 802498c:	09db      	lsrs	r3, r3, #7
 802498e:	b2db      	uxtb	r3, r3
 8024990:	4313      	orrs	r3, r2
 8024992:	b2da      	uxtb	r2, r3
 8024994:	79fb      	ldrb	r3, [r7, #7]
 8024996:	09db      	lsrs	r3, r3, #7
 8024998:	b2db      	uxtb	r3, r3
 802499a:	4313      	orrs	r3, r2
 802499c:	b2db      	uxtb	r3, r3
}
 802499e:	4618      	mov	r0, r3
 80249a0:	370c      	adds	r7, #12
 80249a2:	46bd      	mov	sp, r7
 80249a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249a8:	4770      	bx	lr

080249aa <lv_color_white>:
{
 80249aa:	b580      	push	{r7, lr}
 80249ac:	af00      	add	r7, sp, #0
    return lv_color_make(0xff, 0xff, 0xff);
 80249ae:	22ff      	movs	r2, #255	; 0xff
 80249b0:	21ff      	movs	r1, #255	; 0xff
 80249b2:	20ff      	movs	r0, #255	; 0xff
 80249b4:	f7ff ffdd 	bl	8024972 <lv_color_make>
 80249b8:	4603      	mov	r3, r0
}
 80249ba:	4618      	mov	r0, r3
 80249bc:	bd80      	pop	{r7, pc}

080249be <lv_color_black>:
{
 80249be:	b580      	push	{r7, lr}
 80249c0:	af00      	add	r7, sp, #0
    return lv_color_make(0x00, 0x0, 0x00);
 80249c2:	2200      	movs	r2, #0
 80249c4:	2100      	movs	r1, #0
 80249c6:	2000      	movs	r0, #0
 80249c8:	f7ff ffd3 	bl	8024972 <lv_color_make>
 80249cc:	4603      	mov	r3, r0
}
 80249ce:	4618      	mov	r0, r3
 80249d0:	bd80      	pop	{r7, pc}

080249d2 <lv_style_get_prop_inlined>:
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
 80249d2:	b580      	push	{r7, lr}
 80249d4:	b08c      	sub	sp, #48	; 0x30
 80249d6:	af00      	add	r7, sp, #0
 80249d8:	60f8      	str	r0, [r7, #12]
 80249da:	460b      	mov	r3, r1
 80249dc:	607a      	str	r2, [r7, #4]
 80249de:	817b      	strh	r3, [r7, #10]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 80249e0:	68fb      	ldr	r3, [r7, #12]
 80249e2:	891b      	ldrh	r3, [r3, #8]
 80249e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80249e8:	4293      	cmp	r3, r2
 80249ea:	d137      	bne.n	8024a5c <lv_style_get_prop_inlined+0x8a>
        const lv_style_const_prop_t * const_prop;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 80249ec:	2300      	movs	r3, #0
 80249ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80249f0:	e02c      	b.n	8024a4c <lv_style_get_prop_inlined+0x7a>
            const_prop = style->v_p.const_props + i;
 80249f2:	68fb      	ldr	r3, [r7, #12]
 80249f4:	685a      	ldr	r2, [r3, #4]
 80249f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249f8:	00db      	lsls	r3, r3, #3
 80249fa:	4413      	add	r3, r2
 80249fc:	617b      	str	r3, [r7, #20]
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 80249fe:	697b      	ldr	r3, [r7, #20]
 8024a00:	881b      	ldrh	r3, [r3, #0]
 8024a02:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8024a06:	827b      	strh	r3, [r7, #18]
            if(prop_id == prop) {
 8024a08:	8a7a      	ldrh	r2, [r7, #18]
 8024a0a:	897b      	ldrh	r3, [r7, #10]
 8024a0c:	429a      	cmp	r2, r3
 8024a0e:	d11a      	bne.n	8024a46 <lv_style_get_prop_inlined+0x74>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8024a10:	697b      	ldr	r3, [r7, #20]
 8024a12:	881b      	ldrh	r3, [r3, #0]
 8024a14:	b21b      	sxth	r3, r3
 8024a16:	2b00      	cmp	r3, #0
 8024a18:	da01      	bge.n	8024a1e <lv_style_get_prop_inlined+0x4c>
                    return LV_STYLE_RES_INHERIT;
 8024a1a:	2302      	movs	r3, #2
 8024a1c:	e098      	b.n	8024b50 <lv_style_get_prop_inlined+0x17e>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8024a1e:	697b      	ldr	r3, [r7, #20]
 8024a20:	881b      	ldrh	r3, [r3, #0]
 8024a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024a26:	2b00      	cmp	r3, #0
 8024a28:	d007      	beq.n	8024a3a <lv_style_get_prop_inlined+0x68>
 8024a2a:	8a7b      	ldrh	r3, [r7, #18]
 8024a2c:	4618      	mov	r0, r3
 8024a2e:	f000 f9cd 	bl	8024dcc <lv_style_prop_get_default>
 8024a32:	4602      	mov	r2, r0
 8024a34:	687b      	ldr	r3, [r7, #4]
 8024a36:	601a      	str	r2, [r3, #0]
 8024a38:	e003      	b.n	8024a42 <lv_style_get_prop_inlined+0x70>
 8024a3a:	687b      	ldr	r3, [r7, #4]
 8024a3c:	697a      	ldr	r2, [r7, #20]
 8024a3e:	6852      	ldr	r2, [r2, #4]
 8024a40:	601a      	str	r2, [r3, #0]
                return LV_STYLE_RES_FOUND;
 8024a42:	2301      	movs	r3, #1
 8024a44:	e084      	b.n	8024b50 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 8024a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a48:	3301      	adds	r3, #1
 8024a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024a4c:	68fb      	ldr	r3, [r7, #12]
 8024a4e:	7adb      	ldrb	r3, [r3, #11]
 8024a50:	461a      	mov	r2, r3
 8024a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a54:	4293      	cmp	r3, r2
 8024a56:	d3cc      	bcc.n	80249f2 <lv_style_get_prop_inlined+0x20>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
 8024a58:	2300      	movs	r3, #0
 8024a5a:	e079      	b.n	8024b50 <lv_style_get_prop_inlined+0x17e>
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8024a5c:	68fb      	ldr	r3, [r7, #12]
 8024a5e:	7adb      	ldrb	r3, [r3, #11]
 8024a60:	2b00      	cmp	r3, #0
 8024a62:	d101      	bne.n	8024a68 <lv_style_get_prop_inlined+0x96>
 8024a64:	2300      	movs	r3, #0
 8024a66:	e073      	b.n	8024b50 <lv_style_get_prop_inlined+0x17e>

    if(style->prop_cnt > 1) {
 8024a68:	68fb      	ldr	r3, [r7, #12]
 8024a6a:	7adb      	ldrb	r3, [r3, #11]
 8024a6c:	2b01      	cmp	r3, #1
 8024a6e:	d948      	bls.n	8024b02 <lv_style_get_prop_inlined+0x130>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024a70:	68fb      	ldr	r3, [r7, #12]
 8024a72:	685a      	ldr	r2, [r3, #4]
 8024a74:	68fb      	ldr	r3, [r7, #12]
 8024a76:	7adb      	ldrb	r3, [r3, #11]
 8024a78:	009b      	lsls	r3, r3, #2
 8024a7a:	4413      	add	r3, r2
 8024a7c:	627b      	str	r3, [r7, #36]	; 0x24
        uint16_t * props = (uint16_t *)tmp;
 8024a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024a80:	623b      	str	r3, [r7, #32]
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8024a82:	2300      	movs	r3, #0
 8024a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8024a86:	e035      	b.n	8024af4 <lv_style_get_prop_inlined+0x122>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 8024a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024a8a:	005b      	lsls	r3, r3, #1
 8024a8c:	6a3a      	ldr	r2, [r7, #32]
 8024a8e:	4413      	add	r3, r2
 8024a90:	881b      	ldrh	r3, [r3, #0]
 8024a92:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8024a96:	83fb      	strh	r3, [r7, #30]
            if(prop_id == prop) {
 8024a98:	8bfa      	ldrh	r2, [r7, #30]
 8024a9a:	897b      	ldrh	r3, [r7, #10]
 8024a9c:	429a      	cmp	r2, r3
 8024a9e:	d126      	bne.n	8024aee <lv_style_get_prop_inlined+0x11c>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8024aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024aa2:	005b      	lsls	r3, r3, #1
 8024aa4:	6a3a      	ldr	r2, [r7, #32]
 8024aa6:	4413      	add	r3, r2
 8024aa8:	881b      	ldrh	r3, [r3, #0]
 8024aaa:	b21b      	sxth	r3, r3
 8024aac:	2b00      	cmp	r3, #0
 8024aae:	da01      	bge.n	8024ab4 <lv_style_get_prop_inlined+0xe2>
                    return LV_STYLE_RES_INHERIT;
 8024ab0:	2302      	movs	r3, #2
 8024ab2:	e04d      	b.n	8024b50 <lv_style_get_prop_inlined+0x17e>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8024ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024ab6:	005b      	lsls	r3, r3, #1
 8024ab8:	6a3a      	ldr	r2, [r7, #32]
 8024aba:	4413      	add	r3, r2
 8024abc:	881b      	ldrh	r3, [r3, #0]
 8024abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024ac2:	2b00      	cmp	r3, #0
 8024ac4:	d007      	beq.n	8024ad6 <lv_style_get_prop_inlined+0x104>
                    *value = lv_style_prop_get_default(prop_id);
 8024ac6:	8bfb      	ldrh	r3, [r7, #30]
 8024ac8:	4618      	mov	r0, r3
 8024aca:	f000 f97f 	bl	8024dcc <lv_style_prop_get_default>
 8024ace:	4602      	mov	r2, r0
 8024ad0:	687b      	ldr	r3, [r7, #4]
 8024ad2:	601a      	str	r2, [r3, #0]
 8024ad4:	e009      	b.n	8024aea <lv_style_get_prop_inlined+0x118>
                else {
                    lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 8024ad6:	68fb      	ldr	r3, [r7, #12]
 8024ad8:	685b      	ldr	r3, [r3, #4]
 8024ada:	61bb      	str	r3, [r7, #24]
                    *value = values[i];
 8024adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024ade:	009b      	lsls	r3, r3, #2
 8024ae0:	69ba      	ldr	r2, [r7, #24]
 8024ae2:	441a      	add	r2, r3
 8024ae4:	687b      	ldr	r3, [r7, #4]
 8024ae6:	6812      	ldr	r2, [r2, #0]
 8024ae8:	601a      	str	r2, [r3, #0]
                }
                return LV_STYLE_RES_FOUND;
 8024aea:	2301      	movs	r3, #1
 8024aec:	e030      	b.n	8024b50 <lv_style_get_prop_inlined+0x17e>
        for(i = 0; i < style->prop_cnt; i++) {
 8024aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024af0:	3301      	adds	r3, #1
 8024af2:	62bb      	str	r3, [r7, #40]	; 0x28
 8024af4:	68fb      	ldr	r3, [r7, #12]
 8024af6:	7adb      	ldrb	r3, [r3, #11]
 8024af8:	461a      	mov	r2, r3
 8024afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024afc:	4293      	cmp	r3, r2
 8024afe:	d3c3      	bcc.n	8024a88 <lv_style_get_prop_inlined+0xb6>
 8024b00:	e025      	b.n	8024b4e <lv_style_get_prop_inlined+0x17c>
            }
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8024b02:	68fb      	ldr	r3, [r7, #12]
 8024b04:	891b      	ldrh	r3, [r3, #8]
 8024b06:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8024b0a:	897b      	ldrh	r3, [r7, #10]
 8024b0c:	429a      	cmp	r2, r3
 8024b0e:	d11e      	bne.n	8024b4e <lv_style_get_prop_inlined+0x17c>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8024b10:	68fb      	ldr	r3, [r7, #12]
 8024b12:	891b      	ldrh	r3, [r3, #8]
 8024b14:	b21b      	sxth	r3, r3
 8024b16:	2b00      	cmp	r3, #0
 8024b18:	da01      	bge.n	8024b1e <lv_style_get_prop_inlined+0x14c>
            return LV_STYLE_RES_INHERIT;
 8024b1a:	2302      	movs	r3, #2
 8024b1c:	e018      	b.n	8024b50 <lv_style_get_prop_inlined+0x17e>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8024b1e:	68fb      	ldr	r3, [r7, #12]
 8024b20:	891b      	ldrh	r3, [r3, #8]
 8024b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024b26:	2b00      	cmp	r3, #0
 8024b28:	d00b      	beq.n	8024b42 <lv_style_get_prop_inlined+0x170>
 8024b2a:	68fb      	ldr	r3, [r7, #12]
 8024b2c:	891b      	ldrh	r3, [r3, #8]
 8024b2e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8024b32:	b29b      	uxth	r3, r3
 8024b34:	4618      	mov	r0, r3
 8024b36:	f000 f949 	bl	8024dcc <lv_style_prop_get_default>
 8024b3a:	4602      	mov	r2, r0
 8024b3c:	687b      	ldr	r3, [r7, #4]
 8024b3e:	601a      	str	r2, [r3, #0]
 8024b40:	e003      	b.n	8024b4a <lv_style_get_prop_inlined+0x178>
 8024b42:	687b      	ldr	r3, [r7, #4]
 8024b44:	68fa      	ldr	r2, [r7, #12]
 8024b46:	6852      	ldr	r2, [r2, #4]
 8024b48:	601a      	str	r2, [r3, #0]
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
 8024b4a:	2301      	movs	r3, #1
 8024b4c:	e000      	b.n	8024b50 <lv_style_get_prop_inlined+0x17e>
    }
    return LV_STYLE_RES_NOT_FOUND;
 8024b4e:	2300      	movs	r3, #0
}
 8024b50:	4618      	mov	r0, r3
 8024b52:	3730      	adds	r7, #48	; 0x30
 8024b54:	46bd      	mov	sp, r7
 8024b56:	bd80      	pop	{r7, pc}

08024b58 <lv_style_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_style_init(lv_style_t * style)
{
 8024b58:	b580      	push	{r7, lr}
 8024b5a:	b082      	sub	sp, #8
 8024b5c:	af00      	add	r7, sp, #0
 8024b5e:	6078      	str	r0, [r7, #4]
#if LV_USE_ASSERT_STYLE
    if(style->sentinel == LV_STYLE_SENTINEL_VALUE && style->prop_cnt > 1) {
 8024b60:	687b      	ldr	r3, [r7, #4]
 8024b62:	681b      	ldr	r3, [r3, #0]
 8024b64:	4a06      	ldr	r2, [pc, #24]	; (8024b80 <lv_style_init+0x28>)
 8024b66:	4293      	cmp	r3, r2
        LV_LOG_WARN("Style might be already inited. (Potential memory leak)");
    }
#endif

    lv_memset_00(style, sizeof(lv_style_t));
 8024b68:	210c      	movs	r1, #12
 8024b6a:	6878      	ldr	r0, [r7, #4]
 8024b6c:	f7ff fdf6 	bl	802475c <lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
 8024b70:	687b      	ldr	r3, [r7, #4]
 8024b72:	4a03      	ldr	r2, [pc, #12]	; (8024b80 <lv_style_init+0x28>)
 8024b74:	601a      	str	r2, [r3, #0]
#endif
}
 8024b76:	bf00      	nop
 8024b78:	3708      	adds	r7, #8
 8024b7a:	46bd      	mov	sp, r7
 8024b7c:	bd80      	pop	{r7, pc}
 8024b7e:	bf00      	nop
 8024b80:	aabbccdd 	.word	0xaabbccdd

08024b84 <lv_style_reset>:

void lv_style_reset(lv_style_t * style)
{
 8024b84:	b580      	push	{r7, lr}
 8024b86:	b082      	sub	sp, #8
 8024b88:	af00      	add	r7, sp, #0
 8024b8a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);
 8024b8c:	687b      	ldr	r3, [r7, #4]
 8024b8e:	2b00      	cmp	r3, #0
 8024b90:	d100      	bne.n	8024b94 <lv_style_reset+0x10>
 8024b92:	e7fe      	b.n	8024b92 <lv_style_reset+0xe>
 8024b94:	687b      	ldr	r3, [r7, #4]
 8024b96:	681b      	ldr	r3, [r3, #0]
 8024b98:	4a0f      	ldr	r2, [pc, #60]	; (8024bd8 <lv_style_reset+0x54>)
 8024b9a:	4293      	cmp	r3, r2
 8024b9c:	d000      	beq.n	8024ba0 <lv_style_reset+0x1c>
 8024b9e:	e7fe      	b.n	8024b9e <lv_style_reset+0x1a>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024ba0:	687b      	ldr	r3, [r7, #4]
 8024ba2:	891b      	ldrh	r3, [r3, #8]
 8024ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024ba8:	4293      	cmp	r3, r2
 8024baa:	d010      	beq.n	8024bce <lv_style_reset+0x4a>
        LV_LOG_ERROR("Cannot reset const style");
        return;
    }

    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8024bac:	687b      	ldr	r3, [r7, #4]
 8024bae:	7adb      	ldrb	r3, [r3, #11]
 8024bb0:	2b01      	cmp	r3, #1
 8024bb2:	d904      	bls.n	8024bbe <lv_style_reset+0x3a>
 8024bb4:	687b      	ldr	r3, [r7, #4]
 8024bb6:	685b      	ldr	r3, [r3, #4]
 8024bb8:	4618      	mov	r0, r3
 8024bba:	f7ff f9cb 	bl	8023f54 <lv_mem_free>
    lv_memset_00(style, sizeof(lv_style_t));
 8024bbe:	210c      	movs	r1, #12
 8024bc0:	6878      	ldr	r0, [r7, #4]
 8024bc2:	f7ff fdcb 	bl	802475c <lv_memset_00>
#if LV_USE_ASSERT_STYLE
    style->sentinel = LV_STYLE_SENTINEL_VALUE;
 8024bc6:	687b      	ldr	r3, [r7, #4]
 8024bc8:	4a03      	ldr	r2, [pc, #12]	; (8024bd8 <lv_style_reset+0x54>)
 8024bca:	601a      	str	r2, [r3, #0]
 8024bcc:	e000      	b.n	8024bd0 <lv_style_reset+0x4c>
        return;
 8024bce:	bf00      	nop
#endif
}
 8024bd0:	3708      	adds	r7, #8
 8024bd2:	46bd      	mov	sp, r7
 8024bd4:	bd80      	pop	{r7, pc}
 8024bd6:	bf00      	nop
 8024bd8:	aabbccdd 	.word	0xaabbccdd

08024bdc <lv_style_remove_prop>:
{
    return last_custom_prop_id - _LV_STYLE_LAST_BUILT_IN_PROP;
}

bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop)
{
 8024bdc:	b580      	push	{r7, lr}
 8024bde:	b08c      	sub	sp, #48	; 0x30
 8024be0:	af00      	add	r7, sp, #0
 8024be2:	6078      	str	r0, [r7, #4]
 8024be4:	460b      	mov	r3, r1
 8024be6:	807b      	strh	r3, [r7, #2]
    LV_ASSERT_STYLE(style);
 8024be8:	687b      	ldr	r3, [r7, #4]
 8024bea:	2b00      	cmp	r3, #0
 8024bec:	d100      	bne.n	8024bf0 <lv_style_remove_prop+0x14>
 8024bee:	e7fe      	b.n	8024bee <lv_style_remove_prop+0x12>
 8024bf0:	687b      	ldr	r3, [r7, #4]
 8024bf2:	681b      	ldr	r3, [r3, #0]
 8024bf4:	4a61      	ldr	r2, [pc, #388]	; (8024d7c <lv_style_remove_prop+0x1a0>)
 8024bf6:	4293      	cmp	r3, r2
 8024bf8:	d000      	beq.n	8024bfc <lv_style_remove_prop+0x20>
 8024bfa:	e7fe      	b.n	8024bfa <lv_style_remove_prop+0x1e>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8024bfc:	687b      	ldr	r3, [r7, #4]
 8024bfe:	891b      	ldrh	r3, [r3, #8]
 8024c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024c04:	4293      	cmp	r3, r2
 8024c06:	d101      	bne.n	8024c0c <lv_style_remove_prop+0x30>
        LV_LOG_ERROR("Cannot remove prop from const style");
        return false;
 8024c08:	2300      	movs	r3, #0
 8024c0a:	e0b2      	b.n	8024d72 <lv_style_remove_prop+0x196>
    }

    if(style->prop_cnt == 0)  return false;
 8024c0c:	687b      	ldr	r3, [r7, #4]
 8024c0e:	7adb      	ldrb	r3, [r3, #11]
 8024c10:	2b00      	cmp	r3, #0
 8024c12:	d101      	bne.n	8024c18 <lv_style_remove_prop+0x3c>
 8024c14:	2300      	movs	r3, #0
 8024c16:	e0ac      	b.n	8024d72 <lv_style_remove_prop+0x196>

    if(style->prop_cnt == 1) {
 8024c18:	687b      	ldr	r3, [r7, #4]
 8024c1a:	7adb      	ldrb	r3, [r3, #11]
 8024c1c:	2b01      	cmp	r3, #1
 8024c1e:	d110      	bne.n	8024c42 <lv_style_remove_prop+0x66>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8024c20:	687b      	ldr	r3, [r7, #4]
 8024c22:	891b      	ldrh	r3, [r3, #8]
 8024c24:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8024c28:	887b      	ldrh	r3, [r7, #2]
 8024c2a:	429a      	cmp	r2, r3
 8024c2c:	d107      	bne.n	8024c3e <lv_style_remove_prop+0x62>
            style->prop1 = LV_STYLE_PROP_INV;
 8024c2e:	687b      	ldr	r3, [r7, #4]
 8024c30:	2200      	movs	r2, #0
 8024c32:	811a      	strh	r2, [r3, #8]
            style->prop_cnt = 0;
 8024c34:	687b      	ldr	r3, [r7, #4]
 8024c36:	2200      	movs	r2, #0
 8024c38:	72da      	strb	r2, [r3, #11]
            return true;
 8024c3a:	2301      	movs	r3, #1
 8024c3c:	e099      	b.n	8024d72 <lv_style_remove_prop+0x196>
        }
        return false;
 8024c3e:	2300      	movs	r3, #0
 8024c40:	e097      	b.n	8024d72 <lv_style_remove_prop+0x196>
    }

    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024c42:	687b      	ldr	r3, [r7, #4]
 8024c44:	685a      	ldr	r2, [r3, #4]
 8024c46:	687b      	ldr	r3, [r7, #4]
 8024c48:	7adb      	ldrb	r3, [r3, #11]
 8024c4a:	009b      	lsls	r3, r3, #2
 8024c4c:	4413      	add	r3, r2
 8024c4e:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t * old_props = (uint16_t *)tmp;
 8024c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c52:	623b      	str	r3, [r7, #32]
    uint32_t i;
    for(i = 0; i < style->prop_cnt; i++) {
 8024c54:	2300      	movs	r3, #0
 8024c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024c58:	e083      	b.n	8024d62 <lv_style_remove_prop+0x186>
        if(LV_STYLE_PROP_ID_MASK(old_props[i]) == prop) {
 8024c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c5c:	005b      	lsls	r3, r3, #1
 8024c5e:	6a3a      	ldr	r2, [r7, #32]
 8024c60:	4413      	add	r3, r2
 8024c62:	881b      	ldrh	r3, [r3, #0]
 8024c64:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8024c68:	887b      	ldrh	r3, [r7, #2]
 8024c6a:	429a      	cmp	r2, r3
 8024c6c:	d176      	bne.n	8024d5c <lv_style_remove_prop+0x180>
            lv_style_value_t * old_values = (lv_style_value_t *)style->v_p.values_and_props;
 8024c6e:	687b      	ldr	r3, [r7, #4]
 8024c70:	685b      	ldr	r3, [r3, #4]
 8024c72:	61fb      	str	r3, [r7, #28]

            if(style->prop_cnt == 2) {
 8024c74:	687b      	ldr	r3, [r7, #4]
 8024c76:	7adb      	ldrb	r3, [r3, #11]
 8024c78:	2b02      	cmp	r3, #2
 8024c7a:	d119      	bne.n	8024cb0 <lv_style_remove_prop+0xd4>
                style->prop_cnt = 1;
 8024c7c:	687b      	ldr	r3, [r7, #4]
 8024c7e:	2201      	movs	r2, #1
 8024c80:	72da      	strb	r2, [r3, #11]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8024c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c84:	2b00      	cmp	r3, #0
 8024c86:	d102      	bne.n	8024c8e <lv_style_remove_prop+0xb2>
 8024c88:	6a3b      	ldr	r3, [r7, #32]
 8024c8a:	885b      	ldrh	r3, [r3, #2]
 8024c8c:	e001      	b.n	8024c92 <lv_style_remove_prop+0xb6>
 8024c8e:	6a3b      	ldr	r3, [r7, #32]
 8024c90:	881b      	ldrh	r3, [r3, #0]
 8024c92:	687a      	ldr	r2, [r7, #4]
 8024c94:	8113      	strh	r3, [r2, #8]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8024c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c98:	2b00      	cmp	r3, #0
 8024c9a:	d104      	bne.n	8024ca6 <lv_style_remove_prop+0xca>
 8024c9c:	687b      	ldr	r3, [r7, #4]
 8024c9e:	69fa      	ldr	r2, [r7, #28]
 8024ca0:	6852      	ldr	r2, [r2, #4]
 8024ca2:	605a      	str	r2, [r3, #4]
 8024ca4:	e055      	b.n	8024d52 <lv_style_remove_prop+0x176>
 8024ca6:	687b      	ldr	r3, [r7, #4]
 8024ca8:	69fa      	ldr	r2, [r7, #28]
 8024caa:	6812      	ldr	r2, [r2, #0]
 8024cac:	605a      	str	r2, [r3, #4]
 8024cae:	e050      	b.n	8024d52 <lv_style_remove_prop+0x176>
            }
            else {
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8024cb0:	687b      	ldr	r3, [r7, #4]
 8024cb2:	7adb      	ldrb	r3, [r3, #11]
 8024cb4:	3b01      	subs	r3, #1
 8024cb6:	461a      	mov	r2, r3
 8024cb8:	4613      	mov	r3, r2
 8024cba:	005b      	lsls	r3, r3, #1
 8024cbc:	4413      	add	r3, r2
 8024cbe:	005b      	lsls	r3, r3, #1
 8024cc0:	61bb      	str	r3, [r7, #24]
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 8024cc2:	69b8      	ldr	r0, [r7, #24]
 8024cc4:	f7ff f916 	bl	8023ef4 <lv_mem_alloc>
 8024cc8:	6178      	str	r0, [r7, #20]
                if(new_values_and_props == NULL) return false;
 8024cca:	697b      	ldr	r3, [r7, #20]
 8024ccc:	2b00      	cmp	r3, #0
 8024cce:	d101      	bne.n	8024cd4 <lv_style_remove_prop+0xf8>
 8024cd0:	2300      	movs	r3, #0
 8024cd2:	e04e      	b.n	8024d72 <lv_style_remove_prop+0x196>
                style->v_p.values_and_props = new_values_and_props;
 8024cd4:	687b      	ldr	r3, [r7, #4]
 8024cd6:	697a      	ldr	r2, [r7, #20]
 8024cd8:	605a      	str	r2, [r3, #4]
                style->prop_cnt--;
 8024cda:	687b      	ldr	r3, [r7, #4]
 8024cdc:	7adb      	ldrb	r3, [r3, #11]
 8024cde:	3b01      	subs	r3, #1
 8024ce0:	b2da      	uxtb	r2, r3
 8024ce2:	687b      	ldr	r3, [r7, #4]
 8024ce4:	72da      	strb	r2, [r3, #11]

                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8024ce6:	687b      	ldr	r3, [r7, #4]
 8024ce8:	7adb      	ldrb	r3, [r3, #11]
 8024cea:	009b      	lsls	r3, r3, #2
 8024cec:	697a      	ldr	r2, [r7, #20]
 8024cee:	4413      	add	r3, r2
 8024cf0:	627b      	str	r3, [r7, #36]	; 0x24
                uint16_t * new_props = (uint16_t *)tmp;
 8024cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024cf4:	613b      	str	r3, [r7, #16]
                lv_style_value_t * new_values = (lv_style_value_t *)new_values_and_props;
 8024cf6:	697b      	ldr	r3, [r7, #20]
 8024cf8:	60fb      	str	r3, [r7, #12]

                uint32_t j;
                for(i = j = 0; j <= style->prop_cnt;
 8024cfa:	2300      	movs	r3, #0
 8024cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8024cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024d02:	e020      	b.n	8024d46 <lv_style_remove_prop+0x16a>
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
                    if(old_props[j] != prop) {
 8024d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024d06:	005b      	lsls	r3, r3, #1
 8024d08:	6a3a      	ldr	r2, [r7, #32]
 8024d0a:	4413      	add	r3, r2
 8024d0c:	881b      	ldrh	r3, [r3, #0]
 8024d0e:	887a      	ldrh	r2, [r7, #2]
 8024d10:	429a      	cmp	r2, r3
 8024d12:	d015      	beq.n	8024d40 <lv_style_remove_prop+0x164>
                        new_values[i] = old_values[j];
 8024d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024d16:	009b      	lsls	r3, r3, #2
 8024d18:	69fa      	ldr	r2, [r7, #28]
 8024d1a:	441a      	add	r2, r3
 8024d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d1e:	009b      	lsls	r3, r3, #2
 8024d20:	68f9      	ldr	r1, [r7, #12]
 8024d22:	440b      	add	r3, r1
 8024d24:	6812      	ldr	r2, [r2, #0]
 8024d26:	601a      	str	r2, [r3, #0]
                        new_props[i++] = old_props[j];
 8024d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024d2a:	005b      	lsls	r3, r3, #1
 8024d2c:	6a3a      	ldr	r2, [r7, #32]
 8024d2e:	441a      	add	r2, r3
 8024d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d32:	1c59      	adds	r1, r3, #1
 8024d34:	62f9      	str	r1, [r7, #44]	; 0x2c
 8024d36:	005b      	lsls	r3, r3, #1
 8024d38:	6939      	ldr	r1, [r7, #16]
 8024d3a:	440b      	add	r3, r1
 8024d3c:	8812      	ldrh	r2, [r2, #0]
 8024d3e:	801a      	strh	r2, [r3, #0]
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8024d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024d42:	3301      	adds	r3, #1
 8024d44:	62bb      	str	r3, [r7, #40]	; 0x28
                for(i = j = 0; j <= style->prop_cnt;
 8024d46:	687b      	ldr	r3, [r7, #4]
 8024d48:	7adb      	ldrb	r3, [r3, #11]
 8024d4a:	461a      	mov	r2, r3
 8024d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024d4e:	4293      	cmp	r3, r2
 8024d50:	d9d8      	bls.n	8024d04 <lv_style_remove_prop+0x128>
                    }
                }
            }

            lv_mem_free(old_values);
 8024d52:	69f8      	ldr	r0, [r7, #28]
 8024d54:	f7ff f8fe 	bl	8023f54 <lv_mem_free>
            return true;
 8024d58:	2301      	movs	r3, #1
 8024d5a:	e00a      	b.n	8024d72 <lv_style_remove_prop+0x196>
    for(i = 0; i < style->prop_cnt; i++) {
 8024d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d5e:	3301      	adds	r3, #1
 8024d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024d62:	687b      	ldr	r3, [r7, #4]
 8024d64:	7adb      	ldrb	r3, [r3, #11]
 8024d66:	461a      	mov	r2, r3
 8024d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d6a:	4293      	cmp	r3, r2
 8024d6c:	f4ff af75 	bcc.w	8024c5a <lv_style_remove_prop+0x7e>
        }
    }

    return false;
 8024d70:	2300      	movs	r3, #0
}
 8024d72:	4618      	mov	r0, r3
 8024d74:	3730      	adds	r7, #48	; 0x30
 8024d76:	46bd      	mov	sp, r7
 8024d78:	bd80      	pop	{r7, pc}
 8024d7a:	bf00      	nop
 8024d7c:	aabbccdd 	.word	0xaabbccdd

08024d80 <lv_style_set_prop>:

void lv_style_set_prop(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t value)
{
 8024d80:	b580      	push	{r7, lr}
 8024d82:	b084      	sub	sp, #16
 8024d84:	af00      	add	r7, sp, #0
 8024d86:	60f8      	str	r0, [r7, #12]
 8024d88:	460b      	mov	r3, r1
 8024d8a:	607a      	str	r2, [r7, #4]
 8024d8c:	817b      	strh	r3, [r7, #10]
    lv_style_set_prop_internal(style, prop, value, lv_style_set_prop_helper);
 8024d8e:	8979      	ldrh	r1, [r7, #10]
 8024d90:	4b04      	ldr	r3, [pc, #16]	; (8024da4 <lv_style_set_prop+0x24>)
 8024d92:	687a      	ldr	r2, [r7, #4]
 8024d94:	68f8      	ldr	r0, [r7, #12]
 8024d96:	f000 f9a5 	bl	80250e4 <lv_style_set_prop_internal>
}
 8024d9a:	bf00      	nop
 8024d9c:	3710      	adds	r7, #16
 8024d9e:	46bd      	mov	sp, r7
 8024da0:	bd80      	pop	{r7, pc}
 8024da2:	bf00      	nop
 8024da4:	080250bd 	.word	0x080250bd

08024da8 <lv_style_get_prop>:
{
    lv_style_set_prop_internal(style, prop | meta, null_style_value, lv_style_set_prop_meta_helper);
}

lv_style_res_t lv_style_get_prop(const lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
{
 8024da8:	b580      	push	{r7, lr}
 8024daa:	b084      	sub	sp, #16
 8024dac:	af00      	add	r7, sp, #0
 8024dae:	60f8      	str	r0, [r7, #12]
 8024db0:	460b      	mov	r3, r1
 8024db2:	607a      	str	r2, [r7, #4]
 8024db4:	817b      	strh	r3, [r7, #10]
    return lv_style_get_prop_inlined(style, prop, value);
 8024db6:	897b      	ldrh	r3, [r7, #10]
 8024db8:	687a      	ldr	r2, [r7, #4]
 8024dba:	4619      	mov	r1, r3
 8024dbc:	68f8      	ldr	r0, [r7, #12]
 8024dbe:	f7ff fe08 	bl	80249d2 <lv_style_get_prop_inlined>
 8024dc2:	4603      	mov	r3, r0
}
 8024dc4:	4618      	mov	r0, r3
 8024dc6:	3710      	adds	r7, #16
 8024dc8:	46bd      	mov	sp, r7
 8024dca:	bd80      	pop	{r7, pc}

08024dcc <lv_style_prop_get_default>:
    LV_UNUSED(user_data);
#endif
}

lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop)
{
 8024dcc:	b580      	push	{r7, lr}
 8024dce:	b084      	sub	sp, #16
 8024dd0:	af00      	add	r7, sp, #0
 8024dd2:	4603      	mov	r3, r0
 8024dd4:	80fb      	strh	r3, [r7, #6]
    lv_style_value_t value;
    switch(prop) {
 8024dd6:	88fb      	ldrh	r3, [r7, #6]
 8024dd8:	3b03      	subs	r3, #3
 8024dda:	2b69      	cmp	r3, #105	; 0x69
 8024ddc:	f200 80f4 	bhi.w	8024fc8 <lv_style_prop_get_default+0x1fc>
 8024de0:	a201      	add	r2, pc, #4	; (adr r2, 8024de8 <lv_style_prop_get_default+0x1c>)
 8024de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024de6:	bf00      	nop
 8024de8:	08024fc1 	.word	0x08024fc1
 8024dec:	08024fc9 	.word	0x08024fc9
 8024df0:	08024fc9 	.word	0x08024fc9
 8024df4:	08024fc1 	.word	0x08024fc1
 8024df8:	08024fc9 	.word	0x08024fc9
 8024dfc:	08024fc9 	.word	0x08024fc9
 8024e00:	08024fc9 	.word	0x08024fc9
 8024e04:	08024fc9 	.word	0x08024fc9
 8024e08:	08024fc9 	.word	0x08024fc9
 8024e0c:	08024fc9 	.word	0x08024fc9
 8024e10:	08024fc9 	.word	0x08024fc9
 8024e14:	08024fc9 	.word	0x08024fc9
 8024e18:	08024fc9 	.word	0x08024fc9
 8024e1c:	08024fc9 	.word	0x08024fc9
 8024e20:	08024fc9 	.word	0x08024fc9
 8024e24:	08024fc9 	.word	0x08024fc9
 8024e28:	08024fc9 	.word	0x08024fc9
 8024e2c:	08024fc9 	.word	0x08024fc9
 8024e30:	08024fc9 	.word	0x08024fc9
 8024e34:	08024fc9 	.word	0x08024fc9
 8024e38:	08024fc9 	.word	0x08024fc9
 8024e3c:	08024fc9 	.word	0x08024fc9
 8024e40:	08024fc9 	.word	0x08024fc9
 8024e44:	08024fc9 	.word	0x08024fc9
 8024e48:	08024fc9 	.word	0x08024fc9
 8024e4c:	08024fc9 	.word	0x08024fc9
 8024e50:	08024fc9 	.word	0x08024fc9
 8024e54:	08024fc9 	.word	0x08024fc9
 8024e58:	08024fc9 	.word	0x08024fc9
 8024e5c:	08024f99 	.word	0x08024f99
 8024e60:	08024fc9 	.word	0x08024fc9
 8024e64:	08024fa1 	.word	0x08024fa1
 8024e68:	08024fc9 	.word	0x08024fc9
 8024e6c:	08024fc9 	.word	0x08024fc9
 8024e70:	08024faf 	.word	0x08024faf
 8024e74:	08024fc9 	.word	0x08024fc9
 8024e78:	08024fc9 	.word	0x08024fc9
 8024e7c:	08024fc9 	.word	0x08024fc9
 8024e80:	08024fa9 	.word	0x08024fa9
 8024e84:	08024fc9 	.word	0x08024fc9
 8024e88:	08024fc9 	.word	0x08024fc9
 8024e8c:	08024fc9 	.word	0x08024fc9
 8024e90:	08024fc9 	.word	0x08024fc9
 8024e94:	08024fc9 	.word	0x08024fc9
 8024e98:	08024fc9 	.word	0x08024fc9
 8024e9c:	08024fa1 	.word	0x08024fa1
 8024ea0:	08024fa9 	.word	0x08024fa9
 8024ea4:	08024fc9 	.word	0x08024fc9
 8024ea8:	08024fb5 	.word	0x08024fb5
 8024eac:	08024fc9 	.word	0x08024fc9
 8024eb0:	08024fc9 	.word	0x08024fc9
 8024eb4:	08024fa1 	.word	0x08024fa1
 8024eb8:	08024fa9 	.word	0x08024fa9
 8024ebc:	08024fc9 	.word	0x08024fc9
 8024ec0:	08024fc9 	.word	0x08024fc9
 8024ec4:	08024fc9 	.word	0x08024fc9
 8024ec8:	08024fc9 	.word	0x08024fc9
 8024ecc:	08024fc9 	.word	0x08024fc9
 8024ed0:	08024fc9 	.word	0x08024fc9
 8024ed4:	08024fc9 	.word	0x08024fc9
 8024ed8:	08024fc9 	.word	0x08024fc9
 8024edc:	08024fc9 	.word	0x08024fc9
 8024ee0:	08024fc9 	.word	0x08024fc9
 8024ee4:	08024fc9 	.word	0x08024fc9
 8024ee8:	08024fc9 	.word	0x08024fc9
 8024eec:	08024fa1 	.word	0x08024fa1
 8024ef0:	08024fa9 	.word	0x08024fa9
 8024ef4:	08024fa9 	.word	0x08024fa9
 8024ef8:	08024fa1 	.word	0x08024fa1
 8024efc:	08024fc9 	.word	0x08024fc9
 8024f00:	08024fc9 	.word	0x08024fc9
 8024f04:	08024fc9 	.word	0x08024fc9
 8024f08:	08024fc9 	.word	0x08024fc9
 8024f0c:	08024fc9 	.word	0x08024fc9
 8024f10:	08024fa1 	.word	0x08024fa1
 8024f14:	08024fa9 	.word	0x08024fa9
 8024f18:	08024fc9 	.word	0x08024fc9
 8024f1c:	08024fc9 	.word	0x08024fc9
 8024f20:	08024fc9 	.word	0x08024fc9
 8024f24:	08024fa1 	.word	0x08024fa1
 8024f28:	08024fa9 	.word	0x08024fa9
 8024f2c:	08024fc9 	.word	0x08024fc9
 8024f30:	08024fa1 	.word	0x08024fa1
 8024f34:	08024fa9 	.word	0x08024fa9
 8024f38:	08024fbb 	.word	0x08024fbb
 8024f3c:	08024fc9 	.word	0x08024fc9
 8024f40:	08024fc9 	.word	0x08024fc9
 8024f44:	08024fc9 	.word	0x08024fc9
 8024f48:	08024fc9 	.word	0x08024fc9
 8024f4c:	08024fc9 	.word	0x08024fc9
 8024f50:	08024fc9 	.word	0x08024fc9
 8024f54:	08024fc9 	.word	0x08024fc9
 8024f58:	08024fc9 	.word	0x08024fc9
 8024f5c:	08024fa9 	.word	0x08024fa9
 8024f60:	08024fc9 	.word	0x08024fc9
 8024f64:	08024fc9 	.word	0x08024fc9
 8024f68:	08024fc9 	.word	0x08024fc9
 8024f6c:	08024fc9 	.word	0x08024fc9
 8024f70:	08024fc9 	.word	0x08024fc9
 8024f74:	08024fc9 	.word	0x08024fc9
 8024f78:	08024fc9 	.word	0x08024fc9
 8024f7c:	08024fc9 	.word	0x08024fc9
 8024f80:	08024fc9 	.word	0x08024fc9
 8024f84:	08024fc9 	.word	0x08024fc9
 8024f88:	08024fc9 	.word	0x08024fc9
 8024f8c:	08024f91 	.word	0x08024f91
        case LV_STYLE_TRANSFORM_ZOOM:
            value.num = LV_IMG_ZOOM_NONE;
 8024f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8024f94:	60fb      	str	r3, [r7, #12]
            break;
 8024f96:	e01c      	b.n	8024fd2 <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_COLOR:
            value.color = lv_color_white();
 8024f98:	f7ff fd07 	bl	80249aa <lv_color_white>
 8024f9c:	7338      	strb	r0, [r7, #12]
            break;
 8024f9e:	e018      	b.n	8024fd2 <lv_style_prop_get_default+0x206>
        case LV_STYLE_OUTLINE_COLOR:
        case LV_STYLE_ARC_COLOR:
        case LV_STYLE_LINE_COLOR:
        case LV_STYLE_TEXT_COLOR:
        case LV_STYLE_IMG_RECOLOR:
            value.color = lv_color_black();
 8024fa0:	f7ff fd0d 	bl	80249be <lv_color_black>
 8024fa4:	7338      	strb	r0, [r7, #12]
            break;
 8024fa6:	e014      	b.n	8024fd2 <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_IMG_OPA:
        case LV_STYLE_OUTLINE_OPA:
        case LV_STYLE_SHADOW_OPA:
        case LV_STYLE_LINE_OPA:
        case LV_STYLE_ARC_OPA:
            value.num = LV_OPA_COVER;
 8024fa8:	23ff      	movs	r3, #255	; 0xff
 8024faa:	60fb      	str	r3, [r7, #12]
            break;
 8024fac:	e011      	b.n	8024fd2 <lv_style_prop_get_default+0x206>
        case LV_STYLE_BG_GRAD_STOP:
            value.num = 255;
 8024fae:	23ff      	movs	r3, #255	; 0xff
 8024fb0:	60fb      	str	r3, [r7, #12]
            break;
 8024fb2:	e00e      	b.n	8024fd2 <lv_style_prop_get_default+0x206>
        case LV_STYLE_BORDER_SIDE:
            value.num = LV_BORDER_SIDE_FULL;
 8024fb4:	230f      	movs	r3, #15
 8024fb6:	60fb      	str	r3, [r7, #12]
            break;
 8024fb8:	e00b      	b.n	8024fd2 <lv_style_prop_get_default+0x206>
        case LV_STYLE_TEXT_FONT:
            value.ptr = LV_FONT_DEFAULT;
 8024fba:	4b08      	ldr	r3, [pc, #32]	; (8024fdc <lv_style_prop_get_default+0x210>)
 8024fbc:	60fb      	str	r3, [r7, #12]
            break;
 8024fbe:	e008      	b.n	8024fd2 <lv_style_prop_get_default+0x206>
        case LV_STYLE_MAX_WIDTH:
        case LV_STYLE_MAX_HEIGHT:
            value.num = LV_COORD_MAX;
 8024fc0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8024fc4:	60fb      	str	r3, [r7, #12]
            break;
 8024fc6:	e004      	b.n	8024fd2 <lv_style_prop_get_default+0x206>
        default:
            value.ptr = NULL;
 8024fc8:	2300      	movs	r3, #0
 8024fca:	60fb      	str	r3, [r7, #12]
            value.num = 0;
 8024fcc:	2300      	movs	r3, #0
 8024fce:	60fb      	str	r3, [r7, #12]
            break;
 8024fd0:	bf00      	nop
    }

    return value;
 8024fd2:	68fb      	ldr	r3, [r7, #12]
}
 8024fd4:	4618      	mov	r0, r3
 8024fd6:	3710      	adds	r7, #16
 8024fd8:	46bd      	mov	sp, r7
 8024fda:	bd80      	pop	{r7, pc}
 8024fdc:	0802faa0 	.word	0x0802faa0

08024fe0 <lv_style_is_empty>:

bool lv_style_is_empty(const lv_style_t * style)
{
 8024fe0:	b480      	push	{r7}
 8024fe2:	b083      	sub	sp, #12
 8024fe4:	af00      	add	r7, sp, #0
 8024fe6:	6078      	str	r0, [r7, #4]
    LV_ASSERT_STYLE(style);
 8024fe8:	687b      	ldr	r3, [r7, #4]
 8024fea:	2b00      	cmp	r3, #0
 8024fec:	d100      	bne.n	8024ff0 <lv_style_is_empty+0x10>
 8024fee:	e7fe      	b.n	8024fee <lv_style_is_empty+0xe>
 8024ff0:	687b      	ldr	r3, [r7, #4]
 8024ff2:	681b      	ldr	r3, [r3, #0]
 8024ff4:	4a08      	ldr	r2, [pc, #32]	; (8025018 <lv_style_is_empty+0x38>)
 8024ff6:	4293      	cmp	r3, r2
 8024ff8:	d000      	beq.n	8024ffc <lv_style_is_empty+0x1c>
 8024ffa:	e7fe      	b.n	8024ffa <lv_style_is_empty+0x1a>

    return style->prop_cnt == 0 ? true : false;
 8024ffc:	687b      	ldr	r3, [r7, #4]
 8024ffe:	7adb      	ldrb	r3, [r3, #11]
 8025000:	2b00      	cmp	r3, #0
 8025002:	bf0c      	ite	eq
 8025004:	2301      	moveq	r3, #1
 8025006:	2300      	movne	r3, #0
 8025008:	b2db      	uxtb	r3, r3
}
 802500a:	4618      	mov	r0, r3
 802500c:	370c      	adds	r7, #12
 802500e:	46bd      	mov	sp, r7
 8025010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025014:	4770      	bx	lr
 8025016:	bf00      	nop
 8025018:	aabbccdd 	.word	0xaabbccdd

0802501c <_lv_style_get_prop_group>:

uint8_t _lv_style_get_prop_group(lv_style_prop_t prop)
{
 802501c:	b480      	push	{r7}
 802501e:	b085      	sub	sp, #20
 8025020:	af00      	add	r7, sp, #0
 8025022:	4603      	mov	r3, r0
 8025024:	80fb      	strh	r3, [r7, #6]
    uint16_t group = (prop & 0x1FF) >> 4;
 8025026:	88fb      	ldrh	r3, [r7, #6]
 8025028:	111b      	asrs	r3, r3, #4
 802502a:	b29b      	uxth	r3, r3
 802502c:	f003 031f 	and.w	r3, r3, #31
 8025030:	81fb      	strh	r3, [r7, #14]
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8025032:	89fb      	ldrh	r3, [r7, #14]
 8025034:	2b07      	cmp	r3, #7
 8025036:	d901      	bls.n	802503c <_lv_style_get_prop_group+0x20>
 8025038:	2307      	movs	r3, #7
 802503a:	81fb      	strh	r3, [r7, #14]
    return (uint8_t)group;
 802503c:	89fb      	ldrh	r3, [r7, #14]
 802503e:	b2db      	uxtb	r3, r3
}
 8025040:	4618      	mov	r0, r3
 8025042:	3714      	adds	r7, #20
 8025044:	46bd      	mov	sp, r7
 8025046:	f85d 7b04 	ldr.w	r7, [sp], #4
 802504a:	4770      	bx	lr

0802504c <_lv_style_prop_lookup_flags>:

uint8_t _lv_style_prop_lookup_flags(lv_style_prop_t prop)
{
 802504c:	b480      	push	{r7}
 802504e:	b083      	sub	sp, #12
 8025050:	af00      	add	r7, sp, #0
 8025052:	4603      	mov	r3, r0
 8025054:	80fb      	strh	r3, [r7, #6]
    extern const uint8_t _lv_style_builtin_prop_flag_lookup_table[];
    extern uint32_t _lv_style_custom_prop_flag_lookup_table_size;
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 8025056:	88fb      	ldrh	r3, [r7, #6]
 8025058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802505c:	4293      	cmp	r3, r2
 802505e:	d101      	bne.n	8025064 <_lv_style_prop_lookup_flags+0x18>
 8025060:	231f      	movs	r3, #31
 8025062:	e01e      	b.n	80250a2 <_lv_style_prop_lookup_flags+0x56>
    if(prop == LV_STYLE_PROP_INV) return 0;
 8025064:	88fb      	ldrh	r3, [r7, #6]
 8025066:	2b00      	cmp	r3, #0
 8025068:	d101      	bne.n	802506e <_lv_style_prop_lookup_flags+0x22>
 802506a:	2300      	movs	r3, #0
 802506c:	e019      	b.n	80250a2 <_lv_style_prop_lookup_flags+0x56>

    if(prop < _LV_STYLE_NUM_BUILT_IN_PROPS)
 802506e:	88fb      	ldrh	r3, [r7, #6]
 8025070:	2b6f      	cmp	r3, #111	; 0x6f
 8025072:	d803      	bhi.n	802507c <_lv_style_prop_lookup_flags+0x30>
        return _lv_style_builtin_prop_flag_lookup_table[prop];
 8025074:	88fb      	ldrh	r3, [r7, #6]
 8025076:	4a0e      	ldr	r2, [pc, #56]	; (80250b0 <_lv_style_prop_lookup_flags+0x64>)
 8025078:	5cd3      	ldrb	r3, [r2, r3]
 802507a:	e012      	b.n	80250a2 <_lv_style_prop_lookup_flags+0x56>
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
 802507c:	88fb      	ldrh	r3, [r7, #6]
 802507e:	3b70      	subs	r3, #112	; 0x70
 8025080:	80fb      	strh	r3, [r7, #6]
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 8025082:	4b0c      	ldr	r3, [pc, #48]	; (80250b4 <_lv_style_prop_lookup_flags+0x68>)
 8025084:	681b      	ldr	r3, [r3, #0]
 8025086:	2b00      	cmp	r3, #0
 8025088:	d00a      	beq.n	80250a0 <_lv_style_prop_lookup_flags+0x54>
 802508a:	88fa      	ldrh	r2, [r7, #6]
 802508c:	4b0a      	ldr	r3, [pc, #40]	; (80250b8 <_lv_style_prop_lookup_flags+0x6c>)
 802508e:	681b      	ldr	r3, [r3, #0]
 8025090:	429a      	cmp	r2, r3
 8025092:	d205      	bcs.n	80250a0 <_lv_style_prop_lookup_flags+0x54>
        return LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[prop];
 8025094:	4b07      	ldr	r3, [pc, #28]	; (80250b4 <_lv_style_prop_lookup_flags+0x68>)
 8025096:	681a      	ldr	r2, [r3, #0]
 8025098:	88fb      	ldrh	r3, [r7, #6]
 802509a:	4413      	add	r3, r2
 802509c:	781b      	ldrb	r3, [r3, #0]
 802509e:	e000      	b.n	80250a2 <_lv_style_prop_lookup_flags+0x56>
    return 0;
 80250a0:	2300      	movs	r3, #0
}
 80250a2:	4618      	mov	r0, r3
 80250a4:	370c      	adds	r7, #12
 80250a6:	46bd      	mov	sp, r7
 80250a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250ac:	4770      	bx	lr
 80250ae:	bf00      	nop
 80250b0:	0802fb88 	.word	0x0802fb88
 80250b4:	20000ac4 	.word	0x20000ac4
 80250b8:	2000cad4 	.word	0x2000cad4

080250bc <lv_style_set_prop_helper>:
 *   STATIC FUNCTIONS
 **********************/

static void lv_style_set_prop_helper(lv_style_prop_t prop, lv_style_value_t value, uint16_t * prop_storage,
                                     lv_style_value_t * value_storage)
{
 80250bc:	b480      	push	{r7}
 80250be:	b085      	sub	sp, #20
 80250c0:	af00      	add	r7, sp, #0
 80250c2:	60b9      	str	r1, [r7, #8]
 80250c4:	607a      	str	r2, [r7, #4]
 80250c6:	603b      	str	r3, [r7, #0]
 80250c8:	4603      	mov	r3, r0
 80250ca:	81fb      	strh	r3, [r7, #14]
    *prop_storage = prop;
 80250cc:	687b      	ldr	r3, [r7, #4]
 80250ce:	89fa      	ldrh	r2, [r7, #14]
 80250d0:	801a      	strh	r2, [r3, #0]
    *value_storage = value;
 80250d2:	683b      	ldr	r3, [r7, #0]
 80250d4:	68ba      	ldr	r2, [r7, #8]
 80250d6:	601a      	str	r2, [r3, #0]
}
 80250d8:	bf00      	nop
 80250da:	3714      	adds	r7, #20
 80250dc:	46bd      	mov	sp, r7
 80250de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250e2:	4770      	bx	lr

080250e4 <lv_style_set_prop_internal>:
    *prop_storage = prop; /* meta is OR-ed into the prop ID already */
}

static void lv_style_set_prop_internal(lv_style_t * style, lv_style_prop_t prop_and_meta, lv_style_value_t value,
                                       void (*value_adjustment_helper)(lv_style_prop_t, lv_style_value_t, uint16_t *, lv_style_value_t *))
{
 80250e4:	b590      	push	{r4, r7, lr}
 80250e6:	b095      	sub	sp, #84	; 0x54
 80250e8:	af00      	add	r7, sp, #0
 80250ea:	60f8      	str	r0, [r7, #12]
 80250ec:	607a      	str	r2, [r7, #4]
 80250ee:	603b      	str	r3, [r7, #0]
 80250f0:	460b      	mov	r3, r1
 80250f2:	817b      	strh	r3, [r7, #10]
    LV_ASSERT_STYLE(style);
 80250f4:	68fb      	ldr	r3, [r7, #12]
 80250f6:	2b00      	cmp	r3, #0
 80250f8:	d100      	bne.n	80250fc <lv_style_set_prop_internal+0x18>
 80250fa:	e7fe      	b.n	80250fa <lv_style_set_prop_internal+0x16>
 80250fc:	68fb      	ldr	r3, [r7, #12]
 80250fe:	681b      	ldr	r3, [r3, #0]
 8025100:	4a8b      	ldr	r2, [pc, #556]	; (8025330 <lv_style_set_prop_internal+0x24c>)
 8025102:	4293      	cmp	r3, r2
 8025104:	d000      	beq.n	8025108 <lv_style_set_prop_internal+0x24>
 8025106:	e7fe      	b.n	8025106 <lv_style_set_prop_internal+0x22>

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8025108:	68fb      	ldr	r3, [r7, #12]
 802510a:	891b      	ldrh	r3, [r3, #8]
 802510c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8025110:	4293      	cmp	r3, r2
 8025112:	f000 8104 	beq.w	802531e <lv_style_set_prop_internal+0x23a>
        LV_LOG_ERROR("Cannot set property of constant style");
        return;
    }

    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 8025116:	897b      	ldrh	r3, [r7, #10]
 8025118:	f3c3 030d 	ubfx	r3, r3, #0, #14
 802511c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

    if(style->prop_cnt > 1) {
 8025120:	68fb      	ldr	r3, [r7, #12]
 8025122:	7adb      	ldrb	r3, [r3, #11]
 8025124:	2b01      	cmp	r3, #1
 8025126:	f240 808d 	bls.w	8025244 <lv_style_set_prop_internal+0x160>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 802512a:	68fb      	ldr	r3, [r7, #12]
 802512c:	685a      	ldr	r2, [r3, #4]
 802512e:	68fb      	ldr	r3, [r7, #12]
 8025130:	7adb      	ldrb	r3, [r3, #11]
 8025132:	009b      	lsls	r3, r3, #2
 8025134:	4413      	add	r3, r2
 8025136:	633b      	str	r3, [r7, #48]	; 0x30
        uint16_t * props = (uint16_t *)tmp;
 8025138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802513a:	62fb      	str	r3, [r7, #44]	; 0x2c
        int32_t i;
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 802513c:	68fb      	ldr	r3, [r7, #12]
 802513e:	7adb      	ldrb	r3, [r3, #11]
 8025140:	3b01      	subs	r3, #1
 8025142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8025144:	e01e      	b.n	8025184 <lv_style_set_prop_internal+0xa0>
            if(LV_STYLE_PROP_ID_MASK(props[i]) == prop_id) {
 8025146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025148:	005b      	lsls	r3, r3, #1
 802514a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802514c:	4413      	add	r3, r2
 802514e:	881b      	ldrh	r3, [r3, #0]
 8025150:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8025154:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8025158:	429a      	cmp	r2, r3
 802515a:	d110      	bne.n	802517e <lv_style_set_prop_internal+0x9a>
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
 802515c:	68fb      	ldr	r3, [r7, #12]
 802515e:	685b      	ldr	r3, [r3, #4]
 8025160:	61fb      	str	r3, [r7, #28]
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
 8025162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025164:	005b      	lsls	r3, r3, #1
 8025166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025168:	18d1      	adds	r1, r2, r3
 802516a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802516c:	009b      	lsls	r3, r3, #2
 802516e:	69fa      	ldr	r2, [r7, #28]
 8025170:	4413      	add	r3, r2
 8025172:	8978      	ldrh	r0, [r7, #10]
 8025174:	683c      	ldr	r4, [r7, #0]
 8025176:	460a      	mov	r2, r1
 8025178:	6879      	ldr	r1, [r7, #4]
 802517a:	47a0      	blx	r4
                return;
 802517c:	e0d4      	b.n	8025328 <lv_style_set_prop_internal+0x244>
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 802517e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025180:	3b01      	subs	r3, #1
 8025182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8025184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025186:	2b00      	cmp	r3, #0
 8025188:	dadd      	bge.n	8025146 <lv_style_set_prop_internal+0x62>
            }
        }

        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 802518a:	68fb      	ldr	r3, [r7, #12]
 802518c:	7adb      	ldrb	r3, [r3, #11]
 802518e:	3301      	adds	r3, #1
 8025190:	461a      	mov	r2, r3
 8025192:	4613      	mov	r3, r2
 8025194:	005b      	lsls	r3, r3, #1
 8025196:	4413      	add	r3, r2
 8025198:	005b      	lsls	r3, r3, #1
 802519a:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 802519c:	68fb      	ldr	r3, [r7, #12]
 802519e:	685b      	ldr	r3, [r3, #4]
 80251a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80251a2:	4618      	mov	r0, r3
 80251a4:	f7fe ff04 	bl	8023fb0 <lv_mem_realloc>
 80251a8:	6278      	str	r0, [r7, #36]	; 0x24
        if(values_and_props == NULL) return;
 80251aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80251ac:	2b00      	cmp	r3, #0
 80251ae:	f000 80b8 	beq.w	8025322 <lv_style_set_prop_internal+0x23e>
        style->v_p.values_and_props = values_and_props;
 80251b2:	68fb      	ldr	r3, [r7, #12]
 80251b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80251b6:	605a      	str	r2, [r3, #4]

        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80251b8:	68fb      	ldr	r3, [r7, #12]
 80251ba:	7adb      	ldrb	r3, [r3, #11]
 80251bc:	009b      	lsls	r3, r3, #2
 80251be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80251c0:	4413      	add	r3, r2
 80251c2:	633b      	str	r3, [r7, #48]	; 0x30
        props = (uint16_t *)tmp;
 80251c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80251c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /*Shift all props to make place for the value before them*/
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80251c8:	68fb      	ldr	r3, [r7, #12]
 80251ca:	7adb      	ldrb	r3, [r3, #11]
 80251cc:	3b01      	subs	r3, #1
 80251ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80251d0:	e00d      	b.n	80251ee <lv_style_set_prop_internal+0x10a>
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 80251d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80251d4:	005b      	lsls	r3, r3, #1
 80251d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80251d8:	441a      	add	r2, r3
 80251da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80251dc:	3302      	adds	r3, #2
 80251de:	005b      	lsls	r3, r3, #1
 80251e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80251e2:	440b      	add	r3, r1
 80251e4:	8812      	ldrh	r2, [r2, #0]
 80251e6:	801a      	strh	r2, [r3, #0]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80251e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80251ea:	3b01      	subs	r3, #1
 80251ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80251ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80251f0:	2b00      	cmp	r3, #0
 80251f2:	daee      	bge.n	80251d2 <lv_style_set_prop_internal+0xee>
        }
        style->prop_cnt++;
 80251f4:	68fb      	ldr	r3, [r7, #12]
 80251f6:	7adb      	ldrb	r3, [r3, #11]
 80251f8:	3301      	adds	r3, #1
 80251fa:	b2da      	uxtb	r2, r3
 80251fc:	68fb      	ldr	r3, [r7, #12]
 80251fe:	72da      	strb	r2, [r3, #11]

        /*Go to the new position wit the props*/
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8025200:	68fb      	ldr	r3, [r7, #12]
 8025202:	7adb      	ldrb	r3, [r3, #11]
 8025204:	009b      	lsls	r3, r3, #2
 8025206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025208:	4413      	add	r3, r2
 802520a:	633b      	str	r3, [r7, #48]	; 0x30
        props = (uint16_t *)tmp;
 802520c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802520e:	62fb      	str	r3, [r7, #44]	; 0x2c
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;
 8025210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025212:	623b      	str	r3, [r7, #32]

        /*Set the new property and value*/
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 8025214:	68fb      	ldr	r3, [r7, #12]
 8025216:	7adb      	ldrb	r3, [r3, #11]
 8025218:	461a      	mov	r2, r3
 802521a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802521e:	4413      	add	r3, r2
 8025220:	005b      	lsls	r3, r3, #1
 8025222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025224:	18d1      	adds	r1, r2, r3
 8025226:	68fb      	ldr	r3, [r7, #12]
 8025228:	7adb      	ldrb	r3, [r3, #11]
 802522a:	461a      	mov	r2, r3
 802522c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8025230:	4413      	add	r3, r2
 8025232:	009b      	lsls	r3, r3, #2
 8025234:	6a3a      	ldr	r2, [r7, #32]
 8025236:	4413      	add	r3, r2
 8025238:	8978      	ldrh	r0, [r7, #10]
 802523a:	683c      	ldr	r4, [r7, #0]
 802523c:	460a      	mov	r2, r1
 802523e:	6879      	ldr	r1, [r7, #4]
 8025240:	47a0      	blx	r4
 8025242:	e057      	b.n	80252f4 <lv_style_set_prop_internal+0x210>
    }
    else if(style->prop_cnt == 1) {
 8025244:	68fb      	ldr	r3, [r7, #12]
 8025246:	7adb      	ldrb	r3, [r3, #11]
 8025248:	2b01      	cmp	r3, #1
 802524a:	d147      	bne.n	80252dc <lv_style_set_prop_internal+0x1f8>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
 802524c:	68fb      	ldr	r3, [r7, #12]
 802524e:	891b      	ldrh	r3, [r3, #8]
 8025250:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8025254:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8025258:	429a      	cmp	r2, r3
 802525a:	d109      	bne.n	8025270 <lv_style_set_prop_internal+0x18c>
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 802525c:	68fb      	ldr	r3, [r7, #12]
 802525e:	f103 0208 	add.w	r2, r3, #8
 8025262:	68fb      	ldr	r3, [r7, #12]
 8025264:	3304      	adds	r3, #4
 8025266:	8978      	ldrh	r0, [r7, #10]
 8025268:	683c      	ldr	r4, [r7, #0]
 802526a:	6879      	ldr	r1, [r7, #4]
 802526c:	47a0      	blx	r4
            return;
 802526e:	e05b      	b.n	8025328 <lv_style_set_prop_internal+0x244>
        }
        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8025270:	68fb      	ldr	r3, [r7, #12]
 8025272:	7adb      	ldrb	r3, [r3, #11]
 8025274:	3301      	adds	r3, #1
 8025276:	461a      	mov	r2, r3
 8025278:	4613      	mov	r3, r2
 802527a:	005b      	lsls	r3, r3, #1
 802527c:	4413      	add	r3, r2
 802527e:	005b      	lsls	r3, r3, #1
 8025280:	647b      	str	r3, [r7, #68]	; 0x44
        uint8_t * values_and_props = lv_mem_alloc(size);
 8025282:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8025284:	f7fe fe36 	bl	8023ef4 <lv_mem_alloc>
 8025288:	6438      	str	r0, [r7, #64]	; 0x40
        if(values_and_props == NULL) return;
 802528a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802528c:	2b00      	cmp	r3, #0
 802528e:	d04a      	beq.n	8025326 <lv_style_set_prop_internal+0x242>
        lv_style_value_t value_tmp = style->v_p.value1;
 8025290:	68fb      	ldr	r3, [r7, #12]
 8025292:	685b      	ldr	r3, [r3, #4]
 8025294:	617b      	str	r3, [r7, #20]
        style->v_p.values_and_props = values_and_props;
 8025296:	68fb      	ldr	r3, [r7, #12]
 8025298:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802529a:	605a      	str	r2, [r3, #4]
        style->prop_cnt++;
 802529c:	68fb      	ldr	r3, [r7, #12]
 802529e:	7adb      	ldrb	r3, [r3, #11]
 80252a0:	3301      	adds	r3, #1
 80252a2:	b2da      	uxtb	r2, r3
 80252a4:	68fb      	ldr	r3, [r7, #12]
 80252a6:	72da      	strb	r2, [r3, #11]

        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80252a8:	68fb      	ldr	r3, [r7, #12]
 80252aa:	7adb      	ldrb	r3, [r3, #11]
 80252ac:	009b      	lsls	r3, r3, #2
 80252ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80252b0:	4413      	add	r3, r2
 80252b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint16_t * props = (uint16_t *)tmp;
 80252b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80252b6:	63bb      	str	r3, [r7, #56]	; 0x38
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;
 80252b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80252ba:	637b      	str	r3, [r7, #52]	; 0x34
        props[0] = style->prop1;
 80252bc:	68fb      	ldr	r3, [r7, #12]
 80252be:	891a      	ldrh	r2, [r3, #8]
 80252c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80252c2:	801a      	strh	r2, [r3, #0]
        values[0] = value_tmp;
 80252c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80252c6:	697a      	ldr	r2, [r7, #20]
 80252c8:	601a      	str	r2, [r3, #0]
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
 80252ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80252cc:	1c9a      	adds	r2, r3, #2
 80252ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80252d0:	3304      	adds	r3, #4
 80252d2:	8978      	ldrh	r0, [r7, #10]
 80252d4:	683c      	ldr	r4, [r7, #0]
 80252d6:	6879      	ldr	r1, [r7, #4]
 80252d8:	47a0      	blx	r4
 80252da:	e00b      	b.n	80252f4 <lv_style_set_prop_internal+0x210>
    }
    else {
        style->prop_cnt = 1;
 80252dc:	68fb      	ldr	r3, [r7, #12]
 80252de:	2201      	movs	r2, #1
 80252e0:	72da      	strb	r2, [r3, #11]
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 80252e2:	68fb      	ldr	r3, [r7, #12]
 80252e4:	f103 0208 	add.w	r2, r3, #8
 80252e8:	68fb      	ldr	r3, [r7, #12]
 80252ea:	3304      	adds	r3, #4
 80252ec:	8978      	ldrh	r0, [r7, #10]
 80252ee:	683c      	ldr	r4, [r7, #0]
 80252f0:	6879      	ldr	r1, [r7, #4]
 80252f2:	47a0      	blx	r4
    }

    uint8_t group = _lv_style_get_prop_group(prop_id);
 80252f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80252f8:	4618      	mov	r0, r3
 80252fa:	f7ff fe8f 	bl	802501c <_lv_style_get_prop_group>
 80252fe:	4603      	mov	r3, r0
 8025300:	76fb      	strb	r3, [r7, #27]
    style->has_group |= 1 << group;
 8025302:	68fb      	ldr	r3, [r7, #12]
 8025304:	7a9b      	ldrb	r3, [r3, #10]
 8025306:	b25a      	sxtb	r2, r3
 8025308:	7efb      	ldrb	r3, [r7, #27]
 802530a:	2101      	movs	r1, #1
 802530c:	fa01 f303 	lsl.w	r3, r1, r3
 8025310:	b25b      	sxtb	r3, r3
 8025312:	4313      	orrs	r3, r2
 8025314:	b25b      	sxtb	r3, r3
 8025316:	b2da      	uxtb	r2, r3
 8025318:	68fb      	ldr	r3, [r7, #12]
 802531a:	729a      	strb	r2, [r3, #10]
 802531c:	e004      	b.n	8025328 <lv_style_set_prop_internal+0x244>
        return;
 802531e:	bf00      	nop
 8025320:	e002      	b.n	8025328 <lv_style_set_prop_internal+0x244>
        if(values_and_props == NULL) return;
 8025322:	bf00      	nop
 8025324:	e000      	b.n	8025328 <lv_style_set_prop_internal+0x244>
        if(values_and_props == NULL) return;
 8025326:	bf00      	nop
}
 8025328:	3754      	adds	r7, #84	; 0x54
 802532a:	46bd      	mov	sp, r7
 802532c:	bd90      	pop	{r4, r7, pc}
 802532e:	bf00      	nop
 8025330:	aabbccdd 	.word	0xaabbccdd

08025334 <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 8025334:	b580      	push	{r7, lr}
 8025336:	af00      	add	r7, sp, #0
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 8025338:	2118      	movs	r1, #24
 802533a:	4804      	ldr	r0, [pc, #16]	; (802534c <_lv_timer_core_init+0x18>)
 802533c:	f7fe fb3d 	bl	80239ba <_lv_ll_init>

    /*Initially enable the lv_timer handling*/
    lv_timer_enable(true);
 8025340:	2001      	movs	r0, #1
 8025342:	f000 f94d 	bl	80255e0 <lv_timer_enable>
}
 8025346:	bf00      	nop
 8025348:	bd80      	pop	{r7, pc}
 802534a:	bf00      	nop
 802534c:	200008bc 	.word	0x200008bc

08025350 <lv_timer_handler>:
/**
 * Call it periodically to handle lv_timers.
 * @return the time after which it must be called again
 */
LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_timer_handler(void)
{
 8025350:	b580      	push	{r7, lr}
 8025352:	b086      	sub	sp, #24
 8025354:	af00      	add	r7, sp, #0
    TIMER_TRACE("begin");

    /*Avoid concurrent running of the timer handler*/
    static bool already_running = false;
    if(already_running) {
 8025356:	4b59      	ldr	r3, [pc, #356]	; (80254bc <lv_timer_handler+0x16c>)
 8025358:	781b      	ldrb	r3, [r3, #0]
 802535a:	2b00      	cmp	r3, #0
 802535c:	d001      	beq.n	8025362 <lv_timer_handler+0x12>
        TIMER_TRACE("already running, concurrent calls are not allow, returning");
        return 1;
 802535e:	2301      	movs	r3, #1
 8025360:	e0a7      	b.n	80254b2 <lv_timer_handler+0x162>
    }
    already_running = true;
 8025362:	4b56      	ldr	r3, [pc, #344]	; (80254bc <lv_timer_handler+0x16c>)
 8025364:	2201      	movs	r2, #1
 8025366:	701a      	strb	r2, [r3, #0]

    if(lv_timer_run == false) {
 8025368:	4b55      	ldr	r3, [pc, #340]	; (80254c0 <lv_timer_handler+0x170>)
 802536a:	781b      	ldrb	r3, [r3, #0]
 802536c:	f083 0301 	eor.w	r3, r3, #1
 8025370:	b2db      	uxtb	r3, r3
 8025372:	2b00      	cmp	r3, #0
 8025374:	d004      	beq.n	8025380 <lv_timer_handler+0x30>
        already_running = false; /*Release mutex*/
 8025376:	4b51      	ldr	r3, [pc, #324]	; (80254bc <lv_timer_handler+0x16c>)
 8025378:	2200      	movs	r2, #0
 802537a:	701a      	strb	r2, [r3, #0]
        return 1;
 802537c:	2301      	movs	r3, #1
 802537e:	e098      	b.n	80254b2 <lv_timer_handler+0x162>
    }

    static uint32_t idle_period_start = 0;
    static uint32_t busy_time         = 0;

    uint32_t handler_start = lv_tick_get();
 8025380:	f7fc fe28 	bl	8021fd4 <lv_tick_get>
 8025384:	60f8      	str	r0, [r7, #12]

    if(handler_start == 0) {
 8025386:	68fb      	ldr	r3, [r7, #12]
 8025388:	2b00      	cmp	r3, #0
 802538a:	d10b      	bne.n	80253a4 <lv_timer_handler+0x54>
        static uint32_t run_cnt = 0;
        run_cnt++;
 802538c:	4b4d      	ldr	r3, [pc, #308]	; (80254c4 <lv_timer_handler+0x174>)
 802538e:	681b      	ldr	r3, [r3, #0]
 8025390:	3301      	adds	r3, #1
 8025392:	4a4c      	ldr	r2, [pc, #304]	; (80254c4 <lv_timer_handler+0x174>)
 8025394:	6013      	str	r3, [r2, #0]
        if(run_cnt > 100) {
 8025396:	4b4b      	ldr	r3, [pc, #300]	; (80254c4 <lv_timer_handler+0x174>)
 8025398:	681b      	ldr	r3, [r3, #0]
 802539a:	2b64      	cmp	r3, #100	; 0x64
 802539c:	d902      	bls.n	80253a4 <lv_timer_handler+0x54>
            run_cnt = 0;
 802539e:	4b49      	ldr	r3, [pc, #292]	; (80254c4 <lv_timer_handler+0x174>)
 80253a0:	2200      	movs	r2, #0
 80253a2:	601a      	str	r2, [r3, #0]
    }

    /*Run all timer from the list*/
    lv_timer_t * next;
    do {
        timer_deleted             = false;
 80253a4:	4b48      	ldr	r3, [pc, #288]	; (80254c8 <lv_timer_handler+0x178>)
 80253a6:	2200      	movs	r2, #0
 80253a8:	701a      	strb	r2, [r3, #0]
        timer_created             = false;
 80253aa:	4b48      	ldr	r3, [pc, #288]	; (80254cc <lv_timer_handler+0x17c>)
 80253ac:	2200      	movs	r2, #0
 80253ae:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 80253b0:	4847      	ldr	r0, [pc, #284]	; (80254d0 <lv_timer_handler+0x180>)
 80253b2:	f7fe fbe0 	bl	8023b76 <_lv_ll_get_head>
 80253b6:	4603      	mov	r3, r0
 80253b8:	4a46      	ldr	r2, [pc, #280]	; (80254d4 <lv_timer_handler+0x184>)
 80253ba:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 80253bc:	e019      	b.n	80253f2 <lv_timer_handler+0xa2>
            /*The timer might be deleted if it runs only once ('repeat_count = 1')
             *So get next element until the current is surely valid*/
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 80253be:	4b45      	ldr	r3, [pc, #276]	; (80254d4 <lv_timer_handler+0x184>)
 80253c0:	681b      	ldr	r3, [r3, #0]
 80253c2:	4619      	mov	r1, r3
 80253c4:	4842      	ldr	r0, [pc, #264]	; (80254d0 <lv_timer_handler+0x180>)
 80253c6:	f7fe fbf8 	bl	8023bba <_lv_ll_get_next>
 80253ca:	6178      	str	r0, [r7, #20]

            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 80253cc:	4b41      	ldr	r3, [pc, #260]	; (80254d4 <lv_timer_handler+0x184>)
 80253ce:	681b      	ldr	r3, [r3, #0]
 80253d0:	4618      	mov	r0, r3
 80253d2:	f000 f915 	bl	8025600 <lv_timer_exec>
 80253d6:	4603      	mov	r3, r0
 80253d8:	2b00      	cmp	r3, #0
 80253da:	d007      	beq.n	80253ec <lv_timer_handler+0x9c>
                /*If a timer was created or deleted then this or the next item might be corrupted*/
                if(timer_created || timer_deleted) {
 80253dc:	4b3b      	ldr	r3, [pc, #236]	; (80254cc <lv_timer_handler+0x17c>)
 80253de:	781b      	ldrb	r3, [r3, #0]
 80253e0:	2b00      	cmp	r3, #0
 80253e2:	d10a      	bne.n	80253fa <lv_timer_handler+0xaa>
 80253e4:	4b38      	ldr	r3, [pc, #224]	; (80254c8 <lv_timer_handler+0x178>)
 80253e6:	781b      	ldrb	r3, [r3, #0]
 80253e8:	2b00      	cmp	r3, #0
 80253ea:	d106      	bne.n	80253fa <lv_timer_handler+0xaa>
                    TIMER_TRACE("Start from the first timer again because a timer was created or deleted");
                    break;
                }
            }

            LV_GC_ROOT(_lv_timer_act) = next; /*Load the next timer*/
 80253ec:	4a39      	ldr	r2, [pc, #228]	; (80254d4 <lv_timer_handler+0x184>)
 80253ee:	697b      	ldr	r3, [r7, #20]
 80253f0:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 80253f2:	4b38      	ldr	r3, [pc, #224]	; (80254d4 <lv_timer_handler+0x184>)
 80253f4:	681b      	ldr	r3, [r3, #0]
 80253f6:	2b00      	cmp	r3, #0
 80253f8:	d1e1      	bne.n	80253be <lv_timer_handler+0x6e>
        }
    } while(LV_GC_ROOT(_lv_timer_act));
 80253fa:	4b36      	ldr	r3, [pc, #216]	; (80254d4 <lv_timer_handler+0x184>)
 80253fc:	681b      	ldr	r3, [r3, #0]
 80253fe:	2b00      	cmp	r3, #0
 8025400:	d1d0      	bne.n	80253a4 <lv_timer_handler+0x54>

    uint32_t time_till_next = LV_NO_TIMER_READY;
 8025402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8025406:	613b      	str	r3, [r7, #16]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8025408:	4831      	ldr	r0, [pc, #196]	; (80254d0 <lv_timer_handler+0x180>)
 802540a:	f7fe fbb4 	bl	8023b76 <_lv_ll_get_head>
 802540e:	6178      	str	r0, [r7, #20]
    while(next) {
 8025410:	e015      	b.n	802543e <lv_timer_handler+0xee>
        if(!next->paused) {
 8025412:	697b      	ldr	r3, [r7, #20]
 8025414:	7d1b      	ldrb	r3, [r3, #20]
 8025416:	f003 0301 	and.w	r3, r3, #1
 802541a:	b2db      	uxtb	r3, r3
 802541c:	2b00      	cmp	r3, #0
 802541e:	d109      	bne.n	8025434 <lv_timer_handler+0xe4>
            uint32_t delay = lv_timer_time_remaining(next);
 8025420:	6978      	ldr	r0, [r7, #20]
 8025422:	f000 f935 	bl	8025690 <lv_timer_time_remaining>
 8025426:	6078      	str	r0, [r7, #4]
            if(delay < time_till_next)
 8025428:	687a      	ldr	r2, [r7, #4]
 802542a:	693b      	ldr	r3, [r7, #16]
 802542c:	429a      	cmp	r2, r3
 802542e:	d201      	bcs.n	8025434 <lv_timer_handler+0xe4>
                time_till_next = delay;
 8025430:	687b      	ldr	r3, [r7, #4]
 8025432:	613b      	str	r3, [r7, #16]
        }

        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8025434:	6979      	ldr	r1, [r7, #20]
 8025436:	4826      	ldr	r0, [pc, #152]	; (80254d0 <lv_timer_handler+0x180>)
 8025438:	f7fe fbbf 	bl	8023bba <_lv_ll_get_next>
 802543c:	6178      	str	r0, [r7, #20]
    while(next) {
 802543e:	697b      	ldr	r3, [r7, #20]
 8025440:	2b00      	cmp	r3, #0
 8025442:	d1e6      	bne.n	8025412 <lv_timer_handler+0xc2>
    }

    busy_time += lv_tick_elaps(handler_start);
 8025444:	68f8      	ldr	r0, [r7, #12]
 8025446:	f7fc fddf 	bl	8022008 <lv_tick_elaps>
 802544a:	4602      	mov	r2, r0
 802544c:	4b22      	ldr	r3, [pc, #136]	; (80254d8 <lv_timer_handler+0x188>)
 802544e:	681b      	ldr	r3, [r3, #0]
 8025450:	4413      	add	r3, r2
 8025452:	4a21      	ldr	r2, [pc, #132]	; (80254d8 <lv_timer_handler+0x188>)
 8025454:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8025456:	4b21      	ldr	r3, [pc, #132]	; (80254dc <lv_timer_handler+0x18c>)
 8025458:	681b      	ldr	r3, [r3, #0]
 802545a:	4618      	mov	r0, r3
 802545c:	f7fc fdd4 	bl	8022008 <lv_tick_elaps>
 8025460:	60b8      	str	r0, [r7, #8]
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8025462:	68bb      	ldr	r3, [r7, #8]
 8025464:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8025468:	d31f      	bcc.n	80254aa <lv_timer_handler+0x15a>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 802546a:	4b1b      	ldr	r3, [pc, #108]	; (80254d8 <lv_timer_handler+0x188>)
 802546c:	681b      	ldr	r3, [r3, #0]
 802546e:	2264      	movs	r2, #100	; 0x64
 8025470:	fb03 f202 	mul.w	r2, r3, r2
 8025474:	68bb      	ldr	r3, [r7, #8]
 8025476:	fbb2 f3f3 	udiv	r3, r2, r3
 802547a:	b2da      	uxtb	r2, r3
 802547c:	4b18      	ldr	r3, [pc, #96]	; (80254e0 <lv_timer_handler+0x190>)
 802547e:	701a      	strb	r2, [r3, #0]
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 8025480:	4b17      	ldr	r3, [pc, #92]	; (80254e0 <lv_timer_handler+0x190>)
 8025482:	781b      	ldrb	r3, [r3, #0]
 8025484:	2b64      	cmp	r3, #100	; 0x64
 8025486:	d805      	bhi.n	8025494 <lv_timer_handler+0x144>
 8025488:	4b15      	ldr	r3, [pc, #84]	; (80254e0 <lv_timer_handler+0x190>)
 802548a:	781b      	ldrb	r3, [r3, #0]
 802548c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8025490:	b2db      	uxtb	r3, r3
 8025492:	e000      	b.n	8025496 <lv_timer_handler+0x146>
 8025494:	2300      	movs	r3, #0
 8025496:	4a12      	ldr	r2, [pc, #72]	; (80254e0 <lv_timer_handler+0x190>)
 8025498:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 802549a:	4b0f      	ldr	r3, [pc, #60]	; (80254d8 <lv_timer_handler+0x188>)
 802549c:	2200      	movs	r2, #0
 802549e:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 80254a0:	f7fc fd98 	bl	8021fd4 <lv_tick_get>
 80254a4:	4603      	mov	r3, r0
 80254a6:	4a0d      	ldr	r2, [pc, #52]	; (80254dc <lv_timer_handler+0x18c>)
 80254a8:	6013      	str	r3, [r2, #0]
    }

    already_running = false; /*Release the mutex*/
 80254aa:	4b04      	ldr	r3, [pc, #16]	; (80254bc <lv_timer_handler+0x16c>)
 80254ac:	2200      	movs	r2, #0
 80254ae:	701a      	strb	r2, [r3, #0]

    TIMER_TRACE("finished (%d ms until the next timer call)", time_till_next);
    return time_till_next;
 80254b0:	693b      	ldr	r3, [r7, #16]
}
 80254b2:	4618      	mov	r0, r3
 80254b4:	3718      	adds	r7, #24
 80254b6:	46bd      	mov	sp, r7
 80254b8:	bd80      	pop	{r7, pc}
 80254ba:	bf00      	nop
 80254bc:	2000cadc 	.word	0x2000cadc
 80254c0:	2000cad8 	.word	0x2000cad8
 80254c4:	2000cae0 	.word	0x2000cae0
 80254c8:	2000cada 	.word	0x2000cada
 80254cc:	2000cadb 	.word	0x2000cadb
 80254d0:	200008bc 	.word	0x200008bc
 80254d4:	2000094c 	.word	0x2000094c
 80254d8:	2000cae4 	.word	0x2000cae4
 80254dc:	2000cae8 	.word	0x2000cae8
 80254e0:	2000cad9 	.word	0x2000cad9

080254e4 <lv_timer_create>:
 * @param period call period in ms unit
 * @param user_data custom parameter
 * @return pointer to the new timer
 */
lv_timer_t * lv_timer_create(lv_timer_cb_t timer_xcb, uint32_t period, void * user_data)
{
 80254e4:	b580      	push	{r7, lr}
 80254e6:	b086      	sub	sp, #24
 80254e8:	af00      	add	r7, sp, #0
 80254ea:	60f8      	str	r0, [r7, #12]
 80254ec:	60b9      	str	r1, [r7, #8]
 80254ee:	607a      	str	r2, [r7, #4]
    lv_timer_t * new_timer = NULL;
 80254f0:	2300      	movs	r3, #0
 80254f2:	617b      	str	r3, [r7, #20]

    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 80254f4:	4815      	ldr	r0, [pc, #84]	; (802554c <lv_timer_create+0x68>)
 80254f6:	f7fe fa79 	bl	80239ec <_lv_ll_ins_head>
 80254fa:	6178      	str	r0, [r7, #20]
    LV_ASSERT_MALLOC(new_timer);
 80254fc:	697b      	ldr	r3, [r7, #20]
 80254fe:	2b00      	cmp	r3, #0
 8025500:	d100      	bne.n	8025504 <lv_timer_create+0x20>
 8025502:	e7fe      	b.n	8025502 <lv_timer_create+0x1e>
    if(new_timer == NULL) return NULL;
 8025504:	697b      	ldr	r3, [r7, #20]
 8025506:	2b00      	cmp	r3, #0
 8025508:	d101      	bne.n	802550e <lv_timer_create+0x2a>
 802550a:	2300      	movs	r3, #0
 802550c:	e01a      	b.n	8025544 <lv_timer_create+0x60>

    new_timer->period = period;
 802550e:	697b      	ldr	r3, [r7, #20]
 8025510:	68ba      	ldr	r2, [r7, #8]
 8025512:	601a      	str	r2, [r3, #0]
    new_timer->timer_cb = timer_xcb;
 8025514:	697b      	ldr	r3, [r7, #20]
 8025516:	68fa      	ldr	r2, [r7, #12]
 8025518:	609a      	str	r2, [r3, #8]
    new_timer->repeat_count = -1;
 802551a:	697b      	ldr	r3, [r7, #20]
 802551c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8025520:	611a      	str	r2, [r3, #16]
    new_timer->paused = 0;
 8025522:	697a      	ldr	r2, [r7, #20]
 8025524:	7d13      	ldrb	r3, [r2, #20]
 8025526:	f36f 0300 	bfc	r3, #0, #1
 802552a:	7513      	strb	r3, [r2, #20]
    new_timer->last_run = lv_tick_get();
 802552c:	f7fc fd52 	bl	8021fd4 <lv_tick_get>
 8025530:	4602      	mov	r2, r0
 8025532:	697b      	ldr	r3, [r7, #20]
 8025534:	605a      	str	r2, [r3, #4]
    new_timer->user_data = user_data;
 8025536:	697b      	ldr	r3, [r7, #20]
 8025538:	687a      	ldr	r2, [r7, #4]
 802553a:	60da      	str	r2, [r3, #12]

    timer_created = true;
 802553c:	4b04      	ldr	r3, [pc, #16]	; (8025550 <lv_timer_create+0x6c>)
 802553e:	2201      	movs	r2, #1
 8025540:	701a      	strb	r2, [r3, #0]

    return new_timer;
 8025542:	697b      	ldr	r3, [r7, #20]
}
 8025544:	4618      	mov	r0, r3
 8025546:	3718      	adds	r7, #24
 8025548:	46bd      	mov	sp, r7
 802554a:	bd80      	pop	{r7, pc}
 802554c:	200008bc 	.word	0x200008bc
 8025550:	2000cadb 	.word	0x2000cadb

08025554 <lv_timer_del>:
/**
 * Delete a lv_timer
 * @param timer pointer to timer created by timer
 */
void lv_timer_del(lv_timer_t * timer)
{
 8025554:	b580      	push	{r7, lr}
 8025556:	b082      	sub	sp, #8
 8025558:	af00      	add	r7, sp, #0
 802555a:	6078      	str	r0, [r7, #4]
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 802555c:	6879      	ldr	r1, [r7, #4]
 802555e:	4806      	ldr	r0, [pc, #24]	; (8025578 <lv_timer_del+0x24>)
 8025560:	f7fe faac 	bl	8023abc <_lv_ll_remove>
    timer_deleted = true;
 8025564:	4b05      	ldr	r3, [pc, #20]	; (802557c <lv_timer_del+0x28>)
 8025566:	2201      	movs	r2, #1
 8025568:	701a      	strb	r2, [r3, #0]

    lv_mem_free(timer);
 802556a:	6878      	ldr	r0, [r7, #4]
 802556c:	f7fe fcf2 	bl	8023f54 <lv_mem_free>
}
 8025570:	bf00      	nop
 8025572:	3708      	adds	r7, #8
 8025574:	46bd      	mov	sp, r7
 8025576:	bd80      	pop	{r7, pc}
 8025578:	200008bc 	.word	0x200008bc
 802557c:	2000cada 	.word	0x2000cada

08025580 <lv_timer_pause>:
/**
 * Pause/resume a timer.
 * @param timer pointer to an lv_timer
 */
void lv_timer_pause(lv_timer_t * timer)
{
 8025580:	b480      	push	{r7}
 8025582:	b083      	sub	sp, #12
 8025584:	af00      	add	r7, sp, #0
 8025586:	6078      	str	r0, [r7, #4]
    timer->paused = true;
 8025588:	687a      	ldr	r2, [r7, #4]
 802558a:	7d13      	ldrb	r3, [r2, #20]
 802558c:	f043 0301 	orr.w	r3, r3, #1
 8025590:	7513      	strb	r3, [r2, #20]
}
 8025592:	bf00      	nop
 8025594:	370c      	adds	r7, #12
 8025596:	46bd      	mov	sp, r7
 8025598:	f85d 7b04 	ldr.w	r7, [sp], #4
 802559c:	4770      	bx	lr

0802559e <lv_timer_resume>:

void lv_timer_resume(lv_timer_t * timer)
{
 802559e:	b480      	push	{r7}
 80255a0:	b083      	sub	sp, #12
 80255a2:	af00      	add	r7, sp, #0
 80255a4:	6078      	str	r0, [r7, #4]
    timer->paused = false;
 80255a6:	687a      	ldr	r2, [r7, #4]
 80255a8:	7d13      	ldrb	r3, [r2, #20]
 80255aa:	f36f 0300 	bfc	r3, #0, #1
 80255ae:	7513      	strb	r3, [r2, #20]
}
 80255b0:	bf00      	nop
 80255b2:	370c      	adds	r7, #12
 80255b4:	46bd      	mov	sp, r7
 80255b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255ba:	4770      	bx	lr

080255bc <lv_timer_ready>:
/**
 * Make a lv_timer ready. It will not wait its period.
 * @param timer pointer to a lv_timer.
 */
void lv_timer_ready(lv_timer_t * timer)
{
 80255bc:	b580      	push	{r7, lr}
 80255be:	b082      	sub	sp, #8
 80255c0:	af00      	add	r7, sp, #0
 80255c2:	6078      	str	r0, [r7, #4]
    timer->last_run = lv_tick_get() - timer->period - 1;
 80255c4:	f7fc fd06 	bl	8021fd4 <lv_tick_get>
 80255c8:	4602      	mov	r2, r0
 80255ca:	687b      	ldr	r3, [r7, #4]
 80255cc:	681b      	ldr	r3, [r3, #0]
 80255ce:	1ad3      	subs	r3, r2, r3
 80255d0:	1e5a      	subs	r2, r3, #1
 80255d2:	687b      	ldr	r3, [r7, #4]
 80255d4:	605a      	str	r2, [r3, #4]
}
 80255d6:	bf00      	nop
 80255d8:	3708      	adds	r7, #8
 80255da:	46bd      	mov	sp, r7
 80255dc:	bd80      	pop	{r7, pc}
	...

080255e0 <lv_timer_enable>:
/**
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
 80255e0:	b480      	push	{r7}
 80255e2:	b083      	sub	sp, #12
 80255e4:	af00      	add	r7, sp, #0
 80255e6:	4603      	mov	r3, r0
 80255e8:	71fb      	strb	r3, [r7, #7]
    lv_timer_run = en;
 80255ea:	4a04      	ldr	r2, [pc, #16]	; (80255fc <lv_timer_enable+0x1c>)
 80255ec:	79fb      	ldrb	r3, [r7, #7]
 80255ee:	7013      	strb	r3, [r2, #0]
}
 80255f0:	bf00      	nop
 80255f2:	370c      	adds	r7, #12
 80255f4:	46bd      	mov	sp, r7
 80255f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255fa:	4770      	bx	lr
 80255fc:	2000cad8 	.word	0x2000cad8

08025600 <lv_timer_exec>:
 * Execute timer if its remaining time is zero
 * @param timer pointer to lv_timer
 * @return true: execute, false: not executed
 */
static bool lv_timer_exec(lv_timer_t * timer)
{
 8025600:	b580      	push	{r7, lr}
 8025602:	b084      	sub	sp, #16
 8025604:	af00      	add	r7, sp, #0
 8025606:	6078      	str	r0, [r7, #4]
    if(timer->paused) return false;
 8025608:	687b      	ldr	r3, [r7, #4]
 802560a:	7d1b      	ldrb	r3, [r3, #20]
 802560c:	f003 0301 	and.w	r3, r3, #1
 8025610:	b2db      	uxtb	r3, r3
 8025612:	2b00      	cmp	r3, #0
 8025614:	d001      	beq.n	802561a <lv_timer_exec+0x1a>
 8025616:	2300      	movs	r3, #0
 8025618:	e034      	b.n	8025684 <lv_timer_exec+0x84>

    bool exec = false;
 802561a:	2300      	movs	r3, #0
 802561c:	73fb      	strb	r3, [r7, #15]
    if(lv_timer_time_remaining(timer) == 0) {
 802561e:	6878      	ldr	r0, [r7, #4]
 8025620:	f000 f836 	bl	8025690 <lv_timer_time_remaining>
 8025624:	4603      	mov	r3, r0
 8025626:	2b00      	cmp	r3, #0
 8025628:	d11d      	bne.n	8025666 <lv_timer_exec+0x66>
        /* Decrement the repeat count before executing the timer_cb.
         * If any timer is deleted `if(timer->repeat_count == 0)` is not executed below
         * but at least the repeat count is zero and the timer can be deleted in the next round*/
        int32_t original_repeat_count = timer->repeat_count;
 802562a:	687b      	ldr	r3, [r7, #4]
 802562c:	691b      	ldr	r3, [r3, #16]
 802562e:	60bb      	str	r3, [r7, #8]
        if(timer->repeat_count > 0) timer->repeat_count--;
 8025630:	687b      	ldr	r3, [r7, #4]
 8025632:	691b      	ldr	r3, [r3, #16]
 8025634:	2b00      	cmp	r3, #0
 8025636:	dd04      	ble.n	8025642 <lv_timer_exec+0x42>
 8025638:	687b      	ldr	r3, [r7, #4]
 802563a:	691b      	ldr	r3, [r3, #16]
 802563c:	1e5a      	subs	r2, r3, #1
 802563e:	687b      	ldr	r3, [r7, #4]
 8025640:	611a      	str	r2, [r3, #16]
        timer->last_run = lv_tick_get();
 8025642:	f7fc fcc7 	bl	8021fd4 <lv_tick_get>
 8025646:	4602      	mov	r2, r0
 8025648:	687b      	ldr	r3, [r7, #4]
 802564a:	605a      	str	r2, [r3, #4]
        TIMER_TRACE("calling timer callback: %p", *((void **)&timer->timer_cb));
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 802564c:	687b      	ldr	r3, [r7, #4]
 802564e:	689b      	ldr	r3, [r3, #8]
 8025650:	2b00      	cmp	r3, #0
 8025652:	d006      	beq.n	8025662 <lv_timer_exec+0x62>
 8025654:	68bb      	ldr	r3, [r7, #8]
 8025656:	2b00      	cmp	r3, #0
 8025658:	d003      	beq.n	8025662 <lv_timer_exec+0x62>
 802565a:	687b      	ldr	r3, [r7, #4]
 802565c:	689b      	ldr	r3, [r3, #8]
 802565e:	6878      	ldr	r0, [r7, #4]
 8025660:	4798      	blx	r3
        TIMER_TRACE("timer callback %p finished", *((void **)&timer->timer_cb));
        LV_ASSERT_MEM_INTEGRITY();
        exec = true;
 8025662:	2301      	movs	r3, #1
 8025664:	73fb      	strb	r3, [r7, #15]
    }

    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 8025666:	4b09      	ldr	r3, [pc, #36]	; (802568c <lv_timer_exec+0x8c>)
 8025668:	781b      	ldrb	r3, [r3, #0]
 802566a:	f083 0301 	eor.w	r3, r3, #1
 802566e:	b2db      	uxtb	r3, r3
 8025670:	2b00      	cmp	r3, #0
 8025672:	d006      	beq.n	8025682 <lv_timer_exec+0x82>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8025674:	687b      	ldr	r3, [r7, #4]
 8025676:	691b      	ldr	r3, [r3, #16]
 8025678:	2b00      	cmp	r3, #0
 802567a:	d102      	bne.n	8025682 <lv_timer_exec+0x82>
            TIMER_TRACE("deleting timer with %p callback because the repeat count is over", *((void **)&timer->timer_cb));
            lv_timer_del(timer);
 802567c:	6878      	ldr	r0, [r7, #4]
 802567e:	f7ff ff69 	bl	8025554 <lv_timer_del>
        }
    }

    return exec;
 8025682:	7bfb      	ldrb	r3, [r7, #15]
}
 8025684:	4618      	mov	r0, r3
 8025686:	3710      	adds	r7, #16
 8025688:	46bd      	mov	sp, r7
 802568a:	bd80      	pop	{r7, pc}
 802568c:	2000cada 	.word	0x2000cada

08025690 <lv_timer_time_remaining>:
 * Find out how much time remains before a timer must be run.
 * @param timer pointer to lv_timer
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
 8025690:	b580      	push	{r7, lr}
 8025692:	b084      	sub	sp, #16
 8025694:	af00      	add	r7, sp, #0
 8025696:	6078      	str	r0, [r7, #4]
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8025698:	687b      	ldr	r3, [r7, #4]
 802569a:	685b      	ldr	r3, [r3, #4]
 802569c:	4618      	mov	r0, r3
 802569e:	f7fc fcb3 	bl	8022008 <lv_tick_elaps>
 80256a2:	60f8      	str	r0, [r7, #12]
    if(elp >= timer->period)
 80256a4:	687b      	ldr	r3, [r7, #4]
 80256a6:	681b      	ldr	r3, [r3, #0]
 80256a8:	68fa      	ldr	r2, [r7, #12]
 80256aa:	429a      	cmp	r2, r3
 80256ac:	d301      	bcc.n	80256b2 <lv_timer_time_remaining+0x22>
        return 0;
 80256ae:	2300      	movs	r3, #0
 80256b0:	e003      	b.n	80256ba <lv_timer_time_remaining+0x2a>
    return timer->period - elp;
 80256b2:	687b      	ldr	r3, [r7, #4]
 80256b4:	681a      	ldr	r2, [r3, #0]
 80256b6:	68fb      	ldr	r3, [r7, #12]
 80256b8:	1ad3      	subs	r3, r2, r3
}
 80256ba:	4618      	mov	r0, r3
 80256bc:	3710      	adds	r7, #16
 80256be:	46bd      	mov	sp, r7
 80256c0:	bd80      	pop	{r7, pc}

080256c2 <tlsf_ffs>:
}

#else

tlsf_decl int tlsf_ffs(unsigned int word)
{
 80256c2:	b480      	push	{r7}
 80256c4:	b083      	sub	sp, #12
 80256c6:	af00      	add	r7, sp, #0
 80256c8:	6078      	str	r0, [r7, #4]
    return __builtin_ffs(word) - 1;
 80256ca:	687b      	ldr	r3, [r7, #4]
 80256cc:	fa93 f2a3 	rbit	r2, r3
 80256d0:	fab2 f282 	clz	r2, r2
 80256d4:	2b00      	cmp	r3, #0
 80256d6:	d101      	bne.n	80256dc <tlsf_ffs+0x1a>
 80256d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80256dc:	1c53      	adds	r3, r2, #1
 80256de:	3b01      	subs	r3, #1
}
 80256e0:	4618      	mov	r0, r3
 80256e2:	370c      	adds	r7, #12
 80256e4:	46bd      	mov	sp, r7
 80256e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256ea:	4770      	bx	lr

080256ec <tlsf_fls>:

#endif

tlsf_decl int tlsf_fls(unsigned int word)
{
 80256ec:	b480      	push	{r7}
 80256ee:	b085      	sub	sp, #20
 80256f0:	af00      	add	r7, sp, #0
 80256f2:	6078      	str	r0, [r7, #4]
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 80256f4:	687b      	ldr	r3, [r7, #4]
 80256f6:	2b00      	cmp	r3, #0
 80256f8:	d005      	beq.n	8025706 <tlsf_fls+0x1a>
 80256fa:	687b      	ldr	r3, [r7, #4]
 80256fc:	fab3 f383 	clz	r3, r3
 8025700:	f1c3 0320 	rsb	r3, r3, #32
 8025704:	e000      	b.n	8025708 <tlsf_fls+0x1c>
 8025706:	2300      	movs	r3, #0
 8025708:	60fb      	str	r3, [r7, #12]
    return bit - 1;
 802570a:	68fb      	ldr	r3, [r7, #12]
 802570c:	3b01      	subs	r3, #1
}
 802570e:	4618      	mov	r0, r3
 8025710:	3714      	adds	r7, #20
 8025712:	46bd      	mov	sp, r7
 8025714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025718:	4770      	bx	lr

0802571a <block_size>:
/*
** block_header_t member functions.
*/

static size_t block_size(const block_header_t * block)
{
 802571a:	b480      	push	{r7}
 802571c:	b083      	sub	sp, #12
 802571e:	af00      	add	r7, sp, #0
 8025720:	6078      	str	r0, [r7, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8025722:	687b      	ldr	r3, [r7, #4]
 8025724:	685a      	ldr	r2, [r3, #4]
 8025726:	2101      	movs	r1, #1
 8025728:	2302      	movs	r3, #2
 802572a:	430b      	orrs	r3, r1
 802572c:	43db      	mvns	r3, r3
 802572e:	4013      	ands	r3, r2
}
 8025730:	4618      	mov	r0, r3
 8025732:	370c      	adds	r7, #12
 8025734:	46bd      	mov	sp, r7
 8025736:	f85d 7b04 	ldr.w	r7, [sp], #4
 802573a:	4770      	bx	lr

0802573c <block_set_size>:

static void block_set_size(block_header_t * block, size_t size)
{
 802573c:	b480      	push	{r7}
 802573e:	b085      	sub	sp, #20
 8025740:	af00      	add	r7, sp, #0
 8025742:	6078      	str	r0, [r7, #4]
 8025744:	6039      	str	r1, [r7, #0]
    const size_t oldsize = block->size;
 8025746:	687b      	ldr	r3, [r7, #4]
 8025748:	685b      	ldr	r3, [r3, #4]
 802574a:	60fb      	str	r3, [r7, #12]
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 802574c:	2201      	movs	r2, #1
 802574e:	2302      	movs	r3, #2
 8025750:	431a      	orrs	r2, r3
 8025752:	68fb      	ldr	r3, [r7, #12]
 8025754:	401a      	ands	r2, r3
 8025756:	683b      	ldr	r3, [r7, #0]
 8025758:	431a      	orrs	r2, r3
 802575a:	687b      	ldr	r3, [r7, #4]
 802575c:	605a      	str	r2, [r3, #4]
}
 802575e:	bf00      	nop
 8025760:	3714      	adds	r7, #20
 8025762:	46bd      	mov	sp, r7
 8025764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025768:	4770      	bx	lr

0802576a <block_is_last>:

static int block_is_last(const block_header_t * block)
{
 802576a:	b580      	push	{r7, lr}
 802576c:	b082      	sub	sp, #8
 802576e:	af00      	add	r7, sp, #0
 8025770:	6078      	str	r0, [r7, #4]
    return block_size(block) == 0;
 8025772:	6878      	ldr	r0, [r7, #4]
 8025774:	f7ff ffd1 	bl	802571a <block_size>
 8025778:	4603      	mov	r3, r0
 802577a:	2b00      	cmp	r3, #0
 802577c:	bf0c      	ite	eq
 802577e:	2301      	moveq	r3, #1
 8025780:	2300      	movne	r3, #0
 8025782:	b2db      	uxtb	r3, r3
}
 8025784:	4618      	mov	r0, r3
 8025786:	3708      	adds	r7, #8
 8025788:	46bd      	mov	sp, r7
 802578a:	bd80      	pop	{r7, pc}

0802578c <block_is_free>:

static int block_is_free(const block_header_t * block)
{
 802578c:	b480      	push	{r7}
 802578e:	b083      	sub	sp, #12
 8025790:	af00      	add	r7, sp, #0
 8025792:	6078      	str	r0, [r7, #4]
    return tlsf_cast(int, block->size & block_header_free_bit);
 8025794:	687b      	ldr	r3, [r7, #4]
 8025796:	685b      	ldr	r3, [r3, #4]
 8025798:	2201      	movs	r2, #1
 802579a:	4013      	ands	r3, r2
}
 802579c:	4618      	mov	r0, r3
 802579e:	370c      	adds	r7, #12
 80257a0:	46bd      	mov	sp, r7
 80257a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257a6:	4770      	bx	lr

080257a8 <block_set_free>:

static void block_set_free(block_header_t * block)
{
 80257a8:	b480      	push	{r7}
 80257aa:	b083      	sub	sp, #12
 80257ac:	af00      	add	r7, sp, #0
 80257ae:	6078      	str	r0, [r7, #4]
    block->size |= block_header_free_bit;
 80257b0:	687b      	ldr	r3, [r7, #4]
 80257b2:	685b      	ldr	r3, [r3, #4]
 80257b4:	2201      	movs	r2, #1
 80257b6:	431a      	orrs	r2, r3
 80257b8:	687b      	ldr	r3, [r7, #4]
 80257ba:	605a      	str	r2, [r3, #4]
}
 80257bc:	bf00      	nop
 80257be:	370c      	adds	r7, #12
 80257c0:	46bd      	mov	sp, r7
 80257c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257c6:	4770      	bx	lr

080257c8 <block_set_used>:

static void block_set_used(block_header_t * block)
{
 80257c8:	b480      	push	{r7}
 80257ca:	b083      	sub	sp, #12
 80257cc:	af00      	add	r7, sp, #0
 80257ce:	6078      	str	r0, [r7, #4]
    block->size &= ~block_header_free_bit;
 80257d0:	687b      	ldr	r3, [r7, #4]
 80257d2:	685a      	ldr	r2, [r3, #4]
 80257d4:	2301      	movs	r3, #1
 80257d6:	43db      	mvns	r3, r3
 80257d8:	401a      	ands	r2, r3
 80257da:	687b      	ldr	r3, [r7, #4]
 80257dc:	605a      	str	r2, [r3, #4]
}
 80257de:	bf00      	nop
 80257e0:	370c      	adds	r7, #12
 80257e2:	46bd      	mov	sp, r7
 80257e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257e8:	4770      	bx	lr

080257ea <block_is_prev_free>:

static int block_is_prev_free(const block_header_t * block)
{
 80257ea:	b480      	push	{r7}
 80257ec:	b083      	sub	sp, #12
 80257ee:	af00      	add	r7, sp, #0
 80257f0:	6078      	str	r0, [r7, #4]
    return tlsf_cast(int, block->size & block_header_prev_free_bit);
 80257f2:	687b      	ldr	r3, [r7, #4]
 80257f4:	685b      	ldr	r3, [r3, #4]
 80257f6:	2202      	movs	r2, #2
 80257f8:	4013      	ands	r3, r2
}
 80257fa:	4618      	mov	r0, r3
 80257fc:	370c      	adds	r7, #12
 80257fe:	46bd      	mov	sp, r7
 8025800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025804:	4770      	bx	lr

08025806 <block_set_prev_free>:

static void block_set_prev_free(block_header_t * block)
{
 8025806:	b480      	push	{r7}
 8025808:	b083      	sub	sp, #12
 802580a:	af00      	add	r7, sp, #0
 802580c:	6078      	str	r0, [r7, #4]
    block->size |= block_header_prev_free_bit;
 802580e:	687b      	ldr	r3, [r7, #4]
 8025810:	685b      	ldr	r3, [r3, #4]
 8025812:	2202      	movs	r2, #2
 8025814:	431a      	orrs	r2, r3
 8025816:	687b      	ldr	r3, [r7, #4]
 8025818:	605a      	str	r2, [r3, #4]
}
 802581a:	bf00      	nop
 802581c:	370c      	adds	r7, #12
 802581e:	46bd      	mov	sp, r7
 8025820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025824:	4770      	bx	lr

08025826 <block_set_prev_used>:

static void block_set_prev_used(block_header_t * block)
{
 8025826:	b480      	push	{r7}
 8025828:	b083      	sub	sp, #12
 802582a:	af00      	add	r7, sp, #0
 802582c:	6078      	str	r0, [r7, #4]
    block->size &= ~block_header_prev_free_bit;
 802582e:	687b      	ldr	r3, [r7, #4]
 8025830:	685a      	ldr	r2, [r3, #4]
 8025832:	2302      	movs	r3, #2
 8025834:	43db      	mvns	r3, r3
 8025836:	401a      	ands	r2, r3
 8025838:	687b      	ldr	r3, [r7, #4]
 802583a:	605a      	str	r2, [r3, #4]
}
 802583c:	bf00      	nop
 802583e:	370c      	adds	r7, #12
 8025840:	46bd      	mov	sp, r7
 8025842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025846:	4770      	bx	lr

08025848 <block_from_ptr>:

static block_header_t * block_from_ptr(const void * ptr)
{
 8025848:	b480      	push	{r7}
 802584a:	b083      	sub	sp, #12
 802584c:	af00      	add	r7, sp, #0
 802584e:	6078      	str	r0, [r7, #4]
    return tlsf_cast(block_header_t *,
 8025850:	2308      	movs	r3, #8
 8025852:	425b      	negs	r3, r3
 8025854:	687a      	ldr	r2, [r7, #4]
 8025856:	4413      	add	r3, r2
                     tlsf_cast(unsigned char *, ptr) - block_start_offset);
}
 8025858:	4618      	mov	r0, r3
 802585a:	370c      	adds	r7, #12
 802585c:	46bd      	mov	sp, r7
 802585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025862:	4770      	bx	lr

08025864 <block_to_ptr>:

static void * block_to_ptr(const block_header_t * block)
{
 8025864:	b480      	push	{r7}
 8025866:	b083      	sub	sp, #12
 8025868:	af00      	add	r7, sp, #0
 802586a:	6078      	str	r0, [r7, #4]
    return tlsf_cast(void *,
 802586c:	2208      	movs	r2, #8
 802586e:	687b      	ldr	r3, [r7, #4]
 8025870:	4413      	add	r3, r2
                     tlsf_cast(unsigned char *, block) + block_start_offset);
}
 8025872:	4618      	mov	r0, r3
 8025874:	370c      	adds	r7, #12
 8025876:	46bd      	mov	sp, r7
 8025878:	f85d 7b04 	ldr.w	r7, [sp], #4
 802587c:	4770      	bx	lr

0802587e <offset_to_block>:

/* Return location of next block after block of given size. */
static block_header_t * offset_to_block(const void * ptr, size_t size)
{
 802587e:	b480      	push	{r7}
 8025880:	b083      	sub	sp, #12
 8025882:	af00      	add	r7, sp, #0
 8025884:	6078      	str	r0, [r7, #4]
 8025886:	6039      	str	r1, [r7, #0]
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8025888:	687a      	ldr	r2, [r7, #4]
 802588a:	683b      	ldr	r3, [r7, #0]
 802588c:	4413      	add	r3, r2
}
 802588e:	4618      	mov	r0, r3
 8025890:	370c      	adds	r7, #12
 8025892:	46bd      	mov	sp, r7
 8025894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025898:	4770      	bx	lr

0802589a <block_prev>:

/* Return location of previous block. */
static block_header_t * block_prev(const block_header_t * block)
{
 802589a:	b580      	push	{r7, lr}
 802589c:	b082      	sub	sp, #8
 802589e:	af00      	add	r7, sp, #0
 80258a0:	6078      	str	r0, [r7, #4]
    tlsf_assert(block_is_prev_free(block) && "previous block must be free");
 80258a2:	6878      	ldr	r0, [r7, #4]
 80258a4:	f7ff ffa1 	bl	80257ea <block_is_prev_free>
 80258a8:	4603      	mov	r3, r0
 80258aa:	2b00      	cmp	r3, #0
 80258ac:	d100      	bne.n	80258b0 <block_prev+0x16>
 80258ae:	e7fe      	b.n	80258ae <block_prev+0x14>
    return block->prev_phys_block;
 80258b0:	687b      	ldr	r3, [r7, #4]
 80258b2:	681b      	ldr	r3, [r3, #0]
}
 80258b4:	4618      	mov	r0, r3
 80258b6:	3708      	adds	r7, #8
 80258b8:	46bd      	mov	sp, r7
 80258ba:	bd80      	pop	{r7, pc}

080258bc <block_next>:

/* Return location of next existing block. */
static block_header_t * block_next(const block_header_t * block)
{
 80258bc:	b590      	push	{r4, r7, lr}
 80258be:	b085      	sub	sp, #20
 80258c0:	af00      	add	r7, sp, #0
 80258c2:	6078      	str	r0, [r7, #4]
    block_header_t * next = offset_to_block(block_to_ptr(block),
 80258c4:	6878      	ldr	r0, [r7, #4]
 80258c6:	f7ff ffcd 	bl	8025864 <block_to_ptr>
 80258ca:	4604      	mov	r4, r0
                                            block_size(block) - block_header_overhead);
 80258cc:	6878      	ldr	r0, [r7, #4]
 80258ce:	f7ff ff24 	bl	802571a <block_size>
 80258d2:	4603      	mov	r3, r0
    block_header_t * next = offset_to_block(block_to_ptr(block),
 80258d4:	2204      	movs	r2, #4
 80258d6:	1a9b      	subs	r3, r3, r2
 80258d8:	4619      	mov	r1, r3
 80258da:	4620      	mov	r0, r4
 80258dc:	f7ff ffcf 	bl	802587e <offset_to_block>
 80258e0:	60f8      	str	r0, [r7, #12]
    tlsf_assert(!block_is_last(block));
 80258e2:	6878      	ldr	r0, [r7, #4]
 80258e4:	f7ff ff41 	bl	802576a <block_is_last>
 80258e8:	4603      	mov	r3, r0
 80258ea:	2b00      	cmp	r3, #0
 80258ec:	d000      	beq.n	80258f0 <block_next+0x34>
 80258ee:	e7fe      	b.n	80258ee <block_next+0x32>
    return next;
 80258f0:	68fb      	ldr	r3, [r7, #12]
}
 80258f2:	4618      	mov	r0, r3
 80258f4:	3714      	adds	r7, #20
 80258f6:	46bd      	mov	sp, r7
 80258f8:	bd90      	pop	{r4, r7, pc}

080258fa <block_link_next>:

/* Link a new block with its physical neighbor, return the neighbor. */
static block_header_t * block_link_next(block_header_t * block)
{
 80258fa:	b580      	push	{r7, lr}
 80258fc:	b084      	sub	sp, #16
 80258fe:	af00      	add	r7, sp, #0
 8025900:	6078      	str	r0, [r7, #4]
    block_header_t * next = block_next(block);
 8025902:	6878      	ldr	r0, [r7, #4]
 8025904:	f7ff ffda 	bl	80258bc <block_next>
 8025908:	60f8      	str	r0, [r7, #12]
    next->prev_phys_block = block;
 802590a:	68fb      	ldr	r3, [r7, #12]
 802590c:	687a      	ldr	r2, [r7, #4]
 802590e:	601a      	str	r2, [r3, #0]
    return next;
 8025910:	68fb      	ldr	r3, [r7, #12]
}
 8025912:	4618      	mov	r0, r3
 8025914:	3710      	adds	r7, #16
 8025916:	46bd      	mov	sp, r7
 8025918:	bd80      	pop	{r7, pc}

0802591a <block_mark_as_free>:

static void block_mark_as_free(block_header_t * block)
{
 802591a:	b580      	push	{r7, lr}
 802591c:	b084      	sub	sp, #16
 802591e:	af00      	add	r7, sp, #0
 8025920:	6078      	str	r0, [r7, #4]
    /* Link the block to the next block, first. */
    block_header_t * next = block_link_next(block);
 8025922:	6878      	ldr	r0, [r7, #4]
 8025924:	f7ff ffe9 	bl	80258fa <block_link_next>
 8025928:	60f8      	str	r0, [r7, #12]
    block_set_prev_free(next);
 802592a:	68f8      	ldr	r0, [r7, #12]
 802592c:	f7ff ff6b 	bl	8025806 <block_set_prev_free>
    block_set_free(block);
 8025930:	6878      	ldr	r0, [r7, #4]
 8025932:	f7ff ff39 	bl	80257a8 <block_set_free>
}
 8025936:	bf00      	nop
 8025938:	3710      	adds	r7, #16
 802593a:	46bd      	mov	sp, r7
 802593c:	bd80      	pop	{r7, pc}

0802593e <block_mark_as_used>:

static void block_mark_as_used(block_header_t * block)
{
 802593e:	b580      	push	{r7, lr}
 8025940:	b084      	sub	sp, #16
 8025942:	af00      	add	r7, sp, #0
 8025944:	6078      	str	r0, [r7, #4]
    block_header_t * next = block_next(block);
 8025946:	6878      	ldr	r0, [r7, #4]
 8025948:	f7ff ffb8 	bl	80258bc <block_next>
 802594c:	60f8      	str	r0, [r7, #12]
    block_set_prev_used(next);
 802594e:	68f8      	ldr	r0, [r7, #12]
 8025950:	f7ff ff69 	bl	8025826 <block_set_prev_used>
    block_set_used(block);
 8025954:	6878      	ldr	r0, [r7, #4]
 8025956:	f7ff ff37 	bl	80257c8 <block_set_used>
}
 802595a:	bf00      	nop
 802595c:	3710      	adds	r7, #16
 802595e:	46bd      	mov	sp, r7
 8025960:	bd80      	pop	{r7, pc}

08025962 <align_up>:

static size_t align_up(size_t x, size_t align)
{
 8025962:	b480      	push	{r7}
 8025964:	b083      	sub	sp, #12
 8025966:	af00      	add	r7, sp, #0
 8025968:	6078      	str	r0, [r7, #4]
 802596a:	6039      	str	r1, [r7, #0]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 802596c:	683b      	ldr	r3, [r7, #0]
 802596e:	1e5a      	subs	r2, r3, #1
 8025970:	683b      	ldr	r3, [r7, #0]
 8025972:	4013      	ands	r3, r2
 8025974:	2b00      	cmp	r3, #0
 8025976:	d000      	beq.n	802597a <align_up+0x18>
 8025978:	e7fe      	b.n	8025978 <align_up+0x16>
    return (x + (align - 1)) & ~(align - 1);
 802597a:	683a      	ldr	r2, [r7, #0]
 802597c:	687b      	ldr	r3, [r7, #4]
 802597e:	4413      	add	r3, r2
 8025980:	1e5a      	subs	r2, r3, #1
 8025982:	683b      	ldr	r3, [r7, #0]
 8025984:	425b      	negs	r3, r3
 8025986:	4013      	ands	r3, r2
}
 8025988:	4618      	mov	r0, r3
 802598a:	370c      	adds	r7, #12
 802598c:	46bd      	mov	sp, r7
 802598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025992:	4770      	bx	lr

08025994 <align_down>:

static size_t align_down(size_t x, size_t align)
{
 8025994:	b480      	push	{r7}
 8025996:	b083      	sub	sp, #12
 8025998:	af00      	add	r7, sp, #0
 802599a:	6078      	str	r0, [r7, #4]
 802599c:	6039      	str	r1, [r7, #0]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 802599e:	683b      	ldr	r3, [r7, #0]
 80259a0:	1e5a      	subs	r2, r3, #1
 80259a2:	683b      	ldr	r3, [r7, #0]
 80259a4:	4013      	ands	r3, r2
 80259a6:	2b00      	cmp	r3, #0
 80259a8:	d000      	beq.n	80259ac <align_down+0x18>
 80259aa:	e7fe      	b.n	80259aa <align_down+0x16>
    return x - (x & (align - 1));
 80259ac:	683b      	ldr	r3, [r7, #0]
 80259ae:	425a      	negs	r2, r3
 80259b0:	687b      	ldr	r3, [r7, #4]
 80259b2:	4013      	ands	r3, r2
}
 80259b4:	4618      	mov	r0, r3
 80259b6:	370c      	adds	r7, #12
 80259b8:	46bd      	mov	sp, r7
 80259ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259be:	4770      	bx	lr

080259c0 <align_ptr>:

static void * align_ptr(const void * ptr, size_t align)
{
 80259c0:	b480      	push	{r7}
 80259c2:	b085      	sub	sp, #20
 80259c4:	af00      	add	r7, sp, #0
 80259c6:	6078      	str	r0, [r7, #4]
 80259c8:	6039      	str	r1, [r7, #0]
    const tlsfptr_t aligned =
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 80259ca:	687a      	ldr	r2, [r7, #4]
 80259cc:	683b      	ldr	r3, [r7, #0]
 80259ce:	4413      	add	r3, r2
 80259d0:	1e5a      	subs	r2, r3, #1
 80259d2:	683b      	ldr	r3, [r7, #0]
 80259d4:	425b      	negs	r3, r3
 80259d6:	4013      	ands	r3, r2
    const tlsfptr_t aligned =
 80259d8:	60fb      	str	r3, [r7, #12]
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 80259da:	683b      	ldr	r3, [r7, #0]
 80259dc:	1e5a      	subs	r2, r3, #1
 80259de:	683b      	ldr	r3, [r7, #0]
 80259e0:	4013      	ands	r3, r2
 80259e2:	2b00      	cmp	r3, #0
 80259e4:	d000      	beq.n	80259e8 <align_ptr+0x28>
 80259e6:	e7fe      	b.n	80259e6 <align_ptr+0x26>
    return tlsf_cast(void *, aligned);
 80259e8:	68fb      	ldr	r3, [r7, #12]
}
 80259ea:	4618      	mov	r0, r3
 80259ec:	3714      	adds	r7, #20
 80259ee:	46bd      	mov	sp, r7
 80259f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259f4:	4770      	bx	lr

080259f6 <adjust_request_size>:
/*
** Adjust an allocation size to be aligned to word size, and no smaller
** than internal minimum.
*/
static size_t adjust_request_size(size_t size, size_t align)
{
 80259f6:	b580      	push	{r7, lr}
 80259f8:	b084      	sub	sp, #16
 80259fa:	af00      	add	r7, sp, #0
 80259fc:	6078      	str	r0, [r7, #4]
 80259fe:	6039      	str	r1, [r7, #0]
    size_t adjust = 0;
 8025a00:	2300      	movs	r3, #0
 8025a02:	60fb      	str	r3, [r7, #12]
    if(size) {
 8025a04:	687b      	ldr	r3, [r7, #4]
 8025a06:	2b00      	cmp	r3, #0
 8025a08:	d00f      	beq.n	8025a2a <adjust_request_size+0x34>
        const size_t aligned = align_up(size, align);
 8025a0a:	6839      	ldr	r1, [r7, #0]
 8025a0c:	6878      	ldr	r0, [r7, #4]
 8025a0e:	f7ff ffa8 	bl	8025962 <align_up>
 8025a12:	60b8      	str	r0, [r7, #8]

        /* aligned sized must not exceed block_size_max or we'll go out of bounds on sl_bitmap */
        if(aligned < block_size_max) {
 8025a14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8025a18:	68bb      	ldr	r3, [r7, #8]
 8025a1a:	4293      	cmp	r3, r2
 8025a1c:	d205      	bcs.n	8025a2a <adjust_request_size+0x34>
            adjust = tlsf_max(aligned, block_size_min);
 8025a1e:	220c      	movs	r2, #12
 8025a20:	68bb      	ldr	r3, [r7, #8]
 8025a22:	4293      	cmp	r3, r2
 8025a24:	bf38      	it	cc
 8025a26:	4613      	movcc	r3, r2
 8025a28:	60fb      	str	r3, [r7, #12]
        }
    }
    return adjust;
 8025a2a:	68fb      	ldr	r3, [r7, #12]
}
 8025a2c:	4618      	mov	r0, r3
 8025a2e:	3710      	adds	r7, #16
 8025a30:	46bd      	mov	sp, r7
 8025a32:	bd80      	pop	{r7, pc}

08025a34 <mapping_insert>:
** TLSF utility functions. In most cases, these are direct translations of
** the documentation found in the white paper.
*/

static void mapping_insert(size_t size, int * fli, int * sli)
{
 8025a34:	b580      	push	{r7, lr}
 8025a36:	b086      	sub	sp, #24
 8025a38:	af00      	add	r7, sp, #0
 8025a3a:	60f8      	str	r0, [r7, #12]
 8025a3c:	60b9      	str	r1, [r7, #8]
 8025a3e:	607a      	str	r2, [r7, #4]
    int fl, sl;
    if(size < SMALL_BLOCK_SIZE) {
 8025a40:	68fb      	ldr	r3, [r7, #12]
 8025a42:	2b7f      	cmp	r3, #127	; 0x7f
 8025a44:	d808      	bhi.n	8025a58 <mapping_insert+0x24>
        /* Store small blocks in first list. */
        fl = 0;
 8025a46:	2300      	movs	r3, #0
 8025a48:	617b      	str	r3, [r7, #20]
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 8025a4a:	68fb      	ldr	r3, [r7, #12]
 8025a4c:	2b00      	cmp	r3, #0
 8025a4e:	da00      	bge.n	8025a52 <mapping_insert+0x1e>
 8025a50:	3303      	adds	r3, #3
 8025a52:	109b      	asrs	r3, r3, #2
 8025a54:	613b      	str	r3, [r7, #16]
 8025a56:	e00e      	b.n	8025a76 <mapping_insert+0x42>
    }
    else {
        fl = tlsf_fls_sizet(size);
 8025a58:	68f8      	ldr	r0, [r7, #12]
 8025a5a:	f7ff fe47 	bl	80256ec <tlsf_fls>
 8025a5e:	6178      	str	r0, [r7, #20]
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8025a60:	697b      	ldr	r3, [r7, #20]
 8025a62:	3b05      	subs	r3, #5
 8025a64:	68fa      	ldr	r2, [r7, #12]
 8025a66:	fa22 f303 	lsr.w	r3, r2, r3
 8025a6a:	f083 0320 	eor.w	r3, r3, #32
 8025a6e:	613b      	str	r3, [r7, #16]
        fl -= (FL_INDEX_SHIFT - 1);
 8025a70:	697b      	ldr	r3, [r7, #20]
 8025a72:	3b06      	subs	r3, #6
 8025a74:	617b      	str	r3, [r7, #20]
    }
    *fli = fl;
 8025a76:	68bb      	ldr	r3, [r7, #8]
 8025a78:	697a      	ldr	r2, [r7, #20]
 8025a7a:	601a      	str	r2, [r3, #0]
    *sli = sl;
 8025a7c:	687b      	ldr	r3, [r7, #4]
 8025a7e:	693a      	ldr	r2, [r7, #16]
 8025a80:	601a      	str	r2, [r3, #0]
}
 8025a82:	bf00      	nop
 8025a84:	3718      	adds	r7, #24
 8025a86:	46bd      	mov	sp, r7
 8025a88:	bd80      	pop	{r7, pc}

08025a8a <mapping_search>:

/* This version rounds up to the next block size (for allocations) */
static void mapping_search(size_t size, int * fli, int * sli)
{
 8025a8a:	b580      	push	{r7, lr}
 8025a8c:	b086      	sub	sp, #24
 8025a8e:	af00      	add	r7, sp, #0
 8025a90:	60f8      	str	r0, [r7, #12]
 8025a92:	60b9      	str	r1, [r7, #8]
 8025a94:	607a      	str	r2, [r7, #4]
    if(size >= SMALL_BLOCK_SIZE) {
 8025a96:	68fb      	ldr	r3, [r7, #12]
 8025a98:	2b7f      	cmp	r3, #127	; 0x7f
 8025a9a:	d90d      	bls.n	8025ab8 <mapping_search+0x2e>
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 8025a9c:	68f8      	ldr	r0, [r7, #12]
 8025a9e:	f7ff fe25 	bl	80256ec <tlsf_fls>
 8025aa2:	4603      	mov	r3, r0
 8025aa4:	3b05      	subs	r3, #5
 8025aa6:	2201      	movs	r2, #1
 8025aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8025aac:	3b01      	subs	r3, #1
 8025aae:	617b      	str	r3, [r7, #20]
        size += round;
 8025ab0:	68fa      	ldr	r2, [r7, #12]
 8025ab2:	697b      	ldr	r3, [r7, #20]
 8025ab4:	4413      	add	r3, r2
 8025ab6:	60fb      	str	r3, [r7, #12]
    }
    mapping_insert(size, fli, sli);
 8025ab8:	687a      	ldr	r2, [r7, #4]
 8025aba:	68b9      	ldr	r1, [r7, #8]
 8025abc:	68f8      	ldr	r0, [r7, #12]
 8025abe:	f7ff ffb9 	bl	8025a34 <mapping_insert>
}
 8025ac2:	bf00      	nop
 8025ac4:	3718      	adds	r7, #24
 8025ac6:	46bd      	mov	sp, r7
 8025ac8:	bd80      	pop	{r7, pc}

08025aca <search_suitable_block>:

static block_header_t * search_suitable_block(control_t * control, int * fli, int * sli)
{
 8025aca:	b580      	push	{r7, lr}
 8025acc:	b088      	sub	sp, #32
 8025ace:	af00      	add	r7, sp, #0
 8025ad0:	60f8      	str	r0, [r7, #12]
 8025ad2:	60b9      	str	r1, [r7, #8]
 8025ad4:	607a      	str	r2, [r7, #4]
    int fl = *fli;
 8025ad6:	68bb      	ldr	r3, [r7, #8]
 8025ad8:	681b      	ldr	r3, [r3, #0]
 8025ada:	61fb      	str	r3, [r7, #28]
    int sl = *sli;
 8025adc:	687b      	ldr	r3, [r7, #4]
 8025ade:	681b      	ldr	r3, [r3, #0]
 8025ae0:	617b      	str	r3, [r7, #20]

    /*
    ** First, search for a block in the list associated with the given
    ** fl/sl index.
    */
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 8025ae2:	68fa      	ldr	r2, [r7, #12]
 8025ae4:	69fb      	ldr	r3, [r7, #28]
 8025ae6:	3304      	adds	r3, #4
 8025ae8:	009b      	lsls	r3, r3, #2
 8025aea:	4413      	add	r3, r2
 8025aec:	685a      	ldr	r2, [r3, #4]
 8025aee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8025af2:	697b      	ldr	r3, [r7, #20]
 8025af4:	fa01 f303 	lsl.w	r3, r1, r3
 8025af8:	4013      	ands	r3, r2
 8025afa:	61bb      	str	r3, [r7, #24]
    if(!sl_map) {
 8025afc:	69bb      	ldr	r3, [r7, #24]
 8025afe:	2b00      	cmp	r3, #0
 8025b00:	d11c      	bne.n	8025b3c <search_suitable_block+0x72>
        /* No block exists. Search in the next largest first-level list. */
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 8025b02:	68fb      	ldr	r3, [r7, #12]
 8025b04:	691a      	ldr	r2, [r3, #16]
 8025b06:	69fb      	ldr	r3, [r7, #28]
 8025b08:	3301      	adds	r3, #1
 8025b0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8025b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8025b12:	4013      	ands	r3, r2
 8025b14:	613b      	str	r3, [r7, #16]
        if(!fl_map) {
 8025b16:	693b      	ldr	r3, [r7, #16]
 8025b18:	2b00      	cmp	r3, #0
 8025b1a:	d101      	bne.n	8025b20 <search_suitable_block+0x56>
            /* No free blocks available, memory has been exhausted. */
            return 0;
 8025b1c:	2300      	movs	r3, #0
 8025b1e:	e021      	b.n	8025b64 <search_suitable_block+0x9a>
        }

        fl = tlsf_ffs(fl_map);
 8025b20:	6938      	ldr	r0, [r7, #16]
 8025b22:	f7ff fdce 	bl	80256c2 <tlsf_ffs>
 8025b26:	61f8      	str	r0, [r7, #28]
        *fli = fl;
 8025b28:	68bb      	ldr	r3, [r7, #8]
 8025b2a:	69fa      	ldr	r2, [r7, #28]
 8025b2c:	601a      	str	r2, [r3, #0]
        sl_map = control->sl_bitmap[fl];
 8025b2e:	68fa      	ldr	r2, [r7, #12]
 8025b30:	69fb      	ldr	r3, [r7, #28]
 8025b32:	3304      	adds	r3, #4
 8025b34:	009b      	lsls	r3, r3, #2
 8025b36:	4413      	add	r3, r2
 8025b38:	685b      	ldr	r3, [r3, #4]
 8025b3a:	61bb      	str	r3, [r7, #24]
    }
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 8025b3c:	69bb      	ldr	r3, [r7, #24]
 8025b3e:	2b00      	cmp	r3, #0
 8025b40:	d100      	bne.n	8025b44 <search_suitable_block+0x7a>
 8025b42:	e7fe      	b.n	8025b42 <search_suitable_block+0x78>
    sl = tlsf_ffs(sl_map);
 8025b44:	69b8      	ldr	r0, [r7, #24]
 8025b46:	f7ff fdbc 	bl	80256c2 <tlsf_ffs>
 8025b4a:	6178      	str	r0, [r7, #20]
    *sli = sl;
 8025b4c:	687b      	ldr	r3, [r7, #4]
 8025b4e:	697a      	ldr	r2, [r7, #20]
 8025b50:	601a      	str	r2, [r3, #0]

    /* Return the first block in the free list. */
    return control->blocks[fl][sl];
 8025b52:	68fa      	ldr	r2, [r7, #12]
 8025b54:	69fb      	ldr	r3, [r7, #28]
 8025b56:	0159      	lsls	r1, r3, #5
 8025b58:	697b      	ldr	r3, [r7, #20]
 8025b5a:	440b      	add	r3, r1
 8025b5c:	330e      	adds	r3, #14
 8025b5e:	009b      	lsls	r3, r3, #2
 8025b60:	4413      	add	r3, r2
 8025b62:	685b      	ldr	r3, [r3, #4]
}
 8025b64:	4618      	mov	r0, r3
 8025b66:	3720      	adds	r7, #32
 8025b68:	46bd      	mov	sp, r7
 8025b6a:	bd80      	pop	{r7, pc}

08025b6c <remove_free_block>:

/* Remove a free block from the free list.*/
static void remove_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 8025b6c:	b480      	push	{r7}
 8025b6e:	b087      	sub	sp, #28
 8025b70:	af00      	add	r7, sp, #0
 8025b72:	60f8      	str	r0, [r7, #12]
 8025b74:	60b9      	str	r1, [r7, #8]
 8025b76:	607a      	str	r2, [r7, #4]
 8025b78:	603b      	str	r3, [r7, #0]
    block_header_t * prev = block->prev_free;
 8025b7a:	68bb      	ldr	r3, [r7, #8]
 8025b7c:	68db      	ldr	r3, [r3, #12]
 8025b7e:	617b      	str	r3, [r7, #20]
    block_header_t * next = block->next_free;
 8025b80:	68bb      	ldr	r3, [r7, #8]
 8025b82:	689b      	ldr	r3, [r3, #8]
 8025b84:	613b      	str	r3, [r7, #16]
    tlsf_assert(prev && "prev_free field can not be null");
 8025b86:	697b      	ldr	r3, [r7, #20]
 8025b88:	2b00      	cmp	r3, #0
 8025b8a:	d100      	bne.n	8025b8e <remove_free_block+0x22>
 8025b8c:	e7fe      	b.n	8025b8c <remove_free_block+0x20>
    tlsf_assert(next && "next_free field can not be null");
 8025b8e:	693b      	ldr	r3, [r7, #16]
 8025b90:	2b00      	cmp	r3, #0
 8025b92:	d100      	bne.n	8025b96 <remove_free_block+0x2a>
 8025b94:	e7fe      	b.n	8025b94 <remove_free_block+0x28>
    next->prev_free = prev;
 8025b96:	693b      	ldr	r3, [r7, #16]
 8025b98:	697a      	ldr	r2, [r7, #20]
 8025b9a:	60da      	str	r2, [r3, #12]
    prev->next_free = next;
 8025b9c:	697b      	ldr	r3, [r7, #20]
 8025b9e:	693a      	ldr	r2, [r7, #16]
 8025ba0:	609a      	str	r2, [r3, #8]

    /* If this block is the head of the free list, set new head. */
    if(control->blocks[fl][sl] == block) {
 8025ba2:	68fa      	ldr	r2, [r7, #12]
 8025ba4:	687b      	ldr	r3, [r7, #4]
 8025ba6:	0159      	lsls	r1, r3, #5
 8025ba8:	683b      	ldr	r3, [r7, #0]
 8025baa:	440b      	add	r3, r1
 8025bac:	330e      	adds	r3, #14
 8025bae:	009b      	lsls	r3, r3, #2
 8025bb0:	4413      	add	r3, r2
 8025bb2:	685b      	ldr	r3, [r3, #4]
 8025bb4:	68ba      	ldr	r2, [r7, #8]
 8025bb6:	429a      	cmp	r2, r3
 8025bb8:	d131      	bne.n	8025c1e <remove_free_block+0xb2>
        control->blocks[fl][sl] = next;
 8025bba:	68fa      	ldr	r2, [r7, #12]
 8025bbc:	687b      	ldr	r3, [r7, #4]
 8025bbe:	0159      	lsls	r1, r3, #5
 8025bc0:	683b      	ldr	r3, [r7, #0]
 8025bc2:	440b      	add	r3, r1
 8025bc4:	330e      	adds	r3, #14
 8025bc6:	009b      	lsls	r3, r3, #2
 8025bc8:	4413      	add	r3, r2
 8025bca:	693a      	ldr	r2, [r7, #16]
 8025bcc:	605a      	str	r2, [r3, #4]

        /* If the new head is null, clear the bitmap. */
        if(next == &control->block_null) {
 8025bce:	68fb      	ldr	r3, [r7, #12]
 8025bd0:	693a      	ldr	r2, [r7, #16]
 8025bd2:	429a      	cmp	r2, r3
 8025bd4:	d123      	bne.n	8025c1e <remove_free_block+0xb2>
            control->sl_bitmap[fl] &= ~(1U << sl);
 8025bd6:	68fa      	ldr	r2, [r7, #12]
 8025bd8:	687b      	ldr	r3, [r7, #4]
 8025bda:	3304      	adds	r3, #4
 8025bdc:	009b      	lsls	r3, r3, #2
 8025bde:	4413      	add	r3, r2
 8025be0:	685a      	ldr	r2, [r3, #4]
 8025be2:	2101      	movs	r1, #1
 8025be4:	683b      	ldr	r3, [r7, #0]
 8025be6:	fa01 f303 	lsl.w	r3, r1, r3
 8025bea:	43db      	mvns	r3, r3
 8025bec:	401a      	ands	r2, r3
 8025bee:	68f9      	ldr	r1, [r7, #12]
 8025bf0:	687b      	ldr	r3, [r7, #4]
 8025bf2:	3304      	adds	r3, #4
 8025bf4:	009b      	lsls	r3, r3, #2
 8025bf6:	440b      	add	r3, r1
 8025bf8:	605a      	str	r2, [r3, #4]

            /* If the second bitmap is now empty, clear the fl bitmap. */
            if(!control->sl_bitmap[fl]) {
 8025bfa:	68fa      	ldr	r2, [r7, #12]
 8025bfc:	687b      	ldr	r3, [r7, #4]
 8025bfe:	3304      	adds	r3, #4
 8025c00:	009b      	lsls	r3, r3, #2
 8025c02:	4413      	add	r3, r2
 8025c04:	685b      	ldr	r3, [r3, #4]
 8025c06:	2b00      	cmp	r3, #0
 8025c08:	d109      	bne.n	8025c1e <remove_free_block+0xb2>
                control->fl_bitmap &= ~(1U << fl);
 8025c0a:	68fb      	ldr	r3, [r7, #12]
 8025c0c:	691a      	ldr	r2, [r3, #16]
 8025c0e:	2101      	movs	r1, #1
 8025c10:	687b      	ldr	r3, [r7, #4]
 8025c12:	fa01 f303 	lsl.w	r3, r1, r3
 8025c16:	43db      	mvns	r3, r3
 8025c18:	401a      	ands	r2, r3
 8025c1a:	68fb      	ldr	r3, [r7, #12]
 8025c1c:	611a      	str	r2, [r3, #16]
            }
        }
    }
}
 8025c1e:	bf00      	nop
 8025c20:	371c      	adds	r7, #28
 8025c22:	46bd      	mov	sp, r7
 8025c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c28:	4770      	bx	lr

08025c2a <insert_free_block>:

/* Insert a free block into the free block list. */
static void insert_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 8025c2a:	b590      	push	{r4, r7, lr}
 8025c2c:	b087      	sub	sp, #28
 8025c2e:	af00      	add	r7, sp, #0
 8025c30:	60f8      	str	r0, [r7, #12]
 8025c32:	60b9      	str	r1, [r7, #8]
 8025c34:	607a      	str	r2, [r7, #4]
 8025c36:	603b      	str	r3, [r7, #0]
    block_header_t * current = control->blocks[fl][sl];
 8025c38:	68fa      	ldr	r2, [r7, #12]
 8025c3a:	687b      	ldr	r3, [r7, #4]
 8025c3c:	0159      	lsls	r1, r3, #5
 8025c3e:	683b      	ldr	r3, [r7, #0]
 8025c40:	440b      	add	r3, r1
 8025c42:	330e      	adds	r3, #14
 8025c44:	009b      	lsls	r3, r3, #2
 8025c46:	4413      	add	r3, r2
 8025c48:	685b      	ldr	r3, [r3, #4]
 8025c4a:	617b      	str	r3, [r7, #20]
    tlsf_assert(current && "free list cannot have a null entry");
 8025c4c:	697b      	ldr	r3, [r7, #20]
 8025c4e:	2b00      	cmp	r3, #0
 8025c50:	d100      	bne.n	8025c54 <insert_free_block+0x2a>
 8025c52:	e7fe      	b.n	8025c52 <insert_free_block+0x28>
    tlsf_assert(block && "cannot insert a null entry into the free list");
 8025c54:	68bb      	ldr	r3, [r7, #8]
 8025c56:	2b00      	cmp	r3, #0
 8025c58:	d100      	bne.n	8025c5c <insert_free_block+0x32>
 8025c5a:	e7fe      	b.n	8025c5a <insert_free_block+0x30>
    block->next_free = current;
 8025c5c:	68bb      	ldr	r3, [r7, #8]
 8025c5e:	697a      	ldr	r2, [r7, #20]
 8025c60:	609a      	str	r2, [r3, #8]
    block->prev_free = &control->block_null;
 8025c62:	68fa      	ldr	r2, [r7, #12]
 8025c64:	68bb      	ldr	r3, [r7, #8]
 8025c66:	60da      	str	r2, [r3, #12]
    current->prev_free = block;
 8025c68:	697b      	ldr	r3, [r7, #20]
 8025c6a:	68ba      	ldr	r2, [r7, #8]
 8025c6c:	60da      	str	r2, [r3, #12]

    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 8025c6e:	68b8      	ldr	r0, [r7, #8]
 8025c70:	f7ff fdf8 	bl	8025864 <block_to_ptr>
 8025c74:	4604      	mov	r4, r0
 8025c76:	68b8      	ldr	r0, [r7, #8]
 8025c78:	f7ff fdf4 	bl	8025864 <block_to_ptr>
 8025c7c:	4603      	mov	r3, r0
 8025c7e:	2104      	movs	r1, #4
 8025c80:	4618      	mov	r0, r3
 8025c82:	f7ff fe9d 	bl	80259c0 <align_ptr>
 8025c86:	4603      	mov	r3, r0
 8025c88:	429c      	cmp	r4, r3
 8025c8a:	d000      	beq.n	8025c8e <insert_free_block+0x64>
 8025c8c:	e7fe      	b.n	8025c8c <insert_free_block+0x62>
                && "block not aligned properly");
    /*
    ** Insert the new block at the head of the list, and mark the first-
    ** and second-level bitmaps appropriately.
    */
    control->blocks[fl][sl] = block;
 8025c8e:	68fa      	ldr	r2, [r7, #12]
 8025c90:	687b      	ldr	r3, [r7, #4]
 8025c92:	0159      	lsls	r1, r3, #5
 8025c94:	683b      	ldr	r3, [r7, #0]
 8025c96:	440b      	add	r3, r1
 8025c98:	330e      	adds	r3, #14
 8025c9a:	009b      	lsls	r3, r3, #2
 8025c9c:	4413      	add	r3, r2
 8025c9e:	68ba      	ldr	r2, [r7, #8]
 8025ca0:	605a      	str	r2, [r3, #4]
    control->fl_bitmap |= (1U << fl);
 8025ca2:	68fb      	ldr	r3, [r7, #12]
 8025ca4:	691a      	ldr	r2, [r3, #16]
 8025ca6:	2101      	movs	r1, #1
 8025ca8:	687b      	ldr	r3, [r7, #4]
 8025caa:	fa01 f303 	lsl.w	r3, r1, r3
 8025cae:	431a      	orrs	r2, r3
 8025cb0:	68fb      	ldr	r3, [r7, #12]
 8025cb2:	611a      	str	r2, [r3, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 8025cb4:	68fa      	ldr	r2, [r7, #12]
 8025cb6:	687b      	ldr	r3, [r7, #4]
 8025cb8:	3304      	adds	r3, #4
 8025cba:	009b      	lsls	r3, r3, #2
 8025cbc:	4413      	add	r3, r2
 8025cbe:	685a      	ldr	r2, [r3, #4]
 8025cc0:	2101      	movs	r1, #1
 8025cc2:	683b      	ldr	r3, [r7, #0]
 8025cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8025cc8:	431a      	orrs	r2, r3
 8025cca:	68f9      	ldr	r1, [r7, #12]
 8025ccc:	687b      	ldr	r3, [r7, #4]
 8025cce:	3304      	adds	r3, #4
 8025cd0:	009b      	lsls	r3, r3, #2
 8025cd2:	440b      	add	r3, r1
 8025cd4:	605a      	str	r2, [r3, #4]
}
 8025cd6:	bf00      	nop
 8025cd8:	371c      	adds	r7, #28
 8025cda:	46bd      	mov	sp, r7
 8025cdc:	bd90      	pop	{r4, r7, pc}

08025cde <block_remove>:

/* Remove a given block from the free list. */
static void block_remove(control_t * control, block_header_t * block)
{
 8025cde:	b580      	push	{r7, lr}
 8025ce0:	b084      	sub	sp, #16
 8025ce2:	af00      	add	r7, sp, #0
 8025ce4:	6078      	str	r0, [r7, #4]
 8025ce6:	6039      	str	r1, [r7, #0]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 8025ce8:	6838      	ldr	r0, [r7, #0]
 8025cea:	f7ff fd16 	bl	802571a <block_size>
 8025cee:	f107 0208 	add.w	r2, r7, #8
 8025cf2:	f107 030c 	add.w	r3, r7, #12
 8025cf6:	4619      	mov	r1, r3
 8025cf8:	f7ff fe9c 	bl	8025a34 <mapping_insert>
    remove_free_block(control, block, fl, sl);
 8025cfc:	68fa      	ldr	r2, [r7, #12]
 8025cfe:	68bb      	ldr	r3, [r7, #8]
 8025d00:	6839      	ldr	r1, [r7, #0]
 8025d02:	6878      	ldr	r0, [r7, #4]
 8025d04:	f7ff ff32 	bl	8025b6c <remove_free_block>
}
 8025d08:	bf00      	nop
 8025d0a:	3710      	adds	r7, #16
 8025d0c:	46bd      	mov	sp, r7
 8025d0e:	bd80      	pop	{r7, pc}

08025d10 <block_insert>:

/* Insert a given block into the free list. */
static void block_insert(control_t * control, block_header_t * block)
{
 8025d10:	b580      	push	{r7, lr}
 8025d12:	b084      	sub	sp, #16
 8025d14:	af00      	add	r7, sp, #0
 8025d16:	6078      	str	r0, [r7, #4]
 8025d18:	6039      	str	r1, [r7, #0]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 8025d1a:	6838      	ldr	r0, [r7, #0]
 8025d1c:	f7ff fcfd 	bl	802571a <block_size>
 8025d20:	f107 0208 	add.w	r2, r7, #8
 8025d24:	f107 030c 	add.w	r3, r7, #12
 8025d28:	4619      	mov	r1, r3
 8025d2a:	f7ff fe83 	bl	8025a34 <mapping_insert>
    insert_free_block(control, block, fl, sl);
 8025d2e:	68fa      	ldr	r2, [r7, #12]
 8025d30:	68bb      	ldr	r3, [r7, #8]
 8025d32:	6839      	ldr	r1, [r7, #0]
 8025d34:	6878      	ldr	r0, [r7, #4]
 8025d36:	f7ff ff78 	bl	8025c2a <insert_free_block>
}
 8025d3a:	bf00      	nop
 8025d3c:	3710      	adds	r7, #16
 8025d3e:	46bd      	mov	sp, r7
 8025d40:	bd80      	pop	{r7, pc}

08025d42 <block_can_split>:

static int block_can_split(block_header_t * block, size_t size)
{
 8025d42:	b580      	push	{r7, lr}
 8025d44:	b082      	sub	sp, #8
 8025d46:	af00      	add	r7, sp, #0
 8025d48:	6078      	str	r0, [r7, #4]
 8025d4a:	6039      	str	r1, [r7, #0]
    return block_size(block) >= sizeof(block_header_t) + size;
 8025d4c:	6878      	ldr	r0, [r7, #4]
 8025d4e:	f7ff fce4 	bl	802571a <block_size>
 8025d52:	4602      	mov	r2, r0
 8025d54:	683b      	ldr	r3, [r7, #0]
 8025d56:	3310      	adds	r3, #16
 8025d58:	429a      	cmp	r2, r3
 8025d5a:	bf2c      	ite	cs
 8025d5c:	2301      	movcs	r3, #1
 8025d5e:	2300      	movcc	r3, #0
 8025d60:	b2db      	uxtb	r3, r3
}
 8025d62:	4618      	mov	r0, r3
 8025d64:	3708      	adds	r7, #8
 8025d66:	46bd      	mov	sp, r7
 8025d68:	bd80      	pop	{r7, pc}

08025d6a <block_split>:

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 8025d6a:	b590      	push	{r4, r7, lr}
 8025d6c:	b085      	sub	sp, #20
 8025d6e:	af00      	add	r7, sp, #0
 8025d70:	6078      	str	r0, [r7, #4]
 8025d72:	6039      	str	r1, [r7, #0]
    /* Calculate the amount of space left in the remaining block. */
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);
 8025d74:	6878      	ldr	r0, [r7, #4]
 8025d76:	f7ff fd75 	bl	8025864 <block_to_ptr>
 8025d7a:	4602      	mov	r2, r0
 8025d7c:	2104      	movs	r1, #4
 8025d7e:	683b      	ldr	r3, [r7, #0]
 8025d80:	1a5b      	subs	r3, r3, r1
 8025d82:	4619      	mov	r1, r3
 8025d84:	4610      	mov	r0, r2
 8025d86:	f7ff fd7a 	bl	802587e <offset_to_block>
 8025d8a:	60f8      	str	r0, [r7, #12]

    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 8025d8c:	6878      	ldr	r0, [r7, #4]
 8025d8e:	f7ff fcc4 	bl	802571a <block_size>
 8025d92:	4602      	mov	r2, r0
 8025d94:	2104      	movs	r1, #4
 8025d96:	683b      	ldr	r3, [r7, #0]
 8025d98:	440b      	add	r3, r1
 8025d9a:	1ad3      	subs	r3, r2, r3
 8025d9c:	60bb      	str	r3, [r7, #8]

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 8025d9e:	68f8      	ldr	r0, [r7, #12]
 8025da0:	f7ff fd60 	bl	8025864 <block_to_ptr>
 8025da4:	4604      	mov	r4, r0
 8025da6:	68f8      	ldr	r0, [r7, #12]
 8025da8:	f7ff fd5c 	bl	8025864 <block_to_ptr>
 8025dac:	4603      	mov	r3, r0
 8025dae:	2104      	movs	r1, #4
 8025db0:	4618      	mov	r0, r3
 8025db2:	f7ff fe05 	bl	80259c0 <align_ptr>
 8025db6:	4603      	mov	r3, r0
 8025db8:	429c      	cmp	r4, r3
 8025dba:	d000      	beq.n	8025dbe <block_split+0x54>
 8025dbc:	e7fe      	b.n	8025dbc <block_split+0x52>
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 8025dbe:	6878      	ldr	r0, [r7, #4]
 8025dc0:	f7ff fcab 	bl	802571a <block_size>
 8025dc4:	4601      	mov	r1, r0
 8025dc6:	68ba      	ldr	r2, [r7, #8]
 8025dc8:	683b      	ldr	r3, [r7, #0]
 8025dca:	4413      	add	r3, r2
 8025dcc:	2204      	movs	r2, #4
 8025dce:	4413      	add	r3, r2
 8025dd0:	4299      	cmp	r1, r3
 8025dd2:	d000      	beq.n	8025dd6 <block_split+0x6c>
 8025dd4:	e7fe      	b.n	8025dd4 <block_split+0x6a>
    block_set_size(remaining, remain_size);
 8025dd6:	68b9      	ldr	r1, [r7, #8]
 8025dd8:	68f8      	ldr	r0, [r7, #12]
 8025dda:	f7ff fcaf 	bl	802573c <block_set_size>
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8025dde:	68f8      	ldr	r0, [r7, #12]
 8025de0:	f7ff fc9b 	bl	802571a <block_size>
 8025de4:	4603      	mov	r3, r0
 8025de6:	220c      	movs	r2, #12
 8025de8:	4293      	cmp	r3, r2
 8025dea:	d200      	bcs.n	8025dee <block_split+0x84>
 8025dec:	e7fe      	b.n	8025dec <block_split+0x82>

    block_set_size(block, size);
 8025dee:	6839      	ldr	r1, [r7, #0]
 8025df0:	6878      	ldr	r0, [r7, #4]
 8025df2:	f7ff fca3 	bl	802573c <block_set_size>
    block_mark_as_free(remaining);
 8025df6:	68f8      	ldr	r0, [r7, #12]
 8025df8:	f7ff fd8f 	bl	802591a <block_mark_as_free>

    return remaining;
 8025dfc:	68fb      	ldr	r3, [r7, #12]
}
 8025dfe:	4618      	mov	r0, r3
 8025e00:	3714      	adds	r7, #20
 8025e02:	46bd      	mov	sp, r7
 8025e04:	bd90      	pop	{r4, r7, pc}

08025e06 <block_absorb>:

/* Absorb a free block's storage into an adjacent previous free block. */
static block_header_t * block_absorb(block_header_t * prev, block_header_t * block)
{
 8025e06:	b580      	push	{r7, lr}
 8025e08:	b082      	sub	sp, #8
 8025e0a:	af00      	add	r7, sp, #0
 8025e0c:	6078      	str	r0, [r7, #4]
 8025e0e:	6039      	str	r1, [r7, #0]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8025e10:	6878      	ldr	r0, [r7, #4]
 8025e12:	f7ff fcaa 	bl	802576a <block_is_last>
 8025e16:	4603      	mov	r3, r0
 8025e18:	2b00      	cmp	r3, #0
 8025e1a:	d000      	beq.n	8025e1e <block_absorb+0x18>
 8025e1c:	e7fe      	b.n	8025e1c <block_absorb+0x16>
    /* Note: Leaves flags untouched. */
    prev->size += block_size(block) + block_header_overhead;
 8025e1e:	6838      	ldr	r0, [r7, #0]
 8025e20:	f7ff fc7b 	bl	802571a <block_size>
 8025e24:	4603      	mov	r3, r0
 8025e26:	2204      	movs	r2, #4
 8025e28:	441a      	add	r2, r3
 8025e2a:	687b      	ldr	r3, [r7, #4]
 8025e2c:	685b      	ldr	r3, [r3, #4]
 8025e2e:	441a      	add	r2, r3
 8025e30:	687b      	ldr	r3, [r7, #4]
 8025e32:	605a      	str	r2, [r3, #4]
    block_link_next(prev);
 8025e34:	6878      	ldr	r0, [r7, #4]
 8025e36:	f7ff fd60 	bl	80258fa <block_link_next>
    return prev;
 8025e3a:	687b      	ldr	r3, [r7, #4]
}
 8025e3c:	4618      	mov	r0, r3
 8025e3e:	3708      	adds	r7, #8
 8025e40:	46bd      	mov	sp, r7
 8025e42:	bd80      	pop	{r7, pc}

08025e44 <block_merge_prev>:

/* Merge a just-freed block with an adjacent previous free block. */
static block_header_t * block_merge_prev(control_t * control, block_header_t * block)
{
 8025e44:	b580      	push	{r7, lr}
 8025e46:	b084      	sub	sp, #16
 8025e48:	af00      	add	r7, sp, #0
 8025e4a:	6078      	str	r0, [r7, #4]
 8025e4c:	6039      	str	r1, [r7, #0]
    if(block_is_prev_free(block)) {
 8025e4e:	6838      	ldr	r0, [r7, #0]
 8025e50:	f7ff fccb 	bl	80257ea <block_is_prev_free>
 8025e54:	4603      	mov	r3, r0
 8025e56:	2b00      	cmp	r3, #0
 8025e58:	d017      	beq.n	8025e8a <block_merge_prev+0x46>
        block_header_t * prev = block_prev(block);
 8025e5a:	6838      	ldr	r0, [r7, #0]
 8025e5c:	f7ff fd1d 	bl	802589a <block_prev>
 8025e60:	60f8      	str	r0, [r7, #12]
        tlsf_assert(prev && "prev physical block can't be null");
 8025e62:	68fb      	ldr	r3, [r7, #12]
 8025e64:	2b00      	cmp	r3, #0
 8025e66:	d100      	bne.n	8025e6a <block_merge_prev+0x26>
 8025e68:	e7fe      	b.n	8025e68 <block_merge_prev+0x24>
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 8025e6a:	68f8      	ldr	r0, [r7, #12]
 8025e6c:	f7ff fc8e 	bl	802578c <block_is_free>
 8025e70:	4603      	mov	r3, r0
 8025e72:	2b00      	cmp	r3, #0
 8025e74:	d100      	bne.n	8025e78 <block_merge_prev+0x34>
 8025e76:	e7fe      	b.n	8025e76 <block_merge_prev+0x32>
        block_remove(control, prev);
 8025e78:	68f9      	ldr	r1, [r7, #12]
 8025e7a:	6878      	ldr	r0, [r7, #4]
 8025e7c:	f7ff ff2f 	bl	8025cde <block_remove>
        block = block_absorb(prev, block);
 8025e80:	6839      	ldr	r1, [r7, #0]
 8025e82:	68f8      	ldr	r0, [r7, #12]
 8025e84:	f7ff ffbf 	bl	8025e06 <block_absorb>
 8025e88:	6038      	str	r0, [r7, #0]
    }

    return block;
 8025e8a:	683b      	ldr	r3, [r7, #0]
}
 8025e8c:	4618      	mov	r0, r3
 8025e8e:	3710      	adds	r7, #16
 8025e90:	46bd      	mov	sp, r7
 8025e92:	bd80      	pop	{r7, pc}

08025e94 <block_merge_next>:

/* Merge a just-freed block with an adjacent free block. */
static block_header_t * block_merge_next(control_t * control, block_header_t * block)
{
 8025e94:	b580      	push	{r7, lr}
 8025e96:	b084      	sub	sp, #16
 8025e98:	af00      	add	r7, sp, #0
 8025e9a:	6078      	str	r0, [r7, #4]
 8025e9c:	6039      	str	r1, [r7, #0]
    block_header_t * next = block_next(block);
 8025e9e:	6838      	ldr	r0, [r7, #0]
 8025ea0:	f7ff fd0c 	bl	80258bc <block_next>
 8025ea4:	60f8      	str	r0, [r7, #12]
    tlsf_assert(next && "next physical block can't be null");
 8025ea6:	68fb      	ldr	r3, [r7, #12]
 8025ea8:	2b00      	cmp	r3, #0
 8025eaa:	d100      	bne.n	8025eae <block_merge_next+0x1a>
 8025eac:	e7fe      	b.n	8025eac <block_merge_next+0x18>

    if(block_is_free(next)) {
 8025eae:	68f8      	ldr	r0, [r7, #12]
 8025eb0:	f7ff fc6c 	bl	802578c <block_is_free>
 8025eb4:	4603      	mov	r3, r0
 8025eb6:	2b00      	cmp	r3, #0
 8025eb8:	d00f      	beq.n	8025eda <block_merge_next+0x46>
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
 8025eba:	6838      	ldr	r0, [r7, #0]
 8025ebc:	f7ff fc55 	bl	802576a <block_is_last>
 8025ec0:	4603      	mov	r3, r0
 8025ec2:	2b00      	cmp	r3, #0
 8025ec4:	d000      	beq.n	8025ec8 <block_merge_next+0x34>
 8025ec6:	e7fe      	b.n	8025ec6 <block_merge_next+0x32>
        block_remove(control, next);
 8025ec8:	68f9      	ldr	r1, [r7, #12]
 8025eca:	6878      	ldr	r0, [r7, #4]
 8025ecc:	f7ff ff07 	bl	8025cde <block_remove>
        block = block_absorb(block, next);
 8025ed0:	68f9      	ldr	r1, [r7, #12]
 8025ed2:	6838      	ldr	r0, [r7, #0]
 8025ed4:	f7ff ff97 	bl	8025e06 <block_absorb>
 8025ed8:	6038      	str	r0, [r7, #0]
    }

    return block;
 8025eda:	683b      	ldr	r3, [r7, #0]
}
 8025edc:	4618      	mov	r0, r3
 8025ede:	3710      	adds	r7, #16
 8025ee0:	46bd      	mov	sp, r7
 8025ee2:	bd80      	pop	{r7, pc}

08025ee4 <block_trim_free>:

/* Trim any trailing block space off the end of a block, return to pool. */
static void block_trim_free(control_t * control, block_header_t * block, size_t size)
{
 8025ee4:	b580      	push	{r7, lr}
 8025ee6:	b086      	sub	sp, #24
 8025ee8:	af00      	add	r7, sp, #0
 8025eea:	60f8      	str	r0, [r7, #12]
 8025eec:	60b9      	str	r1, [r7, #8]
 8025eee:	607a      	str	r2, [r7, #4]
    tlsf_assert(block_is_free(block) && "block must be free");
 8025ef0:	68b8      	ldr	r0, [r7, #8]
 8025ef2:	f7ff fc4b 	bl	802578c <block_is_free>
 8025ef6:	4603      	mov	r3, r0
 8025ef8:	2b00      	cmp	r3, #0
 8025efa:	d100      	bne.n	8025efe <block_trim_free+0x1a>
 8025efc:	e7fe      	b.n	8025efc <block_trim_free+0x18>
    if(block_can_split(block, size)) {
 8025efe:	6879      	ldr	r1, [r7, #4]
 8025f00:	68b8      	ldr	r0, [r7, #8]
 8025f02:	f7ff ff1e 	bl	8025d42 <block_can_split>
 8025f06:	4603      	mov	r3, r0
 8025f08:	2b00      	cmp	r3, #0
 8025f0a:	d00e      	beq.n	8025f2a <block_trim_free+0x46>
        block_header_t * remaining_block = block_split(block, size);
 8025f0c:	6879      	ldr	r1, [r7, #4]
 8025f0e:	68b8      	ldr	r0, [r7, #8]
 8025f10:	f7ff ff2b 	bl	8025d6a <block_split>
 8025f14:	6178      	str	r0, [r7, #20]
        block_link_next(block);
 8025f16:	68b8      	ldr	r0, [r7, #8]
 8025f18:	f7ff fcef 	bl	80258fa <block_link_next>
        block_set_prev_free(remaining_block);
 8025f1c:	6978      	ldr	r0, [r7, #20]
 8025f1e:	f7ff fc72 	bl	8025806 <block_set_prev_free>
        block_insert(control, remaining_block);
 8025f22:	6979      	ldr	r1, [r7, #20]
 8025f24:	68f8      	ldr	r0, [r7, #12]
 8025f26:	f7ff fef3 	bl	8025d10 <block_insert>
    }
}
 8025f2a:	bf00      	nop
 8025f2c:	3718      	adds	r7, #24
 8025f2e:	46bd      	mov	sp, r7
 8025f30:	bd80      	pop	{r7, pc}

08025f32 <block_trim_used>:

/* Trim any trailing block space off the end of a used block, return to pool. */
static void block_trim_used(control_t * control, block_header_t * block, size_t size)
{
 8025f32:	b580      	push	{r7, lr}
 8025f34:	b086      	sub	sp, #24
 8025f36:	af00      	add	r7, sp, #0
 8025f38:	60f8      	str	r0, [r7, #12]
 8025f3a:	60b9      	str	r1, [r7, #8]
 8025f3c:	607a      	str	r2, [r7, #4]
    tlsf_assert(!block_is_free(block) && "block must be used");
 8025f3e:	68b8      	ldr	r0, [r7, #8]
 8025f40:	f7ff fc24 	bl	802578c <block_is_free>
 8025f44:	4603      	mov	r3, r0
 8025f46:	2b00      	cmp	r3, #0
 8025f48:	d000      	beq.n	8025f4c <block_trim_used+0x1a>
 8025f4a:	e7fe      	b.n	8025f4a <block_trim_used+0x18>
    if(block_can_split(block, size)) {
 8025f4c:	6879      	ldr	r1, [r7, #4]
 8025f4e:	68b8      	ldr	r0, [r7, #8]
 8025f50:	f7ff fef7 	bl	8025d42 <block_can_split>
 8025f54:	4603      	mov	r3, r0
 8025f56:	2b00      	cmp	r3, #0
 8025f58:	d010      	beq.n	8025f7c <block_trim_used+0x4a>
        /* If the next block is free, we must coalesce. */
        block_header_t * remaining_block = block_split(block, size);
 8025f5a:	6879      	ldr	r1, [r7, #4]
 8025f5c:	68b8      	ldr	r0, [r7, #8]
 8025f5e:	f7ff ff04 	bl	8025d6a <block_split>
 8025f62:	6178      	str	r0, [r7, #20]
        block_set_prev_used(remaining_block);
 8025f64:	6978      	ldr	r0, [r7, #20]
 8025f66:	f7ff fc5e 	bl	8025826 <block_set_prev_used>

        remaining_block = block_merge_next(control, remaining_block);
 8025f6a:	6979      	ldr	r1, [r7, #20]
 8025f6c:	68f8      	ldr	r0, [r7, #12]
 8025f6e:	f7ff ff91 	bl	8025e94 <block_merge_next>
 8025f72:	6178      	str	r0, [r7, #20]
        block_insert(control, remaining_block);
 8025f74:	6979      	ldr	r1, [r7, #20]
 8025f76:	68f8      	ldr	r0, [r7, #12]
 8025f78:	f7ff feca 	bl	8025d10 <block_insert>
    }
}
 8025f7c:	bf00      	nop
 8025f7e:	3718      	adds	r7, #24
 8025f80:	46bd      	mov	sp, r7
 8025f82:	bd80      	pop	{r7, pc}

08025f84 <block_locate_free>:

    return remaining_block;
}

static block_header_t * block_locate_free(control_t * control, size_t size)
{
 8025f84:	b580      	push	{r7, lr}
 8025f86:	b086      	sub	sp, #24
 8025f88:	af00      	add	r7, sp, #0
 8025f8a:	6078      	str	r0, [r7, #4]
 8025f8c:	6039      	str	r1, [r7, #0]
    int fl = 0, sl = 0;
 8025f8e:	2300      	movs	r3, #0
 8025f90:	613b      	str	r3, [r7, #16]
 8025f92:	2300      	movs	r3, #0
 8025f94:	60fb      	str	r3, [r7, #12]
    block_header_t * block = 0;
 8025f96:	2300      	movs	r3, #0
 8025f98:	617b      	str	r3, [r7, #20]

    if(size) {
 8025f9a:	683b      	ldr	r3, [r7, #0]
 8025f9c:	2b00      	cmp	r3, #0
 8025f9e:	d013      	beq.n	8025fc8 <block_locate_free+0x44>
        mapping_search(size, &fl, &sl);
 8025fa0:	f107 020c 	add.w	r2, r7, #12
 8025fa4:	f107 0310 	add.w	r3, r7, #16
 8025fa8:	4619      	mov	r1, r3
 8025faa:	6838      	ldr	r0, [r7, #0]
 8025fac:	f7ff fd6d 	bl	8025a8a <mapping_search>
        ** mapping_search can futz with the size, so for excessively large sizes it can sometimes wind up
        ** with indices that are off the end of the block array.
        ** So, we protect against that here, since this is the only callsite of mapping_search.
        ** Note that we don't need to check sl, since it comes from a modulo operation that guarantees it's always in range.
        */
        if(fl < FL_INDEX_COUNT) {
 8025fb0:	693b      	ldr	r3, [r7, #16]
 8025fb2:	2b09      	cmp	r3, #9
 8025fb4:	dc08      	bgt.n	8025fc8 <block_locate_free+0x44>
            block = search_suitable_block(control, &fl, &sl);
 8025fb6:	f107 020c 	add.w	r2, r7, #12
 8025fba:	f107 0310 	add.w	r3, r7, #16
 8025fbe:	4619      	mov	r1, r3
 8025fc0:	6878      	ldr	r0, [r7, #4]
 8025fc2:	f7ff fd82 	bl	8025aca <search_suitable_block>
 8025fc6:	6178      	str	r0, [r7, #20]
        }
    }

    if(block) {
 8025fc8:	697b      	ldr	r3, [r7, #20]
 8025fca:	2b00      	cmp	r3, #0
 8025fcc:	d00d      	beq.n	8025fea <block_locate_free+0x66>
        tlsf_assert(block_size(block) >= size);
 8025fce:	6978      	ldr	r0, [r7, #20]
 8025fd0:	f7ff fba3 	bl	802571a <block_size>
 8025fd4:	4602      	mov	r2, r0
 8025fd6:	683b      	ldr	r3, [r7, #0]
 8025fd8:	4293      	cmp	r3, r2
 8025fda:	d900      	bls.n	8025fde <block_locate_free+0x5a>
 8025fdc:	e7fe      	b.n	8025fdc <block_locate_free+0x58>
        remove_free_block(control, block, fl, sl);
 8025fde:	693a      	ldr	r2, [r7, #16]
 8025fe0:	68fb      	ldr	r3, [r7, #12]
 8025fe2:	6979      	ldr	r1, [r7, #20]
 8025fe4:	6878      	ldr	r0, [r7, #4]
 8025fe6:	f7ff fdc1 	bl	8025b6c <remove_free_block>
    }

    return block;
 8025fea:	697b      	ldr	r3, [r7, #20]
}
 8025fec:	4618      	mov	r0, r3
 8025fee:	3718      	adds	r7, #24
 8025ff0:	46bd      	mov	sp, r7
 8025ff2:	bd80      	pop	{r7, pc}

08025ff4 <block_prepare_used>:

static void * block_prepare_used(control_t * control, block_header_t * block, size_t size)
{
 8025ff4:	b580      	push	{r7, lr}
 8025ff6:	b086      	sub	sp, #24
 8025ff8:	af00      	add	r7, sp, #0
 8025ffa:	60f8      	str	r0, [r7, #12]
 8025ffc:	60b9      	str	r1, [r7, #8]
 8025ffe:	607a      	str	r2, [r7, #4]
    void * p = 0;
 8026000:	2300      	movs	r3, #0
 8026002:	617b      	str	r3, [r7, #20]
    if(block) {
 8026004:	68bb      	ldr	r3, [r7, #8]
 8026006:	2b00      	cmp	r3, #0
 8026008:	d00f      	beq.n	802602a <block_prepare_used+0x36>
        tlsf_assert(size && "size must be non-zero");
 802600a:	687b      	ldr	r3, [r7, #4]
 802600c:	2b00      	cmp	r3, #0
 802600e:	d100      	bne.n	8026012 <block_prepare_used+0x1e>
 8026010:	e7fe      	b.n	8026010 <block_prepare_used+0x1c>
        block_trim_free(control, block, size);
 8026012:	687a      	ldr	r2, [r7, #4]
 8026014:	68b9      	ldr	r1, [r7, #8]
 8026016:	68f8      	ldr	r0, [r7, #12]
 8026018:	f7ff ff64 	bl	8025ee4 <block_trim_free>
        block_mark_as_used(block);
 802601c:	68b8      	ldr	r0, [r7, #8]
 802601e:	f7ff fc8e 	bl	802593e <block_mark_as_used>
        p = block_to_ptr(block);
 8026022:	68b8      	ldr	r0, [r7, #8]
 8026024:	f7ff fc1e 	bl	8025864 <block_to_ptr>
 8026028:	6178      	str	r0, [r7, #20]
    }
    return p;
 802602a:	697b      	ldr	r3, [r7, #20]
}
 802602c:	4618      	mov	r0, r3
 802602e:	3718      	adds	r7, #24
 8026030:	46bd      	mov	sp, r7
 8026032:	bd80      	pop	{r7, pc}

08026034 <control_constructor>:

/* Clear structure and point all empty lists at the null block. */
static void control_constructor(control_t * control)
{
 8026034:	b480      	push	{r7}
 8026036:	b085      	sub	sp, #20
 8026038:	af00      	add	r7, sp, #0
 802603a:	6078      	str	r0, [r7, #4]
    int i, j;

    control->block_null.next_free = &control->block_null;
 802603c:	687a      	ldr	r2, [r7, #4]
 802603e:	687b      	ldr	r3, [r7, #4]
 8026040:	609a      	str	r2, [r3, #8]
    control->block_null.prev_free = &control->block_null;
 8026042:	687a      	ldr	r2, [r7, #4]
 8026044:	687b      	ldr	r3, [r7, #4]
 8026046:	60da      	str	r2, [r3, #12]

    control->fl_bitmap = 0;
 8026048:	687b      	ldr	r3, [r7, #4]
 802604a:	2200      	movs	r2, #0
 802604c:	611a      	str	r2, [r3, #16]
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 802604e:	2300      	movs	r3, #0
 8026050:	60fb      	str	r3, [r7, #12]
 8026052:	e01c      	b.n	802608e <control_constructor+0x5a>
        control->sl_bitmap[i] = 0;
 8026054:	687a      	ldr	r2, [r7, #4]
 8026056:	68fb      	ldr	r3, [r7, #12]
 8026058:	3304      	adds	r3, #4
 802605a:	009b      	lsls	r3, r3, #2
 802605c:	4413      	add	r3, r2
 802605e:	2200      	movs	r2, #0
 8026060:	605a      	str	r2, [r3, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8026062:	2300      	movs	r3, #0
 8026064:	60bb      	str	r3, [r7, #8]
 8026066:	e00c      	b.n	8026082 <control_constructor+0x4e>
            control->blocks[i][j] = &control->block_null;
 8026068:	687a      	ldr	r2, [r7, #4]
 802606a:	6879      	ldr	r1, [r7, #4]
 802606c:	68fb      	ldr	r3, [r7, #12]
 802606e:	0158      	lsls	r0, r3, #5
 8026070:	68bb      	ldr	r3, [r7, #8]
 8026072:	4403      	add	r3, r0
 8026074:	330e      	adds	r3, #14
 8026076:	009b      	lsls	r3, r3, #2
 8026078:	440b      	add	r3, r1
 802607a:	605a      	str	r2, [r3, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 802607c:	68bb      	ldr	r3, [r7, #8]
 802607e:	3301      	adds	r3, #1
 8026080:	60bb      	str	r3, [r7, #8]
 8026082:	68bb      	ldr	r3, [r7, #8]
 8026084:	2b1f      	cmp	r3, #31
 8026086:	ddef      	ble.n	8026068 <control_constructor+0x34>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8026088:	68fb      	ldr	r3, [r7, #12]
 802608a:	3301      	adds	r3, #1
 802608c:	60fb      	str	r3, [r7, #12]
 802608e:	68fb      	ldr	r3, [r7, #12]
 8026090:	2b09      	cmp	r3, #9
 8026092:	dddf      	ble.n	8026054 <control_constructor+0x20>
        }
    }
}
 8026094:	bf00      	nop
 8026096:	bf00      	nop
 8026098:	3714      	adds	r7, #20
 802609a:	46bd      	mov	sp, r7
 802609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80260a0:	4770      	bx	lr

080260a2 <lv_tlsf_size>:
/*
** Size of the TLSF structures in a given memory block passed to
** lv_tlsf_create, equal to the size of a control_t
*/
size_t lv_tlsf_size(void)
{
 80260a2:	b480      	push	{r7}
 80260a4:	af00      	add	r7, sp, #0
    return sizeof(control_t);
 80260a6:	f240 533c 	movw	r3, #1340	; 0x53c
}
 80260aa:	4618      	mov	r0, r3
 80260ac:	46bd      	mov	sp, r7
 80260ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80260b2:	4770      	bx	lr

080260b4 <lv_tlsf_pool_overhead>:
** Overhead of the TLSF structures in a given memory block passed to
** lv_tlsf_add_pool, equal to the overhead of a free block and the
** sentinel block.
*/
size_t lv_tlsf_pool_overhead(void)
{
 80260b4:	b480      	push	{r7}
 80260b6:	af00      	add	r7, sp, #0
    return 2 * block_header_overhead;
 80260b8:	2304      	movs	r3, #4
 80260ba:	005b      	lsls	r3, r3, #1
}
 80260bc:	4618      	mov	r0, r3
 80260be:	46bd      	mov	sp, r7
 80260c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80260c4:	4770      	bx	lr

080260c6 <lv_tlsf_add_pool>:
{
    return block_header_overhead;
}

lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
{
 80260c6:	b580      	push	{r7, lr}
 80260c8:	b088      	sub	sp, #32
 80260ca:	af00      	add	r7, sp, #0
 80260cc:	60f8      	str	r0, [r7, #12]
 80260ce:	60b9      	str	r1, [r7, #8]
 80260d0:	607a      	str	r2, [r7, #4]
    block_header_t * block;
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
 80260d2:	f7ff ffef 	bl	80260b4 <lv_tlsf_pool_overhead>
 80260d6:	61f8      	str	r0, [r7, #28]
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 80260d8:	687a      	ldr	r2, [r7, #4]
 80260da:	69fb      	ldr	r3, [r7, #28]
 80260dc:	1ad3      	subs	r3, r2, r3
 80260de:	2104      	movs	r1, #4
 80260e0:	4618      	mov	r0, r3
 80260e2:	f7ff fc57 	bl	8025994 <align_down>
 80260e6:	61b8      	str	r0, [r7, #24]

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 80260e8:	68bb      	ldr	r3, [r7, #8]
 80260ea:	f003 0303 	and.w	r3, r3, #3
 80260ee:	2b00      	cmp	r3, #0
 80260f0:	d001      	beq.n	80260f6 <lv_tlsf_add_pool+0x30>
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
 80260f2:	2300      	movs	r3, #0
 80260f4:	e02e      	b.n	8026154 <lv_tlsf_add_pool+0x8e>
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 80260f6:	220c      	movs	r2, #12
 80260f8:	69bb      	ldr	r3, [r7, #24]
 80260fa:	4293      	cmp	r3, r2
 80260fc:	d304      	bcc.n	8026108 <lv_tlsf_add_pool+0x42>
 80260fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8026102:	69bb      	ldr	r3, [r7, #24]
 8026104:	4293      	cmp	r3, r2
 8026106:	d901      	bls.n	802610c <lv_tlsf_add_pool+0x46>
#else
        printf("lv_tlsf_add_pool: Memory size must be between %u and %u bytes.\n",
               (unsigned int)(pool_overhead + block_size_min),
               (unsigned int)(pool_overhead + block_size_max));
#endif
        return 0;
 8026108:	2300      	movs	r3, #0
 802610a:	e023      	b.n	8026154 <lv_tlsf_add_pool+0x8e>
    /*
    ** Create the main free block. Offset the start of the block slightly
    ** so that the prev_phys_block field falls outside of the pool -
    ** it will never be used.
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
 802610c:	2304      	movs	r3, #4
 802610e:	425b      	negs	r3, r3
 8026110:	4619      	mov	r1, r3
 8026112:	68b8      	ldr	r0, [r7, #8]
 8026114:	f7ff fbb3 	bl	802587e <offset_to_block>
 8026118:	6178      	str	r0, [r7, #20]
    block_set_size(block, pool_bytes);
 802611a:	69b9      	ldr	r1, [r7, #24]
 802611c:	6978      	ldr	r0, [r7, #20]
 802611e:	f7ff fb0d 	bl	802573c <block_set_size>
    block_set_free(block);
 8026122:	6978      	ldr	r0, [r7, #20]
 8026124:	f7ff fb40 	bl	80257a8 <block_set_free>
    block_set_prev_used(block);
 8026128:	6978      	ldr	r0, [r7, #20]
 802612a:	f7ff fb7c 	bl	8025826 <block_set_prev_used>
    block_insert(tlsf_cast(control_t *, tlsf), block);
 802612e:	6979      	ldr	r1, [r7, #20]
 8026130:	68f8      	ldr	r0, [r7, #12]
 8026132:	f7ff fded 	bl	8025d10 <block_insert>

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
 8026136:	6978      	ldr	r0, [r7, #20]
 8026138:	f7ff fbdf 	bl	80258fa <block_link_next>
 802613c:	6138      	str	r0, [r7, #16]
    block_set_size(next, 0);
 802613e:	2100      	movs	r1, #0
 8026140:	6938      	ldr	r0, [r7, #16]
 8026142:	f7ff fafb 	bl	802573c <block_set_size>
    block_set_used(next);
 8026146:	6938      	ldr	r0, [r7, #16]
 8026148:	f7ff fb3e 	bl	80257c8 <block_set_used>
    block_set_prev_free(next);
 802614c:	6938      	ldr	r0, [r7, #16]
 802614e:	f7ff fb5a 	bl	8025806 <block_set_prev_free>

    return mem;
 8026152:	68bb      	ldr	r3, [r7, #8]
}
 8026154:	4618      	mov	r0, r3
 8026156:	3720      	adds	r7, #32
 8026158:	46bd      	mov	sp, r7
 802615a:	bd80      	pop	{r7, pc}

0802615c <lv_tlsf_create>:
    return rv;
}
#endif

lv_tlsf_t lv_tlsf_create(void * mem)
{
 802615c:	b580      	push	{r7, lr}
 802615e:	b082      	sub	sp, #8
 8026160:	af00      	add	r7, sp, #0
 8026162:	6078      	str	r0, [r7, #4]
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8026164:	687b      	ldr	r3, [r7, #4]
 8026166:	f003 0303 	and.w	r3, r3, #3
 802616a:	2b00      	cmp	r3, #0
 802616c:	d001      	beq.n	8026172 <lv_tlsf_create+0x16>
        printf("lv_tlsf_create: Memory must be aligned to %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
 802616e:	2300      	movs	r3, #0
 8026170:	e003      	b.n	802617a <lv_tlsf_create+0x1e>
    }

    control_constructor(tlsf_cast(control_t *, mem));
 8026172:	6878      	ldr	r0, [r7, #4]
 8026174:	f7ff ff5e 	bl	8026034 <control_constructor>

    return tlsf_cast(lv_tlsf_t, mem);
 8026178:	687b      	ldr	r3, [r7, #4]
}
 802617a:	4618      	mov	r0, r3
 802617c:	3708      	adds	r7, #8
 802617e:	46bd      	mov	sp, r7
 8026180:	bd80      	pop	{r7, pc}

08026182 <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 8026182:	b590      	push	{r4, r7, lr}
 8026184:	b085      	sub	sp, #20
 8026186:	af00      	add	r7, sp, #0
 8026188:	6078      	str	r0, [r7, #4]
 802618a:	6039      	str	r1, [r7, #0]
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 802618c:	6878      	ldr	r0, [r7, #4]
 802618e:	f7ff ffe5 	bl	802615c <lv_tlsf_create>
 8026192:	60f8      	str	r0, [r7, #12]
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 8026194:	f7ff ff85 	bl	80260a2 <lv_tlsf_size>
 8026198:	4602      	mov	r2, r0
 802619a:	687b      	ldr	r3, [r7, #4]
 802619c:	189c      	adds	r4, r3, r2
 802619e:	f7ff ff80 	bl	80260a2 <lv_tlsf_size>
 80261a2:	4602      	mov	r2, r0
 80261a4:	683b      	ldr	r3, [r7, #0]
 80261a6:	1a9b      	subs	r3, r3, r2
 80261a8:	461a      	mov	r2, r3
 80261aa:	4621      	mov	r1, r4
 80261ac:	68f8      	ldr	r0, [r7, #12]
 80261ae:	f7ff ff8a 	bl	80260c6 <lv_tlsf_add_pool>
    return tlsf;
 80261b2:	68fb      	ldr	r3, [r7, #12]
}
 80261b4:	4618      	mov	r0, r3
 80261b6:	3714      	adds	r7, #20
 80261b8:	46bd      	mov	sp, r7
 80261ba:	bd90      	pop	{r4, r7, pc}

080261bc <lv_tlsf_malloc>:
{
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
}

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 80261bc:	b580      	push	{r7, lr}
 80261be:	b086      	sub	sp, #24
 80261c0:	af00      	add	r7, sp, #0
 80261c2:	6078      	str	r0, [r7, #4]
 80261c4:	6039      	str	r1, [r7, #0]
    control_t * control = tlsf_cast(control_t *, tlsf);
 80261c6:	687b      	ldr	r3, [r7, #4]
 80261c8:	617b      	str	r3, [r7, #20]
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 80261ca:	2104      	movs	r1, #4
 80261cc:	6838      	ldr	r0, [r7, #0]
 80261ce:	f7ff fc12 	bl	80259f6 <adjust_request_size>
 80261d2:	6138      	str	r0, [r7, #16]
    block_header_t * block = block_locate_free(control, adjust);
 80261d4:	6939      	ldr	r1, [r7, #16]
 80261d6:	6978      	ldr	r0, [r7, #20]
 80261d8:	f7ff fed4 	bl	8025f84 <block_locate_free>
 80261dc:	60f8      	str	r0, [r7, #12]
    return block_prepare_used(control, block, adjust);
 80261de:	693a      	ldr	r2, [r7, #16]
 80261e0:	68f9      	ldr	r1, [r7, #12]
 80261e2:	6978      	ldr	r0, [r7, #20]
 80261e4:	f7ff ff06 	bl	8025ff4 <block_prepare_used>
 80261e8:	4603      	mov	r3, r0
}
 80261ea:	4618      	mov	r0, r3
 80261ec:	3718      	adds	r7, #24
 80261ee:	46bd      	mov	sp, r7
 80261f0:	bd80      	pop	{r7, pc}

080261f2 <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 80261f2:	b580      	push	{r7, lr}
 80261f4:	b086      	sub	sp, #24
 80261f6:	af00      	add	r7, sp, #0
 80261f8:	6078      	str	r0, [r7, #4]
 80261fa:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 80261fc:	2300      	movs	r3, #0
 80261fe:	617b      	str	r3, [r7, #20]
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 8026200:	683b      	ldr	r3, [r7, #0]
 8026202:	2b00      	cmp	r3, #0
 8026204:	d020      	beq.n	8026248 <lv_tlsf_free+0x56>
        control_t * control = tlsf_cast(control_t *, tlsf);
 8026206:	687b      	ldr	r3, [r7, #4]
 8026208:	613b      	str	r3, [r7, #16]
        block_header_t * block = block_from_ptr(ptr);
 802620a:	6838      	ldr	r0, [r7, #0]
 802620c:	f7ff fb1c 	bl	8025848 <block_from_ptr>
 8026210:	60f8      	str	r0, [r7, #12]
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8026212:	68f8      	ldr	r0, [r7, #12]
 8026214:	f7ff faba 	bl	802578c <block_is_free>
 8026218:	4603      	mov	r3, r0
 802621a:	2b00      	cmp	r3, #0
 802621c:	d000      	beq.n	8026220 <lv_tlsf_free+0x2e>
 802621e:	e7fe      	b.n	802621e <lv_tlsf_free+0x2c>
        size = block->size;
 8026220:	68fb      	ldr	r3, [r7, #12]
 8026222:	685b      	ldr	r3, [r3, #4]
 8026224:	617b      	str	r3, [r7, #20]
        block_mark_as_free(block);
 8026226:	68f8      	ldr	r0, [r7, #12]
 8026228:	f7ff fb77 	bl	802591a <block_mark_as_free>
        block = block_merge_prev(control, block);
 802622c:	68f9      	ldr	r1, [r7, #12]
 802622e:	6938      	ldr	r0, [r7, #16]
 8026230:	f7ff fe08 	bl	8025e44 <block_merge_prev>
 8026234:	60f8      	str	r0, [r7, #12]
        block = block_merge_next(control, block);
 8026236:	68f9      	ldr	r1, [r7, #12]
 8026238:	6938      	ldr	r0, [r7, #16]
 802623a:	f7ff fe2b 	bl	8025e94 <block_merge_next>
 802623e:	60f8      	str	r0, [r7, #12]
        block_insert(control, block);
 8026240:	68f9      	ldr	r1, [r7, #12]
 8026242:	6938      	ldr	r0, [r7, #16]
 8026244:	f7ff fd64 	bl	8025d10 <block_insert>
    }

    return size;
 8026248:	697b      	ldr	r3, [r7, #20]
}
 802624a:	4618      	mov	r0, r3
 802624c:	3718      	adds	r7, #24
 802624e:	46bd      	mov	sp, r7
 8026250:	bd80      	pop	{r7, pc}

08026252 <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 8026252:	b580      	push	{r7, lr}
 8026254:	b08c      	sub	sp, #48	; 0x30
 8026256:	af00      	add	r7, sp, #0
 8026258:	60f8      	str	r0, [r7, #12]
 802625a:	60b9      	str	r1, [r7, #8]
 802625c:	607a      	str	r2, [r7, #4]
    control_t * control = tlsf_cast(control_t *, tlsf);
 802625e:	68fb      	ldr	r3, [r7, #12]
 8026260:	62bb      	str	r3, [r7, #40]	; 0x28
    void * p = 0;
 8026262:	2300      	movs	r3, #0
 8026264:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 8026266:	68bb      	ldr	r3, [r7, #8]
 8026268:	2b00      	cmp	r3, #0
 802626a:	d007      	beq.n	802627c <lv_tlsf_realloc+0x2a>
 802626c:	687b      	ldr	r3, [r7, #4]
 802626e:	2b00      	cmp	r3, #0
 8026270:	d104      	bne.n	802627c <lv_tlsf_realloc+0x2a>
        lv_tlsf_free(tlsf, ptr);
 8026272:	68b9      	ldr	r1, [r7, #8]
 8026274:	68f8      	ldr	r0, [r7, #12]
 8026276:	f7ff ffbc 	bl	80261f2 <lv_tlsf_free>
 802627a:	e06a      	b.n	8026352 <lv_tlsf_realloc+0x100>
    }
    /* Requests with NULL pointers are treated as malloc. */
    else if(!ptr) {
 802627c:	68bb      	ldr	r3, [r7, #8]
 802627e:	2b00      	cmp	r3, #0
 8026280:	d105      	bne.n	802628e <lv_tlsf_realloc+0x3c>
        p = lv_tlsf_malloc(tlsf, size);
 8026282:	6879      	ldr	r1, [r7, #4]
 8026284:	68f8      	ldr	r0, [r7, #12]
 8026286:	f7ff ff99 	bl	80261bc <lv_tlsf_malloc>
 802628a:	62f8      	str	r0, [r7, #44]	; 0x2c
 802628c:	e061      	b.n	8026352 <lv_tlsf_realloc+0x100>
    }
    else {
        block_header_t * block = block_from_ptr(ptr);
 802628e:	68b8      	ldr	r0, [r7, #8]
 8026290:	f7ff fada 	bl	8025848 <block_from_ptr>
 8026294:	6278      	str	r0, [r7, #36]	; 0x24
        block_header_t * next = block_next(block);
 8026296:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8026298:	f7ff fb10 	bl	80258bc <block_next>
 802629c:	6238      	str	r0, [r7, #32]

        const size_t cursize = block_size(block);
 802629e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80262a0:	f7ff fa3b 	bl	802571a <block_size>
 80262a4:	61f8      	str	r0, [r7, #28]
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 80262a6:	6a38      	ldr	r0, [r7, #32]
 80262a8:	f7ff fa37 	bl	802571a <block_size>
 80262ac:	4602      	mov	r2, r0
 80262ae:	69fb      	ldr	r3, [r7, #28]
 80262b0:	4413      	add	r3, r2
 80262b2:	2204      	movs	r2, #4
 80262b4:	4413      	add	r3, r2
 80262b6:	61bb      	str	r3, [r7, #24]
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 80262b8:	2104      	movs	r1, #4
 80262ba:	6878      	ldr	r0, [r7, #4]
 80262bc:	f7ff fb9b 	bl	80259f6 <adjust_request_size>
 80262c0:	6178      	str	r0, [r7, #20]
        if(size > cursize && adjust == 0) {
 80262c2:	687a      	ldr	r2, [r7, #4]
 80262c4:	69fb      	ldr	r3, [r7, #28]
 80262c6:	429a      	cmp	r2, r3
 80262c8:	d904      	bls.n	80262d4 <lv_tlsf_realloc+0x82>
 80262ca:	697b      	ldr	r3, [r7, #20]
 80262cc:	2b00      	cmp	r3, #0
 80262ce:	d101      	bne.n	80262d4 <lv_tlsf_realloc+0x82>
            /* The request is probably too large, fail */
            return NULL;
 80262d0:	2300      	movs	r3, #0
 80262d2:	e03f      	b.n	8026354 <lv_tlsf_realloc+0x102>
        }

        tlsf_assert(!block_is_free(block) && "block already marked as free");
 80262d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80262d6:	f7ff fa59 	bl	802578c <block_is_free>
 80262da:	4603      	mov	r3, r0
 80262dc:	2b00      	cmp	r3, #0
 80262de:	d000      	beq.n	80262e2 <lv_tlsf_realloc+0x90>
 80262e0:	e7fe      	b.n	80262e0 <lv_tlsf_realloc+0x8e>

        /*
        ** If the next block is used, or when combined with the current
        ** block, does not offer enough space, we must reallocate and copy.
        */
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 80262e2:	697a      	ldr	r2, [r7, #20]
 80262e4:	69fb      	ldr	r3, [r7, #28]
 80262e6:	429a      	cmp	r2, r3
 80262e8:	d921      	bls.n	802632e <lv_tlsf_realloc+0xdc>
 80262ea:	6a38      	ldr	r0, [r7, #32]
 80262ec:	f7ff fa4e 	bl	802578c <block_is_free>
 80262f0:	4603      	mov	r3, r0
 80262f2:	2b00      	cmp	r3, #0
 80262f4:	d003      	beq.n	80262fe <lv_tlsf_realloc+0xac>
 80262f6:	697a      	ldr	r2, [r7, #20]
 80262f8:	69bb      	ldr	r3, [r7, #24]
 80262fa:	429a      	cmp	r2, r3
 80262fc:	d917      	bls.n	802632e <lv_tlsf_realloc+0xdc>
            p = lv_tlsf_malloc(tlsf, size);
 80262fe:	6879      	ldr	r1, [r7, #4]
 8026300:	68f8      	ldr	r0, [r7, #12]
 8026302:	f7ff ff5b 	bl	80261bc <lv_tlsf_malloc>
 8026306:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(p) {
 8026308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802630a:	2b00      	cmp	r3, #0
 802630c:	d021      	beq.n	8026352 <lv_tlsf_realloc+0x100>
                const size_t minsize = tlsf_min(cursize, size);
 802630e:	687a      	ldr	r2, [r7, #4]
 8026310:	69fb      	ldr	r3, [r7, #28]
 8026312:	4293      	cmp	r3, r2
 8026314:	bf28      	it	cs
 8026316:	4613      	movcs	r3, r2
 8026318:	613b      	str	r3, [r7, #16]
                lv_memcpy(p, ptr, minsize);
 802631a:	693a      	ldr	r2, [r7, #16]
 802631c:	68b9      	ldr	r1, [r7, #8]
 802631e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8026320:	f7fd ff76 	bl	8024210 <lv_memcpy>
                lv_tlsf_free(tlsf, ptr);
 8026324:	68b9      	ldr	r1, [r7, #8]
 8026326:	68f8      	ldr	r0, [r7, #12]
 8026328:	f7ff ff63 	bl	80261f2 <lv_tlsf_free>
            if(p) {
 802632c:	e011      	b.n	8026352 <lv_tlsf_realloc+0x100>
            }
        }
        else {
            /* Do we need to expand to the next block? */
            if(adjust > cursize) {
 802632e:	697a      	ldr	r2, [r7, #20]
 8026330:	69fb      	ldr	r3, [r7, #28]
 8026332:	429a      	cmp	r2, r3
 8026334:	d906      	bls.n	8026344 <lv_tlsf_realloc+0xf2>
                block_merge_next(control, block);
 8026336:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802633a:	f7ff fdab 	bl	8025e94 <block_merge_next>
                block_mark_as_used(block);
 802633e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8026340:	f7ff fafd 	bl	802593e <block_mark_as_used>
            }

            /* Trim the resulting block and return the original pointer. */
            block_trim_used(control, block, adjust);
 8026344:	697a      	ldr	r2, [r7, #20]
 8026346:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802634a:	f7ff fdf2 	bl	8025f32 <block_trim_used>
            p = ptr;
 802634e:	68bb      	ldr	r3, [r7, #8]
 8026350:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    return p;
 8026352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8026354:	4618      	mov	r0, r3
 8026356:	3730      	adds	r7, #48	; 0x30
 8026358:	46bd      	mov	sp, r7
 802635a:	bd80      	pop	{r7, pc}

0802635c <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 802635c:	b480      	push	{r7}
 802635e:	b083      	sub	sp, #12
 8026360:	af00      	add	r7, sp, #0
 8026362:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8026364:	687b      	ldr	r3, [r7, #4]
 8026366:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 802636a:	4618      	mov	r0, r3
 802636c:	370c      	adds	r7, #12
 802636e:	46bd      	mov	sp, r7
 8026370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026374:	4770      	bx	lr
	...

08026378 <_lv_txt_is_break_char>:
 * Test if char is break char or not (a text can broken here or not)
 * @param letter a letter
 * @return false: 'letter' is not break char
 */
static inline bool _lv_txt_is_break_char(uint32_t letter)
{
 8026378:	b480      	push	{r7}
 802637a:	b085      	sub	sp, #20
 802637c:	af00      	add	r7, sp, #0
 802637e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    bool ret = false;
 8026380:	2300      	movs	r3, #0
 8026382:	73bb      	strb	r3, [r7, #14]

    /* each chinese character can be break */
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
 8026384:	687b      	ldr	r3, [r7, #4]
 8026386:	f5b3 4f9c 	cmp.w	r3, #19968	; 0x4e00
 802638a:	d306      	bcc.n	802639a <_lv_txt_is_break_char+0x22>
 802638c:	687b      	ldr	r3, [r7, #4]
 802638e:	f649 72a5 	movw	r2, #40869	; 0x9fa5
 8026392:	4293      	cmp	r3, r2
 8026394:	d801      	bhi.n	802639a <_lv_txt_is_break_char+0x22>
        return true;
 8026396:	2301      	movs	r3, #1
 8026398:	e015      	b.n	80263c6 <_lv_txt_is_break_char+0x4e>
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 802639a:	2300      	movs	r3, #0
 802639c:	73fb      	strb	r3, [r7, #15]
 802639e:	e00c      	b.n	80263ba <_lv_txt_is_break_char+0x42>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 80263a0:	7bfb      	ldrb	r3, [r7, #15]
 80263a2:	4a0c      	ldr	r2, [pc, #48]	; (80263d4 <_lv_txt_is_break_char+0x5c>)
 80263a4:	5cd3      	ldrb	r3, [r2, r3]
 80263a6:	461a      	mov	r2, r3
 80263a8:	687b      	ldr	r3, [r7, #4]
 80263aa:	4293      	cmp	r3, r2
 80263ac:	d102      	bne.n	80263b4 <_lv_txt_is_break_char+0x3c>
            ret = true; /*If match then it is break char*/
 80263ae:	2301      	movs	r3, #1
 80263b0:	73bb      	strb	r3, [r7, #14]
            break;
 80263b2:	e007      	b.n	80263c4 <_lv_txt_is_break_char+0x4c>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 80263b4:	7bfb      	ldrb	r3, [r7, #15]
 80263b6:	3301      	adds	r3, #1
 80263b8:	73fb      	strb	r3, [r7, #15]
 80263ba:	7bfb      	ldrb	r3, [r7, #15]
 80263bc:	4a05      	ldr	r2, [pc, #20]	; (80263d4 <_lv_txt_is_break_char+0x5c>)
 80263be:	5cd3      	ldrb	r3, [r2, r3]
 80263c0:	2b00      	cmp	r3, #0
 80263c2:	d1ed      	bne.n	80263a0 <_lv_txt_is_break_char+0x28>
        }
    }

    return ret;
 80263c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80263c6:	4618      	mov	r0, r3
 80263c8:	3714      	adds	r7, #20
 80263ca:	46bd      	mov	sp, r7
 80263cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263d0:	4770      	bx	lr
 80263d2:	bf00      	nop
 80263d4:	08028908 	.word	0x08028908

080263d8 <lv_txt_get_size>:
 *   GLOBAL FUNCTIONS
 **********************/

void lv_txt_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, lv_coord_t letter_space,
                     lv_coord_t line_space, lv_coord_t max_width, lv_text_flag_t flag)
{
 80263d8:	b580      	push	{r7, lr}
 80263da:	b08a      	sub	sp, #40	; 0x28
 80263dc:	af02      	add	r7, sp, #8
 80263de:	60f8      	str	r0, [r7, #12]
 80263e0:	60b9      	str	r1, [r7, #8]
 80263e2:	607a      	str	r2, [r7, #4]
 80263e4:	807b      	strh	r3, [r7, #2]
    size_res->x = 0;
 80263e6:	68fb      	ldr	r3, [r7, #12]
 80263e8:	2200      	movs	r2, #0
 80263ea:	801a      	strh	r2, [r3, #0]
    size_res->y = 0;
 80263ec:	68fb      	ldr	r3, [r7, #12]
 80263ee:	2200      	movs	r2, #0
 80263f0:	805a      	strh	r2, [r3, #2]

    if(text == NULL) return;
 80263f2:	68bb      	ldr	r3, [r7, #8]
 80263f4:	2b00      	cmp	r3, #0
 80263f6:	f000 80a2 	beq.w	802653e <lv_txt_get_size+0x166>
    if(font == NULL) return;
 80263fa:	687b      	ldr	r3, [r7, #4]
 80263fc:	2b00      	cmp	r3, #0
 80263fe:	f000 80a0 	beq.w	8026542 <lv_txt_get_size+0x16a>

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8026402:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8026406:	f003 0302 	and.w	r3, r3, #2
 802640a:	2b00      	cmp	r3, #0
 802640c:	d002      	beq.n	8026414 <lv_txt_get_size+0x3c>
 802640e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8026412:	85bb      	strh	r3, [r7, #44]	; 0x2c

    uint32_t line_start     = 0;
 8026414:	2300      	movs	r3, #0
 8026416:	61fb      	str	r3, [r7, #28]
    uint32_t new_line_start = 0;
 8026418:	2300      	movs	r3, #0
 802641a:	61bb      	str	r3, [r7, #24]
    uint16_t letter_height = lv_font_get_line_height(font);
 802641c:	6878      	ldr	r0, [r7, #4]
 802641e:	f7ff ff9d 	bl	802635c <lv_font_get_line_height>
 8026422:	4603      	mov	r3, r0
 8026424:	82fb      	strh	r3, [r7, #22]

    /*Calc. the height and longest line*/
    while(text[line_start] != '\0') {
 8026426:	e051      	b.n	80264cc <lv_txt_get_size+0xf4>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 8026428:	68ba      	ldr	r2, [r7, #8]
 802642a:	69fb      	ldr	r3, [r7, #28]
 802642c:	18d0      	adds	r0, r2, r3
 802642e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8026432:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8026436:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 802643a:	9301      	str	r3, [sp, #4]
 802643c:	2300      	movs	r3, #0
 802643e:	9300      	str	r3, [sp, #0]
 8026440:	460b      	mov	r3, r1
 8026442:	6879      	ldr	r1, [r7, #4]
 8026444:	f000 f964 	bl	8026710 <_lv_txt_get_next_line>
 8026448:	4602      	mov	r2, r0
 802644a:	69bb      	ldr	r3, [r7, #24]
 802644c:	4413      	add	r3, r2
 802644e:	61bb      	str	r3, [r7, #24]

        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8026450:	68fb      	ldr	r3, [r7, #12]
 8026452:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8026456:	461a      	mov	r2, r3
 8026458:	8afb      	ldrh	r3, [r7, #22]
 802645a:	441a      	add	r2, r3
 802645c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8026460:	4413      	add	r3, r2
 8026462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8026466:	d26e      	bcs.n	8026546 <lv_txt_get_size+0x16e>
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
            return;
        }
        else {
            size_res->y += letter_height;
 8026468:	68fb      	ldr	r3, [r7, #12]
 802646a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802646e:	b29a      	uxth	r2, r3
 8026470:	8afb      	ldrh	r3, [r7, #22]
 8026472:	4413      	add	r3, r2
 8026474:	b29b      	uxth	r3, r3
 8026476:	b21a      	sxth	r2, r3
 8026478:	68fb      	ldr	r3, [r7, #12]
 802647a:	805a      	strh	r2, [r3, #2]
            size_res->y += line_space;
 802647c:	68fb      	ldr	r3, [r7, #12]
 802647e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8026482:	b29a      	uxth	r2, r3
 8026484:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8026486:	4413      	add	r3, r2
 8026488:	b29b      	uxth	r3, r3
 802648a:	b21a      	sxth	r2, r3
 802648c:	68fb      	ldr	r3, [r7, #12]
 802648e:	805a      	strh	r2, [r3, #2]
        }

        /*Calculate the longest line*/
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 8026490:	68ba      	ldr	r2, [r7, #8]
 8026492:	69fb      	ldr	r3, [r7, #28]
 8026494:	18d0      	adds	r0, r2, r3
 8026496:	69ba      	ldr	r2, [r7, #24]
 8026498:	69fb      	ldr	r3, [r7, #28]
 802649a:	1ad1      	subs	r1, r2, r3
 802649c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80264a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80264a4:	9300      	str	r3, [sp, #0]
 80264a6:	4613      	mov	r3, r2
 80264a8:	687a      	ldr	r2, [r7, #4]
 80264aa:	f000 fa0f 	bl	80268cc <lv_txt_get_width>
 80264ae:	4603      	mov	r3, r0
 80264b0:	82bb      	strh	r3, [r7, #20]
                                                      flag);

        size_res->x = LV_MAX(act_line_length, size_res->x);
 80264b2:	68fb      	ldr	r3, [r7, #12]
 80264b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80264b8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80264bc:	4293      	cmp	r3, r2
 80264be:	bfb8      	it	lt
 80264c0:	4613      	movlt	r3, r2
 80264c2:	b21a      	sxth	r2, r3
 80264c4:	68fb      	ldr	r3, [r7, #12]
 80264c6:	801a      	strh	r2, [r3, #0]
        line_start  = new_line_start;
 80264c8:	69bb      	ldr	r3, [r7, #24]
 80264ca:	61fb      	str	r3, [r7, #28]
    while(text[line_start] != '\0') {
 80264cc:	68ba      	ldr	r2, [r7, #8]
 80264ce:	69fb      	ldr	r3, [r7, #28]
 80264d0:	4413      	add	r3, r2
 80264d2:	781b      	ldrb	r3, [r3, #0]
 80264d4:	2b00      	cmp	r3, #0
 80264d6:	d1a7      	bne.n	8026428 <lv_txt_get_size+0x50>
    }

    /*Make the text one line taller if the last character is '\n' or '\r'*/
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 80264d8:	69fb      	ldr	r3, [r7, #28]
 80264da:	2b00      	cmp	r3, #0
 80264dc:	d01a      	beq.n	8026514 <lv_txt_get_size+0x13c>
 80264de:	69fb      	ldr	r3, [r7, #28]
 80264e0:	3b01      	subs	r3, #1
 80264e2:	68ba      	ldr	r2, [r7, #8]
 80264e4:	4413      	add	r3, r2
 80264e6:	781b      	ldrb	r3, [r3, #0]
 80264e8:	2b0a      	cmp	r3, #10
 80264ea:	d006      	beq.n	80264fa <lv_txt_get_size+0x122>
 80264ec:	69fb      	ldr	r3, [r7, #28]
 80264ee:	3b01      	subs	r3, #1
 80264f0:	68ba      	ldr	r2, [r7, #8]
 80264f2:	4413      	add	r3, r2
 80264f4:	781b      	ldrb	r3, [r3, #0]
 80264f6:	2b0d      	cmp	r3, #13
 80264f8:	d10c      	bne.n	8026514 <lv_txt_get_size+0x13c>
        size_res->y += letter_height + line_space;
 80264fa:	68fb      	ldr	r3, [r7, #12]
 80264fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8026500:	b29a      	uxth	r2, r3
 8026502:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8026504:	8afb      	ldrh	r3, [r7, #22]
 8026506:	440b      	add	r3, r1
 8026508:	b29b      	uxth	r3, r3
 802650a:	4413      	add	r3, r2
 802650c:	b29b      	uxth	r3, r3
 802650e:	b21a      	sxth	r2, r3
 8026510:	68fb      	ldr	r3, [r7, #12]
 8026512:	805a      	strh	r2, [r3, #2]
    }

    /*Correction with the last line space or set the height manually if the text is empty*/
    if(size_res->y == 0)
 8026514:	68fb      	ldr	r3, [r7, #12]
 8026516:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802651a:	2b00      	cmp	r3, #0
 802651c:	d104      	bne.n	8026528 <lv_txt_get_size+0x150>
        size_res->y = letter_height;
 802651e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8026522:	68fb      	ldr	r3, [r7, #12]
 8026524:	805a      	strh	r2, [r3, #2]
 8026526:	e00f      	b.n	8026548 <lv_txt_get_size+0x170>
    else
        size_res->y -= line_space;
 8026528:	68fb      	ldr	r3, [r7, #12]
 802652a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802652e:	b29a      	uxth	r2, r3
 8026530:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8026532:	1ad3      	subs	r3, r2, r3
 8026534:	b29b      	uxth	r3, r3
 8026536:	b21a      	sxth	r2, r3
 8026538:	68fb      	ldr	r3, [r7, #12]
 802653a:	805a      	strh	r2, [r3, #2]
 802653c:	e004      	b.n	8026548 <lv_txt_get_size+0x170>
    if(text == NULL) return;
 802653e:	bf00      	nop
 8026540:	e002      	b.n	8026548 <lv_txt_get_size+0x170>
    if(font == NULL) return;
 8026542:	bf00      	nop
 8026544:	e000      	b.n	8026548 <lv_txt_get_size+0x170>
            return;
 8026546:	bf00      	nop
}
 8026548:	3720      	adds	r7, #32
 802654a:	46bd      	mov	sp, r7
 802654c:	bd80      	pop	{r7, pc}
	...

08026550 <lv_txt_get_next_word>:
 * @return the index of the first char of the next word (in byte index not letter index. With UTF-8 they are different)
 */
static uint32_t lv_txt_get_next_word(const char * txt, const lv_font_t * font,
                                     lv_coord_t letter_space, lv_coord_t max_width,
                                     lv_text_flag_t flag, uint32_t * word_w_ptr, lv_text_cmd_state_t * cmd_state, bool force)
{
 8026550:	b580      	push	{r7, lr}
 8026552:	b08e      	sub	sp, #56	; 0x38
 8026554:	af00      	add	r7, sp, #0
 8026556:	60f8      	str	r0, [r7, #12]
 8026558:	60b9      	str	r1, [r7, #8]
 802655a:	4611      	mov	r1, r2
 802655c:	461a      	mov	r2, r3
 802655e:	460b      	mov	r3, r1
 8026560:	80fb      	strh	r3, [r7, #6]
 8026562:	4613      	mov	r3, r2
 8026564:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL || txt[0] == '\0') return 0;
 8026566:	68fb      	ldr	r3, [r7, #12]
 8026568:	2b00      	cmp	r3, #0
 802656a:	d003      	beq.n	8026574 <lv_txt_get_next_word+0x24>
 802656c:	68fb      	ldr	r3, [r7, #12]
 802656e:	781b      	ldrb	r3, [r3, #0]
 8026570:	2b00      	cmp	r3, #0
 8026572:	d101      	bne.n	8026578 <lv_txt_get_next_word+0x28>
 8026574:	2300      	movs	r3, #0
 8026576:	e0c4      	b.n	8026702 <lv_txt_get_next_word+0x1b2>
    if(font == NULL) return 0;
 8026578:	68bb      	ldr	r3, [r7, #8]
 802657a:	2b00      	cmp	r3, #0
 802657c:	d101      	bne.n	8026582 <lv_txt_get_next_word+0x32>
 802657e:	2300      	movs	r3, #0
 8026580:	e0bf      	b.n	8026702 <lv_txt_get_next_word+0x1b2>

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8026582:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8026586:	f003 0302 	and.w	r3, r3, #2
 802658a:	2b00      	cmp	r3, #0
 802658c:	d002      	beq.n	8026594 <lv_txt_get_next_word+0x44>
 802658e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8026592:	80bb      	strh	r3, [r7, #4]

    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8026594:	2300      	movs	r3, #0
 8026596:	637b      	str	r3, [r7, #52]	; 0x34
 8026598:	2300      	movs	r3, #0
 802659a:	617b      	str	r3, [r7, #20]
 802659c:	2300      	movs	r3, #0
 802659e:	613b      	str	r3, [r7, #16]
    uint32_t letter = 0;      /*Letter at i*/
 80265a0:	2300      	movs	r3, #0
 80265a2:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t letter_next = 0; /*Letter at i_next*/
 80265a4:	2300      	movs	r3, #0
 80265a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    lv_coord_t letter_w;
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 80265a8:	2300      	movs	r3, #0
 80265aa:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 80265ac:	2300      	movs	r3, #0
 80265ae:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 80265b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80265b4:	623b      	str	r3, [r7, #32]
    uint32_t break_letter_count = 0; /*Number of characters up to the long word break point*/
 80265b6:	2300      	movs	r3, #0
 80265b8:	61fb      	str	r3, [r7, #28]

    letter = _lv_txt_encoded_next(txt, &i_next);
 80265ba:	4b54      	ldr	r3, [pc, #336]	; (802670c <lv_txt_get_next_word+0x1bc>)
 80265bc:	681b      	ldr	r3, [r3, #0]
 80265be:	f107 0214 	add.w	r2, r7, #20
 80265c2:	4611      	mov	r1, r2
 80265c4:	68f8      	ldr	r0, [r7, #12]
 80265c6:	4798      	blx	r3
 80265c8:	6338      	str	r0, [r7, #48]	; 0x30
    i_next_next = i_next;
 80265ca:	697b      	ldr	r3, [r7, #20]
 80265cc:	613b      	str	r3, [r7, #16]

    /*Obtain the full word, regardless if it fits or not in max_width*/
    while(txt[i] != '\0') {
 80265ce:	e074      	b.n	80266ba <lv_txt_get_next_word+0x16a>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 80265d0:	4b4e      	ldr	r3, [pc, #312]	; (802670c <lv_txt_get_next_word+0x1bc>)
 80265d2:	681b      	ldr	r3, [r3, #0]
 80265d4:	f107 0210 	add.w	r2, r7, #16
 80265d8:	4611      	mov	r1, r2
 80265da:	68f8      	ldr	r0, [r7, #12]
 80265dc:	4798      	blx	r3
 80265de:	62f8      	str	r0, [r7, #44]	; 0x2c
        word_len++;
 80265e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80265e2:	3301      	adds	r3, #1
 80265e4:	627b      	str	r3, [r7, #36]	; 0x24

        /*Handle the recolor command*/
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80265e6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80265ea:	f003 0301 	and.w	r3, r3, #1
 80265ee:	2b00      	cmp	r3, #0
 80265f0:	d00d      	beq.n	802660e <lv_txt_get_next_word+0xbe>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 80265f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80265f4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80265f6:	f000 f9cd 	bl	8026994 <_lv_txt_is_cmd>
 80265fa:	4603      	mov	r3, r0
 80265fc:	2b00      	cmp	r3, #0
 80265fe:	d006      	beq.n	802660e <lv_txt_get_next_word+0xbe>
                i = i_next;
 8026600:	697b      	ldr	r3, [r7, #20]
 8026602:	637b      	str	r3, [r7, #52]	; 0x34
                i_next = i_next_next;
 8026604:	693b      	ldr	r3, [r7, #16]
 8026606:	617b      	str	r3, [r7, #20]
                letter = letter_next;
 8026608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802660a:	633b      	str	r3, [r7, #48]	; 0x30
                continue;   /*Skip the letter if it is part of a command*/
 802660c:	e055      	b.n	80266ba <lv_txt_get_next_word+0x16a>
            }
        }

        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 802660e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026610:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8026612:	68b8      	ldr	r0, [r7, #8]
 8026614:	f7fa ff82 	bl	802151c <lv_font_get_glyph_width>
 8026618:	4603      	mov	r3, r0
 802661a:	837b      	strh	r3, [r7, #26]
        cur_w += letter_w;
 802661c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 802661e:	8b7b      	ldrh	r3, [r7, #26]
 8026620:	4413      	add	r3, r2
 8026622:	b29b      	uxth	r3, r3
 8026624:	857b      	strh	r3, [r7, #42]	; 0x2a

        if(letter_w > 0) {
 8026626:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 802662a:	2b00      	cmp	r3, #0
 802662c:	dd04      	ble.n	8026638 <lv_txt_get_next_word+0xe8>
            cur_w += letter_space;
 802662e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8026630:	88fb      	ldrh	r3, [r7, #6]
 8026632:	4413      	add	r3, r2
 8026634:	b29b      	uxth	r3, r3
 8026636:	857b      	strh	r3, [r7, #42]	; 0x2a
        }

        /*Test if this character fits within max_width*/
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8026638:	6a3b      	ldr	r3, [r7, #32]
 802663a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802663e:	d10d      	bne.n	802665c <lv_txt_get_next_word+0x10c>
 8026640:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8026644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8026648:	1ad2      	subs	r2, r2, r3
 802664a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 802664e:	429a      	cmp	r2, r3
 8026650:	dd04      	ble.n	802665c <lv_txt_get_next_word+0x10c>
            break_index = i;
 8026652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026654:	623b      	str	r3, [r7, #32]
            break_letter_count = word_len - 1;
 8026656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026658:	3b01      	subs	r3, #1
 802665a:	61fb      	str	r3, [r7, #28]
            /*break_index is now pointing at the character that doesn't fit*/
        }

        /*Check for new line chars and breakchars*/
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 802665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802665e:	2b0a      	cmp	r3, #10
 8026660:	d008      	beq.n	8026674 <lv_txt_get_next_word+0x124>
 8026662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026664:	2b0d      	cmp	r3, #13
 8026666:	d005      	beq.n	8026674 <lv_txt_get_next_word+0x124>
 8026668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802666a:	f7ff fe85 	bl	8026378 <_lv_txt_is_break_char>
 802666e:	4603      	mov	r3, r0
 8026670:	2b00      	cmp	r3, #0
 8026672:	d011      	beq.n	8026698 <lv_txt_get_next_word+0x148>
            /*Update the output width on the first character if it fits.
             *Must do this here in case first letter is a break character.*/
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 8026674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026676:	2b00      	cmp	r3, #0
 8026678:	d10a      	bne.n	8026690 <lv_txt_get_next_word+0x140>
 802667a:	6a3b      	ldr	r3, [r7, #32]
 802667c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8026680:	d106      	bne.n	8026690 <lv_txt_get_next_word+0x140>
 8026682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026684:	2b00      	cmp	r3, #0
 8026686:	d003      	beq.n	8026690 <lv_txt_get_next_word+0x140>
 8026688:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 802668c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802668e:	601a      	str	r2, [r3, #0]
            word_len--;
 8026690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026692:	3b01      	subs	r3, #1
 8026694:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8026696:	e016      	b.n	80266c6 <lv_txt_get_next_word+0x176>
        }

        /*Update the output width*/
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 8026698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802669a:	2b00      	cmp	r3, #0
 802669c:	d007      	beq.n	80266ae <lv_txt_get_next_word+0x15e>
 802669e:	6a3b      	ldr	r3, [r7, #32]
 80266a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80266a4:	d103      	bne.n	80266ae <lv_txt_get_next_word+0x15e>
 80266a6:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80266aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80266ac:	601a      	str	r2, [r3, #0]

        i = i_next;
 80266ae:	697b      	ldr	r3, [r7, #20]
 80266b0:	637b      	str	r3, [r7, #52]	; 0x34
        i_next = i_next_next;
 80266b2:	693b      	ldr	r3, [r7, #16]
 80266b4:	617b      	str	r3, [r7, #20]
        letter = letter_next;
 80266b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80266b8:	633b      	str	r3, [r7, #48]	; 0x30
    while(txt[i] != '\0') {
 80266ba:	68fa      	ldr	r2, [r7, #12]
 80266bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80266be:	4413      	add	r3, r2
 80266c0:	781b      	ldrb	r3, [r3, #0]
 80266c2:	2b00      	cmp	r3, #0
 80266c4:	d184      	bne.n	80265d0 <lv_txt_get_next_word+0x80>
    }

    /*Entire Word fits in the provided space*/
    if(break_index == NO_BREAK_FOUND) {
 80266c6:	6a3b      	ldr	r3, [r7, #32]
 80266c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80266cc:	d10c      	bne.n	80266e8 <lv_txt_get_next_word+0x198>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 80266ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80266d0:	2b00      	cmp	r3, #0
 80266d2:	d005      	beq.n	80266e0 <lv_txt_get_next_word+0x190>
 80266d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80266d6:	2b0d      	cmp	r3, #13
 80266d8:	d104      	bne.n	80266e4 <lv_txt_get_next_word+0x194>
 80266da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80266dc:	2b0a      	cmp	r3, #10
 80266de:	d101      	bne.n	80266e4 <lv_txt_get_next_word+0x194>
 80266e0:	697b      	ldr	r3, [r7, #20]
 80266e2:	637b      	str	r3, [r7, #52]	; 0x34
        return i;
 80266e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80266e6:	e00c      	b.n	8026702 <lv_txt_get_next_word+0x1b2>
            // However, in current usage, this doesn't impact anything.
        }
    }
    return i;
#else
    if(force) return break_index;
 80266e8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80266ec:	2b00      	cmp	r3, #0
 80266ee:	d001      	beq.n	80266f4 <lv_txt_get_next_word+0x1a4>
 80266f0:	6a3b      	ldr	r3, [r7, #32]
 80266f2:	e006      	b.n	8026702 <lv_txt_get_next_word+0x1b2>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /*Return no word*/
 80266f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80266f6:	2b00      	cmp	r3, #0
 80266f8:	d002      	beq.n	8026700 <lv_txt_get_next_word+0x1b0>
 80266fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80266fc:	2200      	movs	r2, #0
 80266fe:	601a      	str	r2, [r3, #0]
    (void) break_letter_count;
    return 0;
 8026700:	2300      	movs	r3, #0
#endif
}
 8026702:	4618      	mov	r0, r3
 8026704:	3738      	adds	r7, #56	; 0x38
 8026706:	46bd      	mov	sp, r7
 8026708:	bd80      	pop	{r7, pc}
 802670a:	bf00      	nop
 802670c:	2000001c 	.word	0x2000001c

08026710 <_lv_txt_get_next_line>:

uint32_t _lv_txt_get_next_line(const char * txt, const lv_font_t * font,
                               lv_coord_t letter_space, lv_coord_t max_width,
                               lv_coord_t * used_width, lv_text_flag_t flag)
{
 8026710:	b580      	push	{r7, lr}
 8026712:	b090      	sub	sp, #64	; 0x40
 8026714:	af04      	add	r7, sp, #16
 8026716:	60f8      	str	r0, [r7, #12]
 8026718:	60b9      	str	r1, [r7, #8]
 802671a:	4611      	mov	r1, r2
 802671c:	461a      	mov	r2, r3
 802671e:	460b      	mov	r3, r1
 8026720:	80fb      	strh	r3, [r7, #6]
 8026722:	4613      	mov	r3, r2
 8026724:	80bb      	strh	r3, [r7, #4]
    if(used_width) *used_width = 0;
 8026726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026728:	2b00      	cmp	r3, #0
 802672a:	d002      	beq.n	8026732 <_lv_txt_get_next_line+0x22>
 802672c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802672e:	2200      	movs	r2, #0
 8026730:	801a      	strh	r2, [r3, #0]

    if(txt == NULL) return 0;
 8026732:	68fb      	ldr	r3, [r7, #12]
 8026734:	2b00      	cmp	r3, #0
 8026736:	d101      	bne.n	802673c <_lv_txt_get_next_line+0x2c>
 8026738:	2300      	movs	r3, #0
 802673a:	e0c1      	b.n	80268c0 <_lv_txt_get_next_line+0x1b0>
    if(txt[0] == '\0') return 0;
 802673c:	68fb      	ldr	r3, [r7, #12]
 802673e:	781b      	ldrb	r3, [r3, #0]
 8026740:	2b00      	cmp	r3, #0
 8026742:	d101      	bne.n	8026748 <_lv_txt_get_next_line+0x38>
 8026744:	2300      	movs	r3, #0
 8026746:	e0bb      	b.n	80268c0 <_lv_txt_get_next_line+0x1b0>
    if(font == NULL) return 0;
 8026748:	68bb      	ldr	r3, [r7, #8]
 802674a:	2b00      	cmp	r3, #0
 802674c:	d101      	bne.n	8026752 <_lv_txt_get_next_line+0x42>
 802674e:	2300      	movs	r3, #0
 8026750:	e0b6      	b.n	80268c0 <_lv_txt_get_next_line+0x1b0>

    lv_coord_t line_w = 0;
 8026752:	2300      	movs	r3, #0
 8026754:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /*If max_width doesn't mater simply find the new line character
     *without thinking about word wrapping*/
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 8026756:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 802675a:	f003 0302 	and.w	r3, r3, #2
 802675e:	2b00      	cmp	r3, #0
 8026760:	d105      	bne.n	802676e <_lv_txt_get_next_line+0x5e>
 8026762:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8026766:	f003 0304 	and.w	r3, r3, #4
 802676a:	2b00      	cmp	r3, #0
 802676c:	d029      	beq.n	80267c2 <_lv_txt_get_next_line+0xb2>
        uint32_t i;
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 802676e:	2300      	movs	r3, #0
 8026770:	62bb      	str	r3, [r7, #40]	; 0x28
 8026772:	e002      	b.n	802677a <_lv_txt_get_next_line+0x6a>
 8026774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026776:	3301      	adds	r3, #1
 8026778:	62bb      	str	r3, [r7, #40]	; 0x28
 802677a:	68fa      	ldr	r2, [r7, #12]
 802677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802677e:	4413      	add	r3, r2
 8026780:	781b      	ldrb	r3, [r3, #0]
 8026782:	2b0a      	cmp	r3, #10
 8026784:	d00b      	beq.n	802679e <_lv_txt_get_next_line+0x8e>
 8026786:	68fa      	ldr	r2, [r7, #12]
 8026788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802678a:	4413      	add	r3, r2
 802678c:	781b      	ldrb	r3, [r3, #0]
 802678e:	2b0d      	cmp	r3, #13
 8026790:	d005      	beq.n	802679e <_lv_txt_get_next_line+0x8e>
 8026792:	68fa      	ldr	r2, [r7, #12]
 8026794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026796:	4413      	add	r3, r2
 8026798:	781b      	ldrb	r3, [r3, #0]
 802679a:	2b00      	cmp	r3, #0
 802679c:	d1ea      	bne.n	8026774 <_lv_txt_get_next_line+0x64>
            /*Just find the new line chars or string ends by incrementing `i`*/
        }
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 802679e:	68fa      	ldr	r2, [r7, #12]
 80267a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80267a2:	4413      	add	r3, r2
 80267a4:	781b      	ldrb	r3, [r3, #0]
 80267a6:	2b00      	cmp	r3, #0
 80267a8:	d002      	beq.n	80267b0 <_lv_txt_get_next_line+0xa0>
 80267aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80267ac:	3301      	adds	r3, #1
 80267ae:	62bb      	str	r3, [r7, #40]	; 0x28
        if(used_width) *used_width = -1;
 80267b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80267b2:	2b00      	cmp	r3, #0
 80267b4:	d003      	beq.n	80267be <_lv_txt_get_next_line+0xae>
 80267b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80267b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80267bc:	801a      	strh	r2, [r3, #0]
        return i;
 80267be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80267c0:	e07e      	b.n	80268c0 <_lv_txt_get_next_line+0x1b0>
    }

    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80267c2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80267c6:	f003 0302 	and.w	r3, r3, #2
 80267ca:	2b00      	cmp	r3, #0
 80267cc:	d002      	beq.n	80267d4 <_lv_txt_get_next_line+0xc4>
 80267ce:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80267d2:	80bb      	strh	r3, [r7, #4]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80267d4:	2300      	movs	r3, #0
 80267d6:	77fb      	strb	r3, [r7, #31]
    uint32_t i = 0;                                        /*Iterating index into txt*/
 80267d8:	2300      	movs	r3, #0
 80267da:	61bb      	str	r3, [r7, #24]

    while(txt[i] != '\0' && max_width > 0) {
 80267dc:	e048      	b.n	8026870 <_lv_txt_get_next_line+0x160>
        uint32_t word_w = 0;
 80267de:	2300      	movs	r3, #0
 80267e0:	617b      	str	r3, [r7, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
 80267e2:	69bb      	ldr	r3, [r7, #24]
 80267e4:	68fa      	ldr	r2, [r7, #12]
 80267e6:	18d0      	adds	r0, r2, r3
 80267e8:	69bb      	ldr	r3, [r7, #24]
 80267ea:	2b00      	cmp	r3, #0
 80267ec:	bf0c      	ite	eq
 80267ee:	2301      	moveq	r3, #1
 80267f0:	2300      	movne	r3, #0
 80267f2:	b2db      	uxtb	r3, r3
 80267f4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80267f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80267fc:	9303      	str	r3, [sp, #12]
 80267fe:	f107 031f 	add.w	r3, r7, #31
 8026802:	9302      	str	r3, [sp, #8]
 8026804:	f107 0314 	add.w	r3, r7, #20
 8026808:	9301      	str	r3, [sp, #4]
 802680a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 802680e:	9300      	str	r3, [sp, #0]
 8026810:	460b      	mov	r3, r1
 8026812:	68b9      	ldr	r1, [r7, #8]
 8026814:	f7ff fe9c 	bl	8026550 <lv_txt_get_next_word>
 8026818:	6278      	str	r0, [r7, #36]	; 0x24
        max_width -= word_w;
 802681a:	88ba      	ldrh	r2, [r7, #4]
 802681c:	697b      	ldr	r3, [r7, #20]
 802681e:	b29b      	uxth	r3, r3
 8026820:	1ad3      	subs	r3, r2, r3
 8026822:	b29b      	uxth	r3, r3
 8026824:	80bb      	strh	r3, [r7, #4]
        line_w += word_w;
 8026826:	697b      	ldr	r3, [r7, #20]
 8026828:	b29a      	uxth	r2, r3
 802682a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802682c:	4413      	add	r3, r2
 802682e:	b29b      	uxth	r3, r3
 8026830:	85fb      	strh	r3, [r7, #46]	; 0x2e

        if(advance == 0) {
 8026832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026834:	2b00      	cmp	r3, #0
 8026836:	d026      	beq.n	8026886 <_lv_txt_get_next_line+0x176>
            break;
        }

        i += advance;
 8026838:	69ba      	ldr	r2, [r7, #24]
 802683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802683c:	4413      	add	r3, r2
 802683e:	61bb      	str	r3, [r7, #24]

        if(txt[0] == '\n' || txt[0] == '\r') break;
 8026840:	68fb      	ldr	r3, [r7, #12]
 8026842:	781b      	ldrb	r3, [r3, #0]
 8026844:	2b0a      	cmp	r3, #10
 8026846:	d01e      	beq.n	8026886 <_lv_txt_get_next_line+0x176>
 8026848:	68fb      	ldr	r3, [r7, #12]
 802684a:	781b      	ldrb	r3, [r3, #0]
 802684c:	2b0d      	cmp	r3, #13
 802684e:	d01a      	beq.n	8026886 <_lv_txt_get_next_line+0x176>

        if(txt[i] == '\n' || txt[i] == '\r') {
 8026850:	69bb      	ldr	r3, [r7, #24]
 8026852:	68fa      	ldr	r2, [r7, #12]
 8026854:	4413      	add	r3, r2
 8026856:	781b      	ldrb	r3, [r3, #0]
 8026858:	2b0a      	cmp	r3, #10
 802685a:	d005      	beq.n	8026868 <_lv_txt_get_next_line+0x158>
 802685c:	69bb      	ldr	r3, [r7, #24]
 802685e:	68fa      	ldr	r2, [r7, #12]
 8026860:	4413      	add	r3, r2
 8026862:	781b      	ldrb	r3, [r3, #0]
 8026864:	2b0d      	cmp	r3, #13
 8026866:	d103      	bne.n	8026870 <_lv_txt_get_next_line+0x160>
            i++;  /*Include the following newline in the current line*/
 8026868:	69bb      	ldr	r3, [r7, #24]
 802686a:	3301      	adds	r3, #1
 802686c:	61bb      	str	r3, [r7, #24]
            break;
 802686e:	e00b      	b.n	8026888 <_lv_txt_get_next_line+0x178>
    while(txt[i] != '\0' && max_width > 0) {
 8026870:	69bb      	ldr	r3, [r7, #24]
 8026872:	68fa      	ldr	r2, [r7, #12]
 8026874:	4413      	add	r3, r2
 8026876:	781b      	ldrb	r3, [r3, #0]
 8026878:	2b00      	cmp	r3, #0
 802687a:	d005      	beq.n	8026888 <_lv_txt_get_next_line+0x178>
 802687c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8026880:	2b00      	cmp	r3, #0
 8026882:	dcac      	bgt.n	80267de <_lv_txt_get_next_line+0xce>
 8026884:	e000      	b.n	8026888 <_lv_txt_get_next_line+0x178>
            break;
 8026886:	bf00      	nop
        }

    }

    /*Always step at least one to avoid infinite loops*/
    if(i == 0) {
 8026888:	69bb      	ldr	r3, [r7, #24]
 802688a:	2b00      	cmp	r3, #0
 802688c:	d111      	bne.n	80268b2 <_lv_txt_get_next_line+0x1a2>
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 802688e:	4b0e      	ldr	r3, [pc, #56]	; (80268c8 <_lv_txt_get_next_line+0x1b8>)
 8026890:	681b      	ldr	r3, [r3, #0]
 8026892:	f107 0218 	add.w	r2, r7, #24
 8026896:	4611      	mov	r1, r2
 8026898:	68f8      	ldr	r0, [r7, #12]
 802689a:	4798      	blx	r3
 802689c:	6238      	str	r0, [r7, #32]
        if(used_width != NULL) {
 802689e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80268a0:	2b00      	cmp	r3, #0
 80268a2:	d006      	beq.n	80268b2 <_lv_txt_get_next_line+0x1a2>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 80268a4:	2200      	movs	r2, #0
 80268a6:	6a39      	ldr	r1, [r7, #32]
 80268a8:	68b8      	ldr	r0, [r7, #8]
 80268aa:	f7fa fe37 	bl	802151c <lv_font_get_glyph_width>
 80268ae:	4603      	mov	r3, r0
 80268b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
    }

    if(used_width != NULL) {
 80268b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80268b4:	2b00      	cmp	r3, #0
 80268b6:	d002      	beq.n	80268be <_lv_txt_get_next_line+0x1ae>
        *used_width = line_w;
 80268b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80268ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80268bc:	801a      	strh	r2, [r3, #0]
    }

    return i;
 80268be:	69bb      	ldr	r3, [r7, #24]
}
 80268c0:	4618      	mov	r0, r3
 80268c2:	3730      	adds	r7, #48	; 0x30
 80268c4:	46bd      	mov	sp, r7
 80268c6:	bd80      	pop	{r7, pc}
 80268c8:	2000001c 	.word	0x2000001c

080268cc <lv_txt_get_width>:

lv_coord_t lv_txt_get_width(const char * txt, uint32_t length, const lv_font_t * font, lv_coord_t letter_space,
                            lv_text_flag_t flag)
{
 80268cc:	b580      	push	{r7, lr}
 80268ce:	b08a      	sub	sp, #40	; 0x28
 80268d0:	af00      	add	r7, sp, #0
 80268d2:	60f8      	str	r0, [r7, #12]
 80268d4:	60b9      	str	r1, [r7, #8]
 80268d6:	607a      	str	r2, [r7, #4]
 80268d8:	807b      	strh	r3, [r7, #2]
    if(txt == NULL) return 0;
 80268da:	68fb      	ldr	r3, [r7, #12]
 80268dc:	2b00      	cmp	r3, #0
 80268de:	d101      	bne.n	80268e4 <lv_txt_get_width+0x18>
 80268e0:	2300      	movs	r3, #0
 80268e2:	e053      	b.n	802698c <lv_txt_get_width+0xc0>
    if(font == NULL) return 0;
 80268e4:	687b      	ldr	r3, [r7, #4]
 80268e6:	2b00      	cmp	r3, #0
 80268e8:	d101      	bne.n	80268ee <lv_txt_get_width+0x22>
 80268ea:	2300      	movs	r3, #0
 80268ec:	e04e      	b.n	802698c <lv_txt_get_width+0xc0>
    if(txt[0] == '\0') return 0;
 80268ee:	68fb      	ldr	r3, [r7, #12]
 80268f0:	781b      	ldrb	r3, [r3, #0]
 80268f2:	2b00      	cmp	r3, #0
 80268f4:	d101      	bne.n	80268fa <lv_txt_get_width+0x2e>
 80268f6:	2300      	movs	r3, #0
 80268f8:	e048      	b.n	802698c <lv_txt_get_width+0xc0>

    uint32_t i                   = 0;
 80268fa:	2300      	movs	r3, #0
 80268fc:	623b      	str	r3, [r7, #32]
    lv_coord_t width             = 0;
 80268fe:	2300      	movs	r3, #0
 8026900:	84fb      	strh	r3, [r7, #38]	; 0x26
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8026902:	2300      	movs	r3, #0
 8026904:	77fb      	strb	r3, [r7, #31]

    if(length != 0) {
 8026906:	68bb      	ldr	r3, [r7, #8]
 8026908:	2b00      	cmp	r3, #0
 802690a:	d03d      	beq.n	8026988 <lv_txt_get_width+0xbc>
        while(i < length) {
 802690c:	e02f      	b.n	802696e <lv_txt_get_width+0xa2>
            uint32_t letter;
            uint32_t letter_next;
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 802690e:	f107 0320 	add.w	r3, r7, #32
 8026912:	f107 0214 	add.w	r2, r7, #20
 8026916:	f107 0118 	add.w	r1, r7, #24
 802691a:	68f8      	ldr	r0, [r7, #12]
 802691c:	f000 f874 	bl	8026a08 <_lv_txt_encoded_letter_next_2>

            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8026920:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8026924:	f003 0301 	and.w	r3, r3, #1
 8026928:	2b00      	cmp	r3, #0
 802692a:	d00a      	beq.n	8026942 <lv_txt_get_width+0x76>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 802692c:	69ba      	ldr	r2, [r7, #24]
 802692e:	f107 031f 	add.w	r3, r7, #31
 8026932:	4611      	mov	r1, r2
 8026934:	4618      	mov	r0, r3
 8026936:	f000 f82d 	bl	8026994 <_lv_txt_is_cmd>
 802693a:	4603      	mov	r3, r0
 802693c:	2b00      	cmp	r3, #0
 802693e:	d000      	beq.n	8026942 <lv_txt_get_width+0x76>
 8026940:	e015      	b.n	802696e <lv_txt_get_width+0xa2>
                    continue;
                }
            }

            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8026942:	69bb      	ldr	r3, [r7, #24]
 8026944:	697a      	ldr	r2, [r7, #20]
 8026946:	4619      	mov	r1, r3
 8026948:	6878      	ldr	r0, [r7, #4]
 802694a:	f7fa fde7 	bl	802151c <lv_font_get_glyph_width>
 802694e:	4603      	mov	r3, r0
 8026950:	84bb      	strh	r3, [r7, #36]	; 0x24
            if(char_width > 0) {
 8026952:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8026956:	2b00      	cmp	r3, #0
 8026958:	dd09      	ble.n	802696e <lv_txt_get_width+0xa2>
                width += char_width;
 802695a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802695c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802695e:	4413      	add	r3, r2
 8026960:	b29b      	uxth	r3, r3
 8026962:	84fb      	strh	r3, [r7, #38]	; 0x26
                width += letter_space;
 8026964:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8026966:	887b      	ldrh	r3, [r7, #2]
 8026968:	4413      	add	r3, r2
 802696a:	b29b      	uxth	r3, r3
 802696c:	84fb      	strh	r3, [r7, #38]	; 0x26
        while(i < length) {
 802696e:	6a3b      	ldr	r3, [r7, #32]
 8026970:	68ba      	ldr	r2, [r7, #8]
 8026972:	429a      	cmp	r2, r3
 8026974:	d8cb      	bhi.n	802690e <lv_txt_get_width+0x42>
            }
        }

        if(width > 0) {
 8026976:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 802697a:	2b00      	cmp	r3, #0
 802697c:	dd04      	ble.n	8026988 <lv_txt_get_width+0xbc>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 802697e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8026980:	887b      	ldrh	r3, [r7, #2]
 8026982:	1ad3      	subs	r3, r2, r3
 8026984:	b29b      	uxth	r3, r3
 8026986:	84fb      	strh	r3, [r7, #38]	; 0x26
                                      aligned*/
        }
    }

    return width;
 8026988:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 802698c:	4618      	mov	r0, r3
 802698e:	3728      	adds	r7, #40	; 0x28
 8026990:	46bd      	mov	sp, r7
 8026992:	bd80      	pop	{r7, pc}

08026994 <_lv_txt_is_cmd>:

bool _lv_txt_is_cmd(lv_text_cmd_state_t * state, uint32_t c)
{
 8026994:	b480      	push	{r7}
 8026996:	b085      	sub	sp, #20
 8026998:	af00      	add	r7, sp, #0
 802699a:	6078      	str	r0, [r7, #4]
 802699c:	6039      	str	r1, [r7, #0]
    bool ret = false;
 802699e:	2300      	movs	r3, #0
 80269a0:	73fb      	strb	r3, [r7, #15]

    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80269a2:	2323      	movs	r3, #35	; 0x23
 80269a4:	461a      	mov	r2, r3
 80269a6:	683b      	ldr	r3, [r7, #0]
 80269a8:	4293      	cmp	r3, r2
 80269aa:	d11a      	bne.n	80269e2 <_lv_txt_is_cmd+0x4e>
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 80269ac:	687b      	ldr	r3, [r7, #4]
 80269ae:	781b      	ldrb	r3, [r3, #0]
 80269b0:	2b00      	cmp	r3, #0
 80269b2:	d105      	bne.n	80269c0 <_lv_txt_is_cmd+0x2c>
            *state = LV_TEXT_CMD_STATE_PAR;
 80269b4:	687b      	ldr	r3, [r7, #4]
 80269b6:	2201      	movs	r2, #1
 80269b8:	701a      	strb	r2, [r3, #0]
            ret    = true;
 80269ba:	2301      	movs	r3, #1
 80269bc:	73fb      	strb	r3, [r7, #15]
 80269be:	e010      	b.n	80269e2 <_lv_txt_is_cmd+0x4e>
        }
        /*Other start char in parameter is escaped cmd. char*/
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 80269c0:	687b      	ldr	r3, [r7, #4]
 80269c2:	781b      	ldrb	r3, [r3, #0]
 80269c4:	2b01      	cmp	r3, #1
 80269c6:	d103      	bne.n	80269d0 <_lv_txt_is_cmd+0x3c>
            *state = LV_TEXT_CMD_STATE_WAIT;
 80269c8:	687b      	ldr	r3, [r7, #4]
 80269ca:	2200      	movs	r2, #0
 80269cc:	701a      	strb	r2, [r3, #0]
 80269ce:	e008      	b.n	80269e2 <_lv_txt_is_cmd+0x4e>
        }
        /*Command end*/
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 80269d0:	687b      	ldr	r3, [r7, #4]
 80269d2:	781b      	ldrb	r3, [r3, #0]
 80269d4:	2b02      	cmp	r3, #2
 80269d6:	d104      	bne.n	80269e2 <_lv_txt_is_cmd+0x4e>
            *state = LV_TEXT_CMD_STATE_WAIT;
 80269d8:	687b      	ldr	r3, [r7, #4]
 80269da:	2200      	movs	r2, #0
 80269dc:	701a      	strb	r2, [r3, #0]
            ret    = true;
 80269de:	2301      	movs	r3, #1
 80269e0:	73fb      	strb	r3, [r7, #15]
        }
    }

    /*Skip the color parameter and wait the space after it*/
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 80269e2:	687b      	ldr	r3, [r7, #4]
 80269e4:	781b      	ldrb	r3, [r3, #0]
 80269e6:	2b01      	cmp	r3, #1
 80269e8:	d107      	bne.n	80269fa <_lv_txt_is_cmd+0x66>
        if(c == ' ') {
 80269ea:	683b      	ldr	r3, [r7, #0]
 80269ec:	2b20      	cmp	r3, #32
 80269ee:	d102      	bne.n	80269f6 <_lv_txt_is_cmd+0x62>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 80269f0:	687b      	ldr	r3, [r7, #4]
 80269f2:	2202      	movs	r2, #2
 80269f4:	701a      	strb	r2, [r3, #0]
        }
        ret = true;
 80269f6:	2301      	movs	r3, #1
 80269f8:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 80269fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80269fc:	4618      	mov	r0, r3
 80269fe:	3714      	adds	r7, #20
 8026a00:	46bd      	mov	sp, r7
 8026a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a06:	4770      	bx	lr

08026a08 <_lv_txt_encoded_letter_next_2>:

    return text;
}

void _lv_txt_encoded_letter_next_2(const char * txt, uint32_t * letter, uint32_t * letter_next, uint32_t * ofs)
{
 8026a08:	b580      	push	{r7, lr}
 8026a0a:	b084      	sub	sp, #16
 8026a0c:	af00      	add	r7, sp, #0
 8026a0e:	60f8      	str	r0, [r7, #12]
 8026a10:	60b9      	str	r1, [r7, #8]
 8026a12:	607a      	str	r2, [r7, #4]
 8026a14:	603b      	str	r3, [r7, #0]
    *letter = _lv_txt_encoded_next(txt, ofs);
 8026a16:	4b0f      	ldr	r3, [pc, #60]	; (8026a54 <_lv_txt_encoded_letter_next_2+0x4c>)
 8026a18:	681b      	ldr	r3, [r3, #0]
 8026a1a:	6839      	ldr	r1, [r7, #0]
 8026a1c:	68f8      	ldr	r0, [r7, #12]
 8026a1e:	4798      	blx	r3
 8026a20:	4602      	mov	r2, r0
 8026a22:	68bb      	ldr	r3, [r7, #8]
 8026a24:	601a      	str	r2, [r3, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8026a26:	68bb      	ldr	r3, [r7, #8]
 8026a28:	681b      	ldr	r3, [r3, #0]
 8026a2a:	2b00      	cmp	r3, #0
 8026a2c:	d00a      	beq.n	8026a44 <_lv_txt_encoded_letter_next_2+0x3c>
 8026a2e:	4b09      	ldr	r3, [pc, #36]	; (8026a54 <_lv_txt_encoded_letter_next_2+0x4c>)
 8026a30:	681b      	ldr	r3, [r3, #0]
 8026a32:	683a      	ldr	r2, [r7, #0]
 8026a34:	6812      	ldr	r2, [r2, #0]
 8026a36:	68f9      	ldr	r1, [r7, #12]
 8026a38:	440a      	add	r2, r1
 8026a3a:	2100      	movs	r1, #0
 8026a3c:	4610      	mov	r0, r2
 8026a3e:	4798      	blx	r3
 8026a40:	4603      	mov	r3, r0
 8026a42:	e000      	b.n	8026a46 <_lv_txt_encoded_letter_next_2+0x3e>
 8026a44:	2300      	movs	r3, #0
 8026a46:	687a      	ldr	r2, [r7, #4]
 8026a48:	6013      	str	r3, [r2, #0]
}
 8026a4a:	bf00      	nop
 8026a4c:	3710      	adds	r7, #16
 8026a4e:	46bd      	mov	sp, r7
 8026a50:	bd80      	pop	{r7, pc}
 8026a52:	bf00      	nop
 8026a54:	2000001c 	.word	0x2000001c

08026a58 <lv_txt_utf8_size>:
 * Give the size of an UTF-8 coded character
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4), 0 on invalid code.
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
 8026a58:	b480      	push	{r7}
 8026a5a:	b083      	sub	sp, #12
 8026a5c:	af00      	add	r7, sp, #0
 8026a5e:	6078      	str	r0, [r7, #4]
    if(LV_IS_ASCII(str[0]))
 8026a60:	687b      	ldr	r3, [r7, #4]
 8026a62:	781b      	ldrb	r3, [r3, #0]
 8026a64:	b25b      	sxtb	r3, r3
 8026a66:	2b00      	cmp	r3, #0
 8026a68:	db01      	blt.n	8026a6e <lv_txt_utf8_size+0x16>
        return 1;
 8026a6a:	2301      	movs	r3, #1
 8026a6c:	e018      	b.n	8026aa0 <lv_txt_utf8_size+0x48>
    else if(LV_IS_2BYTES_UTF8_CODE(str[0]))
 8026a6e:	687b      	ldr	r3, [r7, #4]
 8026a70:	781b      	ldrb	r3, [r3, #0]
 8026a72:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8026a76:	2bc0      	cmp	r3, #192	; 0xc0
 8026a78:	d101      	bne.n	8026a7e <lv_txt_utf8_size+0x26>
        return 2;
 8026a7a:	2302      	movs	r3, #2
 8026a7c:	e010      	b.n	8026aa0 <lv_txt_utf8_size+0x48>
    else if(LV_IS_3BYTES_UTF8_CODE(str[0]))
 8026a7e:	687b      	ldr	r3, [r7, #4]
 8026a80:	781b      	ldrb	r3, [r3, #0]
 8026a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8026a86:	2be0      	cmp	r3, #224	; 0xe0
 8026a88:	d101      	bne.n	8026a8e <lv_txt_utf8_size+0x36>
        return 3;
 8026a8a:	2303      	movs	r3, #3
 8026a8c:	e008      	b.n	8026aa0 <lv_txt_utf8_size+0x48>
    else if(LV_IS_4BYTES_UTF8_CODE(str[0]))
 8026a8e:	687b      	ldr	r3, [r7, #4]
 8026a90:	781b      	ldrb	r3, [r3, #0]
 8026a92:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026a96:	2bf0      	cmp	r3, #240	; 0xf0
 8026a98:	d101      	bne.n	8026a9e <lv_txt_utf8_size+0x46>
        return 4;
 8026a9a:	2304      	movs	r3, #4
 8026a9c:	e000      	b.n	8026aa0 <lv_txt_utf8_size+0x48>
    return 0;
 8026a9e:	2300      	movs	r3, #0
}
 8026aa0:	4618      	mov	r0, r3
 8026aa2:	370c      	adds	r7, #12
 8026aa4:	46bd      	mov	sp, r7
 8026aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026aaa:	4770      	bx	lr

08026aac <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 8026aac:	b480      	push	{r7}
 8026aae:	b085      	sub	sp, #20
 8026ab0:	af00      	add	r7, sp, #0
 8026ab2:	6078      	str	r0, [r7, #4]
 8026ab4:	6039      	str	r1, [r7, #0]
     * 00000000 00000000 00000yyy yyxxxxxx -> 110yyyyy 10xxxxxx
     * 00000000 00000000 zzzzyyyy yyxxxxxx -> 1110zzzz 10yyyyyy 10xxxxxx
     * 00000000 000wwwzz zzzzyyyy yyxxxxxx -> 11110www 10zzzzzz 10yyyyyy 10xxxxxx
     */

    uint32_t result = 0;
 8026ab6:	2300      	movs	r3, #0
 8026ab8:	60fb      	str	r3, [r7, #12]

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8026aba:	2300      	movs	r3, #0
 8026abc:	60bb      	str	r3, [r7, #8]
    if(i == NULL) i = &i_tmp;
 8026abe:	683b      	ldr	r3, [r7, #0]
 8026ac0:	2b00      	cmp	r3, #0
 8026ac2:	d102      	bne.n	8026aca <lv_txt_utf8_next+0x1e>
 8026ac4:	f107 0308 	add.w	r3, r7, #8
 8026ac8:	603b      	str	r3, [r7, #0]

    /*Normal ASCII*/
    if(LV_IS_ASCII(txt[*i])) {
 8026aca:	683b      	ldr	r3, [r7, #0]
 8026acc:	681b      	ldr	r3, [r3, #0]
 8026ace:	687a      	ldr	r2, [r7, #4]
 8026ad0:	4413      	add	r3, r2
 8026ad2:	781b      	ldrb	r3, [r3, #0]
 8026ad4:	b25b      	sxtb	r3, r3
 8026ad6:	2b00      	cmp	r3, #0
 8026ad8:	db0b      	blt.n	8026af2 <lv_txt_utf8_next+0x46>
        result = txt[*i];
 8026ada:	683b      	ldr	r3, [r7, #0]
 8026adc:	681b      	ldr	r3, [r3, #0]
 8026ade:	687a      	ldr	r2, [r7, #4]
 8026ae0:	4413      	add	r3, r2
 8026ae2:	781b      	ldrb	r3, [r3, #0]
 8026ae4:	60fb      	str	r3, [r7, #12]
        (*i)++;
 8026ae6:	683b      	ldr	r3, [r7, #0]
 8026ae8:	681b      	ldr	r3, [r3, #0]
 8026aea:	1c5a      	adds	r2, r3, #1
 8026aec:	683b      	ldr	r3, [r7, #0]
 8026aee:	601a      	str	r2, [r3, #0]
 8026af0:	e0ea      	b.n	8026cc8 <lv_txt_utf8_next+0x21c>
    }
    /*Real UTF-8 decode*/
    else {
        /*2 bytes UTF-8 code*/
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 8026af2:	683b      	ldr	r3, [r7, #0]
 8026af4:	681b      	ldr	r3, [r3, #0]
 8026af6:	687a      	ldr	r2, [r7, #4]
 8026af8:	4413      	add	r3, r2
 8026afa:	781b      	ldrb	r3, [r3, #0]
 8026afc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8026b00:	2bc0      	cmp	r3, #192	; 0xc0
 8026b02:	d128      	bne.n	8026b56 <lv_txt_utf8_next+0xaa>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8026b04:	683b      	ldr	r3, [r7, #0]
 8026b06:	681b      	ldr	r3, [r3, #0]
 8026b08:	687a      	ldr	r2, [r7, #4]
 8026b0a:	4413      	add	r3, r2
 8026b0c:	781b      	ldrb	r3, [r3, #0]
 8026b0e:	019b      	lsls	r3, r3, #6
 8026b10:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8026b14:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8026b16:	683b      	ldr	r3, [r7, #0]
 8026b18:	681b      	ldr	r3, [r3, #0]
 8026b1a:	1c5a      	adds	r2, r3, #1
 8026b1c:	683b      	ldr	r3, [r7, #0]
 8026b1e:	601a      	str	r2, [r3, #0]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8026b20:	683b      	ldr	r3, [r7, #0]
 8026b22:	681b      	ldr	r3, [r3, #0]
 8026b24:	687a      	ldr	r2, [r7, #4]
 8026b26:	4413      	add	r3, r2
 8026b28:	781b      	ldrb	r3, [r3, #0]
 8026b2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8026b2e:	2b80      	cmp	r3, #128	; 0x80
 8026b30:	d001      	beq.n	8026b36 <lv_txt_utf8_next+0x8a>
 8026b32:	2300      	movs	r3, #0
 8026b34:	e0c9      	b.n	8026cca <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 8026b36:	683b      	ldr	r3, [r7, #0]
 8026b38:	681b      	ldr	r3, [r3, #0]
 8026b3a:	687a      	ldr	r2, [r7, #4]
 8026b3c:	4413      	add	r3, r2
 8026b3e:	781b      	ldrb	r3, [r3, #0]
 8026b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8026b44:	68fa      	ldr	r2, [r7, #12]
 8026b46:	4413      	add	r3, r2
 8026b48:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8026b4a:	683b      	ldr	r3, [r7, #0]
 8026b4c:	681b      	ldr	r3, [r3, #0]
 8026b4e:	1c5a      	adds	r2, r3, #1
 8026b50:	683b      	ldr	r3, [r7, #0]
 8026b52:	601a      	str	r2, [r3, #0]
 8026b54:	e0b8      	b.n	8026cc8 <lv_txt_utf8_next+0x21c>
        }
        /*3 bytes UTF-8 code*/
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 8026b56:	683b      	ldr	r3, [r7, #0]
 8026b58:	681b      	ldr	r3, [r3, #0]
 8026b5a:	687a      	ldr	r2, [r7, #4]
 8026b5c:	4413      	add	r3, r2
 8026b5e:	781b      	ldrb	r3, [r3, #0]
 8026b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8026b64:	2be0      	cmp	r3, #224	; 0xe0
 8026b66:	d142      	bne.n	8026bee <lv_txt_utf8_next+0x142>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8026b68:	683b      	ldr	r3, [r7, #0]
 8026b6a:	681b      	ldr	r3, [r3, #0]
 8026b6c:	687a      	ldr	r2, [r7, #4]
 8026b6e:	4413      	add	r3, r2
 8026b70:	781b      	ldrb	r3, [r3, #0]
 8026b72:	031b      	lsls	r3, r3, #12
 8026b74:	b29b      	uxth	r3, r3
 8026b76:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8026b78:	683b      	ldr	r3, [r7, #0]
 8026b7a:	681b      	ldr	r3, [r3, #0]
 8026b7c:	1c5a      	adds	r2, r3, #1
 8026b7e:	683b      	ldr	r3, [r7, #0]
 8026b80:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8026b82:	683b      	ldr	r3, [r7, #0]
 8026b84:	681b      	ldr	r3, [r3, #0]
 8026b86:	687a      	ldr	r2, [r7, #4]
 8026b88:	4413      	add	r3, r2
 8026b8a:	781b      	ldrb	r3, [r3, #0]
 8026b8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8026b90:	2b80      	cmp	r3, #128	; 0x80
 8026b92:	d001      	beq.n	8026b98 <lv_txt_utf8_next+0xec>
 8026b94:	2300      	movs	r3, #0
 8026b96:	e098      	b.n	8026cca <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8026b98:	683b      	ldr	r3, [r7, #0]
 8026b9a:	681b      	ldr	r3, [r3, #0]
 8026b9c:	687a      	ldr	r2, [r7, #4]
 8026b9e:	4413      	add	r3, r2
 8026ba0:	781b      	ldrb	r3, [r3, #0]
 8026ba2:	019b      	lsls	r3, r3, #6
 8026ba4:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8026ba8:	68fa      	ldr	r2, [r7, #12]
 8026baa:	4413      	add	r3, r2
 8026bac:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8026bae:	683b      	ldr	r3, [r7, #0]
 8026bb0:	681b      	ldr	r3, [r3, #0]
 8026bb2:	1c5a      	adds	r2, r3, #1
 8026bb4:	683b      	ldr	r3, [r7, #0]
 8026bb6:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8026bb8:	683b      	ldr	r3, [r7, #0]
 8026bba:	681b      	ldr	r3, [r3, #0]
 8026bbc:	687a      	ldr	r2, [r7, #4]
 8026bbe:	4413      	add	r3, r2
 8026bc0:	781b      	ldrb	r3, [r3, #0]
 8026bc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8026bc6:	2b80      	cmp	r3, #128	; 0x80
 8026bc8:	d001      	beq.n	8026bce <lv_txt_utf8_next+0x122>
 8026bca:	2300      	movs	r3, #0
 8026bcc:	e07d      	b.n	8026cca <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 8026bce:	683b      	ldr	r3, [r7, #0]
 8026bd0:	681b      	ldr	r3, [r3, #0]
 8026bd2:	687a      	ldr	r2, [r7, #4]
 8026bd4:	4413      	add	r3, r2
 8026bd6:	781b      	ldrb	r3, [r3, #0]
 8026bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8026bdc:	68fa      	ldr	r2, [r7, #12]
 8026bde:	4413      	add	r3, r2
 8026be0:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8026be2:	683b      	ldr	r3, [r7, #0]
 8026be4:	681b      	ldr	r3, [r3, #0]
 8026be6:	1c5a      	adds	r2, r3, #1
 8026be8:	683b      	ldr	r3, [r7, #0]
 8026bea:	601a      	str	r2, [r3, #0]
 8026bec:	e06c      	b.n	8026cc8 <lv_txt_utf8_next+0x21c>
        }
        /*4 bytes UTF-8 code*/
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 8026bee:	683b      	ldr	r3, [r7, #0]
 8026bf0:	681b      	ldr	r3, [r3, #0]
 8026bf2:	687a      	ldr	r2, [r7, #4]
 8026bf4:	4413      	add	r3, r2
 8026bf6:	781b      	ldrb	r3, [r3, #0]
 8026bf8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026bfc:	2bf0      	cmp	r3, #240	; 0xf0
 8026bfe:	d15e      	bne.n	8026cbe <lv_txt_utf8_next+0x212>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8026c00:	683b      	ldr	r3, [r7, #0]
 8026c02:	681b      	ldr	r3, [r3, #0]
 8026c04:	687a      	ldr	r2, [r7, #4]
 8026c06:	4413      	add	r3, r2
 8026c08:	781b      	ldrb	r3, [r3, #0]
 8026c0a:	049b      	lsls	r3, r3, #18
 8026c0c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8026c10:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8026c12:	683b      	ldr	r3, [r7, #0]
 8026c14:	681b      	ldr	r3, [r3, #0]
 8026c16:	1c5a      	adds	r2, r3, #1
 8026c18:	683b      	ldr	r3, [r7, #0]
 8026c1a:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8026c1c:	683b      	ldr	r3, [r7, #0]
 8026c1e:	681b      	ldr	r3, [r3, #0]
 8026c20:	687a      	ldr	r2, [r7, #4]
 8026c22:	4413      	add	r3, r2
 8026c24:	781b      	ldrb	r3, [r3, #0]
 8026c26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8026c2a:	2b80      	cmp	r3, #128	; 0x80
 8026c2c:	d001      	beq.n	8026c32 <lv_txt_utf8_next+0x186>
 8026c2e:	2300      	movs	r3, #0
 8026c30:	e04b      	b.n	8026cca <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8026c32:	683b      	ldr	r3, [r7, #0]
 8026c34:	681b      	ldr	r3, [r3, #0]
 8026c36:	687a      	ldr	r2, [r7, #4]
 8026c38:	4413      	add	r3, r2
 8026c3a:	781b      	ldrb	r3, [r3, #0]
 8026c3c:	031b      	lsls	r3, r3, #12
 8026c3e:	f403 337c 	and.w	r3, r3, #258048	; 0x3f000
 8026c42:	68fa      	ldr	r2, [r7, #12]
 8026c44:	4413      	add	r3, r2
 8026c46:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8026c48:	683b      	ldr	r3, [r7, #0]
 8026c4a:	681b      	ldr	r3, [r3, #0]
 8026c4c:	1c5a      	adds	r2, r3, #1
 8026c4e:	683b      	ldr	r3, [r7, #0]
 8026c50:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8026c52:	683b      	ldr	r3, [r7, #0]
 8026c54:	681b      	ldr	r3, [r3, #0]
 8026c56:	687a      	ldr	r2, [r7, #4]
 8026c58:	4413      	add	r3, r2
 8026c5a:	781b      	ldrb	r3, [r3, #0]
 8026c5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8026c60:	2b80      	cmp	r3, #128	; 0x80
 8026c62:	d001      	beq.n	8026c68 <lv_txt_utf8_next+0x1bc>
 8026c64:	2300      	movs	r3, #0
 8026c66:	e030      	b.n	8026cca <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8026c68:	683b      	ldr	r3, [r7, #0]
 8026c6a:	681b      	ldr	r3, [r3, #0]
 8026c6c:	687a      	ldr	r2, [r7, #4]
 8026c6e:	4413      	add	r3, r2
 8026c70:	781b      	ldrb	r3, [r3, #0]
 8026c72:	019b      	lsls	r3, r3, #6
 8026c74:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8026c78:	68fa      	ldr	r2, [r7, #12]
 8026c7a:	4413      	add	r3, r2
 8026c7c:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8026c7e:	683b      	ldr	r3, [r7, #0]
 8026c80:	681b      	ldr	r3, [r3, #0]
 8026c82:	1c5a      	adds	r2, r3, #1
 8026c84:	683b      	ldr	r3, [r7, #0]
 8026c86:	601a      	str	r2, [r3, #0]

            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8026c88:	683b      	ldr	r3, [r7, #0]
 8026c8a:	681b      	ldr	r3, [r3, #0]
 8026c8c:	687a      	ldr	r2, [r7, #4]
 8026c8e:	4413      	add	r3, r2
 8026c90:	781b      	ldrb	r3, [r3, #0]
 8026c92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8026c96:	2b80      	cmp	r3, #128	; 0x80
 8026c98:	d001      	beq.n	8026c9e <lv_txt_utf8_next+0x1f2>
 8026c9a:	2300      	movs	r3, #0
 8026c9c:	e015      	b.n	8026cca <lv_txt_utf8_next+0x21e>
            result += txt[*i] & 0x3F;
 8026c9e:	683b      	ldr	r3, [r7, #0]
 8026ca0:	681b      	ldr	r3, [r3, #0]
 8026ca2:	687a      	ldr	r2, [r7, #4]
 8026ca4:	4413      	add	r3, r2
 8026ca6:	781b      	ldrb	r3, [r3, #0]
 8026ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8026cac:	68fa      	ldr	r2, [r7, #12]
 8026cae:	4413      	add	r3, r2
 8026cb0:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8026cb2:	683b      	ldr	r3, [r7, #0]
 8026cb4:	681b      	ldr	r3, [r3, #0]
 8026cb6:	1c5a      	adds	r2, r3, #1
 8026cb8:	683b      	ldr	r3, [r7, #0]
 8026cba:	601a      	str	r2, [r3, #0]
 8026cbc:	e004      	b.n	8026cc8 <lv_txt_utf8_next+0x21c>
        }
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
 8026cbe:	683b      	ldr	r3, [r7, #0]
 8026cc0:	681b      	ldr	r3, [r3, #0]
 8026cc2:	1c5a      	adds	r2, r3, #1
 8026cc4:	683b      	ldr	r3, [r7, #0]
 8026cc6:	601a      	str	r2, [r3, #0]
        }
    }
    return result;
 8026cc8:	68fb      	ldr	r3, [r7, #12]
}
 8026cca:	4618      	mov	r0, r3
 8026ccc:	3714      	adds	r7, #20
 8026cce:	46bd      	mov	sp, r7
 8026cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cd4:	4770      	bx	lr
	...

08026cd8 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
 8026cd8:	b580      	push	{r7, lr}
 8026cda:	b086      	sub	sp, #24
 8026cdc:	af00      	add	r7, sp, #0
 8026cde:	6078      	str	r0, [r7, #4]
 8026ce0:	6039      	str	r1, [r7, #0]
    uint8_t c_size;
    uint8_t cnt = 0;
 8026ce2:	2300      	movs	r3, #0
 8026ce4:	75fb      	strb	r3, [r7, #23]

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
 8026ce6:	683b      	ldr	r3, [r7, #0]
 8026ce8:	681b      	ldr	r3, [r3, #0]
 8026cea:	1e5a      	subs	r2, r3, #1
 8026cec:	683b      	ldr	r3, [r7, #0]
 8026cee:	601a      	str	r2, [r3, #0]
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8026cf0:	7dfb      	ldrb	r3, [r7, #23]
 8026cf2:	2b03      	cmp	r3, #3
 8026cf4:	d901      	bls.n	8026cfa <lv_txt_utf8_prev+0x22>
 8026cf6:	2300      	movs	r3, #0
 8026cf8:	e02a      	b.n	8026d50 <lv_txt_utf8_prev+0x78>

        c_size = _lv_txt_encoded_size(&txt[*i]);
 8026cfa:	4b17      	ldr	r3, [pc, #92]	; (8026d58 <lv_txt_utf8_prev+0x80>)
 8026cfc:	681b      	ldr	r3, [r3, #0]
 8026cfe:	683a      	ldr	r2, [r7, #0]
 8026d00:	6812      	ldr	r2, [r2, #0]
 8026d02:	6879      	ldr	r1, [r7, #4]
 8026d04:	440a      	add	r2, r1
 8026d06:	4610      	mov	r0, r2
 8026d08:	4798      	blx	r3
 8026d0a:	4603      	mov	r3, r0
 8026d0c:	75bb      	strb	r3, [r7, #22]
        if(c_size == 0) {
 8026d0e:	7dbb      	ldrb	r3, [r7, #22]
 8026d10:	2b00      	cmp	r3, #0
 8026d12:	d10b      	bne.n	8026d2c <lv_txt_utf8_prev+0x54>
            if(*i != 0)
 8026d14:	683b      	ldr	r3, [r7, #0]
 8026d16:	681b      	ldr	r3, [r3, #0]
 8026d18:	2b00      	cmp	r3, #0
 8026d1a:	d005      	beq.n	8026d28 <lv_txt_utf8_prev+0x50>
                (*i)--;
 8026d1c:	683b      	ldr	r3, [r7, #0]
 8026d1e:	681b      	ldr	r3, [r3, #0]
 8026d20:	1e5a      	subs	r2, r3, #1
 8026d22:	683b      	ldr	r3, [r7, #0]
 8026d24:	601a      	str	r2, [r3, #0]
 8026d26:	e001      	b.n	8026d2c <lv_txt_utf8_prev+0x54>
            else
                return 0;
 8026d28:	2300      	movs	r3, #0
 8026d2a:	e011      	b.n	8026d50 <lv_txt_utf8_prev+0x78>
        }
        cnt++;
 8026d2c:	7dfb      	ldrb	r3, [r7, #23]
 8026d2e:	3301      	adds	r3, #1
 8026d30:	75fb      	strb	r3, [r7, #23]
    } while(c_size == 0);
 8026d32:	7dbb      	ldrb	r3, [r7, #22]
 8026d34:	2b00      	cmp	r3, #0
 8026d36:	d0db      	beq.n	8026cf0 <lv_txt_utf8_prev+0x18>

    uint32_t i_tmp  = *i;
 8026d38:	683b      	ldr	r3, [r7, #0]
 8026d3a:	681b      	ldr	r3, [r3, #0]
 8026d3c:	60fb      	str	r3, [r7, #12]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8026d3e:	4b07      	ldr	r3, [pc, #28]	; (8026d5c <lv_txt_utf8_prev+0x84>)
 8026d40:	681b      	ldr	r3, [r3, #0]
 8026d42:	f107 020c 	add.w	r2, r7, #12
 8026d46:	4611      	mov	r1, r2
 8026d48:	6878      	ldr	r0, [r7, #4]
 8026d4a:	4798      	blx	r3
 8026d4c:	6138      	str	r0, [r7, #16]

    return letter;
 8026d4e:	693b      	ldr	r3, [r7, #16]
}
 8026d50:	4618      	mov	r0, r3
 8026d52:	3718      	adds	r7, #24
 8026d54:	46bd      	mov	sp, r7
 8026d56:	bd80      	pop	{r7, pc}
 8026d58:	20000018 	.word	0x20000018
 8026d5c:	2000001c 	.word	0x2000001c

08026d60 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8026d60:	b580      	push	{r7, lr}
 8026d62:	b086      	sub	sp, #24
 8026d64:	af00      	add	r7, sp, #0
 8026d66:	6078      	str	r0, [r7, #4]
 8026d68:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t byte_cnt = 0;
 8026d6a:	2300      	movs	r3, #0
 8026d6c:	613b      	str	r3, [r7, #16]
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8026d6e:	2300      	movs	r3, #0
 8026d70:	617b      	str	r3, [r7, #20]
 8026d72:	e014      	b.n	8026d9e <lv_txt_utf8_get_byte_id+0x3e>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8026d74:	4b11      	ldr	r3, [pc, #68]	; (8026dbc <lv_txt_utf8_get_byte_id+0x5c>)
 8026d76:	681b      	ldr	r3, [r3, #0]
 8026d78:	6879      	ldr	r1, [r7, #4]
 8026d7a:	693a      	ldr	r2, [r7, #16]
 8026d7c:	440a      	add	r2, r1
 8026d7e:	4610      	mov	r0, r2
 8026d80:	4798      	blx	r3
 8026d82:	4603      	mov	r3, r0
 8026d84:	73fb      	strb	r3, [r7, #15]
        /* If the char was invalid tell it's 1 byte long*/
        byte_cnt += c_size ? c_size : 1;
 8026d86:	7bfb      	ldrb	r3, [r7, #15]
 8026d88:	2b00      	cmp	r3, #0
 8026d8a:	d001      	beq.n	8026d90 <lv_txt_utf8_get_byte_id+0x30>
 8026d8c:	7bfb      	ldrb	r3, [r7, #15]
 8026d8e:	e000      	b.n	8026d92 <lv_txt_utf8_get_byte_id+0x32>
 8026d90:	2301      	movs	r3, #1
 8026d92:	693a      	ldr	r2, [r7, #16]
 8026d94:	4413      	add	r3, r2
 8026d96:	613b      	str	r3, [r7, #16]
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8026d98:	697b      	ldr	r3, [r7, #20]
 8026d9a:	3301      	adds	r3, #1
 8026d9c:	617b      	str	r3, [r7, #20]
 8026d9e:	697a      	ldr	r2, [r7, #20]
 8026da0:	683b      	ldr	r3, [r7, #0]
 8026da2:	429a      	cmp	r2, r3
 8026da4:	d205      	bcs.n	8026db2 <lv_txt_utf8_get_byte_id+0x52>
 8026da6:	687a      	ldr	r2, [r7, #4]
 8026da8:	693b      	ldr	r3, [r7, #16]
 8026daa:	4413      	add	r3, r2
 8026dac:	781b      	ldrb	r3, [r3, #0]
 8026dae:	2b00      	cmp	r3, #0
 8026db0:	d1e0      	bne.n	8026d74 <lv_txt_utf8_get_byte_id+0x14>
    }

    return byte_cnt;
 8026db2:	693b      	ldr	r3, [r7, #16]
}
 8026db4:	4618      	mov	r0, r3
 8026db6:	3718      	adds	r7, #24
 8026db8:	46bd      	mov	sp, r7
 8026dba:	bd80      	pop	{r7, pc}
 8026dbc:	20000018 	.word	0x20000018

08026dc0 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8026dc0:	b580      	push	{r7, lr}
 8026dc2:	b084      	sub	sp, #16
 8026dc4:	af00      	add	r7, sp, #0
 8026dc6:	6078      	str	r0, [r7, #4]
 8026dc8:	6039      	str	r1, [r7, #0]
    uint32_t i        = 0;
 8026dca:	2300      	movs	r3, #0
 8026dcc:	60bb      	str	r3, [r7, #8]
    uint32_t char_cnt = 0;
 8026dce:	2300      	movs	r3, #0
 8026dd0:	60fb      	str	r3, [r7, #12]

    while(i < byte_id) {
 8026dd2:	e009      	b.n	8026de8 <lv_txt_utf8_get_char_id+0x28>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8026dd4:	4b09      	ldr	r3, [pc, #36]	; (8026dfc <lv_txt_utf8_get_char_id+0x3c>)
 8026dd6:	681b      	ldr	r3, [r3, #0]
 8026dd8:	f107 0208 	add.w	r2, r7, #8
 8026ddc:	4611      	mov	r1, r2
 8026dde:	6878      	ldr	r0, [r7, #4]
 8026de0:	4798      	blx	r3
        char_cnt++;
 8026de2:	68fb      	ldr	r3, [r7, #12]
 8026de4:	3301      	adds	r3, #1
 8026de6:	60fb      	str	r3, [r7, #12]
    while(i < byte_id) {
 8026de8:	68bb      	ldr	r3, [r7, #8]
 8026dea:	683a      	ldr	r2, [r7, #0]
 8026dec:	429a      	cmp	r2, r3
 8026dee:	d8f1      	bhi.n	8026dd4 <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
 8026df0:	68fb      	ldr	r3, [r7, #12]
}
 8026df2:	4618      	mov	r0, r3
 8026df4:	3710      	adds	r7, #16
 8026df6:	46bd      	mov	sp, r7
 8026df8:	bd80      	pop	{r7, pc}
 8026dfa:	bf00      	nop
 8026dfc:	2000001c 	.word	0x2000001c

08026e00 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8026e00:	b580      	push	{r7, lr}
 8026e02:	b084      	sub	sp, #16
 8026e04:	af00      	add	r7, sp, #0
 8026e06:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 8026e08:	2300      	movs	r3, #0
 8026e0a:	60fb      	str	r3, [r7, #12]
    uint32_t i   = 0;
 8026e0c:	2300      	movs	r3, #0
 8026e0e:	60bb      	str	r3, [r7, #8]

    while(txt[i] != '\0') {
 8026e10:	e009      	b.n	8026e26 <lv_txt_utf8_get_length+0x26>
        _lv_txt_encoded_next(txt, &i);
 8026e12:	4b0a      	ldr	r3, [pc, #40]	; (8026e3c <lv_txt_utf8_get_length+0x3c>)
 8026e14:	681b      	ldr	r3, [r3, #0]
 8026e16:	f107 0208 	add.w	r2, r7, #8
 8026e1a:	4611      	mov	r1, r2
 8026e1c:	6878      	ldr	r0, [r7, #4]
 8026e1e:	4798      	blx	r3
        len++;
 8026e20:	68fb      	ldr	r3, [r7, #12]
 8026e22:	3301      	adds	r3, #1
 8026e24:	60fb      	str	r3, [r7, #12]
    while(txt[i] != '\0') {
 8026e26:	68bb      	ldr	r3, [r7, #8]
 8026e28:	687a      	ldr	r2, [r7, #4]
 8026e2a:	4413      	add	r3, r2
 8026e2c:	781b      	ldrb	r3, [r3, #0]
 8026e2e:	2b00      	cmp	r3, #0
 8026e30:	d1ef      	bne.n	8026e12 <lv_txt_utf8_get_length+0x12>
    }

    return len;
 8026e32:	68fb      	ldr	r3, [r7, #12]
}
 8026e34:	4618      	mov	r0, r3
 8026e36:	3710      	adds	r7, #16
 8026e38:	46bd      	mov	sp, r7
 8026e3a:	bd80      	pop	{r7, pc}
 8026e3c:	2000001c 	.word	0x2000001c

08026e40 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8026e40:	b580      	push	{r7, lr}
 8026e42:	b086      	sub	sp, #24
 8026e44:	af00      	add	r7, sp, #0
 8026e46:	60f8      	str	r0, [r7, #12]
 8026e48:	60b9      	str	r1, [r7, #8]
 8026e4a:	607a      	str	r2, [r7, #4]
 8026e4c:	603b      	str	r3, [r7, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8026e4e:	68bb      	ldr	r3, [r7, #8]
 8026e50:	617b      	str	r3, [r7, #20]
 8026e52:	e02d      	b.n	8026eb0 <_lv_utils_bsearch+0x70>
        middle += (n / 2) * size;
 8026e54:	687b      	ldr	r3, [r7, #4]
 8026e56:	085b      	lsrs	r3, r3, #1
 8026e58:	683a      	ldr	r2, [r7, #0]
 8026e5a:	fb02 f303 	mul.w	r3, r2, r3
 8026e5e:	697a      	ldr	r2, [r7, #20]
 8026e60:	4413      	add	r3, r2
 8026e62:	617b      	str	r3, [r7, #20]
        if((c = (*cmp)(key, middle)) > 0) {
 8026e64:	6a3b      	ldr	r3, [r7, #32]
 8026e66:	6979      	ldr	r1, [r7, #20]
 8026e68:	68f8      	ldr	r0, [r7, #12]
 8026e6a:	4798      	blx	r3
 8026e6c:	6138      	str	r0, [r7, #16]
 8026e6e:	693b      	ldr	r3, [r7, #16]
 8026e70:	2b00      	cmp	r3, #0
 8026e72:	dd12      	ble.n	8026e9a <_lv_utils_bsearch+0x5a>
            n    = (n / 2) - ((n & 1) == 0);
 8026e74:	687b      	ldr	r3, [r7, #4]
 8026e76:	085b      	lsrs	r3, r3, #1
 8026e78:	687a      	ldr	r2, [r7, #4]
 8026e7a:	f002 0201 	and.w	r2, r2, #1
 8026e7e:	2a00      	cmp	r2, #0
 8026e80:	bf0c      	ite	eq
 8026e82:	2201      	moveq	r2, #1
 8026e84:	2200      	movne	r2, #0
 8026e86:	b2d2      	uxtb	r2, r2
 8026e88:	1a9b      	subs	r3, r3, r2
 8026e8a:	607b      	str	r3, [r7, #4]
            base = (middle += size);
 8026e8c:	697a      	ldr	r2, [r7, #20]
 8026e8e:	683b      	ldr	r3, [r7, #0]
 8026e90:	4413      	add	r3, r2
 8026e92:	617b      	str	r3, [r7, #20]
 8026e94:	697b      	ldr	r3, [r7, #20]
 8026e96:	60bb      	str	r3, [r7, #8]
 8026e98:	e00a      	b.n	8026eb0 <_lv_utils_bsearch+0x70>
        }
        else if(c < 0) {
 8026e9a:	693b      	ldr	r3, [r7, #16]
 8026e9c:	2b00      	cmp	r3, #0
 8026e9e:	da05      	bge.n	8026eac <_lv_utils_bsearch+0x6c>
            n /= 2;
 8026ea0:	687b      	ldr	r3, [r7, #4]
 8026ea2:	085b      	lsrs	r3, r3, #1
 8026ea4:	607b      	str	r3, [r7, #4]
            middle = base;
 8026ea6:	68bb      	ldr	r3, [r7, #8]
 8026ea8:	617b      	str	r3, [r7, #20]
 8026eaa:	e001      	b.n	8026eb0 <_lv_utils_bsearch+0x70>
        }
        else {
            return (char *)middle;
 8026eac:	697b      	ldr	r3, [r7, #20]
 8026eae:	e003      	b.n	8026eb8 <_lv_utils_bsearch+0x78>
    for(middle = base; n != 0;) {
 8026eb0:	687b      	ldr	r3, [r7, #4]
 8026eb2:	2b00      	cmp	r3, #0
 8026eb4:	d1ce      	bne.n	8026e54 <_lv_utils_bsearch+0x14>
        }
    }
    return NULL;
 8026eb6:	2300      	movs	r3, #0
}
 8026eb8:	4618      	mov	r0, r3
 8026eba:	3718      	adds	r7, #24
 8026ebc:	46bd      	mov	sp, r7
 8026ebe:	bd80      	pop	{r7, pc}

08026ec0 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8026ec0:	b480      	push	{r7}
 8026ec2:	b083      	sub	sp, #12
 8026ec4:	af00      	add	r7, sp, #0
 8026ec6:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8026ec8:	687b      	ldr	r3, [r7, #4]
 8026eca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8026ece:	b29a      	uxth	r2, r3
 8026ed0:	687b      	ldr	r3, [r7, #4]
 8026ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8026ed6:	b29b      	uxth	r3, r3
 8026ed8:	1ad3      	subs	r3, r2, r3
 8026eda:	b29b      	uxth	r3, r3
 8026edc:	3301      	adds	r3, #1
 8026ede:	b29b      	uxth	r3, r3
 8026ee0:	b21b      	sxth	r3, r3
}
 8026ee2:	4618      	mov	r0, r3
 8026ee4:	370c      	adds	r7, #12
 8026ee6:	46bd      	mov	sp, r7
 8026ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026eec:	4770      	bx	lr

08026eee <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8026eee:	b480      	push	{r7}
 8026ef0:	b083      	sub	sp, #12
 8026ef2:	af00      	add	r7, sp, #0
 8026ef4:	6078      	str	r0, [r7, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8026ef6:	687b      	ldr	r3, [r7, #4]
 8026ef8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8026efc:	b29a      	uxth	r2, r3
 8026efe:	687b      	ldr	r3, [r7, #4]
 8026f00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8026f04:	b29b      	uxth	r3, r3
 8026f06:	1ad3      	subs	r3, r2, r3
 8026f08:	b29b      	uxth	r3, r3
 8026f0a:	3301      	adds	r3, #1
 8026f0c:	b29b      	uxth	r3, r3
 8026f0e:	b21b      	sxth	r3, r3
}
 8026f10:	4618      	mov	r0, r3
 8026f12:	370c      	adds	r7, #12
 8026f14:	46bd      	mov	sp, r7
 8026f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f1a:	4770      	bx	lr

08026f1c <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
 8026f1c:	b480      	push	{r7}
 8026f1e:	b083      	sub	sp, #12
 8026f20:	af00      	add	r7, sp, #0
 8026f22:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8026f24:	687b      	ldr	r3, [r7, #4]
 8026f26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 8026f2a:	4618      	mov	r0, r3
 8026f2c:	370c      	adds	r7, #12
 8026f2e:	46bd      	mov	sp, r7
 8026f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f34:	4770      	bx	lr

08026f36 <lv_anim_set_var>:
 * Set a variable to animate
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
 8026f36:	b480      	push	{r7}
 8026f38:	b083      	sub	sp, #12
 8026f3a:	af00      	add	r7, sp, #0
 8026f3c:	6078      	str	r0, [r7, #4]
 8026f3e:	6039      	str	r1, [r7, #0]
    a->var = var;
 8026f40:	687b      	ldr	r3, [r7, #4]
 8026f42:	683a      	ldr	r2, [r7, #0]
 8026f44:	601a      	str	r2, [r3, #0]
}
 8026f46:	bf00      	nop
 8026f48:	370c      	adds	r7, #12
 8026f4a:	46bd      	mov	sp, r7
 8026f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f50:	4770      	bx	lr

08026f52 <lv_anim_set_exec_cb>:
 * @param exec_cb   a function to execute during animation
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
 8026f52:	b480      	push	{r7}
 8026f54:	b083      	sub	sp, #12
 8026f56:	af00      	add	r7, sp, #0
 8026f58:	6078      	str	r0, [r7, #4]
 8026f5a:	6039      	str	r1, [r7, #0]
    a->exec_cb = exec_cb;
 8026f5c:	687b      	ldr	r3, [r7, #4]
 8026f5e:	683a      	ldr	r2, [r7, #0]
 8026f60:	605a      	str	r2, [r3, #4]
}
 8026f62:	bf00      	nop
 8026f64:	370c      	adds	r7, #12
 8026f66:	46bd      	mov	sp, r7
 8026f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f6c:	4770      	bx	lr

08026f6e <lv_anim_set_time>:
 * Set the duration of an animation
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param duration  duration of the animation in milliseconds
 */
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
{
 8026f6e:	b480      	push	{r7}
 8026f70:	b083      	sub	sp, #12
 8026f72:	af00      	add	r7, sp, #0
 8026f74:	6078      	str	r0, [r7, #4]
 8026f76:	6039      	str	r1, [r7, #0]
    a->time = duration;
 8026f78:	683a      	ldr	r2, [r7, #0]
 8026f7a:	687b      	ldr	r3, [r7, #4]
 8026f7c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8026f7e:	bf00      	nop
 8026f80:	370c      	adds	r7, #12
 8026f82:	46bd      	mov	sp, r7
 8026f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f88:	4770      	bx	lr

08026f8a <lv_anim_set_values>:
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
 8026f8a:	b480      	push	{r7}
 8026f8c:	b085      	sub	sp, #20
 8026f8e:	af00      	add	r7, sp, #0
 8026f90:	60f8      	str	r0, [r7, #12]
 8026f92:	60b9      	str	r1, [r7, #8]
 8026f94:	607a      	str	r2, [r7, #4]
    a->start_value = start;
 8026f96:	68fb      	ldr	r3, [r7, #12]
 8026f98:	68ba      	ldr	r2, [r7, #8]
 8026f9a:	621a      	str	r2, [r3, #32]
    a->current_value = start;
 8026f9c:	68fb      	ldr	r3, [r7, #12]
 8026f9e:	68ba      	ldr	r2, [r7, #8]
 8026fa0:	625a      	str	r2, [r3, #36]	; 0x24
    a->end_value = end;
 8026fa2:	68fb      	ldr	r3, [r7, #12]
 8026fa4:	687a      	ldr	r2, [r7, #4]
 8026fa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8026fa8:	bf00      	nop
 8026faa:	3714      	adds	r7, #20
 8026fac:	46bd      	mov	sp, r7
 8026fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fb2:	4770      	bx	lr

08026fb4 <lv_anim_set_playback_time>:
 * Make the animation to play back to when the forward direction is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param time      the duration of the playback animation in milliseconds. 0: disable playback
 */
static inline void lv_anim_set_playback_time(lv_anim_t * a, uint32_t time)
{
 8026fb4:	b480      	push	{r7}
 8026fb6:	b083      	sub	sp, #12
 8026fb8:	af00      	add	r7, sp, #0
 8026fba:	6078      	str	r0, [r7, #4]
 8026fbc:	6039      	str	r1, [r7, #0]
    a->playback_time = time;
 8026fbe:	687b      	ldr	r3, [r7, #4]
 8026fc0:	683a      	ldr	r2, [r7, #0]
 8026fc2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8026fc4:	bf00      	nop
 8026fc6:	370c      	adds	r7, #12
 8026fc8:	46bd      	mov	sp, r7
 8026fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fce:	4770      	bx	lr

08026fd0 <lv_anim_set_playback_delay>:
 * Make the animation to play back to when the forward direction is ready
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before starting the playback animation.
 */
static inline void lv_anim_set_playback_delay(lv_anim_t * a, uint32_t delay)
{
 8026fd0:	b480      	push	{r7}
 8026fd2:	b083      	sub	sp, #12
 8026fd4:	af00      	add	r7, sp, #0
 8026fd6:	6078      	str	r0, [r7, #4]
 8026fd8:	6039      	str	r1, [r7, #0]
    a->playback_delay = delay;
 8026fda:	687b      	ldr	r3, [r7, #4]
 8026fdc:	683a      	ldr	r2, [r7, #0]
 8026fde:	635a      	str	r2, [r3, #52]	; 0x34
}
 8026fe0:	bf00      	nop
 8026fe2:	370c      	adds	r7, #12
 8026fe4:	46bd      	mov	sp, r7
 8026fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fea:	4770      	bx	lr

08026fec <lv_anim_set_repeat_count>:
 * Make the animation repeat itself.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
 8026fec:	b480      	push	{r7}
 8026fee:	b083      	sub	sp, #12
 8026ff0:	af00      	add	r7, sp, #0
 8026ff2:	6078      	str	r0, [r7, #4]
 8026ff4:	460b      	mov	r3, r1
 8026ff6:	807b      	strh	r3, [r7, #2]
    a->repeat_cnt = cnt;
 8026ff8:	687b      	ldr	r3, [r7, #4]
 8026ffa:	887a      	ldrh	r2, [r7, #2]
 8026ffc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8027000:	bf00      	nop
 8027002:	370c      	adds	r7, #12
 8027004:	46bd      	mov	sp, r7
 8027006:	f85d 7b04 	ldr.w	r7, [sp], #4
 802700a:	4770      	bx	lr

0802700c <lv_anim_set_repeat_delay>:
 * Set a delay before repeating the animation.
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
 802700c:	b480      	push	{r7}
 802700e:	b083      	sub	sp, #12
 8027010:	af00      	add	r7, sp, #0
 8027012:	6078      	str	r0, [r7, #4]
 8027014:	6039      	str	r1, [r7, #0]
    a->repeat_delay = delay;
 8027016:	687b      	ldr	r3, [r7, #4]
 8027018:	683a      	ldr	r2, [r7, #0]
 802701a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 802701c:	bf00      	nop
 802701e:	370c      	adds	r7, #12
 8027020:	46bd      	mov	sp, r7
 8027022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027026:	4770      	bx	lr

08027028 <lv_bidi_calculate_align>:
 * @param align     For LV_TEXT_ALIGN_AUTO give LV_TEXT_ALIGN_LEFT else leave unchanged, write back the calculated align here
 * @param base_dir  Unused
 * @param txt       Unused
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
 8027028:	b480      	push	{r7}
 802702a:	b085      	sub	sp, #20
 802702c:	af00      	add	r7, sp, #0
 802702e:	60f8      	str	r0, [r7, #12]
 8027030:	60b9      	str	r1, [r7, #8]
 8027032:	607a      	str	r2, [r7, #4]
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8027034:	68fb      	ldr	r3, [r7, #12]
 8027036:	781b      	ldrb	r3, [r3, #0]
 8027038:	2b00      	cmp	r3, #0
 802703a:	d102      	bne.n	8027042 <lv_bidi_calculate_align+0x1a>
 802703c:	68fb      	ldr	r3, [r7, #12]
 802703e:	2201      	movs	r2, #1
 8027040:	701a      	strb	r2, [r3, #0]
}
 8027042:	bf00      	nop
 8027044:	3714      	adds	r7, #20
 8027046:	46bd      	mov	sp, r7
 8027048:	f85d 7b04 	ldr.w	r7, [sp], #4
 802704c:	4770      	bx	lr

0802704e <lv_obj_get_style_width>:
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
 802704e:	b580      	push	{r7, lr}
 8027050:	b084      	sub	sp, #16
 8027052:	af00      	add	r7, sp, #0
 8027054:	6078      	str	r0, [r7, #4]
 8027056:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8027058:	2201      	movs	r2, #1
 802705a:	6839      	ldr	r1, [r7, #0]
 802705c:	6878      	ldr	r0, [r7, #4]
 802705e:	f7e7 fcfb 	bl	800ea58 <lv_obj_get_style_prop>
 8027062:	4603      	mov	r3, r0
 8027064:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8027066:	68fb      	ldr	r3, [r7, #12]
 8027068:	b21b      	sxth	r3, r3
}
 802706a:	4618      	mov	r0, r3
 802706c:	3710      	adds	r7, #16
 802706e:	46bd      	mov	sp, r7
 8027070:	bd80      	pop	{r7, pc}

08027072 <lv_obj_get_style_pad_top>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
{
 8027072:	b580      	push	{r7, lr}
 8027074:	b084      	sub	sp, #16
 8027076:	af00      	add	r7, sp, #0
 8027078:	6078      	str	r0, [r7, #4]
 802707a:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802707c:	2210      	movs	r2, #16
 802707e:	6839      	ldr	r1, [r7, #0]
 8027080:	6878      	ldr	r0, [r7, #4]
 8027082:	f7e7 fce9 	bl	800ea58 <lv_obj_get_style_prop>
 8027086:	4603      	mov	r3, r0
 8027088:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 802708a:	68fb      	ldr	r3, [r7, #12]
 802708c:	b21b      	sxth	r3, r3
}
 802708e:	4618      	mov	r0, r3
 8027090:	3710      	adds	r7, #16
 8027092:	46bd      	mov	sp, r7
 8027094:	bd80      	pop	{r7, pc}

08027096 <lv_obj_get_style_pad_left>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
 8027096:	b580      	push	{r7, lr}
 8027098:	b084      	sub	sp, #16
 802709a:	af00      	add	r7, sp, #0
 802709c:	6078      	str	r0, [r7, #4]
 802709e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80270a0:	2212      	movs	r2, #18
 80270a2:	6839      	ldr	r1, [r7, #0]
 80270a4:	6878      	ldr	r0, [r7, #4]
 80270a6:	f7e7 fcd7 	bl	800ea58 <lv_obj_get_style_prop>
 80270aa:	4603      	mov	r3, r0
 80270ac:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 80270ae:	68fb      	ldr	r3, [r7, #12]
 80270b0:	b21b      	sxth	r3, r3
}
 80270b2:	4618      	mov	r0, r3
 80270b4:	3710      	adds	r7, #16
 80270b6:	46bd      	mov	sp, r7
 80270b8:	bd80      	pop	{r7, pc}

080270ba <lv_obj_get_style_bg_color>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
    return (lv_coord_t)v.num;
}

static inline lv_color_t lv_obj_get_style_bg_color(const struct _lv_obj_t * obj, uint32_t part)
{
 80270ba:	b580      	push	{r7, lr}
 80270bc:	b084      	sub	sp, #16
 80270be:	af00      	add	r7, sp, #0
 80270c0:	6078      	str	r0, [r7, #4]
 80270c2:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 80270c4:	2220      	movs	r2, #32
 80270c6:	6839      	ldr	r1, [r7, #0]
 80270c8:	6878      	ldr	r0, [r7, #4]
 80270ca:	f7e7 fcc5 	bl	800ea58 <lv_obj_get_style_prop>
 80270ce:	4603      	mov	r3, r0
 80270d0:	60fb      	str	r3, [r7, #12]
    return v.color;
 80270d2:	7b3b      	ldrb	r3, [r7, #12]
}
 80270d4:	4618      	mov	r0, r3
 80270d6:	3710      	adds	r7, #16
 80270d8:	46bd      	mov	sp, r7
 80270da:	bd80      	pop	{r7, pc}

080270dc <lv_obj_get_style_text_color_filtered>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR);
    return v.color;
}

static inline lv_color_t lv_obj_get_style_text_color_filtered(const struct _lv_obj_t * obj, uint32_t part)
{
 80270dc:	b580      	push	{r7, lr}
 80270de:	b084      	sub	sp, #16
 80270e0:	af00      	add	r7, sp, #0
 80270e2:	6078      	str	r0, [r7, #4]
 80270e4:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 80270e6:	2255      	movs	r2, #85	; 0x55
 80270e8:	6839      	ldr	r1, [r7, #0]
 80270ea:	6878      	ldr	r0, [r7, #4]
 80270ec:	f7e7 fcb4 	bl	800ea58 <lv_obj_get_style_prop>
 80270f0:	4603      	mov	r3, r0
 80270f2:	461a      	mov	r2, r3
 80270f4:	6839      	ldr	r1, [r7, #0]
 80270f6:	6878      	ldr	r0, [r7, #4]
 80270f8:	f7e7 fefa 	bl	800eef0 <_lv_obj_style_apply_color_filter>
 80270fc:	4603      	mov	r3, r0
 80270fe:	60fb      	str	r3, [r7, #12]
    return v.color;
 8027100:	7b3b      	ldrb	r3, [r7, #12]
}
 8027102:	4618      	mov	r0, r3
 8027104:	3710      	adds	r7, #16
 8027106:	46bd      	mov	sp, r7
 8027108:	bd80      	pop	{r7, pc}

0802710a <lv_obj_get_style_text_font>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
    return (lv_opa_t)v.num;
}

static inline const lv_font_t * lv_obj_get_style_text_font(const struct _lv_obj_t * obj, uint32_t part)
{
 802710a:	b580      	push	{r7, lr}
 802710c:	b084      	sub	sp, #16
 802710e:	af00      	add	r7, sp, #0
 8027110:	6078      	str	r0, [r7, #4]
 8027112:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8027114:	2257      	movs	r2, #87	; 0x57
 8027116:	6839      	ldr	r1, [r7, #0]
 8027118:	6878      	ldr	r0, [r7, #4]
 802711a:	f7e7 fc9d 	bl	800ea58 <lv_obj_get_style_prop>
 802711e:	4603      	mov	r3, r0
 8027120:	60fb      	str	r3, [r7, #12]
    return (const lv_font_t *)v.ptr;
 8027122:	68fb      	ldr	r3, [r7, #12]
}
 8027124:	4618      	mov	r0, r3
 8027126:	3710      	adds	r7, #16
 8027128:	46bd      	mov	sp, r7
 802712a:	bd80      	pop	{r7, pc}

0802712c <lv_obj_get_style_text_letter_space>:

static inline lv_coord_t lv_obj_get_style_text_letter_space(const struct _lv_obj_t * obj, uint32_t part)
{
 802712c:	b580      	push	{r7, lr}
 802712e:	b084      	sub	sp, #16
 8027130:	af00      	add	r7, sp, #0
 8027132:	6078      	str	r0, [r7, #4]
 8027134:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8027136:	2258      	movs	r2, #88	; 0x58
 8027138:	6839      	ldr	r1, [r7, #0]
 802713a:	6878      	ldr	r0, [r7, #4]
 802713c:	f7e7 fc8c 	bl	800ea58 <lv_obj_get_style_prop>
 8027140:	4603      	mov	r3, r0
 8027142:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8027144:	68fb      	ldr	r3, [r7, #12]
 8027146:	b21b      	sxth	r3, r3
}
 8027148:	4618      	mov	r0, r3
 802714a:	3710      	adds	r7, #16
 802714c:	46bd      	mov	sp, r7
 802714e:	bd80      	pop	{r7, pc}

08027150 <lv_obj_get_style_text_line_space>:

static inline lv_coord_t lv_obj_get_style_text_line_space(const struct _lv_obj_t * obj, uint32_t part)
{
 8027150:	b580      	push	{r7, lr}
 8027152:	b084      	sub	sp, #16
 8027154:	af00      	add	r7, sp, #0
 8027156:	6078      	str	r0, [r7, #4]
 8027158:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802715a:	2259      	movs	r2, #89	; 0x59
 802715c:	6839      	ldr	r1, [r7, #0]
 802715e:	6878      	ldr	r0, [r7, #4]
 8027160:	f7e7 fc7a 	bl	800ea58 <lv_obj_get_style_prop>
 8027164:	4603      	mov	r3, r0
 8027166:	60fb      	str	r3, [r7, #12]
    return (lv_coord_t)v.num;
 8027168:	68fb      	ldr	r3, [r7, #12]
 802716a:	b21b      	sxth	r3, r3
}
 802716c:	4618      	mov	r0, r3
 802716e:	3710      	adds	r7, #16
 8027170:	46bd      	mov	sp, r7
 8027172:	bd80      	pop	{r7, pc}

08027174 <lv_obj_get_style_anim>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
    return (lv_opa_t)v.num;
}

static inline const lv_anim_t * lv_obj_get_style_anim(const struct _lv_obj_t * obj, uint32_t part)
{
 8027174:	b580      	push	{r7, lr}
 8027176:	b084      	sub	sp, #16
 8027178:	af00      	add	r7, sp, #0
 802717a:	6078      	str	r0, [r7, #4]
 802717c:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 802717e:	2263      	movs	r2, #99	; 0x63
 8027180:	6839      	ldr	r1, [r7, #0]
 8027182:	6878      	ldr	r0, [r7, #4]
 8027184:	f7e7 fc68 	bl	800ea58 <lv_obj_get_style_prop>
 8027188:	4603      	mov	r3, r0
 802718a:	60fb      	str	r3, [r7, #12]
    return (const lv_anim_t *)v.ptr;
 802718c:	68fb      	ldr	r3, [r7, #12]
}
 802718e:	4618      	mov	r0, r3
 8027190:	3710      	adds	r7, #16
 8027192:	46bd      	mov	sp, r7
 8027194:	bd80      	pop	{r7, pc}

08027196 <lv_obj_get_style_anim_speed>:
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
    return (uint32_t)v.num;
}

static inline uint32_t lv_obj_get_style_anim_speed(const struct _lv_obj_t * obj, uint32_t part)
{
 8027196:	b580      	push	{r7, lr}
 8027198:	b084      	sub	sp, #16
 802719a:	af00      	add	r7, sp, #0
 802719c:	6078      	str	r0, [r7, #4]
 802719e:	6039      	str	r1, [r7, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 80271a0:	2265      	movs	r2, #101	; 0x65
 80271a2:	6839      	ldr	r1, [r7, #0]
 80271a4:	6878      	ldr	r0, [r7, #4]
 80271a6:	f7e7 fc57 	bl	800ea58 <lv_obj_get_style_prop>
 80271aa:	4603      	mov	r3, r0
 80271ac:	60fb      	str	r3, [r7, #12]
    return (uint32_t)v.num;
 80271ae:	68fb      	ldr	r3, [r7, #12]
}
 80271b0:	4618      	mov	r0, r3
 80271b2:	3710      	adds	r7, #16
 80271b4:	46bd      	mov	sp, r7
 80271b6:	bd80      	pop	{r7, pc}

080271b8 <lv_label_create>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

lv_obj_t * lv_label_create(lv_obj_t * parent)
{
 80271b8:	b580      	push	{r7, lr}
 80271ba:	b084      	sub	sp, #16
 80271bc:	af00      	add	r7, sp, #0
 80271be:	6078      	str	r0, [r7, #4]
    LV_LOG_INFO("begin");
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 80271c0:	6879      	ldr	r1, [r7, #4]
 80271c2:	4806      	ldr	r0, [pc, #24]	; (80271dc <lv_label_create+0x24>)
 80271c4:	f7e2 f81e 	bl	8009204 <lv_obj_class_create_obj>
 80271c8:	60f8      	str	r0, [r7, #12]
    lv_obj_class_init_obj(obj);
 80271ca:	68f8      	ldr	r0, [r7, #12]
 80271cc:	f7e2 f8cf 	bl	800936e <lv_obj_class_init_obj>
    return obj;
 80271d0:	68fb      	ldr	r3, [r7, #12]
}
 80271d2:	4618      	mov	r0, r3
 80271d4:	3710      	adds	r7, #16
 80271d6:	46bd      	mov	sp, r7
 80271d8:	bd80      	pop	{r7, pc}
 80271da:	bf00      	nop
 80271dc:	0802fbf8 	.word	0x0802fbf8

080271e0 <lv_label_set_text>:
/*=====================
 * Setter functions
 *====================*/

void lv_label_set_text(lv_obj_t * obj, const char * text)
{
 80271e0:	b590      	push	{r4, r7, lr}
 80271e2:	b085      	sub	sp, #20
 80271e4:	af00      	add	r7, sp, #0
 80271e6:	6078      	str	r0, [r7, #4]
 80271e8:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_label_t * label = (lv_label_t *)obj;
 80271ea:	687b      	ldr	r3, [r7, #4]
 80271ec:	60fb      	str	r3, [r7, #12]

    lv_obj_invalidate(obj);
 80271ee:	6878      	ldr	r0, [r7, #4]
 80271f0:	f7e4 fae9 	bl	800b7c6 <lv_obj_invalidate>

    /*If text is NULL then just refresh with the current text*/
    if(text == NULL) text = label->text;
 80271f4:	683b      	ldr	r3, [r7, #0]
 80271f6:	2b00      	cmp	r3, #0
 80271f8:	d102      	bne.n	8027200 <lv_label_set_text+0x20>
 80271fa:	68fb      	ldr	r3, [r7, #12]
 80271fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80271fe:	603b      	str	r3, [r7, #0]

    if(label->text == text && label->static_txt == 0) {
 8027200:	68fb      	ldr	r3, [r7, #12]
 8027202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027204:	683a      	ldr	r2, [r7, #0]
 8027206:	429a      	cmp	r2, r3
 8027208:	d121      	bne.n	802724e <lv_label_set_text+0x6e>
 802720a:	68fb      	ldr	r3, [r7, #12]
 802720c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8027210:	f003 0308 	and.w	r3, r3, #8
 8027214:	b2db      	uxtb	r3, r3
 8027216:	2b00      	cmp	r3, #0
 8027218:	d119      	bne.n	802724e <lv_label_set_text+0x6e>
        LV_ASSERT_MALLOC(label->text);
        if(label->text == NULL) return;

        _lv_txt_ap_proc(label->text, label->text);
#else
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 802721a:	68fb      	ldr	r3, [r7, #12]
 802721c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 802721e:	68fb      	ldr	r3, [r7, #12]
 8027220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027222:	4618      	mov	r0, r3
 8027224:	f7d9 f812 	bl	800024c <strlen>
 8027228:	4603      	mov	r3, r0
 802722a:	3301      	adds	r3, #1
 802722c:	4619      	mov	r1, r3
 802722e:	4620      	mov	r0, r4
 8027230:	f7fc febe 	bl	8023fb0 <lv_mem_realloc>
 8027234:	4602      	mov	r2, r0
 8027236:	68fb      	ldr	r3, [r7, #12]
 8027238:	625a      	str	r2, [r3, #36]	; 0x24
#endif

        LV_ASSERT_MALLOC(label->text);
 802723a:	68fb      	ldr	r3, [r7, #12]
 802723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802723e:	2b00      	cmp	r3, #0
 8027240:	d100      	bne.n	8027244 <lv_label_set_text+0x64>
 8027242:	e7fe      	b.n	8027242 <lv_label_set_text+0x62>
        if(label->text == NULL) return;
 8027244:	68fb      	ldr	r3, [r7, #12]
 8027246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027248:	2b00      	cmp	r3, #0
 802724a:	d136      	bne.n	80272ba <lv_label_set_text+0xda>
 802724c:	e03a      	b.n	80272c4 <lv_label_set_text+0xe4>
    }
    else {
        /*Free the old text*/
        if(label->text != NULL && label->static_txt == 0) {
 802724e:	68fb      	ldr	r3, [r7, #12]
 8027250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027252:	2b00      	cmp	r3, #0
 8027254:	d00f      	beq.n	8027276 <lv_label_set_text+0x96>
 8027256:	68fb      	ldr	r3, [r7, #12]
 8027258:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802725c:	f003 0308 	and.w	r3, r3, #8
 8027260:	b2db      	uxtb	r3, r3
 8027262:	2b00      	cmp	r3, #0
 8027264:	d107      	bne.n	8027276 <lv_label_set_text+0x96>
            lv_mem_free(label->text);
 8027266:	68fb      	ldr	r3, [r7, #12]
 8027268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802726a:	4618      	mov	r0, r3
 802726c:	f7fc fe72 	bl	8023f54 <lv_mem_free>
            label->text = NULL;
 8027270:	68fb      	ldr	r3, [r7, #12]
 8027272:	2200      	movs	r2, #0
 8027274:	625a      	str	r2, [r3, #36]	; 0x24
        if(label->text == NULL) return;

        _lv_txt_ap_proc(text, label->text);
#else
        /*Get the size of the text*/
        size_t len = strlen(text) + 1;
 8027276:	6838      	ldr	r0, [r7, #0]
 8027278:	f7d8 ffe8 	bl	800024c <strlen>
 802727c:	4603      	mov	r3, r0
 802727e:	3301      	adds	r3, #1
 8027280:	60bb      	str	r3, [r7, #8]

        /*Allocate space for the new text*/
        label->text = lv_mem_alloc(len);
 8027282:	68b8      	ldr	r0, [r7, #8]
 8027284:	f7fc fe36 	bl	8023ef4 <lv_mem_alloc>
 8027288:	4602      	mov	r2, r0
 802728a:	68fb      	ldr	r3, [r7, #12]
 802728c:	625a      	str	r2, [r3, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
 802728e:	68fb      	ldr	r3, [r7, #12]
 8027290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027292:	2b00      	cmp	r3, #0
 8027294:	d100      	bne.n	8027298 <lv_label_set_text+0xb8>
 8027296:	e7fe      	b.n	8027296 <lv_label_set_text+0xb6>
        if(label->text == NULL) return;
 8027298:	68fb      	ldr	r3, [r7, #12]
 802729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802729c:	2b00      	cmp	r3, #0
 802729e:	d010      	beq.n	80272c2 <lv_label_set_text+0xe2>
        strcpy(label->text, text);
 80272a0:	68fb      	ldr	r3, [r7, #12]
 80272a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80272a4:	6839      	ldr	r1, [r7, #0]
 80272a6:	4618      	mov	r0, r3
 80272a8:	f001 fb02 	bl	80288b0 <strcpy>
#endif

        /*Now the text is dynamically allocated*/
        label->static_txt = 0;
 80272ac:	68fa      	ldr	r2, [r7, #12]
 80272ae:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80272b2:	f36f 03c3 	bfc	r3, #3, #1
 80272b6:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    }

    lv_label_refr_text(obj);
 80272ba:	6878      	ldr	r0, [r7, #4]
 80272bc:	f000 fd62 	bl	8027d84 <lv_label_refr_text>
 80272c0:	e000      	b.n	80272c4 <lv_label_set_text+0xe4>
        if(label->text == NULL) return;
 80272c2:	bf00      	nop
}
 80272c4:	3714      	adds	r7, #20
 80272c6:	46bd      	mov	sp, r7
 80272c8:	bd90      	pop	{r4, r7, pc}
	...

080272cc <lv_label_set_long_mode>:

    lv_label_refr_text(obj);
}

void lv_label_set_long_mode(lv_obj_t * obj, lv_label_long_mode_t long_mode)
{
 80272cc:	b580      	push	{r7, lr}
 80272ce:	b084      	sub	sp, #16
 80272d0:	af00      	add	r7, sp, #0
 80272d2:	6078      	str	r0, [r7, #4]
 80272d4:	460b      	mov	r3, r1
 80272d6:	70fb      	strb	r3, [r7, #3]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_label_t * label = (lv_label_t *)obj;
 80272d8:	687b      	ldr	r3, [r7, #4]
 80272da:	60fb      	str	r3, [r7, #12]

    /*Delete the old animation (if exists)*/
    lv_anim_del(obj, set_ofs_x_anim);
 80272dc:	4924      	ldr	r1, [pc, #144]	; (8027370 <lv_label_set_long_mode+0xa4>)
 80272de:	6878      	ldr	r0, [r7, #4]
 80272e0:	f7fa ff6a 	bl	80221b8 <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 80272e4:	4923      	ldr	r1, [pc, #140]	; (8027374 <lv_label_set_long_mode+0xa8>)
 80272e6:	6878      	ldr	r0, [r7, #4]
 80272e8:	f7fa ff66 	bl	80221b8 <lv_anim_del>
    label->offset.x = 0;
 80272ec:	68fb      	ldr	r3, [r7, #12]
 80272ee:	2200      	movs	r2, #0
 80272f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    label->offset.y = 0;
 80272f4:	68fb      	ldr	r3, [r7, #12]
 80272f6:	2200      	movs	r2, #0
 80272f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 80272fc:	78fb      	ldrb	r3, [r7, #3]
 80272fe:	2b02      	cmp	r3, #2
 8027300:	d005      	beq.n	802730e <lv_label_set_long_mode+0x42>
 8027302:	78fb      	ldrb	r3, [r7, #3]
 8027304:	2b03      	cmp	r3, #3
 8027306:	d002      	beq.n	802730e <lv_label_set_long_mode+0x42>
 8027308:	78fb      	ldrb	r3, [r7, #3]
 802730a:	2b04      	cmp	r3, #4
 802730c:	d107      	bne.n	802731e <lv_label_set_long_mode+0x52>
        label->expand = 1;
 802730e:	68fa      	ldr	r2, [r7, #12]
 8027310:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8027314:	f043 0320 	orr.w	r3, r3, #32
 8027318:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 802731c:	e006      	b.n	802732c <lv_label_set_long_mode+0x60>
    else
        label->expand = 0;
 802731e:	68fa      	ldr	r2, [r7, #12]
 8027320:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8027324:	f36f 1345 	bfc	r3, #5, #1
 8027328:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48

    /*Restore the character under the dots*/
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 802732c:	68fb      	ldr	r3, [r7, #12]
 802732e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8027332:	f003 0307 	and.w	r3, r3, #7
 8027336:	b2db      	uxtb	r3, r3
 8027338:	2b01      	cmp	r3, #1
 802733a:	d107      	bne.n	802734c <lv_label_set_long_mode+0x80>
 802733c:	68fb      	ldr	r3, [r7, #12]
 802733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8027344:	d002      	beq.n	802734c <lv_label_set_long_mode+0x80>
        lv_label_revert_dots(obj);
 8027346:	6878      	ldr	r0, [r7, #4]
 8027348:	f001 f978 	bl	802863c <lv_label_revert_dots>
    }

    label->long_mode = long_mode;
 802734c:	78fb      	ldrb	r3, [r7, #3]
 802734e:	f003 0307 	and.w	r3, r3, #7
 8027352:	b2d9      	uxtb	r1, r3
 8027354:	68fa      	ldr	r2, [r7, #12]
 8027356:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 802735a:	f361 0302 	bfi	r3, r1, #0, #3
 802735e:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    lv_label_refr_text(obj);
 8027362:	6878      	ldr	r0, [r7, #4]
 8027364:	f000 fd0e 	bl	8027d84 <lv_label_refr_text>
}
 8027368:	bf00      	nop
 802736a:	3710      	adds	r7, #16
 802736c:	46bd      	mov	sp, r7
 802736e:	bd80      	pop	{r7, pc}
 8027370:	080287f1 	.word	0x080287f1
 8027374:	08028817 	.word	0x08028817

08027378 <lv_label_get_text>:
/*=====================
 * Getter functions
 *====================*/

char * lv_label_get_text(const lv_obj_t * obj)
{
 8027378:	b480      	push	{r7}
 802737a:	b085      	sub	sp, #20
 802737c:	af00      	add	r7, sp, #0
 802737e:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_label_t * label = (lv_label_t *)obj;
 8027380:	687b      	ldr	r3, [r7, #4]
 8027382:	60fb      	str	r3, [r7, #12]
    return label->text;
 8027384:	68fb      	ldr	r3, [r7, #12]
 8027386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8027388:	4618      	mov	r0, r3
 802738a:	3714      	adds	r7, #20
 802738c:	46bd      	mov	sp, r7
 802738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027392:	4770      	bx	lr

08027394 <lv_label_get_letter_on>:
    if(mutable_bidi_txt) lv_mem_buf_release(mutable_bidi_txt);
#endif
}

uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in)
{
 8027394:	b590      	push	{r4, r7, lr}
 8027396:	b09d      	sub	sp, #116	; 0x74
 8027398:	af02      	add	r7, sp, #8
 802739a:	6078      	str	r0, [r7, #4]
 802739c:	6039      	str	r1, [r7, #0]
    LV_ASSERT_OBJ(obj, MY_CLASS);
    LV_ASSERT_NULL(pos_in);
 802739e:	683b      	ldr	r3, [r7, #0]
 80273a0:	2b00      	cmp	r3, #0
 80273a2:	d100      	bne.n	80273a6 <lv_label_get_letter_on+0x12>
 80273a4:	e7fe      	b.n	80273a4 <lv_label_get_letter_on+0x10>
    lv_label_t * label = (lv_label_t *)obj;
 80273a6:	687b      	ldr	r3, [r7, #4]
 80273a8:	653b      	str	r3, [r7, #80]	; 0x50

    lv_point_t pos;
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80273aa:	683b      	ldr	r3, [r7, #0]
 80273ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80273b0:	b29c      	uxth	r4, r3
 80273b2:	2100      	movs	r1, #0
 80273b4:	6878      	ldr	r0, [r7, #4]
 80273b6:	f7ff fe6e 	bl	8027096 <lv_obj_get_style_pad_left>
 80273ba:	4603      	mov	r3, r0
 80273bc:	b29b      	uxth	r3, r3
 80273be:	1ae3      	subs	r3, r4, r3
 80273c0:	b29b      	uxth	r3, r3
 80273c2:	b21b      	sxth	r3, r3
 80273c4:	84bb      	strh	r3, [r7, #36]	; 0x24
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80273c6:	683b      	ldr	r3, [r7, #0]
 80273c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80273cc:	b29c      	uxth	r4, r3
 80273ce:	2100      	movs	r1, #0
 80273d0:	6878      	ldr	r0, [r7, #4]
 80273d2:	f7ff fe4e 	bl	8027072 <lv_obj_get_style_pad_top>
 80273d6:	4603      	mov	r3, r0
 80273d8:	b29b      	uxth	r3, r3
 80273da:	1ae3      	subs	r3, r4, r3
 80273dc:	b29b      	uxth	r3, r3
 80273de:	b21b      	sxth	r3, r3
 80273e0:	84fb      	strh	r3, [r7, #38]	; 0x26

    lv_area_t txt_coords;
    lv_obj_get_content_coords(obj, &txt_coords);
 80273e2:	f107 031c 	add.w	r3, r7, #28
 80273e6:	4619      	mov	r1, r3
 80273e8:	6878      	ldr	r0, [r7, #4]
 80273ea:	f7e3 fc93 	bl	800ad14 <lv_obj_get_content_coords>
    const char * txt         = lv_label_get_text(obj);
 80273ee:	6878      	ldr	r0, [r7, #4]
 80273f0:	f7ff ffc2 	bl	8027378 <lv_label_get_text>
 80273f4:	64f8      	str	r0, [r7, #76]	; 0x4c
    uint32_t line_start      = 0;
 80273f6:	2300      	movs	r3, #0
 80273f8:	667b      	str	r3, [r7, #100]	; 0x64
    uint32_t new_line_start  = 0;
 80273fa:	2300      	movs	r3, #0
 80273fc:	663b      	str	r3, [r7, #96]	; 0x60
    lv_coord_t max_w         = lv_area_get_width(&txt_coords);
 80273fe:	f107 031c 	add.w	r3, r7, #28
 8027402:	4618      	mov	r0, r3
 8027404:	f7ff fd5c 	bl	8026ec0 <lv_area_get_width>
 8027408:	4603      	mov	r3, r0
 802740a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 802740e:	2100      	movs	r1, #0
 8027410:	6878      	ldr	r0, [r7, #4]
 8027412:	f7ff fe7a 	bl	802710a <lv_obj_get_style_text_font>
 8027416:	6478      	str	r0, [r7, #68]	; 0x44
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8027418:	2100      	movs	r1, #0
 802741a:	6878      	ldr	r0, [r7, #4]
 802741c:	f7ff fe98 	bl	8027150 <lv_obj_get_style_text_line_space>
 8027420:	4603      	mov	r3, r0
 8027422:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8027426:	2100      	movs	r1, #0
 8027428:	6878      	ldr	r0, [r7, #4]
 802742a:	f7ff fe7f 	bl	802712c <lv_obj_get_style_text_letter_space>
 802742e:	4603      	mov	r3, r0
 8027430:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    lv_coord_t letter_height    = lv_font_get_line_height(font);
 8027434:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8027436:	f7ff fd71 	bl	8026f1c <lv_font_get_line_height>
 802743a:	4603      	mov	r3, r0
 802743c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    lv_coord_t y             = 0;
 802743e:	2300      	movs	r3, #0
 8027440:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    lv_text_flag_t flag       = LV_TEXT_FLAG_NONE;
 8027444:	2300      	movs	r3, #0
 8027446:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint32_t logical_pos;
    char * bidi_txt;

    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 802744a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802744c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8027450:	f003 0310 	and.w	r3, r3, #16
 8027454:	b2db      	uxtb	r3, r3
 8027456:	2b00      	cmp	r3, #0
 8027458:	d005      	beq.n	8027466 <lv_label_get_letter_on+0xd2>
 802745a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 802745e:	f043 0301 	orr.w	r3, r3, #1
 8027462:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8027466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027468:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802746c:	f003 0320 	and.w	r3, r3, #32
 8027470:	b2db      	uxtb	r3, r3
 8027472:	2b00      	cmp	r3, #0
 8027474:	d005      	beq.n	8027482 <lv_label_get_letter_on+0xee>
 8027476:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 802747a:	f043 0302 	orr.w	r3, r3, #2
 802747e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8027482:	2100      	movs	r1, #0
 8027484:	6878      	ldr	r0, [r7, #4]
 8027486:	f7ff fde2 	bl	802704e <lv_obj_get_style_width>
 802748a:	4603      	mov	r3, r0
 802748c:	461a      	mov	r2, r3
 802748e:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8027492:	429a      	cmp	r2, r3
 8027494:	d10d      	bne.n	80274b2 <lv_label_get_letter_on+0x11e>
 8027496:	687b      	ldr	r3, [r7, #4]
 8027498:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 802749c:	f003 0304 	and.w	r3, r3, #4
 80274a0:	b2db      	uxtb	r3, r3
 80274a2:	2b00      	cmp	r3, #0
 80274a4:	d105      	bne.n	80274b2 <lv_label_get_letter_on+0x11e>
 80274a6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80274aa:	f043 0304 	orr.w	r3, r3, #4
 80274ae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 80274b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80274b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80274b6:	461a      	mov	r2, r3
 80274b8:	2100      	movs	r1, #0
 80274ba:	6878      	ldr	r0, [r7, #4]
 80274bc:	f7e7 ff53 	bl	800f366 <lv_obj_calculate_style_text_align>
 80274c0:	4603      	mov	r3, r0
 80274c2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    /*Search the line of the index letter*/;
    while(txt[line_start] != '\0') {
 80274c6:	e041      	b.n	802754c <lv_label_get_letter_on+0x1b8>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80274c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80274ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80274cc:	18d0      	adds	r0, r2, r3
 80274ce:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 80274d2:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 80274d6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80274da:	9301      	str	r3, [sp, #4]
 80274dc:	2300      	movs	r3, #0
 80274de:	9300      	str	r3, [sp, #0]
 80274e0:	460b      	mov	r3, r1
 80274e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80274e4:	f7ff f914 	bl	8026710 <_lv_txt_get_next_line>
 80274e8:	4602      	mov	r2, r0
 80274ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80274ec:	4413      	add	r3, r2
 80274ee:	663b      	str	r3, [r7, #96]	; 0x60

        if(pos.y <= y + letter_height) {
 80274f0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80274f4:	4619      	mov	r1, r3
 80274f6:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 80274fa:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80274fe:	4413      	add	r3, r2
 8027500:	4299      	cmp	r1, r3
 8027502:	dc16      	bgt.n	8027532 <lv_label_get_letter_on+0x19e>
            /*The line is found (stored in 'line_start')*/
            /*Include the NULL terminator in the last line*/
            uint32_t tmp = new_line_start;
 8027504:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027506:	613b      	str	r3, [r7, #16]
            uint32_t letter;
            letter = _lv_txt_encoded_prev(txt, &tmp);
 8027508:	4b7c      	ldr	r3, [pc, #496]	; (80276fc <lv_label_get_letter_on+0x368>)
 802750a:	681b      	ldr	r3, [r3, #0]
 802750c:	f107 0210 	add.w	r2, r7, #16
 8027510:	4611      	mov	r1, r2
 8027512:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8027514:	4798      	blx	r3
 8027516:	63b8      	str	r0, [r7, #56]	; 0x38
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 8027518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802751a:	2b0a      	cmp	r3, #10
 802751c:	d01d      	beq.n	802755a <lv_label_get_letter_on+0x1c6>
 802751e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8027520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027522:	4413      	add	r3, r2
 8027524:	781b      	ldrb	r3, [r3, #0]
 8027526:	2b00      	cmp	r3, #0
 8027528:	d117      	bne.n	802755a <lv_label_get_letter_on+0x1c6>
 802752a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802752c:	3301      	adds	r3, #1
 802752e:	663b      	str	r3, [r7, #96]	; 0x60
            break;
 8027530:	e013      	b.n	802755a <lv_label_get_letter_on+0x1c6>
        }
        y += letter_height + line_space;
 8027532:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8027534:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8027538:	4413      	add	r3, r2
 802753a:	b29a      	uxth	r2, r3
 802753c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8027540:	4413      	add	r3, r2
 8027542:	b29b      	uxth	r3, r3
 8027544:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        line_start = new_line_start;
 8027548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802754a:	667b      	str	r3, [r7, #100]	; 0x64
    while(txt[line_start] != '\0') {
 802754c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802754e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8027550:	4413      	add	r3, r2
 8027552:	781b      	ldrb	r3, [r3, #0]
 8027554:	2b00      	cmp	r3, #0
 8027556:	d1b7      	bne.n	80274c8 <lv_label_get_letter_on+0x134>
 8027558:	e000      	b.n	802755c <lv_label_get_letter_on+0x1c8>
            break;
 802755a:	bf00      	nop
    bidi_txt = lv_mem_buf_get(new_line_start - line_start + 1);
    uint32_t txt_len = new_line_start - line_start;
    if(new_line_start > 0 && txt[new_line_start - 1] == '\0' && txt_len > 0) txt_len--;
    _lv_bidi_process_paragraph(txt + line_start, bidi_txt, txt_len, lv_obj_get_style_base_dir(obj, LV_PART_MAIN), NULL, 0);
#else
    bidi_txt = (char *)txt + line_start;
 802755c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802755e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8027560:	4413      	add	r3, r2
 8027562:	637b      	str	r3, [r7, #52]	; 0x34
#endif

    /*Calculate the x coordinate*/
    lv_coord_t x = 0;
 8027564:	2300      	movs	r3, #0
 8027566:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    if(align == LV_TEXT_ALIGN_CENTER) {
 802756a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 802756e:	2b02      	cmp	r3, #2
 8027570:	d12a      	bne.n	80275c8 <lv_label_get_letter_on+0x234>
        lv_coord_t line_w;
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8027572:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8027574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8027576:	1ad1      	subs	r1, r2, r3
 8027578:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 802757c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8027580:	9300      	str	r3, [sp, #0]
 8027582:	4613      	mov	r3, r2
 8027584:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8027586:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8027588:	f7ff f9a0 	bl	80268cc <lv_txt_get_width>
 802758c:	4603      	mov	r3, r0
 802758e:	863b      	strh	r3, [r7, #48]	; 0x30
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 8027590:	f107 031c 	add.w	r3, r7, #28
 8027594:	4618      	mov	r0, r3
 8027596:	f7ff fc93 	bl	8026ec0 <lv_area_get_width>
 802759a:	4603      	mov	r3, r0
 802759c:	2b00      	cmp	r3, #0
 802759e:	da00      	bge.n	80275a2 <lv_label_get_letter_on+0x20e>
 80275a0:	3301      	adds	r3, #1
 80275a2:	105b      	asrs	r3, r3, #1
 80275a4:	b21b      	sxth	r3, r3
 80275a6:	461a      	mov	r2, r3
 80275a8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80275ac:	2b00      	cmp	r3, #0
 80275ae:	da00      	bge.n	80275b2 <lv_label_get_letter_on+0x21e>
 80275b0:	3301      	adds	r3, #1
 80275b2:	105b      	asrs	r3, r3, #1
 80275b4:	b21b      	sxth	r3, r3
 80275b6:	1ad3      	subs	r3, r2, r3
 80275b8:	b29a      	uxth	r2, r3
 80275ba:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80275be:	4413      	add	r3, r2
 80275c0:	b29b      	uxth	r3, r3
 80275c2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80275c6:	e023      	b.n	8027610 <lv_label_get_letter_on+0x27c>
    }
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 80275c8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80275cc:	2b03      	cmp	r3, #3
 80275ce:	d11f      	bne.n	8027610 <lv_label_get_letter_on+0x27c>
        lv_coord_t line_w;
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 80275d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80275d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80275d4:	1ad1      	subs	r1, r2, r3
 80275d6:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 80275da:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80275de:	9300      	str	r3, [sp, #0]
 80275e0:	4613      	mov	r3, r2
 80275e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80275e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80275e6:	f7ff f971 	bl	80268cc <lv_txt_get_width>
 80275ea:	4603      	mov	r3, r0
 80275ec:	867b      	strh	r3, [r7, #50]	; 0x32
        x += lv_area_get_width(&txt_coords) - line_w;
 80275ee:	f107 031c 	add.w	r3, r7, #28
 80275f2:	4618      	mov	r0, r3
 80275f4:	f7ff fc64 	bl	8026ec0 <lv_area_get_width>
 80275f8:	4603      	mov	r3, r0
 80275fa:	461a      	mov	r2, r3
 80275fc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8027600:	1ad3      	subs	r3, r2, r3
 8027602:	b29a      	uxth	r2, r3
 8027604:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8027608:	4413      	add	r3, r2
 802760a:	b29b      	uxth	r3, r3
 802760c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    }

    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8027610:	2300      	movs	r3, #0
 8027612:	76fb      	strb	r3, [r7, #27]

    uint32_t i = 0;
 8027614:	2300      	movs	r3, #0
 8027616:	617b      	str	r3, [r7, #20]
    uint32_t i_act = i;
 8027618:	697b      	ldr	r3, [r7, #20]
 802761a:	657b      	str	r3, [r7, #84]	; 0x54

    if(new_line_start > 0) {
 802761c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802761e:	2b00      	cmp	r3, #0
 8027620:	d058      	beq.n	80276d4 <lv_label_get_letter_on+0x340>
        while(i + line_start < new_line_start) {
 8027622:	e051      	b.n	80276c8 <lv_label_get_letter_on+0x334>
            /*Get the current letter and the next letter for kerning*/
            /*Be careful 'i' already points to the next character*/
            uint32_t letter;
            uint32_t letter_next;
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 8027624:	f107 0314 	add.w	r3, r7, #20
 8027628:	f107 0208 	add.w	r2, r7, #8
 802762c:	f107 010c 	add.w	r1, r7, #12
 8027630:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8027632:	f7ff f9e9 	bl	8026a08 <_lv_txt_encoded_letter_next_2>

            /*Handle the recolor command*/
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8027636:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 802763a:	f003 0301 	and.w	r3, r3, #1
 802763e:	2b00      	cmp	r3, #0
 8027640:	d00e      	beq.n	8027660 <lv_label_get_letter_on+0x2cc>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 8027642:	697b      	ldr	r3, [r7, #20]
 8027644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8027646:	4413      	add	r3, r2
 8027648:	781b      	ldrb	r3, [r3, #0]
 802764a:	461a      	mov	r2, r3
 802764c:	f107 031b 	add.w	r3, r7, #27
 8027650:	4611      	mov	r1, r2
 8027652:	4618      	mov	r0, r3
 8027654:	f7ff f99e 	bl	8026994 <_lv_txt_is_cmd>
 8027658:	4603      	mov	r3, r0
 802765a:	2b00      	cmp	r3, #0
 802765c:	d000      	beq.n	8027660 <lv_label_get_letter_on+0x2cc>
 802765e:	e033      	b.n	80276c8 <lv_label_get_letter_on+0x334>
                    continue; /*Skip the letter if it is part of a command*/
                }
            }

            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 8027660:	68fb      	ldr	r3, [r7, #12]
 8027662:	68ba      	ldr	r2, [r7, #8]
 8027664:	4619      	mov	r1, r3
 8027666:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8027668:	f7f9 ff58 	bl	802151c <lv_font_get_glyph_width>
 802766c:	4603      	mov	r3, r0
 802766e:	85fb      	strh	r3, [r7, #46]	; 0x2e

            /*Finish if the x position or the last char of the next line is reached*/
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 8027670:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8027674:	4619      	mov	r1, r3
 8027676:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 802767a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 802767e:	4413      	add	r3, r2
 8027680:	4299      	cmp	r1, r3
 8027682:	db0d      	blt.n	80276a0 <lv_label_get_letter_on+0x30c>
 8027684:	697a      	ldr	r2, [r7, #20]
 8027686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8027688:	4413      	add	r3, r2
 802768a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802768c:	429a      	cmp	r2, r3
 802768e:	d007      	beq.n	80276a0 <lv_label_get_letter_on+0x30c>
 8027690:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8027694:	4413      	add	r3, r2
 8027696:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8027698:	4413      	add	r3, r2
 802769a:	781b      	ldrb	r3, [r3, #0]
 802769c:	2b00      	cmp	r3, #0
 802769e:	d102      	bne.n	80276a6 <lv_label_get_letter_on+0x312>
                i = i_act;
 80276a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80276a2:	617b      	str	r3, [r7, #20]
 80276a4:	e016      	b.n	80276d4 <lv_label_get_letter_on+0x340>
                break;
            }
            x += gw;
 80276a6:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80276aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80276ac:	4413      	add	r3, r2
 80276ae:	b29b      	uxth	r3, r3
 80276b0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            x += letter_space;
 80276b4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80276b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80276bc:	4413      	add	r3, r2
 80276be:	b29b      	uxth	r3, r3
 80276c0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            i_act = i;
 80276c4:	697b      	ldr	r3, [r7, #20]
 80276c6:	657b      	str	r3, [r7, #84]	; 0x54
        while(i + line_start < new_line_start) {
 80276c8:	697a      	ldr	r2, [r7, #20]
 80276ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80276cc:	4413      	add	r3, r2
 80276ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80276d0:	429a      	cmp	r2, r3
 80276d2:	d8a7      	bhi.n	8027624 <lv_label_get_letter_on+0x290>
                                               txt_len, lv_obj_get_style_base_dir(obj, LV_PART_MAIN), cid, &is_rtl);
        if(is_rtl) logical_pos++;
    }
    lv_mem_buf_release(bidi_txt);
#else
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 80276d4:	4b0a      	ldr	r3, [pc, #40]	; (8027700 <lv_label_get_letter_on+0x36c>)
 80276d6:	681b      	ldr	r3, [r3, #0]
 80276d8:	697a      	ldr	r2, [r7, #20]
 80276da:	4611      	mov	r1, r2
 80276dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80276de:	4798      	blx	r3
 80276e0:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 80276e2:	4b07      	ldr	r3, [pc, #28]	; (8027700 <lv_label_get_letter_on+0x36c>)
 80276e4:	681b      	ldr	r3, [r3, #0]
 80276e6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80276e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80276ea:	4798      	blx	r3
 80276ec:	4602      	mov	r2, r0
 80276ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80276f0:	4413      	add	r3, r2
}
 80276f2:	4618      	mov	r0, r3
 80276f4:	376c      	adds	r7, #108	; 0x6c
 80276f6:	46bd      	mov	sp, r7
 80276f8:	bd90      	pop	{r4, r7, pc}
 80276fa:	bf00      	nop
 80276fc:	20000020 	.word	0x20000020
 8027700:	20000028 	.word	0x20000028

08027704 <lv_label_get_text_selection_start>:
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
}

uint32_t lv_label_get_text_selection_start(const lv_obj_t * obj)
{
 8027704:	b480      	push	{r7}
 8027706:	b085      	sub	sp, #20
 8027708:	af00      	add	r7, sp, #0
 802770a:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

#if LV_LABEL_TEXT_SELECTION
    lv_label_t * label = (lv_label_t *)obj;
 802770c:	687b      	ldr	r3, [r7, #4]
 802770e:	60fb      	str	r3, [r7, #12]
    return label->sel_start;
 8027710:	68fb      	ldr	r3, [r7, #12]
 8027712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c

#else
    LV_UNUSED(obj); /*Unused*/
    return LV_LABEL_TEXT_SELECTION_OFF;
#endif
}
 8027714:	4618      	mov	r0, r3
 8027716:	3714      	adds	r7, #20
 8027718:	46bd      	mov	sp, r7
 802771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802771e:	4770      	bx	lr

08027720 <lv_label_get_text_selection_end>:

uint32_t lv_label_get_text_selection_end(const lv_obj_t * obj)
{
 8027720:	b480      	push	{r7}
 8027722:	b085      	sub	sp, #20
 8027724:	af00      	add	r7, sp, #0
 8027726:	6078      	str	r0, [r7, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

#if LV_LABEL_TEXT_SELECTION
    lv_label_t * label = (lv_label_t *)obj;
 8027728:	687b      	ldr	r3, [r7, #4]
 802772a:	60fb      	str	r3, [r7, #12]
    return label->sel_end;
 802772c:	68fb      	ldr	r3, [r7, #12]
 802772e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#else
    LV_UNUSED(obj); /*Unused*/
    return LV_LABEL_TEXT_SELECTION_OFF;
#endif
}
 8027730:	4618      	mov	r0, r3
 8027732:	3714      	adds	r7, #20
 8027734:	46bd      	mov	sp, r7
 8027736:	f85d 7b04 	ldr.w	r7, [sp], #4
 802773a:	4770      	bx	lr

0802773c <lv_label_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_label_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 802773c:	b580      	push	{r7, lr}
 802773e:	b084      	sub	sp, #16
 8027740:	af00      	add	r7, sp, #0
 8027742:	6078      	str	r0, [r7, #4]
 8027744:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_label_t * label = (lv_label_t *)obj;
 8027746:	683b      	ldr	r3, [r7, #0]
 8027748:	60fb      	str	r3, [r7, #12]

    label->text       = NULL;
 802774a:	68fb      	ldr	r3, [r7, #12]
 802774c:	2200      	movs	r2, #0
 802774e:	625a      	str	r2, [r3, #36]	; 0x24
    label->static_txt = 0;
 8027750:	68fa      	ldr	r2, [r7, #12]
 8027752:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8027756:	f36f 03c3 	bfc	r3, #3, #1
 802775a:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    label->recolor    = 0;
 802775e:	68fa      	ldr	r2, [r7, #12]
 8027760:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8027764:	f36f 1304 	bfc	r3, #4, #1
 8027768:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    label->dot_end    = LV_LABEL_DOT_END_INV;
 802776c:	68fb      	ldr	r3, [r7, #12]
 802776e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8027772:	62da      	str	r2, [r3, #44]	; 0x2c
    label->long_mode  = LV_LABEL_LONG_WRAP;
 8027774:	68fa      	ldr	r2, [r7, #12]
 8027776:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 802777a:	f36f 0302 	bfc	r3, #0, #3
 802777e:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    label->offset.x = 0;
 8027782:	68fb      	ldr	r3, [r7, #12]
 8027784:	2200      	movs	r2, #0
 8027786:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    label->offset.y = 0;
 802778a:	68fb      	ldr	r3, [r7, #12]
 802778c:	2200      	movs	r2, #0
 802778e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if LV_LABEL_LONG_TXT_HINT
    label->hint.line_start = -1;
 8027792:	68fb      	ldr	r3, [r7, #12]
 8027794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8027798:	631a      	str	r2, [r3, #48]	; 0x30
    label->hint.coord_y    = 0;
 802779a:	68fb      	ldr	r3, [r7, #12]
 802779c:	2200      	movs	r2, #0
 802779e:	639a      	str	r2, [r3, #56]	; 0x38
    label->hint.y          = 0;
 80277a0:	68fb      	ldr	r3, [r7, #12]
 80277a2:	2200      	movs	r2, #0
 80277a4:	635a      	str	r2, [r3, #52]	; 0x34
#endif

#if LV_LABEL_TEXT_SELECTION
    label->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 80277a6:	68fb      	ldr	r3, [r7, #12]
 80277a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80277ac:	63da      	str	r2, [r3, #60]	; 0x3c
    label->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 80277ae:	68fb      	ldr	r3, [r7, #12]
 80277b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80277b4:	641a      	str	r2, [r3, #64]	; 0x40
#endif
    label->dot.tmp_ptr   = NULL;
 80277b6:	68fb      	ldr	r3, [r7, #12]
 80277b8:	2200      	movs	r2, #0
 80277ba:	629a      	str	r2, [r3, #40]	; 0x28
    label->dot_tmp_alloc = 0;
 80277bc:	68fa      	ldr	r2, [r7, #12]
 80277be:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80277c2:	f36f 1386 	bfc	r3, #6, #1
 80277c6:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80277ca:	2102      	movs	r1, #2
 80277cc:	6838      	ldr	r0, [r7, #0]
 80277ce:	f7e0 fb6d 	bl	8007eac <lv_obj_clear_flag>
    lv_label_set_long_mode(obj, LV_LABEL_LONG_WRAP);
 80277d2:	2100      	movs	r1, #0
 80277d4:	6838      	ldr	r0, [r7, #0]
 80277d6:	f7ff fd79 	bl	80272cc <lv_label_set_long_mode>
    lv_label_set_text(obj, "Text");
 80277da:	4904      	ldr	r1, [pc, #16]	; (80277ec <lv_label_constructor+0xb0>)
 80277dc:	6838      	ldr	r0, [r7, #0]
 80277de:	f7ff fcff 	bl	80271e0 <lv_label_set_text>


    LV_TRACE_OBJ_CREATE("finished");
}
 80277e2:	bf00      	nop
 80277e4:	3710      	adds	r7, #16
 80277e6:	46bd      	mov	sp, r7
 80277e8:	bd80      	pop	{r7, pc}
 80277ea:	bf00      	nop
 80277ec:	08028910 	.word	0x08028910

080277f0 <lv_label_destructor>:

static void lv_label_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80277f0:	b580      	push	{r7, lr}
 80277f2:	b084      	sub	sp, #16
 80277f4:	af00      	add	r7, sp, #0
 80277f6:	6078      	str	r0, [r7, #4]
 80277f8:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);
    lv_label_t * label = (lv_label_t *)obj;
 80277fa:	683b      	ldr	r3, [r7, #0]
 80277fc:	60fb      	str	r3, [r7, #12]

    lv_label_dot_tmp_free(obj);
 80277fe:	6838      	ldr	r0, [r7, #0]
 8027800:	f000 ffd1 	bl	80287a6 <lv_label_dot_tmp_free>
    if(!label->static_txt) lv_mem_free(label->text);
 8027804:	68fb      	ldr	r3, [r7, #12]
 8027806:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802780a:	f003 0308 	and.w	r3, r3, #8
 802780e:	b2db      	uxtb	r3, r3
 8027810:	2b00      	cmp	r3, #0
 8027812:	d104      	bne.n	802781e <lv_label_destructor+0x2e>
 8027814:	68fb      	ldr	r3, [r7, #12]
 8027816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027818:	4618      	mov	r0, r3
 802781a:	f7fc fb9b 	bl	8023f54 <lv_mem_free>
    label->text = NULL;
 802781e:	68fb      	ldr	r3, [r7, #12]
 8027820:	2200      	movs	r2, #0
 8027822:	625a      	str	r2, [r3, #36]	; 0x24
}
 8027824:	bf00      	nop
 8027826:	3710      	adds	r7, #16
 8027828:	46bd      	mov	sp, r7
 802782a:	bd80      	pop	{r7, pc}

0802782c <lv_label_event>:

static void lv_label_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 802782c:	b580      	push	{r7, lr}
 802782e:	b090      	sub	sp, #64	; 0x40
 8027830:	af04      	add	r7, sp, #16
 8027832:	6078      	str	r0, [r7, #4]
 8027834:	6039      	str	r1, [r7, #0]
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 8027836:	6839      	ldr	r1, [r7, #0]
 8027838:	486a      	ldr	r0, [pc, #424]	; (80279e4 <lv_label_event+0x1b8>)
 802783a:	f7df fa31 	bl	8006ca0 <lv_obj_event_base>
 802783e:	4603      	mov	r3, r0
 8027840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if(res != LV_RES_OK) return;
 8027844:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8027848:	2b01      	cmp	r3, #1
 802784a:	f040 80c6 	bne.w	80279da <lv_label_event+0x1ae>

    lv_event_code_t code = lv_event_get_code(e);
 802784e:	6838      	ldr	r0, [r7, #0]
 8027850:	f7df fa7c 	bl	8006d4c <lv_event_get_code>
 8027854:	4603      	mov	r3, r0
 8027856:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    lv_obj_t * obj = lv_event_get_target(e);
 802785a:	6838      	ldr	r0, [r7, #0]
 802785c:	f7df fa5e 	bl	8006d1c <lv_event_get_target>
 8027860:	6278      	str	r0, [r7, #36]	; 0x24

    if(code == LV_EVENT_STYLE_CHANGED) {
 8027862:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8027866:	2b2a      	cmp	r3, #42	; 0x2a
 8027868:	d106      	bne.n	8027878 <lv_label_event+0x4c>
        /*Revert dots for proper refresh*/
        lv_label_revert_dots(obj);
 802786a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802786c:	f000 fee6 	bl	802863c <lv_label_revert_dots>
        lv_label_refr_text(obj);
 8027870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027872:	f000 fa87 	bl	8027d84 <lv_label_refr_text>
 8027876:	e0b1      	b.n	80279dc <lv_label_event+0x1b0>
    }
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8027878:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 802787c:	2b13      	cmp	r3, #19
 802787e:	d115      	bne.n	80278ac <lv_label_event+0x80>
        /* Italic or other non-typical letters can be drawn of out of the object.
         * It happens if box_w + ofs_x > adw_w in the glyph.
         * To avoid this add some extra draw area.
         * font_h / 4 is an empirical value. */
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8027880:	2100      	movs	r1, #0
 8027882:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027884:	f7ff fc41 	bl	802710a <lv_obj_get_style_text_font>
 8027888:	6138      	str	r0, [r7, #16]
        lv_coord_t font_h = lv_font_get_line_height(font);
 802788a:	6938      	ldr	r0, [r7, #16]
 802788c:	f7ff fb46 	bl	8026f1c <lv_font_get_line_height>
 8027890:	4603      	mov	r3, r0
 8027892:	81fb      	strh	r3, [r7, #14]
        lv_event_set_ext_draw_size(e, font_h / 4);
 8027894:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8027898:	2b00      	cmp	r3, #0
 802789a:	da00      	bge.n	802789e <lv_label_event+0x72>
 802789c:	3303      	adds	r3, #3
 802789e:	109b      	asrs	r3, r3, #2
 80278a0:	b21b      	sxth	r3, r3
 80278a2:	4619      	mov	r1, r3
 80278a4:	6838      	ldr	r0, [r7, #0]
 80278a6:	f7df fb07 	bl	8006eb8 <lv_event_set_ext_draw_size>
 80278aa:	e097      	b.n	80279dc <lv_label_event+0x1b0>
    }
    else if(code == LV_EVENT_SIZE_CHANGED) {
 80278ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80278b0:	2b29      	cmp	r3, #41	; 0x29
 80278b2:	d106      	bne.n	80278c2 <lv_label_event+0x96>
        lv_label_revert_dots(obj);
 80278b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80278b6:	f000 fec1 	bl	802863c <lv_label_revert_dots>
        lv_label_refr_text(obj);
 80278ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80278bc:	f000 fa62 	bl	8027d84 <lv_label_refr_text>
 80278c0:	e08c      	b.n	80279dc <lv_label_event+0x1b0>
    }
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 80278c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80278c6:	2b2c      	cmp	r3, #44	; 0x2c
 80278c8:	d17f      	bne.n	80279ca <lv_label_event+0x19e>
        lv_point_t size;
        lv_label_t * label = (lv_label_t *)obj;
 80278ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80278cc:	623b      	str	r3, [r7, #32]
        const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 80278ce:	2100      	movs	r1, #0
 80278d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80278d2:	f7ff fc1a 	bl	802710a <lv_obj_get_style_text_font>
 80278d6:	61f8      	str	r0, [r7, #28]
        lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 80278d8:	2100      	movs	r1, #0
 80278da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80278dc:	f7ff fc26 	bl	802712c <lv_obj_get_style_text_letter_space>
 80278e0:	4603      	mov	r3, r0
 80278e2:	837b      	strh	r3, [r7, #26]
        lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 80278e4:	2100      	movs	r1, #0
 80278e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80278e8:	f7ff fc32 	bl	8027150 <lv_obj_get_style_text_line_space>
 80278ec:	4603      	mov	r3, r0
 80278ee:	833b      	strh	r3, [r7, #24]
        lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 80278f0:	2300      	movs	r3, #0
 80278f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 80278f6:	6a3b      	ldr	r3, [r7, #32]
 80278f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80278fc:	f003 0310 	and.w	r3, r3, #16
 8027900:	b2db      	uxtb	r3, r3
 8027902:	2b00      	cmp	r3, #0
 8027904:	d005      	beq.n	8027912 <lv_label_event+0xe6>
 8027906:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802790a:	f043 0301 	orr.w	r3, r3, #1
 802790e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8027912:	6a3b      	ldr	r3, [r7, #32]
 8027914:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8027918:	f003 0320 	and.w	r3, r3, #32
 802791c:	b2db      	uxtb	r3, r3
 802791e:	2b00      	cmp	r3, #0
 8027920:	d005      	beq.n	802792e <lv_label_event+0x102>
 8027922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027926:	f043 0302 	orr.w	r3, r3, #2
 802792a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        lv_coord_t w = lv_obj_get_content_width(obj);
 802792e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027930:	f7e3 f99a 	bl	800ac68 <lv_obj_get_content_width>
 8027934:	4603      	mov	r3, r0
 8027936:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8027938:	2100      	movs	r1, #0
 802793a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802793c:	f7ff fb87 	bl	802704e <lv_obj_get_style_width>
 8027940:	4603      	mov	r3, r0
 8027942:	461a      	mov	r2, r3
 8027944:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8027948:	429a      	cmp	r2, r3
 802794a:	d10b      	bne.n	8027964 <lv_label_event+0x138>
 802794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802794e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8027952:	f003 0304 	and.w	r3, r3, #4
 8027956:	b2db      	uxtb	r3, r3
 8027958:	2b00      	cmp	r3, #0
 802795a:	d103      	bne.n	8027964 <lv_label_event+0x138>
 802795c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8027960:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8027962:	e004      	b.n	802796e <lv_label_event+0x142>
        else w = lv_obj_get_content_width(obj);
 8027964:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027966:	f7e3 f97f 	bl	800ac68 <lv_obj_get_content_width>
 802796a:	4603      	mov	r3, r0
 802796c:	85bb      	strh	r3, [r7, #44]	; 0x2c

        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 802796e:	6a3b      	ldr	r3, [r7, #32]
 8027970:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8027972:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8027976:	f107 0008 	add.w	r0, r7, #8
 802797a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802797e:	9302      	str	r3, [sp, #8]
 8027980:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8027984:	9301      	str	r3, [sp, #4]
 8027986:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 802798a:	9300      	str	r3, [sp, #0]
 802798c:	4613      	mov	r3, r2
 802798e:	69fa      	ldr	r2, [r7, #28]
 8027990:	f7fe fd22 	bl	80263d8 <lv_txt_get_size>

        lv_point_t * self_size = lv_event_get_param(e);
 8027994:	6838      	ldr	r0, [r7, #0]
 8027996:	f7df f9e8 	bl	8006d6a <lv_event_get_param>
 802799a:	6178      	str	r0, [r7, #20]
        self_size->x = LV_MAX(self_size->x, size.x);
 802799c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80279a0:	697b      	ldr	r3, [r7, #20]
 80279a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80279a6:	4293      	cmp	r3, r2
 80279a8:	bfb8      	it	lt
 80279aa:	4613      	movlt	r3, r2
 80279ac:	b21a      	sxth	r2, r3
 80279ae:	697b      	ldr	r3, [r7, #20]
 80279b0:	801a      	strh	r2, [r3, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 80279b2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80279b6:	697b      	ldr	r3, [r7, #20]
 80279b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80279bc:	4293      	cmp	r3, r2
 80279be:	bfb8      	it	lt
 80279c0:	4613      	movlt	r3, r2
 80279c2:	b21a      	sxth	r2, r3
 80279c4:	697b      	ldr	r3, [r7, #20]
 80279c6:	805a      	strh	r2, [r3, #2]
 80279c8:	e008      	b.n	80279dc <lv_label_event+0x1b0>
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
 80279ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80279ce:	2b15      	cmp	r3, #21
 80279d0:	d104      	bne.n	80279dc <lv_label_event+0x1b0>
        draw_main(e);
 80279d2:	6838      	ldr	r0, [r7, #0]
 80279d4:	f000 f808 	bl	80279e8 <draw_main>
 80279d8:	e000      	b.n	80279dc <lv_label_event+0x1b0>
    if(res != LV_RES_OK) return;
 80279da:	bf00      	nop
    }
}
 80279dc:	3730      	adds	r7, #48	; 0x30
 80279de:	46bd      	mov	sp, r7
 80279e0:	bd80      	pop	{r7, pc}
 80279e2:	bf00      	nop
 80279e4:	0802fbf8 	.word	0x0802fbf8

080279e8 <draw_main>:


static void draw_main(lv_event_t * e)
{
 80279e8:	b5b0      	push	{r4, r5, r7, lr}
 80279ea:	b09c      	sub	sp, #112	; 0x70
 80279ec:	af04      	add	r7, sp, #16
 80279ee:	6078      	str	r0, [r7, #4]
    lv_obj_t * obj = lv_event_get_target(e);
 80279f0:	6878      	ldr	r0, [r7, #4]
 80279f2:	f7df f993 	bl	8006d1c <lv_event_get_target>
 80279f6:	6578      	str	r0, [r7, #84]	; 0x54
    lv_label_t * label = (lv_label_t *)obj;
 80279f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80279fa:	653b      	str	r3, [r7, #80]	; 0x50
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80279fc:	6878      	ldr	r0, [r7, #4]
 80279fe:	f7df fa35 	bl	8006e6c <lv_event_get_draw_ctx>
 8027a02:	64f8      	str	r0, [r7, #76]	; 0x4c

    lv_area_t txt_coords;
    lv_obj_get_content_coords(obj, &txt_coords);
 8027a04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8027a08:	4619      	mov	r1, r3
 8027a0a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8027a0c:	f7e3 f982 	bl	800ad14 <lv_obj_get_content_coords>

    lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 8027a10:	2300      	movs	r3, #0
 8027a12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8027a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027a18:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8027a1c:	f003 0310 	and.w	r3, r3, #16
 8027a20:	b2db      	uxtb	r3, r3
 8027a22:	2b00      	cmp	r3, #0
 8027a24:	d005      	beq.n	8027a32 <draw_main+0x4a>
 8027a26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8027a2a:	f043 0301 	orr.w	r3, r3, #1
 8027a2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8027a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027a34:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8027a38:	f003 0320 	and.w	r3, r3, #32
 8027a3c:	b2db      	uxtb	r3, r3
 8027a3e:	2b00      	cmp	r3, #0
 8027a40:	d005      	beq.n	8027a4e <draw_main+0x66>
 8027a42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8027a46:	f043 0302 	orr.w	r3, r3, #2
 8027a4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8027a4e:	2100      	movs	r1, #0
 8027a50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8027a52:	f7ff fafc 	bl	802704e <lv_obj_get_style_width>
 8027a56:	4603      	mov	r3, r0
 8027a58:	461a      	mov	r2, r3
 8027a5a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8027a5e:	429a      	cmp	r2, r3
 8027a60:	d10d      	bne.n	8027a7e <draw_main+0x96>
 8027a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027a64:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8027a68:	f003 0304 	and.w	r3, r3, #4
 8027a6c:	b2db      	uxtb	r3, r3
 8027a6e:	2b00      	cmp	r3, #0
 8027a70:	d105      	bne.n	8027a7e <draw_main+0x96>
 8027a72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8027a76:	f043 0304 	orr.w	r3, r3, #4
 8027a7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    lv_draw_label_dsc_t label_draw_dsc;
    lv_draw_label_dsc_init(&label_draw_dsc);
 8027a7e:	f107 0318 	add.w	r3, r7, #24
 8027a82:	4618      	mov	r0, r3
 8027a84:	f7ea ffaa 	bl	80129dc <lv_draw_label_dsc_init>

    label_draw_dsc.ofs_x = label->offset.x;
 8027a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027a8a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8027a8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    label_draw_dsc.ofs_y = label->offset.y;
 8027a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027a92:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8027a96:	85fb      	strh	r3, [r7, #46]	; 0x2e

    label_draw_dsc.flag = flag;
 8027a98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8027a9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8027aa0:	f107 0318 	add.w	r3, r7, #24
 8027aa4:	461a      	mov	r2, r3
 8027aa6:	2100      	movs	r1, #0
 8027aa8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8027aaa:	f7e2 fa14 	bl	8009ed6 <lv_obj_init_draw_label_dsc>
    lv_bidi_calculate_align(&label_draw_dsc.align, &label_draw_dsc.bidi_dir, label->text);
 8027aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8027ab2:	f107 0318 	add.w	r3, r7, #24
 8027ab6:	f103 0119 	add.w	r1, r3, #25
 8027aba:	f107 0318 	add.w	r3, r7, #24
 8027abe:	331a      	adds	r3, #26
 8027ac0:	4618      	mov	r0, r3
 8027ac2:	f7ff fab1 	bl	8027028 <lv_bidi_calculate_align>

    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 8027ac6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8027ac8:	f7ff fe1c 	bl	8027704 <lv_label_get_text_selection_start>
 8027acc:	4603      	mov	r3, r0
 8027ace:	61fb      	str	r3, [r7, #28]
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 8027ad0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8027ad2:	f7ff fe25 	bl	8027720 <lv_label_get_text_selection_end>
 8027ad6:	4603      	mov	r3, r0
 8027ad8:	623b      	str	r3, [r7, #32]
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8027ada:	69fb      	ldr	r3, [r7, #28]
 8027adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027ae0:	4293      	cmp	r3, r2
 8027ae2:	d012      	beq.n	8027b0a <draw_main+0x122>
 8027ae4:	6a3b      	ldr	r3, [r7, #32]
 8027ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027aea:	4293      	cmp	r3, r2
 8027aec:	d00d      	beq.n	8027b0a <draw_main+0x122>
        label_draw_dsc.sel_color = lv_obj_get_style_text_color_filtered(obj, LV_PART_SELECTED);
 8027aee:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8027af2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8027af4:	f7ff faf2 	bl	80270dc <lv_obj_get_style_text_color_filtered>
 8027af8:	f887 0025 	strb.w	r0, [r7, #37]	; 0x25
        label_draw_dsc.sel_bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SELECTED);
 8027afc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8027b00:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8027b02:	f7ff fada 	bl	80270ba <lv_obj_get_style_bg_color>
 8027b06:	f887 0026 	strb.w	r0, [r7, #38]	; 0x26
    }

    /* In SCROLL and SCROLL_CIRCULAR mode the CENTER and RIGHT are pointless, so remove them.
     * (In addition, they will create misalignment in this situation)*/
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8027b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027b0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8027b10:	f003 0307 	and.w	r3, r3, #7
 8027b14:	b2db      	uxtb	r3, r3
 8027b16:	2b02      	cmp	r3, #2
 8027b18:	d007      	beq.n	8027b2a <draw_main+0x142>
 8027b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027b1c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8027b20:	f003 0307 	and.w	r3, r3, #7
 8027b24:	b2db      	uxtb	r3, r3
 8027b26:	2b03      	cmp	r3, #3
 8027b28:	d128      	bne.n	8027b7c <draw_main+0x194>
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
 8027b2a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8027b2e:	2b02      	cmp	r3, #2
 8027b30:	d003      	beq.n	8027b3a <draw_main+0x152>
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
 8027b32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8027b36:	2b03      	cmp	r3, #3
 8027b38:	d120      	bne.n	8027b7c <draw_main+0x194>
        lv_point_t size;
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8027b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027b3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8027b3e:	69bc      	ldr	r4, [r7, #24]
 8027b40:	f9b7 502a 	ldrsh.w	r5, [r7, #42]	; 0x2a
 8027b44:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8027b48:	f107 000c 	add.w	r0, r7, #12
 8027b4c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8027b50:	9202      	str	r2, [sp, #8]
 8027b52:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8027b56:	9201      	str	r2, [sp, #4]
 8027b58:	9300      	str	r3, [sp, #0]
 8027b5a:	462b      	mov	r3, r5
 8027b5c:	4622      	mov	r2, r4
 8027b5e:	f7fe fc3b 	bl	80263d8 <lv_txt_get_size>
                        LV_COORD_MAX, flag);
        if(size.x > lv_area_get_width(&txt_coords)) {
 8027b62:	f9b7 400c 	ldrsh.w	r4, [r7, #12]
 8027b66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8027b6a:	4618      	mov	r0, r3
 8027b6c:	f7ff f9a8 	bl	8026ec0 <lv_area_get_width>
 8027b70:	4603      	mov	r3, r0
 8027b72:	429c      	cmp	r4, r3
 8027b74:	dd02      	ble.n	8027b7c <draw_main+0x194>
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 8027b76:	2301      	movs	r3, #1
 8027b78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        }
    }
#if LV_LABEL_LONG_TXT_HINT
    lv_draw_label_hint_t * hint = &label->hint;
 8027b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027b7e:	3330      	adds	r3, #48	; 0x30
 8027b80:	65bb      	str	r3, [r7, #88]	; 0x58
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || lv_area_get_height(&txt_coords) < LV_LABEL_HINT_HEIGHT_LIMIT)
 8027b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027b84:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8027b88:	f003 0307 	and.w	r3, r3, #7
 8027b8c:	b2db      	uxtb	r3, r3
 8027b8e:	2b03      	cmp	r3, #3
 8027b90:	d008      	beq.n	8027ba4 <draw_main+0x1bc>
 8027b92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8027b96:	4618      	mov	r0, r3
 8027b98:	f7ff f9a9 	bl	8026eee <lv_area_get_height>
 8027b9c:	4603      	mov	r3, r0
 8027b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8027ba2:	da01      	bge.n	8027ba8 <draw_main+0x1c0>
        hint = NULL;
 8027ba4:	2300      	movs	r3, #0
 8027ba6:	65bb      	str	r3, [r7, #88]	; 0x58
    /*Just for compatibility*/
    lv_draw_label_hint_t * hint = NULL;
#endif

    lv_area_t txt_clip;
    bool is_common = _lv_area_intersect(&txt_clip, &txt_coords, draw_ctx->clip_area);
 8027ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027baa:	689a      	ldr	r2, [r3, #8]
 8027bac:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8027bb0:	f107 0310 	add.w	r3, r7, #16
 8027bb4:	4618      	mov	r0, r3
 8027bb6:	f7fa fe7d 	bl	80228b4 <_lv_area_intersect>
 8027bba:	4603      	mov	r3, r0
 8027bbc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if(!is_common) return;
 8027bc0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8027bc4:	f083 0301 	eor.w	r3, r3, #1
 8027bc8:	b2db      	uxtb	r3, r3
 8027bca:	2b00      	cmp	r3, #0
 8027bcc:	f040 80d6 	bne.w	8027d7c <draw_main+0x394>

    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 8027bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027bd2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8027bd6:	f003 0307 	and.w	r3, r3, #7
 8027bda:	b2db      	uxtb	r3, r3
 8027bdc:	2b00      	cmp	r3, #0
 8027bde:	d114      	bne.n	8027c0a <draw_main+0x222>
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 8027be0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8027be2:	f7e4 fd21 	bl	800c628 <lv_obj_get_scroll_top>
 8027be6:	4603      	mov	r3, r0
 8027be8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        lv_area_move(&txt_coords, 0, -s);
 8027bec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8027bf0:	425b      	negs	r3, r3
 8027bf2:	b29b      	uxth	r3, r3
 8027bf4:	b21a      	sxth	r2, r3
 8027bf6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8027bfa:	2100      	movs	r1, #0
 8027bfc:	4618      	mov	r0, r3
 8027bfe:	f7fa fe23 	bl	8022848 <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 8027c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027c04:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8027c08:	87fb      	strh	r3, [r7, #62]	; 0x3e
    }
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8027c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027c0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8027c10:	f003 0307 	and.w	r3, r3, #7
 8027c14:	b2db      	uxtb	r3, r3
 8027c16:	2b02      	cmp	r3, #2
 8027c18:	d007      	beq.n	8027c2a <draw_main+0x242>
 8027c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027c1c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8027c20:	f003 0307 	and.w	r3, r3, #7
 8027c24:	b2db      	uxtb	r3, r3
 8027c26:	2b03      	cmp	r3, #3
 8027c28:	d116      	bne.n	8027c58 <draw_main+0x270>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8027c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027c2c:	689b      	ldr	r3, [r3, #8]
 8027c2e:	647b      	str	r3, [r7, #68]	; 0x44
        draw_ctx->clip_area = &txt_clip;
 8027c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027c32:	f107 0210 	add.w	r2, r7, #16
 8027c36:	609a      	str	r2, [r3, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8027c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027c3a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8027c3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8027c40:	f107 0118 	add.w	r1, r7, #24
 8027c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027c46:	9300      	str	r3, [sp, #0]
 8027c48:	4603      	mov	r3, r0
 8027c4a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8027c4c:	f7ea fef2 	bl	8012a34 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 8027c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027c52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8027c54:	609a      	str	r2, [r3, #8]
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8027c56:	e00b      	b.n	8027c70 <draw_main+0x288>
    }
    else {
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8027c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027c5a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8027c5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8027c60:	f107 0118 	add.w	r1, r7, #24
 8027c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027c66:	9300      	str	r3, [sp, #0]
 8027c68:	4603      	mov	r3, r0
 8027c6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8027c6c:	f7ea fee2 	bl	8012a34 <lv_draw_label>
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8027c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027c72:	689b      	ldr	r3, [r3, #8]
 8027c74:	643b      	str	r3, [r7, #64]	; 0x40
    draw_ctx->clip_area = &txt_clip;
 8027c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027c78:	f107 0210 	add.w	r2, r7, #16
 8027c7c:	609a      	str	r2, [r3, #8]

    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8027c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027c80:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8027c84:	f003 0307 	and.w	r3, r3, #7
 8027c88:	b2db      	uxtb	r3, r3
 8027c8a:	2b03      	cmp	r3, #3
 8027c8c:	d172      	bne.n	8027d74 <draw_main+0x38c>
        lv_point_t size;
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8027c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027c90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8027c92:	69bc      	ldr	r4, [r7, #24]
 8027c94:	f9b7 502a 	ldrsh.w	r5, [r7, #42]	; 0x2a
 8027c98:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8027c9c:	f107 0008 	add.w	r0, r7, #8
 8027ca0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8027ca4:	9202      	str	r2, [sp, #8]
 8027ca6:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8027caa:	9201      	str	r2, [sp, #4]
 8027cac:	9300      	str	r3, [sp, #0]
 8027cae:	462b      	mov	r3, r5
 8027cb0:	4622      	mov	r2, r4
 8027cb2:	f7fe fb91 	bl	80263d8 <lv_txt_get_size>
                        LV_COORD_MAX, flag);

        /*Draw the text again on label to the original to make a circular effect */
        if(size.x > lv_area_get_width(&txt_coords)) {
 8027cb6:	f9b7 4008 	ldrsh.w	r4, [r7, #8]
 8027cba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8027cbe:	4618      	mov	r0, r3
 8027cc0:	f7ff f8fe 	bl	8026ec0 <lv_area_get_width>
 8027cc4:	4603      	mov	r3, r0
 8027cc6:	429c      	cmp	r4, r3
 8027cc8:	dd27      	ble.n	8027d1a <draw_main+0x332>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8027cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027ccc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8027cd0:	b29a      	uxth	r2, r3
 8027cd2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8027cd6:	b29b      	uxth	r3, r3
 8027cd8:	4413      	add	r3, r2
 8027cda:	b29c      	uxth	r4, r3
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8027cdc:	69bb      	ldr	r3, [r7, #24]
 8027cde:	2220      	movs	r2, #32
 8027ce0:	2120      	movs	r1, #32
 8027ce2:	4618      	mov	r0, r3
 8027ce4:	f7f9 fc1a 	bl	802151c <lv_font_get_glyph_width>
 8027ce8:	4603      	mov	r3, r0
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8027cea:	461a      	mov	r2, r3
 8027cec:	0052      	lsls	r2, r2, #1
 8027cee:	4413      	add	r3, r2
 8027cf0:	b29b      	uxth	r3, r3
 8027cf2:	4423      	add	r3, r4
 8027cf4:	b29b      	uxth	r3, r3
 8027cf6:	b21b      	sxth	r3, r3
 8027cf8:	85bb      	strh	r3, [r7, #44]	; 0x2c
            label_draw_dsc.ofs_y = label->offset.y;
 8027cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027cfc:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8027d00:	85fb      	strh	r3, [r7, #46]	; 0x2e

            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8027d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027d04:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8027d06:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8027d0a:	f107 0118 	add.w	r1, r7, #24
 8027d0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027d10:	9300      	str	r3, [sp, #0]
 8027d12:	4603      	mov	r3, r0
 8027d14:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8027d16:	f7ea fe8d 	bl	8012a34 <lv_draw_label>
        }

        /*Draw the text again below the original to make a circular effect */
        if(size.y > lv_area_get_height(&txt_coords)) {
 8027d1a:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 8027d1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8027d22:	4618      	mov	r0, r3
 8027d24:	f7ff f8e3 	bl	8026eee <lv_area_get_height>
 8027d28:	4603      	mov	r3, r0
 8027d2a:	429c      	cmp	r4, r3
 8027d2c:	dd22      	ble.n	8027d74 <draw_main+0x38c>
            label_draw_dsc.ofs_x = label->offset.x;
 8027d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027d30:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8027d34:	85bb      	strh	r3, [r7, #44]	; 0x2c
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8027d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027d38:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8027d3c:	b29a      	uxth	r2, r3
 8027d3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8027d42:	b29b      	uxth	r3, r3
 8027d44:	4413      	add	r3, r2
 8027d46:	b29c      	uxth	r4, r3
 8027d48:	69bb      	ldr	r3, [r7, #24]
 8027d4a:	4618      	mov	r0, r3
 8027d4c:	f7ff f8e6 	bl	8026f1c <lv_font_get_line_height>
 8027d50:	4603      	mov	r3, r0
 8027d52:	b29b      	uxth	r3, r3
 8027d54:	4423      	add	r3, r4
 8027d56:	b29b      	uxth	r3, r3
 8027d58:	b21b      	sxth	r3, r3
 8027d5a:	85fb      	strh	r3, [r7, #46]	; 0x2e

            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8027d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027d5e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8027d60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8027d64:	f107 0118 	add.w	r1, r7, #24
 8027d68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027d6a:	9300      	str	r3, [sp, #0]
 8027d6c:	4603      	mov	r3, r0
 8027d6e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8027d70:	f7ea fe60 	bl	8012a34 <lv_draw_label>
        }
    }

    draw_ctx->clip_area = clip_area_ori;
 8027d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027d76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8027d78:	609a      	str	r2, [r3, #8]
 8027d7a:	e000      	b.n	8027d7e <draw_main+0x396>
    if(!is_common) return;
 8027d7c:	bf00      	nop
}
 8027d7e:	3760      	adds	r7, #96	; 0x60
 8027d80:	46bd      	mov	sp, r7
 8027d82:	bdb0      	pop	{r4, r5, r7, pc}

08027d84 <lv_label_refr_text>:
/**
 * Refresh the label with its text stored in its extended data
 * @param label pointer to a label object
 */
static void lv_label_refr_text(lv_obj_t * obj)
{
 8027d84:	b590      	push	{r4, r7, lr}
 8027d86:	b0b7      	sub	sp, #220	; 0xdc
 8027d88:	af04      	add	r7, sp, #16
 8027d8a:	6078      	str	r0, [r7, #4]
    lv_label_t * label = (lv_label_t *)obj;
 8027d8c:	687b      	ldr	r3, [r7, #4]
 8027d8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if(label->text == NULL) return;
 8027d92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8027d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027d98:	2b00      	cmp	r3, #0
 8027d9a:	f000 8442 	beq.w	8028622 <lv_label_refr_text+0x89e>
#if LV_LABEL_LONG_TXT_HINT
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 8027d9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8027da2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8027da6:	631a      	str	r2, [r3, #48]	; 0x30
#endif

    lv_area_t txt_coords;
    lv_obj_get_content_coords(obj, &txt_coords);
 8027da8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8027dac:	4619      	mov	r1, r3
 8027dae:	6878      	ldr	r0, [r7, #4]
 8027db0:	f7e2 ffb0 	bl	800ad14 <lv_obj_get_content_coords>
    lv_coord_t max_w         = lv_area_get_width(&txt_coords);
 8027db4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8027db8:	4618      	mov	r0, r3
 8027dba:	f7ff f881 	bl	8026ec0 <lv_area_get_width>
 8027dbe:	4603      	mov	r3, r0
 8027dc0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
    const lv_font_t * font   = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
 8027dc4:	2100      	movs	r1, #0
 8027dc6:	6878      	ldr	r0, [r7, #4]
 8027dc8:	f7ff f99f 	bl	802710a <lv_obj_get_style_text_font>
 8027dcc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
 8027dd0:	2100      	movs	r1, #0
 8027dd2:	6878      	ldr	r0, [r7, #4]
 8027dd4:	f7ff f9bc 	bl	8027150 <lv_obj_get_style_text_line_space>
 8027dd8:	4603      	mov	r3, r0
 8027dda:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);
 8027dde:	2100      	movs	r1, #0
 8027de0:	6878      	ldr	r0, [r7, #4]
 8027de2:	f7ff f9a3 	bl	802712c <lv_obj_get_style_text_letter_space>
 8027de6:	4603      	mov	r3, r0
 8027de8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

    /*Calc. the height and longest line*/
    lv_point_t size;
    lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 8027dec:	2300      	movs	r3, #0
 8027dee:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8027df2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8027df6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8027dfa:	f003 0310 	and.w	r3, r3, #16
 8027dfe:	b2db      	uxtb	r3, r3
 8027e00:	2b00      	cmp	r3, #0
 8027e02:	d005      	beq.n	8027e10 <lv_label_refr_text+0x8c>
 8027e04:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8027e08:	f043 0301 	orr.w	r3, r3, #1
 8027e0c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8027e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8027e14:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8027e18:	f003 0320 	and.w	r3, r3, #32
 8027e1c:	b2db      	uxtb	r3, r3
 8027e1e:	2b00      	cmp	r3, #0
 8027e20:	d005      	beq.n	8027e2e <lv_label_refr_text+0xaa>
 8027e22:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8027e26:	f043 0302 	orr.w	r3, r3, #2
 8027e2a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8027e2e:	2100      	movs	r1, #0
 8027e30:	6878      	ldr	r0, [r7, #4]
 8027e32:	f7ff f90c 	bl	802704e <lv_obj_get_style_width>
 8027e36:	4603      	mov	r3, r0
 8027e38:	461a      	mov	r2, r3
 8027e3a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8027e3e:	429a      	cmp	r2, r3
 8027e40:	d10d      	bne.n	8027e5e <lv_label_refr_text+0xda>
 8027e42:	687b      	ldr	r3, [r7, #4]
 8027e44:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8027e48:	f003 0304 	and.w	r3, r3, #4
 8027e4c:	b2db      	uxtb	r3, r3
 8027e4e:	2b00      	cmp	r3, #0
 8027e50:	d105      	bne.n	8027e5e <lv_label_refr_text+0xda>
 8027e52:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8027e56:	f043 0304 	orr.w	r3, r3, #4
 8027e5a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 8027e5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8027e62:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8027e64:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8027e68:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8027e6c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8027e70:	9302      	str	r3, [sp, #8]
 8027e72:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8027e76:	9301      	str	r3, [sp, #4]
 8027e78:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8027e7c:	9300      	str	r3, [sp, #0]
 8027e7e:	4613      	mov	r3, r2
 8027e80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8027e84:	f7fe faa8 	bl	80263d8 <lv_txt_get_size>

    lv_obj_refresh_self_size(obj);
 8027e88:	6878      	ldr	r0, [r7, #4]
 8027e8a:	f7e2 ffce 	bl	800ae2a <lv_obj_refresh_self_size>

    /*In scroll mode start an offset animation*/
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 8027e8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8027e92:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8027e96:	f003 0307 	and.w	r3, r3, #7
 8027e9a:	b2db      	uxtb	r3, r3
 8027e9c:	2b02      	cmp	r3, #2
 8027e9e:	f040 815d 	bne.w	802815c <lv_label_refr_text+0x3d8>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 8027ea2:	2100      	movs	r1, #0
 8027ea4:	6878      	ldr	r0, [r7, #4]
 8027ea6:	f7ff f976 	bl	8027196 <lv_obj_get_style_anim_speed>
 8027eaa:	4603      	mov	r3, r0
 8027eac:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8027eb0:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8027eb4:	2b00      	cmp	r3, #0
 8027eb6:	d10f      	bne.n	8027ed8 <lv_label_refr_text+0x154>
 8027eb8:	6878      	ldr	r0, [r7, #4]
 8027eba:	f7e8 f8b3 	bl	8010024 <lv_obj_get_disp>
 8027ebe:	4603      	mov	r3, r0
 8027ec0:	4618      	mov	r0, r3
 8027ec2:	f7fa f81d 	bl	8021f00 <lv_disp_get_dpi>
 8027ec6:	4603      	mov	r3, r0
 8027ec8:	4aa1      	ldr	r2, [pc, #644]	; (8028150 <lv_label_refr_text+0x3cc>)
 8027eca:	fb82 1203 	smull	r1, r2, r2, r3
 8027ece:	17db      	asrs	r3, r3, #31
 8027ed0:	1ad3      	subs	r3, r2, r3
 8027ed2:	b21b      	sxth	r3, r3
 8027ed4:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        lv_anim_t a;
        lv_anim_init(&a);
 8027ed8:	f107 0308 	add.w	r3, r7, #8
 8027edc:	4618      	mov	r0, r3
 8027ede:	f7fa f8cd 	bl	802207c <lv_anim_init>
        lv_anim_set_var(&a, obj);
 8027ee2:	f107 0308 	add.w	r3, r7, #8
 8027ee6:	6879      	ldr	r1, [r7, #4]
 8027ee8:	4618      	mov	r0, r3
 8027eea:	f7ff f824 	bl	8026f36 <lv_anim_set_var>
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
 8027eee:	f107 0308 	add.w	r3, r7, #8
 8027ef2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8027ef6:	4618      	mov	r0, r3
 8027ef8:	f7ff f878 	bl	8026fec <lv_anim_set_repeat_count>
        lv_anim_set_playback_delay(&a, LV_LABEL_SCROLL_DELAY);
 8027efc:	f107 0308 	add.w	r3, r7, #8
 8027f00:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8027f04:	4618      	mov	r0, r3
 8027f06:	f7ff f863 	bl	8026fd0 <lv_anim_set_playback_delay>
        lv_anim_set_repeat_delay(&a, a.playback_delay);
 8027f0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8027f0c:	f107 0308 	add.w	r3, r7, #8
 8027f10:	4611      	mov	r1, r2
 8027f12:	4618      	mov	r0, r3
 8027f14:	f7ff f87a 	bl	802700c <lv_anim_set_repeat_delay>

        bool hor_anim = false;
 8027f18:	2300      	movs	r3, #0
 8027f1a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if(size.x > lv_area_get_width(&txt_coords)) {
 8027f1e:	f9b7 4054 	ldrsh.w	r4, [r7, #84]	; 0x54
 8027f22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8027f26:	4618      	mov	r0, r3
 8027f28:	f7fe ffca 	bl	8026ec0 <lv_area_get_width>
 8027f2c:	4603      	mov	r3, r0
 8027f2e:	429c      	cmp	r4, r3
 8027f30:	dd76      	ble.n	8028020 <lv_label_refr_text+0x29c>
                end = lv_area_get_width(&txt_coords) - size.x;
            }

            lv_anim_set_values(&a, start, end);
#else
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 8027f32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8027f36:	4618      	mov	r0, r3
 8027f38:	f7fe ffc2 	bl	8026ec0 <lv_area_get_width>
 8027f3c:	4603      	mov	r3, r0
 8027f3e:	461a      	mov	r2, r3
 8027f40:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8027f44:	1ad2      	subs	r2, r2, r3
 8027f46:	f107 0308 	add.w	r3, r7, #8
 8027f4a:	2100      	movs	r1, #0
 8027f4c:	4618      	mov	r0, r3
 8027f4e:	f7ff f81c 	bl	8026f8a <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, set_ofs_x_anim);
 8027f52:	f107 0308 	add.w	r3, r7, #8
 8027f56:	497f      	ldr	r1, [pc, #508]	; (8028154 <lv_label_refr_text+0x3d0>)
 8027f58:	4618      	mov	r0, r3
 8027f5a:	f7fe fffa 	bl	8026f52 <lv_anim_set_exec_cb>
#endif
            lv_anim_set_exec_cb(&a, set_ofs_x_anim);
 8027f5e:	f107 0308 	add.w	r3, r7, #8
 8027f62:	497c      	ldr	r1, [pc, #496]	; (8028154 <lv_label_refr_text+0x3d0>)
 8027f64:	4618      	mov	r0, r3
 8027f66:	f7fe fff4 	bl	8026f52 <lv_anim_set_exec_cb>

            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8027f6a:	497a      	ldr	r1, [pc, #488]	; (8028154 <lv_label_refr_text+0x3d0>)
 8027f6c:	6878      	ldr	r0, [r7, #4]
 8027f6e:	f7fa f963 	bl	8022238 <lv_anim_get>
 8027f72:	66f8      	str	r0, [r7, #108]	; 0x6c
            int32_t act_time = 0;
 8027f74:	2300      	movs	r3, #0
 8027f76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            bool playback_now = false;
 8027f7a:	2300      	movs	r3, #0
 8027f7c:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
            if(anim_cur) {
 8027f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8027f82:	2b00      	cmp	r3, #0
 8027f84:	d00f      	beq.n	8027fa6 <lv_label_refr_text+0x222>
                act_time = anim_cur->act_time;
 8027f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8027f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027f8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                playback_now = anim_cur->playback_now;
 8027f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8027f90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8027f94:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8027f98:	b2db      	uxtb	r3, r3
 8027f9a:	2b00      	cmp	r3, #0
 8027f9c:	bf14      	ite	ne
 8027f9e:	2301      	movne	r3, #1
 8027fa0:	2300      	moveq	r3, #0
 8027fa2:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
            }
            if(act_time < a.time) {
 8027fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027fa8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8027fac:	429a      	cmp	r2, r3
 8027fae:	da18      	bge.n	8027fe2 <lv_label_refr_text+0x25e>
                a.act_time = act_time;      /*To keep the old position*/
 8027fb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8027fb4:	63bb      	str	r3, [r7, #56]	; 0x38
                a.early_apply = 0;
 8027fb6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8027fba:	f36f 0300 	bfc	r3, #0, #1
 8027fbe:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                if(playback_now) {
 8027fc2:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8027fc6:	2b00      	cmp	r3, #0
 8027fc8:	d00b      	beq.n	8027fe2 <lv_label_refr_text+0x25e>
                    a.playback_now = 1;
 8027fca:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8027fce:	f043 0302 	orr.w	r3, r3, #2
 8027fd2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    /*Swap the start and end values*/
                    int32_t tmp;
                    tmp      = a.start_value;
 8027fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027fd8:	66bb      	str	r3, [r7, #104]	; 0x68
                    a.start_value = a.end_value;
 8027fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027fdc:	62bb      	str	r3, [r7, #40]	; 0x28
                    a.end_value   = tmp;
 8027fde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8027fe0:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8027fe2:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8027fe6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8027fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027fea:	4618      	mov	r0, r3
 8027fec:	f7fa f94c 	bl	8022288 <lv_anim_speed_to_time>
 8027ff0:	4602      	mov	r2, r0
 8027ff2:	f107 0308 	add.w	r3, r7, #8
 8027ff6:	4611      	mov	r1, r2
 8027ff8:	4618      	mov	r0, r3
 8027ffa:	f7fe ffb8 	bl	8026f6e <lv_anim_set_time>
            lv_anim_set_playback_time(&a, a.time);
 8027ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028000:	461a      	mov	r2, r3
 8028002:	f107 0308 	add.w	r3, r7, #8
 8028006:	4611      	mov	r1, r2
 8028008:	4618      	mov	r0, r3
 802800a:	f7fe ffd3 	bl	8026fb4 <lv_anim_set_playback_time>
            lv_anim_start(&a);
 802800e:	f107 0308 	add.w	r3, r7, #8
 8028012:	4618      	mov	r0, r3
 8028014:	f7fa f858 	bl	80220c8 <lv_anim_start>
            hor_anim = true;
 8028018:	2301      	movs	r3, #1
 802801a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 802801e:	e008      	b.n	8028032 <lv_label_refr_text+0x2ae>
        }
        else {
            /*Delete the offset animation if not required*/
            lv_anim_del(obj, set_ofs_x_anim);
 8028020:	494c      	ldr	r1, [pc, #304]	; (8028154 <lv_label_refr_text+0x3d0>)
 8028022:	6878      	ldr	r0, [r7, #4]
 8028024:	f7fa f8c8 	bl	80221b8 <lv_anim_del>
            label->offset.x = 0;
 8028028:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802802c:	2200      	movs	r2, #0
 802802e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        }

        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8028032:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 8028036:	f107 0358 	add.w	r3, r7, #88	; 0x58
 802803a:	4618      	mov	r0, r3
 802803c:	f7fe ff57 	bl	8026eee <lv_area_get_height>
 8028040:	4603      	mov	r3, r0
 8028042:	429c      	cmp	r4, r3
 8028044:	dd7a      	ble.n	802813c <lv_label_refr_text+0x3b8>
 8028046:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 802804a:	f083 0301 	eor.w	r3, r3, #1
 802804e:	b2db      	uxtb	r3, r3
 8028050:	2b00      	cmp	r3, #0
 8028052:	d073      	beq.n	802813c <lv_label_refr_text+0x3b8>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 8028054:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8028058:	4618      	mov	r0, r3
 802805a:	f7fe ff48 	bl	8026eee <lv_area_get_height>
 802805e:	4603      	mov	r3, r0
 8028060:	461a      	mov	r2, r3
 8028062:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8028066:	1ad4      	subs	r4, r2, r3
 8028068:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 802806c:	f7fe ff56 	bl	8026f1c <lv_font_get_line_height>
 8028070:	4603      	mov	r3, r0
 8028072:	1ae2      	subs	r2, r4, r3
 8028074:	f107 0308 	add.w	r3, r7, #8
 8028078:	2100      	movs	r1, #0
 802807a:	4618      	mov	r0, r3
 802807c:	f7fe ff85 	bl	8026f8a <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, set_ofs_y_anim);
 8028080:	f107 0308 	add.w	r3, r7, #8
 8028084:	4934      	ldr	r1, [pc, #208]	; (8028158 <lv_label_refr_text+0x3d4>)
 8028086:	4618      	mov	r0, r3
 8028088:	f7fe ff63 	bl	8026f52 <lv_anim_set_exec_cb>

            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 802808c:	4932      	ldr	r1, [pc, #200]	; (8028158 <lv_label_refr_text+0x3d4>)
 802808e:	6878      	ldr	r0, [r7, #4]
 8028090:	f7fa f8d2 	bl	8022238 <lv_anim_get>
 8028094:	6678      	str	r0, [r7, #100]	; 0x64
            int32_t act_time = 0;
 8028096:	2300      	movs	r3, #0
 8028098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            bool playback_now = false;
 802809c:	2300      	movs	r3, #0
 802809e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
            if(anim_cur) {
 80280a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80280a4:	2b00      	cmp	r3, #0
 80280a6:	d00f      	beq.n	80280c8 <lv_label_refr_text+0x344>
                act_time = anim_cur->act_time;
 80280a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80280aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80280ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                playback_now = anim_cur->playback_now;
 80280b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80280b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80280b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80280ba:	b2db      	uxtb	r3, r3
 80280bc:	2b00      	cmp	r3, #0
 80280be:	bf14      	ite	ne
 80280c0:	2301      	movne	r3, #1
 80280c2:	2300      	moveq	r3, #0
 80280c4:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
            }
            if(act_time < a.time) {
 80280c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80280ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80280ce:	429a      	cmp	r2, r3
 80280d0:	da18      	bge.n	8028104 <lv_label_refr_text+0x380>
                a.act_time = act_time;      /*To keep the old position*/
 80280d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80280d6:	63bb      	str	r3, [r7, #56]	; 0x38
                a.early_apply = 0;
 80280d8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80280dc:	f36f 0300 	bfc	r3, #0, #1
 80280e0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                if(playback_now) {
 80280e4:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80280e8:	2b00      	cmp	r3, #0
 80280ea:	d00b      	beq.n	8028104 <lv_label_refr_text+0x380>
                    a.playback_now = 1;
 80280ec:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80280f0:	f043 0302 	orr.w	r3, r3, #2
 80280f4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    /*Swap the start and end values*/
                    int32_t tmp;
                    tmp      = a.start_value;
 80280f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280fa:	663b      	str	r3, [r7, #96]	; 0x60
                    a.start_value = a.end_value;
 80280fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80280fe:	62bb      	str	r3, [r7, #40]	; 0x28
                    a.end_value   = tmp;
 8028100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8028102:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8028104:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8028108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802810a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802810c:	4618      	mov	r0, r3
 802810e:	f7fa f8bb 	bl	8022288 <lv_anim_speed_to_time>
 8028112:	4602      	mov	r2, r0
 8028114:	f107 0308 	add.w	r3, r7, #8
 8028118:	4611      	mov	r1, r2
 802811a:	4618      	mov	r0, r3
 802811c:	f7fe ff27 	bl	8026f6e <lv_anim_set_time>
            lv_anim_set_playback_time(&a, a.time);
 8028120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028122:	461a      	mov	r2, r3
 8028124:	f107 0308 	add.w	r3, r7, #8
 8028128:	4611      	mov	r1, r2
 802812a:	4618      	mov	r0, r3
 802812c:	f7fe ff42 	bl	8026fb4 <lv_anim_set_playback_time>
            lv_anim_start(&a);
 8028130:	f107 0308 	add.w	r3, r7, #8
 8028134:	4618      	mov	r0, r3
 8028136:	f7f9 ffc7 	bl	80220c8 <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 802813a:	e26e      	b.n	802861a <lv_label_refr_text+0x896>
        }
        else {
            /*Delete the offset animation if not required*/
            lv_anim_del(obj, set_ofs_y_anim);
 802813c:	4906      	ldr	r1, [pc, #24]	; (8028158 <lv_label_refr_text+0x3d4>)
 802813e:	6878      	ldr	r0, [r7, #4]
 8028140:	f7fa f83a 	bl	80221b8 <lv_anim_del>
            label->offset.y = 0;
 8028144:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8028148:	2200      	movs	r2, #0
 802814a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 802814e:	e264      	b.n	802861a <lv_label_refr_text+0x896>
 8028150:	55555556 	.word	0x55555556
 8028154:	080287f1 	.word	0x080287f1
 8028158:	08028817 	.word	0x08028817
        }
    }
    /*In roll inf. mode keep the size but start offset animations*/
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 802815c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8028160:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8028164:	f003 0307 	and.w	r3, r3, #7
 8028168:	b2db      	uxtb	r3, r3
 802816a:	2b03      	cmp	r3, #3
 802816c:	f040 8109 	bne.w	8028382 <lv_label_refr_text+0x5fe>
        const lv_anim_t * anim_template = lv_obj_get_style_anim(obj, LV_PART_MAIN);
 8028170:	2100      	movs	r1, #0
 8028172:	6878      	ldr	r0, [r7, #4]
 8028174:	f7fe fffe 	bl	8027174 <lv_obj_get_style_anim>
 8028178:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 802817c:	2100      	movs	r1, #0
 802817e:	6878      	ldr	r0, [r7, #4]
 8028180:	f7ff f809 	bl	8027196 <lv_obj_get_style_anim_speed>
 8028184:	4603      	mov	r3, r0
 8028186:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 802818a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 802818e:	2b00      	cmp	r3, #0
 8028190:	d10f      	bne.n	80281b2 <lv_label_refr_text+0x42e>
 8028192:	6878      	ldr	r0, [r7, #4]
 8028194:	f7e7 ff46 	bl	8010024 <lv_obj_get_disp>
 8028198:	4603      	mov	r3, r0
 802819a:	4618      	mov	r0, r3
 802819c:	f7f9 feb0 	bl	8021f00 <lv_disp_get_dpi>
 80281a0:	4603      	mov	r3, r0
 80281a2:	4ac2      	ldr	r2, [pc, #776]	; (80284ac <lv_label_refr_text+0x728>)
 80281a4:	fb82 1203 	smull	r1, r2, r2, r3
 80281a8:	17db      	asrs	r3, r3, #31
 80281aa:	1ad3      	subs	r3, r2, r3
 80281ac:	b21b      	sxth	r3, r3
 80281ae:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
        lv_anim_t a;
        lv_anim_init(&a);
 80281b2:	f107 0308 	add.w	r3, r7, #8
 80281b6:	4618      	mov	r0, r3
 80281b8:	f7f9 ff60 	bl	802207c <lv_anim_init>
        lv_anim_set_var(&a, obj);
 80281bc:	f107 0308 	add.w	r3, r7, #8
 80281c0:	6879      	ldr	r1, [r7, #4]
 80281c2:	4618      	mov	r0, r3
 80281c4:	f7fe feb7 	bl	8026f36 <lv_anim_set_var>
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
 80281c8:	f107 0308 	add.w	r3, r7, #8
 80281cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80281d0:	4618      	mov	r0, r3
 80281d2:	f7fe ff0b 	bl	8026fec <lv_anim_set_repeat_count>

        bool hor_anim = false;
 80281d6:	2300      	movs	r3, #0
 80281d8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        if(size.x > lv_area_get_width(&txt_coords)) {
 80281dc:	f9b7 4054 	ldrsh.w	r4, [r7, #84]	; 0x54
 80281e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80281e4:	4618      	mov	r0, r3
 80281e6:	f7fe fe6b 	bl	8026ec0 <lv_area_get_width>
 80281ea:	4603      	mov	r3, r0
 80281ec:	429c      	cmp	r4, r3
 80281ee:	dd55      	ble.n	802829c <lv_label_refr_text+0x518>
                end = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
            }

            lv_anim_set_values(&a, start, end);
#else
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 80281f0:	2220      	movs	r2, #32
 80281f2:	2120      	movs	r1, #32
 80281f4:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80281f8:	f7f9 f990 	bl	802151c <lv_font_get_glyph_width>
 80281fc:	4603      	mov	r3, r0
 80281fe:	461a      	mov	r2, r3
 8028200:	009b      	lsls	r3, r3, #2
 8028202:	1ad3      	subs	r3, r2, r3
 8028204:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8028208:	1a9a      	subs	r2, r3, r2
 802820a:	f107 0308 	add.w	r3, r7, #8
 802820e:	2100      	movs	r1, #0
 8028210:	4618      	mov	r0, r3
 8028212:	f7fe feba 	bl	8026f8a <lv_anim_set_values>
#endif
            lv_anim_set_exec_cb(&a, set_ofs_x_anim);
 8028216:	f107 0308 	add.w	r3, r7, #8
 802821a:	49a5      	ldr	r1, [pc, #660]	; (80284b0 <lv_label_refr_text+0x72c>)
 802821c:	4618      	mov	r0, r3
 802821e:	f7fe fe98 	bl	8026f52 <lv_anim_set_exec_cb>
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8028222:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8028226:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8028228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802822a:	4618      	mov	r0, r3
 802822c:	f7fa f82c 	bl	8022288 <lv_anim_speed_to_time>
 8028230:	4602      	mov	r2, r0
 8028232:	f107 0308 	add.w	r3, r7, #8
 8028236:	4611      	mov	r1, r2
 8028238:	4618      	mov	r0, r3
 802823a:	f7fe fe98 	bl	8026f6e <lv_anim_set_time>

            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 802823e:	499c      	ldr	r1, [pc, #624]	; (80284b0 <lv_label_refr_text+0x72c>)
 8028240:	6878      	ldr	r0, [r7, #4]
 8028242:	f7f9 fff9 	bl	8022238 <lv_anim_get>
 8028246:	67f8      	str	r0, [r7, #124]	; 0x7c
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8028248:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802824a:	2b00      	cmp	r3, #0
 802824c:	d002      	beq.n	8028254 <lv_label_refr_text+0x4d0>
 802824e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8028250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028252:	e000      	b.n	8028256 <lv_label_refr_text+0x4d2>
 8028254:	2300      	movs	r3, #0
 8028256:	67bb      	str	r3, [r7, #120]	; 0x78

            /*If a template animation exists, consider it's start delay and repeat delay*/
            if(anim_template) {
 8028258:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802825c:	2b00      	cmp	r3, #0
 802825e:	d008      	beq.n	8028272 <lv_label_refr_text+0x4ee>
                a.act_time = anim_template->act_time;
 8028260:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8028264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028266:	63bb      	str	r3, [r7, #56]	; 0x38
                a.repeat_delay = anim_template->repeat_delay;
 8028268:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802826c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802826e:	647b      	str	r3, [r7, #68]	; 0x44
 8028270:	e00b      	b.n	802828a <lv_label_refr_text+0x506>
            }
            else if(act_time < a.time) {
 8028272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028274:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8028276:	429a      	cmp	r2, r3
 8028278:	da07      	bge.n	802828a <lv_label_refr_text+0x506>
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 802827a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802827c:	63bb      	str	r3, [r7, #56]	; 0x38
                a.early_apply = 0;
 802827e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8028282:	f36f 0300 	bfc	r3, #0, #1
 8028286:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            }

            lv_anim_start(&a);
 802828a:	f107 0308 	add.w	r3, r7, #8
 802828e:	4618      	mov	r0, r3
 8028290:	f7f9 ff1a 	bl	80220c8 <lv_anim_start>
            hor_anim = true;
 8028294:	2301      	movs	r3, #1
 8028296:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 802829a:	e008      	b.n	80282ae <lv_label_refr_text+0x52a>
        }
        else {
            /*Delete the offset animation if not required*/
            lv_anim_del(obj, set_ofs_x_anim);
 802829c:	4984      	ldr	r1, [pc, #528]	; (80284b0 <lv_label_refr_text+0x72c>)
 802829e:	6878      	ldr	r0, [r7, #4]
 80282a0:	f7f9 ff8a 	bl	80221b8 <lv_anim_del>
            label->offset.x = 0;
 80282a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80282a8:	2200      	movs	r2, #0
 80282aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        }

        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 80282ae:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 80282b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80282b6:	4618      	mov	r0, r3
 80282b8:	f7fe fe19 	bl	8026eee <lv_area_get_height>
 80282bc:	4603      	mov	r3, r0
 80282be:	429c      	cmp	r4, r3
 80282c0:	dd55      	ble.n	802836e <lv_label_refr_text+0x5ea>
 80282c2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80282c6:	f083 0301 	eor.w	r3, r3, #1
 80282ca:	b2db      	uxtb	r3, r3
 80282cc:	2b00      	cmp	r3, #0
 80282ce:	d04e      	beq.n	802836e <lv_label_refr_text+0x5ea>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 80282d0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80282d4:	425c      	negs	r4, r3
 80282d6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80282da:	f7fe fe1f 	bl	8026f1c <lv_font_get_line_height>
 80282de:	4603      	mov	r3, r0
 80282e0:	1ae2      	subs	r2, r4, r3
 80282e2:	f107 0308 	add.w	r3, r7, #8
 80282e6:	2100      	movs	r1, #0
 80282e8:	4618      	mov	r0, r3
 80282ea:	f7fe fe4e 	bl	8026f8a <lv_anim_set_values>
            lv_anim_set_exec_cb(&a, set_ofs_y_anim);
 80282ee:	f107 0308 	add.w	r3, r7, #8
 80282f2:	4970      	ldr	r1, [pc, #448]	; (80284b4 <lv_label_refr_text+0x730>)
 80282f4:	4618      	mov	r0, r3
 80282f6:	f7fe fe2c 	bl	8026f52 <lv_anim_set_exec_cb>
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 80282fa:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80282fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8028300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8028302:	4618      	mov	r0, r3
 8028304:	f7f9 ffc0 	bl	8022288 <lv_anim_speed_to_time>
 8028308:	4602      	mov	r2, r0
 802830a:	f107 0308 	add.w	r3, r7, #8
 802830e:	4611      	mov	r1, r2
 8028310:	4618      	mov	r0, r3
 8028312:	f7fe fe2c 	bl	8026f6e <lv_anim_set_time>

            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8028316:	4967      	ldr	r1, [pc, #412]	; (80284b4 <lv_label_refr_text+0x730>)
 8028318:	6878      	ldr	r0, [r7, #4]
 802831a:	f7f9 ff8d 	bl	8022238 <lv_anim_get>
 802831e:	6778      	str	r0, [r7, #116]	; 0x74
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8028320:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028322:	2b00      	cmp	r3, #0
 8028324:	d002      	beq.n	802832c <lv_label_refr_text+0x5a8>
 8028326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802832a:	e000      	b.n	802832e <lv_label_refr_text+0x5aa>
 802832c:	2300      	movs	r3, #0
 802832e:	673b      	str	r3, [r7, #112]	; 0x70

            /*If a template animation exists, consider it's start delay and repeat delay*/
            if(anim_template) {
 8028330:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8028334:	2b00      	cmp	r3, #0
 8028336:	d008      	beq.n	802834a <lv_label_refr_text+0x5c6>
                a.act_time = anim_template->act_time;
 8028338:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802833c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802833e:	63bb      	str	r3, [r7, #56]	; 0x38
                a.repeat_delay = anim_template->repeat_delay;
 8028340:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8028344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028346:	647b      	str	r3, [r7, #68]	; 0x44
 8028348:	e00b      	b.n	8028362 <lv_label_refr_text+0x5de>
            }
            else if(act_time < a.time) {
 802834a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802834c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802834e:	429a      	cmp	r2, r3
 8028350:	da07      	bge.n	8028362 <lv_label_refr_text+0x5de>
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8028352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028354:	63bb      	str	r3, [r7, #56]	; 0x38
                a.early_apply = 0;
 8028356:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 802835a:	f36f 0300 	bfc	r3, #0, #1
 802835e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            }

            lv_anim_start(&a);
 8028362:	f107 0308 	add.w	r3, r7, #8
 8028366:	4618      	mov	r0, r3
 8028368:	f7f9 feae 	bl	80220c8 <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 802836c:	e155      	b.n	802861a <lv_label_refr_text+0x896>
        }
        else {
            /*Delete the offset animation if not required*/
            lv_anim_del(obj, set_ofs_y_anim);
 802836e:	4951      	ldr	r1, [pc, #324]	; (80284b4 <lv_label_refr_text+0x730>)
 8028370:	6878      	ldr	r0, [r7, #4]
 8028372:	f7f9 ff21 	bl	80221b8 <lv_anim_del>
            label->offset.y = 0;
 8028376:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802837a:	2200      	movs	r2, #0
 802837c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8028380:	e14b      	b.n	802861a <lv_label_refr_text+0x896>
        }
    }
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 8028382:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8028386:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802838a:	f003 0307 	and.w	r3, r3, #7
 802838e:	b2db      	uxtb	r3, r3
 8028390:	2b01      	cmp	r3, #1
 8028392:	f040 8142 	bne.w	802861a <lv_label_refr_text+0x896>
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 8028396:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 802839a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 802839e:	4618      	mov	r0, r3
 80283a0:	f7fe fda5 	bl	8026eee <lv_area_get_height>
 80283a4:	4603      	mov	r3, r0
 80283a6:	429c      	cmp	r4, r3
 80283a8:	dc05      	bgt.n	80283b6 <lv_label_refr_text+0x632>
            label->dot_end = LV_LABEL_DOT_END_INV;
 80283aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80283ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80283b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80283b4:	e131      	b.n	802861a <lv_label_refr_text+0x896>
        }
        else if(size.y <= lv_font_get_line_height(font)) { /*No dots are required for one-line texts*/
 80283b6:	f9b7 4056 	ldrsh.w	r4, [r7, #86]	; 0x56
 80283ba:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80283be:	f7fe fdad 	bl	8026f1c <lv_font_get_line_height>
 80283c2:	4603      	mov	r3, r0
 80283c4:	429c      	cmp	r4, r3
 80283c6:	dc05      	bgt.n	80283d4 <lv_label_refr_text+0x650>
            label->dot_end = LV_LABEL_DOT_END_INV;
 80283c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80283cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80283d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80283d2:	e122      	b.n	802861a <lv_label_refr_text+0x896>
        }
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 80283d4:	4b38      	ldr	r3, [pc, #224]	; (80284b8 <lv_label_refr_text+0x734>)
 80283d6:	681b      	ldr	r3, [r3, #0]
 80283d8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80283dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80283de:	4610      	mov	r0, r2
 80283e0:	4798      	blx	r3
 80283e2:	4603      	mov	r3, r0
 80283e4:	2b03      	cmp	r3, #3
 80283e6:	d805      	bhi.n	80283f4 <lv_label_refr_text+0x670>
            label->dot_end = LV_LABEL_DOT_END_INV;
 80283e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80283ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80283f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80283f2:	e112      	b.n	802861a <lv_label_refr_text+0x896>
        }
        else {
            lv_point_t p;
            lv_coord_t y_overed;
            p.x = lv_area_get_width(&txt_coords) -
 80283f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80283f8:	4618      	mov	r0, r3
 80283fa:	f7fe fd61 	bl	8026ec0 <lv_area_get_width>
 80283fe:	4603      	mov	r3, r0
 8028400:	b29c      	uxth	r4, r3
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 8028402:	222e      	movs	r2, #46	; 0x2e
 8028404:	212e      	movs	r1, #46	; 0x2e
 8028406:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 802840a:	f7f9 f887 	bl	802151c <lv_font_get_glyph_width>
 802840e:	4603      	mov	r3, r0
 8028410:	461a      	mov	r2, r3
 8028412:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8028416:	4413      	add	r3, r2
            p.x = lv_area_get_width(&txt_coords) -
 8028418:	b29b      	uxth	r3, r3
 802841a:	461a      	mov	r2, r3
 802841c:	009b      	lsls	r3, r3, #2
 802841e:	1ad3      	subs	r3, r2, r3
 8028420:	b29b      	uxth	r3, r3
 8028422:	4423      	add	r3, r4
 8028424:	b29b      	uxth	r3, r3
 8028426:	b21b      	sxth	r3, r3
 8028428:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
                  LV_LABEL_DOT_NUM; /*Shrink with dots*/
            p.y = lv_area_get_height(&txt_coords);
 802842c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8028430:	4618      	mov	r0, r3
 8028432:	f7fe fd5c 	bl	8026eee <lv_area_get_height>
 8028436:	4603      	mov	r3, r0
 8028438:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            y_overed = p.y %
 802843c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8028440:	461c      	mov	r4, r3
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 8028442:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8028446:	f7fe fd69 	bl	8026f1c <lv_font_get_line_height>
 802844a:	4603      	mov	r3, r0
 802844c:	461a      	mov	r2, r3
 802844e:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8028452:	4413      	add	r3, r2
            y_overed = p.y %
 8028454:	fb94 f2f3 	sdiv	r2, r4, r3
 8028458:	fb02 f303 	mul.w	r3, r2, r3
 802845c:	1ae3      	subs	r3, r4, r3
 802845e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
            if(y_overed >= lv_font_get_line_height(font)) {
 8028462:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8028466:	f7fe fd59 	bl	8026f1c <lv_font_get_line_height>
 802846a:	4603      	mov	r3, r0
 802846c:	461a      	mov	r2, r3
 802846e:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8028472:	4293      	cmp	r3, r2
 8028474:	db22      	blt.n	80284bc <lv_label_refr_text+0x738>
                p.y -= y_overed;
 8028476:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 802847a:	b29a      	uxth	r2, r3
 802847c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8028480:	1ad3      	subs	r3, r2, r3
 8028482:	b29b      	uxth	r3, r3
 8028484:	b21b      	sxth	r3, r3
 8028486:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                p.y += lv_font_get_line_height(font);
 802848a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 802848e:	f7fe fd45 	bl	8026f1c <lv_font_get_line_height>
 8028492:	4603      	mov	r3, r0
 8028494:	4619      	mov	r1, r3
 8028496:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 802849a:	b29a      	uxth	r2, r3
 802849c:	b28b      	uxth	r3, r1
 802849e:	4413      	add	r3, r2
 80284a0:	b29b      	uxth	r3, r3
 80284a2:	b21b      	sxth	r3, r3
 80284a4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80284a8:	e01c      	b.n	80284e4 <lv_label_refr_text+0x760>
 80284aa:	bf00      	nop
 80284ac:	55555556 	.word	0x55555556
 80284b0:	080287f1 	.word	0x080287f1
 80284b4:	08028817 	.word	0x08028817
 80284b8:	2000002c 	.word	0x2000002c
            }
            else {
                p.y -= y_overed;
 80284bc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80284c0:	b29a      	uxth	r2, r3
 80284c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80284c6:	1ad3      	subs	r3, r2, r3
 80284c8:	b29b      	uxth	r3, r3
 80284ca:	b21b      	sxth	r3, r3
 80284cc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
                p.y -= line_space;
 80284d0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80284d4:	b29a      	uxth	r2, r3
 80284d6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80284da:	1ad3      	subs	r3, r2, r3
 80284dc:	b29b      	uxth	r3, r3
 80284de:	b21b      	sxth	r3, r3
 80284e0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            }

            uint32_t letter_id = lv_label_get_letter_on(obj, &p);
 80284e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80284e8:	4619      	mov	r1, r3
 80284ea:	6878      	ldr	r0, [r7, #4]
 80284ec:	f7fe ff52 	bl	8027394 <lv_label_get_letter_on>
 80284f0:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

            /*Be sure there is space for the dots*/
            size_t txt_len = strlen(label->text);
 80284f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80284f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80284fa:	4618      	mov	r0, r3
 80284fc:	f7d7 fea6 	bl	800024c <strlen>
 8028500:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8028504:	4b49      	ldr	r3, [pc, #292]	; (802862c <lv_label_refr_text+0x8a8>)
 8028506:	681b      	ldr	r3, [r3, #0]
 8028508:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802850c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802850e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8028512:	4610      	mov	r0, r2
 8028514:	4798      	blx	r3
 8028516:	4603      	mov	r3, r0
 8028518:	64fb      	str	r3, [r7, #76]	; 0x4c
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 802851a:	e00d      	b.n	8028538 <lv_label_refr_text+0x7b4>
                _lv_txt_encoded_prev(label->text, &byte_id);
 802851c:	4b44      	ldr	r3, [pc, #272]	; (8028630 <lv_label_refr_text+0x8ac>)
 802851e:	681b      	ldr	r3, [r3, #0]
 8028520:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8028524:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8028526:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 802852a:	4610      	mov	r0, r2
 802852c:	4798      	blx	r3
                letter_id--;
 802852e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8028532:	3b01      	subs	r3, #1
 8028534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8028538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802853a:	3303      	adds	r3, #3
 802853c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8028540:	429a      	cmp	r2, r3
 8028542:	d3eb      	bcc.n	802851c <lv_label_refr_text+0x798>
            }

            /*Save letters under the dots and replace them with dots*/
            uint32_t byte_id_ori = byte_id;
 8028544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028546:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            uint32_t i;
            uint8_t len = 0;
 802854a:	2300      	movs	r3, #0
 802854c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8028550:	2300      	movs	r3, #0
 8028552:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8028556:	e026      	b.n	80285a6 <lv_label_refr_text+0x822>
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8028558:	4b36      	ldr	r3, [pc, #216]	; (8028634 <lv_label_refr_text+0x8b0>)
 802855a:	681b      	ldr	r3, [r3, #0]
 802855c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8028560:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8028562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028564:	440a      	add	r2, r1
 8028566:	4610      	mov	r0, r2
 8028568:	4798      	blx	r3
 802856a:	4603      	mov	r3, r0
 802856c:	461a      	mov	r2, r3
 802856e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8028572:	4413      	add	r3, r2
 8028574:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
                _lv_txt_encoded_next(label->text, &byte_id);
 8028578:	4b2f      	ldr	r3, [pc, #188]	; (8028638 <lv_label_refr_text+0x8b4>)
 802857a:	681b      	ldr	r3, [r3, #0]
 802857c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8028580:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8028582:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8028586:	4610      	mov	r0, r2
 8028588:	4798      	blx	r3
                if(len > LV_LABEL_DOT_NUM || byte_id > txt_len) {
 802858a:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 802858e:	2b03      	cmp	r3, #3
 8028590:	d80d      	bhi.n	80285ae <lv_label_refr_text+0x82a>
 8028592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8028594:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8028598:	429a      	cmp	r2, r3
 802859a:	d308      	bcc.n	80285ae <lv_label_refr_text+0x82a>
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 802859c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80285a0:	3301      	adds	r3, #1
 80285a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80285a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80285aa:	2b03      	cmp	r3, #3
 80285ac:	d9d4      	bls.n	8028558 <lv_label_refr_text+0x7d4>
                    break;
                }
            }

            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 80285ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80285b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80285b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80285b8:	4413      	add	r3, r2
 80285ba:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 80285be:	4619      	mov	r1, r3
 80285c0:	6878      	ldr	r0, [r7, #4]
 80285c2:	f000 f893 	bl	80286ec <lv_label_set_dot_tmp>
 80285c6:	4603      	mov	r3, r0
 80285c8:	2b00      	cmp	r3, #0
 80285ca:	d026      	beq.n	802861a <lv_label_refr_text+0x896>
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 80285cc:	2300      	movs	r3, #0
 80285ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80285d2:	e00f      	b.n	80285f4 <lv_label_refr_text+0x870>
                    label->text[byte_id_ori + i] = '.';
 80285d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80285d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80285da:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80285de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80285e2:	440b      	add	r3, r1
 80285e4:	4413      	add	r3, r2
 80285e6:	222e      	movs	r2, #46	; 0x2e
 80285e8:	701a      	strb	r2, [r3, #0]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 80285ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80285ee:	3301      	adds	r3, #1
 80285f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80285f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80285f8:	2b02      	cmp	r3, #2
 80285fa:	d9eb      	bls.n	80285d4 <lv_label_refr_text+0x850>
                }
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 80285fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8028600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028602:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8028606:	3303      	adds	r3, #3
 8028608:	4413      	add	r3, r2
 802860a:	2200      	movs	r2, #0
 802860c:	701a      	strb	r2, [r3, #0]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 802860e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8028612:	1cda      	adds	r2, r3, #3
 8028614:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8028618:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    else if(label->long_mode == LV_LABEL_LONG_CLIP) {
        /*Do nothing*/
    }

    lv_obj_invalidate(obj);
 802861a:	6878      	ldr	r0, [r7, #4]
 802861c:	f7e3 f8d3 	bl	800b7c6 <lv_obj_invalidate>
 8028620:	e000      	b.n	8028624 <lv_label_refr_text+0x8a0>
    if(label->text == NULL) return;
 8028622:	bf00      	nop
}
 8028624:	37cc      	adds	r7, #204	; 0xcc
 8028626:	46bd      	mov	sp, r7
 8028628:	bd90      	pop	{r4, r7, pc}
 802862a:	bf00      	nop
 802862c:	20000024 	.word	0x20000024
 8028630:	20000020 	.word	0x20000020
 8028634:	20000018 	.word	0x20000018
 8028638:	2000001c 	.word	0x2000001c

0802863c <lv_label_revert_dots>:


static void lv_label_revert_dots(lv_obj_t * obj)
{
 802863c:	b580      	push	{r7, lr}
 802863e:	b088      	sub	sp, #32
 8028640:	af00      	add	r7, sp, #0
 8028642:	6078      	str	r0, [r7, #4]

    lv_label_t * label = (lv_label_t *)obj;
 8028644:	687b      	ldr	r3, [r7, #4]
 8028646:	61bb      	str	r3, [r7, #24]

    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 8028648:	69bb      	ldr	r3, [r7, #24]
 802864a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802864e:	f003 0307 	and.w	r3, r3, #7
 8028652:	b2db      	uxtb	r3, r3
 8028654:	2b01      	cmp	r3, #1
 8028656:	d141      	bne.n	80286dc <lv_label_revert_dots+0xa0>
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 8028658:	69bb      	ldr	r3, [r7, #24]
 802865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802865c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8028660:	d03e      	beq.n	80286e0 <lv_label_revert_dots+0xa4>
    uint32_t letter_i = label->dot_end - LV_LABEL_DOT_NUM;
 8028662:	69bb      	ldr	r3, [r7, #24]
 8028664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028666:	3b03      	subs	r3, #3
 8028668:	617b      	str	r3, [r7, #20]
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 802866a:	4b1f      	ldr	r3, [pc, #124]	; (80286e8 <lv_label_revert_dots+0xac>)
 802866c:	681b      	ldr	r3, [r3, #0]
 802866e:	69ba      	ldr	r2, [r7, #24]
 8028670:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8028672:	6979      	ldr	r1, [r7, #20]
 8028674:	4610      	mov	r0, r2
 8028676:	4798      	blx	r3
 8028678:	6138      	str	r0, [r7, #16]

    /*Restore the characters*/
    uint8_t i      = 0;
 802867a:	2300      	movs	r3, #0
 802867c:	77fb      	strb	r3, [r7, #31]
    char * dot_tmp = lv_label_get_dot_tmp(obj);
 802867e:	6878      	ldr	r0, [r7, #4]
 8028680:	f000 f878 	bl	8028774 <lv_label_get_dot_tmp>
 8028684:	60f8      	str	r0, [r7, #12]
    while(label->text[byte_i + i] != '\0') {
 8028686:	e00d      	b.n	80286a4 <lv_label_revert_dots+0x68>
        label->text[byte_i + i] = dot_tmp[i];
 8028688:	7ffb      	ldrb	r3, [r7, #31]
 802868a:	68fa      	ldr	r2, [r7, #12]
 802868c:	441a      	add	r2, r3
 802868e:	69bb      	ldr	r3, [r7, #24]
 8028690:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8028692:	7ff8      	ldrb	r0, [r7, #31]
 8028694:	693b      	ldr	r3, [r7, #16]
 8028696:	4403      	add	r3, r0
 8028698:	440b      	add	r3, r1
 802869a:	7812      	ldrb	r2, [r2, #0]
 802869c:	701a      	strb	r2, [r3, #0]
        i++;
 802869e:	7ffb      	ldrb	r3, [r7, #31]
 80286a0:	3301      	adds	r3, #1
 80286a2:	77fb      	strb	r3, [r7, #31]
    while(label->text[byte_i + i] != '\0') {
 80286a4:	69bb      	ldr	r3, [r7, #24]
 80286a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80286a8:	7ff9      	ldrb	r1, [r7, #31]
 80286aa:	693b      	ldr	r3, [r7, #16]
 80286ac:	440b      	add	r3, r1
 80286ae:	4413      	add	r3, r2
 80286b0:	781b      	ldrb	r3, [r3, #0]
 80286b2:	2b00      	cmp	r3, #0
 80286b4:	d1e8      	bne.n	8028688 <lv_label_revert_dots+0x4c>
    }
    label->text[byte_i + i] = dot_tmp[i];
 80286b6:	7ffb      	ldrb	r3, [r7, #31]
 80286b8:	68fa      	ldr	r2, [r7, #12]
 80286ba:	441a      	add	r2, r3
 80286bc:	69bb      	ldr	r3, [r7, #24]
 80286be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80286c0:	7ff8      	ldrb	r0, [r7, #31]
 80286c2:	693b      	ldr	r3, [r7, #16]
 80286c4:	4403      	add	r3, r0
 80286c6:	440b      	add	r3, r1
 80286c8:	7812      	ldrb	r2, [r2, #0]
 80286ca:	701a      	strb	r2, [r3, #0]
    lv_label_dot_tmp_free(obj);
 80286cc:	6878      	ldr	r0, [r7, #4]
 80286ce:	f000 f86a 	bl	80287a6 <lv_label_dot_tmp_free>

    label->dot_end = LV_LABEL_DOT_END_INV;
 80286d2:	69bb      	ldr	r3, [r7, #24]
 80286d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80286d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80286da:	e002      	b.n	80286e2 <lv_label_revert_dots+0xa6>
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 80286dc:	bf00      	nop
 80286de:	e000      	b.n	80286e2 <lv_label_revert_dots+0xa6>
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 80286e0:	bf00      	nop
}
 80286e2:	3720      	adds	r7, #32
 80286e4:	46bd      	mov	sp, r7
 80286e6:	bd80      	pop	{r7, pc}
 80286e8:	20000024 	.word	0x20000024

080286ec <lv_label_set_dot_tmp>:
 * @param label pointer to label object
 * @param len Number of characters to store.
 * @return true on success.
 */
static bool lv_label_set_dot_tmp(lv_obj_t * obj, char * data, uint32_t len)
{
 80286ec:	b580      	push	{r7, lr}
 80286ee:	b086      	sub	sp, #24
 80286f0:	af00      	add	r7, sp, #0
 80286f2:	60f8      	str	r0, [r7, #12]
 80286f4:	60b9      	str	r1, [r7, #8]
 80286f6:	607a      	str	r2, [r7, #4]

    lv_label_t * label = (lv_label_t *)obj;
 80286f8:	68fb      	ldr	r3, [r7, #12]
 80286fa:	617b      	str	r3, [r7, #20]
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 80286fc:	68f8      	ldr	r0, [r7, #12]
 80286fe:	f000 f852 	bl	80287a6 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 8028702:	687b      	ldr	r3, [r7, #4]
 8028704:	2b04      	cmp	r3, #4
 8028706:	d922      	bls.n	802874e <lv_label_set_dot_tmp+0x62>
        /*Memory needs to be allocated. Allocates an additional byte
         *for a NULL-terminator so it can be copied.*/
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 8028708:	687b      	ldr	r3, [r7, #4]
 802870a:	3301      	adds	r3, #1
 802870c:	4618      	mov	r0, r3
 802870e:	f7fb fbf1 	bl	8023ef4 <lv_mem_alloc>
 8028712:	4602      	mov	r2, r0
 8028714:	697b      	ldr	r3, [r7, #20]
 8028716:	629a      	str	r2, [r3, #40]	; 0x28
        if(label->dot.tmp_ptr == NULL) {
 8028718:	697b      	ldr	r3, [r7, #20]
 802871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802871c:	2b00      	cmp	r3, #0
 802871e:	d101      	bne.n	8028724 <lv_label_set_dot_tmp+0x38>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
            return false;
 8028720:	2300      	movs	r3, #0
 8028722:	e023      	b.n	802876c <lv_label_set_dot_tmp+0x80>
        }
        lv_memcpy(label->dot.tmp_ptr, data, len);
 8028724:	697b      	ldr	r3, [r7, #20]
 8028726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028728:	687a      	ldr	r2, [r7, #4]
 802872a:	68b9      	ldr	r1, [r7, #8]
 802872c:	4618      	mov	r0, r3
 802872e:	f7fb fd6f 	bl	8024210 <lv_memcpy>
        label->dot.tmp_ptr[len] = '\0';
 8028732:	697b      	ldr	r3, [r7, #20]
 8028734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8028736:	687b      	ldr	r3, [r7, #4]
 8028738:	4413      	add	r3, r2
 802873a:	2200      	movs	r2, #0
 802873c:	701a      	strb	r2, [r3, #0]
        label->dot_tmp_alloc    = true;
 802873e:	697a      	ldr	r2, [r7, #20]
 8028740:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8028744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028748:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 802874c:	e00d      	b.n	802876a <lv_label_set_dot_tmp+0x7e>
    }
    else {
        /*Characters can be directly stored in object*/
        label->dot_tmp_alloc = false;
 802874e:	697a      	ldr	r2, [r7, #20]
 8028750:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8028754:	f36f 1386 	bfc	r3, #6, #1
 8028758:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
 802875c:	697b      	ldr	r3, [r7, #20]
 802875e:	3328      	adds	r3, #40	; 0x28
 8028760:	687a      	ldr	r2, [r7, #4]
 8028762:	68b9      	ldr	r1, [r7, #8]
 8028764:	4618      	mov	r0, r3
 8028766:	f7fb fd53 	bl	8024210 <lv_memcpy>
    }
    return true;
 802876a:	2301      	movs	r3, #1
}
 802876c:	4618      	mov	r0, r3
 802876e:	3718      	adds	r7, #24
 8028770:	46bd      	mov	sp, r7
 8028772:	bd80      	pop	{r7, pc}

08028774 <lv_label_get_dot_tmp>:
 * Get the stored dot_tmp characters
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * obj)
{
 8028774:	b480      	push	{r7}
 8028776:	b085      	sub	sp, #20
 8028778:	af00      	add	r7, sp, #0
 802877a:	6078      	str	r0, [r7, #4]
    lv_label_t * label = (lv_label_t *)obj;
 802877c:	687b      	ldr	r3, [r7, #4]
 802877e:	60fb      	str	r3, [r7, #12]
    if(label->dot_tmp_alloc) {
 8028780:	68fb      	ldr	r3, [r7, #12]
 8028782:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8028786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802878a:	b2db      	uxtb	r3, r3
 802878c:	2b00      	cmp	r3, #0
 802878e:	d002      	beq.n	8028796 <lv_label_get_dot_tmp+0x22>
        return label->dot.tmp_ptr;
 8028790:	68fb      	ldr	r3, [r7, #12]
 8028792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028794:	e001      	b.n	802879a <lv_label_get_dot_tmp+0x26>
    }
    else {
        return label->dot.tmp;
 8028796:	68fb      	ldr	r3, [r7, #12]
 8028798:	3328      	adds	r3, #40	; 0x28
    }
}
 802879a:	4618      	mov	r0, r3
 802879c:	3714      	adds	r7, #20
 802879e:	46bd      	mov	sp, r7
 80287a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287a4:	4770      	bx	lr

080287a6 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
 80287a6:	b580      	push	{r7, lr}
 80287a8:	b084      	sub	sp, #16
 80287aa:	af00      	add	r7, sp, #0
 80287ac:	6078      	str	r0, [r7, #4]
    lv_label_t * label = (lv_label_t *)obj;
 80287ae:	687b      	ldr	r3, [r7, #4]
 80287b0:	60fb      	str	r3, [r7, #12]
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 80287b2:	68fb      	ldr	r3, [r7, #12]
 80287b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80287b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80287bc:	b2db      	uxtb	r3, r3
 80287be:	2b00      	cmp	r3, #0
 80287c0:	d008      	beq.n	80287d4 <lv_label_dot_tmp_free+0x2e>
 80287c2:	68fb      	ldr	r3, [r7, #12]
 80287c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80287c6:	2b00      	cmp	r3, #0
 80287c8:	d004      	beq.n	80287d4 <lv_label_dot_tmp_free+0x2e>
        lv_mem_free(label->dot.tmp_ptr);
 80287ca:	68fb      	ldr	r3, [r7, #12]
 80287cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80287ce:	4618      	mov	r0, r3
 80287d0:	f7fb fbc0 	bl	8023f54 <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 80287d4:	68fa      	ldr	r2, [r7, #12]
 80287d6:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 80287da:	f36f 1386 	bfc	r3, #6, #1
 80287de:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
 80287e2:	68fb      	ldr	r3, [r7, #12]
 80287e4:	2200      	movs	r2, #0
 80287e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80287e8:	bf00      	nop
 80287ea:	3710      	adds	r7, #16
 80287ec:	46bd      	mov	sp, r7
 80287ee:	bd80      	pop	{r7, pc}

080287f0 <set_ofs_x_anim>:


static void set_ofs_x_anim(void * obj, int32_t v)
{
 80287f0:	b580      	push	{r7, lr}
 80287f2:	b084      	sub	sp, #16
 80287f4:	af00      	add	r7, sp, #0
 80287f6:	6078      	str	r0, [r7, #4]
 80287f8:	6039      	str	r1, [r7, #0]
    lv_label_t * label = (lv_label_t *)obj;
 80287fa:	687b      	ldr	r3, [r7, #4]
 80287fc:	60fb      	str	r3, [r7, #12]
    label->offset.x    = v;
 80287fe:	683b      	ldr	r3, [r7, #0]
 8028800:	b21a      	sxth	r2, r3
 8028802:	68fb      	ldr	r3, [r7, #12]
 8028804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    lv_obj_invalidate(obj);
 8028808:	6878      	ldr	r0, [r7, #4]
 802880a:	f7e2 ffdc 	bl	800b7c6 <lv_obj_invalidate>
}
 802880e:	bf00      	nop
 8028810:	3710      	adds	r7, #16
 8028812:	46bd      	mov	sp, r7
 8028814:	bd80      	pop	{r7, pc}

08028816 <set_ofs_y_anim>:

static void set_ofs_y_anim(void * obj, int32_t v)
{
 8028816:	b580      	push	{r7, lr}
 8028818:	b084      	sub	sp, #16
 802881a:	af00      	add	r7, sp, #0
 802881c:	6078      	str	r0, [r7, #4]
 802881e:	6039      	str	r1, [r7, #0]
    lv_label_t * label = (lv_label_t *)obj;
 8028820:	687b      	ldr	r3, [r7, #4]
 8028822:	60fb      	str	r3, [r7, #12]
    label->offset.y    = v;
 8028824:	683b      	ldr	r3, [r7, #0]
 8028826:	b21a      	sxth	r2, r3
 8028828:	68fb      	ldr	r3, [r7, #12]
 802882a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    lv_obj_invalidate(obj);
 802882e:	6878      	ldr	r0, [r7, #4]
 8028830:	f7e2 ffc9 	bl	800b7c6 <lv_obj_invalidate>
}
 8028834:	bf00      	nop
 8028836:	3710      	adds	r7, #16
 8028838:	46bd      	mov	sp, r7
 802883a:	bd80      	pop	{r7, pc}

0802883c <__libc_init_array>:
 802883c:	b570      	push	{r4, r5, r6, lr}
 802883e:	4d0d      	ldr	r5, [pc, #52]	; (8028874 <__libc_init_array+0x38>)
 8028840:	4c0d      	ldr	r4, [pc, #52]	; (8028878 <__libc_init_array+0x3c>)
 8028842:	1b64      	subs	r4, r4, r5
 8028844:	10a4      	asrs	r4, r4, #2
 8028846:	2600      	movs	r6, #0
 8028848:	42a6      	cmp	r6, r4
 802884a:	d109      	bne.n	8028860 <__libc_init_array+0x24>
 802884c:	4d0b      	ldr	r5, [pc, #44]	; (802887c <__libc_init_array+0x40>)
 802884e:	4c0c      	ldr	r4, [pc, #48]	; (8028880 <__libc_init_array+0x44>)
 8028850:	f000 f836 	bl	80288c0 <_init>
 8028854:	1b64      	subs	r4, r4, r5
 8028856:	10a4      	asrs	r4, r4, #2
 8028858:	2600      	movs	r6, #0
 802885a:	42a6      	cmp	r6, r4
 802885c:	d105      	bne.n	802886a <__libc_init_array+0x2e>
 802885e:	bd70      	pop	{r4, r5, r6, pc}
 8028860:	f855 3b04 	ldr.w	r3, [r5], #4
 8028864:	4798      	blx	r3
 8028866:	3601      	adds	r6, #1
 8028868:	e7ee      	b.n	8028848 <__libc_init_array+0xc>
 802886a:	f855 3b04 	ldr.w	r3, [r5], #4
 802886e:	4798      	blx	r3
 8028870:	3601      	adds	r6, #1
 8028872:	e7f2      	b.n	802885a <__libc_init_array+0x1e>
 8028874:	0802fc1c 	.word	0x0802fc1c
 8028878:	0802fc1c 	.word	0x0802fc1c
 802887c:	0802fc1c 	.word	0x0802fc1c
 8028880:	0802fc20 	.word	0x0802fc20

08028884 <memcpy>:
 8028884:	440a      	add	r2, r1
 8028886:	4291      	cmp	r1, r2
 8028888:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 802888c:	d100      	bne.n	8028890 <memcpy+0xc>
 802888e:	4770      	bx	lr
 8028890:	b510      	push	{r4, lr}
 8028892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028896:	f803 4f01 	strb.w	r4, [r3, #1]!
 802889a:	4291      	cmp	r1, r2
 802889c:	d1f9      	bne.n	8028892 <memcpy+0xe>
 802889e:	bd10      	pop	{r4, pc}

080288a0 <memset>:
 80288a0:	4402      	add	r2, r0
 80288a2:	4603      	mov	r3, r0
 80288a4:	4293      	cmp	r3, r2
 80288a6:	d100      	bne.n	80288aa <memset+0xa>
 80288a8:	4770      	bx	lr
 80288aa:	f803 1b01 	strb.w	r1, [r3], #1
 80288ae:	e7f9      	b.n	80288a4 <memset+0x4>

080288b0 <strcpy>:
 80288b0:	4603      	mov	r3, r0
 80288b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80288b6:	f803 2b01 	strb.w	r2, [r3], #1
 80288ba:	2a00      	cmp	r2, #0
 80288bc:	d1f9      	bne.n	80288b2 <strcpy+0x2>
 80288be:	4770      	bx	lr

080288c0 <_init>:
 80288c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80288c2:	bf00      	nop
 80288c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80288c6:	bc08      	pop	{r3}
 80288c8:	469e      	mov	lr, r3
 80288ca:	4770      	bx	lr

080288cc <_fini>:
 80288cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80288ce:	bf00      	nop
 80288d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80288d2:	bc08      	pop	{r3}
 80288d4:	469e      	mov	lr, r3
 80288d6:	4770      	bx	lr
